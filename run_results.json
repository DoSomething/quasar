{"results": [{"node": {"raw_sql": "SELECT\n    COALESCE(\n        event #>>'{data, email_id}',\n        event #>>'{data, variables, email_id}'\n    ) AS email_id,\n    event #>>'{data, customer_id}' AS customer_id,\n    event #>>'{data, email_address}' AS email_address,\n    CAST(\n        event #>>'{data, template_id}' AS INTEGER\n    ) AS template_id,\n    event ->> 'event_id' AS event_id,\n    TO_TIMESTAMP(\n        CAST(event ->> 'timestamp' AS INTEGER)\n    ) AS \"timestamp\",\n    event ->> 'event_type' AS event_type,\n    event #>>'{data, variables, campaign, id}' AS cio_campaign_id,\n    event #>>'{data, variables, campaign, name}' AS cio_campaign_name,\n    event #>>'{data, variables, campaign, type}' AS cio_campaign_type,\n    event #>>'{data, message_id}' as cio_message_id,\n    event #>>'{data, message_name}' as cio_message_name\nFROM\n    {{ source('cio', 'event_log') }} cel\nWHERE\n    event ->> 'event_type' IN ('customer_subscribed', 'customer_unsubscribed')\nUNION\nSELECT\n    email_id,\n    customer_id,\n    email_address,\n    template_id,\n    event_id,\n    \"timestamp\",\n    event_type,\n    NULL AS cio_campaign_id,\n    NULL AS cio_campaign_name,\n    NULL AS cio_campaign_type,\n    NULL AS cio_message_id,\n    NULL AS cio_message_name\nFROM\n    {{ source('cio_historical', 'cio_customer_event') }} cceo\nWHERE\n    -- Date we re-started saving raw C.io events to the event_log table\n    \"timestamp\" < '2020-04-01'", "compiled": true, "database": "quasar_prod_warehouse", "schema": "public", "fqn": ["ds_dbt", "cio", "cio_customer_event"], "unique_id": "model.ds_dbt.cio_customer_event", "package_name": "ds_dbt", "root_path": "/home/runner/work/quasar/quasar/quasar/dbt", "path": "cio/cio_customer_event.sql", "original_file_path": "models/cio/cio_customer_event.sql", "name": "cio_customer_event", "resource_type": "model", "alias": "cio_customer_event", "checksum": {"name": "sha256", "checksum": "12b02b86837616004494095b7ce47e5976b6365e8bf8a9017f494389a5fa7938"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [{"sql": "CREATE INDEX {{ get_index_name(this, 'event_id') }} (event_id)", "transaction": true, "index": null}, {"sql": "CREATE INDEX {{ get_index_name(this, 'timestamp_nulls_first') }} (timestamp nulls first)", "transaction": true, "index": null}, {"sql": "CREATE INDEX {{ get_index_name(this, 'timestamp_nulls_first_event_type') }} (timestamp nulls first, event_type)", "transaction": true, "index": null}, {"sql": "{{ grant_select_to(this, ['dsanalyst', 'looker']) }}", "transaction": true, "index": null}], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": ["cio"], "full_refresh": null}, "tags": ["cio"], "refs": [], "sources": [["cio", "event_log"], ["cio_historical", "cio_customer_event"]], "depends_on": {"macros": ["macro.ds_dbt.get_index_name", "macro.ds_dbt.grant_select_to"], "nodes": ["source.ds_dbt.cio.event_log", "source.ds_dbt.cio_historical.cio_customer_event"]}, "description": "Table containing Cio customer events, e.g. user_unsubscribe.", "columns": {"email_id": {"name": "email_id", "description": "Unique message id (each individual message sent from Customer.io has a different \"email_id\"); can also be found in the unsubscribe link URL", "meta": {}, "data_type": null, "quote": null, "tags": []}, "customer_id": {"name": "customer_id", "description": "user id (can be retrieved from the person profile). Only present if the person is still active (not included if the person has been deleted).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "email_address": {"name": "email_address", "description": "\"To\" email address", "meta": {}, "data_type": null, "quote": null, "tags": []}, "template_id": {"name": "template_id", "description": "internal attribute, each email inside a campaign can have multiple template ids depending on the changes made over time. You can view it in the UI by filtering for a specific email under Email Log. For example: https://fly.customer.io/env/51831/email_logs?campaign=139744&template=343216\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "event_id": {"name": "event_id", "description": "internal attribute; id associated with the email_type action", "meta": {}, "data_type": null, "quote": null, "tags": []}, "timestamp": {"name": "timestamp", "description": "date and time when the event took place in unix (seconds since epoch) format", "meta": {}, "data_type": null, "quote": null, "tags": []}, "event_type": {"name": "event_type", "description": "type of event (\"email_drafted\", \"email_sent\", etc.)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cio_campaign_id": {"name": "cio_campaign_id", "description": "refer to the transactional, segment-triggered or newsletter campaign that generated the email", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cio_campaign_name": {"name": "cio_campaign_name", "description": "refer to the transactional, segment-triggered or newsletter campaign that generated the email", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cio_campaign_type": {"name": "cio_campaign_type", "description": "TBD", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cio_message_id": {"name": "cio_message_id", "description": "campaign email id; can be found in the campaign URL after emails/ (e.g. https://fly.customer.io/env/51831/v2/composer/emails/225039)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cio_message_name": {"name": "cio_message_name", "description": "the name of the campaign email", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/cio/schema.yml", "build_path": "../../docs/compiled/ds_dbt/models/cio/cio_customer_event.sql", "deferred": false, "compiled_sql": "SELECT\n    COALESCE(\n        event #>>'{data, email_id}',\n        event #>>'{data, variables, email_id}'\n    ) AS email_id,\n    event #>>'{data, customer_id}' AS customer_id,\n    event #>>'{data, email_address}' AS email_address,\n    CAST(\n        event #>>'{data, template_id}' AS INTEGER\n    ) AS template_id,\n    event ->> 'event_id' AS event_id,\n    TO_TIMESTAMP(\n        CAST(event ->> 'timestamp' AS INTEGER)\n    ) AS \"timestamp\",\n    event ->> 'event_type' AS event_type,\n    event #>>'{data, variables, campaign, id}' AS cio_campaign_id,\n    event #>>'{data, variables, campaign, name}' AS cio_campaign_name,\n    event #>>'{data, variables, campaign, type}' AS cio_campaign_type,\n    event #>>'{data, message_id}' as cio_message_id,\n    event #>>'{data, message_name}' as cio_message_name\nFROM\n    \"quasar_prod_warehouse\".\"cio\".\"event_log\" cel\nWHERE\n    event ->> 'event_type' IN ('customer_subscribed', 'customer_unsubscribed')\nUNION\nSELECT\n    email_id,\n    customer_id,\n    email_address,\n    template_id,\n    event_id,\n    \"timestamp\",\n    event_type,\n    NULL AS cio_campaign_id,\n    NULL AS cio_campaign_name,\n    NULL AS cio_campaign_type,\n    NULL AS cio_message_id,\n    NULL AS cio_message_name\nFROM\n    \"quasar_prod_warehouse\".\"historical_analytics\".\"cio_customer_event\" cceo\nWHERE\n    -- Date we re-started saving raw C.io events to the event_log table\n    \"timestamp\" < '2020-04-01'", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "SELECT\n    COALESCE(\n        event #>>'{data, email_id}',\n        event #>>'{data, variables, email_id}'\n    ) AS email_id,\n    event #>>'{data, customer_id}' AS customer_id,\n    event #>>'{data, email_address}' AS email_address,\n    CAST(\n        event #>>'{data, template_id}' AS INTEGER\n    ) AS template_id,\n    event ->> 'event_id' AS event_id,\n    TO_TIMESTAMP(\n        CAST(event ->> 'timestamp' AS INTEGER)\n    ) AS \"timestamp\",\n    event ->> 'event_type' AS event_type,\n    event #>>'{data, variables, campaign, id}' AS cio_campaign_id,\n    event #>>'{data, variables, campaign, name}' AS cio_campaign_name,\n    event #>>'{data, variables, campaign, type}' AS cio_campaign_type,\n    event #>>'{data, message_id}' as cio_message_id,\n    event #>>'{data, message_name}' as cio_message_name\nFROM\n    \"quasar_prod_warehouse\".\"cio\".\"event_log\" cel\nWHERE\n    event ->> 'event_type' IN ('customer_subscribed', 'customer_unsubscribed')\nUNION\nSELECT\n    email_id,\n    customer_id,\n    email_address,\n    template_id,\n    event_id,\n    \"timestamp\",\n    event_type,\n    NULL AS cio_campaign_id,\n    NULL AS cio_campaign_name,\n    NULL AS cio_campaign_type,\n    NULL AS cio_message_id,\n    NULL AS cio_message_name\nFROM\n    \"quasar_prod_warehouse\".\"historical_analytics\".\"cio_customer_event\" cceo\nWHERE\n    -- Date we re-started saving raw C.io events to the event_log table\n    \"timestamp\" < '2020-04-01'"}, "error": null, "status": null, "execution_time": 0.03380417823791504, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-02-23T21:28:54.172463Z", "completed_at": "2021-02-23T21:28:54.204921Z"}, {"name": "execute", "started_at": "2021-02-23T21:28:54.205214Z", "completed_at": "2021-02-23T21:28:54.205230Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "SELECT\n\tnus._id AS northstar_id,\n\tnus.country,\n\tnus.club_id,\n\tnus.birthdate,\n\tnus.drupal_id::VARCHAR,\n\tnus.email_subscription_status::int::bool,\n\tnus.created_at,\n\tnus.addr_zip,\n\tnus.\"language\",\n\tnus.\"source\",\n\tnus.updated_at,\n\tnus.CAMPAIGNS::jsonb,\n\tnus.audit::jsonb,\n\tnus.first_name,\n\tnus.email,\n\tnus.last_name,\n\tnus.addr_state,\n\tnus.addr_street_2,\n\tnus.addr_street_1,\n\tnus.addr_city,\n\tnus.\"role\",\n\tnus.sms_status,\n\tnus.last_authenticated_at,\n\tnus.last_accessed_at,\n\tnus.mobile,\n\tnus.cio_backfilled,\n\tnus.addr_source,\n\tnus.source_detail,\n\tnus.last_messaged_at,\n\tnus.email_subscription_topics::jsonb,\n\tnus.sms_paused,\n\tnus.voting_plan_status,\n\tnus.voting_plan_time_of_day,\n\tnus.voting_plan_method_of_transport,\n\tnus.voting_plan_attending_with,\n\tnus.voter_registration_status,\n\tnus.facebook_id::varchar,\n\tnus.deleted_at::jsonb,\n\tnus.feature_flags::jsonb,\n\tnus.dbt_scd_id,\n\tnus.dbt_updated_at,\n\tnus.dbt_valid_from,\n\tnus.dbt_valid_to,\n\tnus.google_id,\n\tnus.causes::jsonb,\n\tnus.school_id,\n\tnus.referrer_user_id\nFROM {{ source('northstar', 'northstar_users_snapshot') }} nus\nUNION ALL\nSELECT\n\tnhu.id,\n\tnhu.country,\n\tNULL AS club_id,\n\tnhu.birthdate,\n\tnhu.drupal_id,\n\tnhu.email_subscription_status,\n\tnhu.created_at,\n\tnhu.addr_zip,\n\tnhu.\"language\",\n\tnhu.\"source\",\n\tnhu.updated_at,\n\tNULL AS CAMPAIGNS,\n\tNULL AS AUDIT,\n\tnhu.first_name,\n\tnhu.email,\n\tnhu.last_name,\n\tnhu.addr_state,\n\tnhu.addr_street2,\n\tnhu.addr_street1,\n\tnhu.addr_city,\n\tnhu.\"role\",\n\tnhu.sms_status,\n\tnhu.last_authenticated_at,\n\tnhu.last_accessed_at,\n\tnhu.mobile,\n\tNULL AS cio_backfilled,\n\tnhu.addr_source,\n\tnhu.source_detail,\n\tnhu.last_messaged_at,\n\tNULL AS email_subscription_topics,\n\tNULL AS sms_paused,\n\tNULL AS voting_plan_status,\n\tNULL AS voting_plan_time_of_day,\n\tNULL AS voting_plan_method_of_transport,\n\tNULL AS voting_plan_attending_with,\n\tNULL AS voter_registration_status,\n\tnhu.facebook_id,\n\tNULL AS DELETED_AT,\n\tnhu.feature_flags::jsonb,\n\tNULL AS dbt_scd_id,\n\tNULL AS dbt_updated_at,\n\tNULL AS dbt_valid_from,\n\tNULL AS dbt_valid_to,\n\tNULL AS google_id,\n\tNULL AS causes,\n\tnhu.school_id,\n\tNULL AS referrer_user_id\nFROM {{ source('northstar_historical', 'users') }} nhu", "compiled": true, "database": "quasar_prod_warehouse", "schema": "public", "fqn": ["ds_dbt", "users_table", "northstar_users_raw"], "unique_id": "model.ds_dbt.northstar_users_raw", "package_name": "ds_dbt", "root_path": "/home/runner/work/quasar/quasar/quasar/dbt", "path": "users_table/northstar_users_raw.sql", "original_file_path": "models/users_table/northstar_users_raw.sql", "name": "northstar_users_raw", "resource_type": "model", "alias": "northstar_users_raw", "checksum": {"name": "sha256", "checksum": "05dd08d57b9ce89721aea08ced49db91168f0ba0a4fc85a8499b0266fb43f25a"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [{"sql": "CREATE INDEX {{ get_index_name(this, 'northstar_id_updated_at') }} (northstar_id, updated_at)", "transaction": true, "index": null}, {"sql": "CREATE INDEX {{ get_index_name(this, 'northstar_id_desc_updated_at_desc_dbt_scd_id_desc') }} (northstar_id DESC, updated_at DESC, dbt_scd_id DESC)", "transaction": true, "index": null}, {"sql": "{{ grant_select_to(this, ['dsanalyst', 'looker', 'public']) }}", "transaction": true, "index": null}], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": "northstar_users_raw", "schema": null, "database": null, "tags": ["users_table"], "full_refresh": null}, "tags": ["users_table"], "refs": [], "sources": [["northstar", "northstar_users_snapshot"], ["northstar_historical", "users"]], "depends_on": {"macros": ["macro.ds_dbt.get_index_name", "macro.ds_dbt.grant_select_to"], "nodes": ["source.ds_dbt.northstar.northstar_users_snapshot", "source.ds_dbt.northstar_historical.users"]}, "description": "A table containing aggregated user data.", "columns": {"northstar_id": {"name": "northstar_id", "description": "The Northstar ID of the user who generated the event.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "country": {"name": "country", "description": "User's country", "meta": {}, "data_type": null, "quote": null, "tags": []}, "club_id": {"name": "club_id", "description": "Club id", "meta": {}, "data_type": null, "quote": null, "tags": []}, "birthdate": {"name": "birthdate", "description": "User's birthdate", "meta": {}, "data_type": null, "quote": null, "tags": []}, "drupal_id": {"name": "drupal_id", "description": "Old Drupal user ID", "meta": {}, "data_type": null, "quote": null, "tags": []}, "email_subscription_status": {"name": "email_subscription_status", "description": "Email subscription status of the user", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "When the item was created in UTC (eg. 2018-01-01 12:00:00)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "addr_zip": {"name": "addr_zip", "description": "Postal code where the action takes place", "meta": {}, "data_type": null, "quote": null, "tags": []}, "language": {"name": "language", "description": "User's language", "meta": {}, "data_type": null, "quote": null, "tags": []}, "source": {"name": "source", "description": "Source of the URL (e.g. SMS, web), origin of the post (e.g. phoenix-web, phoenix-ashes, sms), or source where user was acquired. (e.g. sms, phoenix-next)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "When the item was updated in UTC (eg. 2018-01-01 12:00:00)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaigns": {"name": "campaigns", "description": "Campaigns a user is signed up for.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "audit": {"name": "audit", "description": "A very useful field with data containing information about changes to a user, e.g. timestamps when the user subscribed and unsubscribed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "first_name": {"name": "first_name", "description": "User's first name", "meta": {}, "data_type": null, "quote": null, "tags": []}, "email": {"name": "email", "description": "Email address of the user.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_name": {"name": "last_name", "description": "User's last name", "meta": {}, "data_type": null, "quote": null, "tags": []}, "addr_state": {"name": "addr_state", "description": "User's state", "meta": {}, "data_type": null, "quote": null, "tags": []}, "addr_street_2": {"name": "addr_street_2", "description": "Second line of user's street address", "meta": {}, "data_type": null, "quote": null, "tags": []}, "addr_street_1": {"name": "addr_street_1", "description": "First line of user's street address", "meta": {}, "data_type": null, "quote": null, "tags": []}, "addr_city": {"name": "addr_city", "description": "User's city", "meta": {}, "data_type": null, "quote": null, "tags": []}, "role": {"name": "role", "description": "User's role, e.g. user, staff", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sms_status": {"name": "sms_status", "description": "Current SMS status. (e.g. undeliverable, unknown)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_authenticated_at": {"name": "last_authenticated_at", "description": "Date time in UTC when user last logged in to Northstar", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_accessed": {"name": "last_accessed", "description": "Date time in UTC when user last access the website", "meta": {}, "data_type": null, "quote": null, "tags": []}, "mobile": {"name": "mobile", "description": "Users's mobile phone number", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cio_backfilled": {"name": "cio_backfilled", "description": "Whether this user's data was backfilled from CIO", "meta": {}, "data_type": null, "quote": null, "tags": []}, "addr_source": {"name": "addr_source", "description": "Where the user submitted their address, e.g. sms, GDPR", "meta": {}, "data_type": null, "quote": null, "tags": []}, "source_detail": {"name": "source_detail", "description": "Details of the origin of the user. (e.g. tell_a_friend, other, opt_in_path/197981)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_messaged_at": {"name": "last_messaged_at", "description": "Date time in UTC when user was last sent a message via SMS or email", "meta": {}, "data_type": null, "quote": null, "tags": []}, "email_subscription_topics": {"name": "email_subscription_topics", "description": "Email subscription topics correspond to categories in CIO in which the user is interested. e.g. lifestyle, community, scholarship", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sms_paused": {"name": "sms_paused", "description": "Whether we've paused sending sms messages to the user.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "voting_plan_status": {"name": "voting_plan_status", "description": "The indication of the user's plan to vote, e.g. voting, not_voting, cant_vote", "meta": {}, "data_type": null, "quote": null, "tags": []}, "voting_plan_time_of_day": {"name": "voting_plan_time_of_day", "description": "The time of day when the user plans to vote, e.g morning, afternoon, evening", "meta": {}, "data_type": null, "quote": null, "tags": []}, "voting_plan_method_of_transport": {"name": "voting_plan_method_of_transport", "description": "How the user plans to get to their polling place. e.g. walk, drive", "meta": {}, "data_type": null, "quote": null, "tags": []}, "voting_plan_attending_with": {"name": "voting_plan_attending_with", "description": "With Whom the user plans to go voting, e.g. family, friends, alone", "meta": {}, "data_type": null, "quote": null, "tags": []}, "voter_registration_status": {"name": "voter_registration_status", "description": "User's registration status. (e.g. registration_complete, confirmed, uncertain)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "facebook_id": {"name": "facebook_id", "description": "User's facebook id", "meta": {}, "data_type": null, "quote": null, "tags": []}, "deleted_at": {"name": "deleted_at", "description": "Date time in UTC when a user deleted their post.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "feature_flags": {"name": "feature_flags", "description": "JSON containing info on features like badges and refer-a-friend.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dbt_scd_id": {"name": "dbt_scd_id", "description": "DBT snapshot table data. A unique key generated for each snapshotted record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dbt_updated_at": {"name": "dbt_updated_at", "description": "DBT snapshot table data. The updated_at timestamp of the source record when this snapshot row was inserted.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dbt_valid_from": {"name": "dbt_valid_from", "description": "DBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this snapshot row was first inserted", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dbt_valid_to": {"name": "dbt_valid_to", "description": "DBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this row row became invalidated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "google_id": {"name": "google_id", "description": "User's Google ID obtained from login.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "causes": {"name": "causes", "description": "Causes in which a user is interested. e.g. animal welfare, education, mental_health", "meta": {}, "data_type": null, "quote": null, "tags": []}, "school_id": {"name": "school_id", "description": "Unique identifier for the user's school. This info comes from the school finder.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/users_table/schema.yml", "build_path": "../../docs/compiled/ds_dbt/models/users_table/northstar_users_raw.sql", "deferred": false, "compiled_sql": "SELECT\n\tnus._id AS northstar_id,\n\tnus.country,\n\tnus.club_id,\n\tnus.birthdate,\n\tnus.drupal_id::VARCHAR,\n\tnus.email_subscription_status::int::bool,\n\tnus.created_at,\n\tnus.addr_zip,\n\tnus.\"language\",\n\tnus.\"source\",\n\tnus.updated_at,\n\tnus.CAMPAIGNS::jsonb,\n\tnus.audit::jsonb,\n\tnus.first_name,\n\tnus.email,\n\tnus.last_name,\n\tnus.addr_state,\n\tnus.addr_street_2,\n\tnus.addr_street_1,\n\tnus.addr_city,\n\tnus.\"role\",\n\tnus.sms_status,\n\tnus.last_authenticated_at,\n\tnus.last_accessed_at,\n\tnus.mobile,\n\tnus.cio_backfilled,\n\tnus.addr_source,\n\tnus.source_detail,\n\tnus.last_messaged_at,\n\tnus.email_subscription_topics::jsonb,\n\tnus.sms_paused,\n\tnus.voting_plan_status,\n\tnus.voting_plan_time_of_day,\n\tnus.voting_plan_method_of_transport,\n\tnus.voting_plan_attending_with,\n\tnus.voter_registration_status,\n\tnus.facebook_id::varchar,\n\tnus.deleted_at::jsonb,\n\tnus.feature_flags::jsonb,\n\tnus.dbt_scd_id,\n\tnus.dbt_updated_at,\n\tnus.dbt_valid_from,\n\tnus.dbt_valid_to,\n\tnus.google_id,\n\tnus.causes::jsonb,\n\tnus.school_id,\n\tnus.referrer_user_id\nFROM \"quasar_prod_warehouse\".\"northstar_ft_userapi\".\"northstar_users_snapshot\" nus\nUNION ALL\nSELECT\n\tnhu.id,\n\tnhu.country,\n\tNULL AS club_id,\n\tnhu.birthdate,\n\tnhu.drupal_id,\n\tnhu.email_subscription_status,\n\tnhu.created_at,\n\tnhu.addr_zip,\n\tnhu.\"language\",\n\tnhu.\"source\",\n\tnhu.updated_at,\n\tNULL AS CAMPAIGNS,\n\tNULL AS AUDIT,\n\tnhu.first_name,\n\tnhu.email,\n\tnhu.last_name,\n\tnhu.addr_state,\n\tnhu.addr_street2,\n\tnhu.addr_street1,\n\tnhu.addr_city,\n\tnhu.\"role\",\n\tnhu.sms_status,\n\tnhu.last_authenticated_at,\n\tnhu.last_accessed_at,\n\tnhu.mobile,\n\tNULL AS cio_backfilled,\n\tnhu.addr_source,\n\tnhu.source_detail,\n\tnhu.last_messaged_at,\n\tNULL AS email_subscription_topics,\n\tNULL AS sms_paused,\n\tNULL AS voting_plan_status,\n\tNULL AS voting_plan_time_of_day,\n\tNULL AS voting_plan_method_of_transport,\n\tNULL AS voting_plan_attending_with,\n\tNULL AS voter_registration_status,\n\tnhu.facebook_id,\n\tNULL AS DELETED_AT,\n\tnhu.feature_flags::jsonb,\n\tNULL AS dbt_scd_id,\n\tNULL AS dbt_updated_at,\n\tNULL AS dbt_valid_from,\n\tNULL AS dbt_valid_to,\n\tNULL AS google_id,\n\tNULL AS causes,\n\tnhu.school_id,\n\tNULL AS referrer_user_id\nFROM \"quasar_prod_warehouse\".\"historical_analytics\".\"users\" nhu", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "SELECT\n\tnus._id AS northstar_id,\n\tnus.country,\n\tnus.club_id,\n\tnus.birthdate,\n\tnus.drupal_id::VARCHAR,\n\tnus.email_subscription_status::int::bool,\n\tnus.created_at,\n\tnus.addr_zip,\n\tnus.\"language\",\n\tnus.\"source\",\n\tnus.updated_at,\n\tnus.CAMPAIGNS::jsonb,\n\tnus.audit::jsonb,\n\tnus.first_name,\n\tnus.email,\n\tnus.last_name,\n\tnus.addr_state,\n\tnus.addr_street_2,\n\tnus.addr_street_1,\n\tnus.addr_city,\n\tnus.\"role\",\n\tnus.sms_status,\n\tnus.last_authenticated_at,\n\tnus.last_accessed_at,\n\tnus.mobile,\n\tnus.cio_backfilled,\n\tnus.addr_source,\n\tnus.source_detail,\n\tnus.last_messaged_at,\n\tnus.email_subscription_topics::jsonb,\n\tnus.sms_paused,\n\tnus.voting_plan_status,\n\tnus.voting_plan_time_of_day,\n\tnus.voting_plan_method_of_transport,\n\tnus.voting_plan_attending_with,\n\tnus.voter_registration_status,\n\tnus.facebook_id::varchar,\n\tnus.deleted_at::jsonb,\n\tnus.feature_flags::jsonb,\n\tnus.dbt_scd_id,\n\tnus.dbt_updated_at,\n\tnus.dbt_valid_from,\n\tnus.dbt_valid_to,\n\tnus.google_id,\n\tnus.causes::jsonb,\n\tnus.school_id,\n\tnus.referrer_user_id\nFROM \"quasar_prod_warehouse\".\"northstar_ft_userapi\".\"northstar_users_snapshot\" nus\nUNION ALL\nSELECT\n\tnhu.id,\n\tnhu.country,\n\tNULL AS club_id,\n\tnhu.birthdate,\n\tnhu.drupal_id,\n\tnhu.email_subscription_status,\n\tnhu.created_at,\n\tnhu.addr_zip,\n\tnhu.\"language\",\n\tnhu.\"source\",\n\tnhu.updated_at,\n\tNULL AS CAMPAIGNS,\n\tNULL AS AUDIT,\n\tnhu.first_name,\n\tnhu.email,\n\tnhu.last_name,\n\tnhu.addr_state,\n\tnhu.addr_street2,\n\tnhu.addr_street1,\n\tnhu.addr_city,\n\tnhu.\"role\",\n\tnhu.sms_status,\n\tnhu.last_authenticated_at,\n\tnhu.last_accessed_at,\n\tnhu.mobile,\n\tNULL AS cio_backfilled,\n\tnhu.addr_source,\n\tnhu.source_detail,\n\tnhu.last_messaged_at,\n\tNULL AS email_subscription_topics,\n\tNULL AS sms_paused,\n\tNULL AS voting_plan_status,\n\tNULL AS voting_plan_time_of_day,\n\tNULL AS voting_plan_method_of_transport,\n\tNULL AS voting_plan_attending_with,\n\tNULL AS voter_registration_status,\n\tnhu.facebook_id,\n\tNULL AS DELETED_AT,\n\tnhu.feature_flags::jsonb,\n\tNULL AS dbt_scd_id,\n\tNULL AS dbt_updated_at,\n\tNULL AS dbt_valid_from,\n\tNULL AS dbt_valid_to,\n\tNULL AS google_id,\n\tNULL AS causes,\n\tnhu.school_id,\n\tNULL AS referrer_user_id\nFROM \"quasar_prod_warehouse\".\"historical_analytics\".\"users\" nhu"}, "error": null, "status": null, "execution_time": 0.04821205139160156, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-02-23T21:28:54.206616Z", "completed_at": "2021-02-23T21:28:54.253462Z"}, {"name": "execute", "started_at": "2021-02-23T21:28:54.253833Z", "completed_at": "2021-02-23T21:28:54.253842Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "SELECT id AS post_id,\n   details::jsonb->>'Tracking Source' AS tracking_source,\n   -- is_date_string is a function that checks if the text string value casts\n   -- to a timestamptz successfully. It sets the value to NULL if it fails.\n   -- Bug Card: https://www.pivotaltracker.com/story/show/176447082\n   case when is_date_string(details::jsonb->>'Started registration') is true\n    then (details::jsonb->>'Started registration')::timestamp\n    else null end AS started_registration,\n   case when is_date_string(details::jsonb->>'Started registration') is true\n    then (details::jsonb->>'Started registration')::timestamptz\n    else null end AS started_registration_utc,\n   details::jsonb->>'Finish with State' AS finish_with_state,\n   details::jsonb->>'Status' AS status,\n   COALESCE(details::jsonb->>'Email address',details::jsonb->>'email') AS email,\n   details::jsonb->>'Home zip code' AS zip\n FROM {{ source('rogue', 'posts') }}\n WHERE source = 'rock-the-vote'", "compiled": true, "database": "quasar_prod_warehouse", "schema": "public", "fqn": ["ds_dbt", "campaign_activity", "rock_the_vote"], "unique_id": "model.ds_dbt.rock_the_vote", "package_name": "ds_dbt", "root_path": "/home/runner/work/quasar/quasar/quasar/dbt", "path": "campaign_activity/rock_the_vote.sql", "original_file_path": "models/campaign_activity/rock_the_vote.sql", "name": "rock_the_vote", "resource_type": "model", "alias": "rock_the_vote", "checksum": {"name": "sha256", "checksum": "970e34cdec30879e6f190fab01264a277c143988d9f650ac67e978a3df9f621d"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [{"sql": "CREATE UNIQUE INDEX {{ get_index_name(this, 'unique_post_id_started_registration') }} (post_id, started_registration)", "transaction": true, "index": null}, {"sql": "{{ grant_select_to(this, ['dsanalyst', 'looker']) }}", "transaction": true, "index": null}], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": "rock_the_vote", "schema": null, "database": null, "tags": ["campaign_activity"], "full_refresh": null}, "tags": ["campaign_activity"], "refs": [], "sources": [["rogue", "posts"]], "depends_on": {"macros": ["macro.ds_dbt.get_index_name", "macro.ds_dbt.grant_select_to"], "nodes": ["source.ds_dbt.rogue.posts"]}, "description": "A table containing ingested Rock the Vote data", "columns": {"post_id": {"name": "post_id", "description": "Unique identifier for the post", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tracking_source": {"name": "tracking_source", "description": "CSV string representing source of record (e.g. campaignID:822,campaignRunID:8171,source:web,source_details:STV_Affirmation) 'Details about the source of the item. This is sometimes represented as a JSON object, and for other tables like Turbovote its represented as a string. (e.g. \"{\"contentful_id\":\"3CTLlXfbwtz1FOMpl31SKV\",\"utm_source\":\"scholarship_listing\",\"utm_medium\":\"referral\",\"utm_campaign\":\"fastweb_2019_08\"}\", newsletter_456)'", "meta": {}, "data_type": null, "quote": null, "tags": []}, "started_registration": {"name": "started_registration", "description": "When the user started registration. 'When the item was created in UTC (eg. 2018-01-01 12:00:00)'", "meta": {}, "data_type": null, "quote": null, "tags": []}, "finish_with_state": {"name": "finish_with_state", "description": "Whether the user ?", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "Status of the submission. (e.g. complete, rejected, step 1)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "email": {"name": "email", "description": "Email address of the user.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "zip": {"name": "zip", "description": "Postal code where the action takes place", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/campaign_activity/schema.yml", "build_path": "../../docs/compiled/ds_dbt/models/campaign_activity/rock_the_vote.sql", "deferred": false, "compiled_sql": "SELECT id AS post_id,\n   details::jsonb->>'Tracking Source' AS tracking_source,\n   -- is_date_string is a function that checks if the text string value casts\n   -- to a timestamptz successfully. It sets the value to NULL if it fails.\n   -- Bug Card: https://www.pivotaltracker.com/story/show/176447082\n   case when is_date_string(details::jsonb->>'Started registration') is true\n    then (details::jsonb->>'Started registration')::timestamp\n    else null end AS started_registration,\n   case when is_date_string(details::jsonb->>'Started registration') is true\n    then (details::jsonb->>'Started registration')::timestamptz\n    else null end AS started_registration_utc,\n   details::jsonb->>'Finish with State' AS finish_with_state,\n   details::jsonb->>'Status' AS status,\n   COALESCE(details::jsonb->>'Email address',details::jsonb->>'email') AS email,\n   details::jsonb->>'Home zip code' AS zip\n FROM \"quasar_prod_warehouse\".\"ft_dosomething_rogue\".\"posts\"\n WHERE source = 'rock-the-vote'", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "SELECT id AS post_id,\n   details::jsonb->>'Tracking Source' AS tracking_source,\n   -- is_date_string is a function that checks if the text string value casts\n   -- to a timestamptz successfully. It sets the value to NULL if it fails.\n   -- Bug Card: https://www.pivotaltracker.com/story/show/176447082\n   case when is_date_string(details::jsonb->>'Started registration') is true\n    then (details::jsonb->>'Started registration')::timestamp\n    else null end AS started_registration,\n   case when is_date_string(details::jsonb->>'Started registration') is true\n    then (details::jsonb->>'Started registration')::timestamptz\n    else null end AS started_registration_utc,\n   details::jsonb->>'Finish with State' AS finish_with_state,\n   details::jsonb->>'Status' AS status,\n   COALESCE(details::jsonb->>'Email address',details::jsonb->>'email') AS email,\n   details::jsonb->>'Home zip code' AS zip\n FROM \"quasar_prod_warehouse\".\"ft_dosomething_rogue\".\"posts\"\n WHERE source = 'rock-the-vote'"}, "error": null, "status": null, "execution_time": 0.016448497772216797, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-02-23T21:28:54.255402Z", "completed_at": "2021-02-23T21:28:54.270551Z"}, {"name": "execute", "started_at": "2021-02-23T21:28:54.270923Z", "completed_at": "2021-02-23T21:28:54.270931Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "SELECT\n\tsd.northstar_id AS northstar_id,\n\tsd.id AS id,\n\tsd.campaign_id AS campaign_id,\n\tsd.campaign_run_id AS campaign_run_id,\n\tsd.club_id,\n\tsd.why_participated AS why_participated,\n\tsd.\"source\" AS \"source\",\n\tsd.details,\n\tsd.referrer_user_id,\n\tsd.group_id,\n\tCASE\n\t\tWHEN sd.\"source\" = 'niche' THEN 'niche'\n\t\tWHEN sd.\"source\" ilike '%sms%' THEN 'sms'\n\t\tWHEN sd.\"source\" IN ('rock-the-vote', 'turbovote') THEN 'voter-reg'\n\t\tELSE 'web'\n\tEND AS source_bucket,\n\tsd.created_at AS created_at,\n\tsd.source_details,\n\tCASE\n\t\tWHEN source_details ILIKE '%\\}' THEN (CAST(source_details AS json) ->> 'utm_medium')\n\t\tELSE NULL\n\tEND AS utm_medium,\n\tCASE\n\t\tWHEN source_details ILIKE '%\\}' THEN (CAST(source_details AS json) ->> 'utm_source')\n\t\tELSE NULL\n\tEND AS utm_source,\n\tCASE\n\t\tWHEN source_details ILIKE '%\\}' THEN (CAST(source_details AS json) ->> 'utm_campaign')\n\t\tELSE NULL\n\tEND AS utm_campaign,\n\trank() OVER (\n\t\tPARTITION BY sd.northstar_id\n\t\tORDER BY\n\t\t\tsd.created_at\n\t) AS signup_rank\nFROM\n\t{{ source('rogue', 'signups') }} sd\nWHERE\n\tsd._fivetran_deleted = 'false'\n\tAND sd.deleted_at IS NULL\n\tAND sd.\"source\" IS DISTINCT FROM 'rogue-oauth'\n\tand sd.why_participated IS DISTINCT FROM 'Testing from Ghost Inspector!'", "compiled": true, "database": "quasar_prod_warehouse", "schema": "public", "fqn": ["ds_dbt", "campaign_activity", "signups"], "unique_id": "model.ds_dbt.signups", "package_name": "ds_dbt", "root_path": "/home/runner/work/quasar/quasar/quasar/dbt", "path": "campaign_activity/signups.sql", "original_file_path": "models/campaign_activity/signups.sql", "name": "signups", "resource_type": "model", "alias": "signups", "checksum": {"name": "sha256", "checksum": "19ba113fefb88f264385a281d7616bbe9ebe14a0787109007c39ea01bfb5ba96"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [{"sql": "CREATE UNIQUE INDEX {{ get_index_name(this, 'unique_created_at_id') }} (created_at, id)", "transaction": true, "index": null}, {"sql": "{{ grant_select_to(this, ['dsanalyst', 'looker']) }}", "transaction": true, "index": null}], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": "signups", "schema": null, "database": null, "tags": ["campaign_activity"], "full_refresh": null}, "tags": ["campaign_activity"], "refs": [], "sources": [["rogue", "signups"]], "depends_on": {"macros": ["macro.ds_dbt.get_index_name", "macro.ds_dbt.grant_select_to"], "nodes": ["source.ds_dbt.rogue.signups"]}, "description": "A table containing information about signups", "columns": {"northstar_id": {"name": "northstar_id", "description": "The Northstar ID of the user who generated the event.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "id": {"name": "id", "description": "Unique identifier for the post", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "This is a unique identifier for the campaign", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_run_id": {"name": "campaign_run_id", "description": "Defined in web events docs. Fix this.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "club_id": {"name": "club_id", "description": "Club id", "meta": {}, "data_type": null, "quote": null, "tags": []}, "why_participated": {"name": "why_participated", "description": "Why the user participated in this action. Entered by the user.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "source": {"name": "source", "description": "Source of the URL (e.g. SMS, web), origin of the post (e.g. phoenix-web, phoenix-ashes, sms), or source where user was acquired. (e.g. sms, phoenix-next)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "details": {"name": "details", "description": "Details about the post. Contains contentfulId and other information (e.g. {\"campaignContentfulId\":\"6ATBgGEQEeJoIcxs1qbwaC\"})", "meta": {}, "data_type": null, "quote": null, "tags": []}, "source_bucket": {"name": "source_bucket", "description": "Grouping bucket for the origin of the post (e.g. web, sms)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "When the item was created in UTC (eg. 2018-01-01 12:00:00)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "source_details": {"name": "source_details", "description": "Details about the source of the item. This is sometimes represented as a JSON object, and for other tables like Turbovote its represented as a string. (e.g. \"{\"contentful_id\":\"3CTLlXfbwtz1FOMpl31SKV\",\"utm_source\":\"scholarship_listing\",\"utm_medium\":\"referral\",\"utm_campaign\":\"fastweb_2019_08\"}\", newsletter_456)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_medium": {"name": "utm_medium", "description": "How the traffic got to the platform (eg. referral, CPC). Parameter passed by marketing team (would not be present for organic/ direct traffic)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_source": {"name": "utm_source", "description": "Tracks where the traffic is coming from. (eg. scholarship_listing, Facebook). Parameter passed by marketing team (would not be present for organic/ direct traffic)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_campaign": {"name": "utm_campaign", "description": "Tracks which campaign the traffic was generated by. Shows up in Google Analytics as Campaign Name (eg. editorial_newsletter). Parameter passed by marketing team (would not be present for organic/ direct traffic)", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/campaign_activity/schema.yml", "build_path": "../../docs/compiled/ds_dbt/models/campaign_activity/signups.sql", "deferred": false, "compiled_sql": "SELECT\n\tsd.northstar_id AS northstar_id,\n\tsd.id AS id,\n\tsd.campaign_id AS campaign_id,\n\tsd.campaign_run_id AS campaign_run_id,\n\tsd.club_id,\n\tsd.why_participated AS why_participated,\n\tsd.\"source\" AS \"source\",\n\tsd.details,\n\tsd.referrer_user_id,\n\tsd.group_id,\n\tCASE\n\t\tWHEN sd.\"source\" = 'niche' THEN 'niche'\n\t\tWHEN sd.\"source\" ilike '%sms%' THEN 'sms'\n\t\tWHEN sd.\"source\" IN ('rock-the-vote', 'turbovote') THEN 'voter-reg'\n\t\tELSE 'web'\n\tEND AS source_bucket,\n\tsd.created_at AS created_at,\n\tsd.source_details,\n\tCASE\n\t\tWHEN source_details ILIKE '%\\}' THEN (CAST(source_details AS json) ->> 'utm_medium')\n\t\tELSE NULL\n\tEND AS utm_medium,\n\tCASE\n\t\tWHEN source_details ILIKE '%\\}' THEN (CAST(source_details AS json) ->> 'utm_source')\n\t\tELSE NULL\n\tEND AS utm_source,\n\tCASE\n\t\tWHEN source_details ILIKE '%\\}' THEN (CAST(source_details AS json) ->> 'utm_campaign')\n\t\tELSE NULL\n\tEND AS utm_campaign,\n\trank() OVER (\n\t\tPARTITION BY sd.northstar_id\n\t\tORDER BY\n\t\t\tsd.created_at\n\t) AS signup_rank\nFROM\n\t\"quasar_prod_warehouse\".\"ft_dosomething_rogue\".\"signups\" sd\nWHERE\n\tsd._fivetran_deleted = 'false'\n\tAND sd.deleted_at IS NULL\n\tAND sd.\"source\" IS DISTINCT FROM 'rogue-oauth'\n\tand sd.why_participated IS DISTINCT FROM 'Testing from Ghost Inspector!'", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "SELECT\n\tsd.northstar_id AS northstar_id,\n\tsd.id AS id,\n\tsd.campaign_id AS campaign_id,\n\tsd.campaign_run_id AS campaign_run_id,\n\tsd.club_id,\n\tsd.why_participated AS why_participated,\n\tsd.\"source\" AS \"source\",\n\tsd.details,\n\tsd.referrer_user_id,\n\tsd.group_id,\n\tCASE\n\t\tWHEN sd.\"source\" = 'niche' THEN 'niche'\n\t\tWHEN sd.\"source\" ilike '%sms%' THEN 'sms'\n\t\tWHEN sd.\"source\" IN ('rock-the-vote', 'turbovote') THEN 'voter-reg'\n\t\tELSE 'web'\n\tEND AS source_bucket,\n\tsd.created_at AS created_at,\n\tsd.source_details,\n\tCASE\n\t\tWHEN source_details ILIKE '%\\}' THEN (CAST(source_details AS json) ->> 'utm_medium')\n\t\tELSE NULL\n\tEND AS utm_medium,\n\tCASE\n\t\tWHEN source_details ILIKE '%\\}' THEN (CAST(source_details AS json) ->> 'utm_source')\n\t\tELSE NULL\n\tEND AS utm_source,\n\tCASE\n\t\tWHEN source_details ILIKE '%\\}' THEN (CAST(source_details AS json) ->> 'utm_campaign')\n\t\tELSE NULL\n\tEND AS utm_campaign,\n\trank() OVER (\n\t\tPARTITION BY sd.northstar_id\n\t\tORDER BY\n\t\t\tsd.created_at\n\t) AS signup_rank\nFROM\n\t\"quasar_prod_warehouse\".\"ft_dosomething_rogue\".\"signups\" sd\nWHERE\n\tsd._fivetran_deleted = 'false'\n\tAND sd.deleted_at IS NULL\n\tAND sd.\"source\" IS DISTINCT FROM 'rogue-oauth'\n\tand sd.why_participated IS DISTINCT FROM 'Testing from Ghost Inspector!'"}, "error": null, "status": null, "execution_time": 0.02023005485534668, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-02-23T21:28:54.272079Z", "completed_at": "2021-02-23T21:28:54.291267Z"}, {"name": "execute", "started_at": "2021-02-23T21:28:54.291584Z", "completed_at": "2021-02-23T21:28:54.291591Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "SELECT id AS post_id, \n\tdetails::jsonb->>'hostname' AS hostname,\n\tdetails::jsonb->>'referral-code' AS referral_code,\n\tdetails::jsonb->>'partner-comms-opt-in' AS partner_comms_opt_in,\n\t(details::jsonb->>'created-at')::timestamp AS created_at,\n\t(details::jsonb->>'updated-at')::timestamp AS updated_at,\n\tsource_details,\n\tdetails::jsonb->>'voter-registration-status' AS voter_registration_status,\n\tdetails::jsonb->>'voter-registration-source' AS voter_registration_source,\n\tdetails::jsonb->>'voter-registration-method' AS voter_registration_method,\n\tdetails::jsonb->>'voting-method-preference' AS voter_registration_preference,\n\tdetails::jsonb->>'email subscribed' AS email_subscribed,\n\tdetails::jsonb->>'sms subscribed' AS sms_subscribed\nFROM {{ source('rogue', 'posts') }}\nWHERE source = 'turbovote'", "compiled": true, "database": "quasar_prod_warehouse", "schema": "public", "fqn": ["ds_dbt", "campaign_activity", "turbovote"], "unique_id": "model.ds_dbt.turbovote", "package_name": "ds_dbt", "root_path": "/home/runner/work/quasar/quasar/quasar/dbt", "path": "campaign_activity/turbovote.sql", "original_file_path": "models/campaign_activity/turbovote.sql", "name": "turbovote", "resource_type": "model", "alias": "turbovote", "checksum": {"name": "sha256", "checksum": "b8e5fcd63d4084cbf131b390739e61ea0a64b2fc3ecd141a418e4af8273b7eb7"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [{"sql": "CREATE UNIQUE INDEX {{ get_index_name(this, 'unique_post_id_created_at_updated_at') }} (post_id, created_at, updated_at)", "transaction": true, "index": null}, {"sql": "{{ grant_select_to(this, ['dsanalyst', 'looker']) }}", "transaction": true, "index": null}], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": "turbovote", "schema": null, "database": null, "tags": ["campaign_activity"], "full_refresh": null}, "tags": ["campaign_activity"], "refs": [], "sources": [["rogue", "posts"]], "depends_on": {"macros": ["macro.ds_dbt.get_index_name", "macro.ds_dbt.grant_select_to"], "nodes": ["source.ds_dbt.rogue.posts"]}, "description": "A table containing information about Turbovote registrations", "columns": {"post_id": {"name": "post_id", "description": "Unique identifier for the post", "meta": {}, "data_type": null, "quote": null, "tags": []}, "hostname": {"name": "hostname", "description": "URL host where event occurred (eg. www.dosomething.org or identity.dosomething.org)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "referral-code": {"name": "referral-code", "description": "???", "meta": {}, "data_type": null, "quote": null, "tags": []}, "partner-comms-opt-in": {"name": "partner-comms-opt-in", "description": "???", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "When the item was created in UTC (eg. 2018-01-01 12:00:00)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "When the item was updated in UTC (eg. 2018-01-01 12:00:00)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "source_details": {"name": "source_details", "description": "Details about the source of the item. This is sometimes represented as a JSON object, and for other tables like Turbovote its represented as a string. (e.g. \"{\"contentful_id\":\"3CTLlXfbwtz1FOMpl31SKV\",\"utm_source\":\"scholarship_listing\",\"utm_medium\":\"referral\",\"utm_campaign\":\"fastweb_2019_08\"}\", newsletter_456)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "voter-registration-status": {"name": "voter-registration-status", "description": "Status of the voter's registration.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "voter-registration-source": {"name": "voter-registration-source", "description": "Source of the registration.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "voter-registration-method": {"name": "voter-registration-method", "description": "Method of registration.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "voter-registration-preference": {"name": "voter-registration-preference", "description": "Preference of registration.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "email subscribed": {"name": "email subscribed", "description": "Whether the use is subscribed to email", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sms subscribed": {"name": "sms subscribed", "description": "Whether the use is subscribed to SMS", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/campaign_activity/schema.yml", "build_path": "../../docs/compiled/ds_dbt/models/campaign_activity/turbovote.sql", "deferred": false, "compiled_sql": "SELECT id AS post_id, \n\tdetails::jsonb->>'hostname' AS hostname,\n\tdetails::jsonb->>'referral-code' AS referral_code,\n\tdetails::jsonb->>'partner-comms-opt-in' AS partner_comms_opt_in,\n\t(details::jsonb->>'created-at')::timestamp AS created_at,\n\t(details::jsonb->>'updated-at')::timestamp AS updated_at,\n\tsource_details,\n\tdetails::jsonb->>'voter-registration-status' AS voter_registration_status,\n\tdetails::jsonb->>'voter-registration-source' AS voter_registration_source,\n\tdetails::jsonb->>'voter-registration-method' AS voter_registration_method,\n\tdetails::jsonb->>'voting-method-preference' AS voter_registration_preference,\n\tdetails::jsonb->>'email subscribed' AS email_subscribed,\n\tdetails::jsonb->>'sms subscribed' AS sms_subscribed\nFROM \"quasar_prod_warehouse\".\"ft_dosomething_rogue\".\"posts\"\nWHERE source = 'turbovote'", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "SELECT id AS post_id, \n\tdetails::jsonb->>'hostname' AS hostname,\n\tdetails::jsonb->>'referral-code' AS referral_code,\n\tdetails::jsonb->>'partner-comms-opt-in' AS partner_comms_opt_in,\n\t(details::jsonb->>'created-at')::timestamp AS created_at,\n\t(details::jsonb->>'updated-at')::timestamp AS updated_at,\n\tsource_details,\n\tdetails::jsonb->>'voter-registration-status' AS voter_registration_status,\n\tdetails::jsonb->>'voter-registration-source' AS voter_registration_source,\n\tdetails::jsonb->>'voter-registration-method' AS voter_registration_method,\n\tdetails::jsonb->>'voting-method-preference' AS voter_registration_preference,\n\tdetails::jsonb->>'email subscribed' AS email_subscribed,\n\tdetails::jsonb->>'sms subscribed' AS sms_subscribed\nFROM \"quasar_prod_warehouse\".\"ft_dosomething_rogue\".\"posts\"\nWHERE source = 'turbovote'"}, "error": null, "status": null, "execution_time": 0.02268385887145996, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-02-23T21:28:54.292695Z", "completed_at": "2021-02-23T21:28:54.314287Z"}, {"name": "execute", "started_at": "2021-02-23T21:28:54.314608Z", "completed_at": "2021-02-23T21:28:54.314616Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "SELECT\n    agent_id AS agent_id,\n    attachments->0->>'contentType' AS attachment_content_type,\n    attachments->0->>'url' AS attachment_url,\n    broadcast_id AS broadcast_id,\n    campaign_id AS campaign_id,\n    conversation_id AS conversation_id,\n    created_at as created_at,\n    direction AS direction,\n    _id AS message_id,\n    macro AS macro,\n    match AS match,\n    metadata #>> '{delivery,deliveredAt}' AS carrier_delivered_at,\n    metadata #>> '{delivery,failureData,code}' as carrier_failure_code,\n    (metadata #> '{delivery}' ->> 'totalSegments')::INT AS total_segments,\n    platform_message_id as platform_message_id,\n    template AS template,\n    text AS text,\n    topic AS topic,\n    user_id AS user_id\n  FROM {{ source('gambit', 'messages') }}", "compiled": true, "database": "quasar_prod_warehouse", "schema": "public", "fqn": ["ds_dbt", "gambit_messages", "messages_flattened"], "unique_id": "model.ds_dbt.messages_flattened", "package_name": "ds_dbt", "root_path": "/home/runner/work/quasar/quasar/quasar/dbt", "path": "gambit_messages/messages_flattened.sql", "original_file_path": "models/gambit_messages/messages_flattened.sql", "name": "messages_flattened", "resource_type": "model", "alias": "messages_flattened", "checksum": {"name": "sha256", "checksum": "c77115c71843cd8a0d08791a0a34a1404265382d18e09474080f27d9b1d520e6"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [{"sql": "CREATE INDEX {{ get_index_name(this, 'user_id') }} (user_id)", "transaction": true, "index": null}, {"sql": "CREATE INDEX {{ get_index_name(this, 'platform_message_id') }} (platform_message_id)", "transaction": true, "index": null}, {"sql": "{{ grant_select_to(this, ['dsanalyst', 'looker']) }}", "transaction": true, "index": null}], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": "messages_flattened", "schema": null, "database": null, "tags": ["gambit_messages"], "full_refresh": null}, "tags": ["gambit_messages"], "refs": [], "sources": [["gambit", "messages"]], "depends_on": {"macros": ["macro.ds_dbt.get_index_name", "macro.ds_dbt.grant_select_to"], "nodes": ["source.ds_dbt.gambit.messages"]}, "description": "Messages which nested values have been flattened for easier querying.", "columns": {"agent_id": {"name": "agent_id", "description": "If set, the content type of the picture the member is sending us. Exp. image/png.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "attachment_content_type": {"name": "attachment_content_type", "description": "If set, the handle of the Front agent this outbound support message is from.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "attachment_url": {"name": "attachment_url", "description": "If set, link to the picture sent by the member.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "broadcast_id": {"name": "broadcast_id", "description": "If set, this message was an outbound broadcast (when direction == 'outbound-api-send'), or the User's reply to an outbound broadcast (when direction == 'inbound')", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "If set, holds a reference to the **last** campaign topic the member's conversation was in. This is useful to allow members to talk to Gambit and get quick responses (through Rivescript), without Gambit completely forgetting what state the member's interaction with a campaign topic was in. 'This is a unique identifier for the campaign'", "meta": {}, "data_type": null, "quote": null, "tags": []}, "conversation_id": {"name": "conversation_id", "description": "Conversation the Message belongs to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Message's created date.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "direction": {"name": "direction", "description": "Describes if the message is being received (inbound) or being sent (outbound-*).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "message_id": {"name": "message_id", "description": "Unique identifier for a Message (MongoDB id).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "macro": {"name": "macro", "description": "If set, this message is part of this macro's workflow. Example: subscription status updates, voting plan submission, aswering a multichoice broadcast, etc.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "match": {"name": "match", "description": "Rivescript trigger matched by inbound text.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "carrier_delivered_at": {"name": "carrier_delivered_at", "description": "Date when we received a delivery confirmation from the carrier.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "carrier_failure_code": {"name": "carrier_failure_code", "description": "Error code reported by the carrier (Only for outbound messages).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_segments": {"name": "total_segments", "description": "Number of chunks the message is broken into by the SMS API.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "platform_message_id": {"name": "platform_message_id", "description": "The Message identifier per platform.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "template": {"name": "template", "description": "If set, template of outbound message sent (e.g. askQuantity, completedMenu).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "text": {"name": "text", "description": "Body of the message.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "topic": {"name": "topic", "description": "Holds a reference to the **last** campaign topic the member's conversation was in. This is useful to allow members to talk to Gambit and get quick responses (through Rivescript), without Gambit completely forgetting what state the member's interaction with a campaign topic was in.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "user_id": {"name": "user_id", "description": "The Northstar id of the member.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/gambit_messages/schema.yml", "build_path": "../../docs/compiled/ds_dbt/models/gambit_messages/messages_flattened.sql", "deferred": false, "compiled_sql": "SELECT\n    agent_id AS agent_id,\n    attachments->0->>'contentType' AS attachment_content_type,\n    attachments->0->>'url' AS attachment_url,\n    broadcast_id AS broadcast_id,\n    campaign_id AS campaign_id,\n    conversation_id AS conversation_id,\n    created_at as created_at,\n    direction AS direction,\n    _id AS message_id,\n    macro AS macro,\n    match AS match,\n    metadata #>> '{delivery,deliveredAt}' AS carrier_delivered_at,\n    metadata #>> '{delivery,failureData,code}' as carrier_failure_code,\n    (metadata #> '{delivery}' ->> 'totalSegments')::INT AS total_segments,\n    platform_message_id as platform_message_id,\n    template AS template,\n    text AS text,\n    topic AS topic,\n    user_id AS user_id\n  FROM \"quasar_prod_warehouse\".\"ft_gambit_conversations_api\".\"messages\"", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "SELECT\n    agent_id AS agent_id,\n    attachments->0->>'contentType' AS attachment_content_type,\n    attachments->0->>'url' AS attachment_url,\n    broadcast_id AS broadcast_id,\n    campaign_id AS campaign_id,\n    conversation_id AS conversation_id,\n    created_at as created_at,\n    direction AS direction,\n    _id AS message_id,\n    macro AS macro,\n    match AS match,\n    metadata #>> '{delivery,deliveredAt}' AS carrier_delivered_at,\n    metadata #>> '{delivery,failureData,code}' as carrier_failure_code,\n    (metadata #> '{delivery}' ->> 'totalSegments')::INT AS total_segments,\n    platform_message_id as platform_message_id,\n    template AS template,\n    text AS text,\n    topic AS topic,\n    user_id AS user_id\n  FROM \"quasar_prod_warehouse\".\"ft_gambit_conversations_api\".\"messages\""}, "error": null, "status": null, "execution_time": 0.0241854190826416, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-02-23T21:28:54.316069Z", "completed_at": "2021-02-23T21:28:54.338811Z"}, {"name": "execute", "started_at": "2021-02-23T21:28:54.339124Z", "completed_at": "2021-02-23T21:28:54.339181Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "SELECT *\nFROM {{ source('rogue', 'actions') }}", "compiled": true, "database": "quasar_prod_warehouse", "schema": "public", "fqn": ["ds_dbt", "post_actions", "post_actions"], "unique_id": "model.ds_dbt.post_actions", "package_name": "ds_dbt", "root_path": "/home/runner/work/quasar/quasar/quasar/dbt", "path": "post_actions/post_actions.sql", "original_file_path": "models/post_actions/post_actions.sql", "name": "post_actions", "resource_type": "model", "alias": "post_actions", "checksum": {"name": "sha256", "checksum": "b5963555d11dff47ba9a3ce8a556d48b3d2ecfea505e55033831569252ccb0cd"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [{"sql": "CREATE UNIQUE INDEX {{ get_index_name(this, 'unique_created_at_id') }} (created_at, id)", "transaction": true, "index": null}, {"sql": "{{ grant_select_to(this, ['dsanalyst', 'looker']) }}", "transaction": true, "index": null}], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": "post_actions", "schema": null, "database": null, "tags": ["post_actions"], "full_refresh": null}, "tags": ["post_actions"], "refs": [], "sources": [["rogue", "actions"]], "depends_on": {"macros": ["macro.ds_dbt.get_index_name", "macro.ds_dbt.grant_select_to"], "nodes": ["source.ds_dbt.rogue.actions"]}, "description": "Table that tracks actions like reportbacks, civic actions and scholarship entries.", "columns": {"id": {"name": "id", "description": "Unique identifier for the post", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the action. (e.g. Huddle for Heroes Photo Reportback)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "This is a unique identifier for the campaign", "meta": {}, "data_type": null, "quote": null, "tags": []}, "post_type": {"name": "post_type", "description": "Type of post, (e.g. photo, voter-reg)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "noun": {"name": "noun", "description": "Noun that corresponds to the item in the call to action that was delivered. (e.g. drawings, tweets)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "verb": {"name": "verb", "description": "Verb corresponding to the action the user took. (e.g. shared, sent, taken)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "When the item was created in UTC (eg. 2018-01-01 12:00:00)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "When the item was updated in UTC (eg. 2018-01-01 12:00:00)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "deleted_at": {"name": "deleted_at", "description": "Date time in UTC when a user deleted their post.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Marks rows that were deleted in the source table", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "(UTC timestamp) keeps track of when each row was last successfully synced", "meta": {}, "data_type": null, "quote": null, "tags": []}, "reportback": {"name": "reportback", "description": "Whether the post is a reportback", "meta": {}, "data_type": null, "quote": null, "tags": []}, "civic_action": {"name": "civic_action", "description": "Whether the post is a Civic Action. The application allows for multiple types of posts.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "scholarship_entry": {"name": "scholarship_entry", "description": "Whether the post is a Scholarship Entry. The application allows for multiple types of posts.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "active": {"name": "active", "description": "Whether the user is active", "meta": {}, "data_type": null, "quote": null, "tags": []}, "anonymous": {"name": "anonymous", "description": "Whether the user is anonymous when making the post", "meta": {}, "data_type": null, "quote": null, "tags": []}, "callpower_campaign_id": {"name": "callpower_campaign_id", "description": "Unique ID corresponding to the Callpower campaign. Callpower allows users to record messages for their representatives.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "quiz": {"name": "quiz", "description": "Whether the post is a quiz", "meta": {}, "data_type": null, "quote": null, "tags": []}, "action_type": {"name": "action_type", "description": "Type of action the user took. (e.g. share-something, donate-something)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "online": {"name": "online", "description": "Whether the action is a online as opposed to IRL.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "time_commitment": {"name": "time_commitment", "description": "Estimated time required to do the action (e.g. 3.0+, <0.5)", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/post_actions/schema.yml", "build_path": "../../docs/compiled/ds_dbt/models/post_actions/post_actions.sql", "deferred": false, "compiled_sql": "SELECT *\nFROM \"quasar_prod_warehouse\".\"ft_dosomething_rogue\".\"actions\"", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "SELECT *\nFROM \"quasar_prod_warehouse\".\"ft_dosomething_rogue\".\"actions\""}, "error": null, "status": null, "execution_time": 0.023706912994384766, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-02-23T21:28:54.341623Z", "completed_at": "2021-02-23T21:28:54.364058Z"}, {"name": "execute", "started_at": "2021-02-23T21:28:54.364490Z", "completed_at": "2021-02-23T21:28:54.364497Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "SELECT\n    *,\n    (regexp_split_to_array(\n        (regexp_split_to_array(\n            (regexp_split_to_array(\n                c.target_url, 'user')\n            -- %3A is the URI Encoded triplet that represents the character \":\"\n            )[2], E'[=:]+|%3A')\n        )[2],\n        E'[^a-zA-Z0-9]')\n    )[1] AS northstar_id,\n    COALESCE(\n        (regexp_split_to_array(c.target_url, 'broadcastid=', 'i'))[2],\n        (regexp_split_to_array(c.target_url, 'broadcastid_', 'i'))[2],\n        (regexp_split_to_array(c.target_url, 'broadcast_id=', 'i'))[2],\n        (regexp_split_to_array(c.target_url, 'broadcast_id_', 'i'))[2],\n        (regexp_split_to_array(c.target_url, 'broadcast_', 'i'))[2]\n            ) AS broadcast_id,\n    (CASE WHEN target_url ilike '%source=web%' THEN 'web'\n        WHEN target_url ilike '%source=email%' THEN 'email'\n        ELSE 'sms'\n        END) AS SOURCE,\n    CASE\n        WHEN c.user_agent IS NULL THEN 'uncertain'\n        WHEN c.user_agent ILIKE '%facebot twitterbot%'\n                OR c.user_agent ILIKE '%X11; Ubuntu; Linux i686%' THEN 'preview'\n        ELSE 'click' END AS interaction_type\nFROM {{ source('bertly', 'clicks') }} c", "compiled": true, "database": "quasar_prod_warehouse", "schema": "public", "fqn": ["ds_dbt", "bertly", "bertly_clicks"], "unique_id": "model.ds_dbt.bertly_clicks", "package_name": "ds_dbt", "root_path": "/home/runner/work/quasar/quasar/quasar/dbt", "path": "bertly/bertly_clicks.sql", "original_file_path": "models/bertly/bertly_clicks.sql", "name": "bertly_clicks", "resource_type": "model", "alias": "bertly_clicks", "checksum": {"name": "sha256", "checksum": "6eb7c597758a130a442c55698927e1d2a3b0b88a241781e6b827a231189329f6"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [{"sql": "CREATE UNIQUE INDEX {{ get_index_name(this, 'unique_click_id') }} (click_id)", "transaction": true, "index": null}, {"sql": "{{ grant_select_to(this, ['dsanalyst', 'looker']) }}", "transaction": true, "index": null}], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": "bertly_clicks", "schema": null, "database": null, "tags": ["bertly"], "full_refresh": null}, "tags": ["bertly"], "refs": [], "sources": [["bertly", "clicks"]], "depends_on": {"macros": ["macro.ds_dbt.get_index_name", "macro.ds_dbt.grant_select_to"], "nodes": ["source.ds_dbt.bertly.clicks"]}, "description": "Table containing data from Bertly, our serverless link shortener.", "columns": {"click_id": {"name": "click_id", "description": "This is a unique identifier for each click", "meta": {}, "data_type": null, "quote": null, "tags": []}, "click_time": {"name": "click_time", "description": "Timestamp when user clicked.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "shortened": {"name": "shortened", "description": "Shortened URL", "meta": {}, "data_type": null, "quote": null, "tags": []}, "target_url": {"name": "target_url", "description": "URL where the user will be directed", "meta": {}, "data_type": null, "quote": null, "tags": []}, "user_agent": {"name": "user_agent", "description": "Full user agent string for a user's browser (e.g. \"Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:24.0) Gecko/20100101 Firefox/24.0\")", "meta": {}, "data_type": null, "quote": null, "tags": []}, "northstar_id": {"name": "northstar_id", "description": "The Northstar ID of the user who generated the event.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "broadcast_id": {"name": "broadcast_id", "description": "ID of the broadcast that generated the shortened URL", "meta": {}, "data_type": null, "quote": null, "tags": []}, "source": {"name": "source", "description": "Source of the URL (e.g. SMS, web), origin of the post (e.g. phoenix-web, phoenix-ashes, sms), or source where user was acquired. (e.g. sms, phoenix-next)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "interaction_type": {"name": "interaction_type", "description": "How the user interacted with the link (e.g. preview, click)", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/bertly/schema.yml", "build_path": "../../docs/compiled/ds_dbt/models/bertly/bertly_clicks.sql", "deferred": false, "compiled_sql": "SELECT\n    *,\n    (regexp_split_to_array(\n        (regexp_split_to_array(\n            (regexp_split_to_array(\n                c.target_url, 'user')\n            -- %3A is the URI Encoded triplet that represents the character \":\"\n            )[2], E'[=:]+|%3A')\n        )[2],\n        E'[^a-zA-Z0-9]')\n    )[1] AS northstar_id,\n    COALESCE(\n        (regexp_split_to_array(c.target_url, 'broadcastid=', 'i'))[2],\n        (regexp_split_to_array(c.target_url, 'broadcastid_', 'i'))[2],\n        (regexp_split_to_array(c.target_url, 'broadcast_id=', 'i'))[2],\n        (regexp_split_to_array(c.target_url, 'broadcast_id_', 'i'))[2],\n        (regexp_split_to_array(c.target_url, 'broadcast_', 'i'))[2]\n            ) AS broadcast_id,\n    (CASE WHEN target_url ilike '%source=web%' THEN 'web'\n        WHEN target_url ilike '%source=email%' THEN 'email'\n        ELSE 'sms'\n        END) AS SOURCE,\n    CASE\n        WHEN c.user_agent IS NULL THEN 'uncertain'\n        WHEN c.user_agent ILIKE '%facebot twitterbot%'\n                OR c.user_agent ILIKE '%X11; Ubuntu; Linux i686%' THEN 'preview'\n        ELSE 'click' END AS interaction_type\nFROM \"quasar_prod_warehouse\".\"bertly\".\"clicks\" c", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "SELECT\n    *,\n    (regexp_split_to_array(\n        (regexp_split_to_array(\n            (regexp_split_to_array(\n                c.target_url, 'user')\n            -- %3A is the URI Encoded triplet that represents the character \":\"\n            )[2], E'[=:]+|%3A')\n        )[2],\n        E'[^a-zA-Z0-9]')\n    )[1] AS northstar_id,\n    COALESCE(\n        (regexp_split_to_array(c.target_url, 'broadcastid=', 'i'))[2],\n        (regexp_split_to_array(c.target_url, 'broadcastid_', 'i'))[2],\n        (regexp_split_to_array(c.target_url, 'broadcast_id=', 'i'))[2],\n        (regexp_split_to_array(c.target_url, 'broadcast_id_', 'i'))[2],\n        (regexp_split_to_array(c.target_url, 'broadcast_', 'i'))[2]\n            ) AS broadcast_id,\n    (CASE WHEN target_url ilike '%source=web%' THEN 'web'\n        WHEN target_url ilike '%source=email%' THEN 'email'\n        ELSE 'sms'\n        END) AS SOURCE,\n    CASE\n        WHEN c.user_agent IS NULL THEN 'uncertain'\n        WHEN c.user_agent ILIKE '%facebot twitterbot%'\n                OR c.user_agent ILIKE '%X11; Ubuntu; Linux i686%' THEN 'preview'\n        ELSE 'click' END AS interaction_type\nFROM \"quasar_prod_warehouse\".\"bertly\".\"clicks\" c"}, "error": null, "status": null, "execution_time": 0.01726984977722168, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-02-23T21:28:54.365953Z", "completed_at": "2021-02-23T21:28:54.382108Z"}, {"name": "execute", "started_at": "2021-02-23T21:28:54.382417Z", "completed_at": "2021-02-23T21:28:54.382423Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "SELECT\n    event #>>'{data, customer_id}' as customer_id,\n    event #>>'{data, email_address}' as email_address,\n\tcoalesce(\n\t    event #>>'{data, email_id}',\n\t    event #>>'{data, variables, email_id}'\n\t) AS email_id,\n    event ->> 'event_id' AS event_id,\n    event ->> 'event_type' AS event_type,\n    event #>>'{data, href}' as href,\n    event #>>'{data, link_id}' as link_id,\n    event #>>'{data, subject}' as subject,\n    CAST(\n        event #>>'{data, template_id}' AS INTEGER\n    ) AS template_id,\n    TO_TIMESTAMP(CAST(event ->> 'timestamp' AS INTEGER)) AS \"timestamp\",\n\tevent #>>'{data, variables, campaign, id}' as cio_campaign_id,\n\tevent #>>'{data, variables, campaign, name}' as cio_campaign_name,\n\tevent #>>'{data, variables, campaign, type}' as cio_campaign_type,\n    event #>>'{data, message_id}' as cio_message_id,\n    event #>>'{data, message_name}' as cio_message_name\nFROM\n    {{ source('cio', 'event_log') }} cel\nWHERE event ->> 'event_type' IN ('email_bounced', 'email_converted', 'email_opened', 'email_unsubscribed', 'email_clicked', 'email_sent')\nUNION\nSELECT\n    customer_id,\n    email_address,\n    email_id,\n    event_id,\n    event_type,\n    href,\n    link_id,\n    \"subject\",\n    template_id,\n    \"timestamp\",\n    NULL AS cio_campaign_id,\n    NULL AS cio_campaign_name,\n    NULL AS cio_campaign_type,\n    NULL AS cio_message_id,\n    NULL AS cio_message_name\nFROM {{ source('cio_historical', 'cio_email_events') }}\nWHERE\n    -- Date we re-started saving raw C.io events to the event_log table\n    \"timestamp\" < '2020-04-01'", "compiled": true, "database": "quasar_prod_warehouse", "schema": "public", "fqn": ["ds_dbt", "cio", "cio_email_events"], "unique_id": "model.ds_dbt.cio_email_events", "package_name": "ds_dbt", "root_path": "/home/runner/work/quasar/quasar/quasar/dbt", "path": "cio/cio_email_events.sql", "original_file_path": "models/cio/cio_email_events.sql", "name": "cio_email_events", "resource_type": "model", "alias": "cio_email_events", "checksum": {"name": "sha256", "checksum": "514cd549a0927306d2a1f5c47bf3e39c4d514411c1b382dbc364041a5c24581a"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [{"sql": "CREATE INDEX {{ get_index_name(this, 'event_id') }} (event_id)", "transaction": true, "index": null}, {"sql": "CREATE INDEX {{ get_index_name(this, 'email_id') }} (email_id)", "transaction": true, "index": null}, {"sql": "CREATE INDEX {{ get_index_name(this, 'template_id') }} (template_id)", "transaction": true, "index": null}, {"sql": "CREATE INDEX {{ get_index_name(this, 'customer_id') }} (customer_id)", "transaction": true, "index": null}, {"sql": "CREATE INDEX {{ get_index_name(this, 'timestamp_nulls_first') }} (timestamp nulls first)", "transaction": true, "index": null}, {"sql": "CREATE INDEX {{ get_index_name(this, 'timestamp_nulls_first_event_type') }} (timestamp nulls first, event_type)", "transaction": true, "index": null}, {"sql": "{{ grant_select_to(this, ['dsanalyst', 'looker']) }}", "transaction": true, "index": null}], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": ["cio"], "full_refresh": null}, "tags": ["cio"], "refs": [], "sources": [["cio", "event_log"], ["cio_historical", "cio_email_events"]], "depends_on": {"macros": ["macro.ds_dbt.get_index_name", "macro.ds_dbt.grant_select_to"], "nodes": ["source.ds_dbt.cio.event_log", "source.ds_dbt.cio_historical.cio_email_events"]}, "description": "Table containing CIO email open, converted, bounced, and unsubscribed events", "columns": {"email_id": {"name": "email_id", "description": "Unique message id (each individual message sent from Customer.io has a different \"email_id\"); can also be found in the unsubscribe link URL", "meta": {}, "data_type": null, "quote": null, "tags": []}, "customer_id": {"name": "customer_id", "description": "user id (can be retrieved from the person profile). Only present if the person is still active (not included if the person has been deleted).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "email_address": {"name": "email_address", "description": "\"To\" email address", "meta": {}, "data_type": null, "quote": null, "tags": []}, "template_id": {"name": "template_id", "description": "internal attribute, each email inside a campaign can have multiple template ids depending on the changes made over time. You can view it in the UI by filtering for a specific email under Email Log. For example: https://fly.customer.io/env/51831/email_logs?campaign=139744&template=343216\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "subject": {"name": "subject", "description": "email subject", "meta": {}, "data_type": null, "quote": null, "tags": []}, "href": {"name": "href", "description": "Only on \"clicked\" events, the fully rendered URL of the link that was clicked.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "link_id": {"name": "link_id", "description": "Only on \"clicked\" events, the ID of the tracked link that was clicked.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "event_id": {"name": "event_id", "description": "internal attribute; id associated with the email_type action", "meta": {}, "data_type": null, "quote": null, "tags": []}, "timestamp": {"name": "timestamp", "description": "date and time when the event took place in unix (seconds since epoch) format", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cio_campaign_id": {"name": "cio_campaign_id", "description": "refer to the transactional, segment-triggered or newsletter campaign that generated the email", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cio_campaign_name": {"name": "cio_campaign_name", "description": "refer to the transactional, segment-triggered or newsletter campaign that generated the email", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cio_campaign_type": {"name": "cio_campaign_type", "description": "TBD", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cio_message_id": {"name": "cio_message_id", "description": "campaign email id; can be found in the campaign URL after emails/ (e.g. https://fly.customer.io/env/51831/v2/composer/emails/225039)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cio_message_name": {"name": "cio_message_name", "description": "the name of the campaign email", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/cio/schema.yml", "build_path": "../../docs/compiled/ds_dbt/models/cio/cio_email_events.sql", "deferred": false, "compiled_sql": "SELECT\n    event #>>'{data, customer_id}' as customer_id,\n    event #>>'{data, email_address}' as email_address,\n\tcoalesce(\n\t    event #>>'{data, email_id}',\n\t    event #>>'{data, variables, email_id}'\n\t) AS email_id,\n    event ->> 'event_id' AS event_id,\n    event ->> 'event_type' AS event_type,\n    event #>>'{data, href}' as href,\n    event #>>'{data, link_id}' as link_id,\n    event #>>'{data, subject}' as subject,\n    CAST(\n        event #>>'{data, template_id}' AS INTEGER\n    ) AS template_id,\n    TO_TIMESTAMP(CAST(event ->> 'timestamp' AS INTEGER)) AS \"timestamp\",\n\tevent #>>'{data, variables, campaign, id}' as cio_campaign_id,\n\tevent #>>'{data, variables, campaign, name}' as cio_campaign_name,\n\tevent #>>'{data, variables, campaign, type}' as cio_campaign_type,\n    event #>>'{data, message_id}' as cio_message_id,\n    event #>>'{data, message_name}' as cio_message_name\nFROM\n    \"quasar_prod_warehouse\".\"cio\".\"event_log\" cel\nWHERE event ->> 'event_type' IN ('email_bounced', 'email_converted', 'email_opened', 'email_unsubscribed', 'email_clicked', 'email_sent')\nUNION\nSELECT\n    customer_id,\n    email_address,\n    email_id,\n    event_id,\n    event_type,\n    href,\n    link_id,\n    \"subject\",\n    template_id,\n    \"timestamp\",\n    NULL AS cio_campaign_id,\n    NULL AS cio_campaign_name,\n    NULL AS cio_campaign_type,\n    NULL AS cio_message_id,\n    NULL AS cio_message_name\nFROM \"quasar_prod_warehouse\".\"historical_analytics\".\"cio_email_events\"\nWHERE\n    -- Date we re-started saving raw C.io events to the event_log table\n    \"timestamp\" < '2020-04-01'", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "SELECT\n    event #>>'{data, customer_id}' as customer_id,\n    event #>>'{data, email_address}' as email_address,\n\tcoalesce(\n\t    event #>>'{data, email_id}',\n\t    event #>>'{data, variables, email_id}'\n\t) AS email_id,\n    event ->> 'event_id' AS event_id,\n    event ->> 'event_type' AS event_type,\n    event #>>'{data, href}' as href,\n    event #>>'{data, link_id}' as link_id,\n    event #>>'{data, subject}' as subject,\n    CAST(\n        event #>>'{data, template_id}' AS INTEGER\n    ) AS template_id,\n    TO_TIMESTAMP(CAST(event ->> 'timestamp' AS INTEGER)) AS \"timestamp\",\n\tevent #>>'{data, variables, campaign, id}' as cio_campaign_id,\n\tevent #>>'{data, variables, campaign, name}' as cio_campaign_name,\n\tevent #>>'{data, variables, campaign, type}' as cio_campaign_type,\n    event #>>'{data, message_id}' as cio_message_id,\n    event #>>'{data, message_name}' as cio_message_name\nFROM\n    \"quasar_prod_warehouse\".\"cio\".\"event_log\" cel\nWHERE event ->> 'event_type' IN ('email_bounced', 'email_converted', 'email_opened', 'email_unsubscribed', 'email_clicked', 'email_sent')\nUNION\nSELECT\n    customer_id,\n    email_address,\n    email_id,\n    event_id,\n    event_type,\n    href,\n    link_id,\n    \"subject\",\n    template_id,\n    \"timestamp\",\n    NULL AS cio_campaign_id,\n    NULL AS cio_campaign_name,\n    NULL AS cio_campaign_type,\n    NULL AS cio_message_id,\n    NULL AS cio_message_name\nFROM \"quasar_prod_warehouse\".\"historical_analytics\".\"cio_email_events\"\nWHERE\n    -- Date we re-started saving raw C.io events to the event_log table\n    \"timestamp\" < '2020-04-01'"}, "error": null, "status": null, "execution_time": 0.024457454681396484, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-02-23T21:28:54.383719Z", "completed_at": "2021-02-23T21:28:54.407006Z"}, {"name": "execute", "started_at": "2021-02-23T21:28:54.407300Z", "completed_at": "2021-02-23T21:28:54.407307Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "SELECT \n  cmr.contentful_id,\n  (cmr.fields #>>'{legacy_campaign_id}')::INT AS legacy_campaign_id,\n  cmr.fields #>>'{internal_title}' AS internal_title,\n  cmr.fields #>>'{title}' AS title,\n  cmr.fields #>>'{slug}' AS  slug, \n  cmr.fields #>>'{display_referral_page}' AS display_referral_page\nFROM {{ source('public_intermediate', 'contentful_metadata_raw') }} cmr", "compiled": true, "database": "quasar_prod_warehouse", "schema": "public_intermediate", "fqn": ["ds_dbt", "campaign_info", "contentful_metadata"], "unique_id": "model.ds_dbt.contentful_metadata", "package_name": "ds_dbt", "root_path": "/home/runner/work/quasar/quasar/quasar/dbt", "path": "campaign_info/contentful_metadata.sql", "original_file_path": "models/campaign_info/contentful_metadata.sql", "name": "contentful_metadata", "resource_type": "model", "alias": "contentful_metadata", "checksum": {"name": "sha256", "checksum": "2d3a2dd0470f33296f97b48afaf994b7de94ccdb74623a263ea46a67f8de36b8"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [{"sql": "{{ grant_select_to(this, ['dsanalyst', 'looker']) }}", "transaction": true, "index": null}], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "intermediate", "database": null, "tags": ["campaign_info"], "full_refresh": null}, "tags": ["campaign_info"], "refs": [], "sources": [["public_intermediate", "contentful_metadata_raw"]], "depends_on": {"macros": ["macro.ds_dbt.grant_select_to"], "nodes": ["source.ds_dbt.public_intermediate.contentful_metadata_raw"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "../../docs/compiled/ds_dbt/models/campaign_info/contentful_metadata.sql", "deferred": false, "compiled_sql": "SELECT \n  cmr.contentful_id,\n  (cmr.fields #>>'{legacy_campaign_id}')::INT AS legacy_campaign_id,\n  cmr.fields #>>'{internal_title}' AS internal_title,\n  cmr.fields #>>'{title}' AS title,\n  cmr.fields #>>'{slug}' AS  slug, \n  cmr.fields #>>'{display_referral_page}' AS display_referral_page\nFROM \"quasar_prod_warehouse\".\"public_intermediate\".\"contentful_metadata_raw\" cmr", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "SELECT \n  cmr.contentful_id,\n  (cmr.fields #>>'{legacy_campaign_id}')::INT AS legacy_campaign_id,\n  cmr.fields #>>'{internal_title}' AS internal_title,\n  cmr.fields #>>'{title}' AS title,\n  cmr.fields #>>'{slug}' AS  slug, \n  cmr.fields #>>'{display_referral_page}' AS display_referral_page\nFROM \"quasar_prod_warehouse\".\"public_intermediate\".\"contentful_metadata_raw\" cmr"}, "error": null, "status": null, "execution_time": 0.012174367904663086, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-02-23T21:28:54.408542Z", "completed_at": "2021-02-23T21:28:54.419607Z"}, {"name": "execute", "started_at": "2021-02-23T21:28:54.419933Z", "completed_at": "2021-02-23T21:28:54.419942Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "SELECT\n    event_id AS event_id,\n    app_id AS event_source,\n    collector_tstamp AS event_datetime,\n    CASE\n      WHEN\n        -- https://www.pivotaltracker.com/story/show/171388718\n        se_property = 'phoenix_failed_call_to_action_popover_submission'\n      THEN\n        'phoenix_failed_call_to_action_popover'\n      ELSE\n        se_property END AS event_name,\n    \"event\" AS event_type,\n    page_urlhost AS host,\n    page_urlpath AS \"path\",\n    page_urlquery AS query_parameters,\n    CASE\n      WHEN\n        -- https://www.pivotaltracker.com/story/show/171388472\n        se_property similar to 'phoenix_clicked_nav_link_log_(in|out)' AND se_category = 'navigation'\n      THEN\n        'authentication'\n      ELSE\n        se_category END AS se_category,\n    CASE\n      WHEN\n        -- https://www.pivotaltracker.com/story/show/171161608\n        ((se_property = 'phoenix_clicked_voter_registration_action' AND se_action = 'undefined_clicked')\n        OR\n        -- https://www.pivotaltracker.com/story/show/171392080\n        (se_property = 'phoenix_clicked_nav_button_search_form_toggle' AND se_action = 'link_clicked'))\n      THEN\n        'button_clicked'\n      WHEN\n        -- https://www.pivotaltracker.com/story/show/171388922\n        se_property ilike 'phoenix_dismissed_%' AND se_action = 'dismissable_element_dismissed'\n      THEN\n        'element_dismissed'\n      ELSE\n        se_action END AS se_action,\n    CASE\n      WHEN\n        -- https://www.pivotaltracker.com/story/show/171388718\n        se_property = 'phoenix_failed_call_to_action_popover_submission' AND se_label = 'call_to_action_popover_submission'\n      THEN\n        'call_to_action_popover'\n      ELSE\n        se_label END AS se_label,\n    domain_sessionid AS session_id,\n    domain_sessionidx AS session_counter,\n    dvce_type AS browser_size,\n    user_id AS northstar_id,\n    domain_userid AS device_id,\n    refr_urlhost AS referrer_host,\n    refr_urlpath AS referrer_path,\n    refr_source AS referrer_source\nFROM\n  {{ source('snowplow', 'event') }}\nWHERE\n  event_id NOT IN\n(\n  SELECT\n    event_id\n  FROM\n    {{ source('snowplow', 'ua_parser_context') }} u\n  WHERE\n    -- Created partial B-tree index ua_parser_ctx_uagent_fam\n    -- NOTE recreate index if the regex here changes\n    u.useragent_family SIMILAR TO '%(bot|crawl|slurp|spider|archiv|spinn|sniff|seo|audit|survey|pingdom|worm|capture|(browser|screen)shots|analyz|index|thumb|check|facebook|YandexBot|Twitterbot|a_archiver|facebookexternalhit|Bingbot|Googlebot|Baiduspider|360(Spider|User-agent)|Ghost)%'\n)\n\n{% if is_incremental() %}\n  -- this filter will only be applied on an incremental run\n  AND collector_tstamp >= (\n    SELECT\n      max(sp_event.event_datetime)\n    FROM\n      {{ this }} sp_event\n  )\n{% endif %}", "compiled": true, "database": "quasar_prod_warehouse", "schema": "public", "fqn": ["ds_dbt", "phoenix_events", "snowplow_base_event"], "unique_id": "model.ds_dbt.snowplow_base_event", "package_name": "ds_dbt", "root_path": "/home/runner/work/quasar/quasar/quasar/dbt", "path": "phoenix_events/snowplow_base_event.sql", "original_file_path": "models/phoenix_events/snowplow_base_event.sql", "name": "snowplow_base_event", "resource_type": "model", "alias": "snowplow_base_event", "checksum": {"name": "sha256", "checksum": "a6efa3bebe2266a495c4c242249d1343593cffefd9a9cb6db2aded6d285d3b3b"}, "config": {"enabled": true, "materialized": "incremental", "persist_docs": {}, "post-hook": [{"sql": "{% if not is_incremental() %}\n  CREATE INDEX {{ get_index_name(this, 'event_id') }} (event_id);\n  {{ grant_select_to(this, ['dsanalyst']) }}\n{% endif %}\n", "transaction": true, "index": null}], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": "snowplow_base_event", "schema": null, "database": null, "tags": ["phoenix_events"], "full_refresh": null}, "tags": ["phoenix_events"], "refs": [], "sources": [["snowplow", "event"], ["snowplow", "ua_parser_context"]], "depends_on": {"macros": ["macro.dbt.is_incremental", "macro.ds_dbt.get_index_name", "macro.ds_dbt.grant_select_to"], "nodes": ["source.ds_dbt.snowplow.event", "source.ds_dbt.snowplow.ua_parser_context"]}, "description": "Table that extracts and cleans up relevant columns from raw DS web click stream data.", "columns": {"browser_size": {"name": "browser_size", "description": "Which type of browser a user is using (eg. Mobile, Desktop). This is default metadata sent from browser, it won't always be present.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "device_id": {"name": "device_id", "description": "[Required] ID of the device used", "meta": {}, "data_type": null, "quote": null, "tags": []}, "event_datetime": {"name": "event_datetime", "description": "[Required] When the event occurred in UTC (eg. 2018-01-01 12:00:00)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "event_id": {"name": "event_id", "description": "[Required] This is a unique identifier for each event", "meta": {}, "data_type": null, "quote": null, "tags": []}, "event_name": {"name": "event_name", "description": "Name of the event (eg. northstar_submitted_register, https://docs.google.com/spreadsheets/d/1lm-fGrIm85nUTxSojqyCt_Ehmm1zEbViFhKpxcJiz1A/edit#gid=406441516)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "event_source": {"name": "event_source", "description": "[Required] Application source for event (eg. Phoenix, Northstar)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "event_type": {"name": "event_type", "description": "[Required] Type of event (pv = 'Page View', se = 'Structured Event')", "meta": {}, "data_type": null, "quote": null, "tags": []}, "host": {"name": "host", "description": "[Required] URL host where event occurred (eg. www.dosomething.org or identity.dosomething.org)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "northstar_id": {"name": "northstar_id", "description": "The Northstar ID of the user who generated the event. Unauthenticated visits will not have northstar id", "meta": {}, "data_type": null, "quote": null, "tags": []}, "path": {"name": "path", "description": "[Required] URL path event occurred at (eg. /login or /us/campaigns/huddle-for-heroes)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "query_parameters": {"name": "query_parameters", "description": "Optional query parameters for the request (eg. query=huddle)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "referrer_host": {"name": "referrer_host", "description": "URL host of the referring site (eg. google.com). Only present if session is referred from some external site link (ex. Facebook, Google, Bing). This would be NULL for anyone directly typing dosomething.org into a browser", "meta": {}, "data_type": null, "quote": null, "tags": []}, "referrer_path": {"name": "referrer_path", "description": "URL path from referring site (eg. /10-stats-on-teen-drug-and-alcohol-use/). Only present if session is referred from some external site link (ex. Facebook, Google, Bing).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "referrer_source": {"name": "referrer_source", "description": "Referrer source name (eg. Google, Facebook). Only present if session is referred from some external site link (ex. Facebook, Google, Bing).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "se_action": {"name": "se_action", "description": "Action performed / event name (eg. form_submitted, action_failed) - Snowplow Custom structured event. (Required for event type \"se\")", "meta": {}, "data_type": null, "quote": null, "tags": []}, "se_category": {"name": "se_category", "description": "Category of event (eg. focused_field, authentication) - Snowplow Custom structured event. (Required for event type \"se\")", "meta": {}, "data_type": null, "quote": null, "tags": []}, "se_label": {"name": "se_label", "description": "The object of the action (eg. first_name, register, voter_reg_status) - Snowplow Custom structured event. (Required for event type \"se\")", "meta": {}, "data_type": null, "quote": null, "tags": []}, "session_counter": {"name": "session_counter", "description": "[Required] How many sessions a user has started. This is how we associate new vs. returning visits.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "session_id": {"name": "session_id", "description": "[Required] Unique identifier of the user's session. This is how we associate all events in a visit.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/phoenix_events/schema.yml", "build_path": "../../docs/compiled/ds_dbt/models/phoenix_events/snowplow_base_event.sql", "deferred": false, "compiled_sql": "SELECT\n    event_id AS event_id,\n    app_id AS event_source,\n    collector_tstamp AS event_datetime,\n    CASE\n      WHEN\n        -- https://www.pivotaltracker.com/story/show/171388718\n        se_property = 'phoenix_failed_call_to_action_popover_submission'\n      THEN\n        'phoenix_failed_call_to_action_popover'\n      ELSE\n        se_property END AS event_name,\n    \"event\" AS event_type,\n    page_urlhost AS host,\n    page_urlpath AS \"path\",\n    page_urlquery AS query_parameters,\n    CASE\n      WHEN\n        -- https://www.pivotaltracker.com/story/show/171388472\n        se_property similar to 'phoenix_clicked_nav_link_log_(in|out)' AND se_category = 'navigation'\n      THEN\n        'authentication'\n      ELSE\n        se_category END AS se_category,\n    CASE\n      WHEN\n        -- https://www.pivotaltracker.com/story/show/171161608\n        ((se_property = 'phoenix_clicked_voter_registration_action' AND se_action = 'undefined_clicked')\n        OR\n        -- https://www.pivotaltracker.com/story/show/171392080\n        (se_property = 'phoenix_clicked_nav_button_search_form_toggle' AND se_action = 'link_clicked'))\n      THEN\n        'button_clicked'\n      WHEN\n        -- https://www.pivotaltracker.com/story/show/171388922\n        se_property ilike 'phoenix_dismissed_%' AND se_action = 'dismissable_element_dismissed'\n      THEN\n        'element_dismissed'\n      ELSE\n        se_action END AS se_action,\n    CASE\n      WHEN\n        -- https://www.pivotaltracker.com/story/show/171388718\n        se_property = 'phoenix_failed_call_to_action_popover_submission' AND se_label = 'call_to_action_popover_submission'\n      THEN\n        'call_to_action_popover'\n      ELSE\n        se_label END AS se_label,\n    domain_sessionid AS session_id,\n    domain_sessionidx AS session_counter,\n    dvce_type AS browser_size,\n    user_id AS northstar_id,\n    domain_userid AS device_id,\n    refr_urlhost AS referrer_host,\n    refr_urlpath AS referrer_path,\n    refr_source AS referrer_source\nFROM\n  \"quasar_prod_warehouse\".\"ft_snowplow\".\"event\"\nWHERE\n  event_id NOT IN\n(\n  SELECT\n    event_id\n  FROM\n    \"quasar_prod_warehouse\".\"ft_snowplow\".\"ua_parser_context\" u\n  WHERE\n    -- Created partial B-tree index ua_parser_ctx_uagent_fam\n    -- NOTE recreate index if the regex here changes\n    u.useragent_family SIMILAR TO '%(bot|crawl|slurp|spider|archiv|spinn|sniff|seo|audit|survey|pingdom|worm|capture|(browser|screen)shots|analyz|index|thumb|check|facebook|YandexBot|Twitterbot|a_archiver|facebookexternalhit|Bingbot|Googlebot|Baiduspider|360(Spider|User-agent)|Ghost)%'\n)\n\n\n  -- this filter will only be applied on an incremental run\n  AND collector_tstamp >= (\n    SELECT\n      max(sp_event.event_datetime)\n    FROM\n      \"quasar_prod_warehouse\".\"public\".\"snowplow_base_event\" sp_event\n  )\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "SELECT\n    event_id AS event_id,\n    app_id AS event_source,\n    collector_tstamp AS event_datetime,\n    CASE\n      WHEN\n        -- https://www.pivotaltracker.com/story/show/171388718\n        se_property = 'phoenix_failed_call_to_action_popover_submission'\n      THEN\n        'phoenix_failed_call_to_action_popover'\n      ELSE\n        se_property END AS event_name,\n    \"event\" AS event_type,\n    page_urlhost AS host,\n    page_urlpath AS \"path\",\n    page_urlquery AS query_parameters,\n    CASE\n      WHEN\n        -- https://www.pivotaltracker.com/story/show/171388472\n        se_property similar to 'phoenix_clicked_nav_link_log_(in|out)' AND se_category = 'navigation'\n      THEN\n        'authentication'\n      ELSE\n        se_category END AS se_category,\n    CASE\n      WHEN\n        -- https://www.pivotaltracker.com/story/show/171161608\n        ((se_property = 'phoenix_clicked_voter_registration_action' AND se_action = 'undefined_clicked')\n        OR\n        -- https://www.pivotaltracker.com/story/show/171392080\n        (se_property = 'phoenix_clicked_nav_button_search_form_toggle' AND se_action = 'link_clicked'))\n      THEN\n        'button_clicked'\n      WHEN\n        -- https://www.pivotaltracker.com/story/show/171388922\n        se_property ilike 'phoenix_dismissed_%' AND se_action = 'dismissable_element_dismissed'\n      THEN\n        'element_dismissed'\n      ELSE\n        se_action END AS se_action,\n    CASE\n      WHEN\n        -- https://www.pivotaltracker.com/story/show/171388718\n        se_property = 'phoenix_failed_call_to_action_popover_submission' AND se_label = 'call_to_action_popover_submission'\n      THEN\n        'call_to_action_popover'\n      ELSE\n        se_label END AS se_label,\n    domain_sessionid AS session_id,\n    domain_sessionidx AS session_counter,\n    dvce_type AS browser_size,\n    user_id AS northstar_id,\n    domain_userid AS device_id,\n    refr_urlhost AS referrer_host,\n    refr_urlpath AS referrer_path,\n    refr_source AS referrer_source\nFROM\n  \"quasar_prod_warehouse\".\"ft_snowplow\".\"event\"\nWHERE\n  event_id NOT IN\n(\n  SELECT\n    event_id\n  FROM\n    \"quasar_prod_warehouse\".\"ft_snowplow\".\"ua_parser_context\" u\n  WHERE\n    -- Created partial B-tree index ua_parser_ctx_uagent_fam\n    -- NOTE recreate index if the regex here changes\n    u.useragent_family SIMILAR TO '%(bot|crawl|slurp|spider|archiv|spinn|sniff|seo|audit|survey|pingdom|worm|capture|(browser|screen)shots|analyz|index|thumb|check|facebook|YandexBot|Twitterbot|a_archiver|facebookexternalhit|Bingbot|Googlebot|Baiduspider|360(Spider|User-agent)|Ghost)%'\n)\n\n\n  -- this filter will only be applied on an incremental run\n  AND collector_tstamp >= (\n    SELECT\n      max(sp_event.event_datetime)\n    FROM\n      \"quasar_prod_warehouse\".\"public\".\"snowplow_base_event\" sp_event\n  )\n"}, "error": null, "status": null, "execution_time": 0.030544519424438477, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-02-23T21:28:54.421147Z", "completed_at": "2021-02-23T21:28:54.450582Z"}, {"name": "execute", "started_at": "2021-02-23T21:28:54.450878Z", "completed_at": "2021-02-23T21:28:54.450884Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "SELECT\n    payload::jsonb #>> '{actionId}' AS action_id,\n    payload::jsonb #>> '{blockId}' AS block_id,\n    payload::jsonb #>> '{campaignId}' AS campaign_id,\n    payload::jsonb #>> '{contextSource}' AS context_source,\n    payload::jsonb #>> '{value}' AS context_value,\n    event_id,\n    payload::jsonb #>> '{name}' AS event_name,\n    _fivetran_synced AS ft_timestamp,\n    payload::jsonb #>> '{groupId}' AS group_id,\n    payload::jsonb #>> '{modalType}' AS modal_type,\n    payload::jsonb #>> '{pageId}' AS page_id,\n    payload::jsonb #>> '{searchQuery}' AS search_query,\n    payload::jsonb #>> '{utmSource}' AS utm_source,\n    payload::jsonb #>> '{utmMedium}' AS utm_medium,\n    payload::jsonb #>> '{utmCampaign}' AS utm_campaign,\n    payload::jsonb #>> '{url}' AS url\nFROM {{ source('snowplow', 'snowplow_event') }}\n\n{% if is_incremental() %}\n-- this filter will only be applied on an incremental run\nWHERE _fivetran_synced >= (select max(spe.ft_timestamp) from {{this}} spe)\n{% endif %}", "compiled": true, "database": "quasar_prod_warehouse", "schema": "public", "fqn": ["ds_dbt", "phoenix_events", "snowplow_payload_event"], "unique_id": "model.ds_dbt.snowplow_payload_event", "package_name": "ds_dbt", "root_path": "/home/runner/work/quasar/quasar/quasar/dbt", "path": "phoenix_events/snowplow_payload_event.sql", "original_file_path": "models/phoenix_events/snowplow_payload_event.sql", "name": "snowplow_payload_event", "resource_type": "model", "alias": "snowplow_payload_event", "checksum": {"name": "sha256", "checksum": "5452b251f9d5754ccbcc4c2e85221c3e56d6a2a07c2999447ac84016e620638f"}, "config": {"enabled": true, "materialized": "incremental", "persist_docs": {}, "post-hook": [{"sql": "{% if not is_incremental() %}\n  CREATE INDEX {{ get_index_name(this, 'event_id') }} (event_id);\n  {{ grant_select_to(this, ['dsanalyst']) }}\n{% endif %}\n", "transaction": true, "index": null}], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": "snowplow_payload_event", "schema": null, "database": null, "tags": ["phoenix_events"], "full_refresh": null}, "tags": ["phoenix_events"], "refs": [], "sources": [["snowplow", "snowplow_event"]], "depends_on": {"macros": ["macro.dbt.is_incremental", "macro.ds_dbt.get_index_name", "macro.ds_dbt.grant_select_to"], "nodes": ["source.ds_dbt.snowplow.snowplow_event"]}, "description": "Table containing extra data from events in snowplow_base_event table", "columns": {"action_id": {"name": "action_id", "description": "Internal identifier of the campaign action", "meta": {}, "data_type": null, "quote": null, "tags": []}, "block_id": {"name": "block_id", "description": "References specific content blocks from contentful CMS, PMs decide whether its important to send that info with specific click events.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "Internal DoSomething Campaign ID. Not present on all web visits (ex. the homepage is not tied to a campaign_id).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "context_source": {"name": "context_source", "description": "We use this to denote the 'context' for events that can be triggered from different locations in the app. (It'll be a string like campaign_landing_page or scholarship_modal).\n\ne.g. the 'clicked_signup' event can come from wherever we embed a campaign signup form which happens in a modal, or on the landing page itself. (So helpful for analytics to determine which specific form is driving the signup).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "context_value": {"name": "context_value", "description": "This property is available to add more context to certain events (e.g. cause value selected when filtering campaigns by cause). It is vague enough that testing of when we should get this value is not practical. Consult with PMs for specific context when this field exists.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "event_id": {"name": "event_id", "description": "[Required] This is a unique identifier for each event", "meta": {}, "data_type": null, "quote": null, "tags": []}, "event_name": {"name": "event_name", "description": "Name of the event (eg. northstar_submitted_register, https://docs.google.com/spreadsheets/d/1lm-fGrIm85nUTxSojqyCt_Ehmm1zEbViFhKpxcJiz1A/edit#gid=406441516)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ft_timestamp": {"name": "ft_timestamp", "description": "[Required] When the event occurred in UTC (eg. 2018-01-01 12:00:00)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "group_id": {"name": "group_id", "description": "Unique identifier for groups. Group id is tied to work for volunteer credits and online voter drives (members can participate as part of a group)... product managers can choose to send web events with the group_id where its relevant. (right now it's being used for Online voter registration groups, but in the future it could be used for other types of group related efforts, e.g. volunteer hours).\n\nIncluded only with \"clicked_group_finder_group\" events. This may change in the future. Consult with PMs for use of this property in other events.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "modal_type": {"name": "modal_type", "description": "[Required conditionally] Certain pages have modals and therefore certain event actions will have it (e.g. NULL or SURVEY_MODAL). Included with \"opened_modal\" or \"closed_modal\" events.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "page_id": {"name": "page_id", "description": "The distinct page_id for which the event occurred on. This is currently optional, but will eventually be required (TODO).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "search_query": {"name": "search_query", "description": "Term associated with any search events. Sent when the user submits a search term in the search bar.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "url": {"name": "url", "description": "This \"url\" is included in some events. Not all events with a name containing \"clicked\" will have \"url\" included. Consult with PMs for context specific to a certain event.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_campaign": {"name": "utm_campaign", "description": "Tracks which campaign the traffic was generated by. Shows up in Google Analytics as Campaign Name (eg. editorial_newsletter). Parameter passed by marketing team (would not be present for organic/ direct traffic)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_medium": {"name": "utm_medium", "description": "How the traffic got to the platform (eg. referral, CPC). Parameter passed by marketing team (would not be present for organic/ direct traffic)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_source": {"name": "utm_source", "description": "Tracks where the traffic is coming from. (eg. scholarship_listing, Facebook). Parameter passed by marketing team (would not be present for organic/ direct traffic)", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/phoenix_events/schema.yml", "build_path": "../../docs/compiled/ds_dbt/models/phoenix_events/snowplow_payload_event.sql", "deferred": false, "compiled_sql": "SELECT\n    payload::jsonb #>> '{actionId}' AS action_id,\n    payload::jsonb #>> '{blockId}' AS block_id,\n    payload::jsonb #>> '{campaignId}' AS campaign_id,\n    payload::jsonb #>> '{contextSource}' AS context_source,\n    payload::jsonb #>> '{value}' AS context_value,\n    event_id,\n    payload::jsonb #>> '{name}' AS event_name,\n    _fivetran_synced AS ft_timestamp,\n    payload::jsonb #>> '{groupId}' AS group_id,\n    payload::jsonb #>> '{modalType}' AS modal_type,\n    payload::jsonb #>> '{pageId}' AS page_id,\n    payload::jsonb #>> '{searchQuery}' AS search_query,\n    payload::jsonb #>> '{utmSource}' AS utm_source,\n    payload::jsonb #>> '{utmMedium}' AS utm_medium,\n    payload::jsonb #>> '{utmCampaign}' AS utm_campaign,\n    payload::jsonb #>> '{url}' AS url\nFROM \"quasar_prod_warehouse\".\"ft_snowplow\".\"snowplow_event\"\n\n\n-- this filter will only be applied on an incremental run\nWHERE _fivetran_synced >= (select max(spe.ft_timestamp) from \"quasar_prod_warehouse\".\"public\".\"snowplow_payload_event\" spe)\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "SELECT\n    payload::jsonb #>> '{actionId}' AS action_id,\n    payload::jsonb #>> '{blockId}' AS block_id,\n    payload::jsonb #>> '{campaignId}' AS campaign_id,\n    payload::jsonb #>> '{contextSource}' AS context_source,\n    payload::jsonb #>> '{value}' AS context_value,\n    event_id,\n    payload::jsonb #>> '{name}' AS event_name,\n    _fivetran_synced AS ft_timestamp,\n    payload::jsonb #>> '{groupId}' AS group_id,\n    payload::jsonb #>> '{modalType}' AS modal_type,\n    payload::jsonb #>> '{pageId}' AS page_id,\n    payload::jsonb #>> '{searchQuery}' AS search_query,\n    payload::jsonb #>> '{utmSource}' AS utm_source,\n    payload::jsonb #>> '{utmMedium}' AS utm_medium,\n    payload::jsonb #>> '{utmCampaign}' AS utm_campaign,\n    payload::jsonb #>> '{url}' AS url\nFROM \"quasar_prod_warehouse\".\"ft_snowplow\".\"snowplow_event\"\n\n\n-- this filter will only be applied on an incremental run\nWHERE _fivetran_synced >= (select max(spe.ft_timestamp) from \"quasar_prod_warehouse\".\"public\".\"snowplow_payload_event\" spe)\n"}, "error": null, "status": null, "execution_time": 0.02287888526916504, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-02-23T21:28:54.452253Z", "completed_at": "2021-02-23T21:28:54.474031Z"}, {"name": "execute", "started_at": "2021-02-23T21:28:54.474323Z", "completed_at": "2021-02-23T21:28:54.474330Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "SELECT DISTINCT\n\t_id as northstar_id,\n\t(audit #>> '{email_subscription_topics,updated_at,date}')::timestamp AS newsletter_updated_at,\n\tjson_array_elements(u.email_subscription_topics::json)::TEXT AS newsletter_topic\nFROM {{ source('northstar', 'northstar_users_snapshot') }} u\nWHERE audit #>> '{email_subscription_topics,updated_at,date}' IS NOT NULL", "compiled": true, "database": "quasar_prod_warehouse", "schema": "public", "fqn": ["ds_dbt", "news_subscription", "email_subscription_topics_raw"], "unique_id": "model.ds_dbt.email_subscription_topics_raw", "package_name": "ds_dbt", "root_path": "/home/runner/work/quasar/quasar/quasar/dbt", "path": "news_subscription/email_subscription_topics_raw.sql", "original_file_path": "models/news_subscription/email_subscription_topics_raw.sql", "name": "email_subscription_topics_raw", "resource_type": "model", "alias": "email_subscription_topics_raw", "checksum": {"name": "sha256", "checksum": "5d8bb57235d723eb2e7c4eb628eebd823732d39975ce7f970898f86358fd2adc"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [{"sql": "{{ grant_select_to(this, ['dsanalyst', 'looker']) }}", "transaction": true, "index": null}], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": "email_subscription_topics_raw", "schema": null, "database": null, "tags": ["news_subscription"], "full_refresh": null}, "tags": ["news_subscription"], "refs": [], "sources": [["northstar", "northstar_users_snapshot"]], "depends_on": {"macros": ["macro.ds_dbt.grant_select_to"], "nodes": ["source.ds_dbt.northstar.northstar_users_snapshot"]}, "description": "Table containing data for all member events.", "columns": {"northstar_id": {"name": "northstar_id", "description": "The Northstar ID of the user who generated the event.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "newsletter_updated_at": {"name": "newsletter_updated_at", "description": "When the item was updated in UTC (eg. 2018-01-01 12:00:00)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "newsletter_topic": {"name": "newsletter_topic", "description": "Newsletter topic. (e.g. community, lifestyle)", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/news_subscription/schema.yml", "build_path": "../../docs/compiled/ds_dbt/models/news_subscription/email_subscription_topics_raw.sql", "deferred": false, "compiled_sql": "SELECT DISTINCT\n\t_id as northstar_id,\n\t(audit #>> '{email_subscription_topics,updated_at,date}')::timestamp AS newsletter_updated_at,\n\tjson_array_elements(u.email_subscription_topics::json)::TEXT AS newsletter_topic\nFROM \"quasar_prod_warehouse\".\"northstar_ft_userapi\".\"northstar_users_snapshot\" u\nWHERE audit #>> '{email_subscription_topics,updated_at,date}' IS NOT NULL", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "SELECT DISTINCT\n\t_id as northstar_id,\n\t(audit #>> '{email_subscription_topics,updated_at,date}')::timestamp AS newsletter_updated_at,\n\tjson_array_elements(u.email_subscription_topics::json)::TEXT AS newsletter_topic\nFROM \"quasar_prod_warehouse\".\"northstar_ft_userapi\".\"northstar_users_snapshot\" u\nWHERE audit #>> '{email_subscription_topics,updated_at,date}' IS NOT NULL"}, "error": null, "status": null, "execution_time": 0.013989686965942383, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-02-23T21:28:54.475712Z", "completed_at": "2021-02-23T21:28:54.488643Z"}, {"name": "execute", "started_at": "2021-02-23T21:28:54.488937Z", "completed_at": "2021-02-23T21:28:54.488944Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "SELECT\nid::varchar(256) as survey_response_id\n, nps_score::int\n, (case when nps_score::int <= 6 then 'detractor'\n     when nps_score::int <= 8 then 'passive'\n     when nps_score::int <= 10 then 'promoter'\n     else 'invalid score' end) as net_promoter_cat\n, nps_reason::text\n, northstar_id::varchar(256)\n, url as surveyed_on_url\n, legacy_campaign_id\n, submit_date::timestamp as created_at\n\n  FROM {{ source('survey', '2018_2020_typeform_web_nps') }}", "compiled": true, "database": "quasar_prod_warehouse", "schema": "public", "fqn": ["ds_dbt", "staging", "surveys", "base", "base_historical_nps_web"], "unique_id": "model.ds_dbt.base_historical_nps_web", "package_name": "ds_dbt", "root_path": "/home/runner/work/quasar/quasar/quasar/dbt", "path": "staging/surveys/base/base_historical_nps_web.sql", "original_file_path": "models/staging/surveys/base/base_historical_nps_web.sql", "name": "base_historical_nps_web", "resource_type": "model", "alias": "base_historical_nps_web", "checksum": {"name": "sha256", "checksum": "9e5d47400aeb4bff7b0066d9500f87ee9ac7b5e154ae031bcc6f829807a17d3d"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [], "sources": [["survey", "2018_2020_typeform_web_nps"]], "depends_on": {"macros": [], "nodes": ["source.ds_dbt.survey.2018_2020_typeform_web_nps"]}, "description": "A table containing nps survey results from web users from 2018-2020", "columns": {"survey_response_id": {"name": "survey_response_id", "description": "The unique identifier for the survey response id", "meta": {}, "data_type": null, "quote": null, "tags": []}, "nps_score": {"name": "nps_score", "description": "The rating for the Net Promotoer Score survey question how likely would you be to recommend DS to a friend", "meta": {}, "data_type": null, "quote": null, "tags": []}, "nps_promoter_cat": {"name": "nps_promoter_cat", "description": "The Net Promotoer category (promoter, passive, detractor) based on the nps score", "meta": {}, "data_type": null, "quote": null, "tags": []}, "nps_reason": {"name": "nps_reason", "description": "Open text response providing reason for the score", "meta": {}, "data_type": null, "quote": null, "tags": []}, "northstar_id": {"name": "northstar_id", "description": "The Northstar ID of the user who generated the event.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "surveyed_on_url": {"name": "surveyed_on_url", "description": "The presumed url path when survey was served to user", "meta": {}, "data_type": null, "quote": null, "tags": []}, "legacy_campaign_id": {"name": "legacy_campaign_id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "When the item was created in UTC (eg. 2018-01-01 12:00:00)", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/staging/surveys/base/base.yml", "build_path": "../../docs/compiled/ds_dbt/models/staging/surveys/base/base_historical_nps_web.sql", "deferred": false, "compiled_sql": "SELECT\nid::varchar(256) as survey_response_id\n, nps_score::int\n, (case when nps_score::int <= 6 then 'detractor'\n     when nps_score::int <= 8 then 'passive'\n     when nps_score::int <= 10 then 'promoter'\n     else 'invalid score' end) as net_promoter_cat\n, nps_reason::text\n, northstar_id::varchar(256)\n, url as surveyed_on_url\n, legacy_campaign_id\n, submit_date::timestamp as created_at\n\n  FROM \"quasar_prod_warehouse\".\"survey\".\"2018_2020_typeform_web_nps\"", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "SELECT\nid::varchar(256) as survey_response_id\n, nps_score::int\n, (case when nps_score::int <= 6 then 'detractor'\n     when nps_score::int <= 8 then 'passive'\n     when nps_score::int <= 10 then 'promoter'\n     else 'invalid score' end) as net_promoter_cat\n, nps_reason::text\n, northstar_id::varchar(256)\n, url as surveyed_on_url\n, legacy_campaign_id\n, submit_date::timestamp as created_at\n\n  FROM \"quasar_prod_warehouse\".\"survey\".\"2018_2020_typeform_web_nps\""}, "error": null, "status": null, "execution_time": 0.015323638916015625, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-02-23T21:28:54.490193Z", "completed_at": "2021-02-23T21:28:54.504490Z"}, {"name": "execute", "started_at": "2021-02-23T21:28:54.504813Z", "completed_at": "2021-02-23T21:28:54.504820Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "SELECT\ntoken::varchar(256) as survey_response_id\n, nps_score::int\n, (case when nps_score::int <= 6 then 'detractor'\n     when nps_score::int <= 8 then 'passive'\n     when nps_score::int <= 10 then 'promoter'\n     else 'invalid score' end) as net_promoter_cat\n, nps_reason::text\n, northstar_id::varchar(256)\n, url as surveyed_on_url\n, submitted_at::timestamp as created_at\n\n  FROM {{ source('gsheets', 'typeform_web_nps_survey') }}", "compiled": true, "database": "quasar_prod_warehouse", "schema": "public", "fqn": ["ds_dbt", "staging", "surveys", "base", "base_typeform_nps_web"], "unique_id": "model.ds_dbt.base_typeform_nps_web", "package_name": "ds_dbt", "root_path": "/home/runner/work/quasar/quasar/quasar/dbt", "path": "staging/surveys/base/base_typeform_nps_web.sql", "original_file_path": "models/staging/surveys/base/base_typeform_nps_web.sql", "name": "base_typeform_nps_web", "resource_type": "model", "alias": "base_typeform_nps_web", "checksum": {"name": "sha256", "checksum": "6977868364211c4e95a11e84a9323e0c7d04c91fbdb823dd30a0920f97db1820"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [], "sources": [["gsheets", "typeform_web_nps_survey"]], "depends_on": {"macros": [], "nodes": ["source.ds_dbt.gsheets.typeform_web_nps_survey"]}, "description": "A table containing the Typeform nps survey results from web users from 2021 onwards", "columns": {"survey_response_id": {"name": "survey_response_id", "description": "The unique identifier for the survey response id", "meta": {}, "data_type": null, "quote": null, "tags": []}, "nps_score": {"name": "nps_score", "description": "The rating for the Net Promotoer Score survey question how likely would you be to recommend DS to a friend", "meta": {}, "data_type": null, "quote": null, "tags": []}, "nps_promoter_cat": {"name": "nps_promoter_cat", "description": "The Net Promotoer category (promoter, passive, detractor) based on the nps score", "meta": {}, "data_type": null, "quote": null, "tags": []}, "nps_reason": {"name": "nps_reason", "description": "Open text response providing reason for the score", "meta": {}, "data_type": null, "quote": null, "tags": []}, "northstar_id": {"name": "northstar_id", "description": "The Northstar ID of the user who generated the event.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "surveyed_on_url": {"name": "surveyed_on_url", "description": "The presumed url path when survey was served to user", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "When the item was created in UTC (eg. 2018-01-01 12:00:00)", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/staging/surveys/base/base.yml", "build_path": "../../docs/compiled/ds_dbt/models/staging/surveys/base/base_typeform_nps_web.sql", "deferred": false, "compiled_sql": "SELECT\ntoken::varchar(256) as survey_response_id\n, nps_score::int\n, (case when nps_score::int <= 6 then 'detractor'\n     when nps_score::int <= 8 then 'passive'\n     when nps_score::int <= 10 then 'promoter'\n     else 'invalid score' end) as net_promoter_cat\n, nps_reason::text\n, northstar_id::varchar(256)\n, url as surveyed_on_url\n, submitted_at::timestamp as created_at\n\n  FROM \"quasar_prod_warehouse\".\"ft_google_sheets\".\"typeform_web_nps_survey\"", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "SELECT\ntoken::varchar(256) as survey_response_id\n, nps_score::int\n, (case when nps_score::int <= 6 then 'detractor'\n     when nps_score::int <= 8 then 'passive'\n     when nps_score::int <= 10 then 'promoter'\n     else 'invalid score' end) as net_promoter_cat\n, nps_reason::text\n, northstar_id::varchar(256)\n, url as surveyed_on_url\n, submitted_at::timestamp as created_at\n\n  FROM \"quasar_prod_warehouse\".\"ft_google_sheets\".\"typeform_web_nps_survey\""}, "error": null, "status": null, "execution_time": 0.015133857727050781, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-02-23T21:28:54.506063Z", "completed_at": "2021-02-23T21:28:54.520109Z"}, {"name": "execute", "started_at": "2021-02-23T21:28:54.520430Z", "completed_at": "2021-02-23T21:28:54.520439Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "SELECT\n\tid,\n\t\"name\",\n\tcreated_at,\n\tupdated_at,\n\tfilter_by_state\nFROM {{ source('rogue', 'group_types') }}", "compiled": true, "database": "quasar_prod_warehouse", "schema": "public", "fqn": ["ds_dbt", "voter_reg", "group_types"], "unique_id": "model.ds_dbt.group_types", "package_name": "ds_dbt", "root_path": "/home/runner/work/quasar/quasar/quasar/dbt", "path": "voter_reg/group_types.sql", "original_file_path": "models/voter_reg/group_types.sql", "name": "group_types", "resource_type": "model", "alias": "group_types", "checksum": {"name": "sha256", "checksum": "f5345b0faa9fe2463378fccd0fa9488ef5d8ba95c06fc71e71fbddde3ae14089"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [{"sql": "{{ grant_select_to(this, ['dsanalyst', 'looker']) }}", "transaction": true, "index": null}], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": "group_types", "schema": null, "database": null, "tags": ["voter_reg"], "full_refresh": null}, "tags": ["voter_reg"], "refs": [], "sources": [["rogue", "group_types"]], "depends_on": {"macros": ["macro.ds_dbt.grant_select_to"], "nodes": ["source.ds_dbt.rogue.group_types"]}, "description": "Needs a description", "columns": {"id": {"name": "id", "description": "The Northstar ID of the user who generated the event.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "The name of the group", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "When the item was created in UTC (eg. 2018-01-01 12:00:00)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "When the item was updated in UTC (eg. 2018-01-01 12:00:00)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "filter_by_state": {"name": "filter_by_state", "description": "Filter by state is....", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/voter_reg/schema.yml", "build_path": "../../docs/compiled/ds_dbt/models/voter_reg/group_types.sql", "deferred": false, "compiled_sql": "SELECT\n\tid,\n\t\"name\",\n\tcreated_at,\n\tupdated_at,\n\tfilter_by_state\nFROM \"quasar_prod_warehouse\".\"ft_dosomething_rogue\".\"group_types\"", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "SELECT\n\tid,\n\t\"name\",\n\tcreated_at,\n\tupdated_at,\n\tfilter_by_state\nFROM \"quasar_prod_warehouse\".\"ft_dosomething_rogue\".\"group_types\""}, "error": null, "status": null, "execution_time": 0.015438079833984375, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-02-23T21:28:54.521642Z", "completed_at": "2021-02-23T21:28:54.535791Z"}, {"name": "execute", "started_at": "2021-02-23T21:28:54.536129Z", "completed_at": "2021-02-23T21:28:54.536136Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "SELECT\n\tid,\n\tgroup_type_id,\n\t\"name\",\n\tgoal,\n\tcreated_at,\n\tupdated_at,\n\tcity,\n\texternal_id,\n\tstate,\n\tschool_id\nFROM {{ source('rogue', 'groups') }}", "compiled": true, "database": "quasar_prod_warehouse", "schema": "public", "fqn": ["ds_dbt", "voter_reg", "groups"], "unique_id": "model.ds_dbt.groups", "package_name": "ds_dbt", "root_path": "/home/runner/work/quasar/quasar/quasar/dbt", "path": "voter_reg/groups.sql", "original_file_path": "models/voter_reg/groups.sql", "name": "groups", "resource_type": "model", "alias": "groups", "checksum": {"name": "sha256", "checksum": "560ec55108d45c2e34744598ac8680eb7456c084f9c89f3dc485131b5c89db32"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [{"sql": "{{ grant_select_to(this, ['dsanalyst', 'looker']) }}", "transaction": true, "index": null}], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": "groups", "schema": null, "database": null, "tags": ["voter_reg"], "full_refresh": null}, "tags": ["voter_reg"], "refs": [], "sources": [["rogue", "groups"]], "depends_on": {"macros": ["macro.ds_dbt.grant_select_to"], "nodes": ["source.ds_dbt.rogue.groups"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "../../docs/compiled/ds_dbt/models/voter_reg/groups.sql", "deferred": false, "compiled_sql": "SELECT\n\tid,\n\tgroup_type_id,\n\t\"name\",\n\tgoal,\n\tcreated_at,\n\tupdated_at,\n\tcity,\n\texternal_id,\n\tstate,\n\tschool_id\nFROM \"quasar_prod_warehouse\".\"ft_dosomething_rogue\".\"groups\"", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "SELECT\n\tid,\n\tgroup_type_id,\n\t\"name\",\n\tgoal,\n\tcreated_at,\n\tupdated_at,\n\tcity,\n\texternal_id,\n\tstate,\n\tschool_id\nFROM \"quasar_prod_warehouse\".\"ft_dosomething_rogue\".\"groups\""}, "error": null, "status": null, "execution_time": 0.011061429977416992, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-02-23T21:28:54.537652Z", "completed_at": "2021-02-23T21:28:54.547609Z"}, {"name": "execute", "started_at": "2021-02-23T21:28:54.547930Z", "completed_at": "2021-02-23T21:28:54.547937Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "SELECT\n\tc.id AS campaign_id,\n\tc.internal_title AS campaign_name,\n\ti.*\nFROM {{ source('campaign_info_historical', 'campaign_info_ashes_snapshot') }} i\nLEFT JOIN {{ source('rogue', 'campaigns') }} c ON i.campaign_run_id = c.campaign_run_id\nWHERE campaign_language IS DISTINCT FROM 'en'", "compiled": true, "database": "quasar_prod_warehouse", "schema": "public", "fqn": ["ds_dbt", "campaign_info", "campaign_info_international"], "unique_id": "model.ds_dbt.campaign_info_international", "package_name": "ds_dbt", "root_path": "/home/runner/work/quasar/quasar/quasar/dbt", "path": "campaign_info/campaign_info_international.sql", "original_file_path": "models/campaign_info/campaign_info_international.sql", "name": "campaign_info_international", "resource_type": "model", "alias": "campaign_info_international", "checksum": {"name": "sha256", "checksum": "9630672ee6af2a0fc0fbb6babb3157d5b666bfb4540d92e5cf57685072021089"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [{"sql": "{{ grant_select_to(this, ['dsanalyst', 'looker']) }}", "transaction": true, "index": null}], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": ["campaign_info"], "full_refresh": null}, "tags": ["campaign_info"], "refs": [], "sources": [["campaign_info_historical", "campaign_info_ashes_snapshot"], ["rogue", "campaigns"]], "depends_on": {"macros": ["macro.ds_dbt.grant_select_to"], "nodes": ["source.ds_dbt.campaign_info_historical.campaign_info_ashes_snapshot", "source.ds_dbt.rogue.campaigns"]}, "description": "A table containing information about international campaigns", "columns": {"campaign_id": {"name": "campaign_id", "description": "This is a unique identifier for the campaign", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_name": {"name": "campaign_name", "description": "Name of the campaign", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_node_id": {"name": "campaign_node_id", "description": "This is a unique identifier for the campaign", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_node_id_title": {"name": "campaign_node_id_title", "description": "Campaign title", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_run_id": {"name": "campaign_run_id", "description": "Unique identifier for the campaign run", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_run_id_title": {"name": "campaign_run_id_title", "description": "Title of the campaign run", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_type": {"name": "campaign_type", "description": "Campaign cause type (e.g. Mental Health, Education, Environment)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_language": {"name": "campaign_language", "description": "\"Language in which the campaign is available\"", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_run_start_date": {"name": "campaign_run_start_date", "description": "Start date of the campaign run", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_run_end_date": {"name": "campaign_run_end_date", "description": "End date of the campaign run", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_created_date": {"name": "campaign_created_date", "description": "When the campaign was created in UTC (eg. 2018-01-01 12:00:00)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_noun": {"name": "campaign_noun", "description": "Noun applicable to the user's action", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_verb": {"name": "campaign_verb", "description": "Verb describing the action the user should take", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_cause_type": {"name": "campaign_cause_type", "description": "Campaign cause type (e.g. Mental Health, Education, Environment)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_cta": {"name": "campaign_cta", "description": "Campaign's call to action", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_action_type": {"name": "campaign_action_type", "description": "Campaign action type (eg. Make Something, Share Something)", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/campaign_info/schema.yml", "build_path": "../../docs/compiled/ds_dbt/models/campaign_info/campaign_info_international.sql", "deferred": false, "compiled_sql": "SELECT\n\tc.id AS campaign_id,\n\tc.internal_title AS campaign_name,\n\ti.*\nFROM \"quasar_prod_warehouse\".\"public\".\"campaign_info_ashes_snapshot\" i\nLEFT JOIN \"quasar_prod_warehouse\".\"ft_dosomething_rogue\".\"campaigns\" c ON i.campaign_run_id = c.campaign_run_id\nWHERE campaign_language IS DISTINCT FROM 'en'", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "SELECT\n\tc.id AS campaign_id,\n\tc.internal_title AS campaign_name,\n\ti.*\nFROM \"quasar_prod_warehouse\".\"public\".\"campaign_info_ashes_snapshot\" i\nLEFT JOIN \"quasar_prod_warehouse\".\"ft_dosomething_rogue\".\"campaigns\" c ON i.campaign_run_id = c.campaign_run_id\nWHERE campaign_language IS DISTINCT FROM 'en'"}, "error": null, "status": null, "execution_time": 0.02214670181274414, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-02-23T21:28:54.549169Z", "completed_at": "2021-02-23T21:28:54.570296Z"}, {"name": "execute", "started_at": "2021-02-23T21:28:54.570594Z", "completed_at": "2021-02-23T21:28:54.570600Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "SELECT\n\t*\nFROM\n\t{{ source('rogue', 'clubs') }} c", "compiled": true, "database": "quasar_prod_warehouse", "schema": "public", "fqn": ["ds_dbt", "campaign_activity", "clubs"], "unique_id": "model.ds_dbt.clubs", "package_name": "ds_dbt", "root_path": "/home/runner/work/quasar/quasar/quasar/dbt", "path": "campaign_activity/clubs.sql", "original_file_path": "models/campaign_activity/clubs.sql", "name": "clubs", "resource_type": "model", "alias": "clubs", "checksum": {"name": "sha256", "checksum": "32ce3b95d836e71d8e0f2981cb9d51e9382385187d79ee71cfa244760b25575c"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [{"sql": "{{ grant_select_to(this, ['dsanalyst', 'looker']) }}", "transaction": true, "index": null}], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": "clubs", "schema": null, "database": null, "tags": ["campaign_activity"], "full_refresh": null}, "tags": ["campaign_activity"], "refs": [], "sources": [["rogue", "clubs"]], "depends_on": {"macros": ["macro.ds_dbt.grant_select_to"], "nodes": ["source.ds_dbt.rogue.clubs"]}, "description": "Contains the DS club names, location, and leaders", "columns": {"city": {"name": "city", "description": "City name where the club is located at", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "When the item was created in UTC (eg. 2018-01-01 12:00:00)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "id": {"name": "id", "description": "Club id", "meta": {}, "data_type": null, "quote": null, "tags": []}, "leader_id": {"name": "leader_id", "description": "Northstar ID of the member leading the club", "meta": {}, "data_type": null, "quote": null, "tags": []}, "location": {"name": "location", "description": "ISO-3166-2:US subdivision standard code for the club's location, e.g. New York (US-NY)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "The club's name", "meta": {}, "data_type": null, "quote": null, "tags": []}, "school_id": {"name": "school_id", "description": "Unique identifier for the user's school. This info comes from the school finder.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "When the item was updated in UTC (eg. 2018-01-01 12:00:00)", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/campaign_activity/schema.yml", "build_path": "../../docs/compiled/ds_dbt/models/campaign_activity/clubs.sql", "deferred": false, "compiled_sql": "SELECT\n\t*\nFROM\n\t\"quasar_prod_warehouse\".\"ft_dosomething_rogue\".\"clubs\" c", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "SELECT\n\t*\nFROM\n\t\"quasar_prod_warehouse\".\"ft_dosomething_rogue\".\"clubs\" c"}, "error": null, "status": null, "execution_time": 0.019034624099731445, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-02-23T21:28:54.572059Z", "completed_at": "2021-02-23T21:28:54.589970Z"}, {"name": "execute", "started_at": "2021-02-23T21:28:54.590276Z", "completed_at": "2021-02-23T21:28:54.590282Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "SELECT\n    *\nFROM\n    {{ source('tmc', 'tmc_users_matched') }}", "compiled": true, "database": "quasar_prod_warehouse", "schema": "public", "fqn": ["ds_dbt", "tmc_users", "tmc_users_matched"], "unique_id": "model.ds_dbt.tmc_users_matched", "package_name": "ds_dbt", "root_path": "/home/runner/work/quasar/quasar/quasar/dbt", "path": "tmc_users/tmc_users_matched.sql", "original_file_path": "models/tmc_users/tmc_users_matched.sql", "name": "tmc_users_matched", "resource_type": "model", "alias": "tmc_users_matched", "checksum": {"name": "sha256", "checksum": "f952439dbd5c5c7716586949b2cfea159f8d4c380110fa75302823859539629b"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [{"sql": "{{ grant_select_to(this, ['dsanalyst', 'looker']) }}", "transaction": true, "index": null}, {"sql": "ALTER TABLE tmc_in.tmc_users_matched OWNER TO tmc", "transaction": true, "index": null}], "pre-hook": [{"sql": "ALTER TABLE tmc_in.tmc_users_matched OWNER TO quasar_prod_admin", "transaction": true, "index": null}], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": ["tmc_users"], "full_refresh": null}, "tags": ["tmc_users"], "refs": [], "sources": [["tmc", "tmc_users_matched"]], "depends_on": {"macros": ["macro.ds_dbt.grant_select_to"], "nodes": ["source.ds_dbt.tmc.tmc_users_matched"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "../../docs/compiled/ds_dbt/models/tmc_users/tmc_users_matched.sql", "deferred": false, "compiled_sql": "SELECT\n    *\nFROM\n    \"quasar_prod_warehouse\".\"tmc_in\".\"tmc_users_matched\"", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "SELECT\n    *\nFROM\n    \"quasar_prod_warehouse\".\"tmc_in\".\"tmc_users_matched\""}, "error": null, "status": null, "execution_time": 0.011955022811889648, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-02-23T21:28:54.591551Z", "completed_at": "2021-02-23T21:28:54.602429Z"}, {"name": "execute", "started_at": "2021-02-23T21:28:54.602751Z", "completed_at": "2021-02-23T21:28:54.602758Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "\n\n    {{\n        config(\n          target_database=env_var(\"PG_DATABASE\"),\n          target_schema=env_var(\"NORTHSTAR_FT_SCHEMA\"),\n          unique_key='_id',\n          strategy='timestamp',\n          updated_at='updated_at',\n        )\n    }}\n    \n    select * from {{ source('northstar', 'users') }}\n    \n", "compiled": true, "database": "quasar_prod_warehouse", "schema": "northstar_ft_userapi", "fqn": ["ds_dbt", "northstar", "northstar_users_snapshot"], "unique_id": "snapshot.ds_dbt.northstar_users_snapshot", "package_name": "ds_dbt", "root_path": "/home/runner/work/quasar/quasar/quasar/dbt", "path": "northstar.sql", "original_file_path": "snapshots/northstar.sql", "name": "northstar_users_snapshot", "resource_type": "snapshot", "alias": "northstar_users_snapshot", "checksum": {"name": "sha256", "checksum": "7f643e8b59ea1e9b8c225eb8c5d128a2bf55458c9317801451db0e292670b14b"}, "config": {"enabled": true, "materialized": "snapshot", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "unique_key": "_id", "target_schema": "northstar_ft_userapi", "target_database": "quasar_prod_warehouse", "strategy": "timestamp", "updated_at": "updated_at"}, "tags": [], "refs": [], "sources": [["northstar", "users"]], "depends_on": {"macros": [], "nodes": ["source.ds_dbt.northstar.users"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "compiled_sql": "\n\n    \n    \n    select * from \"quasar_prod_warehouse\".\"northstar_ft_userapi\".\"users\"\n    ", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n    \n    \n    select * from \"quasar_prod_warehouse\".\"northstar_ft_userapi\".\"users\"\n    "}, "error": null, "status": null, "execution_time": 0.018683433532714844, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-02-23T21:28:54.604097Z", "completed_at": "2021-02-23T21:28:54.621769Z"}, {"name": "execute", "started_at": "2021-02-23T21:28:54.622058Z", "completed_at": "2021-02-23T21:28:54.622065Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "\n\n    {{\n        config(\n          target_database=env_var(\"PG_DATABASE\"),\n          target_schema=env_var(\"FT_ROGUE\"),\n          unique_key='id',\n          strategy='timestamp',\n          updated_at='updated_at',\n        )\n    }}\n    \n    select * from {{ source('rogue', 'posts') }}\n    \n", "compiled": true, "database": "quasar_prod_warehouse", "schema": "ft_dosomething_rogue", "fqn": ["ds_dbt", "rogue_posts", "rogue_posts_snapshot"], "unique_id": "snapshot.ds_dbt.rogue_posts_snapshot", "package_name": "ds_dbt", "root_path": "/home/runner/work/quasar/quasar/quasar/dbt", "path": "rogue_posts.sql", "original_file_path": "snapshots/rogue_posts.sql", "name": "rogue_posts_snapshot", "resource_type": "snapshot", "alias": "rogue_posts_snapshot", "checksum": {"name": "sha256", "checksum": "2de56cc9f19c0733faf1338948e16127968ae689f1ffe8e806805f01f9348528"}, "config": {"enabled": true, "materialized": "snapshot", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "unique_key": "id", "target_schema": "ft_dosomething_rogue", "target_database": "quasar_prod_warehouse", "strategy": "timestamp", "updated_at": "updated_at"}, "tags": [], "refs": [], "sources": [["rogue", "posts"]], "depends_on": {"macros": [], "nodes": ["source.ds_dbt.rogue.posts"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "compiled_sql": "\n\n    \n    \n    select * from \"quasar_prod_warehouse\".\"ft_dosomething_rogue\".\"posts\"\n    ", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n    \n    \n    select * from \"quasar_prod_warehouse\".\"ft_dosomething_rogue\".\"posts\"\n    "}, "error": null, "status": null, "execution_time": 0.01316380500793457, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-02-23T21:28:54.623345Z", "completed_at": "2021-02-23T21:28:54.635394Z"}, {"name": "execute", "started_at": "2021-02-23T21:28:54.635735Z", "completed_at": "2021-02-23T21:28:54.635743Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "-- Gets latest user snapshots\nWITH latest_updates AS (\n    SELECT\n        DISTINCT ON(nus.\"_id\") nus.\"_id\",\n        nus.email,\n        nus.dbt_valid_from,\n        nus.dbt_valid_to,\n        nus.dbt_scd_id\n    FROM\n        {{ source('northstar', 'northstar_users_snapshot') }} nus\n    ORDER BY\n        nus.\"_id\",\n        nus.dbt_valid_from DESC\n),\n-- filters snapshots that display signs of invalid state:\n-- 1. latest snapshot available having a value in \"dbt_valid_to\"\n-- 2. latest user state \"updated_at\" not matching latest available user snapshot \"dbt_valid_from\"\naffected_users AS (\n    SELECT\n        u._id,\n        lu.dbt_scd_id,\n        u.first_name || ' ' || u.last_name AS full_name,\n        u.email,\n        u.source,\n        u.created_at,\n        u.updated_at,\n        u.\"_fivetran_synced\",\n        lu.dbt_valid_from,\n        lu.dbt_valid_to\n    FROM\n        {{ source('northstar', 'users') }} u\n        LEFT JOIN latest_updates lu ON lu._id = u._id\n    WHERE\n        u.deleted_at IS NULL\n        AND lu.dbt_valid_to IS NOT NULL\n        AND u.updated_at > lu.dbt_valid_from\n)\nSELECT\n    _id\nFROM\n    affected_users", "compiled": true, "database": "quasar_prod_warehouse", "schema": "public", "fqn": ["ds_dbt", "data_test", "assert_no_invalid_users_snapshot_state_found"], "unique_id": "test.ds_dbt.assert_no_invalid_users_snapshot_state_found", "package_name": "ds_dbt", "root_path": "/home/runner/work/quasar/quasar/quasar/dbt", "path": "data_test/assert_no_invalid_users_snapshot_state_found.sql", "original_file_path": "data_tests/assert_no_invalid_users_snapshot_state_found.sql", "name": "assert_no_invalid_users_snapshot_state_found", "resource_type": "test", "alias": "assert_no_invalid_users_snapshot_state_found", "checksum": {"name": "sha256", "checksum": "84bf2936dc877381a46ade74817f41be7de086c95a23e962ecc62038a37f55ba"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["data"], "refs": [], "sources": [["northstar", "northstar_users_snapshot"], ["northstar", "users"]], "depends_on": {"macros": [], "nodes": ["source.ds_dbt.northstar.northstar_users_snapshot", "source.ds_dbt.northstar.users"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "../../docs/compiled/ds_dbt/data_tests/assert_no_invalid_users_snapshot_state_found.sql", "deferred": false, "compiled_sql": "\nselect count(*) from dbt__CTE__INTERNAL_test", "extra_ctes_injected": true, "extra_ctes": [{"id": "dbt__CTE__INTERNAL_test", "sql": " dbt__CTE__INTERNAL_test as (\n-- Gets latest user snapshots\nWITH latest_updates AS (\n    SELECT\n        DISTINCT ON(nus.\"_id\") nus.\"_id\",\n        nus.email,\n        nus.dbt_valid_from,\n        nus.dbt_valid_to,\n        nus.dbt_scd_id\n    FROM\n        \"quasar_prod_warehouse\".\"northstar_ft_userapi\".\"northstar_users_snapshot\" nus\n    ORDER BY\n        nus.\"_id\",\n        nus.dbt_valid_from DESC\n),\n-- filters snapshots that display signs of invalid state:\n-- 1. latest snapshot available having a value in \"dbt_valid_to\"\n-- 2. latest user state \"updated_at\" not matching latest available user snapshot \"dbt_valid_from\"\naffected_users AS (\n    SELECT\n        u._id,\n        lu.dbt_scd_id,\n        u.first_name || ' ' || u.last_name AS full_name,\n        u.email,\n        u.source,\n        u.created_at,\n        u.updated_at,\n        u.\"_fivetran_synced\",\n        lu.dbt_valid_from,\n        lu.dbt_valid_to\n    FROM\n        \"quasar_prod_warehouse\".\"northstar_ft_userapi\".\"users\" u\n        LEFT JOIN latest_updates lu ON lu._id = u._id\n    WHERE\n        u.deleted_at IS NULL\n        AND lu.dbt_valid_to IS NOT NULL\n        AND u.updated_at > lu.dbt_valid_from\n)\nSELECT\n    _id\nFROM\n    affected_users\n)"}], "injected_sql": "\nwith dbt__CTE__INTERNAL_test as (\n-- Gets latest user snapshots\nWITH latest_updates AS (\n    SELECT\n        DISTINCT ON(nus.\"_id\") nus.\"_id\",\n        nus.email,\n        nus.dbt_valid_from,\n        nus.dbt_valid_to,\n        nus.dbt_scd_id\n    FROM\n        \"quasar_prod_warehouse\".\"northstar_ft_userapi\".\"northstar_users_snapshot\" nus\n    ORDER BY\n        nus.\"_id\",\n        nus.dbt_valid_from DESC\n),\n-- filters snapshots that display signs of invalid state:\n-- 1. latest snapshot available having a value in \"dbt_valid_to\"\n-- 2. latest user state \"updated_at\" not matching latest available user snapshot \"dbt_valid_from\"\naffected_users AS (\n    SELECT\n        u._id,\n        lu.dbt_scd_id,\n        u.first_name || ' ' || u.last_name AS full_name,\n        u.email,\n        u.source,\n        u.created_at,\n        u.updated_at,\n        u.\"_fivetran_synced\",\n        lu.dbt_valid_from,\n        lu.dbt_valid_to\n    FROM\n        \"quasar_prod_warehouse\".\"northstar_ft_userapi\".\"users\" u\n        LEFT JOIN latest_updates lu ON lu._id = u._id\n    WHERE\n        u.deleted_at IS NULL\n        AND lu.dbt_valid_to IS NOT NULL\n        AND u.updated_at > lu.dbt_valid_from\n)\nSELECT\n    _id\nFROM\n    affected_users\n)select count(*) from dbt__CTE__INTERNAL_test"}, "error": null, "status": null, "execution_time": 0.02237987518310547, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-02-23T21:28:54.637022Z", "completed_at": "2021-02-23T21:28:54.658181Z"}, {"name": "execute", "started_at": "2021-02-23T21:28:54.658480Z", "completed_at": "2021-02-23T21:28:54.658487Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "SELECT\n\tcio.customer_id,\n\tmax(CASE WHEN \n\t\t\tcio.event_type = 'customer_unsubscribed' \n\t\t\tTHEN 'customer_unsubscribed' \n\t\t\tELSE 'customer_subscribed' END) AS event_type,\n\tmax(cio.\"timestamp\") AS \"timestamp\"\nFROM {{ ref('cio_customer_event') }} cio\nINNER JOIN\n\t(SELECT\n\t\tctemp.customer_id,\n\t\tmax(ctemp.\"timestamp\") AS max_update\n\tFROM {{ ref('cio_customer_event') }} ctemp\n\tGROUP BY ctemp.customer_id) cio_max \n\t\tON cio_max.customer_id = cio.customer_id\n\t\tAND cio_max.max_update = cio.\"timestamp\"\nGROUP BY cio.customer_id", "compiled": true, "database": "quasar_prod_warehouse", "schema": "public", "fqn": ["ds_dbt", "users_table", "cio_latest_status"], "unique_id": "model.ds_dbt.cio_latest_status", "package_name": "ds_dbt", "root_path": "/home/runner/work/quasar/quasar/quasar/dbt", "path": "users_table/cio_latest_status.sql", "original_file_path": "models/users_table/cio_latest_status.sql", "name": "cio_latest_status", "resource_type": "model", "alias": "cio_latest_status", "checksum": {"name": "sha256", "checksum": "c7d5ade8e3d1700cb46b3709d23f65391e507c3bc2bf1f0b6c60e8e6821c2ea0"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [{"sql": "CREATE INDEX {{ get_index_name(this, 'customer_id') }} (customer_id)", "transaction": true, "index": null}, {"sql": "{{ grant_select_to(this, ['dsanalyst', 'looker']) }}", "transaction": true, "index": null}], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": "cio_latest_status", "schema": null, "database": null, "tags": ["users_table"], "full_refresh": null}, "tags": ["users_table"], "refs": [["cio_customer_event"], ["cio_customer_event"]], "sources": [], "depends_on": {"macros": ["macro.ds_dbt.get_index_name", "macro.ds_dbt.grant_select_to"], "nodes": ["model.ds_dbt.cio_customer_event", "model.ds_dbt.cio_customer_event"]}, "description": "Table containing users' latest status from CIO API.", "columns": {"customer_id": {"name": "customer_id", "description": "This customer_id we set when we send data to Customer.io, and is the Northstar ID of the user. 'The Northstar ID of the user who generated the event.'", "meta": {}, "data_type": null, "quote": null, "tags": []}, "event_type": {"name": "event_type", "description": "Type of event (pv = 'Page View', se = 'Structured Event')", "meta": {}, "data_type": null, "quote": null, "tags": []}, "timestamp": {"name": "timestamp", "description": "When the event occurred in UTC (eg. 2018-01-01 12:00:00)", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/users_table/schema.yml", "build_path": "../../docs/compiled/ds_dbt/models/users_table/cio_latest_status.sql", "deferred": false, "compiled_sql": "SELECT\n\tcio.customer_id,\n\tmax(CASE WHEN \n\t\t\tcio.event_type = 'customer_unsubscribed' \n\t\t\tTHEN 'customer_unsubscribed' \n\t\t\tELSE 'customer_subscribed' END) AS event_type,\n\tmax(cio.\"timestamp\") AS \"timestamp\"\nFROM \"quasar_prod_warehouse\".\"public\".\"cio_customer_event\" cio\nINNER JOIN\n\t(SELECT\n\t\tctemp.customer_id,\n\t\tmax(ctemp.\"timestamp\") AS max_update\n\tFROM \"quasar_prod_warehouse\".\"public\".\"cio_customer_event\" ctemp\n\tGROUP BY ctemp.customer_id) cio_max \n\t\tON cio_max.customer_id = cio.customer_id\n\t\tAND cio_max.max_update = cio.\"timestamp\"\nGROUP BY cio.customer_id", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "SELECT\n\tcio.customer_id,\n\tmax(CASE WHEN \n\t\t\tcio.event_type = 'customer_unsubscribed' \n\t\t\tTHEN 'customer_unsubscribed' \n\t\t\tELSE 'customer_subscribed' END) AS event_type,\n\tmax(cio.\"timestamp\") AS \"timestamp\"\nFROM \"quasar_prod_warehouse\".\"public\".\"cio_customer_event\" cio\nINNER JOIN\n\t(SELECT\n\t\tctemp.customer_id,\n\t\tmax(ctemp.\"timestamp\") AS max_update\n\tFROM \"quasar_prod_warehouse\".\"public\".\"cio_customer_event\" ctemp\n\tGROUP BY ctemp.customer_id) cio_max \n\t\tON cio_max.customer_id = cio.customer_id\n\t\tAND cio_max.max_update = cio.\"timestamp\"\nGROUP BY cio.customer_id"}, "error": null, "status": null, "execution_time": 0.014948368072509766, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-02-23T21:28:54.659921Z", "completed_at": "2021-02-23T21:28:54.673752Z"}, {"name": "execute", "started_at": "2021-02-23T21:28:54.674069Z", "completed_at": "2021-02-23T21:28:54.674076Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "SELECT DISTINCT ON (northstar_id, updated_at) *\nFROM {{ ref('northstar_users_raw') }}", "compiled": true, "database": "quasar_prod_warehouse", "schema": "public", "fqn": ["ds_dbt", "users_table", "northstar_users_deduped"], "unique_id": "model.ds_dbt.northstar_users_deduped", "package_name": "ds_dbt", "root_path": "/home/runner/work/quasar/quasar/quasar/dbt", "path": "users_table/northstar_users_deduped.sql", "original_file_path": "models/users_table/northstar_users_deduped.sql", "name": "northstar_users_deduped", "resource_type": "model", "alias": "northstar_users_deduped", "checksum": {"name": "sha256", "checksum": "83dea7b09d492eea0594d031c7f140ed5d06b85c069961aa4e56140313350395"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [{"sql": "CREATE INDEX {{ get_index_name(this, 'northstar_id_updated_at') }} (northstar_id, updated_at)", "transaction": true, "index": null}, {"sql": "{{ grant_select_to(this, ['dsanalyst', 'looker', 'public']) }}", "transaction": true, "index": null}], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": "northstar_users_deduped", "schema": null, "database": null, "tags": ["users_table"], "full_refresh": null}, "tags": ["users_table"], "refs": [["northstar_users_raw"]], "sources": [], "depends_on": {"macros": ["macro.ds_dbt.get_index_name", "macro.ds_dbt.grant_select_to"], "nodes": ["model.ds_dbt.northstar_users_raw"]}, "description": "A table containing deduped aggregated user data.", "columns": {"northstar_id": {"name": "northstar_id", "description": "The Northstar ID of the user who generated the event.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "country": {"name": "country", "description": "User's country", "meta": {}, "data_type": null, "quote": null, "tags": []}, "club_id": {"name": "club_id", "description": "Club id", "meta": {}, "data_type": null, "quote": null, "tags": []}, "birthdate": {"name": "birthdate", "description": "User's birthdate", "meta": {}, "data_type": null, "quote": null, "tags": []}, "drupal_id": {"name": "drupal_id", "description": "Old Drupal user ID", "meta": {}, "data_type": null, "quote": null, "tags": []}, "email_subscription_status": {"name": "email_subscription_status", "description": "Email subscription status of the user", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "When the item was created in UTC (eg. 2018-01-01 12:00:00)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "addr_zip": {"name": "addr_zip", "description": "Postal code where the action takes place", "meta": {}, "data_type": null, "quote": null, "tags": []}, "language": {"name": "language", "description": "User's language", "meta": {}, "data_type": null, "quote": null, "tags": []}, "source": {"name": "source", "description": "Source of the URL (e.g. SMS, web), origin of the post (e.g. phoenix-web, phoenix-ashes, sms), or source where user was acquired. (e.g. sms, phoenix-next)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "When the item was updated in UTC (eg. 2018-01-01 12:00:00)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaigns": {"name": "campaigns", "description": "Campaigns a user is signed up for.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "audit": {"name": "audit", "description": "A very useful field with data containing information about changes to a user, e.g. timestamps when the user subscribed and unsubscribed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "first_name": {"name": "first_name", "description": "User's first name", "meta": {}, "data_type": null, "quote": null, "tags": []}, "email": {"name": "email", "description": "Email address of the user.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_name": {"name": "last_name", "description": "User's last name", "meta": {}, "data_type": null, "quote": null, "tags": []}, "addr_state": {"name": "addr_state", "description": "User's state", "meta": {}, "data_type": null, "quote": null, "tags": []}, "addr_street_2": {"name": "addr_street_2", "description": "Second line of user's street address", "meta": {}, "data_type": null, "quote": null, "tags": []}, "addr_street_1": {"name": "addr_street_1", "description": "First line of user's street address", "meta": {}, "data_type": null, "quote": null, "tags": []}, "addr_city": {"name": "addr_city", "description": "User's city", "meta": {}, "data_type": null, "quote": null, "tags": []}, "role": {"name": "role", "description": "User's role, e.g. user, staff", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sms_status": {"name": "sms_status", "description": "Current SMS status. (e.g. undeliverable, unknown)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_authenticated_at": {"name": "last_authenticated_at", "description": "Date time in UTC when user last logged in to Northstar", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_accessed": {"name": "last_accessed", "description": "Date time in UTC when user last access the website", "meta": {}, "data_type": null, "quote": null, "tags": []}, "mobile": {"name": "mobile", "description": "Users's mobile phone number", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cio_backfilled": {"name": "cio_backfilled", "description": "Whether this user's data was backfilled from CIO", "meta": {}, "data_type": null, "quote": null, "tags": []}, "addr_source": {"name": "addr_source", "description": "Where the user submitted their address, e.g. sms, GDPR", "meta": {}, "data_type": null, "quote": null, "tags": []}, "source_detail": {"name": "source_detail", "description": "Details of the origin of the user. (e.g. tell_a_friend, other, opt_in_path/197981)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_messaged_at": {"name": "last_messaged_at", "description": "Date time in UTC when user was last sent a message via SMS or email", "meta": {}, "data_type": null, "quote": null, "tags": []}, "email_subscription_topics": {"name": "email_subscription_topics", "description": "Email subscription topics correspond to categories in CIO in which the user is interested. e.g. lifestyle, community, scholarship", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sms_paused": {"name": "sms_paused", "description": "Whether we've paused sending sms messages to the user.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "voting_plan_status": {"name": "voting_plan_status", "description": "The indication of the user's plan to vote, e.g. voting, not_voting, cant_vote", "meta": {}, "data_type": null, "quote": null, "tags": []}, "voting_plan_time_of_day": {"name": "voting_plan_time_of_day", "description": "The time of day when the user plans to vote, e.g morning, afternoon, evening", "meta": {}, "data_type": null, "quote": null, "tags": []}, "voting_plan_method_of_transport": {"name": "voting_plan_method_of_transport", "description": "How the user plans to get to their polling place. e.g. walk, drive", "meta": {}, "data_type": null, "quote": null, "tags": []}, "voting_plan_attending_with": {"name": "voting_plan_attending_with", "description": "With Whom the user plans to go voting, e.g. family, friends, alone", "meta": {}, "data_type": null, "quote": null, "tags": []}, "voter_registration_status": {"name": "voter_registration_status", "description": "User's registration status. (e.g. registration_complete, confirmed, uncertain)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "facebook_id": {"name": "facebook_id", "description": "User's facebook id", "meta": {}, "data_type": null, "quote": null, "tags": []}, "deleted_at": {"name": "deleted_at", "description": "Date time in UTC when a user deleted their post.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "feature_flags": {"name": "feature_flags", "description": "JSON containing info on features like badges and refer-a-friend.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dbt_scd_id": {"name": "dbt_scd_id", "description": "DBT snapshot table data. A unique key generated for each snapshotted record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dbt_updated_at": {"name": "dbt_updated_at", "description": "DBT snapshot table data. The updated_at timestamp of the source record when this snapshot row was inserted.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dbt_valid_from": {"name": "dbt_valid_from", "description": "DBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this snapshot row was first inserted", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dbt_valid_to": {"name": "dbt_valid_to", "description": "DBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this row row became invalidated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "google_id": {"name": "google_id", "description": "User's Google ID obtained from login.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "causes": {"name": "causes", "description": "Causes in which a user is interested. e.g. animal welfare, education, mental_health", "meta": {}, "data_type": null, "quote": null, "tags": []}, "school_id": {"name": "school_id", "description": "Unique identifier for the user's school. This info comes from the school finder.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/users_table/schema.yml", "build_path": "../../docs/compiled/ds_dbt/models/users_table/northstar_users_deduped.sql", "deferred": false, "compiled_sql": "SELECT DISTINCT ON (northstar_id, updated_at) *\nFROM \"quasar_prod_warehouse\".\"public\".\"northstar_users_raw\"", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "SELECT DISTINCT ON (northstar_id, updated_at) *\nFROM \"quasar_prod_warehouse\".\"public\".\"northstar_users_raw\""}, "error": null, "status": null, "execution_time": 0.04361581802368164, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-02-23T21:28:54.675520Z", "completed_at": "2021-02-23T21:28:54.717713Z"}, {"name": "execute", "started_at": "2021-02-23T21:28:54.718037Z", "completed_at": "2021-02-23T21:28:54.718047Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "SELECT\n\ta.name AS \"action\",\n\tpd.action_id,\n\tpd.campaign_id,\n\tpd.club_id,\n\tCASE\n\t\tWHEN pd.\"type\" = 'phone-call' AND pd.details <> ''\n\t\tTHEN (pd.details::json ->> 'call_timestamp')::timestamptz\n\t\tELSE COALESCE(rtv.created_at, tv.created_at, pd.created_at)\n\tEND AS created_at,\n\tpd.group_id,\n\tpd.id AS id,\n\tCASE WHEN pd.status IN ('accepted', 'pending')\n\t\tAND a.\"name\" NOT ILIKE '%vote%'\n\t\tTHEN 1\n\t\tWHEN pd.status IN ('accepted', 'confirmed', 'register-OVR', 'register-form')\n\t\tAND a.\"name\" ILIKE '%vote%'\n\t\tTHEN 1\n\t\tELSE NULL\n\tEND AS is_accepted,\n\ta.anonymous AS is_anonymous,\n\ta.civic_action AS is_civic_action,\n\ta.online AS is_online,\n\ta.quiz AS is_quiz,\n\ta.reportback AS is_reportback,\n\ta.scholarship_entry AS is_scholarship_entry,\n\ta.time_commitment AS time_commitment,\n\ta.volunteer_credit AS is_volunteer_credit,\n\tpd.location,\n\tpd.northstar_id AS northstar_id,\n\ta.noun,\n\tCASE\n\t    WHEN pd.details <> ''\n\t\tTHEN (pd.details::json ->> 'number_of_participants')::INT\n\t    ELSE NULL\n\tEND AS num_participants,\n\tpd.postal_code,\n\tCASE\n\t\tWHEN pd.id IS NULL\n\t\tTHEN NULL\n\t\tELSE CONCAT(pd.\"type\", ' - ', a.\"name\")\n\tEND AS post_class,\n\tpd.quantity AS quantity,\n\tpd.referrer_user_id,\n\tCASE\n\t\tWHEN pd.id IS NULL THEN NULL\n\t\tWHEN a.\"name\" = 'voter-reg OTG'\n\t\tTHEN pd.quantity\n\t\tELSE 1\n\tEND AS reportback_volume,\n\tpd.school_id,\n\tCASE\n\t\tWHEN pd.\"source\" IS NULL THEN NULL\n\t\tWHEN pd.\"source\" ilike '%sms%' THEN 'sms'\n\t\tELSE 'web'\n\tEND AS source_bucket,\n\tCASE\n\t\tWHEN s.\"source\" = 'importer-client'\n\t\tAND pd.\"type\" = 'share-social'\n\t\tAND pd.created_at < s.created_at\n\t\tTHEN -1\n\t\tELSE pd.signup_id\n\tEND AS signup_id,\n\tpd.\"source\" AS \"source\",\n\tpd.status AS \"status\",\n\tpd.text,\n\tpd.\"type\" AS \"type\",\n\tpd.hours_spent,\n\tpd.url AS url,\n\ta.verb,\n\tCASE\n\t\tWHEN rtv.tracking_source='ads'\n\t\tTHEN 'ads'\n\t\tELSE split_part(substring(rtv.tracking_source from 'source\\:(.+)'), ',', 1)\n\tEND AS vr_source,\n\tsplit_part(substring(rtv.tracking_source from 'source_details\\:(.+)'), ',', 1) AS vr_source_details\nFROM {{ source('rogue', 'posts') }} pd\nINNER JOIN {{ ref('signups') }} s\n\tON pd.signup_id = s.id\nLEFT JOIN {{ ref('turbovote') }} tv\n\tON tv.post_id::bigint = pd.id::bigint\nLEFT JOIN\n\t(SELECT\n\t\tDISTINCT r.*,\n\t\tCASE\n\t\t\tWHEN r.started_registration < '2017-01-01'\n\t\t\tTHEN r.started_registration + interval '4 year'\n\t\t\tELSE r.started_registration END AS created_at\n\t\tFROM {{ ref('rock_the_vote') }} r\n\t) rtv\n\tON rtv.post_id::bigint = pd.id::bigint\nLEFT JOIN {{ source('rogue', 'actions') }} a\n\tON pd.action_id = a.id\nWHERE pd.deleted_at IS NULL\nAND pd.\"text\" IS DISTINCT FROM 'test runscope upload'\nAND a.\"name\" IS NOT NULL", "compiled": true, "database": "quasar_prod_warehouse", "schema": "public", "fqn": ["ds_dbt", "campaign_activity", "posts"], "unique_id": "model.ds_dbt.posts", "package_name": "ds_dbt", "root_path": "/home/runner/work/quasar/quasar/quasar/dbt", "path": "campaign_activity/posts.sql", "original_file_path": "models/campaign_activity/posts.sql", "name": "posts", "resource_type": "model", "alias": "posts", "checksum": {"name": "sha256", "checksum": "d7fd16d6c00825d748e7abf9a3c27d1bbbdaefafd6330543e0a2b50c285063e5"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [{"sql": "CREATE UNIQUE INDEX {{ get_index_name(this, 'unique_created_at_campaign_id_id') }} (created_at, campaign_id, id)", "transaction": true, "index": null}, {"sql": "CREATE INDEX {{ get_index_name(this, 'is_reportback_is_accepted_signup_id_id_post_class') }} (is_reportback, is_accepted, signup_id, id, post_class)", "transaction": true, "index": null}, {"sql": "{{ grant_select_to(this, ['dsanalyst', 'looker']) }}", "transaction": true, "index": null}], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": "posts", "schema": null, "database": null, "tags": ["campaign_activity"], "full_refresh": null}, "tags": ["campaign_activity"], "refs": [["signups"], ["turbovote"], ["rock_the_vote"]], "sources": [["rogue", "posts"], ["rogue", "actions"]], "depends_on": {"macros": ["macro.ds_dbt.get_index_name", "macro.ds_dbt.grant_select_to"], "nodes": ["source.ds_dbt.rogue.posts", "source.ds_dbt.rogue.actions", "model.ds_dbt.signups", "model.ds_dbt.turbovote", "model.ds_dbt.rock_the_vote"]}, "description": "A table containing information about posts", "columns": {"action": {"name": "action", "description": "Post action (e.g. DefendDreamers_Nov9_CongressCalls, GunViolence2018_Feb15_ParklandResponse)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "action_id": {"name": "action_id", "description": "Internal identifier of the campaign action", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "This is a unique identifier for the campaign", "meta": {}, "data_type": null, "quote": null, "tags": []}, "civic_action": {"name": "civic_action", "description": "Whether the post is a Civic Action. The application allows for multiple types of posts.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "club_id": {"name": "club_id", "description": "Club id", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "When the item was created in UTC (eg. 2018-01-01 12:00:00)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "hours_spent": {"name": "hours_spent", "description": "The number of hours spent for a specific action. Entered by member", "meta": {}, "data_type": null, "quote": null, "tags": []}, "id": {"name": "id", "description": "Unique identifier for the post", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_accepted": {"name": "is_accepted", "description": "Whether the post has been accepted to be displayed to the public on the website", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_reportback": {"name": "is_reportback", "description": "Whether the post is a reportback. The application allows for multiple types of posts.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "location": {"name": "location", "description": "Location where the action takes place (e.g. US-NY)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "northstar_id": {"name": "northstar_id", "description": "The Northstar ID of the user who generated the event.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "post_class": {"name": "post_class", "description": "Class of the signup (e.g. \"photo - default\", \"phone-call - DefendDreamers_Jan16_BothBodies\")", "meta": {}, "data_type": null, "quote": null, "tags": []}, "postal_code": {"name": "postal_code", "description": "Postal code where the action takes place", "meta": {}, "data_type": null, "quote": null, "tags": []}, "quantity": {"name": "quantity", "description": "Numerical quantity of items specified in the call to action (e.g. 10, 200)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "reportback_volume": {"name": "reportback_volume", "description": "This field returns 1 if non voter-reg action, since campaigns team only counts those a 1 reportback. If voter-reg action, we want to count quantity of post as number of registered voters.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "school_id": {"name": "school_id", "description": "Unique identifier for the user's school. This info comes from the school finder.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "scholarship_entry": {"name": "scholarship_entry", "description": "Whether the post is a Scholarship Entry. The application allows for multiple types of posts.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "signup_id": {"name": "signup_id", "description": "Unique identifier for the signup", "meta": {}, "data_type": null, "quote": null, "tags": []}, "source": {"name": "source", "description": "Source of the URL (e.g. SMS, web), origin of the post (e.g. phoenix-web, phoenix-ashes, sms), or source where user was acquired. (e.g. sms, phoenix-next)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "source_bucket": {"name": "source_bucket", "description": "Grouping bucket for the origin of the post (e.g. web, sms)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "Post status (e.g. accepted, rejected)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "text": {"name": "text", "description": "Text of the post (e.g. \"Zoo animals and a super hero trying to help too!\")", "meta": {}, "data_type": null, "quote": null, "tags": []}, "type": {"name": "type", "description": "Type of post (e.g. photo)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "url": {"name": "url", "description": "URL of campaign (eg. https://dosome.click/nyn5m7)", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/campaign_activity/schema.yml", "build_path": "../../docs/compiled/ds_dbt/models/campaign_activity/posts.sql", "deferred": false, "compiled_sql": "SELECT\n\ta.name AS \"action\",\n\tpd.action_id,\n\tpd.campaign_id,\n\tpd.club_id,\n\tCASE\n\t\tWHEN pd.\"type\" = 'phone-call' AND pd.details <> ''\n\t\tTHEN (pd.details::json ->> 'call_timestamp')::timestamptz\n\t\tELSE COALESCE(rtv.created_at, tv.created_at, pd.created_at)\n\tEND AS created_at,\n\tpd.group_id,\n\tpd.id AS id,\n\tCASE WHEN pd.status IN ('accepted', 'pending')\n\t\tAND a.\"name\" NOT ILIKE '%vote%'\n\t\tTHEN 1\n\t\tWHEN pd.status IN ('accepted', 'confirmed', 'register-OVR', 'register-form')\n\t\tAND a.\"name\" ILIKE '%vote%'\n\t\tTHEN 1\n\t\tELSE NULL\n\tEND AS is_accepted,\n\ta.anonymous AS is_anonymous,\n\ta.civic_action AS is_civic_action,\n\ta.online AS is_online,\n\ta.quiz AS is_quiz,\n\ta.reportback AS is_reportback,\n\ta.scholarship_entry AS is_scholarship_entry,\n\ta.time_commitment AS time_commitment,\n\ta.volunteer_credit AS is_volunteer_credit,\n\tpd.location,\n\tpd.northstar_id AS northstar_id,\n\ta.noun,\n\tCASE\n\t    WHEN pd.details <> ''\n\t\tTHEN (pd.details::json ->> 'number_of_participants')::INT\n\t    ELSE NULL\n\tEND AS num_participants,\n\tpd.postal_code,\n\tCASE\n\t\tWHEN pd.id IS NULL\n\t\tTHEN NULL\n\t\tELSE CONCAT(pd.\"type\", ' - ', a.\"name\")\n\tEND AS post_class,\n\tpd.quantity AS quantity,\n\tpd.referrer_user_id,\n\tCASE\n\t\tWHEN pd.id IS NULL THEN NULL\n\t\tWHEN a.\"name\" = 'voter-reg OTG'\n\t\tTHEN pd.quantity\n\t\tELSE 1\n\tEND AS reportback_volume,\n\tpd.school_id,\n\tCASE\n\t\tWHEN pd.\"source\" IS NULL THEN NULL\n\t\tWHEN pd.\"source\" ilike '%sms%' THEN 'sms'\n\t\tELSE 'web'\n\tEND AS source_bucket,\n\tCASE\n\t\tWHEN s.\"source\" = 'importer-client'\n\t\tAND pd.\"type\" = 'share-social'\n\t\tAND pd.created_at < s.created_at\n\t\tTHEN -1\n\t\tELSE pd.signup_id\n\tEND AS signup_id,\n\tpd.\"source\" AS \"source\",\n\tpd.status AS \"status\",\n\tpd.text,\n\tpd.\"type\" AS \"type\",\n\tpd.hours_spent,\n\tpd.url AS url,\n\ta.verb,\n\tCASE\n\t\tWHEN rtv.tracking_source='ads'\n\t\tTHEN 'ads'\n\t\tELSE split_part(substring(rtv.tracking_source from 'source\\:(.+)'), ',', 1)\n\tEND AS vr_source,\n\tsplit_part(substring(rtv.tracking_source from 'source_details\\:(.+)'), ',', 1) AS vr_source_details\nFROM \"quasar_prod_warehouse\".\"ft_dosomething_rogue\".\"posts\" pd\nINNER JOIN \"quasar_prod_warehouse\".\"public\".\"signups\" s\n\tON pd.signup_id = s.id\nLEFT JOIN \"quasar_prod_warehouse\".\"public\".\"turbovote\" tv\n\tON tv.post_id::bigint = pd.id::bigint\nLEFT JOIN\n\t(SELECT\n\t\tDISTINCT r.*,\n\t\tCASE\n\t\t\tWHEN r.started_registration < '2017-01-01'\n\t\t\tTHEN r.started_registration + interval '4 year'\n\t\t\tELSE r.started_registration END AS created_at\n\t\tFROM \"quasar_prod_warehouse\".\"public\".\"rock_the_vote\" r\n\t) rtv\n\tON rtv.post_id::bigint = pd.id::bigint\nLEFT JOIN \"quasar_prod_warehouse\".\"ft_dosomething_rogue\".\"actions\" a\n\tON pd.action_id = a.id\nWHERE pd.deleted_at IS NULL\nAND pd.\"text\" IS DISTINCT FROM 'test runscope upload'\nAND a.\"name\" IS NOT NULL", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "SELECT\n\ta.name AS \"action\",\n\tpd.action_id,\n\tpd.campaign_id,\n\tpd.club_id,\n\tCASE\n\t\tWHEN pd.\"type\" = 'phone-call' AND pd.details <> ''\n\t\tTHEN (pd.details::json ->> 'call_timestamp')::timestamptz\n\t\tELSE COALESCE(rtv.created_at, tv.created_at, pd.created_at)\n\tEND AS created_at,\n\tpd.group_id,\n\tpd.id AS id,\n\tCASE WHEN pd.status IN ('accepted', 'pending')\n\t\tAND a.\"name\" NOT ILIKE '%vote%'\n\t\tTHEN 1\n\t\tWHEN pd.status IN ('accepted', 'confirmed', 'register-OVR', 'register-form')\n\t\tAND a.\"name\" ILIKE '%vote%'\n\t\tTHEN 1\n\t\tELSE NULL\n\tEND AS is_accepted,\n\ta.anonymous AS is_anonymous,\n\ta.civic_action AS is_civic_action,\n\ta.online AS is_online,\n\ta.quiz AS is_quiz,\n\ta.reportback AS is_reportback,\n\ta.scholarship_entry AS is_scholarship_entry,\n\ta.time_commitment AS time_commitment,\n\ta.volunteer_credit AS is_volunteer_credit,\n\tpd.location,\n\tpd.northstar_id AS northstar_id,\n\ta.noun,\n\tCASE\n\t    WHEN pd.details <> ''\n\t\tTHEN (pd.details::json ->> 'number_of_participants')::INT\n\t    ELSE NULL\n\tEND AS num_participants,\n\tpd.postal_code,\n\tCASE\n\t\tWHEN pd.id IS NULL\n\t\tTHEN NULL\n\t\tELSE CONCAT(pd.\"type\", ' - ', a.\"name\")\n\tEND AS post_class,\n\tpd.quantity AS quantity,\n\tpd.referrer_user_id,\n\tCASE\n\t\tWHEN pd.id IS NULL THEN NULL\n\t\tWHEN a.\"name\" = 'voter-reg OTG'\n\t\tTHEN pd.quantity\n\t\tELSE 1\n\tEND AS reportback_volume,\n\tpd.school_id,\n\tCASE\n\t\tWHEN pd.\"source\" IS NULL THEN NULL\n\t\tWHEN pd.\"source\" ilike '%sms%' THEN 'sms'\n\t\tELSE 'web'\n\tEND AS source_bucket,\n\tCASE\n\t\tWHEN s.\"source\" = 'importer-client'\n\t\tAND pd.\"type\" = 'share-social'\n\t\tAND pd.created_at < s.created_at\n\t\tTHEN -1\n\t\tELSE pd.signup_id\n\tEND AS signup_id,\n\tpd.\"source\" AS \"source\",\n\tpd.status AS \"status\",\n\tpd.text,\n\tpd.\"type\" AS \"type\",\n\tpd.hours_spent,\n\tpd.url AS url,\n\ta.verb,\n\tCASE\n\t\tWHEN rtv.tracking_source='ads'\n\t\tTHEN 'ads'\n\t\tELSE split_part(substring(rtv.tracking_source from 'source\\:(.+)'), ',', 1)\n\tEND AS vr_source,\n\tsplit_part(substring(rtv.tracking_source from 'source_details\\:(.+)'), ',', 1) AS vr_source_details\nFROM \"quasar_prod_warehouse\".\"ft_dosomething_rogue\".\"posts\" pd\nINNER JOIN \"quasar_prod_warehouse\".\"public\".\"signups\" s\n\tON pd.signup_id = s.id\nLEFT JOIN \"quasar_prod_warehouse\".\"public\".\"turbovote\" tv\n\tON tv.post_id::bigint = pd.id::bigint\nLEFT JOIN\n\t(SELECT\n\t\tDISTINCT r.*,\n\t\tCASE\n\t\t\tWHEN r.started_registration < '2017-01-01'\n\t\t\tTHEN r.started_registration + interval '4 year'\n\t\t\tELSE r.started_registration END AS created_at\n\t\tFROM \"quasar_prod_warehouse\".\"public\".\"rock_the_vote\" r\n\t) rtv\n\tON rtv.post_id::bigint = pd.id::bigint\nLEFT JOIN \"quasar_prod_warehouse\".\"ft_dosomething_rogue\".\"actions\" a\n\tON pd.action_id = a.id\nWHERE pd.deleted_at IS NULL\nAND pd.\"text\" IS DISTINCT FROM 'test runscope upload'\nAND a.\"name\" IS NOT NULL"}, "error": null, "status": null, "execution_time": 0.03556418418884277, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-02-23T21:28:54.719207Z", "completed_at": "2021-02-23T21:28:54.753597Z"}, {"name": "execute", "started_at": "2021-02-23T21:28:54.753945Z", "completed_at": "2021-02-23T21:28:54.753956Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "WITH\n--Campaigns with Online/Offline Post Components\ncampaign_online AS (\n  SELECT\n    campaign_id,\n    -- Uses distinct count to check if\n    -- there is only online or only offline actions (Value would be 1)\n    -- there is a mix of online and offline (Value would be 2)\n    count(DISTINCT online) AS online_count,\n    -- If the campaign has only 1 action, min_online will hold \"Online\" or \"Offline\" accordingly.\n    -- If the campaign has any number of both types of actions min_online will always hold \"Offline\"\n    -- NOTE: Ignore in that case.\n    min(\n      CASE\n        WHEN online = TRUE THEN 'Online'\n        ELSE 'Offline'\n      END\n    ) AS min_online\n  FROM\n    {{ ref('post_actions') }}\n  GROUP BY\n    1\n),\ncampaign_online_combo AS (\n  SELECT\n    campaign_id,\n    CASE\n      WHEN online_count > 1 THEN 'Both'\n      ELSE min_online\n    END AS online_offline\n  FROM\n    campaign_online\n),\n--Campaigns and Action Types\ncampaign_action AS (\n  SELECT campaign_id, action_type\n  FROM {{ ref('post_actions') }}\n  WHERE action_type IS NOT null AND action_type<>''\n  GROUP BY 1, 2\n),\n--Campaigns and Action Types Combined\ncampaign_action_combo AS (\n    SELECT campaign_id, string_agg(action_type, ' , ' ORDER BY action_type) AS action_types\n    FROM campaign_action\n    GROUP BY 1\n),\n-- Campaigns and Scholarship\ncampaign_scholarship AS (\n  SELECT campaign_id, count(CASE WHEN scholarship_entry=true THEN 1 END) AS scholarship\n  FROM {{ ref('post_actions') }}\n  GROUP BY 1\n),\n-- Campaigns and Scholarship Combined\ncampaign_scholarship_combo AS (\n    SELECT campaign_id, (CASE WHEN scholarship>0 THEN 'Scholarship' ELSE 'Not Scholarship' END) AS scholarship\n    FROM campaign_scholarship\n),\n--Campaigns and Action Types\ncampaign_post_type AS (\n  SELECT campaign_id, post_type\n  FROM {{ ref('post_actions') }}\n  WHERE post_type IS NOT null AND post_type<>''\n  GROUP BY 1, 2\n),\n--Campaigns and Action Types Combined\ncampaign_post_type_combo AS (\n    SELECT campaign_id, string_agg(post_type, ' , ' ORDER BY post_type) AS post_types\n    FROM campaign_post_type\n    GROUP BY 1\n)\nSELECT \n\tc.id AS campaign_id,\n\tc.campaign_run_id,\n\tc.internal_title AS campaign_name,\n\tc.cause AS campaign_cause,\n\tc.start_date AS campaign_run_start_date,\n\tc.end_date AS campaign_run_end_date,\n\tc.created_at AS campaign_created_date,\n\tCOALESCE(i.campaign_node_id, c.id) AS campaign_node_id,\n  c.group_type_id,\n  cm.contentful_id as contentful_id,\n  cm.internal_title as contentful_internal_title,\n  cm.title as contentful_title,\n  cm.display_referral_page as contentful_RAF_flag,\n\ti.campaign_node_id_title,\n\ti.campaign_run_id_title,\n\tCASE WHEN i.campaign_action_type = '' THEN null ELSE i.campaign_action_type END AS campaign_action_type,\n\tCOALESCE(\n\t\tCASE WHEN c.cause = '' THEN null ELSE c.cause END,\n\t\tCASE WHEN i.campaign_cause_type = '' THEN null ELSE i.campaign_cause_type END\n\t) AS campaign_cause_type,\n\ti.campaign_noun,\n\ti.campaign_verb,\n\ti.campaign_cta,\n\tCASE WHEN a.action_types = '' THEN null ELSE a.action_types END AS action_types,\n\to.online_offline,\n\ts.scholarship,\n\tp.post_types\nFROM {{ source('rogue', 'campaigns') }} c\nLEFT JOIN {{ source('campaign_info_historical', 'campaign_info_ashes_snapshot') }} i ON i.campaign_run_id = c.campaign_run_id\nLEFT JOIN campaign_action_combo a on c.id = a.campaign_id\nLEFT JOIN campaign_online_combo o on c.id = o.campaign_id\nLEFT JOIN campaign_scholarship_combo s on c.id = s.campaign_id\nLEFT JOIN campaign_post_type_combo p on c.id = p.campaign_id\nLEFT JOIN {{ ref('contentful_metadata') }} cm on c.id = cm.legacy_campaign_id\nWHERE i.campaign_language = 'en' OR i.campaign_language IS null", "compiled": true, "database": "quasar_prod_warehouse", "schema": "public", "fqn": ["ds_dbt", "campaign_info", "campaign_info"], "unique_id": "model.ds_dbt.campaign_info", "package_name": "ds_dbt", "root_path": "/home/runner/work/quasar/quasar/quasar/dbt", "path": "campaign_info/campaign_info.sql", "original_file_path": "models/campaign_info/campaign_info.sql", "name": "campaign_info", "resource_type": "model", "alias": "campaign_info", "checksum": {"name": "sha256", "checksum": "0a8f2e0096505fce45d827e2ddcea84b29f1a19e2050578fd6061f3a6c96ba86"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [{"sql": "CREATE UNIQUE INDEX {{ get_index_name(this, 'unique_campaign_run_id_campaign_id') }} (campaign_run_id, campaign_id)", "transaction": true, "index": null}, {"sql": "{{ grant_select_to(this, ['dsanalyst', 'looker']) }}", "transaction": true, "index": null}], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": "campaign_info", "schema": null, "database": null, "tags": ["campaign_info"], "full_refresh": null}, "tags": ["campaign_info"], "refs": [["post_actions"], ["post_actions"], ["post_actions"], ["post_actions"], ["contentful_metadata"]], "sources": [["rogue", "campaigns"], ["campaign_info_historical", "campaign_info_ashes_snapshot"]], "depends_on": {"macros": ["macro.ds_dbt.get_index_name", "macro.ds_dbt.grant_select_to"], "nodes": ["source.ds_dbt.rogue.campaigns", "source.ds_dbt.campaign_info_historical.campaign_info_ashes_snapshot", "model.ds_dbt.post_actions", "model.ds_dbt.post_actions", "model.ds_dbt.post_actions", "model.ds_dbt.post_actions", "model.ds_dbt.contentful_metadata"]}, "description": "A table containing information about campaigns", "columns": {"campaign_id": {"name": "campaign_id", "description": "This is a unique identifier for the campaign", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_run_id": {"name": "campaign_run_id", "description": "Unique identifier for the campaign run", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_name": {"name": "campaign_name", "description": "Name of the campaign", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_cause": {"name": "campaign_cause", "description": "Campaign cause (eg. Mental Health, Education)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_run_start_date": {"name": "campaign_run_start_date", "description": "Start date of the campaign run", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_run_end_date": {"name": "campaign_run_end_date", "description": "End date of the campaign run", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_created_date": {"name": "campaign_created_date", "description": "When the campaign was created in UTC (eg. 2018-01-01 12:00:00)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_node_id": {"name": "campaign_node_id", "description": "This is a unique identifier for the campaign", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_node_id_title": {"name": "campaign_node_id_title", "description": "Campaign title", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_run_id_title": {"name": "campaign_run_id_title", "description": "Title of the campaign run", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_action_type": {"name": "campaign_action_type", "description": "Campaign action type (eg. Make Something, Share Something)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_cause_type": {"name": "campaign_cause_type", "description": "Campaign cause type (e.g. Mental Health, Education, Environment)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_noun": {"name": "campaign_noun", "description": "Noun applicable to the user's action", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_verb": {"name": "campaign_verb", "description": "Verb describing the action the user should take", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_cta": {"name": "campaign_cta", "description": "Campaign's call to action", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/campaign_info/schema.yml", "build_path": "../../docs/compiled/ds_dbt/models/campaign_info/campaign_info.sql", "deferred": false, "compiled_sql": "WITH\n--Campaigns with Online/Offline Post Components\ncampaign_online AS (\n  SELECT\n    campaign_id,\n    -- Uses distinct count to check if\n    -- there is only online or only offline actions (Value would be 1)\n    -- there is a mix of online and offline (Value would be 2)\n    count(DISTINCT online) AS online_count,\n    -- If the campaign has only 1 action, min_online will hold \"Online\" or \"Offline\" accordingly.\n    -- If the campaign has any number of both types of actions min_online will always hold \"Offline\"\n    -- NOTE: Ignore in that case.\n    min(\n      CASE\n        WHEN online = TRUE THEN 'Online'\n        ELSE 'Offline'\n      END\n    ) AS min_online\n  FROM\n    \"quasar_prod_warehouse\".\"public\".\"post_actions\"\n  GROUP BY\n    1\n),\ncampaign_online_combo AS (\n  SELECT\n    campaign_id,\n    CASE\n      WHEN online_count > 1 THEN 'Both'\n      ELSE min_online\n    END AS online_offline\n  FROM\n    campaign_online\n),\n--Campaigns and Action Types\ncampaign_action AS (\n  SELECT campaign_id, action_type\n  FROM \"quasar_prod_warehouse\".\"public\".\"post_actions\"\n  WHERE action_type IS NOT null AND action_type<>''\n  GROUP BY 1, 2\n),\n--Campaigns and Action Types Combined\ncampaign_action_combo AS (\n    SELECT campaign_id, string_agg(action_type, ' , ' ORDER BY action_type) AS action_types\n    FROM campaign_action\n    GROUP BY 1\n),\n-- Campaigns and Scholarship\ncampaign_scholarship AS (\n  SELECT campaign_id, count(CASE WHEN scholarship_entry=true THEN 1 END) AS scholarship\n  FROM \"quasar_prod_warehouse\".\"public\".\"post_actions\"\n  GROUP BY 1\n),\n-- Campaigns and Scholarship Combined\ncampaign_scholarship_combo AS (\n    SELECT campaign_id, (CASE WHEN scholarship>0 THEN 'Scholarship' ELSE 'Not Scholarship' END) AS scholarship\n    FROM campaign_scholarship\n),\n--Campaigns and Action Types\ncampaign_post_type AS (\n  SELECT campaign_id, post_type\n  FROM \"quasar_prod_warehouse\".\"public\".\"post_actions\"\n  WHERE post_type IS NOT null AND post_type<>''\n  GROUP BY 1, 2\n),\n--Campaigns and Action Types Combined\ncampaign_post_type_combo AS (\n    SELECT campaign_id, string_agg(post_type, ' , ' ORDER BY post_type) AS post_types\n    FROM campaign_post_type\n    GROUP BY 1\n)\nSELECT \n\tc.id AS campaign_id,\n\tc.campaign_run_id,\n\tc.internal_title AS campaign_name,\n\tc.cause AS campaign_cause,\n\tc.start_date AS campaign_run_start_date,\n\tc.end_date AS campaign_run_end_date,\n\tc.created_at AS campaign_created_date,\n\tCOALESCE(i.campaign_node_id, c.id) AS campaign_node_id,\n  c.group_type_id,\n  cm.contentful_id as contentful_id,\n  cm.internal_title as contentful_internal_title,\n  cm.title as contentful_title,\n  cm.display_referral_page as contentful_RAF_flag,\n\ti.campaign_node_id_title,\n\ti.campaign_run_id_title,\n\tCASE WHEN i.campaign_action_type = '' THEN null ELSE i.campaign_action_type END AS campaign_action_type,\n\tCOALESCE(\n\t\tCASE WHEN c.cause = '' THEN null ELSE c.cause END,\n\t\tCASE WHEN i.campaign_cause_type = '' THEN null ELSE i.campaign_cause_type END\n\t) AS campaign_cause_type,\n\ti.campaign_noun,\n\ti.campaign_verb,\n\ti.campaign_cta,\n\tCASE WHEN a.action_types = '' THEN null ELSE a.action_types END AS action_types,\n\to.online_offline,\n\ts.scholarship,\n\tp.post_types\nFROM \"quasar_prod_warehouse\".\"ft_dosomething_rogue\".\"campaigns\" c\nLEFT JOIN \"quasar_prod_warehouse\".\"public\".\"campaign_info_ashes_snapshot\" i ON i.campaign_run_id = c.campaign_run_id\nLEFT JOIN campaign_action_combo a on c.id = a.campaign_id\nLEFT JOIN campaign_online_combo o on c.id = o.campaign_id\nLEFT JOIN campaign_scholarship_combo s on c.id = s.campaign_id\nLEFT JOIN campaign_post_type_combo p on c.id = p.campaign_id\nLEFT JOIN \"quasar_prod_warehouse\".\"public_intermediate\".\"contentful_metadata\" cm on c.id = cm.legacy_campaign_id\nWHERE i.campaign_language = 'en' OR i.campaign_language IS null", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "WITH\n--Campaigns with Online/Offline Post Components\ncampaign_online AS (\n  SELECT\n    campaign_id,\n    -- Uses distinct count to check if\n    -- there is only online or only offline actions (Value would be 1)\n    -- there is a mix of online and offline (Value would be 2)\n    count(DISTINCT online) AS online_count,\n    -- If the campaign has only 1 action, min_online will hold \"Online\" or \"Offline\" accordingly.\n    -- If the campaign has any number of both types of actions min_online will always hold \"Offline\"\n    -- NOTE: Ignore in that case.\n    min(\n      CASE\n        WHEN online = TRUE THEN 'Online'\n        ELSE 'Offline'\n      END\n    ) AS min_online\n  FROM\n    \"quasar_prod_warehouse\".\"public\".\"post_actions\"\n  GROUP BY\n    1\n),\ncampaign_online_combo AS (\n  SELECT\n    campaign_id,\n    CASE\n      WHEN online_count > 1 THEN 'Both'\n      ELSE min_online\n    END AS online_offline\n  FROM\n    campaign_online\n),\n--Campaigns and Action Types\ncampaign_action AS (\n  SELECT campaign_id, action_type\n  FROM \"quasar_prod_warehouse\".\"public\".\"post_actions\"\n  WHERE action_type IS NOT null AND action_type<>''\n  GROUP BY 1, 2\n),\n--Campaigns and Action Types Combined\ncampaign_action_combo AS (\n    SELECT campaign_id, string_agg(action_type, ' , ' ORDER BY action_type) AS action_types\n    FROM campaign_action\n    GROUP BY 1\n),\n-- Campaigns and Scholarship\ncampaign_scholarship AS (\n  SELECT campaign_id, count(CASE WHEN scholarship_entry=true THEN 1 END) AS scholarship\n  FROM \"quasar_prod_warehouse\".\"public\".\"post_actions\"\n  GROUP BY 1\n),\n-- Campaigns and Scholarship Combined\ncampaign_scholarship_combo AS (\n    SELECT campaign_id, (CASE WHEN scholarship>0 THEN 'Scholarship' ELSE 'Not Scholarship' END) AS scholarship\n    FROM campaign_scholarship\n),\n--Campaigns and Action Types\ncampaign_post_type AS (\n  SELECT campaign_id, post_type\n  FROM \"quasar_prod_warehouse\".\"public\".\"post_actions\"\n  WHERE post_type IS NOT null AND post_type<>''\n  GROUP BY 1, 2\n),\n--Campaigns and Action Types Combined\ncampaign_post_type_combo AS (\n    SELECT campaign_id, string_agg(post_type, ' , ' ORDER BY post_type) AS post_types\n    FROM campaign_post_type\n    GROUP BY 1\n)\nSELECT \n\tc.id AS campaign_id,\n\tc.campaign_run_id,\n\tc.internal_title AS campaign_name,\n\tc.cause AS campaign_cause,\n\tc.start_date AS campaign_run_start_date,\n\tc.end_date AS campaign_run_end_date,\n\tc.created_at AS campaign_created_date,\n\tCOALESCE(i.campaign_node_id, c.id) AS campaign_node_id,\n  c.group_type_id,\n  cm.contentful_id as contentful_id,\n  cm.internal_title as contentful_internal_title,\n  cm.title as contentful_title,\n  cm.display_referral_page as contentful_RAF_flag,\n\ti.campaign_node_id_title,\n\ti.campaign_run_id_title,\n\tCASE WHEN i.campaign_action_type = '' THEN null ELSE i.campaign_action_type END AS campaign_action_type,\n\tCOALESCE(\n\t\tCASE WHEN c.cause = '' THEN null ELSE c.cause END,\n\t\tCASE WHEN i.campaign_cause_type = '' THEN null ELSE i.campaign_cause_type END\n\t) AS campaign_cause_type,\n\ti.campaign_noun,\n\ti.campaign_verb,\n\ti.campaign_cta,\n\tCASE WHEN a.action_types = '' THEN null ELSE a.action_types END AS action_types,\n\to.online_offline,\n\ts.scholarship,\n\tp.post_types\nFROM \"quasar_prod_warehouse\".\"ft_dosomething_rogue\".\"campaigns\" c\nLEFT JOIN \"quasar_prod_warehouse\".\"public\".\"campaign_info_ashes_snapshot\" i ON i.campaign_run_id = c.campaign_run_id\nLEFT JOIN campaign_action_combo a on c.id = a.campaign_id\nLEFT JOIN campaign_online_combo o on c.id = o.campaign_id\nLEFT JOIN campaign_scholarship_combo s on c.id = s.campaign_id\nLEFT JOIN campaign_post_type_combo p on c.id = p.campaign_id\nLEFT JOIN \"quasar_prod_warehouse\".\"public_intermediate\".\"contentful_metadata\" cm on c.id = cm.legacy_campaign_id\nWHERE i.campaign_language = 'en' OR i.campaign_language IS null"}, "error": null, "status": null, "execution_time": 0.03412771224975586, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-02-23T21:28:54.755097Z", "completed_at": "2021-02-23T21:28:54.788124Z"}, {"name": "execute", "started_at": "2021-02-23T21:28:54.788436Z", "completed_at": "2021-02-23T21:28:54.788446Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "\n\n    {{\n        config(\n          target_database=env_var(\"PG_DATABASE\"),\n          target_schema='public',\n          unique_key='contentful_id',\n          strategy='check',\n          check_cols='all'\n        )\n    }}\n    \n    select * from {{ ref('contentful_metadata') }}\n    \n", "compiled": true, "database": "quasar_prod_warehouse", "schema": "public", "fqn": ["ds_dbt", "contentful_metadata", "contentful_metadata_snapshot"], "unique_id": "snapshot.ds_dbt.contentful_metadata_snapshot", "package_name": "ds_dbt", "root_path": "/home/runner/work/quasar/quasar/quasar/dbt", "path": "contentful_metadata.sql", "original_file_path": "snapshots/contentful_metadata.sql", "name": "contentful_metadata_snapshot", "resource_type": "snapshot", "alias": "contentful_metadata_snapshot", "checksum": {"name": "sha256", "checksum": "973ff22d1472ac7dc7b6477556ff9b353f334ec13b0315645b8b91e87430e63b"}, "config": {"enabled": true, "materialized": "snapshot", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "unique_key": "contentful_id", "target_schema": "public", "target_database": "quasar_prod_warehouse", "strategy": "check", "check_cols": "all"}, "tags": [], "refs": [["contentful_metadata"]], "sources": [], "depends_on": {"macros": [], "nodes": ["model.ds_dbt.contentful_metadata"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "compiled_sql": "\n\n    \n    \n    select * from \"quasar_prod_warehouse\".\"public_intermediate\".\"contentful_metadata\"\n    ", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n    \n    \n    select * from \"quasar_prod_warehouse\".\"public_intermediate\".\"contentful_metadata\"\n    "}, "error": null, "status": null, "execution_time": 0.012992620468139648, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-02-23T21:28:54.790047Z", "completed_at": "2021-02-23T21:28:54.801931Z"}, {"name": "execute", "started_at": "2021-02-23T21:28:54.802231Z", "completed_at": "2021-02-23T21:28:54.802238Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='WARN') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "device_id", "model": "{{ ref('snowplow_base_event') }}"}}, "compiled": true, "database": "quasar_prod_warehouse", "schema": "public", "fqn": ["ds_dbt", "schema_test", "not_null_snowplow_base_event_device_id"], "unique_id": "test.ds_dbt.not_null_snowplow_base_event_device_id", "package_name": "ds_dbt", "root_path": "/home/runner/work/quasar/quasar/quasar/dbt", "path": "schema_test/not_null_snowplow_base_event_device_id.sql", "original_file_path": "models/phoenix_events/schema.yml", "name": "not_null_snowplow_base_event_device_id", "resource_type": "test", "alias": "not_null_snowplow_base_event_device_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "WARN"}, "tags": ["schema"], "refs": [["snowplow_base_event"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.ds_dbt.snowplow_base_event"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "../../docs/compiled/ds_dbt/models/phoenix_events/schema.yml/schema_test/not_null_snowplow_base_event_device_id.sql", "deferred": false, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom \"quasar_prod_warehouse\".\"public\".\"snowplow_base_event\"\nwhere device_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom \"quasar_prod_warehouse\".\"public\".\"snowplow_base_event\"\nwhere device_id is null\n\n\n", "column_name": "device_id"}, "error": null, "status": null, "execution_time": 0.020487070083618164, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-02-23T21:28:54.803506Z", "completed_at": "2021-02-23T21:28:54.822965Z"}, {"name": "execute", "started_at": "2021-02-23T21:28:54.823261Z", "completed_at": "2021-02-23T21:28:54.823268Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='WARN') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "event_datetime", "model": "{{ ref('snowplow_base_event') }}"}}, "compiled": true, "database": "quasar_prod_warehouse", "schema": "public", "fqn": ["ds_dbt", "schema_test", "not_null_snowplow_base_event_event_datetime"], "unique_id": "test.ds_dbt.not_null_snowplow_base_event_event_datetime", "package_name": "ds_dbt", "root_path": "/home/runner/work/quasar/quasar/quasar/dbt", "path": "schema_test/not_null_snowplow_base_event_event_datetime.sql", "original_file_path": "models/phoenix_events/schema.yml", "name": "not_null_snowplow_base_event_event_datetime", "resource_type": "test", "alias": "not_null_snowplow_base_event_event_datetime", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "WARN"}, "tags": ["schema"], "refs": [["snowplow_base_event"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.ds_dbt.snowplow_base_event"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "../../docs/compiled/ds_dbt/models/phoenix_events/schema.yml/schema_test/not_null_snowplow_base_event_event_datetime.sql", "deferred": false, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom \"quasar_prod_warehouse\".\"public\".\"snowplow_base_event\"\nwhere event_datetime is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom \"quasar_prod_warehouse\".\"public\".\"snowplow_base_event\"\nwhere event_datetime is null\n\n\n", "column_name": "event_datetime"}, "error": null, "status": null, "execution_time": 0.012795686721801758, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-02-23T21:28:54.824492Z", "completed_at": "2021-02-23T21:28:54.836248Z"}, {"name": "execute", "started_at": "2021-02-23T21:28:54.836546Z", "completed_at": "2021-02-23T21:28:54.836553Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='WARN') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "event_id", "model": "{{ ref('snowplow_base_event') }}"}}, "compiled": true, "database": "quasar_prod_warehouse", "schema": "public", "fqn": ["ds_dbt", "schema_test", "not_null_snowplow_base_event_event_id"], "unique_id": "test.ds_dbt.not_null_snowplow_base_event_event_id", "package_name": "ds_dbt", "root_path": "/home/runner/work/quasar/quasar/quasar/dbt", "path": "schema_test/not_null_snowplow_base_event_event_id.sql", "original_file_path": "models/phoenix_events/schema.yml", "name": "not_null_snowplow_base_event_event_id", "resource_type": "test", "alias": "not_null_snowplow_base_event_event_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "WARN"}, "tags": ["schema"], "refs": [["snowplow_base_event"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.ds_dbt.snowplow_base_event"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "../../docs/compiled/ds_dbt/models/phoenix_events/schema.yml/schema_test/not_null_snowplow_base_event_event_id.sql", "deferred": false, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom \"quasar_prod_warehouse\".\"public\".\"snowplow_base_event\"\nwhere event_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom \"quasar_prod_warehouse\".\"public\".\"snowplow_base_event\"\nwhere event_id is null\n\n\n", "column_name": "event_id"}, "error": null, "status": null, "execution_time": 0.015384912490844727, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-02-23T21:28:54.837834Z", "completed_at": "2021-02-23T21:28:54.851937Z"}, {"name": "execute", "started_at": "2021-02-23T21:28:54.852250Z", "completed_at": "2021-02-23T21:28:54.852259Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='WARN') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "event_source", "model": "{{ ref('snowplow_base_event') }}"}}, "compiled": true, "database": "quasar_prod_warehouse", "schema": "public", "fqn": ["ds_dbt", "schema_test", "not_null_snowplow_base_event_event_source"], "unique_id": "test.ds_dbt.not_null_snowplow_base_event_event_source", "package_name": "ds_dbt", "root_path": "/home/runner/work/quasar/quasar/quasar/dbt", "path": "schema_test/not_null_snowplow_base_event_event_source.sql", "original_file_path": "models/phoenix_events/schema.yml", "name": "not_null_snowplow_base_event_event_source", "resource_type": "test", "alias": "not_null_snowplow_base_event_event_source", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "WARN"}, "tags": ["schema"], "refs": [["snowplow_base_event"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.ds_dbt.snowplow_base_event"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "../../docs/compiled/ds_dbt/models/phoenix_events/schema.yml/schema_test/not_null_snowplow_base_event_event_source.sql", "deferred": false, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom \"quasar_prod_warehouse\".\"public\".\"snowplow_base_event\"\nwhere event_source is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom \"quasar_prod_warehouse\".\"public\".\"snowplow_base_event\"\nwhere event_source is null\n\n\n", "column_name": "event_source"}, "error": null, "status": null, "execution_time": 0.016941547393798828, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-02-23T21:28:54.853709Z", "completed_at": "2021-02-23T21:28:54.869281Z"}, {"name": "execute", "started_at": "2021-02-23T21:28:54.869600Z", "completed_at": "2021-02-23T21:28:54.869607Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='WARN') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "event_type", "model": "{{ ref('snowplow_base_event') }}"}}, "compiled": true, "database": "quasar_prod_warehouse", "schema": "public", "fqn": ["ds_dbt", "schema_test", "not_null_snowplow_base_event_event_type"], "unique_id": "test.ds_dbt.not_null_snowplow_base_event_event_type", "package_name": "ds_dbt", "root_path": "/home/runner/work/quasar/quasar/quasar/dbt", "path": "schema_test/not_null_snowplow_base_event_event_type.sql", "original_file_path": "models/phoenix_events/schema.yml", "name": "not_null_snowplow_base_event_event_type", "resource_type": "test", "alias": "not_null_snowplow_base_event_event_type", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "WARN"}, "tags": ["schema"], "refs": [["snowplow_base_event"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.ds_dbt.snowplow_base_event"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "../../docs/compiled/ds_dbt/models/phoenix_events/schema.yml/schema_test/not_null_snowplow_base_event_event_type.sql", "deferred": false, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom \"quasar_prod_warehouse\".\"public\".\"snowplow_base_event\"\nwhere event_type is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom \"quasar_prod_warehouse\".\"public\".\"snowplow_base_event\"\nwhere event_type is null\n\n\n", "column_name": "event_type"}, "error": null, "status": null, "execution_time": 0.014104127883911133, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-02-23T21:28:54.870887Z", "completed_at": "2021-02-23T21:28:54.883775Z"}, {"name": "execute", "started_at": "2021-02-23T21:28:54.884072Z", "completed_at": "2021-02-23T21:28:54.884079Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='WARN') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "host", "model": "{{ ref('snowplow_base_event') }}"}}, "compiled": true, "database": "quasar_prod_warehouse", "schema": "public", "fqn": ["ds_dbt", "schema_test", "not_null_snowplow_base_event_host"], "unique_id": "test.ds_dbt.not_null_snowplow_base_event_host", "package_name": "ds_dbt", "root_path": "/home/runner/work/quasar/quasar/quasar/dbt", "path": "schema_test/not_null_snowplow_base_event_host.sql", "original_file_path": "models/phoenix_events/schema.yml", "name": "not_null_snowplow_base_event_host", "resource_type": "test", "alias": "not_null_snowplow_base_event_host", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "WARN"}, "tags": ["schema"], "refs": [["snowplow_base_event"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.ds_dbt.snowplow_base_event"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "../../docs/compiled/ds_dbt/models/phoenix_events/schema.yml/schema_test/not_null_snowplow_base_event_host.sql", "deferred": false, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom \"quasar_prod_warehouse\".\"public\".\"snowplow_base_event\"\nwhere host is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom \"quasar_prod_warehouse\".\"public\".\"snowplow_base_event\"\nwhere host is null\n\n\n", "column_name": "host"}, "error": null, "status": null, "execution_time": 0.013201236724853516, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-02-23T21:28:54.885441Z", "completed_at": "2021-02-23T21:28:54.897498Z"}, {"name": "execute", "started_at": "2021-02-23T21:28:54.897835Z", "completed_at": "2021-02-23T21:28:54.897842Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='WARN') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "path", "model": "{{ ref('snowplow_base_event') }}"}}, "compiled": true, "database": "quasar_prod_warehouse", "schema": "public", "fqn": ["ds_dbt", "schema_test", "not_null_snowplow_base_event_path"], "unique_id": "test.ds_dbt.not_null_snowplow_base_event_path", "package_name": "ds_dbt", "root_path": "/home/runner/work/quasar/quasar/quasar/dbt", "path": "schema_test/not_null_snowplow_base_event_path.sql", "original_file_path": "models/phoenix_events/schema.yml", "name": "not_null_snowplow_base_event_path", "resource_type": "test", "alias": "not_null_snowplow_base_event_path", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "WARN"}, "tags": ["schema"], "refs": [["snowplow_base_event"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.ds_dbt.snowplow_base_event"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "../../docs/compiled/ds_dbt/models/phoenix_events/schema.yml/schema_test/not_null_snowplow_base_event_path.sql", "deferred": false, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom \"quasar_prod_warehouse\".\"public\".\"snowplow_base_event\"\nwhere path is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom \"quasar_prod_warehouse\".\"public\".\"snowplow_base_event\"\nwhere path is null\n\n\n", "column_name": "path"}, "error": null, "status": null, "execution_time": 0.012804269790649414, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-02-23T21:28:54.899171Z", "completed_at": "2021-02-23T21:28:54.910930Z"}, {"name": "execute", "started_at": "2021-02-23T21:28:54.911227Z", "completed_at": "2021-02-23T21:28:54.911233Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='WARN') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "session_counter", "model": "{{ ref('snowplow_base_event') }}"}}, "compiled": true, "database": "quasar_prod_warehouse", "schema": "public", "fqn": ["ds_dbt", "schema_test", "not_null_snowplow_base_event_session_counter"], "unique_id": "test.ds_dbt.not_null_snowplow_base_event_session_counter", "package_name": "ds_dbt", "root_path": "/home/runner/work/quasar/quasar/quasar/dbt", "path": "schema_test/not_null_snowplow_base_event_session_counter.sql", "original_file_path": "models/phoenix_events/schema.yml", "name": "not_null_snowplow_base_event_session_counter", "resource_type": "test", "alias": "not_null_snowplow_base_event_session_counter", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "WARN"}, "tags": ["schema"], "refs": [["snowplow_base_event"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.ds_dbt.snowplow_base_event"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "../../docs/compiled/ds_dbt/models/phoenix_events/schema.yml/schema_test/not_null_snowplow_base_event_session_counter.sql", "deferred": false, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom \"quasar_prod_warehouse\".\"public\".\"snowplow_base_event\"\nwhere session_counter is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom \"quasar_prod_warehouse\".\"public\".\"snowplow_base_event\"\nwhere session_counter is null\n\n\n", "column_name": "session_counter"}, "error": null, "status": null, "execution_time": 0.012750625610351562, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-02-23T21:28:54.912471Z", "completed_at": "2021-02-23T21:28:54.924033Z"}, {"name": "execute", "started_at": "2021-02-23T21:28:54.924445Z", "completed_at": "2021-02-23T21:28:54.924452Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='WARN') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "session_id", "model": "{{ ref('snowplow_base_event') }}"}}, "compiled": true, "database": "quasar_prod_warehouse", "schema": "public", "fqn": ["ds_dbt", "schema_test", "not_null_snowplow_base_event_session_id"], "unique_id": "test.ds_dbt.not_null_snowplow_base_event_session_id", "package_name": "ds_dbt", "root_path": "/home/runner/work/quasar/quasar/quasar/dbt", "path": "schema_test/not_null_snowplow_base_event_session_id.sql", "original_file_path": "models/phoenix_events/schema.yml", "name": "not_null_snowplow_base_event_session_id", "resource_type": "test", "alias": "not_null_snowplow_base_event_session_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "WARN"}, "tags": ["schema"], "refs": [["snowplow_base_event"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.ds_dbt.snowplow_base_event"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "../../docs/compiled/ds_dbt/models/phoenix_events/schema.yml/schema_test/not_null_snowplow_base_event_session_id.sql", "deferred": false, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom \"quasar_prod_warehouse\".\"public\".\"snowplow_base_event\"\nwhere session_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom \"quasar_prod_warehouse\".\"public\".\"snowplow_base_event\"\nwhere session_id is null\n\n\n", "column_name": "session_id"}, "error": null, "status": null, "execution_time": 0.012681722640991211, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-02-23T21:28:54.925789Z", "completed_at": "2021-02-23T21:28:54.937208Z"}, {"name": "execute", "started_at": "2021-02-23T21:28:54.937524Z", "completed_at": "2021-02-23T21:28:54.937531Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='WARN') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "event_id", "model": "{{ ref('snowplow_base_event') }}"}}, "compiled": true, "database": "quasar_prod_warehouse", "schema": "public", "fqn": ["ds_dbt", "schema_test", "unique_snowplow_base_event_event_id"], "unique_id": "test.ds_dbt.unique_snowplow_base_event_event_id", "package_name": "ds_dbt", "root_path": "/home/runner/work/quasar/quasar/quasar/dbt", "path": "schema_test/unique_snowplow_base_event_event_id.sql", "original_file_path": "models/phoenix_events/schema.yml", "name": "unique_snowplow_base_event_event_id", "resource_type": "test", "alias": "unique_snowplow_base_event_event_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "WARN"}, "tags": ["schema"], "refs": [["snowplow_base_event"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.ds_dbt.snowplow_base_event"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "../../docs/compiled/ds_dbt/models/phoenix_events/schema.yml/schema_test/unique_snowplow_base_event_event_id.sql", "deferred": false, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        event_id\n\n    from \"quasar_prod_warehouse\".\"public\".\"snowplow_base_event\"\n    where event_id is not null\n    group by event_id\n    having count(*) > 1\n\n) validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        event_id\n\n    from \"quasar_prod_warehouse\".\"public\".\"snowplow_base_event\"\n    where event_id is not null\n    group by event_id\n    having count(*) > 1\n\n) validation_errors\n\n\n", "column_name": "event_id"}, "error": null, "status": null, "execution_time": 0.017177104949951172, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-02-23T21:28:54.938858Z", "completed_at": "2021-02-23T21:28:54.954915Z"}, {"name": "execute", "started_at": "2021-02-23T21:28:54.955220Z", "completed_at": "2021-02-23T21:28:54.955229Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='WARN') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "event_id", "model": "{{ ref('snowplow_payload_event') }}"}}, "compiled": true, "database": "quasar_prod_warehouse", "schema": "public", "fqn": ["ds_dbt", "schema_test", "not_null_snowplow_payload_event_event_id"], "unique_id": "test.ds_dbt.not_null_snowplow_payload_event_event_id", "package_name": "ds_dbt", "root_path": "/home/runner/work/quasar/quasar/quasar/dbt", "path": "schema_test/not_null_snowplow_payload_event_event_id.sql", "original_file_path": "models/phoenix_events/schema.yml", "name": "not_null_snowplow_payload_event_event_id", "resource_type": "test", "alias": "not_null_snowplow_payload_event_event_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "WARN"}, "tags": ["schema"], "refs": [["snowplow_payload_event"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.ds_dbt.snowplow_payload_event"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "../../docs/compiled/ds_dbt/models/phoenix_events/schema.yml/schema_test/not_null_snowplow_payload_event_event_id.sql", "deferred": false, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom \"quasar_prod_warehouse\".\"public\".\"snowplow_payload_event\"\nwhere event_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom \"quasar_prod_warehouse\".\"public\".\"snowplow_payload_event\"\nwhere event_id is null\n\n\n", "column_name": "event_id"}, "error": null, "status": null, "execution_time": 0.022074222564697266, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-02-23T21:28:54.957329Z", "completed_at": "2021-02-23T21:28:54.977474Z"}, {"name": "execute", "started_at": "2021-02-23T21:28:54.977823Z", "completed_at": "2021-02-23T21:28:54.977833Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='WARN') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "ft_timestamp", "model": "{{ ref('snowplow_payload_event') }}"}}, "compiled": true, "database": "quasar_prod_warehouse", "schema": "public", "fqn": ["ds_dbt", "schema_test", "not_null_snowplow_payload_event_ft_timestamp"], "unique_id": "test.ds_dbt.not_null_snowplow_payload_event_ft_timestamp", "package_name": "ds_dbt", "root_path": "/home/runner/work/quasar/quasar/quasar/dbt", "path": "schema_test/not_null_snowplow_payload_event_ft_timestamp.sql", "original_file_path": "models/phoenix_events/schema.yml", "name": "not_null_snowplow_payload_event_ft_timestamp", "resource_type": "test", "alias": "not_null_snowplow_payload_event_ft_timestamp", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "WARN"}, "tags": ["schema"], "refs": [["snowplow_payload_event"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.ds_dbt.snowplow_payload_event"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "../../docs/compiled/ds_dbt/models/phoenix_events/schema.yml/schema_test/not_null_snowplow_payload_event_ft_timestamp.sql", "deferred": false, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom \"quasar_prod_warehouse\".\"public\".\"snowplow_payload_event\"\nwhere ft_timestamp is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom \"quasar_prod_warehouse\".\"public\".\"snowplow_payload_event\"\nwhere ft_timestamp is null\n\n\n", "column_name": "ft_timestamp"}, "error": null, "status": null, "execution_time": 0.01284480094909668, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-02-23T21:28:54.979197Z", "completed_at": "2021-02-23T21:28:54.990982Z"}, {"name": "execute", "started_at": "2021-02-23T21:28:54.991281Z", "completed_at": "2021-02-23T21:28:54.991288Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='WARN') }}{{ test_not_null_where(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null_where", "kwargs": {"condition": "event_name similar to '%(opened_modal|closed_modal)%'", "column_name": "modal_type", "model": "{{ ref('snowplow_payload_event') }}"}}, "compiled": true, "database": "quasar_prod_warehouse", "schema": "public", "fqn": ["ds_dbt", "schema_test", "not_null_where_snowplow_payload_event_modal_type__event_name_similar_to_opened_modal_closed_modal_"], "unique_id": "test.ds_dbt.not_null_where_snowplow_payload_event_modal_type__event_name_similar_to_opened_modal_closed_modal_", "package_name": "ds_dbt", "root_path": "/home/runner/work/quasar/quasar/quasar/dbt", "path": "schema_test/not_null_where_snowplow_payload_event_2d35a4a630b70b2ace485c86a2c0b46f.sql", "original_file_path": "models/phoenix_events/schema.yml", "name": "not_null_where_snowplow_payload_event_modal_type__event_name_similar_to_opened_modal_closed_modal_", "resource_type": "test", "alias": "not_null_where_snowplow_payload_event_modal_type__event_name_similar_to_opened_modal_closed_modal_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "WARN"}, "tags": ["schema"], "refs": [["snowplow_payload_event"]], "sources": [], "depends_on": {"macros": ["macro.ds_dbt.test_not_null_where"], "nodes": ["model.ds_dbt.snowplow_payload_event"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "../../docs/compiled/ds_dbt/models/phoenix_events/schema.yml/schema_test/not_null_where_snowplow_payload_event_2d35a4a630b70b2ace485c86a2c0b46f.sql", "deferred": false, "compiled_sql": "\n\n  with exceptions as (\n    select\n      count(*)\n\n    from\n      \"quasar_prod_warehouse\".\"public\".\"snowplow_payload_event\"\n\n    where\n      modal_type is null\n      and event_name similar to '%(opened_modal|closed_modal)%'\n\n  )\n\n  select * from exceptions\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n  with exceptions as (\n    select\n      count(*)\n\n    from\n      \"quasar_prod_warehouse\".\"public\".\"snowplow_payload_event\"\n\n    where\n      modal_type is null\n      and event_name similar to '%(opened_modal|closed_modal)%'\n\n  )\n\n  select * from exceptions\n\n", "column_name": "modal_type"}, "error": null, "status": null, "execution_time": 0.013036966323852539, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-02-23T21:28:54.992497Z", "completed_at": "2021-02-23T21:28:55.004504Z"}, {"name": "execute", "started_at": "2021-02-23T21:28:55.004804Z", "completed_at": "2021-02-23T21:28:55.004812Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='WARN') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "event_id", "model": "{{ ref('snowplow_payload_event') }}"}}, "compiled": true, "database": "quasar_prod_warehouse", "schema": "public", "fqn": ["ds_dbt", "schema_test", "unique_snowplow_payload_event_event_id"], "unique_id": "test.ds_dbt.unique_snowplow_payload_event_event_id", "package_name": "ds_dbt", "root_path": "/home/runner/work/quasar/quasar/quasar/dbt", "path": "schema_test/unique_snowplow_payload_event_event_id.sql", "original_file_path": "models/phoenix_events/schema.yml", "name": "unique_snowplow_payload_event_event_id", "resource_type": "test", "alias": "unique_snowplow_payload_event_event_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "WARN"}, "tags": ["schema"], "refs": [["snowplow_payload_event"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.ds_dbt.snowplow_payload_event"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "../../docs/compiled/ds_dbt/models/phoenix_events/schema.yml/schema_test/unique_snowplow_payload_event_event_id.sql", "deferred": false, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        event_id\n\n    from \"quasar_prod_warehouse\".\"public\".\"snowplow_payload_event\"\n    where event_id is not null\n    group by event_id\n    having count(*) > 1\n\n) validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        event_id\n\n    from \"quasar_prod_warehouse\".\"public\".\"snowplow_payload_event\"\n    where event_id is not null\n    group by event_id\n    having count(*) > 1\n\n) validation_errors\n\n\n", "column_name": "event_id"}, "error": null, "status": null, "execution_time": 0.012589216232299805, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-02-23T21:28:55.006084Z", "completed_at": "2021-02-23T21:28:55.017387Z"}, {"name": "execute", "started_at": "2021-02-23T21:28:55.017738Z", "completed_at": "2021-02-23T21:28:55.017745Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "with nps_web_historic as\n    (select\n        survey_response_id\n        , nps_score\n        , net_promoter_cat\n        , nps_reason\n        , northstar_id\n        , surveyed_on_url\n        , legacy_campaign_id\n        , created_at\n       from {{ ref('base_historical_nps_web') }} )\n\n, nps_web_current as\n    (select\n      survey_response_id\n      , nps_score\n      , net_promoter_cat\n      , nps_reason\n      , northstar_id\n      , surveyed_on_url\n      , null as legacy_campaign_id\n      , created_at\n      from {{ ref('base_typeform_nps_web') }} )\n\n, final as\n    (select * from nps_web_historic\n      union all\n      select * from nps_web_current)\n\nselect * from final", "compiled": true, "database": "quasar_prod_warehouse", "schema": "public", "fqn": ["ds_dbt", "staging", "surveys", "stg_nps_web_responses"], "unique_id": "model.ds_dbt.stg_nps_web_responses", "package_name": "ds_dbt", "root_path": "/home/runner/work/quasar/quasar/quasar/dbt", "path": "staging/surveys/stg_nps_web_responses.sql", "original_file_path": "models/staging/surveys/stg_nps_web_responses.sql", "name": "stg_nps_web_responses", "resource_type": "model", "alias": "stg_nps_web_responses", "checksum": {"name": "sha256", "checksum": "7042d3c7e9d30866dc86bdd275909690f796c8e77c44700c2f5722b931d45ace"}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["base_historical_nps_web"], ["base_typeform_nps_web"]], "sources": [], "depends_on": {"macros": [], "nodes": ["model.ds_dbt.base_historical_nps_web", "model.ds_dbt.base_typeform_nps_web"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "../../docs/compiled/ds_dbt/models/staging/surveys/stg_nps_web_responses.sql", "deferred": false, "compiled_sql": "with nps_web_historic as\n    (select\n        survey_response_id\n        , nps_score\n        , net_promoter_cat\n        , nps_reason\n        , northstar_id\n        , surveyed_on_url\n        , legacy_campaign_id\n        , created_at\n       from \"quasar_prod_warehouse\".\"public\".\"base_historical_nps_web\" )\n\n, nps_web_current as\n    (select\n      survey_response_id\n      , nps_score\n      , net_promoter_cat\n      , nps_reason\n      , northstar_id\n      , surveyed_on_url\n      , null as legacy_campaign_id\n      , created_at\n      from \"quasar_prod_warehouse\".\"public\".\"base_typeform_nps_web\" )\n\n, final as\n    (select * from nps_web_historic\n      union all\n      select * from nps_web_current)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "with nps_web_historic as\n    (select\n        survey_response_id\n        , nps_score\n        , net_promoter_cat\n        , nps_reason\n        , northstar_id\n        , surveyed_on_url\n        , legacy_campaign_id\n        , created_at\n       from \"quasar_prod_warehouse\".\"public\".\"base_historical_nps_web\" )\n\n, nps_web_current as\n    (select\n      survey_response_id\n      , nps_score\n      , net_promoter_cat\n      , nps_reason\n      , northstar_id\n      , surveyed_on_url\n      , null as legacy_campaign_id\n      , created_at\n      from \"quasar_prod_warehouse\".\"public\".\"base_typeform_nps_web\" )\n\n, final as\n    (select * from nps_web_historic\n      union all\n      select * from nps_web_current)\n\nselect * from final"}, "error": null, "status": null, "execution_time": 0.01199030876159668, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-02-23T21:28:55.019094Z", "completed_at": "2021-02-23T21:28:55.029946Z"}, {"name": "execute", "started_at": "2021-02-23T21:28:55.030248Z", "completed_at": "2021-02-23T21:28:55.030268Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "campaign_action_type", "model": "{{ ref('campaign_info_international') }}"}}, "compiled": true, "database": "quasar_prod_warehouse", "schema": "public", "fqn": ["ds_dbt", "schema_test", "not_null_campaign_info_international_campaign_action_type"], "unique_id": "test.ds_dbt.not_null_campaign_info_international_campaign_action_type", "package_name": "ds_dbt", "root_path": "/home/runner/work/quasar/quasar/quasar/dbt", "path": "schema_test/not_null_campaign_info_international_campaign_action_type.sql", "original_file_path": "models/campaign_info/schema.yml", "name": "not_null_campaign_info_international_campaign_action_type", "resource_type": "test", "alias": "not_null_campaign_info_international_campaign_action_type", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["campaign_info_international"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.ds_dbt.campaign_info_international"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "../../docs/compiled/ds_dbt/models/campaign_info/schema.yml/schema_test/not_null_campaign_info_international_campaign_action_type.sql", "deferred": false, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom \"quasar_prod_warehouse\".\"public\".\"campaign_info_international\"\nwhere campaign_action_type is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom \"quasar_prod_warehouse\".\"public\".\"campaign_info_international\"\nwhere campaign_action_type is null\n\n\n", "column_name": "campaign_action_type"}, "error": null, "status": null, "execution_time": 0.012934446334838867, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-02-23T21:28:55.031388Z", "completed_at": "2021-02-23T21:28:55.043277Z"}, {"name": "execute", "started_at": "2021-02-23T21:28:55.043584Z", "completed_at": "2021-02-23T21:28:55.043591Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "campaign_cause_type", "model": "{{ ref('campaign_info_international') }}"}}, "compiled": true, "database": "quasar_prod_warehouse", "schema": "public", "fqn": ["ds_dbt", "schema_test", "not_null_campaign_info_international_campaign_cause_type"], "unique_id": "test.ds_dbt.not_null_campaign_info_international_campaign_cause_type", "package_name": "ds_dbt", "root_path": "/home/runner/work/quasar/quasar/quasar/dbt", "path": "schema_test/not_null_campaign_info_international_campaign_cause_type.sql", "original_file_path": "models/campaign_info/schema.yml", "name": "not_null_campaign_info_international_campaign_cause_type", "resource_type": "test", "alias": "not_null_campaign_info_international_campaign_cause_type", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["campaign_info_international"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.ds_dbt.campaign_info_international"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "../../docs/compiled/ds_dbt/models/campaign_info/schema.yml/schema_test/not_null_campaign_info_international_campaign_cause_type.sql", "deferred": false, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom \"quasar_prod_warehouse\".\"public\".\"campaign_info_international\"\nwhere campaign_cause_type is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom \"quasar_prod_warehouse\".\"public\".\"campaign_info_international\"\nwhere campaign_cause_type is null\n\n\n", "column_name": "campaign_cause_type"}, "error": null, "status": null, "execution_time": 0.012653827667236328, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-02-23T21:28:55.044694Z", "completed_at": "2021-02-23T21:28:55.056327Z"}, {"name": "execute", "started_at": "2021-02-23T21:28:55.056622Z", "completed_at": "2021-02-23T21:28:55.056629Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "campaign_created_date", "model": "{{ ref('campaign_info_international') }}"}}, "compiled": true, "database": "quasar_prod_warehouse", "schema": "public", "fqn": ["ds_dbt", "schema_test", "not_null_campaign_info_international_campaign_created_date"], "unique_id": "test.ds_dbt.not_null_campaign_info_international_campaign_created_date", "package_name": "ds_dbt", "root_path": "/home/runner/work/quasar/quasar/quasar/dbt", "path": "schema_test/not_null_campaign_info_international_campaign_created_date.sql", "original_file_path": "models/campaign_info/schema.yml", "name": "not_null_campaign_info_international_campaign_created_date", "resource_type": "test", "alias": "not_null_campaign_info_international_campaign_created_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["campaign_info_international"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.ds_dbt.campaign_info_international"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "../../docs/compiled/ds_dbt/models/campaign_info/schema.yml/schema_test/not_null_campaign_info_international_campaign_created_date.sql", "deferred": false, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom \"quasar_prod_warehouse\".\"public\".\"campaign_info_international\"\nwhere campaign_created_date is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom \"quasar_prod_warehouse\".\"public\".\"campaign_info_international\"\nwhere campaign_created_date is null\n\n\n", "column_name": "campaign_created_date"}, "error": null, "status": null, "execution_time": 0.014818191528320312, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-02-23T21:28:55.057901Z", "completed_at": "2021-02-23T21:28:55.071602Z"}, {"name": "execute", "started_at": "2021-02-23T21:28:55.071941Z", "completed_at": "2021-02-23T21:28:55.071950Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "campaign_cta", "model": "{{ ref('campaign_info_international') }}"}}, "compiled": true, "database": "quasar_prod_warehouse", "schema": "public", "fqn": ["ds_dbt", "schema_test", "not_null_campaign_info_international_campaign_cta"], "unique_id": "test.ds_dbt.not_null_campaign_info_international_campaign_cta", "package_name": "ds_dbt", "root_path": "/home/runner/work/quasar/quasar/quasar/dbt", "path": "schema_test/not_null_campaign_info_international_campaign_cta.sql", "original_file_path": "models/campaign_info/schema.yml", "name": "not_null_campaign_info_international_campaign_cta", "resource_type": "test", "alias": "not_null_campaign_info_international_campaign_cta", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["campaign_info_international"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.ds_dbt.campaign_info_international"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "../../docs/compiled/ds_dbt/models/campaign_info/schema.yml/schema_test/not_null_campaign_info_international_campaign_cta.sql", "deferred": false, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom \"quasar_prod_warehouse\".\"public\".\"campaign_info_international\"\nwhere campaign_cta is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom \"quasar_prod_warehouse\".\"public\".\"campaign_info_international\"\nwhere campaign_cta is null\n\n\n", "column_name": "campaign_cta"}, "error": null, "status": null, "execution_time": 0.01241302490234375, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-02-23T21:28:55.073261Z", "completed_at": "2021-02-23T21:28:55.084629Z"}, {"name": "execute", "started_at": "2021-02-23T21:28:55.084953Z", "completed_at": "2021-02-23T21:28:55.084959Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "campaign_id", "model": "{{ ref('campaign_info_international') }}"}}, "compiled": true, "database": "quasar_prod_warehouse", "schema": "public", "fqn": ["ds_dbt", "schema_test", "not_null_campaign_info_international_campaign_id"], "unique_id": "test.ds_dbt.not_null_campaign_info_international_campaign_id", "package_name": "ds_dbt", "root_path": "/home/runner/work/quasar/quasar/quasar/dbt", "path": "schema_test/not_null_campaign_info_international_campaign_id.sql", "original_file_path": "models/campaign_info/schema.yml", "name": "not_null_campaign_info_international_campaign_id", "resource_type": "test", "alias": "not_null_campaign_info_international_campaign_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["campaign_info_international"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.ds_dbt.campaign_info_international"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "../../docs/compiled/ds_dbt/models/campaign_info/schema.yml/schema_test/not_null_campaign_info_international_campaign_id.sql", "deferred": false, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom \"quasar_prod_warehouse\".\"public\".\"campaign_info_international\"\nwhere campaign_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom \"quasar_prod_warehouse\".\"public\".\"campaign_info_international\"\nwhere campaign_id is null\n\n\n", "column_name": "campaign_id"}, "error": null, "status": null, "execution_time": 0.012109518051147461, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-02-23T21:28:55.086089Z", "completed_at": "2021-02-23T21:28:55.097077Z"}, {"name": "execute", "started_at": "2021-02-23T21:28:55.097378Z", "completed_at": "2021-02-23T21:28:55.097385Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "campaign_node_id", "model": "{{ ref('campaign_info_international') }}"}}, "compiled": true, "database": "quasar_prod_warehouse", "schema": "public", "fqn": ["ds_dbt", "schema_test", "not_null_campaign_info_international_campaign_node_id"], "unique_id": "test.ds_dbt.not_null_campaign_info_international_campaign_node_id", "package_name": "ds_dbt", "root_path": "/home/runner/work/quasar/quasar/quasar/dbt", "path": "schema_test/not_null_campaign_info_international_campaign_node_id.sql", "original_file_path": "models/campaign_info/schema.yml", "name": "not_null_campaign_info_international_campaign_node_id", "resource_type": "test", "alias": "not_null_campaign_info_international_campaign_node_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["campaign_info_international"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.ds_dbt.campaign_info_international"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "../../docs/compiled/ds_dbt/models/campaign_info/schema.yml/schema_test/not_null_campaign_info_international_campaign_node_id.sql", "deferred": false, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom \"quasar_prod_warehouse\".\"public\".\"campaign_info_international\"\nwhere campaign_node_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom \"quasar_prod_warehouse\".\"public\".\"campaign_info_international\"\nwhere campaign_node_id is null\n\n\n", "column_name": "campaign_node_id"}, "error": null, "status": null, "execution_time": 0.012376785278320312, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-02-23T21:28:55.098736Z", "completed_at": "2021-02-23T21:28:55.110071Z"}, {"name": "execute", "started_at": "2021-02-23T21:28:55.110346Z", "completed_at": "2021-02-23T21:28:55.110353Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "campaign_node_id_title", "model": "{{ ref('campaign_info_international') }}"}}, "compiled": true, "database": "quasar_prod_warehouse", "schema": "public", "fqn": ["ds_dbt", "schema_test", "not_null_campaign_info_international_campaign_node_id_title"], "unique_id": "test.ds_dbt.not_null_campaign_info_international_campaign_node_id_title", "package_name": "ds_dbt", "root_path": "/home/runner/work/quasar/quasar/quasar/dbt", "path": "schema_test/not_null_campaign_info_international_campaign_node_id_title.sql", "original_file_path": "models/campaign_info/schema.yml", "name": "not_null_campaign_info_international_campaign_node_id_title", "resource_type": "test", "alias": "not_null_campaign_info_international_campaign_node_id_title", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["campaign_info_international"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.ds_dbt.campaign_info_international"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "../../docs/compiled/ds_dbt/models/campaign_info/schema.yml/schema_test/not_null_campaign_info_international_campaign_node_id_title.sql", "deferred": false, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom \"quasar_prod_warehouse\".\"public\".\"campaign_info_international\"\nwhere campaign_node_id_title is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom \"quasar_prod_warehouse\".\"public\".\"campaign_info_international\"\nwhere campaign_node_id_title is null\n\n\n", "column_name": "campaign_node_id_title"}, "error": null, "status": null, "execution_time": 0.012391805648803711, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-02-23T21:28:55.111602Z", "completed_at": "2021-02-23T21:28:55.122885Z"}, {"name": "execute", "started_at": "2021-02-23T21:28:55.123180Z", "completed_at": "2021-02-23T21:28:55.123187Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "campaign_noun", "model": "{{ ref('campaign_info_international') }}"}}, "compiled": true, "database": "quasar_prod_warehouse", "schema": "public", "fqn": ["ds_dbt", "schema_test", "not_null_campaign_info_international_campaign_noun"], "unique_id": "test.ds_dbt.not_null_campaign_info_international_campaign_noun", "package_name": "ds_dbt", "root_path": "/home/runner/work/quasar/quasar/quasar/dbt", "path": "schema_test/not_null_campaign_info_international_campaign_noun.sql", "original_file_path": "models/campaign_info/schema.yml", "name": "not_null_campaign_info_international_campaign_noun", "resource_type": "test", "alias": "not_null_campaign_info_international_campaign_noun", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["campaign_info_international"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.ds_dbt.campaign_info_international"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "../../docs/compiled/ds_dbt/models/campaign_info/schema.yml/schema_test/not_null_campaign_info_international_campaign_noun.sql", "deferred": false, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom \"quasar_prod_warehouse\".\"public\".\"campaign_info_international\"\nwhere campaign_noun is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom \"quasar_prod_warehouse\".\"public\".\"campaign_info_international\"\nwhere campaign_noun is null\n\n\n", "column_name": "campaign_noun"}, "error": null, "status": null, "execution_time": 0.01366877555847168, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-02-23T21:28:55.124424Z", "completed_at": "2021-02-23T21:28:55.136865Z"}, {"name": "execute", "started_at": "2021-02-23T21:28:55.137213Z", "completed_at": "2021-02-23T21:28:55.137220Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "campaign_run_end_date", "model": "{{ ref('campaign_info_international') }}"}}, "compiled": true, "database": "quasar_prod_warehouse", "schema": "public", "fqn": ["ds_dbt", "schema_test", "not_null_campaign_info_international_campaign_run_end_date"], "unique_id": "test.ds_dbt.not_null_campaign_info_international_campaign_run_end_date", "package_name": "ds_dbt", "root_path": "/home/runner/work/quasar/quasar/quasar/dbt", "path": "schema_test/not_null_campaign_info_international_campaign_run_end_date.sql", "original_file_path": "models/campaign_info/schema.yml", "name": "not_null_campaign_info_international_campaign_run_end_date", "resource_type": "test", "alias": "not_null_campaign_info_international_campaign_run_end_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["campaign_info_international"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.ds_dbt.campaign_info_international"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "../../docs/compiled/ds_dbt/models/campaign_info/schema.yml/schema_test/not_null_campaign_info_international_campaign_run_end_date.sql", "deferred": false, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom \"quasar_prod_warehouse\".\"public\".\"campaign_info_international\"\nwhere campaign_run_end_date is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom \"quasar_prod_warehouse\".\"public\".\"campaign_info_international\"\nwhere campaign_run_end_date is null\n\n\n", "column_name": "campaign_run_end_date"}, "error": null, "status": null, "execution_time": 0.012146472930908203, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-02-23T21:28:55.138446Z", "completed_at": "2021-02-23T21:28:55.149534Z"}, {"name": "execute", "started_at": "2021-02-23T21:28:55.149871Z", "completed_at": "2021-02-23T21:28:55.149878Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "campaign_run_id", "model": "{{ ref('campaign_info_international') }}"}}, "compiled": true, "database": "quasar_prod_warehouse", "schema": "public", "fqn": ["ds_dbt", "schema_test", "not_null_campaign_info_international_campaign_run_id"], "unique_id": "test.ds_dbt.not_null_campaign_info_international_campaign_run_id", "package_name": "ds_dbt", "root_path": "/home/runner/work/quasar/quasar/quasar/dbt", "path": "schema_test/not_null_campaign_info_international_campaign_run_id.sql", "original_file_path": "models/campaign_info/schema.yml", "name": "not_null_campaign_info_international_campaign_run_id", "resource_type": "test", "alias": "not_null_campaign_info_international_campaign_run_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["campaign_info_international"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.ds_dbt.campaign_info_international"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "../../docs/compiled/ds_dbt/models/campaign_info/schema.yml/schema_test/not_null_campaign_info_international_campaign_run_id.sql", "deferred": false, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom \"quasar_prod_warehouse\".\"public\".\"campaign_info_international\"\nwhere campaign_run_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom \"quasar_prod_warehouse\".\"public\".\"campaign_info_international\"\nwhere campaign_run_id is null\n\n\n", "column_name": "campaign_run_id"}, "error": null, "status": null, "execution_time": 0.012186288833618164, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-02-23T21:28:55.151145Z", "completed_at": "2021-02-23T21:28:55.162245Z"}, {"name": "execute", "started_at": "2021-02-23T21:28:55.162561Z", "completed_at": "2021-02-23T21:28:55.162567Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "campaign_run_id_title", "model": "{{ ref('campaign_info_international') }}"}}, "compiled": true, "database": "quasar_prod_warehouse", "schema": "public", "fqn": ["ds_dbt", "schema_test", "not_null_campaign_info_international_campaign_run_id_title"], "unique_id": "test.ds_dbt.not_null_campaign_info_international_campaign_run_id_title", "package_name": "ds_dbt", "root_path": "/home/runner/work/quasar/quasar/quasar/dbt", "path": "schema_test/not_null_campaign_info_international_campaign_run_id_title.sql", "original_file_path": "models/campaign_info/schema.yml", "name": "not_null_campaign_info_international_campaign_run_id_title", "resource_type": "test", "alias": "not_null_campaign_info_international_campaign_run_id_title", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["campaign_info_international"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.ds_dbt.campaign_info_international"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "../../docs/compiled/ds_dbt/models/campaign_info/schema.yml/schema_test/not_null_campaign_info_international_campaign_run_id_title.sql", "deferred": false, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom \"quasar_prod_warehouse\".\"public\".\"campaign_info_international\"\nwhere campaign_run_id_title is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom \"quasar_prod_warehouse\".\"public\".\"campaign_info_international\"\nwhere campaign_run_id_title is null\n\n\n", "column_name": "campaign_run_id_title"}, "error": null, "status": null, "execution_time": 0.012541532516479492, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-02-23T21:28:55.163734Z", "completed_at": "2021-02-23T21:28:55.175196Z"}, {"name": "execute", "started_at": "2021-02-23T21:28:55.175506Z", "completed_at": "2021-02-23T21:28:55.175513Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "campaign_run_start_date", "model": "{{ ref('campaign_info_international') }}"}}, "compiled": true, "database": "quasar_prod_warehouse", "schema": "public", "fqn": ["ds_dbt", "schema_test", "not_null_campaign_info_international_campaign_run_start_date"], "unique_id": "test.ds_dbt.not_null_campaign_info_international_campaign_run_start_date", "package_name": "ds_dbt", "root_path": "/home/runner/work/quasar/quasar/quasar/dbt", "path": "schema_test/not_null_campaign_info_international_campaign_run_start_date.sql", "original_file_path": "models/campaign_info/schema.yml", "name": "not_null_campaign_info_international_campaign_run_start_date", "resource_type": "test", "alias": "not_null_campaign_info_international_campaign_run_start_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["campaign_info_international"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.ds_dbt.campaign_info_international"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "../../docs/compiled/ds_dbt/models/campaign_info/schema.yml/schema_test/not_null_campaign_info_international_campaign_run_start_date.sql", "deferred": false, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom \"quasar_prod_warehouse\".\"public\".\"campaign_info_international\"\nwhere campaign_run_start_date is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom \"quasar_prod_warehouse\".\"public\".\"campaign_info_international\"\nwhere campaign_run_start_date is null\n\n\n", "column_name": "campaign_run_start_date"}, "error": null, "status": null, "execution_time": 0.012637853622436523, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-02-23T21:28:55.177261Z", "completed_at": "2021-02-23T21:28:55.188815Z"}, {"name": "execute", "started_at": "2021-02-23T21:28:55.189140Z", "completed_at": "2021-02-23T21:28:55.189147Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "campaign_type", "model": "{{ ref('campaign_info_international') }}"}}, "compiled": true, "database": "quasar_prod_warehouse", "schema": "public", "fqn": ["ds_dbt", "schema_test", "not_null_campaign_info_international_campaign_type"], "unique_id": "test.ds_dbt.not_null_campaign_info_international_campaign_type", "package_name": "ds_dbt", "root_path": "/home/runner/work/quasar/quasar/quasar/dbt", "path": "schema_test/not_null_campaign_info_international_campaign_type.sql", "original_file_path": "models/campaign_info/schema.yml", "name": "not_null_campaign_info_international_campaign_type", "resource_type": "test", "alias": "not_null_campaign_info_international_campaign_type", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["campaign_info_international"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.ds_dbt.campaign_info_international"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "../../docs/compiled/ds_dbt/models/campaign_info/schema.yml/schema_test/not_null_campaign_info_international_campaign_type.sql", "deferred": false, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom \"quasar_prod_warehouse\".\"public\".\"campaign_info_international\"\nwhere campaign_type is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom \"quasar_prod_warehouse\".\"public\".\"campaign_info_international\"\nwhere campaign_type is null\n\n\n", "column_name": "campaign_type"}, "error": null, "status": null, "execution_time": 0.012582540512084961, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-02-23T21:28:55.190439Z", "completed_at": "2021-02-23T21:28:55.201929Z"}, {"name": "execute", "started_at": "2021-02-23T21:28:55.202275Z", "completed_at": "2021-02-23T21:28:55.202282Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "campaign_verb", "model": "{{ ref('campaign_info_international') }}"}}, "compiled": true, "database": "quasar_prod_warehouse", "schema": "public", "fqn": ["ds_dbt", "schema_test", "not_null_campaign_info_international_campaign_verb"], "unique_id": "test.ds_dbt.not_null_campaign_info_international_campaign_verb", "package_name": "ds_dbt", "root_path": "/home/runner/work/quasar/quasar/quasar/dbt", "path": "schema_test/not_null_campaign_info_international_campaign_verb.sql", "original_file_path": "models/campaign_info/schema.yml", "name": "not_null_campaign_info_international_campaign_verb", "resource_type": "test", "alias": "not_null_campaign_info_international_campaign_verb", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["campaign_info_international"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.ds_dbt.campaign_info_international"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "../../docs/compiled/ds_dbt/models/campaign_info/schema.yml/schema_test/not_null_campaign_info_international_campaign_verb.sql", "deferred": false, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom \"quasar_prod_warehouse\".\"public\".\"campaign_info_international\"\nwhere campaign_verb is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom \"quasar_prod_warehouse\".\"public\".\"campaign_info_international\"\nwhere campaign_verb is null\n\n\n", "column_name": "campaign_verb"}, "error": null, "status": null, "execution_time": 0.013240814208984375, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-02-23T21:28:55.203395Z", "completed_at": "2021-02-23T21:28:55.215505Z"}, {"name": "execute", "started_at": "2021-02-23T21:28:55.215857Z", "completed_at": "2021-02-23T21:28:55.215866Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "campaign_id", "model": "{{ ref('campaign_info_international') }}"}}, "compiled": true, "database": "quasar_prod_warehouse", "schema": "public", "fqn": ["ds_dbt", "schema_test", "unique_campaign_info_international_campaign_id"], "unique_id": "test.ds_dbt.unique_campaign_info_international_campaign_id", "package_name": "ds_dbt", "root_path": "/home/runner/work/quasar/quasar/quasar/dbt", "path": "schema_test/unique_campaign_info_international_campaign_id.sql", "original_file_path": "models/campaign_info/schema.yml", "name": "unique_campaign_info_international_campaign_id", "resource_type": "test", "alias": "unique_campaign_info_international_campaign_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["campaign_info_international"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.ds_dbt.campaign_info_international"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "../../docs/compiled/ds_dbt/models/campaign_info/schema.yml/schema_test/unique_campaign_info_international_campaign_id.sql", "deferred": false, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        campaign_id\n\n    from \"quasar_prod_warehouse\".\"public\".\"campaign_info_international\"\n    where campaign_id is not null\n    group by campaign_id\n    having count(*) > 1\n\n) validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        campaign_id\n\n    from \"quasar_prod_warehouse\".\"public\".\"campaign_info_international\"\n    where campaign_id is not null\n    group by campaign_id\n    having count(*) > 1\n\n) validation_errors\n\n\n", "column_name": "campaign_id"}, "error": null, "status": null, "execution_time": 0.012703657150268555, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-02-23T21:28:55.217166Z", "completed_at": "2021-02-23T21:28:55.228790Z"}, {"name": "execute", "started_at": "2021-02-23T21:28:55.229111Z", "completed_at": "2021-02-23T21:28:55.229118Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "campaign_node_id", "model": "{{ ref('campaign_info_international') }}"}}, "compiled": true, "database": "quasar_prod_warehouse", "schema": "public", "fqn": ["ds_dbt", "schema_test", "unique_campaign_info_international_campaign_node_id"], "unique_id": "test.ds_dbt.unique_campaign_info_international_campaign_node_id", "package_name": "ds_dbt", "root_path": "/home/runner/work/quasar/quasar/quasar/dbt", "path": "schema_test/unique_campaign_info_international_campaign_node_id.sql", "original_file_path": "models/campaign_info/schema.yml", "name": "unique_campaign_info_international_campaign_node_id", "resource_type": "test", "alias": "unique_campaign_info_international_campaign_node_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["campaign_info_international"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.ds_dbt.campaign_info_international"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "../../docs/compiled/ds_dbt/models/campaign_info/schema.yml/schema_test/unique_campaign_info_international_campaign_node_id.sql", "deferred": false, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        campaign_node_id\n\n    from \"quasar_prod_warehouse\".\"public\".\"campaign_info_international\"\n    where campaign_node_id is not null\n    group by campaign_node_id\n    having count(*) > 1\n\n) validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        campaign_node_id\n\n    from \"quasar_prod_warehouse\".\"public\".\"campaign_info_international\"\n    where campaign_node_id is not null\n    group by campaign_node_id\n    having count(*) > 1\n\n) validation_errors\n\n\n", "column_name": "campaign_node_id"}, "error": null, "status": null, "execution_time": 0.013065814971923828, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-02-23T21:28:55.230290Z", "completed_at": "2021-02-23T21:28:55.242276Z"}, {"name": "execute", "started_at": "2021-02-23T21:28:55.242617Z", "completed_at": "2021-02-23T21:28:55.242624Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "campaign_noun", "model": "{{ ref('campaign_info_international') }}"}}, "compiled": true, "database": "quasar_prod_warehouse", "schema": "public", "fqn": ["ds_dbt", "schema_test", "unique_campaign_info_international_campaign_noun"], "unique_id": "test.ds_dbt.unique_campaign_info_international_campaign_noun", "package_name": "ds_dbt", "root_path": "/home/runner/work/quasar/quasar/quasar/dbt", "path": "schema_test/unique_campaign_info_international_campaign_noun.sql", "original_file_path": "models/campaign_info/schema.yml", "name": "unique_campaign_info_international_campaign_noun", "resource_type": "test", "alias": "unique_campaign_info_international_campaign_noun", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["campaign_info_international"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.ds_dbt.campaign_info_international"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "../../docs/compiled/ds_dbt/models/campaign_info/schema.yml/schema_test/unique_campaign_info_international_campaign_noun.sql", "deferred": false, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        campaign_noun\n\n    from \"quasar_prod_warehouse\".\"public\".\"campaign_info_international\"\n    where campaign_noun is not null\n    group by campaign_noun\n    having count(*) > 1\n\n) validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        campaign_noun\n\n    from \"quasar_prod_warehouse\".\"public\".\"campaign_info_international\"\n    where campaign_noun is not null\n    group by campaign_noun\n    having count(*) > 1\n\n) validation_errors\n\n\n", "column_name": "campaign_noun"}, "error": null, "status": null, "execution_time": 0.01276087760925293, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-02-23T21:28:55.243777Z", "completed_at": "2021-02-23T21:28:55.255408Z"}, {"name": "execute", "started_at": "2021-02-23T21:28:55.255750Z", "completed_at": "2021-02-23T21:28:55.255757Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "campaign_run_id", "model": "{{ ref('campaign_info_international') }}"}}, "compiled": true, "database": "quasar_prod_warehouse", "schema": "public", "fqn": ["ds_dbt", "schema_test", "unique_campaign_info_international_campaign_run_id"], "unique_id": "test.ds_dbt.unique_campaign_info_international_campaign_run_id", "package_name": "ds_dbt", "root_path": "/home/runner/work/quasar/quasar/quasar/dbt", "path": "schema_test/unique_campaign_info_international_campaign_run_id.sql", "original_file_path": "models/campaign_info/schema.yml", "name": "unique_campaign_info_international_campaign_run_id", "resource_type": "test", "alias": "unique_campaign_info_international_campaign_run_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["campaign_info_international"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.ds_dbt.campaign_info_international"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "../../docs/compiled/ds_dbt/models/campaign_info/schema.yml/schema_test/unique_campaign_info_international_campaign_run_id.sql", "deferred": false, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        campaign_run_id\n\n    from \"quasar_prod_warehouse\".\"public\".\"campaign_info_international\"\n    where campaign_run_id is not null\n    group by campaign_run_id\n    having count(*) > 1\n\n) validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        campaign_run_id\n\n    from \"quasar_prod_warehouse\".\"public\".\"campaign_info_international\"\n    where campaign_run_id is not null\n    group by campaign_run_id\n    having count(*) > 1\n\n) validation_errors\n\n\n", "column_name": "campaign_run_id"}, "error": null, "status": null, "execution_time": 0.011884927749633789, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-02-23T21:28:55.257043Z", "completed_at": "2021-02-23T21:28:55.267837Z"}, {"name": "execute", "started_at": "2021-02-23T21:28:55.268156Z", "completed_at": "2021-02-23T21:28:55.268163Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "campaign_run_start_date", "model": "{{ ref('campaign_info_international') }}"}}, "compiled": true, "database": "quasar_prod_warehouse", "schema": "public", "fqn": ["ds_dbt", "schema_test", "unique_campaign_info_international_campaign_run_start_date"], "unique_id": "test.ds_dbt.unique_campaign_info_international_campaign_run_start_date", "package_name": "ds_dbt", "root_path": "/home/runner/work/quasar/quasar/quasar/dbt", "path": "schema_test/unique_campaign_info_international_campaign_run_start_date.sql", "original_file_path": "models/campaign_info/schema.yml", "name": "unique_campaign_info_international_campaign_run_start_date", "resource_type": "test", "alias": "unique_campaign_info_international_campaign_run_start_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["campaign_info_international"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.ds_dbt.campaign_info_international"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "../../docs/compiled/ds_dbt/models/campaign_info/schema.yml/schema_test/unique_campaign_info_international_campaign_run_start_date.sql", "deferred": false, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        campaign_run_start_date\n\n    from \"quasar_prod_warehouse\".\"public\".\"campaign_info_international\"\n    where campaign_run_start_date is not null\n    group by campaign_run_start_date\n    having count(*) > 1\n\n) validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        campaign_run_start_date\n\n    from \"quasar_prod_warehouse\".\"public\".\"campaign_info_international\"\n    where campaign_run_start_date is not null\n    group by campaign_run_start_date\n    having count(*) > 1\n\n) validation_errors\n\n\n", "column_name": "campaign_run_start_date"}, "error": null, "status": null, "execution_time": 0.012293815612792969, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-02-23T21:28:55.269480Z", "completed_at": "2021-02-23T21:28:55.280666Z"}, {"name": "execute", "started_at": "2021-02-23T21:28:55.280959Z", "completed_at": "2021-02-23T21:28:55.280965Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "SELECT\n\tu.northstar_id,\n\tu.created_at,\n\tu.club_id,\n\tumax.max_last_auth AS last_logged_in,\n\tumax.max_last_access AS last_accessed,\n\tumax.max_last_message AS last_messaged_at,\n\tu.drupal_id AS drupal_uid,\n\tu.\"source\",\n\tu.email,\n\tu.facebook_id,\n\tu.mobile,\n\tCASE WHEN\n\t\tu.birthdate < '1900-01-01' OR \n\t\tu.birthdate > (date('now') - INTERVAL '10 years') \n\t\tTHEN NULL ELSE u.birthdate END AS birthdate,\n\tu.first_name,\n\tu.last_name,\n\tu.voter_registration_status,\n\tu.addr_street_1 AS address_street_1,\n\tu.addr_street_2 AS address_street_2,\n\tu.addr_city AS city,\n\tu.addr_state AS state,\n\tu.addr_zip AS zipcode,\n\tu.country,\n\tu.\"language\",\n\temail_status.event_type AS cio_status,\n\temail_status.\"timestamp\" AS cio_status_timestamp,\n\tu.sms_status,\n\tu.source_detail,\n\tsubstring(u.source_detail from '(?<=utm_medium\\:)(\\w*)') AS utm_medium,\n\tsubstring(u.source_detail from '(?<=utm_source\\:)(\\w*)') AS utm_source,\n\tsubstring(u.source_detail from '(?<=utm_campaign\\:)(\\w*)') AS utm_campaign,\n\tsubstring(u.source_detail from '(?<=contentful_id\\:)(\\w*)') AS contentful_id,\n\t(u.feature_flags #>> '{badges}')::boolean as badges,\n\t(u.feature_flags #>> '{refer-friends}')::boolean as refer_friends,\n\t(u.feature_flags #>> '{refer-friends-scholarship}')::boolean as refer_friends_scholarship,\n\tCASE WHEN\n\t\tu.sms_status in ('active','less','pending') OR\n\t\temail_status.event_type = 'customer_subscribed' \n\t\tTHEN TRUE ELSE FALSE END AS subscribed_member,\n\tumax.max_update AS last_updated_at,\n\tu.school_id,\n\t(select STRING_AGG(cause[1], ',') from regexp_matches((u.causes)::TEXT, '([a-zA-Z][^\\s,{}\"]*)', 'g') AS cause) AS causes,\n\tu.referrer_user_id\nFROM {{ ref('northstar_users_deduped') }} u\nINNER JOIN\n\t(SELECT\n\t\tutemp.northstar_id,\n\t\tmax(utemp.updated_at) AS max_update,\n\t\tmax(utemp.last_accessed_at) AS max_last_access,\n\t\tmax(utemp.last_authenticated_at) AS max_last_auth,\n\t\tmax(utemp.last_messaged_at) AS max_last_message\n\tFROM {{ ref('northstar_users_deduped') }} utemp\n\tGROUP BY utemp.northstar_id) umax ON umax.northstar_id = u.northstar_id AND umax.max_update = u.updated_at\nLEFT JOIN {{ ref('cio_latest_status') }} email_status ON email_status.customer_id = u.northstar_id\nWHERE\n\t(u.\"source\" IS DISTINCT FROM 'runscope'\n\tAND u.\"source\" IS DISTINCT FROM 'runscope-client'\n\tAND u.email NOT SIMILAR TO '%runscope%@%'\n\tAND u.email NOT SIMILAR TO '%@%dosomething%') OR u.email IS NULL", "compiled": true, "database": "quasar_prod_warehouse", "schema": "public", "fqn": ["ds_dbt", "users_table", "users"], "unique_id": "model.ds_dbt.users", "package_name": "ds_dbt", "root_path": "/home/runner/work/quasar/quasar/quasar/dbt", "path": "users_table/users.sql", "original_file_path": "models/users_table/users.sql", "name": "users", "resource_type": "model", "alias": "users", "checksum": {"name": "sha256", "checksum": "ee941c05c19b9c4a25f8defaaac7e3a0c5f0696adfa81fa76a3da4567154ddfe"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [{"sql": "CREATE UNIQUE INDEX {{ get_index_name(this, 'unique_northstar_id_created_at_email_mobile_source') }} (northstar_id, created_at, email, mobile, source)", "transaction": true, "index": null}, {"sql": "{{ grant_select_to(this, ['dsanalyst', 'looker', 'public']) }}", "transaction": true, "index": null}], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": "users", "schema": null, "database": null, "tags": ["users_table"], "full_refresh": null}, "tags": ["users_table"], "refs": [["northstar_users_deduped"], ["northstar_users_deduped"], ["cio_latest_status"]], "sources": [], "depends_on": {"macros": ["macro.ds_dbt.get_index_name", "macro.ds_dbt.grant_select_to"], "nodes": ["model.ds_dbt.northstar_users_deduped", "model.ds_dbt.northstar_users_deduped", "model.ds_dbt.cio_latest_status"]}, "description": "A table containing aggregated user data.", "columns": {"northstar_id": {"name": "northstar_id", "description": "The Northstar ID of the user who generated the event.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "When the item was created in UTC (eg. 2018-01-01 12:00:00)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "club_id": {"name": "club_id", "description": "Club id", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_logged_in": {"name": "last_logged_in", "description": "Date time in UTC when user last logged in to Northstar", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_accessed": {"name": "last_accessed", "description": "Date time in UTC when user last access the website", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_messaged_at": {"name": "last_messaged_at", "description": "Date time in UTC when user was last sent a message via SMS or email", "meta": {}, "data_type": null, "quote": null, "tags": []}, "source": {"name": "source", "description": "Source of the URL (e.g. SMS, web), origin of the post (e.g. phoenix-web, phoenix-ashes, sms), or source where user was acquired. (e.g. sms, phoenix-next)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "email": {"name": "email", "description": "Email address of the user.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "facebook_id": {"name": "facebook_id", "description": "User's facebook id", "meta": {}, "data_type": null, "quote": null, "tags": []}, "mobile": {"name": "mobile", "description": "Users's mobile phone number", "meta": {}, "data_type": null, "quote": null, "tags": []}, "birthdate": {"name": "birthdate", "description": "User's birthdate", "meta": {}, "data_type": null, "quote": null, "tags": []}, "first_name": {"name": "first_name", "description": "User's first name", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_name": {"name": "last_name", "description": "User's last name", "meta": {}, "data_type": null, "quote": null, "tags": []}, "voter_registration_status": {"name": "voter_registration_status", "description": "User's registration status. (e.g. registration_complete, confirmed, uncertain)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "address_street_1": {"name": "address_street_1", "description": "First line of user's street address", "meta": {}, "data_type": null, "quote": null, "tags": []}, "address_street_2": {"name": "address_street_2", "description": "Second line of user's street address", "meta": {}, "data_type": null, "quote": null, "tags": []}, "city": {"name": "city", "description": "User's city", "meta": {}, "data_type": null, "quote": null, "tags": []}, "state": {"name": "state", "description": "User's state", "meta": {}, "data_type": null, "quote": null, "tags": []}, "zipcode": {"name": "zipcode", "description": "Postal code where the action takes place", "meta": {}, "data_type": null, "quote": null, "tags": []}, "country": {"name": "country", "description": "User's country", "meta": {}, "data_type": null, "quote": null, "tags": []}, "language": {"name": "language", "description": "User's language", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cio_status": {"name": "cio_status", "description": "Status of user from CIO. (e.g. customer_subscribed, customer_unsubscribed)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cio_status_timestamp": {"name": "cio_status_timestamp", "description": "Timestamp when users's status was updated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sms_status": {"name": "sms_status", "description": "Current SMS status. (e.g. undeliverable, unknown)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "source_detail": {"name": "source_detail", "description": "Details of the origin of the user. (e.g. tell_a_friend, other, opt_in_path/197981)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_medium": {"name": "utm_medium", "description": "How the traffic got to the platform (eg. referral, CPC). Parameter passed by marketing team (would not be present for organic/ direct traffic)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_source": {"name": "utm_source", "description": "Tracks where the traffic is coming from. (eg. scholarship_listing, Facebook). Parameter passed by marketing team (would not be present for organic/ direct traffic)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_campaign": {"name": "utm_campaign", "description": "Tracks which campaign the traffic was generated by. Shows up in Google Analytics as Campaign Name (eg. editorial_newsletter). Parameter passed by marketing team (would not be present for organic/ direct traffic)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "badges": {"name": "badges", "description": "Whether the user has any badges.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "refer_friends": {"name": "refer_friends", "description": "Whether the user is a part of the refer a friend campaign.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "subscribed_member": {"name": "subscribed_member", "description": "Whether the user is subscribed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_updated_at": {"name": "last_updated_at", "description": "Timestamp when users's was updated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "school_id": {"name": "school_id", "description": "Unique identifier for the user's school. This info comes from the school finder.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/users_table/schema.yml", "build_path": "../../docs/compiled/ds_dbt/models/users_table/users.sql", "deferred": false, "compiled_sql": "SELECT\n\tu.northstar_id,\n\tu.created_at,\n\tu.club_id,\n\tumax.max_last_auth AS last_logged_in,\n\tumax.max_last_access AS last_accessed,\n\tumax.max_last_message AS last_messaged_at,\n\tu.drupal_id AS drupal_uid,\n\tu.\"source\",\n\tu.email,\n\tu.facebook_id,\n\tu.mobile,\n\tCASE WHEN\n\t\tu.birthdate < '1900-01-01' OR \n\t\tu.birthdate > (date('now') - INTERVAL '10 years') \n\t\tTHEN NULL ELSE u.birthdate END AS birthdate,\n\tu.first_name,\n\tu.last_name,\n\tu.voter_registration_status,\n\tu.addr_street_1 AS address_street_1,\n\tu.addr_street_2 AS address_street_2,\n\tu.addr_city AS city,\n\tu.addr_state AS state,\n\tu.addr_zip AS zipcode,\n\tu.country,\n\tu.\"language\",\n\temail_status.event_type AS cio_status,\n\temail_status.\"timestamp\" AS cio_status_timestamp,\n\tu.sms_status,\n\tu.source_detail,\n\tsubstring(u.source_detail from '(?<=utm_medium\\:)(\\w*)') AS utm_medium,\n\tsubstring(u.source_detail from '(?<=utm_source\\:)(\\w*)') AS utm_source,\n\tsubstring(u.source_detail from '(?<=utm_campaign\\:)(\\w*)') AS utm_campaign,\n\tsubstring(u.source_detail from '(?<=contentful_id\\:)(\\w*)') AS contentful_id,\n\t(u.feature_flags #>> '{badges}')::boolean as badges,\n\t(u.feature_flags #>> '{refer-friends}')::boolean as refer_friends,\n\t(u.feature_flags #>> '{refer-friends-scholarship}')::boolean as refer_friends_scholarship,\n\tCASE WHEN\n\t\tu.sms_status in ('active','less','pending') OR\n\t\temail_status.event_type = 'customer_subscribed' \n\t\tTHEN TRUE ELSE FALSE END AS subscribed_member,\n\tumax.max_update AS last_updated_at,\n\tu.school_id,\n\t(select STRING_AGG(cause[1], ',') from regexp_matches((u.causes)::TEXT, '([a-zA-Z][^\\s,{}\"]*)', 'g') AS cause) AS causes,\n\tu.referrer_user_id\nFROM \"quasar_prod_warehouse\".\"public\".\"northstar_users_deduped\" u\nINNER JOIN\n\t(SELECT\n\t\tutemp.northstar_id,\n\t\tmax(utemp.updated_at) AS max_update,\n\t\tmax(utemp.last_accessed_at) AS max_last_access,\n\t\tmax(utemp.last_authenticated_at) AS max_last_auth,\n\t\tmax(utemp.last_messaged_at) AS max_last_message\n\tFROM \"quasar_prod_warehouse\".\"public\".\"northstar_users_deduped\" utemp\n\tGROUP BY utemp.northstar_id) umax ON umax.northstar_id = u.northstar_id AND umax.max_update = u.updated_at\nLEFT JOIN \"quasar_prod_warehouse\".\"public\".\"cio_latest_status\" email_status ON email_status.customer_id = u.northstar_id\nWHERE\n\t(u.\"source\" IS DISTINCT FROM 'runscope'\n\tAND u.\"source\" IS DISTINCT FROM 'runscope-client'\n\tAND u.email NOT SIMILAR TO '%runscope%@%'\n\tAND u.email NOT SIMILAR TO '%@%dosomething%') OR u.email IS NULL", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "SELECT\n\tu.northstar_id,\n\tu.created_at,\n\tu.club_id,\n\tumax.max_last_auth AS last_logged_in,\n\tumax.max_last_access AS last_accessed,\n\tumax.max_last_message AS last_messaged_at,\n\tu.drupal_id AS drupal_uid,\n\tu.\"source\",\n\tu.email,\n\tu.facebook_id,\n\tu.mobile,\n\tCASE WHEN\n\t\tu.birthdate < '1900-01-01' OR \n\t\tu.birthdate > (date('now') - INTERVAL '10 years') \n\t\tTHEN NULL ELSE u.birthdate END AS birthdate,\n\tu.first_name,\n\tu.last_name,\n\tu.voter_registration_status,\n\tu.addr_street_1 AS address_street_1,\n\tu.addr_street_2 AS address_street_2,\n\tu.addr_city AS city,\n\tu.addr_state AS state,\n\tu.addr_zip AS zipcode,\n\tu.country,\n\tu.\"language\",\n\temail_status.event_type AS cio_status,\n\temail_status.\"timestamp\" AS cio_status_timestamp,\n\tu.sms_status,\n\tu.source_detail,\n\tsubstring(u.source_detail from '(?<=utm_medium\\:)(\\w*)') AS utm_medium,\n\tsubstring(u.source_detail from '(?<=utm_source\\:)(\\w*)') AS utm_source,\n\tsubstring(u.source_detail from '(?<=utm_campaign\\:)(\\w*)') AS utm_campaign,\n\tsubstring(u.source_detail from '(?<=contentful_id\\:)(\\w*)') AS contentful_id,\n\t(u.feature_flags #>> '{badges}')::boolean as badges,\n\t(u.feature_flags #>> '{refer-friends}')::boolean as refer_friends,\n\t(u.feature_flags #>> '{refer-friends-scholarship}')::boolean as refer_friends_scholarship,\n\tCASE WHEN\n\t\tu.sms_status in ('active','less','pending') OR\n\t\temail_status.event_type = 'customer_subscribed' \n\t\tTHEN TRUE ELSE FALSE END AS subscribed_member,\n\tumax.max_update AS last_updated_at,\n\tu.school_id,\n\t(select STRING_AGG(cause[1], ',') from regexp_matches((u.causes)::TEXT, '([a-zA-Z][^\\s,{}\"]*)', 'g') AS cause) AS causes,\n\tu.referrer_user_id\nFROM \"quasar_prod_warehouse\".\"public\".\"northstar_users_deduped\" u\nINNER JOIN\n\t(SELECT\n\t\tutemp.northstar_id,\n\t\tmax(utemp.updated_at) AS max_update,\n\t\tmax(utemp.last_accessed_at) AS max_last_access,\n\t\tmax(utemp.last_authenticated_at) AS max_last_auth,\n\t\tmax(utemp.last_messaged_at) AS max_last_message\n\tFROM \"quasar_prod_warehouse\".\"public\".\"northstar_users_deduped\" utemp\n\tGROUP BY utemp.northstar_id) umax ON umax.northstar_id = u.northstar_id AND umax.max_update = u.updated_at\nLEFT JOIN \"quasar_prod_warehouse\".\"public\".\"cio_latest_status\" email_status ON email_status.customer_id = u.northstar_id\nWHERE\n\t(u.\"source\" IS DISTINCT FROM 'runscope'\n\tAND u.\"source\" IS DISTINCT FROM 'runscope-client'\n\tAND u.email NOT SIMILAR TO '%runscope%@%'\n\tAND u.email NOT SIMILAR TO '%@%dosomething%') OR u.email IS NULL"}, "error": null, "status": null, "execution_time": 0.03595137596130371, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-02-23T21:28:55.282099Z", "completed_at": "2021-02-23T21:28:55.316892Z"}, {"name": "execute", "started_at": "2021-02-23T21:28:55.317240Z", "completed_at": "2021-02-23T21:28:55.317249Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "WITH first_rb AS (\n\tSELECT\n\t\tmin(id) AS post_id\n\tFROM\n\t\t{{ ref('posts') }} p\n\tWHERE\n\t\tp.is_reportback = 'true'\n\t\tAND p.is_accepted = 1\n\tGROUP BY\n\t\tp.northstar_id,\n\t\tp.campaign_id,\n\t\tp.signup_id,\n\t\tp.post_class,\n\t\tp.reportback_volume\n\tUNION\n\tDISTINCT\n\tSELECT\n\t\tid\n\tFROM\n\t\t{{ ref('posts') }} p\n\tWHERE\n\t\tp.is_reportback = 'true'\n\t\tAND p.is_accepted = 1\n\t\tAND TYPE = 'voter-reg'\n)\nSELECT\n\tpd.\"action\" AS post_action,\n\tpd.campaign_id,\n\tpd.club_id,\n\tpd.group_id,\n\tpd.id AS post_id,\n\tpd.is_civic_action,\n\tpd.is_scholarship_entry,\n\tpd.location,\n\tpd.northstar_id,\n\tpd.\"type\" AS post_type,\n\tpd.post_class,\n\tpd.signup_id,\n\tpd.source AS post_source,\n\tpd.source_bucket AS post_source_bucket,\n\tpd.status AS post_status,\n\tpd.hours_spent as hours_spent,\n\tpd.created_at AS post_created_at,\n\tpd.postal_code,\n\tCASE\n\t\tWHEN (\n\t\t\tpd.post_class ILIKE '%vote%'\n\t\t\tAND pd.status = 'confirmed'\n\t\t) THEN 'self-reported registrations'\n\t\tWHEN (\n\t\t\tpd.post_class ILIKE 'voter-reg - %'\n\t\t\tAND pd.status <> 'confirmed'\n\t\t) THEN 'voter_registrations'\n\t\tWHEN pd.\"type\" ILIKE '%photo%'\n\t\tAND pd.post_class NOT ILIKE '%vote%' THEN 'photo_rbs'\n\t\tWHEN pd.\"type\" ILIKE '%text%' THEN 'text_rbs'\n\t\tWHEN pd.\"type\" ILIKE '%social%' THEN 'social'\n\t\tWHEN pd.\"type\" ILIKE '%call%' THEN 'phone_calls'\n\t\tELSE NULL\n\tEND AS post_bucket,\n\tpd.reportback_volume,\n\tpd.vr_source,\n\tpd.vr_source_details\nFROM\n\t{{ ref('posts') }} pd\n\tJOIN first_rb f ON (pd.id = f.post_id)", "compiled": true, "database": "quasar_prod_warehouse", "schema": "public", "fqn": ["ds_dbt", "campaign_activity", "reportbacks"], "unique_id": "model.ds_dbt.reportbacks", "package_name": "ds_dbt", "root_path": "/home/runner/work/quasar/quasar/quasar/dbt", "path": "campaign_activity/reportbacks.sql", "original_file_path": "models/campaign_activity/reportbacks.sql", "name": "reportbacks", "resource_type": "model", "alias": "reportbacks", "checksum": {"name": "sha256", "checksum": "b5410cb4a906227f2e11eb29ebb055237a53d904d562abb838cbe05712e98465"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [{"sql": "CREATE UNIQUE INDEX {{ get_index_name(this, 'unique_post_id') }} (post_id)", "transaction": true, "index": null}, {"sql": "CREATE INDEX {{ get_index_name(this, 'post_created_at_campaign_id_post_class_reportback_volume') }} (post_created_at, campaign_id, post_class, reportback_volume)", "transaction": true, "index": null}, {"sql": "{{ grant_select_to(this, ['dsanalyst', 'looker']) }}", "transaction": true, "index": null}], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": "reportbacks", "schema": null, "database": null, "tags": ["campaign_activity"], "full_refresh": null}, "tags": ["campaign_activity"], "refs": [["posts"], ["posts"], ["posts"]], "sources": [], "depends_on": {"macros": ["macro.ds_dbt.get_index_name", "macro.ds_dbt.grant_select_to"], "nodes": ["model.ds_dbt.posts", "model.ds_dbt.posts", "model.ds_dbt.posts"]}, "description": "A table containing information about reportbacks", "columns": {"northstar_id": {"name": "northstar_id", "description": "The Northstar ID of the user who generated the event.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "post_id": {"name": "post_id", "description": "Unique identifier for the post", "meta": {}, "data_type": null, "quote": null, "tags": []}, "signup_id": {"name": "signup_id", "description": "Unique identifier for the signup", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "This is a unique identifier for the campaign", "meta": {}, "data_type": null, "quote": null, "tags": []}, "club_id": {"name": "club_id", "description": "Club id", "meta": {}, "data_type": null, "quote": null, "tags": []}, "post_action": {"name": "post_action", "description": "Post action (e.g. DefendDreamers_Nov9_CongressCalls, GunViolence2018_Feb15_ParklandResponse)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "post_type": {"name": "post_type", "description": "Type of post (e.g. photo)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "post_status": {"name": "post_status", "description": "Post status (e.g. accepted, rejected)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "post_class": {"name": "post_class", "description": "Class of the signup (e.g. \"photo - default\", \"phone-call - DefendDreamers_Jan16_BothBodies\")", "meta": {}, "data_type": null, "quote": null, "tags": []}, "post_created_at": {"name": "post_created_at", "description": "When the item was created in UTC (eg. 2018-01-01 12:00:00)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "post_source": {"name": "post_source", "description": "Source of the URL (e.g. SMS, web), origin of the post (e.g. phoenix-web, phoenix-ashes, sms), or source where user was acquired. (e.g. sms, phoenix-next)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "post_source_bucket": {"name": "post_source_bucket", "description": "Grouping bucket for the origin of the post (e.g. web, sms)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "reportback_volume": {"name": "reportback_volume", "description": "This field returns 1 if non voter-reg action, since campaigns team only counts those a 1 reportback. If voter-reg action, we want to count quantity of post as number of registered voters.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "civic_action": {"name": "civic_action", "description": "Whether the post is a Civic Action. The application allows for multiple types of posts.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "scholarship_entry": {"name": "scholarship_entry", "description": "Whether the post is a Scholarship Entry. The application allows for multiple types of posts.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "hours_spent": {"name": "hours_spent", "description": "The number of hours spent for a specific action. Entered by member", "meta": {}, "data_type": null, "quote": null, "tags": []}, "location": {"name": "location", "description": "Location where the action takes place (e.g. US-NY)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "postal_code": {"name": "postal_code", "description": "Postal code where the action takes place", "meta": {}, "data_type": null, "quote": null, "tags": []}, "post_bucket": {"name": "post_bucket", "description": "Grouping to which a post belongs (e.g. photo_rbs, phone_calls, social)", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/campaign_activity/schema.yml", "build_path": "../../docs/compiled/ds_dbt/models/campaign_activity/reportbacks.sql", "deferred": false, "compiled_sql": "WITH first_rb AS (\n\tSELECT\n\t\tmin(id) AS post_id\n\tFROM\n\t\t\"quasar_prod_warehouse\".\"public\".\"posts\" p\n\tWHERE\n\t\tp.is_reportback = 'true'\n\t\tAND p.is_accepted = 1\n\tGROUP BY\n\t\tp.northstar_id,\n\t\tp.campaign_id,\n\t\tp.signup_id,\n\t\tp.post_class,\n\t\tp.reportback_volume\n\tUNION\n\tDISTINCT\n\tSELECT\n\t\tid\n\tFROM\n\t\t\"quasar_prod_warehouse\".\"public\".\"posts\" p\n\tWHERE\n\t\tp.is_reportback = 'true'\n\t\tAND p.is_accepted = 1\n\t\tAND TYPE = 'voter-reg'\n)\nSELECT\n\tpd.\"action\" AS post_action,\n\tpd.campaign_id,\n\tpd.club_id,\n\tpd.group_id,\n\tpd.id AS post_id,\n\tpd.is_civic_action,\n\tpd.is_scholarship_entry,\n\tpd.location,\n\tpd.northstar_id,\n\tpd.\"type\" AS post_type,\n\tpd.post_class,\n\tpd.signup_id,\n\tpd.source AS post_source,\n\tpd.source_bucket AS post_source_bucket,\n\tpd.status AS post_status,\n\tpd.hours_spent as hours_spent,\n\tpd.created_at AS post_created_at,\n\tpd.postal_code,\n\tCASE\n\t\tWHEN (\n\t\t\tpd.post_class ILIKE '%vote%'\n\t\t\tAND pd.status = 'confirmed'\n\t\t) THEN 'self-reported registrations'\n\t\tWHEN (\n\t\t\tpd.post_class ILIKE 'voter-reg - %'\n\t\t\tAND pd.status <> 'confirmed'\n\t\t) THEN 'voter_registrations'\n\t\tWHEN pd.\"type\" ILIKE '%photo%'\n\t\tAND pd.post_class NOT ILIKE '%vote%' THEN 'photo_rbs'\n\t\tWHEN pd.\"type\" ILIKE '%text%' THEN 'text_rbs'\n\t\tWHEN pd.\"type\" ILIKE '%social%' THEN 'social'\n\t\tWHEN pd.\"type\" ILIKE '%call%' THEN 'phone_calls'\n\t\tELSE NULL\n\tEND AS post_bucket,\n\tpd.reportback_volume,\n\tpd.vr_source,\n\tpd.vr_source_details\nFROM\n\t\"quasar_prod_warehouse\".\"public\".\"posts\" pd\n\tJOIN first_rb f ON (pd.id = f.post_id)", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "WITH first_rb AS (\n\tSELECT\n\t\tmin(id) AS post_id\n\tFROM\n\t\t\"quasar_prod_warehouse\".\"public\".\"posts\" p\n\tWHERE\n\t\tp.is_reportback = 'true'\n\t\tAND p.is_accepted = 1\n\tGROUP BY\n\t\tp.northstar_id,\n\t\tp.campaign_id,\n\t\tp.signup_id,\n\t\tp.post_class,\n\t\tp.reportback_volume\n\tUNION\n\tDISTINCT\n\tSELECT\n\t\tid\n\tFROM\n\t\t\"quasar_prod_warehouse\".\"public\".\"posts\" p\n\tWHERE\n\t\tp.is_reportback = 'true'\n\t\tAND p.is_accepted = 1\n\t\tAND TYPE = 'voter-reg'\n)\nSELECT\n\tpd.\"action\" AS post_action,\n\tpd.campaign_id,\n\tpd.club_id,\n\tpd.group_id,\n\tpd.id AS post_id,\n\tpd.is_civic_action,\n\tpd.is_scholarship_entry,\n\tpd.location,\n\tpd.northstar_id,\n\tpd.\"type\" AS post_type,\n\tpd.post_class,\n\tpd.signup_id,\n\tpd.source AS post_source,\n\tpd.source_bucket AS post_source_bucket,\n\tpd.status AS post_status,\n\tpd.hours_spent as hours_spent,\n\tpd.created_at AS post_created_at,\n\tpd.postal_code,\n\tCASE\n\t\tWHEN (\n\t\t\tpd.post_class ILIKE '%vote%'\n\t\t\tAND pd.status = 'confirmed'\n\t\t) THEN 'self-reported registrations'\n\t\tWHEN (\n\t\t\tpd.post_class ILIKE 'voter-reg - %'\n\t\t\tAND pd.status <> 'confirmed'\n\t\t) THEN 'voter_registrations'\n\t\tWHEN pd.\"type\" ILIKE '%photo%'\n\t\tAND pd.post_class NOT ILIKE '%vote%' THEN 'photo_rbs'\n\t\tWHEN pd.\"type\" ILIKE '%text%' THEN 'text_rbs'\n\t\tWHEN pd.\"type\" ILIKE '%social%' THEN 'social'\n\t\tWHEN pd.\"type\" ILIKE '%call%' THEN 'phone_calls'\n\t\tELSE NULL\n\tEND AS post_bucket,\n\tpd.reportback_volume,\n\tpd.vr_source,\n\tpd.vr_source_details\nFROM\n\t\"quasar_prod_warehouse\".\"public\".\"posts\" pd\n\tJOIN first_rb f ON (pd.id = f.post_id)"}, "error": null, "status": null, "execution_time": 0.026885032653808594, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-02-23T21:28:55.318462Z", "completed_at": "2021-02-23T21:28:55.344249Z"}, {"name": "execute", "started_at": "2021-02-23T21:28:55.344549Z", "completed_at": "2021-02-23T21:28:55.344557Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "-- Combines attributes from the ft_snowplow.event and ft_snowplow.snowplow_event schemas\n-- removes duplicate events by event_id\nSELECT DISTINCT ON (b.event_id, b.event_name, b.event_datetime)\n\tp.action_id,\n\tb.browser_size,\n\tp.url AS clicked_link_url,\n\tb.device_id,\n\tb.event_datetime,\n\tb.event_id,\n\tCASE\n\t\tWHEN b.event_name IS NULL\n\t\tAND b.event_type = 'pv' THEN 'view'\n\t\tELSE b.event_name\n\tEND AS event_name,\n\tb.event_source,\n\tb.event_type,\n\tb.\"host\",\n\tb.northstar_id,\n\tb.referrer_host,\n\tb.referrer_path,\n\tb.referrer_source,\n\tb.se_action,\n\tb.se_category,\n\tb.se_label,\n\tb.session_counter,\n\tb.session_id,\n\tp.block_id,\n\tp.campaign_id,\n\ti.campaign_name,\n\tp.context_source,\n\tp.context_value,\n\tp.group_id,\n\tp.modal_type,\n\tb.\"path\",\n\tp.page_id,\n\tp.search_query,\n\tp.utm_campaign,\n\tp.utm_medium,\n\tp.utm_source,\n    b.query_parameters\n  FROM {{ ref('snowplow_base_event') }} b\n  LEFT JOIN {{ ref('snowplow_payload_event') }} p ON b.event_id = p.event_id\n  LEFT JOIN {{ ref('campaign_info') }} i ON i.campaign_id = p.campaign_id::bigint\n\n\n{% if is_incremental() %}\n  -- this filter will only be applied on an incremental run\n  WHERE b.event_datetime >= (select max(sre.event_datetime) from {{this}} sre)\n{% endif %}", "compiled": true, "database": "quasar_prod_warehouse", "schema": "public", "fqn": ["ds_dbt", "phoenix_events", "snowplow_raw_events"], "unique_id": "model.ds_dbt.snowplow_raw_events", "package_name": "ds_dbt", "root_path": "/home/runner/work/quasar/quasar/quasar/dbt", "path": "phoenix_events/snowplow_raw_events.sql", "original_file_path": "models/phoenix_events/snowplow_raw_events.sql", "name": "snowplow_raw_events", "resource_type": "model", "alias": "snowplow_raw_events", "checksum": {"name": "sha256", "checksum": "0d84a6dd161ca4699acab748f33c18e3957e8550bc5eed17685f0d51c67e7e76"}, "config": {"enabled": true, "materialized": "incremental", "persist_docs": {}, "post-hook": [{"sql": "{% if not is_incremental() %}\n  CREATE INDEX {{ get_index_name(this, 'event_id') }} (event_id);\n  CREATE INDEX {{ get_index_name(this, 'session_id') }} (session_id);\n  CREATE INDEX {{ get_index_name(this, 'campaign_id') }} (campaign_id) where campaign_id is not null;\n  CREATE INDEX {{ get_index_name(this, 'device_id') }} (device_id);\n  CREATE INDEX {{ get_index_name(this, 'event_name') }} (event_name);\n  {{ grant_select_to(this, ['dsanalyst', 'looker']) }}\n{% endif %}\n", "transaction": true, "index": null}], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": "snowplow_raw_events", "schema": null, "database": null, "tags": ["phoenix_events"], "full_refresh": null}, "tags": ["phoenix_events"], "refs": [["snowplow_base_event"], ["snowplow_payload_event"], ["campaign_info"]], "sources": [], "depends_on": {"macros": ["macro.dbt.is_incremental", "macro.ds_dbt.get_index_name", "macro.ds_dbt.grant_select_to"], "nodes": ["model.ds_dbt.snowplow_base_event", "model.ds_dbt.snowplow_payload_event", "model.ds_dbt.campaign_info"]}, "description": "Table combining snowplow_base_event and snowplow_payload_event into rich raw data source for all clickstream info", "columns": {"action_id": {"name": "action_id", "description": "Internal identifier of the campaign action", "meta": {}, "data_type": null, "quote": null, "tags": []}, "block_id": {"name": "block_id", "description": "References specific content blocks from contentful CMS, PMs decide whether its important to send that info with specific click events.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "browser_size": {"name": "browser_size", "description": "Which type of browser a user is using (eg. Mobile, Desktop). This is default metadata sent from browser, it won't always be present.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "Internal DoSomething Campaign ID. Not present on all web visits (ex. the homepage is not tied to a campaign_id).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicked_link_url": {"name": "clicked_link_url", "description": "This \"url\" is included in some events. Not all events with a name containing \"clicked\" will have \"url\" included. Consult with PMs for context specific to a certain event.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "context_source": {"name": "context_source", "description": "We use this to denote the 'context' for events that can be triggered from different locations in the app. (It'll be a string like campaign_landing_page or scholarship_modal).\n\ne.g. the 'clicked_signup' event can come from wherever we embed a campaign signup form which happens in a modal, or on the landing page itself. (So helpful for analytics to determine which specific form is driving the signup).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "context_value": {"name": "context_value", "description": "This property is available to add more context to certain events (e.g. cause value selected when filtering campaigns by cause). It is vague enough that testing of when we should get this value is not practical. Consult with PMs for specific context when this field exists.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "device_id": {"name": "device_id", "description": "[Required] ID of the device used", "meta": {}, "data_type": null, "quote": null, "tags": []}, "event_datetime": {"name": "event_datetime", "description": "[Required] When the event occurred in UTC (eg. 2018-01-01 12:00:00)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "event_id": {"name": "event_id", "description": "[Required] This is a unique identifier for each event", "meta": {}, "data_type": null, "quote": null, "tags": []}, "event_name": {"name": "event_name", "description": "Name of the event (eg. northstar_submitted_register, https://docs.google.com/spreadsheets/d/1lm-fGrIm85nUTxSojqyCt_Ehmm1zEbViFhKpxcJiz1A/edit#gid=406441516)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "event_source": {"name": "event_source", "description": "[Required] Application source for event (eg. Phoenix, Northstar)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "event_type": {"name": "event_type", "description": "[Required] Type of event (pv = 'Page View', se = 'Structured Event')", "meta": {}, "data_type": null, "quote": null, "tags": []}, "group_id": {"name": "group_id", "description": "Unique identifier for groups. Group id is tied to work for volunteer credits and online voter drives (members can participate as part of a group)... product managers can choose to send web events with the group_id where its relevant. (right now it's being used for Online voter registration groups, but in the future it could be used for other types of group related efforts, e.g. volunteer hours).\n\nIncluded only with \"clicked_group_finder_group\" events. This may change in the future. Consult with PMs for use of this property in other events.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "host": {"name": "host", "description": "[Required] URL host where event occurred (eg. www.dosomething.org or identity.dosomething.org)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "modal_type": {"name": "modal_type", "description": "[Required conditionally] Certain pages have modals and therefore certain event actions will have it (e.g. NULL or SURVEY_MODAL). Included with \"opened_modal\" or \"closed_modal\" events.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "northstar_id": {"name": "northstar_id", "description": "The Northstar ID of the user who generated the event.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "page_id": {"name": "page_id", "description": "The distinct page_id for which the event occurred on. This is currently optional, but will eventually be required (TODO).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "path": {"name": "path", "description": "[Required] URL path event occurred at (eg. /login or /us/campaigns/huddle-for-heroes)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "query_parameters": {"name": "query_parameters", "description": "Optional query parameters for the request (eg. query=huddle)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "referrer_host": {"name": "referrer_host", "description": "URL host of the referring site (eg. google.com). Only present if session is referred from some external site link (ex. Facebook, Google, Bing). This would be NULL for anyone directly typing dosomething.org into a browser", "meta": {}, "data_type": null, "quote": null, "tags": []}, "referrer_path": {"name": "referrer_path", "description": "URL path from referring site (eg. /10-stats-on-teen-drug-and-alcohol-use/). Only present if session is referred from some external site link (ex. Facebook, Google, Bing).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "referrer_source": {"name": "referrer_source", "description": "Referrer source name (eg. Google, Facebook). Only present if session is referred from some external site link (ex. Facebook, Google, Bing).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "se_action": {"name": "se_action", "description": "[Required conditionally] Action performed / event name (eg. form_submitted, action_failed) - Snowplow Custom structured event. (Required for event type \"se\")", "meta": {}, "data_type": null, "quote": null, "tags": []}, "se_category": {"name": "se_category", "description": "[Required conditionally] Category of event (eg. focused_field, authentication) - Snowplow Custom structured event. (Required for event type \"se\")", "meta": {}, "data_type": null, "quote": null, "tags": []}, "se_label": {"name": "se_label", "description": "The object of the action (eg. first_name, register, voter_reg_status) - Snowplow Custom structured event. (Required for event type \"se\")", "meta": {}, "data_type": null, "quote": null, "tags": []}, "search_query": {"name": "search_query", "description": "Term associated with any search events. Sent when the user submits a search term in the search bar.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "session_counter": {"name": "session_counter", "description": "[Required] How many sessions a user has started. This is how we associate new vs. returning visits.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "session_id": {"name": "session_id", "description": "[Required] Unique identifier of the user's session. This is how we associate all events in a visit.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_campaign": {"name": "utm_campaign", "description": "Tracks which campaign the traffic was generated by. Shows up in Google Analytics as Campaign Name (eg. editorial_newsletter). Parameter passed by marketing team (would not be present for organic/ direct traffic)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_medium": {"name": "utm_medium", "description": "How the traffic got to the platform (eg. referral, CPC). Parameter passed by marketing team (would not be present for organic/ direct traffic)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "utm_source": {"name": "utm_source", "description": "Tracks where the traffic is coming from. (eg. scholarship_listing, Facebook). Parameter passed by marketing team (would not be present for organic/ direct traffic)", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/phoenix_events/schema.yml", "build_path": "../../docs/compiled/ds_dbt/models/phoenix_events/snowplow_raw_events.sql", "deferred": false, "compiled_sql": "-- Combines attributes from the ft_snowplow.event and ft_snowplow.snowplow_event schemas\n-- removes duplicate events by event_id\nSELECT DISTINCT ON (b.event_id, b.event_name, b.event_datetime)\n\tp.action_id,\n\tb.browser_size,\n\tp.url AS clicked_link_url,\n\tb.device_id,\n\tb.event_datetime,\n\tb.event_id,\n\tCASE\n\t\tWHEN b.event_name IS NULL\n\t\tAND b.event_type = 'pv' THEN 'view'\n\t\tELSE b.event_name\n\tEND AS event_name,\n\tb.event_source,\n\tb.event_type,\n\tb.\"host\",\n\tb.northstar_id,\n\tb.referrer_host,\n\tb.referrer_path,\n\tb.referrer_source,\n\tb.se_action,\n\tb.se_category,\n\tb.se_label,\n\tb.session_counter,\n\tb.session_id,\n\tp.block_id,\n\tp.campaign_id,\n\ti.campaign_name,\n\tp.context_source,\n\tp.context_value,\n\tp.group_id,\n\tp.modal_type,\n\tb.\"path\",\n\tp.page_id,\n\tp.search_query,\n\tp.utm_campaign,\n\tp.utm_medium,\n\tp.utm_source,\n    b.query_parameters\n  FROM \"quasar_prod_warehouse\".\"public\".\"snowplow_base_event\" b\n  LEFT JOIN \"quasar_prod_warehouse\".\"public\".\"snowplow_payload_event\" p ON b.event_id = p.event_id\n  LEFT JOIN \"quasar_prod_warehouse\".\"public\".\"campaign_info\" i ON i.campaign_id = p.campaign_id::bigint\n\n\n\n  -- this filter will only be applied on an incremental run\n  WHERE b.event_datetime >= (select max(sre.event_datetime) from \"quasar_prod_warehouse\".\"public\".\"snowplow_raw_events\" sre)\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "-- Combines attributes from the ft_snowplow.event and ft_snowplow.snowplow_event schemas\n-- removes duplicate events by event_id\nSELECT DISTINCT ON (b.event_id, b.event_name, b.event_datetime)\n\tp.action_id,\n\tb.browser_size,\n\tp.url AS clicked_link_url,\n\tb.device_id,\n\tb.event_datetime,\n\tb.event_id,\n\tCASE\n\t\tWHEN b.event_name IS NULL\n\t\tAND b.event_type = 'pv' THEN 'view'\n\t\tELSE b.event_name\n\tEND AS event_name,\n\tb.event_source,\n\tb.event_type,\n\tb.\"host\",\n\tb.northstar_id,\n\tb.referrer_host,\n\tb.referrer_path,\n\tb.referrer_source,\n\tb.se_action,\n\tb.se_category,\n\tb.se_label,\n\tb.session_counter,\n\tb.session_id,\n\tp.block_id,\n\tp.campaign_id,\n\ti.campaign_name,\n\tp.context_source,\n\tp.context_value,\n\tp.group_id,\n\tp.modal_type,\n\tb.\"path\",\n\tp.page_id,\n\tp.search_query,\n\tp.utm_campaign,\n\tp.utm_medium,\n\tp.utm_source,\n    b.query_parameters\n  FROM \"quasar_prod_warehouse\".\"public\".\"snowplow_base_event\" b\n  LEFT JOIN \"quasar_prod_warehouse\".\"public\".\"snowplow_payload_event\" p ON b.event_id = p.event_id\n  LEFT JOIN \"quasar_prod_warehouse\".\"public\".\"campaign_info\" i ON i.campaign_id = p.campaign_id::bigint\n\n\n\n  -- this filter will only be applied on an incremental run\n  WHERE b.event_datetime >= (select max(sre.event_datetime) from \"quasar_prod_warehouse\".\"public\".\"snowplow_raw_events\" sre)\n"}, "error": null, "status": null, "execution_time": 0.0410914421081543, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-02-23T21:28:55.345918Z", "completed_at": "2021-02-23T21:28:55.385541Z"}, {"name": "execute", "started_at": "2021-02-23T21:28:55.386022Z", "completed_at": "2021-02-23T21:28:55.386032Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "campaign_action_type", "model": "{{ ref('campaign_info') }}"}}, "compiled": true, "database": "quasar_prod_warehouse", "schema": "public", "fqn": ["ds_dbt", "schema_test", "not_null_campaign_info_campaign_action_type"], "unique_id": "test.ds_dbt.not_null_campaign_info_campaign_action_type", "package_name": "ds_dbt", "root_path": "/home/runner/work/quasar/quasar/quasar/dbt", "path": "schema_test/not_null_campaign_info_campaign_action_type.sql", "original_file_path": "models/campaign_info/schema.yml", "name": "not_null_campaign_info_campaign_action_type", "resource_type": "test", "alias": "not_null_campaign_info_campaign_action_type", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["campaign_info"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.ds_dbt.campaign_info"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "../../docs/compiled/ds_dbt/models/campaign_info/schema.yml/schema_test/not_null_campaign_info_campaign_action_type.sql", "deferred": false, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom \"quasar_prod_warehouse\".\"public\".\"campaign_info\"\nwhere campaign_action_type is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom \"quasar_prod_warehouse\".\"public\".\"campaign_info\"\nwhere campaign_action_type is null\n\n\n", "column_name": "campaign_action_type"}, "error": null, "status": null, "execution_time": 0.014197349548339844, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-02-23T21:28:55.387196Z", "completed_at": "2021-02-23T21:28:55.400123Z"}, {"name": "execute", "started_at": "2021-02-23T21:28:55.400538Z", "completed_at": "2021-02-23T21:28:55.400546Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "campaign_cause", "model": "{{ ref('campaign_info') }}"}}, "compiled": true, "database": "quasar_prod_warehouse", "schema": "public", "fqn": ["ds_dbt", "schema_test", "not_null_campaign_info_campaign_cause"], "unique_id": "test.ds_dbt.not_null_campaign_info_campaign_cause", "package_name": "ds_dbt", "root_path": "/home/runner/work/quasar/quasar/quasar/dbt", "path": "schema_test/not_null_campaign_info_campaign_cause.sql", "original_file_path": "models/campaign_info/schema.yml", "name": "not_null_campaign_info_campaign_cause", "resource_type": "test", "alias": "not_null_campaign_info_campaign_cause", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["campaign_info"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.ds_dbt.campaign_info"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "../../docs/compiled/ds_dbt/models/campaign_info/schema.yml/schema_test/not_null_campaign_info_campaign_cause.sql", "deferred": false, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom \"quasar_prod_warehouse\".\"public\".\"campaign_info\"\nwhere campaign_cause is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom \"quasar_prod_warehouse\".\"public\".\"campaign_info\"\nwhere campaign_cause is null\n\n\n", "column_name": "campaign_cause"}, "error": null, "status": null, "execution_time": 0.012783050537109375, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-02-23T21:28:55.401911Z", "completed_at": "2021-02-23T21:28:55.413521Z"}, {"name": "execute", "started_at": "2021-02-23T21:28:55.413924Z", "completed_at": "2021-02-23T21:28:55.413931Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "campaign_cause_type", "model": "{{ ref('campaign_info') }}"}}, "compiled": true, "database": "quasar_prod_warehouse", "schema": "public", "fqn": ["ds_dbt", "schema_test", "not_null_campaign_info_campaign_cause_type"], "unique_id": "test.ds_dbt.not_null_campaign_info_campaign_cause_type", "package_name": "ds_dbt", "root_path": "/home/runner/work/quasar/quasar/quasar/dbt", "path": "schema_test/not_null_campaign_info_campaign_cause_type.sql", "original_file_path": "models/campaign_info/schema.yml", "name": "not_null_campaign_info_campaign_cause_type", "resource_type": "test", "alias": "not_null_campaign_info_campaign_cause_type", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["campaign_info"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.ds_dbt.campaign_info"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "../../docs/compiled/ds_dbt/models/campaign_info/schema.yml/schema_test/not_null_campaign_info_campaign_cause_type.sql", "deferred": false, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom \"quasar_prod_warehouse\".\"public\".\"campaign_info\"\nwhere campaign_cause_type is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom \"quasar_prod_warehouse\".\"public\".\"campaign_info\"\nwhere campaign_cause_type is null\n\n\n", "column_name": "campaign_cause_type"}, "error": null, "status": null, "execution_time": 0.013279914855957031, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-02-23T21:28:55.415178Z", "completed_at": "2021-02-23T21:28:55.427293Z"}, {"name": "execute", "started_at": "2021-02-23T21:28:55.427706Z", "completed_at": "2021-02-23T21:28:55.427714Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "campaign_created_date", "model": "{{ ref('campaign_info') }}"}}, "compiled": true, "database": "quasar_prod_warehouse", "schema": "public", "fqn": ["ds_dbt", "schema_test", "not_null_campaign_info_campaign_created_date"], "unique_id": "test.ds_dbt.not_null_campaign_info_campaign_created_date", "package_name": "ds_dbt", "root_path": "/home/runner/work/quasar/quasar/quasar/dbt", "path": "schema_test/not_null_campaign_info_campaign_created_date.sql", "original_file_path": "models/campaign_info/schema.yml", "name": "not_null_campaign_info_campaign_created_date", "resource_type": "test", "alias": "not_null_campaign_info_campaign_created_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["campaign_info"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.ds_dbt.campaign_info"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "../../docs/compiled/ds_dbt/models/campaign_info/schema.yml/schema_test/not_null_campaign_info_campaign_created_date.sql", "deferred": false, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom \"quasar_prod_warehouse\".\"public\".\"campaign_info\"\nwhere campaign_created_date is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom \"quasar_prod_warehouse\".\"public\".\"campaign_info\"\nwhere campaign_created_date is null\n\n\n", "column_name": "campaign_created_date"}, "error": null, "status": null, "execution_time": 0.01306772232055664, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-02-23T21:28:55.428896Z", "completed_at": "2021-02-23T21:28:55.440634Z"}, {"name": "execute", "started_at": "2021-02-23T21:28:55.441059Z", "completed_at": "2021-02-23T21:28:55.441066Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "campaign_cta", "model": "{{ ref('campaign_info') }}"}}, "compiled": true, "database": "quasar_prod_warehouse", "schema": "public", "fqn": ["ds_dbt", "schema_test", "not_null_campaign_info_campaign_cta"], "unique_id": "test.ds_dbt.not_null_campaign_info_campaign_cta", "package_name": "ds_dbt", "root_path": "/home/runner/work/quasar/quasar/quasar/dbt", "path": "schema_test/not_null_campaign_info_campaign_cta.sql", "original_file_path": "models/campaign_info/schema.yml", "name": "not_null_campaign_info_campaign_cta", "resource_type": "test", "alias": "not_null_campaign_info_campaign_cta", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["campaign_info"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.ds_dbt.campaign_info"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "../../docs/compiled/ds_dbt/models/campaign_info/schema.yml/schema_test/not_null_campaign_info_campaign_cta.sql", "deferred": false, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom \"quasar_prod_warehouse\".\"public\".\"campaign_info\"\nwhere campaign_cta is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom \"quasar_prod_warehouse\".\"public\".\"campaign_info\"\nwhere campaign_cta is null\n\n\n", "column_name": "campaign_cta"}, "error": null, "status": null, "execution_time": 0.013062000274658203, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-02-23T21:28:55.442459Z", "completed_at": "2021-02-23T21:28:55.454100Z"}, {"name": "execute", "started_at": "2021-02-23T21:28:55.454563Z", "completed_at": "2021-02-23T21:28:55.454571Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "campaign_id", "model": "{{ ref('campaign_info') }}"}}, "compiled": true, "database": "quasar_prod_warehouse", "schema": "public", "fqn": ["ds_dbt", "schema_test", "not_null_campaign_info_campaign_id"], "unique_id": "test.ds_dbt.not_null_campaign_info_campaign_id", "package_name": "ds_dbt", "root_path": "/home/runner/work/quasar/quasar/quasar/dbt", "path": "schema_test/not_null_campaign_info_campaign_id.sql", "original_file_path": "models/campaign_info/schema.yml", "name": "not_null_campaign_info_campaign_id", "resource_type": "test", "alias": "not_null_campaign_info_campaign_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["campaign_info"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.ds_dbt.campaign_info"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "../../docs/compiled/ds_dbt/models/campaign_info/schema.yml/schema_test/not_null_campaign_info_campaign_id.sql", "deferred": false, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom \"quasar_prod_warehouse\".\"public\".\"campaign_info\"\nwhere campaign_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom \"quasar_prod_warehouse\".\"public\".\"campaign_info\"\nwhere campaign_id is null\n\n\n", "column_name": "campaign_id"}, "error": null, "status": null, "execution_time": 0.013024091720581055, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-02-23T21:28:55.456067Z", "completed_at": "2021-02-23T21:28:55.467834Z"}, {"name": "execute", "started_at": "2021-02-23T21:28:55.468184Z", "completed_at": "2021-02-23T21:28:55.468191Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "campaign_node_id", "model": "{{ ref('campaign_info') }}"}}, "compiled": true, "database": "quasar_prod_warehouse", "schema": "public", "fqn": ["ds_dbt", "schema_test", "not_null_campaign_info_campaign_node_id"], "unique_id": "test.ds_dbt.not_null_campaign_info_campaign_node_id", "package_name": "ds_dbt", "root_path": "/home/runner/work/quasar/quasar/quasar/dbt", "path": "schema_test/not_null_campaign_info_campaign_node_id.sql", "original_file_path": "models/campaign_info/schema.yml", "name": "not_null_campaign_info_campaign_node_id", "resource_type": "test", "alias": "not_null_campaign_info_campaign_node_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["campaign_info"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.ds_dbt.campaign_info"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "../../docs/compiled/ds_dbt/models/campaign_info/schema.yml/schema_test/not_null_campaign_info_campaign_node_id.sql", "deferred": false, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom \"quasar_prod_warehouse\".\"public\".\"campaign_info\"\nwhere campaign_node_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom \"quasar_prod_warehouse\".\"public\".\"campaign_info\"\nwhere campaign_node_id is null\n\n\n", "column_name": "campaign_node_id"}, "error": null, "status": null, "execution_time": 0.015790224075317383, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-02-23T21:28:55.469588Z", "completed_at": "2021-02-23T21:28:55.484088Z"}, {"name": "execute", "started_at": "2021-02-23T21:28:55.484483Z", "completed_at": "2021-02-23T21:28:55.484491Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "campaign_node_id_title", "model": "{{ ref('campaign_info') }}"}}, "compiled": true, "database": "quasar_prod_warehouse", "schema": "public", "fqn": ["ds_dbt", "schema_test", "not_null_campaign_info_campaign_node_id_title"], "unique_id": "test.ds_dbt.not_null_campaign_info_campaign_node_id_title", "package_name": "ds_dbt", "root_path": "/home/runner/work/quasar/quasar/quasar/dbt", "path": "schema_test/not_null_campaign_info_campaign_node_id_title.sql", "original_file_path": "models/campaign_info/schema.yml", "name": "not_null_campaign_info_campaign_node_id_title", "resource_type": "test", "alias": "not_null_campaign_info_campaign_node_id_title", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["campaign_info"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.ds_dbt.campaign_info"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "../../docs/compiled/ds_dbt/models/campaign_info/schema.yml/schema_test/not_null_campaign_info_campaign_node_id_title.sql", "deferred": false, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom \"quasar_prod_warehouse\".\"public\".\"campaign_info\"\nwhere campaign_node_id_title is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom \"quasar_prod_warehouse\".\"public\".\"campaign_info\"\nwhere campaign_node_id_title is null\n\n\n", "column_name": "campaign_node_id_title"}, "error": null, "status": null, "execution_time": 0.01241302490234375, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-02-23T21:28:55.485775Z", "completed_at": "2021-02-23T21:28:55.496936Z"}, {"name": "execute", "started_at": "2021-02-23T21:28:55.497329Z", "completed_at": "2021-02-23T21:28:55.497336Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "campaign_noun", "model": "{{ ref('campaign_info') }}"}}, "compiled": true, "database": "quasar_prod_warehouse", "schema": "public", "fqn": ["ds_dbt", "schema_test", "not_null_campaign_info_campaign_noun"], "unique_id": "test.ds_dbt.not_null_campaign_info_campaign_noun", "package_name": "ds_dbt", "root_path": "/home/runner/work/quasar/quasar/quasar/dbt", "path": "schema_test/not_null_campaign_info_campaign_noun.sql", "original_file_path": "models/campaign_info/schema.yml", "name": "not_null_campaign_info_campaign_noun", "resource_type": "test", "alias": "not_null_campaign_info_campaign_noun", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["campaign_info"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.ds_dbt.campaign_info"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "../../docs/compiled/ds_dbt/models/campaign_info/schema.yml/schema_test/not_null_campaign_info_campaign_noun.sql", "deferred": false, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom \"quasar_prod_warehouse\".\"public\".\"campaign_info\"\nwhere campaign_noun is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom \"quasar_prod_warehouse\".\"public\".\"campaign_info\"\nwhere campaign_noun is null\n\n\n", "column_name": "campaign_noun"}, "error": null, "status": null, "execution_time": 0.014358282089233398, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-02-23T21:28:55.498604Z", "completed_at": "2021-02-23T21:28:55.511699Z"}, {"name": "execute", "started_at": "2021-02-23T21:28:55.512104Z", "completed_at": "2021-02-23T21:28:55.512112Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "campaign_run_end_date", "model": "{{ ref('campaign_info') }}"}}, "compiled": true, "database": "quasar_prod_warehouse", "schema": "public", "fqn": ["ds_dbt", "schema_test", "not_null_campaign_info_campaign_run_end_date"], "unique_id": "test.ds_dbt.not_null_campaign_info_campaign_run_end_date", "package_name": "ds_dbt", "root_path": "/home/runner/work/quasar/quasar/quasar/dbt", "path": "schema_test/not_null_campaign_info_campaign_run_end_date.sql", "original_file_path": "models/campaign_info/schema.yml", "name": "not_null_campaign_info_campaign_run_end_date", "resource_type": "test", "alias": "not_null_campaign_info_campaign_run_end_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["campaign_info"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.ds_dbt.campaign_info"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "../../docs/compiled/ds_dbt/models/campaign_info/schema.yml/schema_test/not_null_campaign_info_campaign_run_end_date.sql", "deferred": false, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom \"quasar_prod_warehouse\".\"public\".\"campaign_info\"\nwhere campaign_run_end_date is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom \"quasar_prod_warehouse\".\"public\".\"campaign_info\"\nwhere campaign_run_end_date is null\n\n\n", "column_name": "campaign_run_end_date"}, "error": null, "status": null, "execution_time": 0.01292276382446289, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-02-23T21:28:55.513441Z", "completed_at": "2021-02-23T21:28:55.525124Z"}, {"name": "execute", "started_at": "2021-02-23T21:28:55.525500Z", "completed_at": "2021-02-23T21:28:55.525507Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "campaign_run_id", "model": "{{ ref('campaign_info') }}"}}, "compiled": true, "database": "quasar_prod_warehouse", "schema": "public", "fqn": ["ds_dbt", "schema_test", "not_null_campaign_info_campaign_run_id"], "unique_id": "test.ds_dbt.not_null_campaign_info_campaign_run_id", "package_name": "ds_dbt", "root_path": "/home/runner/work/quasar/quasar/quasar/dbt", "path": "schema_test/not_null_campaign_info_campaign_run_id.sql", "original_file_path": "models/campaign_info/schema.yml", "name": "not_null_campaign_info_campaign_run_id", "resource_type": "test", "alias": "not_null_campaign_info_campaign_run_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["campaign_info"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.ds_dbt.campaign_info"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "../../docs/compiled/ds_dbt/models/campaign_info/schema.yml/schema_test/not_null_campaign_info_campaign_run_id.sql", "deferred": false, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom \"quasar_prod_warehouse\".\"public\".\"campaign_info\"\nwhere campaign_run_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom \"quasar_prod_warehouse\".\"public\".\"campaign_info\"\nwhere campaign_run_id is null\n\n\n", "column_name": "campaign_run_id"}, "error": null, "status": null, "execution_time": 0.013353824615478516, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-02-23T21:28:55.526808Z", "completed_at": "2021-02-23T21:28:55.538999Z"}, {"name": "execute", "started_at": "2021-02-23T21:28:55.539428Z", "completed_at": "2021-02-23T21:28:55.539436Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "campaign_run_id_title", "model": "{{ ref('campaign_info') }}"}}, "compiled": true, "database": "quasar_prod_warehouse", "schema": "public", "fqn": ["ds_dbt", "schema_test", "not_null_campaign_info_campaign_run_id_title"], "unique_id": "test.ds_dbt.not_null_campaign_info_campaign_run_id_title", "package_name": "ds_dbt", "root_path": "/home/runner/work/quasar/quasar/quasar/dbt", "path": "schema_test/not_null_campaign_info_campaign_run_id_title.sql", "original_file_path": "models/campaign_info/schema.yml", "name": "not_null_campaign_info_campaign_run_id_title", "resource_type": "test", "alias": "not_null_campaign_info_campaign_run_id_title", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["campaign_info"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.ds_dbt.campaign_info"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "../../docs/compiled/ds_dbt/models/campaign_info/schema.yml/schema_test/not_null_campaign_info_campaign_run_id_title.sql", "deferred": false, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom \"quasar_prod_warehouse\".\"public\".\"campaign_info\"\nwhere campaign_run_id_title is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom \"quasar_prod_warehouse\".\"public\".\"campaign_info\"\nwhere campaign_run_id_title is null\n\n\n", "column_name": "campaign_run_id_title"}, "error": null, "status": null, "execution_time": 0.013093233108520508, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-02-23T21:28:55.540745Z", "completed_at": "2021-02-23T21:28:55.552500Z"}, {"name": "execute", "started_at": "2021-02-23T21:28:55.552903Z", "completed_at": "2021-02-23T21:28:55.552910Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "campaign_run_start_date", "model": "{{ ref('campaign_info') }}"}}, "compiled": true, "database": "quasar_prod_warehouse", "schema": "public", "fqn": ["ds_dbt", "schema_test", "not_null_campaign_info_campaign_run_start_date"], "unique_id": "test.ds_dbt.not_null_campaign_info_campaign_run_start_date", "package_name": "ds_dbt", "root_path": "/home/runner/work/quasar/quasar/quasar/dbt", "path": "schema_test/not_null_campaign_info_campaign_run_start_date.sql", "original_file_path": "models/campaign_info/schema.yml", "name": "not_null_campaign_info_campaign_run_start_date", "resource_type": "test", "alias": "not_null_campaign_info_campaign_run_start_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["campaign_info"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.ds_dbt.campaign_info"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "../../docs/compiled/ds_dbt/models/campaign_info/schema.yml/schema_test/not_null_campaign_info_campaign_run_start_date.sql", "deferred": false, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom \"quasar_prod_warehouse\".\"public\".\"campaign_info\"\nwhere campaign_run_start_date is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom \"quasar_prod_warehouse\".\"public\".\"campaign_info\"\nwhere campaign_run_start_date is null\n\n\n", "column_name": "campaign_run_start_date"}, "error": null, "status": null, "execution_time": 0.012582063674926758, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-02-23T21:28:55.554124Z", "completed_at": "2021-02-23T21:28:55.565418Z"}, {"name": "execute", "started_at": "2021-02-23T21:28:55.565928Z", "completed_at": "2021-02-23T21:28:55.565936Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "campaign_verb", "model": "{{ ref('campaign_info') }}"}}, "compiled": true, "database": "quasar_prod_warehouse", "schema": "public", "fqn": ["ds_dbt", "schema_test", "not_null_campaign_info_campaign_verb"], "unique_id": "test.ds_dbt.not_null_campaign_info_campaign_verb", "package_name": "ds_dbt", "root_path": "/home/runner/work/quasar/quasar/quasar/dbt", "path": "schema_test/not_null_campaign_info_campaign_verb.sql", "original_file_path": "models/campaign_info/schema.yml", "name": "not_null_campaign_info_campaign_verb", "resource_type": "test", "alias": "not_null_campaign_info_campaign_verb", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["campaign_info"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.ds_dbt.campaign_info"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "../../docs/compiled/ds_dbt/models/campaign_info/schema.yml/schema_test/not_null_campaign_info_campaign_verb.sql", "deferred": false, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom \"quasar_prod_warehouse\".\"public\".\"campaign_info\"\nwhere campaign_verb is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom \"quasar_prod_warehouse\".\"public\".\"campaign_info\"\nwhere campaign_verb is null\n\n\n", "column_name": "campaign_verb"}, "error": null, "status": null, "execution_time": 0.012792587280273438, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-02-23T21:28:55.567201Z", "completed_at": "2021-02-23T21:28:55.578732Z"}, {"name": "execute", "started_at": "2021-02-23T21:28:55.579090Z", "completed_at": "2021-02-23T21:28:55.579097Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "campaign_id", "model": "{{ ref('campaign_info') }}"}}, "compiled": true, "database": "quasar_prod_warehouse", "schema": "public", "fqn": ["ds_dbt", "schema_test", "unique_campaign_info_campaign_id"], "unique_id": "test.ds_dbt.unique_campaign_info_campaign_id", "package_name": "ds_dbt", "root_path": "/home/runner/work/quasar/quasar/quasar/dbt", "path": "schema_test/unique_campaign_info_campaign_id.sql", "original_file_path": "models/campaign_info/schema.yml", "name": "unique_campaign_info_campaign_id", "resource_type": "test", "alias": "unique_campaign_info_campaign_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["campaign_info"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.ds_dbt.campaign_info"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "../../docs/compiled/ds_dbt/models/campaign_info/schema.yml/schema_test/unique_campaign_info_campaign_id.sql", "deferred": false, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        campaign_id\n\n    from \"quasar_prod_warehouse\".\"public\".\"campaign_info\"\n    where campaign_id is not null\n    group by campaign_id\n    having count(*) > 1\n\n) validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        campaign_id\n\n    from \"quasar_prod_warehouse\".\"public\".\"campaign_info\"\n    where campaign_id is not null\n    group by campaign_id\n    having count(*) > 1\n\n) validation_errors\n\n\n", "column_name": "campaign_id"}, "error": null, "status": null, "execution_time": 0.01332235336303711, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-02-23T21:28:55.580289Z", "completed_at": "2021-02-23T21:28:55.592424Z"}, {"name": "execute", "started_at": "2021-02-23T21:28:55.592850Z", "completed_at": "2021-02-23T21:28:55.592857Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "campaign_node_id", "model": "{{ ref('campaign_info') }}"}}, "compiled": true, "database": "quasar_prod_warehouse", "schema": "public", "fqn": ["ds_dbt", "schema_test", "unique_campaign_info_campaign_node_id"], "unique_id": "test.ds_dbt.unique_campaign_info_campaign_node_id", "package_name": "ds_dbt", "root_path": "/home/runner/work/quasar/quasar/quasar/dbt", "path": "schema_test/unique_campaign_info_campaign_node_id.sql", "original_file_path": "models/campaign_info/schema.yml", "name": "unique_campaign_info_campaign_node_id", "resource_type": "test", "alias": "unique_campaign_info_campaign_node_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["campaign_info"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.ds_dbt.campaign_info"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "../../docs/compiled/ds_dbt/models/campaign_info/schema.yml/schema_test/unique_campaign_info_campaign_node_id.sql", "deferred": false, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        campaign_node_id\n\n    from \"quasar_prod_warehouse\".\"public\".\"campaign_info\"\n    where campaign_node_id is not null\n    group by campaign_node_id\n    having count(*) > 1\n\n) validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        campaign_node_id\n\n    from \"quasar_prod_warehouse\".\"public\".\"campaign_info\"\n    where campaign_node_id is not null\n    group by campaign_node_id\n    having count(*) > 1\n\n) validation_errors\n\n\n", "column_name": "campaign_node_id"}, "error": null, "status": null, "execution_time": 0.015180349349975586, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-02-23T21:28:55.593996Z", "completed_at": "2021-02-23T21:28:55.607956Z"}, {"name": "execute", "started_at": "2021-02-23T21:28:55.608274Z", "completed_at": "2021-02-23T21:28:55.608281Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "campaign_noun", "model": "{{ ref('campaign_info') }}"}}, "compiled": true, "database": "quasar_prod_warehouse", "schema": "public", "fqn": ["ds_dbt", "schema_test", "unique_campaign_info_campaign_noun"], "unique_id": "test.ds_dbt.unique_campaign_info_campaign_noun", "package_name": "ds_dbt", "root_path": "/home/runner/work/quasar/quasar/quasar/dbt", "path": "schema_test/unique_campaign_info_campaign_noun.sql", "original_file_path": "models/campaign_info/schema.yml", "name": "unique_campaign_info_campaign_noun", "resource_type": "test", "alias": "unique_campaign_info_campaign_noun", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["campaign_info"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.ds_dbt.campaign_info"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "../../docs/compiled/ds_dbt/models/campaign_info/schema.yml/schema_test/unique_campaign_info_campaign_noun.sql", "deferred": false, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        campaign_noun\n\n    from \"quasar_prod_warehouse\".\"public\".\"campaign_info\"\n    where campaign_noun is not null\n    group by campaign_noun\n    having count(*) > 1\n\n) validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        campaign_noun\n\n    from \"quasar_prod_warehouse\".\"public\".\"campaign_info\"\n    where campaign_noun is not null\n    group by campaign_noun\n    having count(*) > 1\n\n) validation_errors\n\n\n", "column_name": "campaign_noun"}, "error": null, "status": null, "execution_time": 0.014583587646484375, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-02-23T21:28:55.609573Z", "completed_at": "2021-02-23T21:28:55.622900Z"}, {"name": "execute", "started_at": "2021-02-23T21:28:55.623352Z", "completed_at": "2021-02-23T21:28:55.623361Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "campaign_run_id", "model": "{{ ref('campaign_info') }}"}}, "compiled": true, "database": "quasar_prod_warehouse", "schema": "public", "fqn": ["ds_dbt", "schema_test", "unique_campaign_info_campaign_run_id"], "unique_id": "test.ds_dbt.unique_campaign_info_campaign_run_id", "package_name": "ds_dbt", "root_path": "/home/runner/work/quasar/quasar/quasar/dbt", "path": "schema_test/unique_campaign_info_campaign_run_id.sql", "original_file_path": "models/campaign_info/schema.yml", "name": "unique_campaign_info_campaign_run_id", "resource_type": "test", "alias": "unique_campaign_info_campaign_run_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["campaign_info"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.ds_dbt.campaign_info"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "../../docs/compiled/ds_dbt/models/campaign_info/schema.yml/schema_test/unique_campaign_info_campaign_run_id.sql", "deferred": false, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        campaign_run_id\n\n    from \"quasar_prod_warehouse\".\"public\".\"campaign_info\"\n    where campaign_run_id is not null\n    group by campaign_run_id\n    having count(*) > 1\n\n) validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        campaign_run_id\n\n    from \"quasar_prod_warehouse\".\"public\".\"campaign_info\"\n    where campaign_run_id is not null\n    group by campaign_run_id\n    having count(*) > 1\n\n) validation_errors\n\n\n", "column_name": "campaign_run_id"}, "error": null, "status": null, "execution_time": 0.014702558517456055, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-02-23T21:28:55.624682Z", "completed_at": "2021-02-23T21:28:55.638139Z"}, {"name": "execute", "started_at": "2021-02-23T21:28:55.638602Z", "completed_at": "2021-02-23T21:28:55.638609Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "campaign_run_start_date", "model": "{{ ref('campaign_info') }}"}}, "compiled": true, "database": "quasar_prod_warehouse", "schema": "public", "fqn": ["ds_dbt", "schema_test", "unique_campaign_info_campaign_run_start_date"], "unique_id": "test.ds_dbt.unique_campaign_info_campaign_run_start_date", "package_name": "ds_dbt", "root_path": "/home/runner/work/quasar/quasar/quasar/dbt", "path": "schema_test/unique_campaign_info_campaign_run_start_date.sql", "original_file_path": "models/campaign_info/schema.yml", "name": "unique_campaign_info_campaign_run_start_date", "resource_type": "test", "alias": "unique_campaign_info_campaign_run_start_date", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["campaign_info"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.ds_dbt.campaign_info"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "../../docs/compiled/ds_dbt/models/campaign_info/schema.yml/schema_test/unique_campaign_info_campaign_run_start_date.sql", "deferred": false, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        campaign_run_start_date\n\n    from \"quasar_prod_warehouse\".\"public\".\"campaign_info\"\n    where campaign_run_start_date is not null\n    group by campaign_run_start_date\n    having count(*) > 1\n\n) validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        campaign_run_start_date\n\n    from \"quasar_prod_warehouse\".\"public\".\"campaign_info\"\n    where campaign_run_start_date is not null\n    group by campaign_run_start_date\n    having count(*) > 1\n\n) validation_errors\n\n\n", "column_name": "campaign_run_start_date"}, "error": null, "status": null, "execution_time": 0.013792037963867188, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-02-23T21:28:55.639767Z", "completed_at": "2021-02-23T21:28:55.652343Z"}, {"name": "execute", "started_at": "2021-02-23T21:28:55.652765Z", "completed_at": "2021-02-23T21:28:55.652772Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "select *\nfrom {{ ref('stg_nps_web_responses') }}", "compiled": true, "database": "quasar_prod_warehouse", "schema": "public", "fqn": ["ds_dbt", "member_feedback", "fct_nps_web_responses"], "unique_id": "model.ds_dbt.fct_nps_web_responses", "package_name": "ds_dbt", "root_path": "/home/runner/work/quasar/quasar/quasar/dbt", "path": "member_feedback/fct_nps_web_responses.sql", "original_file_path": "models/member_feedback/fct_nps_web_responses.sql", "name": "fct_nps_web_responses", "resource_type": "model", "alias": "fct_nps_web_responses", "checksum": {"name": "sha256", "checksum": "69fd1dbf3f478ec8201ec1f1306ee926eb8dd6cc5af3331f99c7ac6096ee9b0d"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [{"sql": "{{ grant_select_to(this, ['dsanalyst', 'looker']) }}", "transaction": true, "index": null}], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": ["nps"], "full_refresh": null}, "tags": ["nps"], "refs": [["stg_nps_web_responses"]], "sources": [], "depends_on": {"macros": ["macro.ds_dbt.grant_select_to"], "nodes": ["model.ds_dbt.stg_nps_web_responses"]}, "description": "A table containing all nps web responses from 2018 onwards", "columns": {"survey_response_id": {"name": "survey_response_id", "description": "The unique identifier for the survey response id", "meta": {}, "data_type": null, "quote": null, "tags": []}, "nps_score": {"name": "nps_score", "description": "The rating for the Net Promotoer Score survey question how likely would you be to recommend DS to a friend", "meta": {}, "data_type": null, "quote": null, "tags": []}, "nps_promoter_cat": {"name": "nps_promoter_cat", "description": "The Net Promotoer category (promoter, passive, detractor) based on the nps score", "meta": {}, "data_type": null, "quote": null, "tags": []}, "nps_reason": {"name": "nps_reason", "description": "Open text response providing reason for the score", "meta": {}, "data_type": null, "quote": null, "tags": []}, "northstar_id": {"name": "northstar_id", "description": "The Northstar ID of the user who generated the event.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "surveyed_on_url": {"name": "surveyed_on_url", "description": "The presumed url path when survey was served to user", "meta": {}, "data_type": null, "quote": null, "tags": []}, "legacy_campaign_id": {"name": "legacy_campaign_id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "When the item was created in UTC (eg. 2018-01-01 12:00:00)", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/member_feedback/schema.yml", "build_path": "../../docs/compiled/ds_dbt/models/member_feedback/fct_nps_web_responses.sql", "deferred": false, "compiled_sql": "select *\nfrom \"quasar_prod_warehouse\".\"public\".\"stg_nps_web_responses\"", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "select *\nfrom \"quasar_prod_warehouse\".\"public\".\"stg_nps_web_responses\""}, "error": null, "status": null, "execution_time": 0.015291929244995117, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-02-23T21:28:55.653994Z", "completed_at": "2021-02-23T21:28:55.668056Z"}, {"name": "execute", "started_at": "2021-02-23T21:28:55.668339Z", "completed_at": "2021-02-23T21:28:55.668345Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "SELECT\n  *\n  FROM\n    {{ ref('messages_flattened') }} f\n  WHERE\n    f.direction = 'inbound'\n    AND f.user_id IS NOT NULL\n  UNION ALL\n    (SELECT\n      g.agent_id,\n      g.attachment_url,\n      g.attachment_content_type,\n      g.broadcast_id,\n      g.campaign_id,\n      g.conversation_id,\n      g.created_at,\n      g.direction,\n      g.message_id,\n      g.macro,\n      g.\"match\",\n      g.carrier_delivered_at,\n      g.carrier_failure_code,\n      g.total_segments,\n      g.platform_message_id,\n      g.template,\n      g.text,\n      g.topic,\n      u.northstar_id AS user_id\n    FROM\n      {{ ref('messages_flattened') }} g\n    LEFT JOIN\n      {{ source('gambit', 'conversations') }} c\n    ON g.conversation_id = c._id\n    LEFT JOIN\n      {{ ref('users') }} u\n      ON substring(c.platform_user_id, 3, 10) = u.mobile\n      AND u.mobile IS NOT NULL\n      AND u.mobile <> ''\n    WHERE\n      g.direction = 'inbound'\n      AND g.user_id IS NULL)", "compiled": true, "database": "quasar_prod_warehouse", "schema": "public", "fqn": ["ds_dbt", "gambit_messages", "gambit_messages_inbound"], "unique_id": "model.ds_dbt.gambit_messages_inbound", "package_name": "ds_dbt", "root_path": "/home/runner/work/quasar/quasar/quasar/dbt", "path": "gambit_messages/gambit_messages_inbound.sql", "original_file_path": "models/gambit_messages/gambit_messages_inbound.sql", "name": "gambit_messages_inbound", "resource_type": "model", "alias": "gambit_messages_inbound", "checksum": {"name": "sha256", "checksum": "e7722a51c689bc22a45441d8b32af91d6e578c5fad74c7d54ebe59647fc6aa87"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [{"sql": "CREATE INDEX {{ get_index_name(this, 'message_id_created_at_user_id_conversation_id') }} (message_id, created_at, user_id, conversation_id)", "transaction": true, "index": null}, {"sql": "{{ grant_select_to(this, ['dsanalyst', 'looker']) }}", "transaction": true, "index": null}], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": "gambit_messages_inbound", "schema": null, "database": null, "tags": ["gambit_messages"], "full_refresh": null}, "tags": ["gambit_messages"], "refs": [["messages_flattened"], ["messages_flattened"], ["users"]], "sources": [["gambit", "conversations"]], "depends_on": {"macros": ["macro.ds_dbt.get_index_name", "macro.ds_dbt.grant_select_to"], "nodes": ["source.ds_dbt.gambit.conversations", "model.ds_dbt.messages_flattened", "model.ds_dbt.messages_flattened", "model.ds_dbt.users"]}, "description": "Inbound messages.", "columns": {"agent_id": {"name": "agent_id", "description": "If set, the content type of the picture the member is sending us. Exp. image/png.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "attachment_content_type": {"name": "attachment_content_type", "description": "If set, the handle of the Front agent this outbound support message is from.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "attachment_url": {"name": "attachment_url", "description": "If set, link to the picture sent by the member.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "broadcast_id": {"name": "broadcast_id", "description": "If set, this message was an outbound broadcast (when direction == 'outbound-api-send'), or the User's reply to an outbound broadcast (when direction == 'inbound')", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "If set, holds a reference to the **last** campaign topic the member's conversation was in. This is useful to allow members to talk to Gambit and get quick responses (through Rivescript), without Gambit completely forgetting what state the member's interaction with a campaign topic was in. 'This is a unique identifier for the campaign'", "meta": {}, "data_type": null, "quote": null, "tags": []}, "conversation_id": {"name": "conversation_id", "description": "Conversation the Message belongs to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Message's created date.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "direction": {"name": "direction", "description": "Describes if the message is being received (inbound) or being sent (outbound-*).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "message_id": {"name": "message_id", "description": "Unique identifier for a Message (MongoDB id).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "macro": {"name": "macro", "description": "If set, this message is part of this macro's workflow. Example: subscription status updates, voting plan submission, aswering a multichoice broadcast, etc.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "match": {"name": "match", "description": "Rivescript trigger matched by inbound text.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "carrier_delivered_at": {"name": "carrier_delivered_at", "description": "Date when we received a delivery confirmation from the carrier.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "carrier_failure_code": {"name": "carrier_failure_code", "description": "Error code reported by the carrier (Only for outbound messages).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_segments": {"name": "total_segments", "description": "Number of chunks the message is broken into by the SMS API.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "platform_message_id": {"name": "platform_message_id", "description": "The Message identifier per platform.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "template": {"name": "template", "description": "If set, template of outbound message sent (e.g. askQuantity, completedMenu).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "text": {"name": "text", "description": "Body of the message.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "topic": {"name": "topic", "description": "Holds a reference to the **last** campaign topic the member's conversation was in. This is useful to allow members to talk to Gambit and get quick responses (through Rivescript), without Gambit completely forgetting what state the member's interaction with a campaign topic was in.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "user_id": {"name": "user_id", "description": "The Northstar id of the member.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/gambit_messages/schema.yml", "build_path": "../../docs/compiled/ds_dbt/models/gambit_messages/gambit_messages_inbound.sql", "deferred": false, "compiled_sql": "SELECT\n  *\n  FROM\n    \"quasar_prod_warehouse\".\"public\".\"messages_flattened\" f\n  WHERE\n    f.direction = 'inbound'\n    AND f.user_id IS NOT NULL\n  UNION ALL\n    (SELECT\n      g.agent_id,\n      g.attachment_url,\n      g.attachment_content_type,\n      g.broadcast_id,\n      g.campaign_id,\n      g.conversation_id,\n      g.created_at,\n      g.direction,\n      g.message_id,\n      g.macro,\n      g.\"match\",\n      g.carrier_delivered_at,\n      g.carrier_failure_code,\n      g.total_segments,\n      g.platform_message_id,\n      g.template,\n      g.text,\n      g.topic,\n      u.northstar_id AS user_id\n    FROM\n      \"quasar_prod_warehouse\".\"public\".\"messages_flattened\" g\n    LEFT JOIN\n      \"quasar_prod_warehouse\".\"ft_gambit_conversations_api\".\"conversations\" c\n    ON g.conversation_id = c._id\n    LEFT JOIN\n      \"quasar_prod_warehouse\".\"public\".\"users\" u\n      ON substring(c.platform_user_id, 3, 10) = u.mobile\n      AND u.mobile IS NOT NULL\n      AND u.mobile <> ''\n    WHERE\n      g.direction = 'inbound'\n      AND g.user_id IS NULL)", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "SELECT\n  *\n  FROM\n    \"quasar_prod_warehouse\".\"public\".\"messages_flattened\" f\n  WHERE\n    f.direction = 'inbound'\n    AND f.user_id IS NOT NULL\n  UNION ALL\n    (SELECT\n      g.agent_id,\n      g.attachment_url,\n      g.attachment_content_type,\n      g.broadcast_id,\n      g.campaign_id,\n      g.conversation_id,\n      g.created_at,\n      g.direction,\n      g.message_id,\n      g.macro,\n      g.\"match\",\n      g.carrier_delivered_at,\n      g.carrier_failure_code,\n      g.total_segments,\n      g.platform_message_id,\n      g.template,\n      g.text,\n      g.topic,\n      u.northstar_id AS user_id\n    FROM\n      \"quasar_prod_warehouse\".\"public\".\"messages_flattened\" g\n    LEFT JOIN\n      \"quasar_prod_warehouse\".\"ft_gambit_conversations_api\".\"conversations\" c\n    ON g.conversation_id = c._id\n    LEFT JOIN\n      \"quasar_prod_warehouse\".\"public\".\"users\" u\n      ON substring(c.platform_user_id, 3, 10) = u.mobile\n      AND u.mobile IS NOT NULL\n      AND u.mobile <> ''\n    WHERE\n      g.direction = 'inbound'\n      AND g.user_id IS NULL)"}, "error": null, "status": null, "execution_time": 0.026583433151245117, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-02-23T21:28:55.669925Z", "completed_at": "2021-02-23T21:28:55.695174Z"}, {"name": "execute", "started_at": "2021-02-23T21:28:55.695531Z", "completed_at": "2021-02-23T21:28:55.695539Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "SELECT\n    f.campaign_id,\n    f.conversation_id,\n    f.broadcast_id,\n    f.created_at,\n    f.direction,\n    f.message_id,\n    f.macro,\n    f.\"match\",\n    f.carrier_delivered_at,\n    f.carrier_failure_code,\n    f.platform_message_id,\n    f.template,\n    f.text,\n    f.topic,\n    f.user_id\n  FROM\n    {{ ref('messages_flattened') }} f\n  WHERE\n    f.direction <> 'inbound'\n    AND f.user_id IS NOT NULL\n  UNION ALL\n    (SELECT\n      g.campaign_id,\n      g.conversation_id,\n      g.broadcast_id,\n      g.created_at,\n      g.direction,\n      g.message_id,\n      g.macro,\n      g.\"match\",\n      g.carrier_delivered_at,\n      g.carrier_failure_code,\n      g.platform_message_id,\n      g.template,\n      g.text,\n      g.topic,\n      u.northstar_id AS user_id\n      FROM\n        {{ ref('messages_flattened') }} g\n      LEFT JOIN\n        {{ source('gambit', 'conversations') }} c\n      ON g.conversation_id = c._id\n      LEFT JOIN\n        {{ ref('users') }} u\n      ON substring(c.platform_user_id, 3, 10) = u.mobile\n        AND u.mobile IS NOT NULL\n        AND u.mobile <> ''\n      WHERE\n        g.direction <> 'inbound'\n        AND g.user_id IS NULL)", "compiled": true, "database": "quasar_prod_warehouse", "schema": "public", "fqn": ["ds_dbt", "gambit_messages", "gambit_messages_outbound"], "unique_id": "model.ds_dbt.gambit_messages_outbound", "package_name": "ds_dbt", "root_path": "/home/runner/work/quasar/quasar/quasar/dbt", "path": "gambit_messages/gambit_messages_outbound.sql", "original_file_path": "models/gambit_messages/gambit_messages_outbound.sql", "name": "gambit_messages_outbound", "resource_type": "model", "alias": "gambit_messages_outbound", "checksum": {"name": "sha256", "checksum": "d20066290cb1c3a9f16fd86aa96cc4964dea5a24c347199eb02452c3a7523803"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [{"sql": "CREATE INDEX {{ get_index_name(this, 'message_id_created_at_user_id_conversation_id') }} (message_id, created_at, user_id, conversation_id)", "transaction": true, "index": null}, {"sql": "CREATE INDEX {{ get_index_name(this, 'created_at_carrier_failure_code') }} (created_at, carrier_failure_code)", "transaction": true, "index": null}, {"sql": "{{ grant_select_to(this, ['dsanalyst', 'looker']) }}", "transaction": true, "index": null}], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": "gambit_messages_outbound", "schema": null, "database": null, "tags": ["gambit_messages"], "full_refresh": null}, "tags": ["gambit_messages"], "refs": [["messages_flattened"], ["messages_flattened"], ["users"]], "sources": [["gambit", "conversations"]], "depends_on": {"macros": ["macro.ds_dbt.get_index_name", "macro.ds_dbt.grant_select_to"], "nodes": ["source.ds_dbt.gambit.conversations", "model.ds_dbt.messages_flattened", "model.ds_dbt.messages_flattened", "model.ds_dbt.users"]}, "description": "Outbound messages.", "columns": {"agent_id": {"name": "agent_id", "description": "If set, the content type of the picture the member is sending us. Exp. image/png.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "attachment_content_type": {"name": "attachment_content_type", "description": "If set, the handle of the Front agent this outbound support message is from.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "attachment_url": {"name": "attachment_url", "description": "If set, link to the picture sent by the member.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "broadcast_id": {"name": "broadcast_id", "description": "If set, this message was an outbound broadcast (when direction == 'outbound-api-send'), or the User's reply to an outbound broadcast (when direction == 'inbound')", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id": {"name": "campaign_id", "description": "If set, holds a reference to the **last** campaign topic the member's conversation was in. This is useful to allow members to talk to Gambit and get quick responses (through Rivescript), without Gambit completely forgetting what state the member's interaction with a campaign topic was in. 'This is a unique identifier for the campaign'", "meta": {}, "data_type": null, "quote": null, "tags": []}, "conversation_id": {"name": "conversation_id", "description": "Conversation the Message belongs to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Message's created date.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "direction": {"name": "direction", "description": "Describes if the message is being received (inbound) or being sent (outbound-*).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "message_id": {"name": "message_id", "description": "Unique identifier for a Message (MongoDB id).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "macro": {"name": "macro", "description": "If set, this message is part of this macro's workflow. Example: subscription status updates, voting plan submission, aswering a multichoice broadcast, etc.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "match": {"name": "match", "description": "Rivescript trigger matched by inbound text.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "carrier_delivered_at": {"name": "carrier_delivered_at", "description": "Date when we received a delivery confirmation from the carrier.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "carrier_failure_code": {"name": "carrier_failure_code", "description": "Error code reported by the carrier (Only for outbound messages).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_segments": {"name": "total_segments", "description": "Number of chunks the message is broken into by the SMS API.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "platform_message_id": {"name": "platform_message_id", "description": "The Message identifier per platform.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "template": {"name": "template", "description": "If set, template of outbound message sent (e.g. askQuantity, completedMenu).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "text": {"name": "text", "description": "Body of the message.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "topic": {"name": "topic", "description": "Holds a reference to the **last** campaign topic the member's conversation was in. This is useful to allow members to talk to Gambit and get quick responses (through Rivescript), without Gambit completely forgetting what state the member's interaction with a campaign topic was in.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "user_id": {"name": "user_id", "description": "The Northstar id of the member.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/gambit_messages/schema.yml", "build_path": "../../docs/compiled/ds_dbt/models/gambit_messages/gambit_messages_outbound.sql", "deferred": false, "compiled_sql": "SELECT\n    f.campaign_id,\n    f.conversation_id,\n    f.broadcast_id,\n    f.created_at,\n    f.direction,\n    f.message_id,\n    f.macro,\n    f.\"match\",\n    f.carrier_delivered_at,\n    f.carrier_failure_code,\n    f.platform_message_id,\n    f.template,\n    f.text,\n    f.topic,\n    f.user_id\n  FROM\n    \"quasar_prod_warehouse\".\"public\".\"messages_flattened\" f\n  WHERE\n    f.direction <> 'inbound'\n    AND f.user_id IS NOT NULL\n  UNION ALL\n    (SELECT\n      g.campaign_id,\n      g.conversation_id,\n      g.broadcast_id,\n      g.created_at,\n      g.direction,\n      g.message_id,\n      g.macro,\n      g.\"match\",\n      g.carrier_delivered_at,\n      g.carrier_failure_code,\n      g.platform_message_id,\n      g.template,\n      g.text,\n      g.topic,\n      u.northstar_id AS user_id\n      FROM\n        \"quasar_prod_warehouse\".\"public\".\"messages_flattened\" g\n      LEFT JOIN\n        \"quasar_prod_warehouse\".\"ft_gambit_conversations_api\".\"conversations\" c\n      ON g.conversation_id = c._id\n      LEFT JOIN\n        \"quasar_prod_warehouse\".\"public\".\"users\" u\n      ON substring(c.platform_user_id, 3, 10) = u.mobile\n        AND u.mobile IS NOT NULL\n        AND u.mobile <> ''\n      WHERE\n        g.direction <> 'inbound'\n        AND g.user_id IS NULL)", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "SELECT\n    f.campaign_id,\n    f.conversation_id,\n    f.broadcast_id,\n    f.created_at,\n    f.direction,\n    f.message_id,\n    f.macro,\n    f.\"match\",\n    f.carrier_delivered_at,\n    f.carrier_failure_code,\n    f.platform_message_id,\n    f.template,\n    f.text,\n    f.topic,\n    f.user_id\n  FROM\n    \"quasar_prod_warehouse\".\"public\".\"messages_flattened\" f\n  WHERE\n    f.direction <> 'inbound'\n    AND f.user_id IS NOT NULL\n  UNION ALL\n    (SELECT\n      g.campaign_id,\n      g.conversation_id,\n      g.broadcast_id,\n      g.created_at,\n      g.direction,\n      g.message_id,\n      g.macro,\n      g.\"match\",\n      g.carrier_delivered_at,\n      g.carrier_failure_code,\n      g.platform_message_id,\n      g.template,\n      g.text,\n      g.topic,\n      u.northstar_id AS user_id\n      FROM\n        \"quasar_prod_warehouse\".\"public\".\"messages_flattened\" g\n      LEFT JOIN\n        \"quasar_prod_warehouse\".\"ft_gambit_conversations_api\".\"conversations\" c\n      ON g.conversation_id = c._id\n      LEFT JOIN\n        \"quasar_prod_warehouse\".\"public\".\"users\" u\n      ON substring(c.platform_user_id, 3, 10) = u.mobile\n        AND u.mobile IS NOT NULL\n        AND u.mobile <> ''\n      WHERE\n        g.direction <> 'inbound'\n        AND g.user_id IS NULL)"}, "error": null, "status": null, "execution_time": 0.02800750732421875, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-02-23T21:28:55.696741Z", "completed_at": "2021-02-23T21:28:55.723608Z"}, {"name": "execute", "started_at": "2021-02-23T21:28:55.723889Z", "completed_at": "2021-02-23T21:28:55.723897Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "SELECT first_name, \n       last_name, \n       address_street_1, \n       address_street_2,\n       city,\n       state,\n       zipcode,\n       mobile,\n       email,\n       northstar_id\nFROM {{ ref('users') }}", "compiled": true, "database": "quasar_prod_warehouse", "schema": "public", "fqn": ["ds_dbt", "tmc_users", "tmc_users_out"], "unique_id": "model.ds_dbt.tmc_users_out", "package_name": "ds_dbt", "root_path": "/home/runner/work/quasar/quasar/quasar/dbt", "path": "tmc_users/tmc_users_out.sql", "original_file_path": "models/tmc_users/tmc_users_out.sql", "name": "tmc_users_out", "resource_type": "model", "alias": "tmc_users_out", "checksum": {"name": "sha256", "checksum": "8ee991d407cf6e03c57f74641a88f76164e92110df174f207e9e30949fcc029a"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [{"sql": "ALTER TABLE {{ this }} SET SCHEMA tmc_out", "transaction": true, "index": null}, {"sql": "GRANT SELECT ON ALL TABLES IN SCHEMA tmc_out TO tmc", "transaction": true, "index": null}], "pre-hook": [{"sql": "DROP TABLE IF EXISTS tmc_out.tmc_users_out CASCADE", "transaction": true, "index": null}], "vars": {}, "quoting": {}, "column_types": {}, "alias": "tmc_users_out", "schema": null, "database": null, "tags": ["tmc_users"], "full_refresh": null}, "tags": ["tmc_users"], "refs": [["users"]], "sources": [], "depends_on": {"macros": [], "nodes": ["model.ds_dbt.users"]}, "description": "A table containing latest user data for ingestion by The Movement Cooperative.", "columns": {"first_name": {"name": "first_name", "description": "User's first name", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_name": {"name": "last_name", "description": "User's last name", "meta": {}, "data_type": null, "quote": null, "tags": []}, "address_street_1": {"name": "address_street_1", "description": "First line of user's street address", "meta": {}, "data_type": null, "quote": null, "tags": []}, "address_street_2": {"name": "address_street_2", "description": "Second line of user's street address", "meta": {}, "data_type": null, "quote": null, "tags": []}, "city": {"name": "city", "description": "User's city", "meta": {}, "data_type": null, "quote": null, "tags": []}, "state": {"name": "state", "description": "User's state", "meta": {}, "data_type": null, "quote": null, "tags": []}, "zipcode": {"name": "zipcode", "description": "Postal code where the action takes place", "meta": {}, "data_type": null, "quote": null, "tags": []}, "mobile": {"name": "mobile", "description": "Users's mobile phone number", "meta": {}, "data_type": null, "quote": null, "tags": []}, "email": {"name": "email", "description": "Email address of the user.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "northstar_id": {"name": "northstar_id", "description": "The Northstar ID of the user who generated the event.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/tmc_users/schema.yml", "build_path": "../../docs/compiled/ds_dbt/models/tmc_users/tmc_users_out.sql", "deferred": false, "compiled_sql": "SELECT first_name, \n       last_name, \n       address_street_1, \n       address_street_2,\n       city,\n       state,\n       zipcode,\n       mobile,\n       email,\n       northstar_id\nFROM \"quasar_prod_warehouse\".\"public\".\"users\"", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "SELECT first_name, \n       last_name, \n       address_street_1, \n       address_street_2,\n       city,\n       state,\n       zipcode,\n       mobile,\n       email,\n       northstar_id\nFROM \"quasar_prod_warehouse\".\"public\".\"users\""}, "error": null, "status": null, "execution_time": 0.018130064010620117, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-02-23T21:28:55.725147Z", "completed_at": "2021-02-23T21:28:55.742083Z"}, {"name": "execute", "started_at": "2021-02-23T21:28:55.742535Z", "completed_at": "2021-02-23T21:28:55.742542Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='WARN') }}{{ test_relationships_distinct(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "relationships_distinct", "kwargs": {"to": "ref('users')", "field": "northstar_id", "column_name": "northstar_id", "model": "{{ ref('snowplow_base_event') }}"}}, "compiled": true, "database": "quasar_prod_warehouse", "schema": "public", "fqn": ["ds_dbt", "schema_test", "relationships_distinct_snowplow_base_event_northstar_id__northstar_id__ref_users_"], "unique_id": "test.ds_dbt.relationships_distinct_snowplow_base_event_northstar_id__northstar_id__ref_users_", "package_name": "ds_dbt", "root_path": "/home/runner/work/quasar/quasar/quasar/dbt", "path": "schema_test/relationships_distinct_snowplow_base_event_a807bb8684014b380960f5018bbec40d.sql", "original_file_path": "models/phoenix_events/schema.yml", "name": "relationships_distinct_snowplow_base_event_northstar_id__northstar_id__ref_users_", "resource_type": "test", "alias": "relationships_distinct_snowplow_base_event_northstar_id__northstar_id__ref_users_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "WARN"}, "tags": ["schema"], "refs": [["users"], ["snowplow_base_event"]], "sources": [], "depends_on": {"macros": ["macro.ds_dbt.test_relationships_distinct"], "nodes": ["model.ds_dbt.users", "model.ds_dbt.snowplow_base_event"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "../../docs/compiled/ds_dbt/models/phoenix_events/schema.yml/schema_test/relationships_distinct_snowplow_base_event_a807bb8684014b380960f5018bbec40d.sql", "deferred": false, "compiled_sql": "\n    SELECT\n        count(DISTINCT a.northstar_id) AS orphan_ids\n    FROM\n        \"quasar_prod_warehouse\".\"public\".\"snowplow_base_event\" a\n        LEFT JOIN \"quasar_prod_warehouse\".\"public\".\"users\" b ON a.northstar_id = b.northstar_id\n    WHERE\n        a.northstar_id IS NOT NULL\n        AND b.northstar_id IS NULL\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n    SELECT\n        count(DISTINCT a.northstar_id) AS orphan_ids\n    FROM\n        \"quasar_prod_warehouse\".\"public\".\"snowplow_base_event\" a\n        LEFT JOIN \"quasar_prod_warehouse\".\"public\".\"users\" b ON a.northstar_id = b.northstar_id\n    WHERE\n        a.northstar_id IS NOT NULL\n        AND b.northstar_id IS NULL\n", "column_name": "northstar_id"}, "error": null, "status": null, "execution_time": 0.014890193939208984, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-02-23T21:28:55.743624Z", "completed_at": "2021-02-23T21:28:55.757283Z"}, {"name": "execute", "started_at": "2021-02-23T21:28:55.757765Z", "completed_at": "2021-02-23T21:28:55.757772Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "--user_rb_summary aggregates traits of multiple Report-Backs per SignUp into a single row\n--so they can be analized as a single fact of reporting back\n--user_rb_summary is used in the final table which will be referenced by Looker in view:\n--campaign_funnel\n--which is used to generate dashboards:\n--Campaign Journey Dashboard (https://dsdata.looker.com/dashboards/183)\n--Marketing Journey Dashboard (https://dsdata.looker.com/dashboards/184)\n\n--RBs get info\nWITH rbs_all AS (\n\tSELECT\n\t\tr.signup_id,\n\t\tr.post_id,\n\t\tr.post_created_at,\n\t\tr.post_type,\n\t\tr.post_source_bucket,\n\t\tCASE\n\t\t\tWHEN pa.action_type = ''\n\t\t\tOR pa.action_type = ' ' THEN NULL\n\t\t\tELSE pa.action_type\n\t\tEND AS action_type,\n\t\tCASE\n\t\t\tWHEN pa.online = TRUE THEN 'Online'\n\t\t\tWHEN pa.online = FALSE THEN 'Offline'\n\t\tEND AS online_offline,\n\t\tCASE\n\t\t\tWHEN pa.scholarship_entry = TRUE THEN 'Scholarship'\n\t\t\tWHEN pa.scholarship_entry = FALSE THEN 'Not Scholarship'\n\t\tEND AS scholarship\n\tFROM\n\t\t{{ ref('reportbacks') }} r\n\t\tJOIN {{ ref('posts') }} p ON (r.post_id = p.id)\n\t\tJOIN {{ ref('post_actions') }} pa ON (p.action_id = pa.id)\n\tWHERE\n\t\tr.signup_id > 0\n\tORDER BY\n\t\tr.signup_id\n),\n--RBs unique post types\nrbs_post_types AS (\n\tSELECT\n\t\tDISTINCT signup_id,\n\t\tpost_type\n\tFROM\n\t\trbs_all\n),\n--RBs agg post types\nrbs_post_types_agg AS (\n\tSELECT\n\t\tsignup_id,\n\t\tstring_agg(\n\t\t\tpost_type,\n\t\t\t' , '\n\t\t\tORDER BY\n\t\t\t\tpost_type DESC\n\t\t) AS post_types\n\tFROM\n\t\trbs_post_types\n\tGROUP BY\n\t\tsignup_id\n),\n--RBs unique post sources\nrbs_post_sources AS (\n\tSELECT\n\t\tDISTINCT signup_id,\n\t\tpost_source_bucket\n\tFROM\n\t\trbs_all\n),\n--RBs agg post types\nrbs_post_sources_agg AS (\n\tSELECT\n\t\tsignup_id,\n\t\tstring_agg(\n\t\t\tpost_source_bucket,\n\t\t\t' , '\n\t\t\tORDER BY\n\t\t\t\tpost_source_bucket DESC\n\t\t) AS post_sources\n\tFROM\n\t\trbs_post_sources\n\tGROUP BY\n\t\tsignup_id\n),\n--RBs unique action types\nrbs_action_types AS (\n\tSELECT\n\t\tDISTINCT signup_id,\n\t\taction_type\n\tFROM\n\t\trbs_all\n\tWHERE\n\t\taction_type IS NOT NULL\n),\n--RBs agg action types\nrbs_action_types_agg AS (\n\tSELECT\n\t\tsignup_id,\n\t\tstring_agg(\n\t\t\taction_type,\n\t\t\t' , '\n\t\t\tORDER BY\n\t\t\t\taction_type DESC\n\t\t) AS action_types\n\tFROM\n\t\trbs_action_types\n\tGROUP BY\n\t\tsignup_id\n),\n--RBs unique online/offline\nrbs_online_offline AS (\n\tSELECT\n\t\tDISTINCT signup_id,\n\t\tonline_offline\n\tFROM\n\t\trbs_all\n\tWHERE\n\t\tonline_offline IS NOT NULL\n),\n--RBs agg action types\nrbs_online_offline_agg AS (\n\tSELECT\n\t\tsignup_id,\n\t\tstring_agg(\n\t\t\tonline_offline,\n\t\t\t' , '\n\t\t\tORDER BY\n\t\t\t\tonline_offline DESC\n\t\t) AS online_offline\n\tFROM\n\t\trbs_online_offline\n\tGROUP BY\n\t\tsignup_id\n),\n--RBs get summarized\nrb_summ AS (\n\tSELECT\n\t\tr.signup_id,\n\t\tcount(r.post_id) AS num_rbs,\n\t\tmin(r.post_created_at) AS first_rb\n\tFROM\n\t\trbs_all r\n\tGROUP BY\n\t\tr.signup_id\n)\nSELECT\n\tr.signup_id,\n\tr.num_rbs,\n\tr.first_rb,\n\trs.post_sources,\n\trp.post_types,\n\tra.action_types,\n\tro.online_offline\nFROM\n\trb_summ r\n\tLEFT JOIN rbs_post_types_agg rp ON (r.signup_id = rp.signup_id)\n\tLEFT JOIN rbs_post_sources_agg rs ON (r.signup_id = rs.signup_id)\n\tLEFT JOIN rbs_action_types_agg ra ON (r.signup_id = ra.signup_id)\n\tLEFT JOIN rbs_online_offline_agg ro ON (r.signup_id = ro.signup_id)", "compiled": true, "database": "quasar_prod_warehouse", "schema": "public", "fqn": ["ds_dbt", "user_activity", "user_rb_summary"], "unique_id": "model.ds_dbt.user_rb_summary", "package_name": "ds_dbt", "root_path": "/home/runner/work/quasar/quasar/quasar/dbt", "path": "user_activity/user_rb_summary.sql", "original_file_path": "models/user_activity/user_rb_summary.sql", "name": "user_rb_summary", "resource_type": "model", "alias": "user_rb_summary", "checksum": {"name": "sha256", "checksum": "3ea8f0f99919efe8335308bf20f6afd6f8e209da435dadf9917bb13678f8eae7"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [{"sql": "CREATE UNIQUE INDEX {{ get_index_name(this, 'unique_signup_id') }} (signup_id)", "transaction": true, "index": null}, {"sql": "{{ grant_select_to(this, ['dsanalyst', 'looker']) }}", "transaction": true, "index": null}], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": "user_rb_summary", "schema": null, "database": null, "tags": ["user_activity"], "full_refresh": null}, "tags": ["user_activity"], "refs": [["reportbacks"], ["posts"], ["post_actions"]], "sources": [], "depends_on": {"macros": ["macro.ds_dbt.get_index_name", "macro.ds_dbt.grant_select_to"], "nodes": ["model.ds_dbt.reportbacks", "model.ds_dbt.posts", "model.ds_dbt.post_actions"]}, "description": "Table that aggregates traits of multiple Report-Backs per SignUp into a single row.", "columns": {"signup_id": {"name": "signup_id", "description": "Unique identifier for the signup", "meta": {}, "data_type": null, "quote": null, "tags": []}, "num_rbs": {"name": "num_rbs", "description": "Quantity of reportbacks for the user", "meta": {}, "data_type": null, "quote": null, "tags": []}, "first_rb": {"name": "first_rb", "description": "When the first reportback occurred in UTC (eg. 2018-01-01 12:00:00)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "post_sources": {"name": "post_sources", "description": "Aggregated list of the grouping buckets for the origin of the posts (e.g. sms, web)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "post_types": {"name": "post_types", "description": "Aggregated list of post types of the posts (e.g. photo, phone-call, share-social, text, voter-reg, email)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "action_types": {"name": "action_types", "description": "Aggregated list of Action Types of the Posts (e.g. attend-event, share-something, make-something, collect-something, contact-decisionmaker, donate-something, host-event, have-a-conversation, flag-content, sign-petition, submit-tip, other)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "online_offline": {"name": "online_offline", "description": "Aggregate. Whether the posts are online, offline (IRL), or both, e.g. (\"Online\", \"Offline\", \"Online , Offline\")", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/user_activity/schema.yml", "build_path": "../../docs/compiled/ds_dbt/models/user_activity/user_rb_summary.sql", "deferred": false, "compiled_sql": "--user_rb_summary aggregates traits of multiple Report-Backs per SignUp into a single row\n--so they can be analized as a single fact of reporting back\n--user_rb_summary is used in the final table which will be referenced by Looker in view:\n--campaign_funnel\n--which is used to generate dashboards:\n--Campaign Journey Dashboard (https://dsdata.looker.com/dashboards/183)\n--Marketing Journey Dashboard (https://dsdata.looker.com/dashboards/184)\n\n--RBs get info\nWITH rbs_all AS (\n\tSELECT\n\t\tr.signup_id,\n\t\tr.post_id,\n\t\tr.post_created_at,\n\t\tr.post_type,\n\t\tr.post_source_bucket,\n\t\tCASE\n\t\t\tWHEN pa.action_type = ''\n\t\t\tOR pa.action_type = ' ' THEN NULL\n\t\t\tELSE pa.action_type\n\t\tEND AS action_type,\n\t\tCASE\n\t\t\tWHEN pa.online = TRUE THEN 'Online'\n\t\t\tWHEN pa.online = FALSE THEN 'Offline'\n\t\tEND AS online_offline,\n\t\tCASE\n\t\t\tWHEN pa.scholarship_entry = TRUE THEN 'Scholarship'\n\t\t\tWHEN pa.scholarship_entry = FALSE THEN 'Not Scholarship'\n\t\tEND AS scholarship\n\tFROM\n\t\t\"quasar_prod_warehouse\".\"public\".\"reportbacks\" r\n\t\tJOIN \"quasar_prod_warehouse\".\"public\".\"posts\" p ON (r.post_id = p.id)\n\t\tJOIN \"quasar_prod_warehouse\".\"public\".\"post_actions\" pa ON (p.action_id = pa.id)\n\tWHERE\n\t\tr.signup_id > 0\n\tORDER BY\n\t\tr.signup_id\n),\n--RBs unique post types\nrbs_post_types AS (\n\tSELECT\n\t\tDISTINCT signup_id,\n\t\tpost_type\n\tFROM\n\t\trbs_all\n),\n--RBs agg post types\nrbs_post_types_agg AS (\n\tSELECT\n\t\tsignup_id,\n\t\tstring_agg(\n\t\t\tpost_type,\n\t\t\t' , '\n\t\t\tORDER BY\n\t\t\t\tpost_type DESC\n\t\t) AS post_types\n\tFROM\n\t\trbs_post_types\n\tGROUP BY\n\t\tsignup_id\n),\n--RBs unique post sources\nrbs_post_sources AS (\n\tSELECT\n\t\tDISTINCT signup_id,\n\t\tpost_source_bucket\n\tFROM\n\t\trbs_all\n),\n--RBs agg post types\nrbs_post_sources_agg AS (\n\tSELECT\n\t\tsignup_id,\n\t\tstring_agg(\n\t\t\tpost_source_bucket,\n\t\t\t' , '\n\t\t\tORDER BY\n\t\t\t\tpost_source_bucket DESC\n\t\t) AS post_sources\n\tFROM\n\t\trbs_post_sources\n\tGROUP BY\n\t\tsignup_id\n),\n--RBs unique action types\nrbs_action_types AS (\n\tSELECT\n\t\tDISTINCT signup_id,\n\t\taction_type\n\tFROM\n\t\trbs_all\n\tWHERE\n\t\taction_type IS NOT NULL\n),\n--RBs agg action types\nrbs_action_types_agg AS (\n\tSELECT\n\t\tsignup_id,\n\t\tstring_agg(\n\t\t\taction_type,\n\t\t\t' , '\n\t\t\tORDER BY\n\t\t\t\taction_type DESC\n\t\t) AS action_types\n\tFROM\n\t\trbs_action_types\n\tGROUP BY\n\t\tsignup_id\n),\n--RBs unique online/offline\nrbs_online_offline AS (\n\tSELECT\n\t\tDISTINCT signup_id,\n\t\tonline_offline\n\tFROM\n\t\trbs_all\n\tWHERE\n\t\tonline_offline IS NOT NULL\n),\n--RBs agg action types\nrbs_online_offline_agg AS (\n\tSELECT\n\t\tsignup_id,\n\t\tstring_agg(\n\t\t\tonline_offline,\n\t\t\t' , '\n\t\t\tORDER BY\n\t\t\t\tonline_offline DESC\n\t\t) AS online_offline\n\tFROM\n\t\trbs_online_offline\n\tGROUP BY\n\t\tsignup_id\n),\n--RBs get summarized\nrb_summ AS (\n\tSELECT\n\t\tr.signup_id,\n\t\tcount(r.post_id) AS num_rbs,\n\t\tmin(r.post_created_at) AS first_rb\n\tFROM\n\t\trbs_all r\n\tGROUP BY\n\t\tr.signup_id\n)\nSELECT\n\tr.signup_id,\n\tr.num_rbs,\n\tr.first_rb,\n\trs.post_sources,\n\trp.post_types,\n\tra.action_types,\n\tro.online_offline\nFROM\n\trb_summ r\n\tLEFT JOIN rbs_post_types_agg rp ON (r.signup_id = rp.signup_id)\n\tLEFT JOIN rbs_post_sources_agg rs ON (r.signup_id = rs.signup_id)\n\tLEFT JOIN rbs_action_types_agg ra ON (r.signup_id = ra.signup_id)\n\tLEFT JOIN rbs_online_offline_agg ro ON (r.signup_id = ro.signup_id)", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "--user_rb_summary aggregates traits of multiple Report-Backs per SignUp into a single row\n--so they can be analized as a single fact of reporting back\n--user_rb_summary is used in the final table which will be referenced by Looker in view:\n--campaign_funnel\n--which is used to generate dashboards:\n--Campaign Journey Dashboard (https://dsdata.looker.com/dashboards/183)\n--Marketing Journey Dashboard (https://dsdata.looker.com/dashboards/184)\n\n--RBs get info\nWITH rbs_all AS (\n\tSELECT\n\t\tr.signup_id,\n\t\tr.post_id,\n\t\tr.post_created_at,\n\t\tr.post_type,\n\t\tr.post_source_bucket,\n\t\tCASE\n\t\t\tWHEN pa.action_type = ''\n\t\t\tOR pa.action_type = ' ' THEN NULL\n\t\t\tELSE pa.action_type\n\t\tEND AS action_type,\n\t\tCASE\n\t\t\tWHEN pa.online = TRUE THEN 'Online'\n\t\t\tWHEN pa.online = FALSE THEN 'Offline'\n\t\tEND AS online_offline,\n\t\tCASE\n\t\t\tWHEN pa.scholarship_entry = TRUE THEN 'Scholarship'\n\t\t\tWHEN pa.scholarship_entry = FALSE THEN 'Not Scholarship'\n\t\tEND AS scholarship\n\tFROM\n\t\t\"quasar_prod_warehouse\".\"public\".\"reportbacks\" r\n\t\tJOIN \"quasar_prod_warehouse\".\"public\".\"posts\" p ON (r.post_id = p.id)\n\t\tJOIN \"quasar_prod_warehouse\".\"public\".\"post_actions\" pa ON (p.action_id = pa.id)\n\tWHERE\n\t\tr.signup_id > 0\n\tORDER BY\n\t\tr.signup_id\n),\n--RBs unique post types\nrbs_post_types AS (\n\tSELECT\n\t\tDISTINCT signup_id,\n\t\tpost_type\n\tFROM\n\t\trbs_all\n),\n--RBs agg post types\nrbs_post_types_agg AS (\n\tSELECT\n\t\tsignup_id,\n\t\tstring_agg(\n\t\t\tpost_type,\n\t\t\t' , '\n\t\t\tORDER BY\n\t\t\t\tpost_type DESC\n\t\t) AS post_types\n\tFROM\n\t\trbs_post_types\n\tGROUP BY\n\t\tsignup_id\n),\n--RBs unique post sources\nrbs_post_sources AS (\n\tSELECT\n\t\tDISTINCT signup_id,\n\t\tpost_source_bucket\n\tFROM\n\t\trbs_all\n),\n--RBs agg post types\nrbs_post_sources_agg AS (\n\tSELECT\n\t\tsignup_id,\n\t\tstring_agg(\n\t\t\tpost_source_bucket,\n\t\t\t' , '\n\t\t\tORDER BY\n\t\t\t\tpost_source_bucket DESC\n\t\t) AS post_sources\n\tFROM\n\t\trbs_post_sources\n\tGROUP BY\n\t\tsignup_id\n),\n--RBs unique action types\nrbs_action_types AS (\n\tSELECT\n\t\tDISTINCT signup_id,\n\t\taction_type\n\tFROM\n\t\trbs_all\n\tWHERE\n\t\taction_type IS NOT NULL\n),\n--RBs agg action types\nrbs_action_types_agg AS (\n\tSELECT\n\t\tsignup_id,\n\t\tstring_agg(\n\t\t\taction_type,\n\t\t\t' , '\n\t\t\tORDER BY\n\t\t\t\taction_type DESC\n\t\t) AS action_types\n\tFROM\n\t\trbs_action_types\n\tGROUP BY\n\t\tsignup_id\n),\n--RBs unique online/offline\nrbs_online_offline AS (\n\tSELECT\n\t\tDISTINCT signup_id,\n\t\tonline_offline\n\tFROM\n\t\trbs_all\n\tWHERE\n\t\tonline_offline IS NOT NULL\n),\n--RBs agg action types\nrbs_online_offline_agg AS (\n\tSELECT\n\t\tsignup_id,\n\t\tstring_agg(\n\t\t\tonline_offline,\n\t\t\t' , '\n\t\t\tORDER BY\n\t\t\t\tonline_offline DESC\n\t\t) AS online_offline\n\tFROM\n\t\trbs_online_offline\n\tGROUP BY\n\t\tsignup_id\n),\n--RBs get summarized\nrb_summ AS (\n\tSELECT\n\t\tr.signup_id,\n\t\tcount(r.post_id) AS num_rbs,\n\t\tmin(r.post_created_at) AS first_rb\n\tFROM\n\t\trbs_all r\n\tGROUP BY\n\t\tr.signup_id\n)\nSELECT\n\tr.signup_id,\n\tr.num_rbs,\n\tr.first_rb,\n\trs.post_sources,\n\trp.post_types,\n\tra.action_types,\n\tro.online_offline\nFROM\n\trb_summ r\n\tLEFT JOIN rbs_post_types_agg rp ON (r.signup_id = rp.signup_id)\n\tLEFT JOIN rbs_post_sources_agg rs ON (r.signup_id = rs.signup_id)\n\tLEFT JOIN rbs_action_types_agg ra ON (r.signup_id = ra.signup_id)\n\tLEFT JOIN rbs_online_offline_agg ro ON (r.signup_id = ro.signup_id)"}, "error": null, "status": null, "execution_time": 0.018903255462646484, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-02-23T21:28:55.758939Z", "completed_at": "2021-02-23T21:28:55.776817Z"}, {"name": "execute", "started_at": "2021-02-23T21:28:55.777080Z", "completed_at": "2021-02-23T21:28:55.777086Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "-- Each session can be thought of a 0 - 3600 seconds (60 min) block of time\n-- It holds event metadata for the duration of the session\nWITH sessions AS (\nSELECT\n    session_id,\n    min(device_id) AS device_id,\n    min(event_datetime) AS landing_datetime,\n    max(event_datetime) AS ending_datetime,\n    date_part(\n\t'seconds', max(event_datetime) - min(event_datetime)\n    ) AS session_duration_seconds,\n    count(DISTINCT CASE WHEN event_name = 'view' THEN \"path\" END) AS num_pages_viewed\nFROM {{ ref('snowplow_raw_events') }}\n{% if is_incremental() %}\n-- this filter will only be applied on an incremental run\nWHERE event_datetime >= (select max(ss.landing_datetime) from {{this}} ss)\n{% endif %}\nGROUP BY session_id\n),\n-- Captures the first and last page viewed metadata per session\n-- IMPORTANT: The event id is the first event in the session.\nentry_exit_pages AS (\nSELECT\n    session_id,\n    first_value(\"path\") OVER (PARTITION BY session_id ORDER BY event_datetime\n\tROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS landing_page,\n    first_value(event_id) OVER (PARTITION BY session_id ORDER BY event_datetime\n\tROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS first_event_id,\n    last_value(\"path\") OVER (PARTITION BY session_id ORDER BY event_datetime\n\tROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS exit_page\nFROM {{ ref('snowplow_raw_events') }}\n{% if is_incremental() %}\n-- this filter will only be applied on an incremental run\nWHERE event_datetime >= (select max(ss.landing_datetime) from {{this}} ss)\n{% endif %}\n),\n-- Captures referrer metadata per session\nsession_referrer AS (\nSELECT\n    session_id,\n    first_value(referrer_host) OVER (PARTITION BY session_id ORDER BY event_datetime \n\tROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS session_referrer_host,\n    first_value(utm_source) OVER (PARTITION BY session_id ORDER BY event_datetime\n\tROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS session_utm_source,\n    first_value(utm_campaign) OVER (PARTITION BY session_id ORDER BY event_datetime\n\tROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS session_utm_campaign \nFROM {{ ref('snowplow_raw_events') }}\n{% if is_incremental() %}\n-- this filter will only be applied on an incremental run\nWHERE event_datetime >= (select max(ss.landing_datetime) from {{this}} ss)\n{% endif %}\n),\n-- Captures last recorded session metadata for this device\ntime_between_sessions AS (\nSELECT\n    device_id,\n    session_id,\n    LAG(ending_datetime) OVER (PARTITION BY device_id ORDER BY landing_datetime\n\tROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING\n    ) AS prev_session_endtime\nFROM sessions\n{% if is_incremental() %}\n-- this filter will only be applied on an incremental run\nWHERE landing_datetime >= (select max(ss.landing_datetime) from {{this}} ss)\n{% endif %}\n)\nSELECT DISTINCT\ns.session_id,\np.first_event_id,\ns.device_id,\ns.landing_datetime,\ns.ending_datetime,\nr.session_referrer_host,\nr.session_utm_source,\nr.session_utm_campaign,\ns.session_duration_seconds,\ns.num_pages_viewed,\np.landing_page,\np.exit_page,\n-- default to 0 days if there was no previous session\nCOALESCE(date_part('day', s.landing_datetime - t.prev_session_endtime),0) AS days_since_last_session\nFROM sessions s\nLEFT JOIN entry_exit_pages p\nON p.session_id = s.session_id\nLEFT JOIN session_referrer r\nON r.session_id = s.session_id\nLEFT JOIN time_between_sessions t\nON t.session_id = s.session_id\n\n{% if is_incremental() %}\n-- this filter will only be applied on an incremental run\nWHERE landing_datetime >= (select max(ss.landing_datetime) from {{this}} ss)\n{% endif %}", "compiled": true, "database": "quasar_prod_warehouse", "schema": "public", "fqn": ["ds_dbt", "phoenix_events", "snowplow_sessions"], "unique_id": "model.ds_dbt.snowplow_sessions", "package_name": "ds_dbt", "root_path": "/home/runner/work/quasar/quasar/quasar/dbt", "path": "phoenix_events/snowplow_sessions.sql", "original_file_path": "models/phoenix_events/snowplow_sessions.sql", "name": "snowplow_sessions", "resource_type": "model", "alias": "snowplow_sessions", "checksum": {"name": "sha256", "checksum": "c23a33e45396925ad89c57d00cff154729793566a2d0d837c5601d5a0d9839e6"}, "config": {"enabled": true, "materialized": "incremental", "persist_docs": {}, "post-hook": [{"sql": "{% if not is_incremental() %}\n  CREATE INDEX {{ get_index_name(this, 'landing_datetime_landing_page') }} (landing_datetime, landing_page);\n  CREATE INDEX {{ get_index_name(this, 'session_id') }} (session_id);\n  {{ grant_select_to(this, ['dsanalyst', 'looker']) }}\n{% endif %}\n", "transaction": true, "index": null}], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": ["phoenix_events"], "full_refresh": null}, "tags": ["phoenix_events"], "refs": [["snowplow_raw_events"], ["snowplow_raw_events"], ["snowplow_raw_events"]], "sources": [], "depends_on": {"macros": ["macro.dbt.is_incremental", "macro.ds_dbt.get_index_name", "macro.ds_dbt.grant_select_to"], "nodes": ["model.ds_dbt.snowplow_raw_events", "model.ds_dbt.snowplow_raw_events", "model.ds_dbt.snowplow_raw_events"]}, "description": "Table containing user session data derived from snowplow_raw_events", "columns": {"days_since_last_session": {"name": "days_since_last_session", "description": "[Required] \"Days since their last session.\"", "meta": {}, "data_type": null, "quote": null, "tags": []}, "device_id": {"name": "device_id", "description": "[Required] ID of the device used", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ending_datetime": {"name": "ending_datetime", "description": "[Required] Timestamp of when the session ended, in UTC (eg. 2018-01-01 12:00:00)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "first_event_id": {"name": "first_event_id", "description": "[Required] First event id of the session. This is a unique identifier for each event", "meta": {}, "data_type": null, "quote": null, "tags": []}, "exit_page": {"name": "exit_page", "description": "[Required] Which page the user ended or exited their session from (eg. /us/campaigns/green-your-getaway)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "landing_datetime": {"name": "landing_datetime", "description": "[Required] Timestamp of when the session started, in UTC (eg. 2018-01-01 12:00:00)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "landing_page": {"name": "landing_page", "description": "[Required] First page the user viewed in the session (eg. /us/facts/11-facts-about-bp-oil-spill)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "num_pages_viewed": {"name": "num_pages_viewed", "description": "[Required] Number of view events in this session.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "session_duration_seconds": {"name": "session_duration_seconds", "description": "[Required] Session duration in seconds.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "session_id": {"name": "session_id", "description": "[Required] Unique identifier of the user's session. This is how we associate all events in a visit.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "session_referrer_host": {"name": "session_referrer_host", "description": "URL host of the referring site (eg. google.com). Only present if session is referred from some external site link (ex. Facebook, Google, Bing). This would be NULL for anyone directly typing dosomething.org into a browser For this session.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "session_utm_campaign": {"name": "session_utm_campaign", "description": "Tracks which campaign the traffic was generated by. Shows up in Google Analytics as Campaign Name (eg. editorial_newsletter). Parameter passed by marketing team (would not be present for organic/ direct traffic) For this session.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "session_utm_source": {"name": "session_utm_source", "description": "Tracks where the traffic is coming from. (eg. scholarship_listing, Facebook). Parameter passed by marketing team (would not be present for organic/ direct traffic) For this session.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/phoenix_events/schema.yml", "build_path": "../../docs/compiled/ds_dbt/models/phoenix_events/snowplow_sessions.sql", "deferred": false, "compiled_sql": "-- Each session can be thought of a 0 - 3600 seconds (60 min) block of time\n-- It holds event metadata for the duration of the session\nWITH sessions AS (\nSELECT\n    session_id,\n    min(device_id) AS device_id,\n    min(event_datetime) AS landing_datetime,\n    max(event_datetime) AS ending_datetime,\n    date_part(\n\t'seconds', max(event_datetime) - min(event_datetime)\n    ) AS session_duration_seconds,\n    count(DISTINCT CASE WHEN event_name = 'view' THEN \"path\" END) AS num_pages_viewed\nFROM \"quasar_prod_warehouse\".\"public\".\"snowplow_raw_events\"\n\n-- this filter will only be applied on an incremental run\nWHERE event_datetime >= (select max(ss.landing_datetime) from \"quasar_prod_warehouse\".\"public\".\"snowplow_sessions\" ss)\n\nGROUP BY session_id\n),\n-- Captures the first and last page viewed metadata per session\n-- IMPORTANT: The event id is the first event in the session.\nentry_exit_pages AS (\nSELECT\n    session_id,\n    first_value(\"path\") OVER (PARTITION BY session_id ORDER BY event_datetime\n\tROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS landing_page,\n    first_value(event_id) OVER (PARTITION BY session_id ORDER BY event_datetime\n\tROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS first_event_id,\n    last_value(\"path\") OVER (PARTITION BY session_id ORDER BY event_datetime\n\tROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS exit_page\nFROM \"quasar_prod_warehouse\".\"public\".\"snowplow_raw_events\"\n\n-- this filter will only be applied on an incremental run\nWHERE event_datetime >= (select max(ss.landing_datetime) from \"quasar_prod_warehouse\".\"public\".\"snowplow_sessions\" ss)\n\n),\n-- Captures referrer metadata per session\nsession_referrer AS (\nSELECT\n    session_id,\n    first_value(referrer_host) OVER (PARTITION BY session_id ORDER BY event_datetime \n\tROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS session_referrer_host,\n    first_value(utm_source) OVER (PARTITION BY session_id ORDER BY event_datetime\n\tROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS session_utm_source,\n    first_value(utm_campaign) OVER (PARTITION BY session_id ORDER BY event_datetime\n\tROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS session_utm_campaign \nFROM \"quasar_prod_warehouse\".\"public\".\"snowplow_raw_events\"\n\n-- this filter will only be applied on an incremental run\nWHERE event_datetime >= (select max(ss.landing_datetime) from \"quasar_prod_warehouse\".\"public\".\"snowplow_sessions\" ss)\n\n),\n-- Captures last recorded session metadata for this device\ntime_between_sessions AS (\nSELECT\n    device_id,\n    session_id,\n    LAG(ending_datetime) OVER (PARTITION BY device_id ORDER BY landing_datetime\n\tROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING\n    ) AS prev_session_endtime\nFROM sessions\n\n-- this filter will only be applied on an incremental run\nWHERE landing_datetime >= (select max(ss.landing_datetime) from \"quasar_prod_warehouse\".\"public\".\"snowplow_sessions\" ss)\n\n)\nSELECT DISTINCT\ns.session_id,\np.first_event_id,\ns.device_id,\ns.landing_datetime,\ns.ending_datetime,\nr.session_referrer_host,\nr.session_utm_source,\nr.session_utm_campaign,\ns.session_duration_seconds,\ns.num_pages_viewed,\np.landing_page,\np.exit_page,\n-- default to 0 days if there was no previous session\nCOALESCE(date_part('day', s.landing_datetime - t.prev_session_endtime),0) AS days_since_last_session\nFROM sessions s\nLEFT JOIN entry_exit_pages p\nON p.session_id = s.session_id\nLEFT JOIN session_referrer r\nON r.session_id = s.session_id\nLEFT JOIN time_between_sessions t\nON t.session_id = s.session_id\n\n\n-- this filter will only be applied on an incremental run\nWHERE landing_datetime >= (select max(ss.landing_datetime) from \"quasar_prod_warehouse\".\"public\".\"snowplow_sessions\" ss)\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "-- Each session can be thought of a 0 - 3600 seconds (60 min) block of time\n-- It holds event metadata for the duration of the session\nWITH sessions AS (\nSELECT\n    session_id,\n    min(device_id) AS device_id,\n    min(event_datetime) AS landing_datetime,\n    max(event_datetime) AS ending_datetime,\n    date_part(\n\t'seconds', max(event_datetime) - min(event_datetime)\n    ) AS session_duration_seconds,\n    count(DISTINCT CASE WHEN event_name = 'view' THEN \"path\" END) AS num_pages_viewed\nFROM \"quasar_prod_warehouse\".\"public\".\"snowplow_raw_events\"\n\n-- this filter will only be applied on an incremental run\nWHERE event_datetime >= (select max(ss.landing_datetime) from \"quasar_prod_warehouse\".\"public\".\"snowplow_sessions\" ss)\n\nGROUP BY session_id\n),\n-- Captures the first and last page viewed metadata per session\n-- IMPORTANT: The event id is the first event in the session.\nentry_exit_pages AS (\nSELECT\n    session_id,\n    first_value(\"path\") OVER (PARTITION BY session_id ORDER BY event_datetime\n\tROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS landing_page,\n    first_value(event_id) OVER (PARTITION BY session_id ORDER BY event_datetime\n\tROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS first_event_id,\n    last_value(\"path\") OVER (PARTITION BY session_id ORDER BY event_datetime\n\tROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS exit_page\nFROM \"quasar_prod_warehouse\".\"public\".\"snowplow_raw_events\"\n\n-- this filter will only be applied on an incremental run\nWHERE event_datetime >= (select max(ss.landing_datetime) from \"quasar_prod_warehouse\".\"public\".\"snowplow_sessions\" ss)\n\n),\n-- Captures referrer metadata per session\nsession_referrer AS (\nSELECT\n    session_id,\n    first_value(referrer_host) OVER (PARTITION BY session_id ORDER BY event_datetime \n\tROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS session_referrer_host,\n    first_value(utm_source) OVER (PARTITION BY session_id ORDER BY event_datetime\n\tROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS session_utm_source,\n    first_value(utm_campaign) OVER (PARTITION BY session_id ORDER BY event_datetime\n\tROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS session_utm_campaign \nFROM \"quasar_prod_warehouse\".\"public\".\"snowplow_raw_events\"\n\n-- this filter will only be applied on an incremental run\nWHERE event_datetime >= (select max(ss.landing_datetime) from \"quasar_prod_warehouse\".\"public\".\"snowplow_sessions\" ss)\n\n),\n-- Captures last recorded session metadata for this device\ntime_between_sessions AS (\nSELECT\n    device_id,\n    session_id,\n    LAG(ending_datetime) OVER (PARTITION BY device_id ORDER BY landing_datetime\n\tROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING\n    ) AS prev_session_endtime\nFROM sessions\n\n-- this filter will only be applied on an incremental run\nWHERE landing_datetime >= (select max(ss.landing_datetime) from \"quasar_prod_warehouse\".\"public\".\"snowplow_sessions\" ss)\n\n)\nSELECT DISTINCT\ns.session_id,\np.first_event_id,\ns.device_id,\ns.landing_datetime,\ns.ending_datetime,\nr.session_referrer_host,\nr.session_utm_source,\nr.session_utm_campaign,\ns.session_duration_seconds,\ns.num_pages_viewed,\np.landing_page,\np.exit_page,\n-- default to 0 days if there was no previous session\nCOALESCE(date_part('day', s.landing_datetime - t.prev_session_endtime),0) AS days_since_last_session\nFROM sessions s\nLEFT JOIN entry_exit_pages p\nON p.session_id = s.session_id\nLEFT JOIN session_referrer r\nON r.session_id = s.session_id\nLEFT JOIN time_between_sessions t\nON t.session_id = s.session_id\n\n\n-- this filter will only be applied on an incremental run\nWHERE landing_datetime >= (select max(ss.landing_datetime) from \"quasar_prod_warehouse\".\"public\".\"snowplow_sessions\" ss)\n"}, "error": null, "status": null, "execution_time": 0.0323026180267334, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-02-23T21:28:55.778541Z", "completed_at": "2021-02-23T21:28:55.809473Z"}, {"name": "execute", "started_at": "2021-02-23T21:28:55.809888Z", "completed_at": "2021-02-23T21:28:55.809895Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "--All Device ID - Northstar ID Combinations\nWITH devices_all AS (\n    SELECT device_id, northstar_id\n    FROM {{ ref('snowplow_raw_events') }}\n    GROUP BY device_id, northstar_id\n),\n--Devices purely Anonymous (Remove Devices ever associated with NSIDs)\n--If a DeviceID was both logged-in and logged-out, it will be removed from the anonymous DeviceID pool\ndevices_an AS (\n    SELECT device_id\n    FROM devices_all\n    WHERE northstar_id is NULL\n    EXCEPT\n    SELECT device_id\n    FROM devices_all\n    WHERE northstar_id IS NOT NULL\n),\n-- All ND IDs assocaited with DS (to exclude them next)\nds AS (\n    SELECT northstar_id\n    FROM {{ ref('users') }}\n    WHERE lower(email) LIKE '%@dosomething.org'\n    GROUP BY northstar_id\n),\n--Devices owned by NSIDs (DS removed)\ndevices_ns AS (\n    SELECT da.device_id, da.northstar_id\n    FROM devices_all da\n    LEFT JOIN ds ON (da.northstar_id=ds.northstar_id)\n    WHERE da.northstar_id IS NOT NULL\n    AND ds.northstar_id is NULL\n)\nSELECT device_id, northstar_id\nFROM devices_ns\nUNION ALL\nSELECT device_id, NULL\nFROM devices_an", "compiled": true, "database": "quasar_prod_warehouse", "schema": "public", "fqn": ["ds_dbt", "user_journey", "device_northstar"], "unique_id": "model.ds_dbt.device_northstar", "package_name": "ds_dbt", "root_path": "/home/runner/work/quasar/quasar/quasar/dbt", "path": "user_journey/device_northstar.sql", "original_file_path": "models/user_journey/device_northstar.sql", "name": "device_northstar", "resource_type": "model", "alias": "device_northstar", "checksum": {"name": "sha256", "checksum": "8403b72161c5fb485ac63e1dd683ad0ca52c3905f0dccbefef8ebe32e4441827"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [{"sql": "CREATE INDEX {{ get_index_name(this, 'device_id') }} (device_id)", "transaction": true, "index": null}, {"sql": "CREATE INDEX {{ get_index_name(this, 'northstar_id') }} (northstar_id)", "transaction": true, "index": null}, {"sql": "{{ grant_select_to(this, ['dsanalyst', 'looker']) }}", "transaction": true, "index": null}], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": "device_northstar", "schema": null, "database": null, "tags": ["user_journey"], "full_refresh": null}, "tags": ["user_journey"], "refs": [["snowplow_raw_events"], ["users"]], "sources": [], "depends_on": {"macros": ["macro.ds_dbt.get_index_name", "macro.ds_dbt.grant_select_to"], "nodes": ["model.ds_dbt.snowplow_raw_events", "model.ds_dbt.users"]}, "description": "Get a list of User ID's mapped to Device ID's", "columns": {"northstar_id": {"name": "northstar_id", "description": "The Northstar ID of the user who generated the event.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "device_id": {"name": "device_id", "description": "ID of the device used", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/user_journey/schema.yml", "build_path": "../../docs/compiled/ds_dbt/models/user_journey/device_northstar.sql", "deferred": false, "compiled_sql": "--All Device ID - Northstar ID Combinations\nWITH devices_all AS (\n    SELECT device_id, northstar_id\n    FROM \"quasar_prod_warehouse\".\"public\".\"snowplow_raw_events\"\n    GROUP BY device_id, northstar_id\n),\n--Devices purely Anonymous (Remove Devices ever associated with NSIDs)\n--If a DeviceID was both logged-in and logged-out, it will be removed from the anonymous DeviceID pool\ndevices_an AS (\n    SELECT device_id\n    FROM devices_all\n    WHERE northstar_id is NULL\n    EXCEPT\n    SELECT device_id\n    FROM devices_all\n    WHERE northstar_id IS NOT NULL\n),\n-- All ND IDs assocaited with DS (to exclude them next)\nds AS (\n    SELECT northstar_id\n    FROM \"quasar_prod_warehouse\".\"public\".\"users\"\n    WHERE lower(email) LIKE '%@dosomething.org'\n    GROUP BY northstar_id\n),\n--Devices owned by NSIDs (DS removed)\ndevices_ns AS (\n    SELECT da.device_id, da.northstar_id\n    FROM devices_all da\n    LEFT JOIN ds ON (da.northstar_id=ds.northstar_id)\n    WHERE da.northstar_id IS NOT NULL\n    AND ds.northstar_id is NULL\n)\nSELECT device_id, northstar_id\nFROM devices_ns\nUNION ALL\nSELECT device_id, NULL\nFROM devices_an", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "--All Device ID - Northstar ID Combinations\nWITH devices_all AS (\n    SELECT device_id, northstar_id\n    FROM \"quasar_prod_warehouse\".\"public\".\"snowplow_raw_events\"\n    GROUP BY device_id, northstar_id\n),\n--Devices purely Anonymous (Remove Devices ever associated with NSIDs)\n--If a DeviceID was both logged-in and logged-out, it will be removed from the anonymous DeviceID pool\ndevices_an AS (\n    SELECT device_id\n    FROM devices_all\n    WHERE northstar_id is NULL\n    EXCEPT\n    SELECT device_id\n    FROM devices_all\n    WHERE northstar_id IS NOT NULL\n),\n-- All ND IDs assocaited with DS (to exclude them next)\nds AS (\n    SELECT northstar_id\n    FROM \"quasar_prod_warehouse\".\"public\".\"users\"\n    WHERE lower(email) LIKE '%@dosomething.org'\n    GROUP BY northstar_id\n),\n--Devices owned by NSIDs (DS removed)\ndevices_ns AS (\n    SELECT da.device_id, da.northstar_id\n    FROM devices_all da\n    LEFT JOIN ds ON (da.northstar_id=ds.northstar_id)\n    WHERE da.northstar_id IS NOT NULL\n    AND ds.northstar_id is NULL\n)\nSELECT device_id, northstar_id\nFROM devices_ns\nUNION ALL\nSELECT device_id, NULL\nFROM devices_an"}, "error": null, "status": null, "execution_time": 0.015402793884277344, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-02-23T21:28:55.811099Z", "completed_at": "2021-02-23T21:28:55.825212Z"}, {"name": "execute", "started_at": "2021-02-23T21:28:55.825681Z", "completed_at": "2021-02-23T21:28:55.825689Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='WARN') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "device_id", "model": "{{ ref('snowplow_raw_events') }}"}}, "compiled": true, "database": "quasar_prod_warehouse", "schema": "public", "fqn": ["ds_dbt", "schema_test", "not_null_snowplow_raw_events_device_id"], "unique_id": "test.ds_dbt.not_null_snowplow_raw_events_device_id", "package_name": "ds_dbt", "root_path": "/home/runner/work/quasar/quasar/quasar/dbt", "path": "schema_test/not_null_snowplow_raw_events_device_id.sql", "original_file_path": "models/phoenix_events/schema.yml", "name": "not_null_snowplow_raw_events_device_id", "resource_type": "test", "alias": "not_null_snowplow_raw_events_device_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "WARN"}, "tags": ["schema"], "refs": [["snowplow_raw_events"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.ds_dbt.snowplow_raw_events"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "../../docs/compiled/ds_dbt/models/phoenix_events/schema.yml/schema_test/not_null_snowplow_raw_events_device_id.sql", "deferred": false, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom \"quasar_prod_warehouse\".\"public\".\"snowplow_raw_events\"\nwhere device_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom \"quasar_prod_warehouse\".\"public\".\"snowplow_raw_events\"\nwhere device_id is null\n\n\n", "column_name": "device_id"}, "error": null, "status": null, "execution_time": 0.01578211784362793, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-02-23T21:28:55.826863Z", "completed_at": "2021-02-23T21:28:55.841438Z"}, {"name": "execute", "started_at": "2021-02-23T21:28:55.841769Z", "completed_at": "2021-02-23T21:28:55.841777Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='WARN') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "event_datetime", "model": "{{ ref('snowplow_raw_events') }}"}}, "compiled": true, "database": "quasar_prod_warehouse", "schema": "public", "fqn": ["ds_dbt", "schema_test", "not_null_snowplow_raw_events_event_datetime"], "unique_id": "test.ds_dbt.not_null_snowplow_raw_events_event_datetime", "package_name": "ds_dbt", "root_path": "/home/runner/work/quasar/quasar/quasar/dbt", "path": "schema_test/not_null_snowplow_raw_events_event_datetime.sql", "original_file_path": "models/phoenix_events/schema.yml", "name": "not_null_snowplow_raw_events_event_datetime", "resource_type": "test", "alias": "not_null_snowplow_raw_events_event_datetime", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "WARN"}, "tags": ["schema"], "refs": [["snowplow_raw_events"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.ds_dbt.snowplow_raw_events"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "../../docs/compiled/ds_dbt/models/phoenix_events/schema.yml/schema_test/not_null_snowplow_raw_events_event_datetime.sql", "deferred": false, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom \"quasar_prod_warehouse\".\"public\".\"snowplow_raw_events\"\nwhere event_datetime is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom \"quasar_prod_warehouse\".\"public\".\"snowplow_raw_events\"\nwhere event_datetime is null\n\n\n", "column_name": "event_datetime"}, "error": null, "status": null, "execution_time": 0.013554096221923828, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-02-23T21:28:55.843137Z", "completed_at": "2021-02-23T21:28:55.855430Z"}, {"name": "execute", "started_at": "2021-02-23T21:28:55.855757Z", "completed_at": "2021-02-23T21:28:55.855777Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='WARN') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "event_id", "model": "{{ ref('snowplow_raw_events') }}"}}, "compiled": true, "database": "quasar_prod_warehouse", "schema": "public", "fqn": ["ds_dbt", "schema_test", "not_null_snowplow_raw_events_event_id"], "unique_id": "test.ds_dbt.not_null_snowplow_raw_events_event_id", "package_name": "ds_dbt", "root_path": "/home/runner/work/quasar/quasar/quasar/dbt", "path": "schema_test/not_null_snowplow_raw_events_event_id.sql", "original_file_path": "models/phoenix_events/schema.yml", "name": "not_null_snowplow_raw_events_event_id", "resource_type": "test", "alias": "not_null_snowplow_raw_events_event_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "WARN"}, "tags": ["schema"], "refs": [["snowplow_raw_events"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.ds_dbt.snowplow_raw_events"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "../../docs/compiled/ds_dbt/models/phoenix_events/schema.yml/schema_test/not_null_snowplow_raw_events_event_id.sql", "deferred": false, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom \"quasar_prod_warehouse\".\"public\".\"snowplow_raw_events\"\nwhere event_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom \"quasar_prod_warehouse\".\"public\".\"snowplow_raw_events\"\nwhere event_id is null\n\n\n", "column_name": "event_id"}, "error": null, "status": null, "execution_time": 0.013051748275756836, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-02-23T21:28:55.857015Z", "completed_at": "2021-02-23T21:28:55.868958Z"}, {"name": "execute", "started_at": "2021-02-23T21:28:55.869285Z", "completed_at": "2021-02-23T21:28:55.869293Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='WARN') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "event_source", "model": "{{ ref('snowplow_raw_events') }}"}}, "compiled": true, "database": "quasar_prod_warehouse", "schema": "public", "fqn": ["ds_dbt", "schema_test", "not_null_snowplow_raw_events_event_source"], "unique_id": "test.ds_dbt.not_null_snowplow_raw_events_event_source", "package_name": "ds_dbt", "root_path": "/home/runner/work/quasar/quasar/quasar/dbt", "path": "schema_test/not_null_snowplow_raw_events_event_source.sql", "original_file_path": "models/phoenix_events/schema.yml", "name": "not_null_snowplow_raw_events_event_source", "resource_type": "test", "alias": "not_null_snowplow_raw_events_event_source", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "WARN"}, "tags": ["schema"], "refs": [["snowplow_raw_events"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.ds_dbt.snowplow_raw_events"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "../../docs/compiled/ds_dbt/models/phoenix_events/schema.yml/schema_test/not_null_snowplow_raw_events_event_source.sql", "deferred": false, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom \"quasar_prod_warehouse\".\"public\".\"snowplow_raw_events\"\nwhere event_source is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom \"quasar_prod_warehouse\".\"public\".\"snowplow_raw_events\"\nwhere event_source is null\n\n\n", "column_name": "event_source"}, "error": null, "status": null, "execution_time": 0.012917041778564453, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-02-23T21:28:55.870570Z", "completed_at": "2021-02-23T21:28:55.882361Z"}, {"name": "execute", "started_at": "2021-02-23T21:28:55.882669Z", "completed_at": "2021-02-23T21:28:55.882675Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='WARN') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "event_type", "model": "{{ ref('snowplow_raw_events') }}"}}, "compiled": true, "database": "quasar_prod_warehouse", "schema": "public", "fqn": ["ds_dbt", "schema_test", "not_null_snowplow_raw_events_event_type"], "unique_id": "test.ds_dbt.not_null_snowplow_raw_events_event_type", "package_name": "ds_dbt", "root_path": "/home/runner/work/quasar/quasar/quasar/dbt", "path": "schema_test/not_null_snowplow_raw_events_event_type.sql", "original_file_path": "models/phoenix_events/schema.yml", "name": "not_null_snowplow_raw_events_event_type", "resource_type": "test", "alias": "not_null_snowplow_raw_events_event_type", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "WARN"}, "tags": ["schema"], "refs": [["snowplow_raw_events"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.ds_dbt.snowplow_raw_events"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "../../docs/compiled/ds_dbt/models/phoenix_events/schema.yml/schema_test/not_null_snowplow_raw_events_event_type.sql", "deferred": false, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom \"quasar_prod_warehouse\".\"public\".\"snowplow_raw_events\"\nwhere event_type is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom \"quasar_prod_warehouse\".\"public\".\"snowplow_raw_events\"\nwhere event_type is null\n\n\n", "column_name": "event_type"}, "error": null, "status": null, "execution_time": 0.012063980102539062, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-02-23T21:28:55.883749Z", "completed_at": "2021-02-23T21:28:55.894755Z"}, {"name": "execute", "started_at": "2021-02-23T21:28:55.895117Z", "completed_at": "2021-02-23T21:28:55.895124Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='WARN') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "host", "model": "{{ ref('snowplow_raw_events') }}"}}, "compiled": true, "database": "quasar_prod_warehouse", "schema": "public", "fqn": ["ds_dbt", "schema_test", "not_null_snowplow_raw_events_host"], "unique_id": "test.ds_dbt.not_null_snowplow_raw_events_host", "package_name": "ds_dbt", "root_path": "/home/runner/work/quasar/quasar/quasar/dbt", "path": "schema_test/not_null_snowplow_raw_events_host.sql", "original_file_path": "models/phoenix_events/schema.yml", "name": "not_null_snowplow_raw_events_host", "resource_type": "test", "alias": "not_null_snowplow_raw_events_host", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "WARN"}, "tags": ["schema"], "refs": [["snowplow_raw_events"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.ds_dbt.snowplow_raw_events"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "../../docs/compiled/ds_dbt/models/phoenix_events/schema.yml/schema_test/not_null_snowplow_raw_events_host.sql", "deferred": false, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom \"quasar_prod_warehouse\".\"public\".\"snowplow_raw_events\"\nwhere host is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom \"quasar_prod_warehouse\".\"public\".\"snowplow_raw_events\"\nwhere host is null\n\n\n", "column_name": "host"}, "error": null, "status": null, "execution_time": 0.012021064758300781, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-02-23T21:28:55.896228Z", "completed_at": "2021-02-23T21:28:55.907159Z"}, {"name": "execute", "started_at": "2021-02-23T21:28:55.907422Z", "completed_at": "2021-02-23T21:28:55.907429Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='WARN') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "path", "model": "{{ ref('snowplow_raw_events') }}"}}, "compiled": true, "database": "quasar_prod_warehouse", "schema": "public", "fqn": ["ds_dbt", "schema_test", "not_null_snowplow_raw_events_path"], "unique_id": "test.ds_dbt.not_null_snowplow_raw_events_path", "package_name": "ds_dbt", "root_path": "/home/runner/work/quasar/quasar/quasar/dbt", "path": "schema_test/not_null_snowplow_raw_events_path.sql", "original_file_path": "models/phoenix_events/schema.yml", "name": "not_null_snowplow_raw_events_path", "resource_type": "test", "alias": "not_null_snowplow_raw_events_path", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "WARN"}, "tags": ["schema"], "refs": [["snowplow_raw_events"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.ds_dbt.snowplow_raw_events"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "../../docs/compiled/ds_dbt/models/phoenix_events/schema.yml/schema_test/not_null_snowplow_raw_events_path.sql", "deferred": false, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom \"quasar_prod_warehouse\".\"public\".\"snowplow_raw_events\"\nwhere path is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom \"quasar_prod_warehouse\".\"public\".\"snowplow_raw_events\"\nwhere path is null\n\n\n", "column_name": "path"}, "error": null, "status": null, "execution_time": 0.012173652648925781, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-02-23T21:28:55.908751Z", "completed_at": "2021-02-23T21:28:55.919876Z"}, {"name": "execute", "started_at": "2021-02-23T21:28:55.920142Z", "completed_at": "2021-02-23T21:28:55.920148Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='WARN') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "session_counter", "model": "{{ ref('snowplow_raw_events') }}"}}, "compiled": true, "database": "quasar_prod_warehouse", "schema": "public", "fqn": ["ds_dbt", "schema_test", "not_null_snowplow_raw_events_session_counter"], "unique_id": "test.ds_dbt.not_null_snowplow_raw_events_session_counter", "package_name": "ds_dbt", "root_path": "/home/runner/work/quasar/quasar/quasar/dbt", "path": "schema_test/not_null_snowplow_raw_events_session_counter.sql", "original_file_path": "models/phoenix_events/schema.yml", "name": "not_null_snowplow_raw_events_session_counter", "resource_type": "test", "alias": "not_null_snowplow_raw_events_session_counter", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "WARN"}, "tags": ["schema"], "refs": [["snowplow_raw_events"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.ds_dbt.snowplow_raw_events"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "../../docs/compiled/ds_dbt/models/phoenix_events/schema.yml/schema_test/not_null_snowplow_raw_events_session_counter.sql", "deferred": false, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom \"quasar_prod_warehouse\".\"public\".\"snowplow_raw_events\"\nwhere session_counter is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom \"quasar_prod_warehouse\".\"public\".\"snowplow_raw_events\"\nwhere session_counter is null\n\n\n", "column_name": "session_counter"}, "error": null, "status": null, "execution_time": 0.012275457382202148, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-02-23T21:28:55.921372Z", "completed_at": "2021-02-23T21:28:55.932595Z"}, {"name": "execute", "started_at": "2021-02-23T21:28:55.932908Z", "completed_at": "2021-02-23T21:28:55.932915Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='WARN') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "session_id", "model": "{{ ref('snowplow_raw_events') }}"}}, "compiled": true, "database": "quasar_prod_warehouse", "schema": "public", "fqn": ["ds_dbt", "schema_test", "not_null_snowplow_raw_events_session_id"], "unique_id": "test.ds_dbt.not_null_snowplow_raw_events_session_id", "package_name": "ds_dbt", "root_path": "/home/runner/work/quasar/quasar/quasar/dbt", "path": "schema_test/not_null_snowplow_raw_events_session_id.sql", "original_file_path": "models/phoenix_events/schema.yml", "name": "not_null_snowplow_raw_events_session_id", "resource_type": "test", "alias": "not_null_snowplow_raw_events_session_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "WARN"}, "tags": ["schema"], "refs": [["snowplow_raw_events"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.ds_dbt.snowplow_raw_events"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "../../docs/compiled/ds_dbt/models/phoenix_events/schema.yml/schema_test/not_null_snowplow_raw_events_session_id.sql", "deferred": false, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom \"quasar_prod_warehouse\".\"public\".\"snowplow_raw_events\"\nwhere session_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom \"quasar_prod_warehouse\".\"public\".\"snowplow_raw_events\"\nwhere session_id is null\n\n\n", "column_name": "session_id"}, "error": null, "status": null, "execution_time": 0.012570381164550781, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-02-23T21:28:55.934140Z", "completed_at": "2021-02-23T21:28:55.945570Z"}, {"name": "execute", "started_at": "2021-02-23T21:28:55.945939Z", "completed_at": "2021-02-23T21:28:55.945947Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='WARN') }}{{ test_not_null_where(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null_where", "kwargs": {"condition": "event_name similar to '%(opened_modal|closed_modal)%'", "column_name": "modal_type", "model": "{{ ref('snowplow_raw_events') }}"}}, "compiled": true, "database": "quasar_prod_warehouse", "schema": "public", "fqn": ["ds_dbt", "schema_test", "not_null_where_snowplow_raw_events_modal_type__event_name_similar_to_opened_modal_closed_modal_"], "unique_id": "test.ds_dbt.not_null_where_snowplow_raw_events_modal_type__event_name_similar_to_opened_modal_closed_modal_", "package_name": "ds_dbt", "root_path": "/home/runner/work/quasar/quasar/quasar/dbt", "path": "schema_test/not_null_where_snowplow_raw_events_2d35a4a630b70b2ace485c86a2c0b46f.sql", "original_file_path": "models/phoenix_events/schema.yml", "name": "not_null_where_snowplow_raw_events_modal_type__event_name_similar_to_opened_modal_closed_modal_", "resource_type": "test", "alias": "not_null_where_snowplow_raw_events_modal_type__event_name_similar_to_opened_modal_closed_modal_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "WARN"}, "tags": ["schema"], "refs": [["snowplow_raw_events"]], "sources": [], "depends_on": {"macros": ["macro.ds_dbt.test_not_null_where"], "nodes": ["model.ds_dbt.snowplow_raw_events"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "../../docs/compiled/ds_dbt/models/phoenix_events/schema.yml/schema_test/not_null_where_snowplow_raw_events_2d35a4a630b70b2ace485c86a2c0b46f.sql", "deferred": false, "compiled_sql": "\n\n  with exceptions as (\n    select\n      count(*)\n\n    from\n      \"quasar_prod_warehouse\".\"public\".\"snowplow_raw_events\"\n\n    where\n      modal_type is null\n      and event_name similar to '%(opened_modal|closed_modal)%'\n\n  )\n\n  select * from exceptions\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n  with exceptions as (\n    select\n      count(*)\n\n    from\n      \"quasar_prod_warehouse\".\"public\".\"snowplow_raw_events\"\n\n    where\n      modal_type is null\n      and event_name similar to '%(opened_modal|closed_modal)%'\n\n  )\n\n  select * from exceptions\n\n", "column_name": "modal_type"}, "error": null, "status": null, "execution_time": 0.012632369995117188, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-02-23T21:28:55.947121Z", "completed_at": "2021-02-23T21:28:55.958721Z"}, {"name": "execute", "started_at": "2021-02-23T21:28:55.959007Z", "completed_at": "2021-02-23T21:28:55.959013Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='WARN') }}{{ test_not_null_where(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null_where", "kwargs": {"condition": "event_type = 'se'", "column_name": "se_action", "model": "{{ ref('snowplow_raw_events') }}"}}, "compiled": true, "database": "quasar_prod_warehouse", "schema": "public", "fqn": ["ds_dbt", "schema_test", "not_null_where_snowplow_raw_events_se_action__event_type_se_"], "unique_id": "test.ds_dbt.not_null_where_snowplow_raw_events_se_action__event_type_se_", "package_name": "ds_dbt", "root_path": "/home/runner/work/quasar/quasar/quasar/dbt", "path": "schema_test/not_null_where_snowplow_raw_events_se_action__event_type_se_.sql", "original_file_path": "models/phoenix_events/schema.yml", "name": "not_null_where_snowplow_raw_events_se_action__event_type_se_", "resource_type": "test", "alias": "not_null_where_snowplow_raw_events_se_action__event_type_se_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "WARN"}, "tags": ["schema"], "refs": [["snowplow_raw_events"]], "sources": [], "depends_on": {"macros": ["macro.ds_dbt.test_not_null_where"], "nodes": ["model.ds_dbt.snowplow_raw_events"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "../../docs/compiled/ds_dbt/models/phoenix_events/schema.yml/schema_test/not_null_where_snowplow_raw_events_se_action__event_type_se_.sql", "deferred": false, "compiled_sql": "\n\n  with exceptions as (\n    select\n      count(*)\n\n    from\n      \"quasar_prod_warehouse\".\"public\".\"snowplow_raw_events\"\n\n    where\n      se_action is null\n      and event_type = 'se'\n\n  )\n\n  select * from exceptions\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n  with exceptions as (\n    select\n      count(*)\n\n    from\n      \"quasar_prod_warehouse\".\"public\".\"snowplow_raw_events\"\n\n    where\n      se_action is null\n      and event_type = 'se'\n\n  )\n\n  select * from exceptions\n\n", "column_name": "se_action"}, "error": null, "status": null, "execution_time": 0.012671232223510742, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-02-23T21:28:55.960133Z", "completed_at": "2021-02-23T21:28:55.971543Z"}, {"name": "execute", "started_at": "2021-02-23T21:28:55.971837Z", "completed_at": "2021-02-23T21:28:55.971844Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='WARN') }}{{ test_not_null_where(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null_where", "kwargs": {"condition": "event_type = 'se'", "column_name": "se_category", "model": "{{ ref('snowplow_raw_events') }}"}}, "compiled": true, "database": "quasar_prod_warehouse", "schema": "public", "fqn": ["ds_dbt", "schema_test", "not_null_where_snowplow_raw_events_se_category__event_type_se_"], "unique_id": "test.ds_dbt.not_null_where_snowplow_raw_events_se_category__event_type_se_", "package_name": "ds_dbt", "root_path": "/home/runner/work/quasar/quasar/quasar/dbt", "path": "schema_test/not_null_where_snowplow_raw_events_se_category__event_type_se_.sql", "original_file_path": "models/phoenix_events/schema.yml", "name": "not_null_where_snowplow_raw_events_se_category__event_type_se_", "resource_type": "test", "alias": "not_null_where_snowplow_raw_events_se_category__event_type_se_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "WARN"}, "tags": ["schema"], "refs": [["snowplow_raw_events"]], "sources": [], "depends_on": {"macros": ["macro.ds_dbt.test_not_null_where"], "nodes": ["model.ds_dbt.snowplow_raw_events"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "../../docs/compiled/ds_dbt/models/phoenix_events/schema.yml/schema_test/not_null_where_snowplow_raw_events_se_category__event_type_se_.sql", "deferred": false, "compiled_sql": "\n\n  with exceptions as (\n    select\n      count(*)\n\n    from\n      \"quasar_prod_warehouse\".\"public\".\"snowplow_raw_events\"\n\n    where\n      se_category is null\n      and event_type = 'se'\n\n  )\n\n  select * from exceptions\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n  with exceptions as (\n    select\n      count(*)\n\n    from\n      \"quasar_prod_warehouse\".\"public\".\"snowplow_raw_events\"\n\n    where\n      se_category is null\n      and event_type = 'se'\n\n  )\n\n  select * from exceptions\n\n", "column_name": "se_category"}, "error": null, "status": null, "execution_time": 0.012551546096801758, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-02-23T21:28:55.973281Z", "completed_at": "2021-02-23T21:28:55.984477Z"}, {"name": "execute", "started_at": "2021-02-23T21:28:55.984790Z", "completed_at": "2021-02-23T21:28:55.984796Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='WARN') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "event_id", "model": "{{ ref('snowplow_raw_events') }}"}}, "compiled": true, "database": "quasar_prod_warehouse", "schema": "public", "fqn": ["ds_dbt", "schema_test", "unique_snowplow_raw_events_event_id"], "unique_id": "test.ds_dbt.unique_snowplow_raw_events_event_id", "package_name": "ds_dbt", "root_path": "/home/runner/work/quasar/quasar/quasar/dbt", "path": "schema_test/unique_snowplow_raw_events_event_id.sql", "original_file_path": "models/phoenix_events/schema.yml", "name": "unique_snowplow_raw_events_event_id", "resource_type": "test", "alias": "unique_snowplow_raw_events_event_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "WARN"}, "tags": ["schema"], "refs": [["snowplow_raw_events"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.ds_dbt.snowplow_raw_events"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "../../docs/compiled/ds_dbt/models/phoenix_events/schema.yml/schema_test/unique_snowplow_raw_events_event_id.sql", "deferred": false, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        event_id\n\n    from \"quasar_prod_warehouse\".\"public\".\"snowplow_raw_events\"\n    where event_id is not null\n    group by event_id\n    having count(*) > 1\n\n) validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        event_id\n\n    from \"quasar_prod_warehouse\".\"public\".\"snowplow_raw_events\"\n    where event_id is not null\n    group by event_id\n    having count(*) > 1\n\n) validation_errors\n\n\n", "column_name": "event_id"}, "error": null, "status": null, "execution_time": 0.01773548126220703, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-02-23T21:28:55.986142Z", "completed_at": "2021-02-23T21:28:56.002655Z"}, {"name": "execute", "started_at": "2021-02-23T21:28:56.002968Z", "completed_at": "2021-02-23T21:28:56.002976Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "--General approach is to create a long table of events we care about\n--We query each data source of interest, manipulate the fields into a consistent format and union\n--All the unions go in a subquery which is then pulled into a final top level query\nSELECT\n    MD5(concat(a.northstar_id, a.\"timestamp\", a.action_id, a.action_serial_id)) AS event_id,\n    a.northstar_id,\n    a.\"timestamp\" AS \"timestamp\",\n    a.\"action\" AS action_type,\n    a.action_id AS action_id,\n    a.\"source\" AS \"source\",\n    --This is the unique id of the event from the data source to allow for joining the original data source as needed\n    a.action_serial_id AS action_serial_id,\n    --This tells us the medium the event occured in e.g. sms, web\n    a.channel AS channel,\n    --User is new if the month of the timestamp of the action is the same month their account was created\n    CASE\n        WHEN date_trunc('month', a.\"timestamp\") = date_trunc('month', u.created_at) \n        THEN 'New' \n        ELSE 'Returning' END\n        AS \"type\",\n    --This returns the first month the user took an action\n    MIN(\"timestamp\")\n        OVER\n        (PARTITION BY a.northstar_id, date_trunc('month', a.\"timestamp\"))\n        AS first_action_month\nFROM (\n\t--Get Campaigns Signups\n    SELECT\n        DISTINCT s.northstar_id,\n        s.created_at AS \"timestamp\",\n        'signup' AS \"action\",\n        '1' AS action_id,\n        s.\"source\" AS \"source\",\n        s.id::varchar AS action_serial_id,\n        --Bucket signup sources into higher level categories we care about\n        (CASE\n            WHEN s.\"source\" ILIKE '%sms%' THEN 'sms'\n            WHEN s.\"source\" NOT LIKE '%sms%'AND s.\"source\" NOT LIKE '%email%' AND s.\"source\" NOT LIKE '%niche%' OR s.\"source\" IN ('rock-the-vote', 'turbovote') THEN 'web'\n            WHEN s.\"source\" ILIKE '%email%' THEN 'email'\n            WHEN s.\"source\" ILIKE '%niche%' THEN 'niche_coregistration'\n            WHEN s.\"source\" NOT LIKE '%sms%'AND s.\"source\" NOT LIKE '%email%' AND s.\"source\" NOT LIKE '%niche%' AND s.\"source\" NOT IN ('rock-the-vote', 'turbovote') AND s.\"source\" IS NOT NULL THEN 'other' END\n            ) AS \"channel\"\n    FROM {{ ref('signups') }} s\n    WHERE\n    \t--Remove voter reg account creations bc we create accounts on users behalf, so they don't constitute active engagement\n        s.\"source\" IS DISTINCT FROM 'importer-client'\n        AND s.\"source\" IS DISTINCT FROM 'rock-the-vote'\n        AND s.\"source\" IS DISTINCT FROM 'turbovote'\n    UNION ALL\n    --Get Campaigns Posts\n    SELECT\n        DISTINCT p.northstar_id,\n        p.created_at AS \"timestamp\",\n        'post' AS \"action\",\n        '2' AS action_id,\n        p.\"source\" AS \"source\",\n        p.id::varchar AS action_serial_id,\n        --Calculate channel by grouping post source into higher level categories\n        (CASE\n            WHEN p.\"source\" ILIKE '%sms%' THEN 'sms'\n            WHEN p.\"source\" ILIKE '%phoenix%' OR p.\"source\" IS NULL OR p.\"source\" ILIKE '%turbovote%' THEN 'web'\n            WHEN p.\"source\" ILIKE '%app%' THEN 'mobile_app'\n            WHEN p.\"source\" NOT LIKE '%phoenix%' AND p.\"source\" NOT LIKE '%sms%' AND p.\"source\" IS NOT NULL AND p.\"source\" NOT LIKE '%app%' AND p.\"source\" NOT LIKE '%turbovote%' THEN 'other' END\n            ) AS \"channel\"\n    FROM {{ ref('posts') }} p\n    WHERE\n    \t--We do not want to count certain post types. \n        p.status IN ('accepted', 'confirmed', 'register-OVR', 'register-form', 'pending')\n    UNION ALL\n    --Site access represents users who were logged in but their auth token refreshed\n    SELECT DISTINCT\n        u_access.northstar_id,\n        u_access.last_accessed_at AS \"timestamp\",\n        'site_access' AS \"action\",\n        '3' AS action_id,\n        NULL AS \"source\",\n        '0' AS action_serial_id,\n        'web' AS channel\n    FROM {{ ref('northstar_users_deduped') }} u_access\n    WHERE\n    \t--Remove test accounts\n        u_access.last_accessed_at IS NOT NULL\n        AND u_access.\"source\" IS DISTINCT FROM 'runscope'\n        AND u_access.\"source\" IS DISTINCT FROM 'runscope-client'\n        AND u_access.email IS DISTINCT FROM 'runscope-scheduled-test@dosomething.org'\n        AND u_access.email IS DISTINCT FROM 'juy+runscopescheduledtests@dosomething.org'\n        AND (u_access.email NOT ILIKE '%@example.org%' OR u_access.email IS NULL)\n    UNION ALL\n    --Get site authentications\n    SELECT DISTINCT\n        u_login.northstar_id,\n        u_login.last_authenticated_at AS \"timestamp\",\n        'site_login' AS \"action\",\n        '4' AS action_id,\n        NULL AS \"source\",\n        '0' AS action_serial_id,\n        'web' AS channel\n    FROM {{ ref('northstar_users_deduped') }} u_login\n    WHERE\n    \t--Remove test records\n        u_login.last_authenticated_at IS NOT NULL\n        AND u_login.\"source\" IS DISTINCT FROM 'runscope'\n        AND u_login.\"source\" IS DISTINCT FROM 'runscope-client'\n        AND u_login.email IS DISTINCT FROM 'runscope-scheduled-test@dosomething.org'\n        AND u_login.email IS DISTINCT FROM 'juy+runscopescheduledtests@dosomething.org'\n        AND (u_login.email NOT ILIKE '%@example.org%' OR u_login.email IS NULL)\n    UNION ALL\n    --Get account creations\n    SELECT\n        DISTINCT u.northstar_id,\n        u.created_at AS \"timestamp\",\n        'account_creation' AS action,\n        '5' AS action_id,\n        u.\"source\" AS \"source\",\n        '0' AS action_serial_id,\n        --Bucket channel into higher level categories\n        (CASE\n            WHEN u.\"source\" ILIKE '%sms%' THEN 'sms'\n            WHEN u.\"source\" ILIKE '%phoenix%' OR u.\"source\" IS NULL THEN 'web'\n            WHEN u.\"source\" ILIKE '%niche%' THEN 'niche_coregistration'\n            WHEN u.\"source\" NOT LIKE '%niche%' AND u.\"source\" NOT LIKE '%sms%' AND u.\"source\" NOT LIKE '%phoenix%' AND u.\"source\" IS NOT NULL THEN 'other' END\n            ) AS \"channel\"\n    FROM\n        (SELECT\n            u_create.northstar_id,\n            max(u_create.\"source\") AS \"source\",\n            min(u_create.created_at) AS created_at\n        FROM {{ ref('northstar_users_deduped') }} u_create\n        WHERE\n        \t--Remove voter reg created accounts bc we create the account on behalf of the user\n            u_create.\"source\" IS DISTINCT FROM 'importer-client'\n            --Remove test records\n            AND u_create.\"source\" IS DISTINCT FROM 'runscope'\n            AND u_create.\"source\" IS DISTINCT FROM 'runscope-client'\n            AND u_create.email IS DISTINCT FROM 'runscope-scheduled-test@dosomething.org'\n            AND u_create.email IS DISTINCT FROM 'juy+runscopescheduledtests@dosomething.org'\n            AND (u_create.email NOT ILIKE '%@example.org%' OR u_create.email IS NULL)\n        GROUP BY u_create.northstar_id\n        ) u\n    UNION ALL\n    --Get inbound SMS messages recorded by Gambit\n    SELECT\n        DISTINCT g.user_id AS northstar_id,\n        g.created_at AS \"timestamp\",\n        'messaged_gambit' AS \"action\",\n        '6' AS action_id,\n        'SMS' AS \"source\",\n        g.message_id AS action_serial_id,\n        'sms' AS \"channel\"\n    FROM {{ ref('gambit_messages_inbound') }} g\n    WHERE\n    \t--Remove records with no recorded NSID\n        g.user_id IS NOT NULL\n        --Remove messages where the user requested we stop sending messages\n        AND g.macro <> 'subscriptionStatusStop'\n    UNION ALL\n    --Get clicks on links within emails we sent as logged by customer.io\n    SELECT\n        DISTINCT cio.customer_id AS northstar_id,\n        cio.\"timestamp\" AS \"timestamp\",\n        'clicked_link' AS \"action\",\n        '7' AS action_id,\n        cio.template_id::CHARACTER AS \"source\",\n        cio.event_id AS action_serial_id,\n        'email' AS \"channel\"\n    FROM\n        {{ ref('cio_email_events') }} cio\n    WHERE\n    \t--Filter to clicks within emails event log\n        cio.event_type = 'email_clicked'\n        AND cio.customer_id IS NOT NULL\n    UNION ALL\n    --Get shortlink resolution events as logged by Bertly\n    SELECT DISTINCT\n        b.northstar_id,\n        b.click_time AS \"timestamp\",\n        CONCAT('bertly_link_', b.interaction_type) AS \"action\",\n        '10' AS action_id,\n        'bertly' AS \"source\",\n        b.click_id AS action_serial_id,\n        b.\"source\" AS \"channel\"\n    FROM {{ ref('bertly_clicks') }} b\n    INNER JOIN {{ ref('users') }} u\n        ON b.northstar_id = u.northstar_id\n    WHERE\n    \t--Must have nsid to count\n        b.northstar_id IS NOT NULL\n        --Only link clicks count, not link previews which can generate automatically\n        AND b.interaction_type IS DISTINCT FROM 'preview'\n) AS a\nLEFT JOIN {{ ref('users') }} u ON u.northstar_id = a.northstar_id", "compiled": true, "database": "quasar_prod_warehouse", "schema": "public", "fqn": ["ds_dbt", "member_event_log", "member_event_log"], "unique_id": "model.ds_dbt.member_event_log", "package_name": "ds_dbt", "root_path": "/home/runner/work/quasar/quasar/quasar/dbt", "path": "member_event_log/member_event_log.sql", "original_file_path": "models/member_event_log/member_event_log.sql", "name": "member_event_log", "resource_type": "model", "alias": "member_event_log", "checksum": {"name": "sha256", "checksum": "7980be2f0ee749e99c8bb1fb7be33ff1d6de0f356623f95bc2892f08064de345"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [{"sql": "CREATE INDEX {{ get_index_name(this, 'timestamp_northstar_id_event_id') }} (timestamp, northstar_id, event_id)", "transaction": true, "index": null}, {"sql": "CREATE INDEX {{ get_index_name(this, 'northstar_id_timestamp') }} (northstar_id, timestamp)", "transaction": true, "index": null}, {"sql": "{{ grant_select_to(this, ['dsanalyst', 'looker']) }}", "transaction": true, "index": null}], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": "member_event_log", "schema": null, "database": null, "tags": ["member_event_log"], "full_refresh": null}, "tags": ["member_event_log"], "refs": [["signups"], ["posts"], ["northstar_users_deduped"], ["northstar_users_deduped"], ["northstar_users_deduped"], ["gambit_messages_inbound"], ["cio_email_events"], ["bertly_clicks"], ["users"], ["users"]], "sources": [], "depends_on": {"macros": ["macro.ds_dbt.get_index_name", "macro.ds_dbt.grant_select_to"], "nodes": ["model.ds_dbt.signups", "model.ds_dbt.posts", "model.ds_dbt.northstar_users_deduped", "model.ds_dbt.northstar_users_deduped", "model.ds_dbt.northstar_users_deduped", "model.ds_dbt.gambit_messages_inbound", "model.ds_dbt.cio_email_events", "model.ds_dbt.bertly_clicks", "model.ds_dbt.users", "model.ds_dbt.users"]}, "description": "Table containing data for all member events.", "columns": {"event_id": {"name": "event_id", "description": "This is a unique identifier for each event", "meta": {}, "data_type": null, "quote": null, "tags": []}, "northstar_id": {"name": "northstar_id", "description": "The Northstar ID of the user who generated the event.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "timestamp": {"name": "timestamp", "description": "When the item was created in UTC (eg. 2018-01-01 12:00:00)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "action_type": {"name": "action_type", "description": "Type of action the user took. (e.g. share-something, donate-something)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "action_id": {"name": "action_id", "description": "Internal identifier of the campaign action", "meta": {}, "data_type": null, "quote": null, "tags": []}, "source": {"name": "source", "description": "Source of the URL (e.g. SMS, web), origin of the post (e.g. phoenix-web, phoenix-ashes, sms), or source where user was acquired. (e.g. sms, phoenix-next)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "action_serial_id": {"name": "action_serial_id", "description": "Serial id for the user's action. Depends on the source of the action. May be the bertly click id, sms message id, etc.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "channel": {"name": "channel", "description": "Channel for the user's action. Depends on the source of the action. (e.g. web, sms)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "type": {"name": "type", "description": "Whether the user is new or returning", "meta": {}, "data_type": null, "quote": null, "tags": []}, "first_action_month": {"name": "first_action_month", "description": "Month during which the user took their first action.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/member_event_log/schema.yml", "build_path": "../../docs/compiled/ds_dbt/models/member_event_log/member_event_log.sql", "deferred": false, "compiled_sql": "--General approach is to create a long table of events we care about\n--We query each data source of interest, manipulate the fields into a consistent format and union\n--All the unions go in a subquery which is then pulled into a final top level query\nSELECT\n    MD5(concat(a.northstar_id, a.\"timestamp\", a.action_id, a.action_serial_id)) AS event_id,\n    a.northstar_id,\n    a.\"timestamp\" AS \"timestamp\",\n    a.\"action\" AS action_type,\n    a.action_id AS action_id,\n    a.\"source\" AS \"source\",\n    --This is the unique id of the event from the data source to allow for joining the original data source as needed\n    a.action_serial_id AS action_serial_id,\n    --This tells us the medium the event occured in e.g. sms, web\n    a.channel AS channel,\n    --User is new if the month of the timestamp of the action is the same month their account was created\n    CASE\n        WHEN date_trunc('month', a.\"timestamp\") = date_trunc('month', u.created_at) \n        THEN 'New' \n        ELSE 'Returning' END\n        AS \"type\",\n    --This returns the first month the user took an action\n    MIN(\"timestamp\")\n        OVER\n        (PARTITION BY a.northstar_id, date_trunc('month', a.\"timestamp\"))\n        AS first_action_month\nFROM (\n\t--Get Campaigns Signups\n    SELECT\n        DISTINCT s.northstar_id,\n        s.created_at AS \"timestamp\",\n        'signup' AS \"action\",\n        '1' AS action_id,\n        s.\"source\" AS \"source\",\n        s.id::varchar AS action_serial_id,\n        --Bucket signup sources into higher level categories we care about\n        (CASE\n            WHEN s.\"source\" ILIKE '%sms%' THEN 'sms'\n            WHEN s.\"source\" NOT LIKE '%sms%'AND s.\"source\" NOT LIKE '%email%' AND s.\"source\" NOT LIKE '%niche%' OR s.\"source\" IN ('rock-the-vote', 'turbovote') THEN 'web'\n            WHEN s.\"source\" ILIKE '%email%' THEN 'email'\n            WHEN s.\"source\" ILIKE '%niche%' THEN 'niche_coregistration'\n            WHEN s.\"source\" NOT LIKE '%sms%'AND s.\"source\" NOT LIKE '%email%' AND s.\"source\" NOT LIKE '%niche%' AND s.\"source\" NOT IN ('rock-the-vote', 'turbovote') AND s.\"source\" IS NOT NULL THEN 'other' END\n            ) AS \"channel\"\n    FROM \"quasar_prod_warehouse\".\"public\".\"signups\" s\n    WHERE\n    \t--Remove voter reg account creations bc we create accounts on users behalf, so they don't constitute active engagement\n        s.\"source\" IS DISTINCT FROM 'importer-client'\n        AND s.\"source\" IS DISTINCT FROM 'rock-the-vote'\n        AND s.\"source\" IS DISTINCT FROM 'turbovote'\n    UNION ALL\n    --Get Campaigns Posts\n    SELECT\n        DISTINCT p.northstar_id,\n        p.created_at AS \"timestamp\",\n        'post' AS \"action\",\n        '2' AS action_id,\n        p.\"source\" AS \"source\",\n        p.id::varchar AS action_serial_id,\n        --Calculate channel by grouping post source into higher level categories\n        (CASE\n            WHEN p.\"source\" ILIKE '%sms%' THEN 'sms'\n            WHEN p.\"source\" ILIKE '%phoenix%' OR p.\"source\" IS NULL OR p.\"source\" ILIKE '%turbovote%' THEN 'web'\n            WHEN p.\"source\" ILIKE '%app%' THEN 'mobile_app'\n            WHEN p.\"source\" NOT LIKE '%phoenix%' AND p.\"source\" NOT LIKE '%sms%' AND p.\"source\" IS NOT NULL AND p.\"source\" NOT LIKE '%app%' AND p.\"source\" NOT LIKE '%turbovote%' THEN 'other' END\n            ) AS \"channel\"\n    FROM \"quasar_prod_warehouse\".\"public\".\"posts\" p\n    WHERE\n    \t--We do not want to count certain post types. \n        p.status IN ('accepted', 'confirmed', 'register-OVR', 'register-form', 'pending')\n    UNION ALL\n    --Site access represents users who were logged in but their auth token refreshed\n    SELECT DISTINCT\n        u_access.northstar_id,\n        u_access.last_accessed_at AS \"timestamp\",\n        'site_access' AS \"action\",\n        '3' AS action_id,\n        NULL AS \"source\",\n        '0' AS action_serial_id,\n        'web' AS channel\n    FROM \"quasar_prod_warehouse\".\"public\".\"northstar_users_deduped\" u_access\n    WHERE\n    \t--Remove test accounts\n        u_access.last_accessed_at IS NOT NULL\n        AND u_access.\"source\" IS DISTINCT FROM 'runscope'\n        AND u_access.\"source\" IS DISTINCT FROM 'runscope-client'\n        AND u_access.email IS DISTINCT FROM 'runscope-scheduled-test@dosomething.org'\n        AND u_access.email IS DISTINCT FROM 'juy+runscopescheduledtests@dosomething.org'\n        AND (u_access.email NOT ILIKE '%@example.org%' OR u_access.email IS NULL)\n    UNION ALL\n    --Get site authentications\n    SELECT DISTINCT\n        u_login.northstar_id,\n        u_login.last_authenticated_at AS \"timestamp\",\n        'site_login' AS \"action\",\n        '4' AS action_id,\n        NULL AS \"source\",\n        '0' AS action_serial_id,\n        'web' AS channel\n    FROM \"quasar_prod_warehouse\".\"public\".\"northstar_users_deduped\" u_login\n    WHERE\n    \t--Remove test records\n        u_login.last_authenticated_at IS NOT NULL\n        AND u_login.\"source\" IS DISTINCT FROM 'runscope'\n        AND u_login.\"source\" IS DISTINCT FROM 'runscope-client'\n        AND u_login.email IS DISTINCT FROM 'runscope-scheduled-test@dosomething.org'\n        AND u_login.email IS DISTINCT FROM 'juy+runscopescheduledtests@dosomething.org'\n        AND (u_login.email NOT ILIKE '%@example.org%' OR u_login.email IS NULL)\n    UNION ALL\n    --Get account creations\n    SELECT\n        DISTINCT u.northstar_id,\n        u.created_at AS \"timestamp\",\n        'account_creation' AS action,\n        '5' AS action_id,\n        u.\"source\" AS \"source\",\n        '0' AS action_serial_id,\n        --Bucket channel into higher level categories\n        (CASE\n            WHEN u.\"source\" ILIKE '%sms%' THEN 'sms'\n            WHEN u.\"source\" ILIKE '%phoenix%' OR u.\"source\" IS NULL THEN 'web'\n            WHEN u.\"source\" ILIKE '%niche%' THEN 'niche_coregistration'\n            WHEN u.\"source\" NOT LIKE '%niche%' AND u.\"source\" NOT LIKE '%sms%' AND u.\"source\" NOT LIKE '%phoenix%' AND u.\"source\" IS NOT NULL THEN 'other' END\n            ) AS \"channel\"\n    FROM\n        (SELECT\n            u_create.northstar_id,\n            max(u_create.\"source\") AS \"source\",\n            min(u_create.created_at) AS created_at\n        FROM \"quasar_prod_warehouse\".\"public\".\"northstar_users_deduped\" u_create\n        WHERE\n        \t--Remove voter reg created accounts bc we create the account on behalf of the user\n            u_create.\"source\" IS DISTINCT FROM 'importer-client'\n            --Remove test records\n            AND u_create.\"source\" IS DISTINCT FROM 'runscope'\n            AND u_create.\"source\" IS DISTINCT FROM 'runscope-client'\n            AND u_create.email IS DISTINCT FROM 'runscope-scheduled-test@dosomething.org'\n            AND u_create.email IS DISTINCT FROM 'juy+runscopescheduledtests@dosomething.org'\n            AND (u_create.email NOT ILIKE '%@example.org%' OR u_create.email IS NULL)\n        GROUP BY u_create.northstar_id\n        ) u\n    UNION ALL\n    --Get inbound SMS messages recorded by Gambit\n    SELECT\n        DISTINCT g.user_id AS northstar_id,\n        g.created_at AS \"timestamp\",\n        'messaged_gambit' AS \"action\",\n        '6' AS action_id,\n        'SMS' AS \"source\",\n        g.message_id AS action_serial_id,\n        'sms' AS \"channel\"\n    FROM \"quasar_prod_warehouse\".\"public\".\"gambit_messages_inbound\" g\n    WHERE\n    \t--Remove records with no recorded NSID\n        g.user_id IS NOT NULL\n        --Remove messages where the user requested we stop sending messages\n        AND g.macro <> 'subscriptionStatusStop'\n    UNION ALL\n    --Get clicks on links within emails we sent as logged by customer.io\n    SELECT\n        DISTINCT cio.customer_id AS northstar_id,\n        cio.\"timestamp\" AS \"timestamp\",\n        'clicked_link' AS \"action\",\n        '7' AS action_id,\n        cio.template_id::CHARACTER AS \"source\",\n        cio.event_id AS action_serial_id,\n        'email' AS \"channel\"\n    FROM\n        \"quasar_prod_warehouse\".\"public\".\"cio_email_events\" cio\n    WHERE\n    \t--Filter to clicks within emails event log\n        cio.event_type = 'email_clicked'\n        AND cio.customer_id IS NOT NULL\n    UNION ALL\n    --Get shortlink resolution events as logged by Bertly\n    SELECT DISTINCT\n        b.northstar_id,\n        b.click_time AS \"timestamp\",\n        CONCAT('bertly_link_', b.interaction_type) AS \"action\",\n        '10' AS action_id,\n        'bertly' AS \"source\",\n        b.click_id AS action_serial_id,\n        b.\"source\" AS \"channel\"\n    FROM \"quasar_prod_warehouse\".\"public\".\"bertly_clicks\" b\n    INNER JOIN \"quasar_prod_warehouse\".\"public\".\"users\" u\n        ON b.northstar_id = u.northstar_id\n    WHERE\n    \t--Must have nsid to count\n        b.northstar_id IS NOT NULL\n        --Only link clicks count, not link previews which can generate automatically\n        AND b.interaction_type IS DISTINCT FROM 'preview'\n) AS a\nLEFT JOIN \"quasar_prod_warehouse\".\"public\".\"users\" u ON u.northstar_id = a.northstar_id", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "--General approach is to create a long table of events we care about\n--We query each data source of interest, manipulate the fields into a consistent format and union\n--All the unions go in a subquery which is then pulled into a final top level query\nSELECT\n    MD5(concat(a.northstar_id, a.\"timestamp\", a.action_id, a.action_serial_id)) AS event_id,\n    a.northstar_id,\n    a.\"timestamp\" AS \"timestamp\",\n    a.\"action\" AS action_type,\n    a.action_id AS action_id,\n    a.\"source\" AS \"source\",\n    --This is the unique id of the event from the data source to allow for joining the original data source as needed\n    a.action_serial_id AS action_serial_id,\n    --This tells us the medium the event occured in e.g. sms, web\n    a.channel AS channel,\n    --User is new if the month of the timestamp of the action is the same month their account was created\n    CASE\n        WHEN date_trunc('month', a.\"timestamp\") = date_trunc('month', u.created_at) \n        THEN 'New' \n        ELSE 'Returning' END\n        AS \"type\",\n    --This returns the first month the user took an action\n    MIN(\"timestamp\")\n        OVER\n        (PARTITION BY a.northstar_id, date_trunc('month', a.\"timestamp\"))\n        AS first_action_month\nFROM (\n\t--Get Campaigns Signups\n    SELECT\n        DISTINCT s.northstar_id,\n        s.created_at AS \"timestamp\",\n        'signup' AS \"action\",\n        '1' AS action_id,\n        s.\"source\" AS \"source\",\n        s.id::varchar AS action_serial_id,\n        --Bucket signup sources into higher level categories we care about\n        (CASE\n            WHEN s.\"source\" ILIKE '%sms%' THEN 'sms'\n            WHEN s.\"source\" NOT LIKE '%sms%'AND s.\"source\" NOT LIKE '%email%' AND s.\"source\" NOT LIKE '%niche%' OR s.\"source\" IN ('rock-the-vote', 'turbovote') THEN 'web'\n            WHEN s.\"source\" ILIKE '%email%' THEN 'email'\n            WHEN s.\"source\" ILIKE '%niche%' THEN 'niche_coregistration'\n            WHEN s.\"source\" NOT LIKE '%sms%'AND s.\"source\" NOT LIKE '%email%' AND s.\"source\" NOT LIKE '%niche%' AND s.\"source\" NOT IN ('rock-the-vote', 'turbovote') AND s.\"source\" IS NOT NULL THEN 'other' END\n            ) AS \"channel\"\n    FROM \"quasar_prod_warehouse\".\"public\".\"signups\" s\n    WHERE\n    \t--Remove voter reg account creations bc we create accounts on users behalf, so they don't constitute active engagement\n        s.\"source\" IS DISTINCT FROM 'importer-client'\n        AND s.\"source\" IS DISTINCT FROM 'rock-the-vote'\n        AND s.\"source\" IS DISTINCT FROM 'turbovote'\n    UNION ALL\n    --Get Campaigns Posts\n    SELECT\n        DISTINCT p.northstar_id,\n        p.created_at AS \"timestamp\",\n        'post' AS \"action\",\n        '2' AS action_id,\n        p.\"source\" AS \"source\",\n        p.id::varchar AS action_serial_id,\n        --Calculate channel by grouping post source into higher level categories\n        (CASE\n            WHEN p.\"source\" ILIKE '%sms%' THEN 'sms'\n            WHEN p.\"source\" ILIKE '%phoenix%' OR p.\"source\" IS NULL OR p.\"source\" ILIKE '%turbovote%' THEN 'web'\n            WHEN p.\"source\" ILIKE '%app%' THEN 'mobile_app'\n            WHEN p.\"source\" NOT LIKE '%phoenix%' AND p.\"source\" NOT LIKE '%sms%' AND p.\"source\" IS NOT NULL AND p.\"source\" NOT LIKE '%app%' AND p.\"source\" NOT LIKE '%turbovote%' THEN 'other' END\n            ) AS \"channel\"\n    FROM \"quasar_prod_warehouse\".\"public\".\"posts\" p\n    WHERE\n    \t--We do not want to count certain post types. \n        p.status IN ('accepted', 'confirmed', 'register-OVR', 'register-form', 'pending')\n    UNION ALL\n    --Site access represents users who were logged in but their auth token refreshed\n    SELECT DISTINCT\n        u_access.northstar_id,\n        u_access.last_accessed_at AS \"timestamp\",\n        'site_access' AS \"action\",\n        '3' AS action_id,\n        NULL AS \"source\",\n        '0' AS action_serial_id,\n        'web' AS channel\n    FROM \"quasar_prod_warehouse\".\"public\".\"northstar_users_deduped\" u_access\n    WHERE\n    \t--Remove test accounts\n        u_access.last_accessed_at IS NOT NULL\n        AND u_access.\"source\" IS DISTINCT FROM 'runscope'\n        AND u_access.\"source\" IS DISTINCT FROM 'runscope-client'\n        AND u_access.email IS DISTINCT FROM 'runscope-scheduled-test@dosomething.org'\n        AND u_access.email IS DISTINCT FROM 'juy+runscopescheduledtests@dosomething.org'\n        AND (u_access.email NOT ILIKE '%@example.org%' OR u_access.email IS NULL)\n    UNION ALL\n    --Get site authentications\n    SELECT DISTINCT\n        u_login.northstar_id,\n        u_login.last_authenticated_at AS \"timestamp\",\n        'site_login' AS \"action\",\n        '4' AS action_id,\n        NULL AS \"source\",\n        '0' AS action_serial_id,\n        'web' AS channel\n    FROM \"quasar_prod_warehouse\".\"public\".\"northstar_users_deduped\" u_login\n    WHERE\n    \t--Remove test records\n        u_login.last_authenticated_at IS NOT NULL\n        AND u_login.\"source\" IS DISTINCT FROM 'runscope'\n        AND u_login.\"source\" IS DISTINCT FROM 'runscope-client'\n        AND u_login.email IS DISTINCT FROM 'runscope-scheduled-test@dosomething.org'\n        AND u_login.email IS DISTINCT FROM 'juy+runscopescheduledtests@dosomething.org'\n        AND (u_login.email NOT ILIKE '%@example.org%' OR u_login.email IS NULL)\n    UNION ALL\n    --Get account creations\n    SELECT\n        DISTINCT u.northstar_id,\n        u.created_at AS \"timestamp\",\n        'account_creation' AS action,\n        '5' AS action_id,\n        u.\"source\" AS \"source\",\n        '0' AS action_serial_id,\n        --Bucket channel into higher level categories\n        (CASE\n            WHEN u.\"source\" ILIKE '%sms%' THEN 'sms'\n            WHEN u.\"source\" ILIKE '%phoenix%' OR u.\"source\" IS NULL THEN 'web'\n            WHEN u.\"source\" ILIKE '%niche%' THEN 'niche_coregistration'\n            WHEN u.\"source\" NOT LIKE '%niche%' AND u.\"source\" NOT LIKE '%sms%' AND u.\"source\" NOT LIKE '%phoenix%' AND u.\"source\" IS NOT NULL THEN 'other' END\n            ) AS \"channel\"\n    FROM\n        (SELECT\n            u_create.northstar_id,\n            max(u_create.\"source\") AS \"source\",\n            min(u_create.created_at) AS created_at\n        FROM \"quasar_prod_warehouse\".\"public\".\"northstar_users_deduped\" u_create\n        WHERE\n        \t--Remove voter reg created accounts bc we create the account on behalf of the user\n            u_create.\"source\" IS DISTINCT FROM 'importer-client'\n            --Remove test records\n            AND u_create.\"source\" IS DISTINCT FROM 'runscope'\n            AND u_create.\"source\" IS DISTINCT FROM 'runscope-client'\n            AND u_create.email IS DISTINCT FROM 'runscope-scheduled-test@dosomething.org'\n            AND u_create.email IS DISTINCT FROM 'juy+runscopescheduledtests@dosomething.org'\n            AND (u_create.email NOT ILIKE '%@example.org%' OR u_create.email IS NULL)\n        GROUP BY u_create.northstar_id\n        ) u\n    UNION ALL\n    --Get inbound SMS messages recorded by Gambit\n    SELECT\n        DISTINCT g.user_id AS northstar_id,\n        g.created_at AS \"timestamp\",\n        'messaged_gambit' AS \"action\",\n        '6' AS action_id,\n        'SMS' AS \"source\",\n        g.message_id AS action_serial_id,\n        'sms' AS \"channel\"\n    FROM \"quasar_prod_warehouse\".\"public\".\"gambit_messages_inbound\" g\n    WHERE\n    \t--Remove records with no recorded NSID\n        g.user_id IS NOT NULL\n        --Remove messages where the user requested we stop sending messages\n        AND g.macro <> 'subscriptionStatusStop'\n    UNION ALL\n    --Get clicks on links within emails we sent as logged by customer.io\n    SELECT\n        DISTINCT cio.customer_id AS northstar_id,\n        cio.\"timestamp\" AS \"timestamp\",\n        'clicked_link' AS \"action\",\n        '7' AS action_id,\n        cio.template_id::CHARACTER AS \"source\",\n        cio.event_id AS action_serial_id,\n        'email' AS \"channel\"\n    FROM\n        \"quasar_prod_warehouse\".\"public\".\"cio_email_events\" cio\n    WHERE\n    \t--Filter to clicks within emails event log\n        cio.event_type = 'email_clicked'\n        AND cio.customer_id IS NOT NULL\n    UNION ALL\n    --Get shortlink resolution events as logged by Bertly\n    SELECT DISTINCT\n        b.northstar_id,\n        b.click_time AS \"timestamp\",\n        CONCAT('bertly_link_', b.interaction_type) AS \"action\",\n        '10' AS action_id,\n        'bertly' AS \"source\",\n        b.click_id AS action_serial_id,\n        b.\"source\" AS \"channel\"\n    FROM \"quasar_prod_warehouse\".\"public\".\"bertly_clicks\" b\n    INNER JOIN \"quasar_prod_warehouse\".\"public\".\"users\" u\n        ON b.northstar_id = u.northstar_id\n    WHERE\n    \t--Must have nsid to count\n        b.northstar_id IS NOT NULL\n        --Only link clicks count, not link previews which can generate automatically\n        AND b.interaction_type IS DISTINCT FROM 'preview'\n) AS a\nLEFT JOIN \"quasar_prod_warehouse\".\"public\".\"users\" u ON u.northstar_id = a.northstar_id"}, "error": null, "status": null, "execution_time": 0.0325169563293457, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-02-23T21:28:56.004305Z", "completed_at": "2021-02-23T21:28:56.035755Z"}, {"name": "execute", "started_at": "2021-02-23T21:28:56.036083Z", "completed_at": "2021-02-23T21:28:56.036090Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "--first_and_second_signups is the final table referenced used by Looker in 3 views:\n--campaign_signups_1_and_2:\n--https://dsdata.looker.com/projects/blade/files/campaign_signups_1_and_2.view\n--channel_crossover:\n--https://dsdata.looker.com/projects/blade/files/channel_crossover.view.lkml\n--channel_crossover_campaigns:\n--https://dsdata.looker.com/projects/blade/files/channel_crossover_campaigns.view.lkml\n--which are used to generate dashboards:\n--https://dsdata.looker.com/dashboards/188 (Campaign Sign-Ups 1&2)\n--https://dsdata.looker.com/dashboards/208 (User Channel Crossover)\n--table first_and_second_signups bring signups 1 & 2 (of the same user) into a single row\n--along with previously generated campaign-level data ( campaign_info )\n--with the goal of comparing them to determine whether there are patterns\n--corresponding to better report-back rates\n\nWITH ns_signups AS (\n    SELECT\n        id AS signup_id,\n        northstar_id,\n        campaign_id,\n        source_bucket,\n        created_at,\n        group_id,\n        rank() over(\n            PARTITION by northstar_id\n            ORDER BY\n                created_at\n        ) nth_signup\n    FROM\n        {{ ref('signups') }}\n),\nns_signup_2 AS (\n    SELECT\n        *\n    FROM\n        ns_signups\n    WHERE\n        nth_signup = 2\n)\nSELECT\n    ns1.northstar_id,\n    ns1.campaign_id AS campaign_id_1,\n    ns2.campaign_id AS campaign_id_2,\n    ns1.signup_id AS signup_id_1,\n    ns2.signup_id AS signup_id_2,\n    --Sign-Up Source\n    ns1.source_bucket AS signup_source_bucket_1,\n    ns2.source_bucket AS signup_source_bucket_2,\n    CASE\n        WHEN NULLIF(ns1.source_bucket, '') IS NULL\n        AND NULLIF(ns2.source_bucket, '') IS NULL THEN 'Both are Unknown'\n        ELSE concat(\n            coalesce(NULLIF(ns1.source_bucket, ''), 'Unknown'),\n            ' / ',\n            coalesce(NULLIF(ns2.source_bucket, ''), 'Unknown')\n        )\n    END AS signup_source_bucket_pattern,\n    --Action Type from Campaign_Info table\n    c1.campaign_action_type AS campaign_action_type_1,\n    c2.campaign_action_type AS campaign_action_type_2,\n    CASE\n        WHEN NULLIF(c1.campaign_action_type, '') IS NULL\n        AND NULLIF(c2.campaign_action_type, '') IS NULL THEN 'Both are Unknown'\n        WHEN NULLIF(c1.campaign_action_type, '') IS NULL\n        OR NULLIF(c2.campaign_action_type, '') IS NULL THEN 'One is Unknown'\n        WHEN c1.campaign_action_type LIKE concat('%', c2.campaign_action_type, '%')\n        OR c2.campaign_action_type LIKE concat('%', c1.campaign_action_type, '%')\n        OR (\n            c1.campaign_action_type LIKE '%Donate Something%'\n            AND c2.campaign_action_type LIKE '%Donate Something%'\n        )\n        OR (\n            c1.campaign_action_type LIKE '%Make Something%'\n            AND c2.campaign_action_type LIKE '%Make Something%'\n        )\n        OR (\n            c1.campaign_action_type LIKE '%Share Something%'\n            AND c2.campaign_action_type LIKE '%Share Something%'\n        )\n        OR (\n            c1.campaign_action_type LIKE '%Take a Stand%'\n            AND c2.campaign_action_type LIKE '%Take a Stand%'\n        ) THEN 'Same'\n        ELSE 'Different'\n    END AS campaign_action_type_pattern,\n    --Action Type from Campaign_Info table\n    c1.campaign_cause_type AS campaign_cause_type_1,\n    c2.campaign_cause_type AS campaign_cause_type_2,\n    CASE\n        WHEN NULLIF(c1.campaign_cause_type, '') IS NULL\n        AND NULLIF(c2.campaign_cause_type, '') IS NULL THEN 'Both are Unknown'\n        WHEN NULLIF(c1.campaign_cause_type, '') IS NULL\n        OR NULLIF(c2.campaign_cause_type, '') IS NULL THEN 'One is Unknown'\n        WHEN c1.campaign_cause_type LIKE concat('%', c2.campaign_cause_type, '%')\n        OR c2.campaign_cause_type LIKE concat('%', c1.campaign_cause_type, '%') THEN 'Same'\n        ELSE 'Different'\n    END AS campaign_cause_type_pattern,\n    --Online/Offline from Campaign_Info table (derived from all RBs for each Campaign ID)\n    c1.online_offline AS campaign_online_offline_1,\n    c2.online_offline AS campaign_online_offline_2,\n    CASE\n        WHEN NULLIF(c1.online_offline, '') IS NULL\n        AND NULLIF(c2.online_offline, '') IS NULL THEN 'Both are Unknown'\n        WHEN c1.online_offline = c2.online_offline THEN concat('Both are ', c1.online_offline)\n        ELSE concat(\n            coalesce(c1.online_offline, 'Unknown'),\n            ' / ',\n            coalesce(c2.online_offline, 'Unknown')\n        )\n    END AS campaign_online_offline_pattern,\n    --Action Type from Campaign_Info table (derived from all RBs for each Campaign ID)\n    c1.action_types AS campaign_action_types_1,\n    c2.action_types AS campaign_action_types_2,\n    CASE\n        WHEN NULLIF(c1.action_types, '') IS NULL\n        AND NULLIF(c2.action_types, '') IS NULL THEN 'Both are Unknown'\n        WHEN NULLIF(c1.action_types, '') IS NULL\n        OR NULLIF(c2.action_types, '') IS NULL THEN 'One is Unknown'\n        WHEN c1.action_types LIKE concat('%', c2.action_types, '%')\n        OR c2.action_types LIKE concat('%', c1.action_types, '%') THEN 'Same'\n        ELSE 'Different'\n    END AS campaign_action_types_pattern,\n    --Scholarship from Campaign_Info table (derived from all RBs for each Campaign ID)\n    c1.scholarship AS campaign_scholarship_1,\n    c2.scholarship AS campaign_scholarship_2,\n    CASE\n        WHEN NULLIF(c1.scholarship, '') IS NULL\n        AND NULLIF(c2.scholarship, '') IS NULL THEN 'Both are Unknown'\n        WHEN c1.scholarship = c2.scholarship THEN concat('Both are ', c1.scholarship)\n        ELSE concat(\n            coalesce(c1.scholarship, 'Unknown'),\n            ' / ',\n            coalesce(c2.scholarship, 'Unknown')\n        )\n    END AS campaign_scholarship_pattern,\n    --Post Type from Campaign_Info table (derived from all RBs for each Campaign ID)\n    c1.post_types AS campaign_post_types_1,\n    c2.post_types AS campaign_post_types_2,\n    CASE\n        WHEN NULLIF(c1.post_types, '') IS NULL\n        AND NULLIF(c2.post_types, '') IS NULL THEN 'Both are Unknown'\n        WHEN NULLIF(c1.post_types, '') IS NULL\n        OR NULLIF(c2.post_types, '') IS NULL THEN 'One is Unknown'\n        WHEN c1.post_types LIKE concat('%', c2.post_types, '%')\n        OR c2.post_types LIKE concat('%', c1.post_types, '%') THEN 'Same'\n        ELSE 'Different'\n    END AS campaign_post_types_pattern,\n    --Report Backs from Signup 1 & 2 Report Backs\n    r1.num_rbs AS num_rbs_1,\n    r2.num_rbs AS num_rbs_2,\n    CASE\n        WHEN coalesce(r1.num_rbs, 0) = 0\n        AND coalesce(r2.num_rbs, 0) = 0 THEN 'No RB to Either SignUp'\n        WHEN coalesce(r1.num_rbs, 0) = 0 THEN 'No RB to SignUp 1'\n        WHEN coalesce(r2.num_rbs, 0) = 0 THEN 'No RB to SignUp 2'\n        WHEN r1.num_rbs > 0\n        AND r2.num_rbs > 0 THEN 'RB to Both SignUps'\n        ELSE '?'\n    END AS num_rbs_pattern,\n    --Report-Back Source\n    r1.post_sources AS rb_source_buckets_1,\n    r2.post_sources AS rb_source_buckets_2,\n    CASE\n        WHEN coalesce(r1.num_rbs, 0) = 0\n        AND coalesce(r2.num_rbs, 0) = 0 THEN 'No RB to Either SignUp'\n        WHEN coalesce(r1.num_rbs, 0) = 0 THEN concat(\n            'No RB',\n            ' / ',\n            coalesce(r2.post_sources, 'Unknown')\n        )\n        WHEN coalesce(r2.num_rbs, 0) = 0 THEN concat(\n            coalesce(r1.post_sources, 'Unknown'),\n            ' / ',\n            'No RB'\n        )\n        ELSE concat(\n            coalesce(r1.post_sources, 'Unknown'),\n            ' / ',\n            coalesce(r2.post_sources, 'Unknown')\n        )\n    END AS rb_source_buckets_pattern,\n    --Report Back Types from Signup 1 & 2 Report Backs\n    r1.post_types AS rb_post_types_1,\n    r2.post_types AS rb_post_types_2,\n    CASE\n        WHEN coalesce(r1.num_rbs, 0) = 0\n        AND coalesce(r2.num_rbs, 0) = 0 THEN 'No RB to Either SignUp'\n        WHEN coalesce(r1.num_rbs, 0) = 0 THEN 'No RB to SignUp 1'\n        WHEN coalesce(r2.num_rbs, 0) = 0 THEN 'No RB to SignUp 2'\n        WHEN coalesce(r1.post_types, '') = ''\n        AND coalesce(r2.post_types, '') = '' THEN 'Both RB Post Types are Unknown'\n        WHEN coalesce(r1.post_types, '') = '' THEN 'RB Post Type 1 is Unknown'\n        WHEN coalesce(r2.post_types, '') = '' THEN 'RB Post Type 2 is Unknown'\n        WHEN r1.post_types LIKE concat('%', r2.post_types, '%')\n        OR r2.post_types LIKE concat('%', r1.post_types, '%') THEN 'Same'\n        ELSE 'Different'\n    END AS rb_post_types_pattern,\n    --Report Back Online/Offline from Signup 1 & 2 Report Backs\n    r1.online_offline AS rb_online_offline_1,\n    r2.online_offline AS rb_online_offline_2,\n    CASE\n        WHEN coalesce(r1.num_rbs, 0) = 0\n        AND coalesce(r2.num_rbs, 0) = 0 THEN 'No RB to Either SignUp'\n        WHEN coalesce(r1.num_rbs, 0) = 0 THEN 'No RB to SignUp 1'\n        WHEN coalesce(r2.num_rbs, 0) = 0 THEN 'No RB to SignUp 2'\n        WHEN coalesce(r1.online_offline, '') = ''\n        AND coalesce(r2.online_offline, '') = '' THEN 'Both RB Online/Offline are Unknown'\n        WHEN coalesce(r1.online_offline, '') = '' THEN 'RB Online/Offline 1 is Unknown'\n        WHEN coalesce(r2.online_offline, '') = '' THEN 'RB Online/Offline 2 is Unknown'\n        WHEN r1.online_offline = r2.online_offline THEN concat('Both are ', r1.online_offline)\n        ELSE concat(\n            coalesce(r1.online_offline, 'Unknown'),\n            ' / ',\n            coalesce(r2.online_offline, 'Unknown')\n        )\n    END AS rb_online_offline_pattern,\n    --Report Back Action Types from Signup 1 & 2 Report Backs\n    r1.action_types AS rb_action_types_1,\n    r2.action_types AS rb_action_types_2,\n    CASE\n        WHEN coalesce(r1.num_rbs, 0) = 0\n        AND coalesce(r2.num_rbs, 0) = 0 THEN 'No RB to Either SignUp'\n        WHEN coalesce(r1.num_rbs, 0) = 0 THEN 'No RB to SignUp 1'\n        WHEN coalesce(r2.num_rbs, 0) = 0 THEN 'No RB to SignUp 2'\n        WHEN coalesce(r1.action_types, '') = ''\n        AND coalesce(r2.action_types, '') = '' THEN 'Both RB Action Types are Unknown'\n        WHEN coalesce(r1.action_types, '') = '' THEN 'RB Action Type 1 is Unknown'\n        WHEN coalesce(r2.action_types, '') = '' THEN 'RB Action Type 2 is Unknown'\n        WHEN r1.action_types LIKE concat('%', r2.action_types, '%')\n        OR r2.action_types LIKE concat('%', r1.action_types, '%') THEN 'Same'\n        ELSE 'Different'\n    END AS rb_action_types_pattern\nFROM\n    ns_signups ns1\n    LEFT JOIN ns_signup_2 ns2 ON (ns1.northstar_id = ns2.northstar_id)\n    JOIN {{ ref('campaign_info') }} c1 ON (ns1.campaign_id = c1.campaign_id :: text)\n    LEFT JOIN {{ ref('campaign_info') }} c2 ON (ns2.campaign_id = c2.campaign_id :: text)\n    LEFT JOIN {{ ref('user_rb_summary') }} r1 ON (ns1.signup_id = r1.signup_id)\n    LEFT JOIN {{ ref('user_rb_summary') }} r2 ON (ns2.signup_id = r2.signup_id)\nWHERE\n    ns1.nth_signup = 1", "compiled": true, "database": "quasar_prod_warehouse", "schema": "public", "fqn": ["ds_dbt", "campaign_activity", "first_and_second_signups"], "unique_id": "model.ds_dbt.first_and_second_signups", "package_name": "ds_dbt", "root_path": "/home/runner/work/quasar/quasar/quasar/dbt", "path": "campaign_activity/first_and_second_signups.sql", "original_file_path": "models/campaign_activity/first_and_second_signups.sql", "name": "first_and_second_signups", "resource_type": "model", "alias": "first_and_second_signups", "checksum": {"name": "sha256", "checksum": "0035679bdcee49b3c53df5fa576bfd60f816f3a1e7b1079da9fc8b8db31607a0"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [{"sql": "CREATE INDEX {{ get_index_name(this, 'northstar_id') }} (northstar_id)", "transaction": true, "index": null}, {"sql": "{{ grant_select_to(this, ['dsanalyst', 'looker']) }}", "transaction": true, "index": null}], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": "first_and_second_signups", "schema": null, "database": null, "tags": ["campaign_activity"], "full_refresh": null}, "tags": ["campaign_activity"], "refs": [["signups"], ["campaign_info"], ["campaign_info"], ["user_rb_summary"], ["user_rb_summary"]], "sources": [], "depends_on": {"macros": ["macro.ds_dbt.get_index_name", "macro.ds_dbt.grant_select_to"], "nodes": ["model.ds_dbt.signups", "model.ds_dbt.campaign_info", "model.ds_dbt.campaign_info", "model.ds_dbt.user_rb_summary", "model.ds_dbt.user_rb_summary"]}, "description": "A table that brings signups 1 & 2 (of the same user) into a single row along with previously generated campaign-level data. The goal is comparing them to determine whether there are patterns corresponding to better report-back rates.", "columns": {"northstar_id": {"name": "northstar_id", "description": "The Northstar ID of the user who generated the event.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id_1": {"name": "campaign_id_1", "description": "This is a unique identifier for the campaign for Signup #1", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_id_2": {"name": "campaign_id_2", "description": "This is a unique identifier for the campaign for Signup #2", "meta": {}, "data_type": null, "quote": null, "tags": []}, "signup_id_1": {"name": "signup_id_1", "description": "Unique identifier for the signup #1", "meta": {}, "data_type": null, "quote": null, "tags": []}, "signup_id_2": {"name": "signup_id_2", "description": "Unique identifier for the signup #2", "meta": {}, "data_type": null, "quote": null, "tags": []}, "signup_source_bucket_1": {"name": "signup_source_bucket_1", "description": "Grouping bucket for origin of the signup, e.g. \"sms\", \"web\", \"voter-reg\" or \"niche\" for the first Signup", "meta": {}, "data_type": null, "quote": null, "tags": []}, "signup_source_bucket_2": {"name": "signup_source_bucket_2", "description": "Grouping bucket for origin of the signup, e.g. \"sms\", \"web\", \"voter-reg\" or \"niche\" for the second Signup", "meta": {}, "data_type": null, "quote": null, "tags": []}, "signup_source_bucket_pattern": {"name": "signup_source_bucket_pattern", "description": "Source Bucket pattern for both Signups e.g. (Both are Unknown, [sms|web|voter-reg|niche|Unknown / sms|web|voter-reg|niche|Unknown])", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_action_type_1": {"name": "campaign_action_type_1", "description": "Campaign action type (eg. Make Something, Share Something) for the first Signup", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_action_type_2": {"name": "campaign_action_type_2", "description": "Campaign action type (eg. Make Something, Share Something) for the second Signup", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_action_type_pattern": {"name": "campaign_action_type_pattern", "description": "Campaign Action Type Pattern e.g. (Both are Unknown, One is Unknown, Same, Different)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_cause_type_1": {"name": "campaign_cause_type_1", "description": "Campaign cause type (e.g. Mental Health, Education, Environment) for the first Signup", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_cause_type_2": {"name": "campaign_cause_type_2", "description": "Campaign cause type (e.g. Mental Health, Education, Environment) for the second Signup", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_cause_type_pattern": {"name": "campaign_cause_type_pattern", "description": "Campaign Cause Type Pattern e.g. (Both are Unknown, One is Unknown, Same, Different)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_online_offline_1": {"name": "campaign_online_offline_1", "description": "Campaign for first Signup has (Online, Offline (IRL), or Both) types of Post Actions", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_online_offline_2": {"name": "campaign_online_offline_2", "description": "Campaign for second Signup has (Online, Offline (IRL), or Both) types of Post Actions", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_online_offline_pattern": {"name": "campaign_online_offline_pattern", "description": "Online Pattern (based on Post Actions) for the campaigns in both Signups e.g. (Both are Unknown, Both are [Both|Online|Offline|Unknown], [Both|Online|Offline|Unknown / Both|Online|Offline|Unknown])", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_action_types_1": {"name": "campaign_action_types_1", "description": "Aggregated list of Action Types of all the Actions available for the campaign (e.g. attend-event, share-something, make-something, collect-something, contact-decisionmaker, donate-something, host-event, have-a-conversation, flag-content, sign-petition, submit-tip, other) for the first Signup", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_action_types_2": {"name": "campaign_action_types_2", "description": "Aggregated list of Action Types of all the Actions available for the campaign (e.g. attend-event, share-something, make-something, collect-something, contact-decisionmaker, donate-something, host-event, have-a-conversation, flag-content, sign-petition, submit-tip, other) for the second Signup", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_action_types_pattern": {"name": "campaign_action_types_pattern", "description": "Campaign Action Types Pattern e.g. (Both are Unknown, One is Unknown, Same, Different)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_scholarship_1": {"name": "campaign_scholarship_1", "description": "Wether the Campaign for the first Signup is associated with a Scholarship -- if one of it's actions is setup as Scholarship Entry (e.g. Scholarship, Not Scholarship)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_scholarship_2": {"name": "campaign_scholarship_2", "description": "Wether the Campaign for the second Signup is associated with a Scholarship -- if one of it's actions is setup as Scholarship Entry (e.g. Scholarship, Not Scholarship)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_scholarship_pattern": {"name": "campaign_scholarship_pattern", "description": "Campaign Scholarship association pattern for both Signups e.g. (Both are Unknown, Both are [Scholarship|Not Scholarship|Unknown], [Scholarship|Not Scholarship|Unknown / Scholarship|Not Scholarship|Unknown])", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_post_types_1": {"name": "campaign_post_types_1", "description": "Aggregated list of post types of all the actions available for the campaign (e.g. photo, phone-call, share-social, text, voter-reg, email) for the first Signup", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_post_types_2": {"name": "campaign_post_types_2", "description": "Aggregated list of post types of all the actions available for the campaign (e.g. photo, phone-call, share-social, text, voter-reg, email) for the second Signup", "meta": {}, "data_type": null, "quote": null, "tags": []}, "campaign_post_types_pattern": {"name": "campaign_post_types_pattern", "description": "Campaign Post Types Pattern e.g. (Both are Unknown, One is Unknown, Same, Different)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "num_rbs_1": {"name": "num_rbs_1", "description": "Quantity of reportbacks for the user for the first Signup", "meta": {}, "data_type": null, "quote": null, "tags": []}, "num_rbs_2": {"name": "num_rbs_2", "description": "Quantity of reportbacks for the user for the second Signup", "meta": {}, "data_type": null, "quote": null, "tags": []}, "num_rbs_pattern": {"name": "num_rbs_pattern", "description": "Num Reportbacks pattern for both Signups e.g. (No RB to Either SignUp, No RB to SignUp 1, No RB to SignUp 2, RB to Both SignUps)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "rb_source_buckets_1": {"name": "rb_source_buckets_1", "description": "Aggregated list of the grouping buckets for the origin of the posts (e.g. sms, web) for the first Signup", "meta": {}, "data_type": null, "quote": null, "tags": []}, "rb_source_buckets_2": {"name": "rb_source_buckets_2", "description": "Aggregated list of the grouping buckets for the origin of the posts (e.g. sms, web) for the second Signup", "meta": {}, "data_type": null, "quote": null, "tags": []}, "rb_source_buckets_pattern": {"name": "rb_source_buckets_pattern", "description": "Post Sources pattern for both Signups e.g. (No RB to Either SignUp, [No RB|sms|web|sms , web|Unknown / No RB|sms|web|sms , web|Unknown])", "meta": {}, "data_type": null, "quote": null, "tags": []}, "rb_post_types_1": {"name": "rb_post_types_1", "description": "Aggregated list of post types of the posts (e.g. photo, phone-call, share-social, text, voter-reg, email) for the first Signup", "meta": {}, "data_type": null, "quote": null, "tags": []}, "rb_post_types_2": {"name": "rb_post_types_2", "description": "Aggregated list of post types of the posts (e.g. photo, phone-call, share-social, text, voter-reg, email) for the second Signup", "meta": {}, "data_type": null, "quote": null, "tags": []}, "rb_post_types_pattern": {"name": "rb_post_types_pattern", "description": "Post Types pattern for both Signups e.g. (No RB to Either SignUp, No RB to SignUp 1, No RB to SignUp 2, Both RB Post Types are Unknown, RB Post Type 1 is Unknown, RB Post Type 2 is Unknown, Same, Different)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "rb_online_offline_1": {"name": "rb_online_offline_1", "description": "Aggregate. Whether the posts are online, offline (IRL), or both, e.g. (\"Online\", \"Offline\", \"Online , Offline\") for the first Signup", "meta": {}, "data_type": null, "quote": null, "tags": []}, "rb_online_offline_2": {"name": "rb_online_offline_2", "description": "Aggregate. Whether the posts are online, offline (IRL), or both, e.g. (\"Online\", \"Offline\", \"Online , Offline\") for the second Signup", "meta": {}, "data_type": null, "quote": null, "tags": []}, "rb_online_offline_pattern": {"name": "rb_online_offline_pattern", "description": "Online/Offline posts pattern for both Signups e.g. (No RB to Either SignUp, No RB to SignUp 1, No RB to SignUp 2, Both RB Online/Offline are Unknown, RB Online/Offline 1 is Unknown, RB Online/Offline 2 is Unknown, Both are [Online|Offline|Online , Offline], [Online|Offline|Online , Offline|Unknown / Online|Offline|Online , Offline|Unknown])", "meta": {}, "data_type": null, "quote": null, "tags": []}, "rb_action_types_1": {"name": "rb_action_types_1", "description": "Aggregated list of Action Types of the Posts (e.g. attend-event, share-something, make-something, collect-something, contact-decisionmaker, donate-something, host-event, have-a-conversation, flag-content, sign-petition, submit-tip, other) for the first Signup", "meta": {}, "data_type": null, "quote": null, "tags": []}, "rb_action_types_2": {"name": "rb_action_types_2", "description": "Aggregated list of Action Types of the Posts (e.g. attend-event, share-something, make-something, collect-something, contact-decisionmaker, donate-something, host-event, have-a-conversation, flag-content, sign-petition, submit-tip, other) for the second Signup", "meta": {}, "data_type": null, "quote": null, "tags": []}, "rb_action_types_pattern": {"name": "rb_action_types_pattern", "description": "Post action types pattern for both Signups e.g. (No RB to Either SignUp, No RB to SignUp 1, No RB to SignUp 2, Both RB Action Types are Unknown, RB Action Type 1 is Unknown, RB Action Type 2 is Unknown, Same, Different)", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/campaign_activity/schema.yml", "build_path": "../../docs/compiled/ds_dbt/models/campaign_activity/first_and_second_signups.sql", "deferred": false, "compiled_sql": "--first_and_second_signups is the final table referenced used by Looker in 3 views:\n--campaign_signups_1_and_2:\n--https://dsdata.looker.com/projects/blade/files/campaign_signups_1_and_2.view\n--channel_crossover:\n--https://dsdata.looker.com/projects/blade/files/channel_crossover.view.lkml\n--channel_crossover_campaigns:\n--https://dsdata.looker.com/projects/blade/files/channel_crossover_campaigns.view.lkml\n--which are used to generate dashboards:\n--https://dsdata.looker.com/dashboards/188 (Campaign Sign-Ups 1&2)\n--https://dsdata.looker.com/dashboards/208 (User Channel Crossover)\n--table first_and_second_signups bring signups 1 & 2 (of the same user) into a single row\n--along with previously generated campaign-level data ( campaign_info )\n--with the goal of comparing them to determine whether there are patterns\n--corresponding to better report-back rates\n\nWITH ns_signups AS (\n    SELECT\n        id AS signup_id,\n        northstar_id,\n        campaign_id,\n        source_bucket,\n        created_at,\n        group_id,\n        rank() over(\n            PARTITION by northstar_id\n            ORDER BY\n                created_at\n        ) nth_signup\n    FROM\n        \"quasar_prod_warehouse\".\"public\".\"signups\"\n),\nns_signup_2 AS (\n    SELECT\n        *\n    FROM\n        ns_signups\n    WHERE\n        nth_signup = 2\n)\nSELECT\n    ns1.northstar_id,\n    ns1.campaign_id AS campaign_id_1,\n    ns2.campaign_id AS campaign_id_2,\n    ns1.signup_id AS signup_id_1,\n    ns2.signup_id AS signup_id_2,\n    --Sign-Up Source\n    ns1.source_bucket AS signup_source_bucket_1,\n    ns2.source_bucket AS signup_source_bucket_2,\n    CASE\n        WHEN NULLIF(ns1.source_bucket, '') IS NULL\n        AND NULLIF(ns2.source_bucket, '') IS NULL THEN 'Both are Unknown'\n        ELSE concat(\n            coalesce(NULLIF(ns1.source_bucket, ''), 'Unknown'),\n            ' / ',\n            coalesce(NULLIF(ns2.source_bucket, ''), 'Unknown')\n        )\n    END AS signup_source_bucket_pattern,\n    --Action Type from Campaign_Info table\n    c1.campaign_action_type AS campaign_action_type_1,\n    c2.campaign_action_type AS campaign_action_type_2,\n    CASE\n        WHEN NULLIF(c1.campaign_action_type, '') IS NULL\n        AND NULLIF(c2.campaign_action_type, '') IS NULL THEN 'Both are Unknown'\n        WHEN NULLIF(c1.campaign_action_type, '') IS NULL\n        OR NULLIF(c2.campaign_action_type, '') IS NULL THEN 'One is Unknown'\n        WHEN c1.campaign_action_type LIKE concat('%', c2.campaign_action_type, '%')\n        OR c2.campaign_action_type LIKE concat('%', c1.campaign_action_type, '%')\n        OR (\n            c1.campaign_action_type LIKE '%Donate Something%'\n            AND c2.campaign_action_type LIKE '%Donate Something%'\n        )\n        OR (\n            c1.campaign_action_type LIKE '%Make Something%'\n            AND c2.campaign_action_type LIKE '%Make Something%'\n        )\n        OR (\n            c1.campaign_action_type LIKE '%Share Something%'\n            AND c2.campaign_action_type LIKE '%Share Something%'\n        )\n        OR (\n            c1.campaign_action_type LIKE '%Take a Stand%'\n            AND c2.campaign_action_type LIKE '%Take a Stand%'\n        ) THEN 'Same'\n        ELSE 'Different'\n    END AS campaign_action_type_pattern,\n    --Action Type from Campaign_Info table\n    c1.campaign_cause_type AS campaign_cause_type_1,\n    c2.campaign_cause_type AS campaign_cause_type_2,\n    CASE\n        WHEN NULLIF(c1.campaign_cause_type, '') IS NULL\n        AND NULLIF(c2.campaign_cause_type, '') IS NULL THEN 'Both are Unknown'\n        WHEN NULLIF(c1.campaign_cause_type, '') IS NULL\n        OR NULLIF(c2.campaign_cause_type, '') IS NULL THEN 'One is Unknown'\n        WHEN c1.campaign_cause_type LIKE concat('%', c2.campaign_cause_type, '%')\n        OR c2.campaign_cause_type LIKE concat('%', c1.campaign_cause_type, '%') THEN 'Same'\n        ELSE 'Different'\n    END AS campaign_cause_type_pattern,\n    --Online/Offline from Campaign_Info table (derived from all RBs for each Campaign ID)\n    c1.online_offline AS campaign_online_offline_1,\n    c2.online_offline AS campaign_online_offline_2,\n    CASE\n        WHEN NULLIF(c1.online_offline, '') IS NULL\n        AND NULLIF(c2.online_offline, '') IS NULL THEN 'Both are Unknown'\n        WHEN c1.online_offline = c2.online_offline THEN concat('Both are ', c1.online_offline)\n        ELSE concat(\n            coalesce(c1.online_offline, 'Unknown'),\n            ' / ',\n            coalesce(c2.online_offline, 'Unknown')\n        )\n    END AS campaign_online_offline_pattern,\n    --Action Type from Campaign_Info table (derived from all RBs for each Campaign ID)\n    c1.action_types AS campaign_action_types_1,\n    c2.action_types AS campaign_action_types_2,\n    CASE\n        WHEN NULLIF(c1.action_types, '') IS NULL\n        AND NULLIF(c2.action_types, '') IS NULL THEN 'Both are Unknown'\n        WHEN NULLIF(c1.action_types, '') IS NULL\n        OR NULLIF(c2.action_types, '') IS NULL THEN 'One is Unknown'\n        WHEN c1.action_types LIKE concat('%', c2.action_types, '%')\n        OR c2.action_types LIKE concat('%', c1.action_types, '%') THEN 'Same'\n        ELSE 'Different'\n    END AS campaign_action_types_pattern,\n    --Scholarship from Campaign_Info table (derived from all RBs for each Campaign ID)\n    c1.scholarship AS campaign_scholarship_1,\n    c2.scholarship AS campaign_scholarship_2,\n    CASE\n        WHEN NULLIF(c1.scholarship, '') IS NULL\n        AND NULLIF(c2.scholarship, '') IS NULL THEN 'Both are Unknown'\n        WHEN c1.scholarship = c2.scholarship THEN concat('Both are ', c1.scholarship)\n        ELSE concat(\n            coalesce(c1.scholarship, 'Unknown'),\n            ' / ',\n            coalesce(c2.scholarship, 'Unknown')\n        )\n    END AS campaign_scholarship_pattern,\n    --Post Type from Campaign_Info table (derived from all RBs for each Campaign ID)\n    c1.post_types AS campaign_post_types_1,\n    c2.post_types AS campaign_post_types_2,\n    CASE\n        WHEN NULLIF(c1.post_types, '') IS NULL\n        AND NULLIF(c2.post_types, '') IS NULL THEN 'Both are Unknown'\n        WHEN NULLIF(c1.post_types, '') IS NULL\n        OR NULLIF(c2.post_types, '') IS NULL THEN 'One is Unknown'\n        WHEN c1.post_types LIKE concat('%', c2.post_types, '%')\n        OR c2.post_types LIKE concat('%', c1.post_types, '%') THEN 'Same'\n        ELSE 'Different'\n    END AS campaign_post_types_pattern,\n    --Report Backs from Signup 1 & 2 Report Backs\n    r1.num_rbs AS num_rbs_1,\n    r2.num_rbs AS num_rbs_2,\n    CASE\n        WHEN coalesce(r1.num_rbs, 0) = 0\n        AND coalesce(r2.num_rbs, 0) = 0 THEN 'No RB to Either SignUp'\n        WHEN coalesce(r1.num_rbs, 0) = 0 THEN 'No RB to SignUp 1'\n        WHEN coalesce(r2.num_rbs, 0) = 0 THEN 'No RB to SignUp 2'\n        WHEN r1.num_rbs > 0\n        AND r2.num_rbs > 0 THEN 'RB to Both SignUps'\n        ELSE '?'\n    END AS num_rbs_pattern,\n    --Report-Back Source\n    r1.post_sources AS rb_source_buckets_1,\n    r2.post_sources AS rb_source_buckets_2,\n    CASE\n        WHEN coalesce(r1.num_rbs, 0) = 0\n        AND coalesce(r2.num_rbs, 0) = 0 THEN 'No RB to Either SignUp'\n        WHEN coalesce(r1.num_rbs, 0) = 0 THEN concat(\n            'No RB',\n            ' / ',\n            coalesce(r2.post_sources, 'Unknown')\n        )\n        WHEN coalesce(r2.num_rbs, 0) = 0 THEN concat(\n            coalesce(r1.post_sources, 'Unknown'),\n            ' / ',\n            'No RB'\n        )\n        ELSE concat(\n            coalesce(r1.post_sources, 'Unknown'),\n            ' / ',\n            coalesce(r2.post_sources, 'Unknown')\n        )\n    END AS rb_source_buckets_pattern,\n    --Report Back Types from Signup 1 & 2 Report Backs\n    r1.post_types AS rb_post_types_1,\n    r2.post_types AS rb_post_types_2,\n    CASE\n        WHEN coalesce(r1.num_rbs, 0) = 0\n        AND coalesce(r2.num_rbs, 0) = 0 THEN 'No RB to Either SignUp'\n        WHEN coalesce(r1.num_rbs, 0) = 0 THEN 'No RB to SignUp 1'\n        WHEN coalesce(r2.num_rbs, 0) = 0 THEN 'No RB to SignUp 2'\n        WHEN coalesce(r1.post_types, '') = ''\n        AND coalesce(r2.post_types, '') = '' THEN 'Both RB Post Types are Unknown'\n        WHEN coalesce(r1.post_types, '') = '' THEN 'RB Post Type 1 is Unknown'\n        WHEN coalesce(r2.post_types, '') = '' THEN 'RB Post Type 2 is Unknown'\n        WHEN r1.post_types LIKE concat('%', r2.post_types, '%')\n        OR r2.post_types LIKE concat('%', r1.post_types, '%') THEN 'Same'\n        ELSE 'Different'\n    END AS rb_post_types_pattern,\n    --Report Back Online/Offline from Signup 1 & 2 Report Backs\n    r1.online_offline AS rb_online_offline_1,\n    r2.online_offline AS rb_online_offline_2,\n    CASE\n        WHEN coalesce(r1.num_rbs, 0) = 0\n        AND coalesce(r2.num_rbs, 0) = 0 THEN 'No RB to Either SignUp'\n        WHEN coalesce(r1.num_rbs, 0) = 0 THEN 'No RB to SignUp 1'\n        WHEN coalesce(r2.num_rbs, 0) = 0 THEN 'No RB to SignUp 2'\n        WHEN coalesce(r1.online_offline, '') = ''\n        AND coalesce(r2.online_offline, '') = '' THEN 'Both RB Online/Offline are Unknown'\n        WHEN coalesce(r1.online_offline, '') = '' THEN 'RB Online/Offline 1 is Unknown'\n        WHEN coalesce(r2.online_offline, '') = '' THEN 'RB Online/Offline 2 is Unknown'\n        WHEN r1.online_offline = r2.online_offline THEN concat('Both are ', r1.online_offline)\n        ELSE concat(\n            coalesce(r1.online_offline, 'Unknown'),\n            ' / ',\n            coalesce(r2.online_offline, 'Unknown')\n        )\n    END AS rb_online_offline_pattern,\n    --Report Back Action Types from Signup 1 & 2 Report Backs\n    r1.action_types AS rb_action_types_1,\n    r2.action_types AS rb_action_types_2,\n    CASE\n        WHEN coalesce(r1.num_rbs, 0) = 0\n        AND coalesce(r2.num_rbs, 0) = 0 THEN 'No RB to Either SignUp'\n        WHEN coalesce(r1.num_rbs, 0) = 0 THEN 'No RB to SignUp 1'\n        WHEN coalesce(r2.num_rbs, 0) = 0 THEN 'No RB to SignUp 2'\n        WHEN coalesce(r1.action_types, '') = ''\n        AND coalesce(r2.action_types, '') = '' THEN 'Both RB Action Types are Unknown'\n        WHEN coalesce(r1.action_types, '') = '' THEN 'RB Action Type 1 is Unknown'\n        WHEN coalesce(r2.action_types, '') = '' THEN 'RB Action Type 2 is Unknown'\n        WHEN r1.action_types LIKE concat('%', r2.action_types, '%')\n        OR r2.action_types LIKE concat('%', r1.action_types, '%') THEN 'Same'\n        ELSE 'Different'\n    END AS rb_action_types_pattern\nFROM\n    ns_signups ns1\n    LEFT JOIN ns_signup_2 ns2 ON (ns1.northstar_id = ns2.northstar_id)\n    JOIN \"quasar_prod_warehouse\".\"public\".\"campaign_info\" c1 ON (ns1.campaign_id = c1.campaign_id :: text)\n    LEFT JOIN \"quasar_prod_warehouse\".\"public\".\"campaign_info\" c2 ON (ns2.campaign_id = c2.campaign_id :: text)\n    LEFT JOIN \"quasar_prod_warehouse\".\"public\".\"user_rb_summary\" r1 ON (ns1.signup_id = r1.signup_id)\n    LEFT JOIN \"quasar_prod_warehouse\".\"public\".\"user_rb_summary\" r2 ON (ns2.signup_id = r2.signup_id)\nWHERE\n    ns1.nth_signup = 1", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "--first_and_second_signups is the final table referenced used by Looker in 3 views:\n--campaign_signups_1_and_2:\n--https://dsdata.looker.com/projects/blade/files/campaign_signups_1_and_2.view\n--channel_crossover:\n--https://dsdata.looker.com/projects/blade/files/channel_crossover.view.lkml\n--channel_crossover_campaigns:\n--https://dsdata.looker.com/projects/blade/files/channel_crossover_campaigns.view.lkml\n--which are used to generate dashboards:\n--https://dsdata.looker.com/dashboards/188 (Campaign Sign-Ups 1&2)\n--https://dsdata.looker.com/dashboards/208 (User Channel Crossover)\n--table first_and_second_signups bring signups 1 & 2 (of the same user) into a single row\n--along with previously generated campaign-level data ( campaign_info )\n--with the goal of comparing them to determine whether there are patterns\n--corresponding to better report-back rates\n\nWITH ns_signups AS (\n    SELECT\n        id AS signup_id,\n        northstar_id,\n        campaign_id,\n        source_bucket,\n        created_at,\n        group_id,\n        rank() over(\n            PARTITION by northstar_id\n            ORDER BY\n                created_at\n        ) nth_signup\n    FROM\n        \"quasar_prod_warehouse\".\"public\".\"signups\"\n),\nns_signup_2 AS (\n    SELECT\n        *\n    FROM\n        ns_signups\n    WHERE\n        nth_signup = 2\n)\nSELECT\n    ns1.northstar_id,\n    ns1.campaign_id AS campaign_id_1,\n    ns2.campaign_id AS campaign_id_2,\n    ns1.signup_id AS signup_id_1,\n    ns2.signup_id AS signup_id_2,\n    --Sign-Up Source\n    ns1.source_bucket AS signup_source_bucket_1,\n    ns2.source_bucket AS signup_source_bucket_2,\n    CASE\n        WHEN NULLIF(ns1.source_bucket, '') IS NULL\n        AND NULLIF(ns2.source_bucket, '') IS NULL THEN 'Both are Unknown'\n        ELSE concat(\n            coalesce(NULLIF(ns1.source_bucket, ''), 'Unknown'),\n            ' / ',\n            coalesce(NULLIF(ns2.source_bucket, ''), 'Unknown')\n        )\n    END AS signup_source_bucket_pattern,\n    --Action Type from Campaign_Info table\n    c1.campaign_action_type AS campaign_action_type_1,\n    c2.campaign_action_type AS campaign_action_type_2,\n    CASE\n        WHEN NULLIF(c1.campaign_action_type, '') IS NULL\n        AND NULLIF(c2.campaign_action_type, '') IS NULL THEN 'Both are Unknown'\n        WHEN NULLIF(c1.campaign_action_type, '') IS NULL\n        OR NULLIF(c2.campaign_action_type, '') IS NULL THEN 'One is Unknown'\n        WHEN c1.campaign_action_type LIKE concat('%', c2.campaign_action_type, '%')\n        OR c2.campaign_action_type LIKE concat('%', c1.campaign_action_type, '%')\n        OR (\n            c1.campaign_action_type LIKE '%Donate Something%'\n            AND c2.campaign_action_type LIKE '%Donate Something%'\n        )\n        OR (\n            c1.campaign_action_type LIKE '%Make Something%'\n            AND c2.campaign_action_type LIKE '%Make Something%'\n        )\n        OR (\n            c1.campaign_action_type LIKE '%Share Something%'\n            AND c2.campaign_action_type LIKE '%Share Something%'\n        )\n        OR (\n            c1.campaign_action_type LIKE '%Take a Stand%'\n            AND c2.campaign_action_type LIKE '%Take a Stand%'\n        ) THEN 'Same'\n        ELSE 'Different'\n    END AS campaign_action_type_pattern,\n    --Action Type from Campaign_Info table\n    c1.campaign_cause_type AS campaign_cause_type_1,\n    c2.campaign_cause_type AS campaign_cause_type_2,\n    CASE\n        WHEN NULLIF(c1.campaign_cause_type, '') IS NULL\n        AND NULLIF(c2.campaign_cause_type, '') IS NULL THEN 'Both are Unknown'\n        WHEN NULLIF(c1.campaign_cause_type, '') IS NULL\n        OR NULLIF(c2.campaign_cause_type, '') IS NULL THEN 'One is Unknown'\n        WHEN c1.campaign_cause_type LIKE concat('%', c2.campaign_cause_type, '%')\n        OR c2.campaign_cause_type LIKE concat('%', c1.campaign_cause_type, '%') THEN 'Same'\n        ELSE 'Different'\n    END AS campaign_cause_type_pattern,\n    --Online/Offline from Campaign_Info table (derived from all RBs for each Campaign ID)\n    c1.online_offline AS campaign_online_offline_1,\n    c2.online_offline AS campaign_online_offline_2,\n    CASE\n        WHEN NULLIF(c1.online_offline, '') IS NULL\n        AND NULLIF(c2.online_offline, '') IS NULL THEN 'Both are Unknown'\n        WHEN c1.online_offline = c2.online_offline THEN concat('Both are ', c1.online_offline)\n        ELSE concat(\n            coalesce(c1.online_offline, 'Unknown'),\n            ' / ',\n            coalesce(c2.online_offline, 'Unknown')\n        )\n    END AS campaign_online_offline_pattern,\n    --Action Type from Campaign_Info table (derived from all RBs for each Campaign ID)\n    c1.action_types AS campaign_action_types_1,\n    c2.action_types AS campaign_action_types_2,\n    CASE\n        WHEN NULLIF(c1.action_types, '') IS NULL\n        AND NULLIF(c2.action_types, '') IS NULL THEN 'Both are Unknown'\n        WHEN NULLIF(c1.action_types, '') IS NULL\n        OR NULLIF(c2.action_types, '') IS NULL THEN 'One is Unknown'\n        WHEN c1.action_types LIKE concat('%', c2.action_types, '%')\n        OR c2.action_types LIKE concat('%', c1.action_types, '%') THEN 'Same'\n        ELSE 'Different'\n    END AS campaign_action_types_pattern,\n    --Scholarship from Campaign_Info table (derived from all RBs for each Campaign ID)\n    c1.scholarship AS campaign_scholarship_1,\n    c2.scholarship AS campaign_scholarship_2,\n    CASE\n        WHEN NULLIF(c1.scholarship, '') IS NULL\n        AND NULLIF(c2.scholarship, '') IS NULL THEN 'Both are Unknown'\n        WHEN c1.scholarship = c2.scholarship THEN concat('Both are ', c1.scholarship)\n        ELSE concat(\n            coalesce(c1.scholarship, 'Unknown'),\n            ' / ',\n            coalesce(c2.scholarship, 'Unknown')\n        )\n    END AS campaign_scholarship_pattern,\n    --Post Type from Campaign_Info table (derived from all RBs for each Campaign ID)\n    c1.post_types AS campaign_post_types_1,\n    c2.post_types AS campaign_post_types_2,\n    CASE\n        WHEN NULLIF(c1.post_types, '') IS NULL\n        AND NULLIF(c2.post_types, '') IS NULL THEN 'Both are Unknown'\n        WHEN NULLIF(c1.post_types, '') IS NULL\n        OR NULLIF(c2.post_types, '') IS NULL THEN 'One is Unknown'\n        WHEN c1.post_types LIKE concat('%', c2.post_types, '%')\n        OR c2.post_types LIKE concat('%', c1.post_types, '%') THEN 'Same'\n        ELSE 'Different'\n    END AS campaign_post_types_pattern,\n    --Report Backs from Signup 1 & 2 Report Backs\n    r1.num_rbs AS num_rbs_1,\n    r2.num_rbs AS num_rbs_2,\n    CASE\n        WHEN coalesce(r1.num_rbs, 0) = 0\n        AND coalesce(r2.num_rbs, 0) = 0 THEN 'No RB to Either SignUp'\n        WHEN coalesce(r1.num_rbs, 0) = 0 THEN 'No RB to SignUp 1'\n        WHEN coalesce(r2.num_rbs, 0) = 0 THEN 'No RB to SignUp 2'\n        WHEN r1.num_rbs > 0\n        AND r2.num_rbs > 0 THEN 'RB to Both SignUps'\n        ELSE '?'\n    END AS num_rbs_pattern,\n    --Report-Back Source\n    r1.post_sources AS rb_source_buckets_1,\n    r2.post_sources AS rb_source_buckets_2,\n    CASE\n        WHEN coalesce(r1.num_rbs, 0) = 0\n        AND coalesce(r2.num_rbs, 0) = 0 THEN 'No RB to Either SignUp'\n        WHEN coalesce(r1.num_rbs, 0) = 0 THEN concat(\n            'No RB',\n            ' / ',\n            coalesce(r2.post_sources, 'Unknown')\n        )\n        WHEN coalesce(r2.num_rbs, 0) = 0 THEN concat(\n            coalesce(r1.post_sources, 'Unknown'),\n            ' / ',\n            'No RB'\n        )\n        ELSE concat(\n            coalesce(r1.post_sources, 'Unknown'),\n            ' / ',\n            coalesce(r2.post_sources, 'Unknown')\n        )\n    END AS rb_source_buckets_pattern,\n    --Report Back Types from Signup 1 & 2 Report Backs\n    r1.post_types AS rb_post_types_1,\n    r2.post_types AS rb_post_types_2,\n    CASE\n        WHEN coalesce(r1.num_rbs, 0) = 0\n        AND coalesce(r2.num_rbs, 0) = 0 THEN 'No RB to Either SignUp'\n        WHEN coalesce(r1.num_rbs, 0) = 0 THEN 'No RB to SignUp 1'\n        WHEN coalesce(r2.num_rbs, 0) = 0 THEN 'No RB to SignUp 2'\n        WHEN coalesce(r1.post_types, '') = ''\n        AND coalesce(r2.post_types, '') = '' THEN 'Both RB Post Types are Unknown'\n        WHEN coalesce(r1.post_types, '') = '' THEN 'RB Post Type 1 is Unknown'\n        WHEN coalesce(r2.post_types, '') = '' THEN 'RB Post Type 2 is Unknown'\n        WHEN r1.post_types LIKE concat('%', r2.post_types, '%')\n        OR r2.post_types LIKE concat('%', r1.post_types, '%') THEN 'Same'\n        ELSE 'Different'\n    END AS rb_post_types_pattern,\n    --Report Back Online/Offline from Signup 1 & 2 Report Backs\n    r1.online_offline AS rb_online_offline_1,\n    r2.online_offline AS rb_online_offline_2,\n    CASE\n        WHEN coalesce(r1.num_rbs, 0) = 0\n        AND coalesce(r2.num_rbs, 0) = 0 THEN 'No RB to Either SignUp'\n        WHEN coalesce(r1.num_rbs, 0) = 0 THEN 'No RB to SignUp 1'\n        WHEN coalesce(r2.num_rbs, 0) = 0 THEN 'No RB to SignUp 2'\n        WHEN coalesce(r1.online_offline, '') = ''\n        AND coalesce(r2.online_offline, '') = '' THEN 'Both RB Online/Offline are Unknown'\n        WHEN coalesce(r1.online_offline, '') = '' THEN 'RB Online/Offline 1 is Unknown'\n        WHEN coalesce(r2.online_offline, '') = '' THEN 'RB Online/Offline 2 is Unknown'\n        WHEN r1.online_offline = r2.online_offline THEN concat('Both are ', r1.online_offline)\n        ELSE concat(\n            coalesce(r1.online_offline, 'Unknown'),\n            ' / ',\n            coalesce(r2.online_offline, 'Unknown')\n        )\n    END AS rb_online_offline_pattern,\n    --Report Back Action Types from Signup 1 & 2 Report Backs\n    r1.action_types AS rb_action_types_1,\n    r2.action_types AS rb_action_types_2,\n    CASE\n        WHEN coalesce(r1.num_rbs, 0) = 0\n        AND coalesce(r2.num_rbs, 0) = 0 THEN 'No RB to Either SignUp'\n        WHEN coalesce(r1.num_rbs, 0) = 0 THEN 'No RB to SignUp 1'\n        WHEN coalesce(r2.num_rbs, 0) = 0 THEN 'No RB to SignUp 2'\n        WHEN coalesce(r1.action_types, '') = ''\n        AND coalesce(r2.action_types, '') = '' THEN 'Both RB Action Types are Unknown'\n        WHEN coalesce(r1.action_types, '') = '' THEN 'RB Action Type 1 is Unknown'\n        WHEN coalesce(r2.action_types, '') = '' THEN 'RB Action Type 2 is Unknown'\n        WHEN r1.action_types LIKE concat('%', r2.action_types, '%')\n        OR r2.action_types LIKE concat('%', r1.action_types, '%') THEN 'Same'\n        ELSE 'Different'\n    END AS rb_action_types_pattern\nFROM\n    ns_signups ns1\n    LEFT JOIN ns_signup_2 ns2 ON (ns1.northstar_id = ns2.northstar_id)\n    JOIN \"quasar_prod_warehouse\".\"public\".\"campaign_info\" c1 ON (ns1.campaign_id = c1.campaign_id :: text)\n    LEFT JOIN \"quasar_prod_warehouse\".\"public\".\"campaign_info\" c2 ON (ns2.campaign_id = c2.campaign_id :: text)\n    LEFT JOIN \"quasar_prod_warehouse\".\"public\".\"user_rb_summary\" r1 ON (ns1.signup_id = r1.signup_id)\n    LEFT JOIN \"quasar_prod_warehouse\".\"public\".\"user_rb_summary\" r2 ON (ns2.signup_id = r2.signup_id)\nWHERE\n    ns1.nth_signup = 1"}, "error": null, "status": null, "execution_time": 0.045027971267700195, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-02-23T21:28:56.037215Z", "completed_at": "2021-02-23T21:28:56.080646Z"}, {"name": "execute", "started_at": "2021-02-23T21:28:56.080954Z", "completed_at": "2021-02-23T21:28:56.080963Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "SELECT\n  device_id,\n  campaign_id,\n  min_view_session_id,\n  min_view_datetime,\n  session_referrer_host,\n  session_utm_source,\n  session_utm_campaign,\n  min_intent_datetime\nFROM\n  (\n    SELECT\n      dcj.device_id,\n      dcj.campaign_id,\n      dcj.min_view_session_id,\n      dcj.min_view_datetime,\n      -- Let's add marketing enriching data here. Necessary for dashboards in Looker.\n      CASE\n        WHEN s.session_referrer_host = '' THEN NULL\n        ELSE s.session_referrer_host\n      END AS session_referrer_host,\n      s.session_utm_source,\n      s.session_utm_campaign,\n      dcj.min_intent_datetime\n    FROM\n      (\n        -- select the new window aggregated properties and group them so we get rid of duplicates\n        -- TODO: would a DISTINCT work for this instead?\n        SELECT\n          device_id,\n          campaign_id,\n          min_view_datetime,\n          min_intent_datetime,\n          min_view_session_id\n        FROM\n          (\n            -- This query gets all the events that contain a campaign id (campaign_id is not null).\n            -- It adds 3 fields:\n            -- 1. min_view_datetime: The first time this device_id was active in this campaign_id\n            -- 2. min_intent_datetime: The first time this device_id attempted to sign up to the campaign_id\n            -- 3. min_view_session_id: The first session_id that captured the first activity of this\n            --    device_id in this campaign_id.\n            SELECT\n              device_id,\n              campaign_id,\n              min(event_datetime) over (PARTITION by device_id || '-' || campaign_id) AS min_view_datetime,\n              min(\n                -- set consist only of event_datetime of \"phoenix_clicked_signup\" events\n                CASE\n                  WHEN event_name = 'phoenix_clicked_signup' THEN event_datetime\n                END\n              ) over (\n                PARTITION by device_id || '-' || campaign_id\n              ) AS min_intent_datetime,\n              -- If there are more than 1 events with the same campaign_id, device_id, and event_datetim, we\n              -- take the first (min) session_id ordered in asc order based on event_datetime.\n              min(session_id) over (\n                PARTITION by device_id || '-' || campaign_id\n                ORDER BY\n                  event_datetime\n                  RANGE BETWEEN UNBOUNDED PRECEDING\n                  AND UNBOUNDED FOLLOWING\n              ) AS min_view_session_id,\n              event_name,\n              event_datetime\n            FROM\n              {{ ref('snowplow_raw_events') }}\n            WHERE\n              campaign_id IS NOT NULL\n          ) dca --device_campaign_all\n        GROUP BY\n          1,\n          2,\n          3,\n          4,\n          5\n      ) dcj --device_campaign_journey\n      JOIN {{ ref('snowplow_sessions') }} s ON (dcj.min_view_session_id = s.session_id)\n  ) fj --full_journey", "compiled": true, "database": "quasar_prod_warehouse", "schema": "public", "fqn": ["ds_dbt", "campaign_activity", "device_campaign"], "unique_id": "model.ds_dbt.device_campaign", "package_name": "ds_dbt", "root_path": "/home/runner/work/quasar/quasar/quasar/dbt", "path": "campaign_activity/device_campaign.sql", "original_file_path": "models/campaign_activity/device_campaign.sql", "name": "device_campaign", "resource_type": "model", "alias": "device_campaign", "checksum": {"name": "sha256", "checksum": "37722abca542bd50e64a99cf684698e5128d8a471389c988098f7e455640fc3c"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [{"sql": "CREATE INDEX {{ get_index_name(this, 'device_id') }} (device_id)", "transaction": true, "index": null}, {"sql": "{{ grant_select_to(this, ['dsanalyst', 'looker']) }}", "transaction": true, "index": null}], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": "device_campaign", "schema": null, "database": null, "tags": ["campaign_activity"], "full_refresh": null}, "tags": ["campaign_activity"], "refs": [["snowplow_raw_events"], ["snowplow_sessions"]], "sources": [], "depends_on": {"macros": ["macro.ds_dbt.get_index_name", "macro.ds_dbt.grant_select_to"], "nodes": ["model.ds_dbt.snowplow_raw_events", "model.ds_dbt.snowplow_sessions"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "../../docs/compiled/ds_dbt/models/campaign_activity/device_campaign.sql", "deferred": false, "compiled_sql": "SELECT\n  device_id,\n  campaign_id,\n  min_view_session_id,\n  min_view_datetime,\n  session_referrer_host,\n  session_utm_source,\n  session_utm_campaign,\n  min_intent_datetime\nFROM\n  (\n    SELECT\n      dcj.device_id,\n      dcj.campaign_id,\n      dcj.min_view_session_id,\n      dcj.min_view_datetime,\n      -- Let's add marketing enriching data here. Necessary for dashboards in Looker.\n      CASE\n        WHEN s.session_referrer_host = '' THEN NULL\n        ELSE s.session_referrer_host\n      END AS session_referrer_host,\n      s.session_utm_source,\n      s.session_utm_campaign,\n      dcj.min_intent_datetime\n    FROM\n      (\n        -- select the new window aggregated properties and group them so we get rid of duplicates\n        -- TODO: would a DISTINCT work for this instead?\n        SELECT\n          device_id,\n          campaign_id,\n          min_view_datetime,\n          min_intent_datetime,\n          min_view_session_id\n        FROM\n          (\n            -- This query gets all the events that contain a campaign id (campaign_id is not null).\n            -- It adds 3 fields:\n            -- 1. min_view_datetime: The first time this device_id was active in this campaign_id\n            -- 2. min_intent_datetime: The first time this device_id attempted to sign up to the campaign_id\n            -- 3. min_view_session_id: The first session_id that captured the first activity of this\n            --    device_id in this campaign_id.\n            SELECT\n              device_id,\n              campaign_id,\n              min(event_datetime) over (PARTITION by device_id || '-' || campaign_id) AS min_view_datetime,\n              min(\n                -- set consist only of event_datetime of \"phoenix_clicked_signup\" events\n                CASE\n                  WHEN event_name = 'phoenix_clicked_signup' THEN event_datetime\n                END\n              ) over (\n                PARTITION by device_id || '-' || campaign_id\n              ) AS min_intent_datetime,\n              -- If there are more than 1 events with the same campaign_id, device_id, and event_datetim, we\n              -- take the first (min) session_id ordered in asc order based on event_datetime.\n              min(session_id) over (\n                PARTITION by device_id || '-' || campaign_id\n                ORDER BY\n                  event_datetime\n                  RANGE BETWEEN UNBOUNDED PRECEDING\n                  AND UNBOUNDED FOLLOWING\n              ) AS min_view_session_id,\n              event_name,\n              event_datetime\n            FROM\n              \"quasar_prod_warehouse\".\"public\".\"snowplow_raw_events\"\n            WHERE\n              campaign_id IS NOT NULL\n          ) dca --device_campaign_all\n        GROUP BY\n          1,\n          2,\n          3,\n          4,\n          5\n      ) dcj --device_campaign_journey\n      JOIN \"quasar_prod_warehouse\".\"public\".\"snowplow_sessions\" s ON (dcj.min_view_session_id = s.session_id)\n  ) fj --full_journey", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "SELECT\n  device_id,\n  campaign_id,\n  min_view_session_id,\n  min_view_datetime,\n  session_referrer_host,\n  session_utm_source,\n  session_utm_campaign,\n  min_intent_datetime\nFROM\n  (\n    SELECT\n      dcj.device_id,\n      dcj.campaign_id,\n      dcj.min_view_session_id,\n      dcj.min_view_datetime,\n      -- Let's add marketing enriching data here. Necessary for dashboards in Looker.\n      CASE\n        WHEN s.session_referrer_host = '' THEN NULL\n        ELSE s.session_referrer_host\n      END AS session_referrer_host,\n      s.session_utm_source,\n      s.session_utm_campaign,\n      dcj.min_intent_datetime\n    FROM\n      (\n        -- select the new window aggregated properties and group them so we get rid of duplicates\n        -- TODO: would a DISTINCT work for this instead?\n        SELECT\n          device_id,\n          campaign_id,\n          min_view_datetime,\n          min_intent_datetime,\n          min_view_session_id\n        FROM\n          (\n            -- This query gets all the events that contain a campaign id (campaign_id is not null).\n            -- It adds 3 fields:\n            -- 1. min_view_datetime: The first time this device_id was active in this campaign_id\n            -- 2. min_intent_datetime: The first time this device_id attempted to sign up to the campaign_id\n            -- 3. min_view_session_id: The first session_id that captured the first activity of this\n            --    device_id in this campaign_id.\n            SELECT\n              device_id,\n              campaign_id,\n              min(event_datetime) over (PARTITION by device_id || '-' || campaign_id) AS min_view_datetime,\n              min(\n                -- set consist only of event_datetime of \"phoenix_clicked_signup\" events\n                CASE\n                  WHEN event_name = 'phoenix_clicked_signup' THEN event_datetime\n                END\n              ) over (\n                PARTITION by device_id || '-' || campaign_id\n              ) AS min_intent_datetime,\n              -- If there are more than 1 events with the same campaign_id, device_id, and event_datetim, we\n              -- take the first (min) session_id ordered in asc order based on event_datetime.\n              min(session_id) over (\n                PARTITION by device_id || '-' || campaign_id\n                ORDER BY\n                  event_datetime\n                  RANGE BETWEEN UNBOUNDED PRECEDING\n                  AND UNBOUNDED FOLLOWING\n              ) AS min_view_session_id,\n              event_name,\n              event_datetime\n            FROM\n              \"quasar_prod_warehouse\".\"public\".\"snowplow_raw_events\"\n            WHERE\n              campaign_id IS NOT NULL\n          ) dca --device_campaign_all\n        GROUP BY\n          1,\n          2,\n          3,\n          4,\n          5\n      ) dcj --device_campaign_journey\n      JOIN \"quasar_prod_warehouse\".\"public\".\"snowplow_sessions\" s ON (dcj.min_view_session_id = s.session_id)\n  ) fj --full_journey"}, "error": null, "status": null, "execution_time": 0.013837814331054688, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-02-23T21:28:56.082839Z", "completed_at": "2021-02-23T21:28:56.095352Z"}, {"name": "execute", "started_at": "2021-02-23T21:28:56.095666Z", "completed_at": "2021-02-23T21:28:56.095673Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "--drop table analyst_sandbox.es_ovrd_creator_funnel\n--create table analyst_sandbox.es_ovrd_creator_funnel as\nWITH funnel_base AS (\n  --Unique combinations of device_id, session_id, northstar_id\n  SELECT\n    psc.session_id,\n    psc.landing_datetime,\n    psc.ending_datetime,\n    psc.device_id,\n    pec.northstar_id,\n    pec.\"path\",\n    pec.event_name,\n    pec.event_datetime,\n    psc.session_utm_campaign,\n    psc.session_referrer_host\n  FROM\n    {{ ref('snowplow_raw_events') }}\n    pec\n    JOIN {{ ref('snowplow_sessions') }}\n    psc\n    ON (\n      pec.session_id = psc.session_id\n      AND pec.device_id = psc.device_id\n    ) --Filter to URL of interest\n  WHERE\n    pec.\"path\" ILIKE '%online-registration-drive%'\n    AND psc.landing_datetime >= '2020-03-01'\n    AND pec.event_datetime >= '2020-03-01' --Filter to events of interest\n    AND pec.event_name IN (\n      'phoenix_clicked_share_snapchat',\n      'phoenix_clicked_copy_to_clipboard',\n      'phoenix_clicked_share_facebook',\n      'phoenix_clicked_share_email',\n      'phoenix_clicked_share_facebook_messenger',\n      'phoenix_clicked_share_twitter',\n      'phoenix_clicked_signup',\n      'phoenix_completed_signup',\n      'phoenix_clicked_voter_registration_action',\n      'phoenix_opened_modal',\n      'visit',\n      'view'\n    )\n),\nnorthstars AS (\n  --Authenticated Users\n  SELECT\n    device_id,\n    northstar_id,\n    session_id\n  FROM\n    funnel_base\n  WHERE\n    northstar_id IS NOT NULL\n  GROUP BY\n    1,\n    2,\n    3\n),\ndevices AS (\n  --Anonymous Users (removes cases of sessions that started anonymous AND got autheticated afterwards)\n  SELECT\n    b.device_id,\n    b.session_id\n  FROM\n    funnel_base b\n    LEFT JOIN northstars n\n    ON (\n      b.session_id = n.session_id\n      AND b.device_id = n.device_id\n    )\n  WHERE\n    n.northstar_id IS NULL\n  GROUP BY\n    1,\n    2\n),\nsession_base AS (\n  --Authenticated Sessions\n  --Joining with users table to eliminate internal (dosomething.org) northstar_ids\n  SELECT\n    n.session_id,\n    n.device_id,\n    n.northstar_id\n  FROM\n    northstars n\n    JOIN {{ ref('users') }}\n    u\n    ON (\n      n.northstar_id = u.northstar_id\n    )\n  UNION ALL\n    --Anonymous Sessions\n  SELECT\n    d.session_id,\n    d.device_id,\n    NULL\n  FROM\n    devices d\n),\ncreations AS (\n  --Signups represent the creation of the drive\n  SELECT\n    northstar_id,\n    id AS signup_id,\n    created_at\n  FROM\n    {{ ref('signups') }} s\n  WHERE\n    campaign_id = '9054'\n    AND source_bucket = 'web'\n    AND s.created_at >= '2020-03-01'\n),\nstarts AS (\n  --There seem to be a few cases of multiple posts per northstar\n  SELECT\n    p.northstar_id,\n    p.id AS post_id,\n    p.status,\n    p.created_at,\n    rock.started_registration_utc\n  FROM\n    {{ ref('posts') }}\n    p\n    LEFT JOIN {{ ref('rock_the_vote') }}\n    rock\n    ON (\n      rock.post_id = p.id\n    )\n  WHERE\n    p.vr_source = 'web'\n    AND p.\"type\" = 'voter-reg'\n    AND p.vr_source_details LIKE '%OnlineRegistrationDrive%'\n    AND p.created_at >= '2020-03-01' --Only registrations with these tracking sources represent completing the funnel\n    --Excluding Groups which look like -> source_details:[group_name]OnlineRegistrationDrive_Affirmation\n    AND rock.tracking_source LIKE '%source_details:OnlineRegistrationDrive_affirmation%'\n    AND p.group_id IS NULL\n),\nregistrations AS (\n  --There seem to be a few cases of multiple registrations per northstar\n  SELECT\n    r.northstar_id,\n    r.post_id,\n    rtv.started_registration_utc\n  FROM\n    {{ ref('reportbacks') }}\n    r\n    LEFT JOIN {{ ref('rock_the_vote') }}\n    rtv\n    ON (\n      rtv.post_id = r.post_id\n    )\n  WHERE\n    r.vr_source = 'web'\n    AND r.post_bucket = 'voter_registrations'\n    AND r.vr_source_details LIKE 'OnlineRegistrationDrive%'\n    AND r.post_created_at >= '2020-01-01' --Excluding Groups which look like -> source_details:[group_name]OnlineRegistrationDrive_Affirmation\n    AND rtv.tracking_source LIKE '%source_details:OnlineRegistrationDrive_affirmation%'\n    AND rtv.tracking_source NOT LIKE '%group_id%'\n    AND r.group_id IS NULL\n),\nreferral_counts AS (\n  --Get referral counts\n  SELECT\n    --Prefer referrer_user_id ON post, extract value FROM tracking source for legacy posts\n    COALESCE(\n      p.referrer_user_id,\n      SPLIT_PART(\n        SUBSTRING(\n          rtv.tracking_source\n          FROM\n            'user\\:(.+)\\,'\n        ),\n        ',',\n        1\n      )\n    ) AS referrer,\n    COUNT(*) AS referrals_start,\n    SUM(\n      CASE\n        WHEN rtv.status = 'Complete' THEN 1\n        ELSE 0\n      END\n    ) AS referrals_completed\n  FROM\n    {{ ref('posts') }}\n    p\n    JOIN {{ ref('rock_the_vote') }}\n    rtv\n    ON (\n      p.id = rtv.post_id\n    )\n  WHERE\n    rtv.tracking_source ILIKE '%source_details:onlinedrivereferral%' --Must be referral\n    AND rtv.tracking_source ILIKE '%referral=true%' --Exclude groups\n    AND rtv.tracking_source NOT LIKE '%group_id%'\n    AND p.group_id IS NULL --Exclude nonsense or empty nsid values\n    AND COALESCE(\n      p.referrer_user_id,\n      SPLIT_PART(\n        SUBSTRING(\n          rtv.tracking_source\n          FROM\n            'user\\:(.+)\\,'\n        ),\n        ',',\n        1\n      )\n    ) NOT IN (\n      '{userId}',\n      'null',\n      ''\n    )\n    AND p.created_at >= '2020-03-01'\n  GROUP BY\n    COALESCE(\n      p.referrer_user_id,\n      SPLIT_PART(\n        SUBSTRING(\n          rtv.tracking_source\n          FROM\n            'user\\:(.+)\\,'\n        ),\n        ',',\n        1\n      )\n    )\n),\nfunnel AS (\n  SELECT\n    sb.session_id,\n    sb.device_id,\n    sb.northstar_id,\n    ROW_NUMBER() over(\n      PARTITION BY sb.northstar_id\n      ORDER BY\n        MIN(\n          C.signup_id\n        )\n    ) AS nth_drive,\n    --The signup represents the creation of the drive\n    MIN(\n      C.signup_id\n    ) AS signup_id,\n    --If the referrer does in fact register to vote, this is the corresponding reportback\n    MIN(\n      reg.post_id\n    ) AS post_id,\n    --Earliest recorded page visit\n    MIN(\n      fb.event_datetime\n    ) AS journey_begin_ts,\n    --Earliest campaign signup (drive creation)\n    MIN(\n      C.created_at\n    ) AS drive_creation_ts,\n    --Latest registration timestamp for northstar\n    MAX(\n      reg.started_registration_utc\n    ) AS latest_register_ts,\n    --Latest start RTV process for northstar\n    MAX(\n      po.started_registration_utc\n    ) AS latest_get_started_ts,\n    --Did they visit? Includes other event types to account for missing visits in puck\n    MAX(\n      CASE\n        WHEN fb.session_utm_campaign ILIKE '%niche%' THEN 'niche'\n        WHEN fb.session_utm_campaign ILIKE '%fastweb%' THEN 'fastweb'\n        WHEN fb.session_referrer_host ILIKE '%dosomething%' THEN 'dosomething'\n        ELSE 'other'\n      END\n    ) AS traffic_source,\n    MAX(\n      CASE\n        WHEN fb.event_name IN (\n          'visit',\n          'view',\n          'phoenix_clicked_signup',\n          'phoenix_clicked_voter_registration_action'\n        ) THEN 1\n        ELSE 0\n      END\n    ) AS page_visit,\n    --Funnel flags\n    MAX(\n      CASE\n        WHEN fb.northstar_id IS NOT NULL THEN 1\n        ELSE 0\n      END\n    ) AS authenticated,\n    MAX(\n      CASE\n        WHEN fb.event_name = 'phoenix_clicked_signup' THEN 1\n        ELSE 0\n      END\n    ) AS click_join_us,\n    MAX(\n      CASE\n        WHEN C.signup_id IS NOT NULL THEN 1\n        ELSE 0\n      END\n    ) AS completed_signup,\n    MAX(\n      CASE\n        WHEN fb.event_name = 'phoenix_clicked_voter_registration_action' THEN 1\n        ELSE 0\n      END\n    ) AS click_start_registration,\n    MAX(\n      CASE\n        WHEN po.post_id IS NOT NULL THEN 1\n        ELSE 0\n      END\n    ) AS clicked_get_started,\n    MAX(\n      CASE\n        WHEN po.status IN (\n          'step-2',\n          'step-3',\n          'step-4',\n          'ineligible',\n          'under-18',\n          'register-OVR',\n          'register-form'\n        ) THEN 1\n        ELSE 0\n      END\n    ) AS rtv_step_2,\n    MAX(\n      CASE\n        WHEN po.status IN (\n          'step-3',\n          'ineligible',\n          'under-18',\n          'register-form'\n        ) THEN 1\n        ELSE 0\n      END\n    ) AS rtv_step_3,\n    MAX(\n      CASE\n        WHEN po.status IN (\n          'step-4',\n          'ineligible',\n          'under-18',\n          'register-OVR'\n        ) THEN 1\n        ELSE 0\n      END\n    ) AS rtv_step_4,\n    MAX(\n      CASE\n        WHEN po.status IN (\n          'step-3',\n          'step-4',\n          'ineligible',\n          'under-18',\n          'register-OVR',\n          'register-form'\n        ) THEN 1\n        ELSE 0\n      END\n    ) AS rtv_step_3_or_4,\n    MAX(\n      CASE\n        WHEN reg.northstar_id IS NOT NULL THEN 1\n        ELSE 0\n      END\n    ) AS registered,\n    MAX(\n      CASE\n        WHEN fb.event_name = 'phoenix_clicked_copy_to_clipboard' THEN 1\n        ELSE 0\n      END\n    ) AS click_copy_link,\n    MAX(\n      CASE\n        WHEN fb.event_name IN (\n          'phoenix_clicked_share_facebook',\n          'phoenix_clicked_share_email',\n          'phoenix_clicked_share_facebook_messenger',\n          'phoenix_clicked_share_twitter',\n          'phoenix_clicked_share_snapchat'\n        ) THEN 1\n        ELSE 0\n      END\n    ) AS clicked_any_share,\n    MAX(\n      CASE\n        WHEN fb.event_name = 'phoenix_clicked_share_facebook' THEN 1\n        ELSE 0\n      END\n    ) AS clicked_share_fb,\n    MAX(\n      CASE\n        WHEN fb.event_name = 'phoenix_clicked_share_email' THEN 1\n        ELSE 0\n      END\n    ) AS clicked_share_email,\n    MAX(\n      CASE\n        WHEN fb.event_name = 'phoenix_clicked_share_facebook_messenger' THEN 1\n        ELSE 0\n      END\n    ) AS clicked_share_fb_msgr,\n    MAX(\n      CASE\n        WHEN fb.event_name = 'phoenix_clicked_share_twitter' THEN 1\n        ELSE 0\n      END\n    ) AS clicked_share_twitter,\n    MAX(\n      CASE\n        WHEN fb.event_name = 'phoenix_clicked_share_snapchat' THEN 1\n        ELSE 0\n      END\n    ) AS clicked_share_snapchat\n  FROM\n    session_base sb\n    JOIN funnel_base fb\n    ON (\n      sb.session_id = fb.session_id\n      AND sb.device_id = fb.device_id\n    ) --Join Drive creations (allow a bit of )\n    LEFT JOIN creations C\n    ON (\n      sb.northstar_id = C.northstar_id\n      AND C.created_at BETWEEN fb.landing_datetime - INTERVAL '15 minute'\n      AND fb.ending_datetime + INTERVAL '15 minute'\n    ) --Join started AND completed registrations\n    LEFT JOIN starts po\n    ON (\n      sb.northstar_id = po.northstar_id\n      AND po.started_registration_utc BETWEEN fb.landing_datetime\n      AND fb.ending_datetime + INTERVAL '15 minute'\n    )\n    LEFT JOIN registrations reg\n    ON (\n      sb.northstar_id = reg.northstar_id\n      AND reg.started_registration_utc BETWEEN fb.landing_datetime\n      AND fb.ending_datetime + INTERVAL '15 minute'\n    )\n  GROUP BY\n    sb.session_id,\n    sb.device_id,\n    sb.northstar_id --Only consider folks who did at least one of the below\n  HAVING\n    MAX(\n      CASE\n        WHEN fb.event_name IN (\n          'visit',\n          'view',\n          'phoenix_clicked_signup',\n          'phoenix_clicked_voter_registration_action'\n        ) THEN 1\n        ELSE 0\n      END\n    ) = 1\n)\nSELECT\n  f.session_id,\n  f.device_id,\n  f.northstar_id,\n  f.signup_id,\n  f.nth_drive,\n  f.post_id,\n  journey_begin_ts,\n  drive_creation_ts,\n  latest_register_ts,\n  latest_get_started_ts,\n  traffic_source,\n  page_visit,\n  click_join_us,\n  authenticated,\n  completed_signup,\n  click_start_registration,\n  clicked_get_started,\n  rtv_step_2,\n  rtv_step_3,\n  rtv_step_4,\n  rtv_step_3_or_4,\n  registered,\n  click_copy_link,\n  clicked_any_share,\n  clicked_share_fb,\n  clicked_share_email,\n  clicked_share_fb_msgr,\n  clicked_share_twitter,\n  clicked_share_snapchat,\n  rc.referrals_start,\n  rc.referrals_completed\nFROM\n  funnel f\n  LEFT JOIN referral_counts rc\n  ON (\n    f.northstar_id = rc.referrer\n    AND f.nth_drive = 1\n  )", "compiled": true, "database": "quasar_prod_warehouse", "schema": "public", "fqn": ["ds_dbt", "voter_reg", "ovrd_creator_funnel"], "unique_id": "model.ds_dbt.ovrd_creator_funnel", "package_name": "ds_dbt", "root_path": "/home/runner/work/quasar/quasar/quasar/dbt", "path": "voter_reg/ovrd_creator_funnel.sql", "original_file_path": "models/voter_reg/ovrd_creator_funnel.sql", "name": "ovrd_creator_funnel", "resource_type": "model", "alias": "ovrd_creator_funnel", "checksum": {"name": "sha256", "checksum": "dbc196e8fa9d89934c97ec58dc050c743c63d05d0463c6fa4dc03749cbe160ba"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [{"sql": "CREATE INDEX {{ get_index_name(this, 'northstar_id') }} (northstar_id)", "transaction": true, "index": null}, {"sql": "{{ grant_select_to(this, ['dsanalyst', 'looker']) }}", "transaction": true, "index": null}], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": "ovrd_creator_funnel", "schema": null, "database": null, "tags": ["voter_reg"], "full_refresh": null}, "tags": ["voter_reg"], "refs": [["snowplow_raw_events"], ["snowplow_sessions"], ["users"], ["signups"], ["posts"], ["rock_the_vote"], ["reportbacks"], ["rock_the_vote"], ["posts"], ["rock_the_vote"]], "sources": [], "depends_on": {"macros": ["macro.ds_dbt.get_index_name", "macro.ds_dbt.grant_select_to"], "nodes": ["model.ds_dbt.snowplow_raw_events", "model.ds_dbt.snowplow_sessions", "model.ds_dbt.users", "model.ds_dbt.signups", "model.ds_dbt.posts", "model.ds_dbt.rock_the_vote", "model.ds_dbt.reportbacks", "model.ds_dbt.rock_the_vote", "model.ds_dbt.posts", "model.ds_dbt.rock_the_vote"]}, "description": "Needs a description", "columns": {"northstar_id": {"name": "northstar_id", "description": "The Northstar ID of the user who generated the event.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "device_id": {"name": "device_id", "description": "ID of the device used", "meta": {}, "data_type": null, "quote": null, "tags": []}, "journey_begin_ts": {"name": "journey_begin_ts", "description": "The first time the user landed on this URL", "meta": {}, "data_type": null, "quote": null, "tags": []}, "latest_get_started_ts": {"name": "latest_get_started_ts", "description": "The most recent time the user clicked Get Started on the RTV block", "meta": {}, "data_type": null, "quote": null, "tags": []}, "latest_registered_ts": {"name": "latest_registered_ts", "description": "The most recent time the user registered to vote", "meta": {}, "data_type": null, "quote": null, "tags": []}, "page_visit": {"name": "page_visit", "description": "Has the user visited the OVRD URL", "meta": {}, "data_type": null, "quote": null, "tags": []}, "click_join_us": {"name": "click_join_us", "description": "Did the user click the Join Us button to sign up for the campaign. Phoenix Events Combined event_name = phoenix_clicked_signup", "meta": {}, "data_type": null, "quote": null, "tags": []}, "authenticated": {"name": "authenticated", "description": "Did the user view the page while authenticated", "meta": {}, "data_type": null, "quote": null, "tags": []}, "click_start_registration": {"name": "click_start_registration", "description": "Did the user click the Start Registration button to go to Instapage. Phoenix Events Combined event_name = phoenix_clicked_voter_registration_action", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicked_get_started": {"name": "clicked_get_started", "description": "Did the user start the registration process on Instapage.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "registered": {"name": "registered", "description": "Has the user registered to vote?", "meta": {}, "data_type": null, "quote": null, "tags": []}, "click_copy_link": {"name": "click_copy_link", "description": "Did the user copy their unique link to share. Phoenix Events Combined event_name = phoenix_clicked_copy_to_clipboard", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicked_any_share": {"name": "clicked_any_share", "description": "Did the user click any of the social share buttons. Phoenix Events Combined event_name = 'phoenix_clicked_share_action_facebook','phoenix_clicked_share_email', 'phoenix_clicked_share_facebook_messenger','phoenix_clicked_share_twitter'", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicked_share_fb": {"name": "clicked_share_fb", "description": "Did the user click the share via Facebook button? Phoenix Events Combined event_name = phoenix_clicked_share_action_facebook", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicked_share_email": {"name": "clicked_share_email", "description": "Did the user click the share via email button? Phoenix Events Combined event_name = phoenix_clicked_share_email", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicked_share_fb_msgr": {"name": "clicked_share_fb_msgr", "description": "Did the user click the share via Facebook Messenger button? Phoenix Events Combined event_name = phoenix_clicked_share_facebook_messenger", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicked_share_twitter": {"name": "clicked_share_twitter", "description": "Did the user click the share via Twitter button? Phoenix Events Combined event_name = phoenix_clicked_share_twitter", "meta": {}, "data_type": null, "quote": null, "tags": []}, "referrals_start": {"name": "referrals_start", "description": "How many people did this user refer that started the registration process", "meta": {}, "data_type": null, "quote": null, "tags": []}, "referrals_completed": {"name": "referrals_completed", "description": "How many people did this user refer that completed the registration process", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/voter_reg/schema.yml", "build_path": "../../docs/compiled/ds_dbt/models/voter_reg/ovrd_creator_funnel.sql", "deferred": false, "compiled_sql": "--drop table analyst_sandbox.es_ovrd_creator_funnel\n--create table analyst_sandbox.es_ovrd_creator_funnel as\nWITH funnel_base AS (\n  --Unique combinations of device_id, session_id, northstar_id\n  SELECT\n    psc.session_id,\n    psc.landing_datetime,\n    psc.ending_datetime,\n    psc.device_id,\n    pec.northstar_id,\n    pec.\"path\",\n    pec.event_name,\n    pec.event_datetime,\n    psc.session_utm_campaign,\n    psc.session_referrer_host\n  FROM\n    \"quasar_prod_warehouse\".\"public\".\"snowplow_raw_events\"\n    pec\n    JOIN \"quasar_prod_warehouse\".\"public\".\"snowplow_sessions\"\n    psc\n    ON (\n      pec.session_id = psc.session_id\n      AND pec.device_id = psc.device_id\n    ) --Filter to URL of interest\n  WHERE\n    pec.\"path\" ILIKE '%online-registration-drive%'\n    AND psc.landing_datetime >= '2020-03-01'\n    AND pec.event_datetime >= '2020-03-01' --Filter to events of interest\n    AND pec.event_name IN (\n      'phoenix_clicked_share_snapchat',\n      'phoenix_clicked_copy_to_clipboard',\n      'phoenix_clicked_share_facebook',\n      'phoenix_clicked_share_email',\n      'phoenix_clicked_share_facebook_messenger',\n      'phoenix_clicked_share_twitter',\n      'phoenix_clicked_signup',\n      'phoenix_completed_signup',\n      'phoenix_clicked_voter_registration_action',\n      'phoenix_opened_modal',\n      'visit',\n      'view'\n    )\n),\nnorthstars AS (\n  --Authenticated Users\n  SELECT\n    device_id,\n    northstar_id,\n    session_id\n  FROM\n    funnel_base\n  WHERE\n    northstar_id IS NOT NULL\n  GROUP BY\n    1,\n    2,\n    3\n),\ndevices AS (\n  --Anonymous Users (removes cases of sessions that started anonymous AND got autheticated afterwards)\n  SELECT\n    b.device_id,\n    b.session_id\n  FROM\n    funnel_base b\n    LEFT JOIN northstars n\n    ON (\n      b.session_id = n.session_id\n      AND b.device_id = n.device_id\n    )\n  WHERE\n    n.northstar_id IS NULL\n  GROUP BY\n    1,\n    2\n),\nsession_base AS (\n  --Authenticated Sessions\n  --Joining with users table to eliminate internal (dosomething.org) northstar_ids\n  SELECT\n    n.session_id,\n    n.device_id,\n    n.northstar_id\n  FROM\n    northstars n\n    JOIN \"quasar_prod_warehouse\".\"public\".\"users\"\n    u\n    ON (\n      n.northstar_id = u.northstar_id\n    )\n  UNION ALL\n    --Anonymous Sessions\n  SELECT\n    d.session_id,\n    d.device_id,\n    NULL\n  FROM\n    devices d\n),\ncreations AS (\n  --Signups represent the creation of the drive\n  SELECT\n    northstar_id,\n    id AS signup_id,\n    created_at\n  FROM\n    \"quasar_prod_warehouse\".\"public\".\"signups\" s\n  WHERE\n    campaign_id = '9054'\n    AND source_bucket = 'web'\n    AND s.created_at >= '2020-03-01'\n),\nstarts AS (\n  --There seem to be a few cases of multiple posts per northstar\n  SELECT\n    p.northstar_id,\n    p.id AS post_id,\n    p.status,\n    p.created_at,\n    rock.started_registration_utc\n  FROM\n    \"quasar_prod_warehouse\".\"public\".\"posts\"\n    p\n    LEFT JOIN \"quasar_prod_warehouse\".\"public\".\"rock_the_vote\"\n    rock\n    ON (\n      rock.post_id = p.id\n    )\n  WHERE\n    p.vr_source = 'web'\n    AND p.\"type\" = 'voter-reg'\n    AND p.vr_source_details LIKE '%OnlineRegistrationDrive%'\n    AND p.created_at >= '2020-03-01' --Only registrations with these tracking sources represent completing the funnel\n    --Excluding Groups which look like -> source_details:[group_name]OnlineRegistrationDrive_Affirmation\n    AND rock.tracking_source LIKE '%source_details:OnlineRegistrationDrive_affirmation%'\n    AND p.group_id IS NULL\n),\nregistrations AS (\n  --There seem to be a few cases of multiple registrations per northstar\n  SELECT\n    r.northstar_id,\n    r.post_id,\n    rtv.started_registration_utc\n  FROM\n    \"quasar_prod_warehouse\".\"public\".\"reportbacks\"\n    r\n    LEFT JOIN \"quasar_prod_warehouse\".\"public\".\"rock_the_vote\"\n    rtv\n    ON (\n      rtv.post_id = r.post_id\n    )\n  WHERE\n    r.vr_source = 'web'\n    AND r.post_bucket = 'voter_registrations'\n    AND r.vr_source_details LIKE 'OnlineRegistrationDrive%'\n    AND r.post_created_at >= '2020-01-01' --Excluding Groups which look like -> source_details:[group_name]OnlineRegistrationDrive_Affirmation\n    AND rtv.tracking_source LIKE '%source_details:OnlineRegistrationDrive_affirmation%'\n    AND rtv.tracking_source NOT LIKE '%group_id%'\n    AND r.group_id IS NULL\n),\nreferral_counts AS (\n  --Get referral counts\n  SELECT\n    --Prefer referrer_user_id ON post, extract value FROM tracking source for legacy posts\n    COALESCE(\n      p.referrer_user_id,\n      SPLIT_PART(\n        SUBSTRING(\n          rtv.tracking_source\n          FROM\n            'user\\:(.+)\\,'\n        ),\n        ',',\n        1\n      )\n    ) AS referrer,\n    COUNT(*) AS referrals_start,\n    SUM(\n      CASE\n        WHEN rtv.status = 'Complete' THEN 1\n        ELSE 0\n      END\n    ) AS referrals_completed\n  FROM\n    \"quasar_prod_warehouse\".\"public\".\"posts\"\n    p\n    JOIN \"quasar_prod_warehouse\".\"public\".\"rock_the_vote\"\n    rtv\n    ON (\n      p.id = rtv.post_id\n    )\n  WHERE\n    rtv.tracking_source ILIKE '%source_details:onlinedrivereferral%' --Must be referral\n    AND rtv.tracking_source ILIKE '%referral=true%' --Exclude groups\n    AND rtv.tracking_source NOT LIKE '%group_id%'\n    AND p.group_id IS NULL --Exclude nonsense or empty nsid values\n    AND COALESCE(\n      p.referrer_user_id,\n      SPLIT_PART(\n        SUBSTRING(\n          rtv.tracking_source\n          FROM\n            'user\\:(.+)\\,'\n        ),\n        ',',\n        1\n      )\n    ) NOT IN (\n      '{userId}',\n      'null',\n      ''\n    )\n    AND p.created_at >= '2020-03-01'\n  GROUP BY\n    COALESCE(\n      p.referrer_user_id,\n      SPLIT_PART(\n        SUBSTRING(\n          rtv.tracking_source\n          FROM\n            'user\\:(.+)\\,'\n        ),\n        ',',\n        1\n      )\n    )\n),\nfunnel AS (\n  SELECT\n    sb.session_id,\n    sb.device_id,\n    sb.northstar_id,\n    ROW_NUMBER() over(\n      PARTITION BY sb.northstar_id\n      ORDER BY\n        MIN(\n          C.signup_id\n        )\n    ) AS nth_drive,\n    --The signup represents the creation of the drive\n    MIN(\n      C.signup_id\n    ) AS signup_id,\n    --If the referrer does in fact register to vote, this is the corresponding reportback\n    MIN(\n      reg.post_id\n    ) AS post_id,\n    --Earliest recorded page visit\n    MIN(\n      fb.event_datetime\n    ) AS journey_begin_ts,\n    --Earliest campaign signup (drive creation)\n    MIN(\n      C.created_at\n    ) AS drive_creation_ts,\n    --Latest registration timestamp for northstar\n    MAX(\n      reg.started_registration_utc\n    ) AS latest_register_ts,\n    --Latest start RTV process for northstar\n    MAX(\n      po.started_registration_utc\n    ) AS latest_get_started_ts,\n    --Did they visit? Includes other event types to account for missing visits in puck\n    MAX(\n      CASE\n        WHEN fb.session_utm_campaign ILIKE '%niche%' THEN 'niche'\n        WHEN fb.session_utm_campaign ILIKE '%fastweb%' THEN 'fastweb'\n        WHEN fb.session_referrer_host ILIKE '%dosomething%' THEN 'dosomething'\n        ELSE 'other'\n      END\n    ) AS traffic_source,\n    MAX(\n      CASE\n        WHEN fb.event_name IN (\n          'visit',\n          'view',\n          'phoenix_clicked_signup',\n          'phoenix_clicked_voter_registration_action'\n        ) THEN 1\n        ELSE 0\n      END\n    ) AS page_visit,\n    --Funnel flags\n    MAX(\n      CASE\n        WHEN fb.northstar_id IS NOT NULL THEN 1\n        ELSE 0\n      END\n    ) AS authenticated,\n    MAX(\n      CASE\n        WHEN fb.event_name = 'phoenix_clicked_signup' THEN 1\n        ELSE 0\n      END\n    ) AS click_join_us,\n    MAX(\n      CASE\n        WHEN C.signup_id IS NOT NULL THEN 1\n        ELSE 0\n      END\n    ) AS completed_signup,\n    MAX(\n      CASE\n        WHEN fb.event_name = 'phoenix_clicked_voter_registration_action' THEN 1\n        ELSE 0\n      END\n    ) AS click_start_registration,\n    MAX(\n      CASE\n        WHEN po.post_id IS NOT NULL THEN 1\n        ELSE 0\n      END\n    ) AS clicked_get_started,\n    MAX(\n      CASE\n        WHEN po.status IN (\n          'step-2',\n          'step-3',\n          'step-4',\n          'ineligible',\n          'under-18',\n          'register-OVR',\n          'register-form'\n        ) THEN 1\n        ELSE 0\n      END\n    ) AS rtv_step_2,\n    MAX(\n      CASE\n        WHEN po.status IN (\n          'step-3',\n          'ineligible',\n          'under-18',\n          'register-form'\n        ) THEN 1\n        ELSE 0\n      END\n    ) AS rtv_step_3,\n    MAX(\n      CASE\n        WHEN po.status IN (\n          'step-4',\n          'ineligible',\n          'under-18',\n          'register-OVR'\n        ) THEN 1\n        ELSE 0\n      END\n    ) AS rtv_step_4,\n    MAX(\n      CASE\n        WHEN po.status IN (\n          'step-3',\n          'step-4',\n          'ineligible',\n          'under-18',\n          'register-OVR',\n          'register-form'\n        ) THEN 1\n        ELSE 0\n      END\n    ) AS rtv_step_3_or_4,\n    MAX(\n      CASE\n        WHEN reg.northstar_id IS NOT NULL THEN 1\n        ELSE 0\n      END\n    ) AS registered,\n    MAX(\n      CASE\n        WHEN fb.event_name = 'phoenix_clicked_copy_to_clipboard' THEN 1\n        ELSE 0\n      END\n    ) AS click_copy_link,\n    MAX(\n      CASE\n        WHEN fb.event_name IN (\n          'phoenix_clicked_share_facebook',\n          'phoenix_clicked_share_email',\n          'phoenix_clicked_share_facebook_messenger',\n          'phoenix_clicked_share_twitter',\n          'phoenix_clicked_share_snapchat'\n        ) THEN 1\n        ELSE 0\n      END\n    ) AS clicked_any_share,\n    MAX(\n      CASE\n        WHEN fb.event_name = 'phoenix_clicked_share_facebook' THEN 1\n        ELSE 0\n      END\n    ) AS clicked_share_fb,\n    MAX(\n      CASE\n        WHEN fb.event_name = 'phoenix_clicked_share_email' THEN 1\n        ELSE 0\n      END\n    ) AS clicked_share_email,\n    MAX(\n      CASE\n        WHEN fb.event_name = 'phoenix_clicked_share_facebook_messenger' THEN 1\n        ELSE 0\n      END\n    ) AS clicked_share_fb_msgr,\n    MAX(\n      CASE\n        WHEN fb.event_name = 'phoenix_clicked_share_twitter' THEN 1\n        ELSE 0\n      END\n    ) AS clicked_share_twitter,\n    MAX(\n      CASE\n        WHEN fb.event_name = 'phoenix_clicked_share_snapchat' THEN 1\n        ELSE 0\n      END\n    ) AS clicked_share_snapchat\n  FROM\n    session_base sb\n    JOIN funnel_base fb\n    ON (\n      sb.session_id = fb.session_id\n      AND sb.device_id = fb.device_id\n    ) --Join Drive creations (allow a bit of )\n    LEFT JOIN creations C\n    ON (\n      sb.northstar_id = C.northstar_id\n      AND C.created_at BETWEEN fb.landing_datetime - INTERVAL '15 minute'\n      AND fb.ending_datetime + INTERVAL '15 minute'\n    ) --Join started AND completed registrations\n    LEFT JOIN starts po\n    ON (\n      sb.northstar_id = po.northstar_id\n      AND po.started_registration_utc BETWEEN fb.landing_datetime\n      AND fb.ending_datetime + INTERVAL '15 minute'\n    )\n    LEFT JOIN registrations reg\n    ON (\n      sb.northstar_id = reg.northstar_id\n      AND reg.started_registration_utc BETWEEN fb.landing_datetime\n      AND fb.ending_datetime + INTERVAL '15 minute'\n    )\n  GROUP BY\n    sb.session_id,\n    sb.device_id,\n    sb.northstar_id --Only consider folks who did at least one of the below\n  HAVING\n    MAX(\n      CASE\n        WHEN fb.event_name IN (\n          'visit',\n          'view',\n          'phoenix_clicked_signup',\n          'phoenix_clicked_voter_registration_action'\n        ) THEN 1\n        ELSE 0\n      END\n    ) = 1\n)\nSELECT\n  f.session_id,\n  f.device_id,\n  f.northstar_id,\n  f.signup_id,\n  f.nth_drive,\n  f.post_id,\n  journey_begin_ts,\n  drive_creation_ts,\n  latest_register_ts,\n  latest_get_started_ts,\n  traffic_source,\n  page_visit,\n  click_join_us,\n  authenticated,\n  completed_signup,\n  click_start_registration,\n  clicked_get_started,\n  rtv_step_2,\n  rtv_step_3,\n  rtv_step_4,\n  rtv_step_3_or_4,\n  registered,\n  click_copy_link,\n  clicked_any_share,\n  clicked_share_fb,\n  clicked_share_email,\n  clicked_share_fb_msgr,\n  clicked_share_twitter,\n  clicked_share_snapchat,\n  rc.referrals_start,\n  rc.referrals_completed\nFROM\n  funnel f\n  LEFT JOIN referral_counts rc\n  ON (\n    f.northstar_id = rc.referrer\n    AND f.nth_drive = 1\n  )", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "--drop table analyst_sandbox.es_ovrd_creator_funnel\n--create table analyst_sandbox.es_ovrd_creator_funnel as\nWITH funnel_base AS (\n  --Unique combinations of device_id, session_id, northstar_id\n  SELECT\n    psc.session_id,\n    psc.landing_datetime,\n    psc.ending_datetime,\n    psc.device_id,\n    pec.northstar_id,\n    pec.\"path\",\n    pec.event_name,\n    pec.event_datetime,\n    psc.session_utm_campaign,\n    psc.session_referrer_host\n  FROM\n    \"quasar_prod_warehouse\".\"public\".\"snowplow_raw_events\"\n    pec\n    JOIN \"quasar_prod_warehouse\".\"public\".\"snowplow_sessions\"\n    psc\n    ON (\n      pec.session_id = psc.session_id\n      AND pec.device_id = psc.device_id\n    ) --Filter to URL of interest\n  WHERE\n    pec.\"path\" ILIKE '%online-registration-drive%'\n    AND psc.landing_datetime >= '2020-03-01'\n    AND pec.event_datetime >= '2020-03-01' --Filter to events of interest\n    AND pec.event_name IN (\n      'phoenix_clicked_share_snapchat',\n      'phoenix_clicked_copy_to_clipboard',\n      'phoenix_clicked_share_facebook',\n      'phoenix_clicked_share_email',\n      'phoenix_clicked_share_facebook_messenger',\n      'phoenix_clicked_share_twitter',\n      'phoenix_clicked_signup',\n      'phoenix_completed_signup',\n      'phoenix_clicked_voter_registration_action',\n      'phoenix_opened_modal',\n      'visit',\n      'view'\n    )\n),\nnorthstars AS (\n  --Authenticated Users\n  SELECT\n    device_id,\n    northstar_id,\n    session_id\n  FROM\n    funnel_base\n  WHERE\n    northstar_id IS NOT NULL\n  GROUP BY\n    1,\n    2,\n    3\n),\ndevices AS (\n  --Anonymous Users (removes cases of sessions that started anonymous AND got autheticated afterwards)\n  SELECT\n    b.device_id,\n    b.session_id\n  FROM\n    funnel_base b\n    LEFT JOIN northstars n\n    ON (\n      b.session_id = n.session_id\n      AND b.device_id = n.device_id\n    )\n  WHERE\n    n.northstar_id IS NULL\n  GROUP BY\n    1,\n    2\n),\nsession_base AS (\n  --Authenticated Sessions\n  --Joining with users table to eliminate internal (dosomething.org) northstar_ids\n  SELECT\n    n.session_id,\n    n.device_id,\n    n.northstar_id\n  FROM\n    northstars n\n    JOIN \"quasar_prod_warehouse\".\"public\".\"users\"\n    u\n    ON (\n      n.northstar_id = u.northstar_id\n    )\n  UNION ALL\n    --Anonymous Sessions\n  SELECT\n    d.session_id,\n    d.device_id,\n    NULL\n  FROM\n    devices d\n),\ncreations AS (\n  --Signups represent the creation of the drive\n  SELECT\n    northstar_id,\n    id AS signup_id,\n    created_at\n  FROM\n    \"quasar_prod_warehouse\".\"public\".\"signups\" s\n  WHERE\n    campaign_id = '9054'\n    AND source_bucket = 'web'\n    AND s.created_at >= '2020-03-01'\n),\nstarts AS (\n  --There seem to be a few cases of multiple posts per northstar\n  SELECT\n    p.northstar_id,\n    p.id AS post_id,\n    p.status,\n    p.created_at,\n    rock.started_registration_utc\n  FROM\n    \"quasar_prod_warehouse\".\"public\".\"posts\"\n    p\n    LEFT JOIN \"quasar_prod_warehouse\".\"public\".\"rock_the_vote\"\n    rock\n    ON (\n      rock.post_id = p.id\n    )\n  WHERE\n    p.vr_source = 'web'\n    AND p.\"type\" = 'voter-reg'\n    AND p.vr_source_details LIKE '%OnlineRegistrationDrive%'\n    AND p.created_at >= '2020-03-01' --Only registrations with these tracking sources represent completing the funnel\n    --Excluding Groups which look like -> source_details:[group_name]OnlineRegistrationDrive_Affirmation\n    AND rock.tracking_source LIKE '%source_details:OnlineRegistrationDrive_affirmation%'\n    AND p.group_id IS NULL\n),\nregistrations AS (\n  --There seem to be a few cases of multiple registrations per northstar\n  SELECT\n    r.northstar_id,\n    r.post_id,\n    rtv.started_registration_utc\n  FROM\n    \"quasar_prod_warehouse\".\"public\".\"reportbacks\"\n    r\n    LEFT JOIN \"quasar_prod_warehouse\".\"public\".\"rock_the_vote\"\n    rtv\n    ON (\n      rtv.post_id = r.post_id\n    )\n  WHERE\n    r.vr_source = 'web'\n    AND r.post_bucket = 'voter_registrations'\n    AND r.vr_source_details LIKE 'OnlineRegistrationDrive%'\n    AND r.post_created_at >= '2020-01-01' --Excluding Groups which look like -> source_details:[group_name]OnlineRegistrationDrive_Affirmation\n    AND rtv.tracking_source LIKE '%source_details:OnlineRegistrationDrive_affirmation%'\n    AND rtv.tracking_source NOT LIKE '%group_id%'\n    AND r.group_id IS NULL\n),\nreferral_counts AS (\n  --Get referral counts\n  SELECT\n    --Prefer referrer_user_id ON post, extract value FROM tracking source for legacy posts\n    COALESCE(\n      p.referrer_user_id,\n      SPLIT_PART(\n        SUBSTRING(\n          rtv.tracking_source\n          FROM\n            'user\\:(.+)\\,'\n        ),\n        ',',\n        1\n      )\n    ) AS referrer,\n    COUNT(*) AS referrals_start,\n    SUM(\n      CASE\n        WHEN rtv.status = 'Complete' THEN 1\n        ELSE 0\n      END\n    ) AS referrals_completed\n  FROM\n    \"quasar_prod_warehouse\".\"public\".\"posts\"\n    p\n    JOIN \"quasar_prod_warehouse\".\"public\".\"rock_the_vote\"\n    rtv\n    ON (\n      p.id = rtv.post_id\n    )\n  WHERE\n    rtv.tracking_source ILIKE '%source_details:onlinedrivereferral%' --Must be referral\n    AND rtv.tracking_source ILIKE '%referral=true%' --Exclude groups\n    AND rtv.tracking_source NOT LIKE '%group_id%'\n    AND p.group_id IS NULL --Exclude nonsense or empty nsid values\n    AND COALESCE(\n      p.referrer_user_id,\n      SPLIT_PART(\n        SUBSTRING(\n          rtv.tracking_source\n          FROM\n            'user\\:(.+)\\,'\n        ),\n        ',',\n        1\n      )\n    ) NOT IN (\n      '{userId}',\n      'null',\n      ''\n    )\n    AND p.created_at >= '2020-03-01'\n  GROUP BY\n    COALESCE(\n      p.referrer_user_id,\n      SPLIT_PART(\n        SUBSTRING(\n          rtv.tracking_source\n          FROM\n            'user\\:(.+)\\,'\n        ),\n        ',',\n        1\n      )\n    )\n),\nfunnel AS (\n  SELECT\n    sb.session_id,\n    sb.device_id,\n    sb.northstar_id,\n    ROW_NUMBER() over(\n      PARTITION BY sb.northstar_id\n      ORDER BY\n        MIN(\n          C.signup_id\n        )\n    ) AS nth_drive,\n    --The signup represents the creation of the drive\n    MIN(\n      C.signup_id\n    ) AS signup_id,\n    --If the referrer does in fact register to vote, this is the corresponding reportback\n    MIN(\n      reg.post_id\n    ) AS post_id,\n    --Earliest recorded page visit\n    MIN(\n      fb.event_datetime\n    ) AS journey_begin_ts,\n    --Earliest campaign signup (drive creation)\n    MIN(\n      C.created_at\n    ) AS drive_creation_ts,\n    --Latest registration timestamp for northstar\n    MAX(\n      reg.started_registration_utc\n    ) AS latest_register_ts,\n    --Latest start RTV process for northstar\n    MAX(\n      po.started_registration_utc\n    ) AS latest_get_started_ts,\n    --Did they visit? Includes other event types to account for missing visits in puck\n    MAX(\n      CASE\n        WHEN fb.session_utm_campaign ILIKE '%niche%' THEN 'niche'\n        WHEN fb.session_utm_campaign ILIKE '%fastweb%' THEN 'fastweb'\n        WHEN fb.session_referrer_host ILIKE '%dosomething%' THEN 'dosomething'\n        ELSE 'other'\n      END\n    ) AS traffic_source,\n    MAX(\n      CASE\n        WHEN fb.event_name IN (\n          'visit',\n          'view',\n          'phoenix_clicked_signup',\n          'phoenix_clicked_voter_registration_action'\n        ) THEN 1\n        ELSE 0\n      END\n    ) AS page_visit,\n    --Funnel flags\n    MAX(\n      CASE\n        WHEN fb.northstar_id IS NOT NULL THEN 1\n        ELSE 0\n      END\n    ) AS authenticated,\n    MAX(\n      CASE\n        WHEN fb.event_name = 'phoenix_clicked_signup' THEN 1\n        ELSE 0\n      END\n    ) AS click_join_us,\n    MAX(\n      CASE\n        WHEN C.signup_id IS NOT NULL THEN 1\n        ELSE 0\n      END\n    ) AS completed_signup,\n    MAX(\n      CASE\n        WHEN fb.event_name = 'phoenix_clicked_voter_registration_action' THEN 1\n        ELSE 0\n      END\n    ) AS click_start_registration,\n    MAX(\n      CASE\n        WHEN po.post_id IS NOT NULL THEN 1\n        ELSE 0\n      END\n    ) AS clicked_get_started,\n    MAX(\n      CASE\n        WHEN po.status IN (\n          'step-2',\n          'step-3',\n          'step-4',\n          'ineligible',\n          'under-18',\n          'register-OVR',\n          'register-form'\n        ) THEN 1\n        ELSE 0\n      END\n    ) AS rtv_step_2,\n    MAX(\n      CASE\n        WHEN po.status IN (\n          'step-3',\n          'ineligible',\n          'under-18',\n          'register-form'\n        ) THEN 1\n        ELSE 0\n      END\n    ) AS rtv_step_3,\n    MAX(\n      CASE\n        WHEN po.status IN (\n          'step-4',\n          'ineligible',\n          'under-18',\n          'register-OVR'\n        ) THEN 1\n        ELSE 0\n      END\n    ) AS rtv_step_4,\n    MAX(\n      CASE\n        WHEN po.status IN (\n          'step-3',\n          'step-4',\n          'ineligible',\n          'under-18',\n          'register-OVR',\n          'register-form'\n        ) THEN 1\n        ELSE 0\n      END\n    ) AS rtv_step_3_or_4,\n    MAX(\n      CASE\n        WHEN reg.northstar_id IS NOT NULL THEN 1\n        ELSE 0\n      END\n    ) AS registered,\n    MAX(\n      CASE\n        WHEN fb.event_name = 'phoenix_clicked_copy_to_clipboard' THEN 1\n        ELSE 0\n      END\n    ) AS click_copy_link,\n    MAX(\n      CASE\n        WHEN fb.event_name IN (\n          'phoenix_clicked_share_facebook',\n          'phoenix_clicked_share_email',\n          'phoenix_clicked_share_facebook_messenger',\n          'phoenix_clicked_share_twitter',\n          'phoenix_clicked_share_snapchat'\n        ) THEN 1\n        ELSE 0\n      END\n    ) AS clicked_any_share,\n    MAX(\n      CASE\n        WHEN fb.event_name = 'phoenix_clicked_share_facebook' THEN 1\n        ELSE 0\n      END\n    ) AS clicked_share_fb,\n    MAX(\n      CASE\n        WHEN fb.event_name = 'phoenix_clicked_share_email' THEN 1\n        ELSE 0\n      END\n    ) AS clicked_share_email,\n    MAX(\n      CASE\n        WHEN fb.event_name = 'phoenix_clicked_share_facebook_messenger' THEN 1\n        ELSE 0\n      END\n    ) AS clicked_share_fb_msgr,\n    MAX(\n      CASE\n        WHEN fb.event_name = 'phoenix_clicked_share_twitter' THEN 1\n        ELSE 0\n      END\n    ) AS clicked_share_twitter,\n    MAX(\n      CASE\n        WHEN fb.event_name = 'phoenix_clicked_share_snapchat' THEN 1\n        ELSE 0\n      END\n    ) AS clicked_share_snapchat\n  FROM\n    session_base sb\n    JOIN funnel_base fb\n    ON (\n      sb.session_id = fb.session_id\n      AND sb.device_id = fb.device_id\n    ) --Join Drive creations (allow a bit of )\n    LEFT JOIN creations C\n    ON (\n      sb.northstar_id = C.northstar_id\n      AND C.created_at BETWEEN fb.landing_datetime - INTERVAL '15 minute'\n      AND fb.ending_datetime + INTERVAL '15 minute'\n    ) --Join started AND completed registrations\n    LEFT JOIN starts po\n    ON (\n      sb.northstar_id = po.northstar_id\n      AND po.started_registration_utc BETWEEN fb.landing_datetime\n      AND fb.ending_datetime + INTERVAL '15 minute'\n    )\n    LEFT JOIN registrations reg\n    ON (\n      sb.northstar_id = reg.northstar_id\n      AND reg.started_registration_utc BETWEEN fb.landing_datetime\n      AND fb.ending_datetime + INTERVAL '15 minute'\n    )\n  GROUP BY\n    sb.session_id,\n    sb.device_id,\n    sb.northstar_id --Only consider folks who did at least one of the below\n  HAVING\n    MAX(\n      CASE\n        WHEN fb.event_name IN (\n          'visit',\n          'view',\n          'phoenix_clicked_signup',\n          'phoenix_clicked_voter_registration_action'\n        ) THEN 1\n        ELSE 0\n      END\n    ) = 1\n)\nSELECT\n  f.session_id,\n  f.device_id,\n  f.northstar_id,\n  f.signup_id,\n  f.nth_drive,\n  f.post_id,\n  journey_begin_ts,\n  drive_creation_ts,\n  latest_register_ts,\n  latest_get_started_ts,\n  traffic_source,\n  page_visit,\n  click_join_us,\n  authenticated,\n  completed_signup,\n  click_start_registration,\n  clicked_get_started,\n  rtv_step_2,\n  rtv_step_3,\n  rtv_step_4,\n  rtv_step_3_or_4,\n  registered,\n  click_copy_link,\n  clicked_any_share,\n  clicked_share_fb,\n  clicked_share_email,\n  clicked_share_fb_msgr,\n  clicked_share_twitter,\n  clicked_share_snapchat,\n  rc.referrals_start,\n  rc.referrals_completed\nFROM\n  funnel f\n  LEFT JOIN referral_counts rc\n  ON (\n    f.northstar_id = rc.referrer\n    AND f.nth_drive = 1\n  )"}, "error": null, "status": null, "execution_time": 0.036792755126953125, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-02-23T21:28:56.096892Z", "completed_at": "2021-02-23T21:28:56.132657Z"}, {"name": "execute", "started_at": "2021-02-23T21:28:56.132945Z", "completed_at": "2021-02-23T21:28:56.132952Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "WITH funnel_base AS (\n  --Unique combinations of device_id, session_id, northstar_id\n  SELECT\n    psc.session_id,\n    psc.landing_datetime,\n    psc.ending_datetime,\n    psc.device_id,\n    pec.northstar_id,\n    pec.\"path\",\n    pec.event_name,\n    pec.event_datetime,\n    psc.session_utm_campaign,\n    psc.session_referrer_host\n  FROM\n    {{ ref('snowplow_raw_events') }}\n    pec\n    JOIN {{ ref('snowplow_sessions') }}\n    psc\n    ON (\n      pec.session_id = psc.session_id\n      AND pec.device_id = psc.device_id\n    ) --Filter to URL of interest\n  WHERE\n    pec.\"path\" ILIKE '%online-voter-registration-drives%'\n    AND psc.landing_datetime >= '2020-06-01'\n    AND pec.event_datetime >= '2020-06-01' --Filter to events of interest\n    AND pec.event_name IN (\n      'phoenix_clicked_share_snapchat',\n      'phoenix_clicked_copy_to_clipboard',\n      'phoenix_clicked_share_facebook',\n      'phoenix_clicked_share_email',\n      'phoenix_clicked_share_facebook_messenger',\n      'phoenix_clicked_share_twitter',\n      'phoenix_clicked_signup',\n      'phoenix_completed_signup',\n      'phoenix_clicked_voter_registration_action',\n      'phoenix_opened_modal',\n      'visit',\n      'view'\n    )\n),\nnorthstars AS (\n  --Authenticated Users\n  SELECT\n    device_id,\n    northstar_id,\n    session_id\n  FROM\n    funnel_base\n  WHERE\n    northstar_id IS NOT NULL\n  GROUP BY\n    1,\n    2,\n    3\n),\ndevices AS (\n  --Anonymous Users (removes cases of sessions that started anonymous and got autheticated afterwards)\n  SELECT\n    b.device_id,\n    b.session_id\n  FROM\n    funnel_base b\n    LEFT JOIN northstars n\n    ON (\n      b.session_id = n.session_id\n      AND b.device_id = n.device_id\n    )\n  WHERE\n    n.session_id IS NULL\n  GROUP BY\n    1,\n    2\n),\nsession_base AS (\n  --Authenticated Sessions\n  --Joining with users table to eliminate internal (dosomething.org) northstar_ids\n  SELECT\n    n.session_id,\n    n.device_id,\n    n.northstar_id\n  FROM\n    northstars n\n    JOIN {{ ref('users') }}\n    u\n    ON (\n      n.northstar_id = u.northstar_id\n    )\n  UNION ALL\n    --Anonymous Sessions\n  SELECT\n    d.session_id,\n    d.device_id,\n    NULL\n  FROM\n    devices d\n),\ncreations AS (\n  --Signups represent the creation of the drive\n  SELECT\n    northstar_id,\n    s.id AS signup_id,\n    s.created_at,\n    s.group_id --, s.campaign_id, c.campaign_cause, c.campaign_name, c.campaign_run_start_date\n  FROM\n    {{ ref('signups') }}\n    s\n    JOIN {{ ref('campaign_info') }} C\n    ON (\n      s.campaign_id = C.campaign_id :: text\n    )\n  WHERE\n    s.source_bucket = 'web'\n    AND C.campaign_cause = 'voter-registration'\n    AND C.campaign_name LIKE '%Online%Drives 2020%'\n    AND s.group_id IS NOT NULL\n    AND s.created_at >= '2020-06-01'\n),\nstarts AS (\n  --There seem to be a few cases of multiple posts per northstar\n  SELECT\n    p.northstar_id,\n    p.id AS post_id,\n    p.status,\n    rock.started_registration_utc,\n    rock.tracking_source\n  FROM\n    {{ ref('posts') }}\n    p\n    LEFT JOIN {{ ref('rock_the_vote') }}\n    rock\n    ON (\n      rock.post_id = p.id\n    )\n  WHERE\n    p.vr_source = 'web'\n    AND p.\"type\" = 'voter-reg'\n    AND p.created_at >= '2020-06-01' --Only registrations with these tracking sources represent starting the funnel\n    AND rock.tracking_source LIKE '%OnlineRegistrationDrive_Affirmation%' --don't use any group_id filters because they're not flowing into the data\n    --AND p.group_id is not null\n),\nregistrations AS (\n  --There seem to be a few cases of multiple registrations per northstar (12 northstars -- 11 have 2 registrations and 1 has 3 for a total of 25 registrations)\n  SELECT\n    r.northstar_id,\n    r.post_id,\n    rock.started_registration_utc,\n    rock.tracking_source --row_number() over(partition by r.northstar order by rock.started_registration_utc desc) as nth_registration\n  FROM\n    {{ ref('reportbacks') }}\n    r\n    LEFT JOIN {{ ref('rock_the_vote') }}\n    rock\n    ON (\n      rock.post_id = r.post_id\n    )\n  WHERE\n    r.vr_source = 'web'\n    AND r.post_bucket = 'voter_registrations'\n    AND r.vr_source_details LIKE '%OnlineRegistrationDrive%'\n    AND r.post_created_at >= '2020-06-01' --Only registrations with these tracking sources represent completing the funnel\n    AND rock.tracking_source LIKE '%OnlineRegistrationDrive_Affirmation%' --don't use any group filters because they're not flowing into the data\n),\nreferral_counts AS (\n  --Get referral counts\n  SELECT\n    --Prefer referrer_user_id on post, extract value FROM tracking source for legacy posts\n    COALESCE(\n      p.referrer_user_id,\n      SPLIT_PART(\n        SUBSTRING(\n          tracking_source\n          FROM\n            'user\\:(.+)\\,'\n        ),\n        ',',\n        1\n      )\n    ) AS referrer,\n    --Group ID is not always populated in Post so we extract it FROM RTV\n    SUBSTRING(\n      rtv.tracking_source\n      FROM\n        'group_id=(.+)\\,'\n    ) AS group_id,\n    COUNT(*) AS referrals_start,\n    SUM(\n      CASE\n        WHEN rtv.status = 'Complete' THEN 1\n        ELSE 0\n      END\n    ) AS referrals_completed\n  FROM\n    {{ ref('posts') }}\n    p\n    JOIN {{ ref('rock_the_vote') }}\n    rtv\n    ON (\n      p.id = rtv.post_id\n    )\n  WHERE\n    --Must be referral\n    rtv.tracking_source LIKE '%onlinedrivereferral%group_id%referral=true%' --Exclude nonsense or empty nsid values\n    AND COALESCE(\n      p.referrer_user_id,\n      SPLIT_PART(\n        SUBSTRING(\n          tracking_source\n          FROM\n            'user\\:(.+)\\,'\n        ),\n        ',',\n        1\n      )\n    ) NOT IN (\n      '{userId}',\n      'null',\n      ''\n    )\n    AND p.created_at >= '2020-06-01'\n  GROUP BY\n    1,\n    2\n),\nfunnel AS (\n  SELECT\n    sb.session_id,\n    sb.device_id,\n    sb.northstar_id,\n    C.group_id,\n    --The signup represents the creation of the drive\n    MIN(\n      C.signup_id\n    ) AS signup_id,\n    COUNT(\n      DISTINCT C.signup_id\n    ) AS num_drives,\n    --We rank the signups per group in case there are multiple signups per group (so we only assign referrals to the first signup)\n    ROW_NUMBER() over(\n      PARTITION BY sb.northstar_id,\n      C.group_id\n      ORDER BY\n        MIN(\n          C.signup_id\n        )\n    ) AS nth_drive,\n    --If the referrer does in fact register to vote, this is the corresponding reportback\n    MIN(\n      reg.post_id\n    ) AS post_id,\n    --Earliest recorded page visit\n    MIN(\n      fb.event_datetime\n    ) AS journey_begin_ts,\n    --Earliest campaign signup (drive creation)\n    MIN(\n      C.created_at\n    ) AS drive_creation_ts,\n    --Latest registration timestamp for northstar\n    MAX(\n      reg.started_registration_utc\n    ) AS latest_register_ts,\n    --Latest start RTV process for northstar\n    MAX(\n      po.started_registration_utc\n    ) AS latest_get_started_ts,\n    --Did they visit? Includes other event types to account for missing visits in puck\n    MAX(\n      CASE\n        WHEN fb.session_utm_campaign ILIKE '%niche%' THEN 'niche'\n        WHEN fb.session_utm_campaign ILIKE '%fastweb%' THEN 'fastweb'\n        WHEN fb.session_referrer_host ILIKE '%dosomething%' THEN 'dosomething'\n        ELSE 'other'\n      END\n    ) AS traffic_source,\n    MAX(\n      CASE\n        WHEN fb.event_name IN (\n          'visit',\n          'view',\n          'phoenix_clicked_signup',\n          'phoenix_clicked_voter_registration_action'\n        ) THEN 1\n        ELSE 0\n      END\n    ) AS page_visit,\n    --Funnel flags\n    MAX(\n      CASE\n        WHEN fb.event_name = 'phoenix_clicked_signup' THEN 1\n        ELSE 0\n      END\n    ) AS click_join_us,\n    MAX(\n      CASE\n        WHEN C.signup_id IS NOT NULL THEN 1\n        ELSE 0\n      END\n    ) AS completed_signup,\n    MAX(\n      CASE\n        WHEN fb.northstar_id IS NOT NULL THEN 1\n        ELSE 0\n      END\n    ) AS authenticated,\n    MAX(\n      CASE\n        WHEN fb.event_name = 'phoenix_clicked_voter_registration_action' THEN 1\n        ELSE 0\n      END\n    ) AS click_start_registration,\n    MAX(\n      CASE\n        WHEN po.post_id IS NOT NULL THEN 1\n        ELSE 0\n      END\n    ) AS clicked_get_started,\n    MAX(\n      CASE\n        WHEN po.status IN (\n          'step-2',\n          'step-3',\n          'step-4',\n          'ineligible',\n          'under-18',\n          'register-OVR',\n          'register-form'\n        ) THEN 1\n        ELSE 0\n      END\n    ) AS rtv_step_2,\n    MAX(\n      CASE\n        WHEN po.status IN (\n          'step-3',\n          'ineligible',\n          'under-18',\n          'register-form'\n        ) THEN 1\n        ELSE 0\n      END\n    ) AS rtv_step_3,\n    MAX(\n      CASE\n        WHEN po.status IN (\n          'step-4',\n          'ineligible',\n          'under-18',\n          'register-OVR'\n        ) THEN 1\n        ELSE 0\n      END\n    ) AS rtv_step_4,\n    MAX(\n      CASE\n        WHEN po.status IN (\n          'step-3',\n          'step-4',\n          'ineligible',\n          'under-18',\n          'register-OVR',\n          'register-form'\n        ) THEN 1\n        ELSE 0\n      END\n    ) AS rtv_step_3_or_4,\n    MAX(\n      CASE\n        WHEN reg.northstar_id IS NOT NULL THEN 1\n        ELSE 0\n      END\n    ) AS registered,\n    MAX(\n      CASE\n        WHEN fb.event_name = 'phoenix_clicked_copy_to_clipboard' THEN 1\n        ELSE 0\n      END\n    ) AS click_copy_link,\n    MAX(\n      CASE\n        WHEN fb.event_name IN (\n          'phoenix_clicked_share_action_facebook',\n          'phoenix_clicked_share_email',\n          'phoenix_clicked_share_facebook_messenger',\n          'phoenix_clicked_share_twitter',\n          'phoenix_clicked_share_snapchat'\n        ) THEN 1\n        ELSE 0\n      END\n    ) AS clicked_any_share,\n    MAX(\n      CASE\n        WHEN fb.event_name = 'phoenix_clicked_share_facebook' THEN 1\n        ELSE 0\n      END\n    ) AS clicked_share_fb,\n    MAX(\n      CASE\n        WHEN fb.event_name = 'phoenix_clicked_share_email' THEN 1\n        ELSE 0\n      END\n    ) AS clicked_share_email,\n    MAX(\n      CASE\n        WHEN fb.event_name = 'phoenix_clicked_share_facebook_messenger' THEN 1\n        ELSE 0\n      END\n    ) AS clicked_share_fb_msgr,\n    MAX(\n      CASE\n        WHEN fb.event_name = 'phoenix_clicked_share_twitter' THEN 1\n        ELSE 0\n      END\n    ) AS clicked_share_twitter,\n    MAX(\n      CASE\n        WHEN fb.event_name = 'phoenix_clicked_share_snapchat' THEN 1\n        ELSE 0\n      END\n    ) AS clicked_share_snapchat\n  FROM\n    session_base sb\n    JOIN funnel_base fb\n    ON (\n      sb.session_id = fb.session_id\n      AND sb.device_id = fb.device_id\n    ) --Join Drive creations\n    LEFT JOIN creations C\n    ON (\n      sb.northstar_id = C.northstar_id\n      AND C.created_at BETWEEN fb.landing_datetime\n      AND fb.ending_datetime\n    ) --Join reportbacks to determine if they registered via the source we care about\n    LEFT JOIN registrations reg\n    ON (\n      sb.northstar_id = reg.northstar_id\n      AND reg.started_registration_utc BETWEEN fb.landing_datetime\n      AND fb.ending_datetime + INTERVAL '20 minute'\n    )\n    LEFT JOIN starts po\n    ON (\n      sb.northstar_id = po.northstar_id\n      AND po.started_registration_utc BETWEEN fb.landing_datetime\n      AND fb.ending_datetime + INTERVAL '20 minute'\n    )\n  GROUP BY\n    sb.session_id,\n    sb.device_id,\n    sb.northstar_id,\n    C.group_id --Only consider folks who did at least one of the below on the URL of interest\n  HAVING\n    MAX(\n      CASE\n        WHEN fb.event_name IN (\n          'visit',\n          'view',\n          'phoenix_clicked_signup',\n          'phoenix_completed_signup',\n          'phoenix_clicked_voter_registration_action'\n        ) THEN 1\n        ELSE 0\n      END\n    ) = 1\n)\nSELECT\n  f.session_id,\n  f.device_id,\n  f.northstar_id,\n  f.signup_id,\n  f.group_id,\n  gt.name AS group_name,\n  f.num_drives,\n  f.post_id,\n  journey_begin_ts,\n  drive_creation_ts,\n  latest_register_ts,\n  latest_get_started_ts,\n  traffic_source,\n  page_visit,\n  click_join_us,\n  authenticated,\n  completed_signup,\n  click_start_registration,\n  clicked_get_started,\n  rtv_step_2,\n  rtv_step_3,\n  rtv_step_4,\n  rtv_step_3_or_4,\n  registered,\n  click_copy_link,\n  clicked_any_share,\n  clicked_share_fb,\n  clicked_share_email,\n  clicked_share_fb_msgr,\n  clicked_share_twitter,\n  clicked_share_snapchat,\n  rc.referrals_start,\n  rc.referrals_completed\nFROM\n  funnel f\n  LEFT JOIN referral_counts rc\n  ON (\n    f.northstar_id = rc.referrer\n    AND f.group_id :: text = rc.group_id\n    AND f.nth_drive = 1\n  )\n  LEFT JOIN {{ ref('groups') }}\n  g\n  ON (\n    f.group_id = g.id\n  )\n  LEFT JOIN {{ ref('group_types') }}\n  gt\n  ON (\n    g.group_type_id = gt.id\n  )", "compiled": true, "database": "quasar_prod_warehouse", "schema": "public", "fqn": ["ds_dbt", "voter_reg", "ovrd_group_creator_funnel"], "unique_id": "model.ds_dbt.ovrd_group_creator_funnel", "package_name": "ds_dbt", "root_path": "/home/runner/work/quasar/quasar/quasar/dbt", "path": "voter_reg/ovrd_group_creator_funnel.sql", "original_file_path": "models/voter_reg/ovrd_group_creator_funnel.sql", "name": "ovrd_group_creator_funnel", "resource_type": "model", "alias": "ovrd_group_creator_funnel", "checksum": {"name": "sha256", "checksum": "961b46e904172ff442debd13c43f41aef97347210db556df18f67769a20c8af9"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [{"sql": "CREATE INDEX {{ get_index_name(this, 'northstar_id') }} (northstar_id)", "transaction": true, "index": null}, {"sql": "{{ grant_select_to(this, ['dsanalyst', 'looker']) }}", "transaction": true, "index": null}], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": "ovrd_group_creator_funnel", "schema": null, "database": null, "tags": ["voter_reg"], "full_refresh": null}, "tags": ["voter_reg"], "refs": [["snowplow_raw_events"], ["snowplow_sessions"], ["users"], ["signups"], ["campaign_info"], ["posts"], ["rock_the_vote"], ["reportbacks"], ["rock_the_vote"], ["posts"], ["rock_the_vote"], ["groups"], ["group_types"]], "sources": [], "depends_on": {"macros": ["macro.ds_dbt.get_index_name", "macro.ds_dbt.grant_select_to"], "nodes": ["model.ds_dbt.snowplow_raw_events", "model.ds_dbt.snowplow_sessions", "model.ds_dbt.users", "model.ds_dbt.signups", "model.ds_dbt.campaign_info", "model.ds_dbt.posts", "model.ds_dbt.rock_the_vote", "model.ds_dbt.reportbacks", "model.ds_dbt.rock_the_vote", "model.ds_dbt.posts", "model.ds_dbt.rock_the_vote", "model.ds_dbt.groups", "model.ds_dbt.group_types"]}, "description": "Needs a description", "columns": {"northstar_id": {"name": "northstar_id", "description": "The Northstar ID of the user who generated the event.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "device_id": {"name": "device_id", "description": "ID of the device used", "meta": {}, "data_type": null, "quote": null, "tags": []}, "journey_begin_ts": {"name": "journey_begin_ts", "description": "The first time the user landed on this URL", "meta": {}, "data_type": null, "quote": null, "tags": []}, "latest_get_started_ts": {"name": "latest_get_started_ts", "description": "The most recent time the user clicked Get Started on the RTV block", "meta": {}, "data_type": null, "quote": null, "tags": []}, "latest_registered_ts": {"name": "latest_registered_ts", "description": "The most recent time the user registered to vote", "meta": {}, "data_type": null, "quote": null, "tags": []}, "page_visit": {"name": "page_visit", "description": "Has the user visited the OVRD URL", "meta": {}, "data_type": null, "quote": null, "tags": []}, "click_join_us": {"name": "click_join_us", "description": "Did the user click the Join Us button to sign up for the campaign. Phoenix Events Combined event_name = phoenix_clicked_signup", "meta": {}, "data_type": null, "quote": null, "tags": []}, "authenticated": {"name": "authenticated", "description": "Did the user view the page while authenticated", "meta": {}, "data_type": null, "quote": null, "tags": []}, "click_start_registration": {"name": "click_start_registration", "description": "Did the user click the Start Registration button to go to Instapage. Phoenix Events Combined event_name = phoenix_clicked_voter_registration_action", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicked_get_started": {"name": "clicked_get_started", "description": "Did the user start the registration process on Instapage.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "registered": {"name": "registered", "description": "Has the user registered to vote?", "meta": {}, "data_type": null, "quote": null, "tags": []}, "click_copy_link": {"name": "click_copy_link", "description": "Did the user copy their unique link to share. Phoenix Events Combined event_name = phoenix_clicked_copy_to_clipboard", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicked_any_share": {"name": "clicked_any_share", "description": "Did the user click any of the social share buttons. Phoenix Events Combined event_name = 'phoenix_clicked_share_action_facebook','phoenix_clicked_share_email', 'phoenix_clicked_share_facebook_messenger','phoenix_clicked_share_twitter'", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicked_share_fb": {"name": "clicked_share_fb", "description": "Did the user click the share via Facebook button? Phoenix Events Combined event_name = phoenix_clicked_share_action_facebook", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicked_share_email": {"name": "clicked_share_email", "description": "Did the user click the share via email button? Phoenix Events Combined event_name = phoenix_clicked_share_email", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicked_share_fb_msgr": {"name": "clicked_share_fb_msgr", "description": "Did the user click the share via Facebook Messenger button? Phoenix Events Combined event_name = phoenix_clicked_share_facebook_messenger", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicked_share_twitter": {"name": "clicked_share_twitter", "description": "Did the user click the share via Twitter button? Phoenix Events Combined event_name = phoenix_clicked_share_twitter", "meta": {}, "data_type": null, "quote": null, "tags": []}, "referrals_start": {"name": "referrals_start", "description": "How many people did this user refer that started the registration process", "meta": {}, "data_type": null, "quote": null, "tags": []}, "referrals_completed": {"name": "referrals_completed", "description": "How many people did this user refer that completed the registration process", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/voter_reg/schema.yml", "build_path": "../../docs/compiled/ds_dbt/models/voter_reg/ovrd_group_creator_funnel.sql", "deferred": false, "compiled_sql": "WITH funnel_base AS (\n  --Unique combinations of device_id, session_id, northstar_id\n  SELECT\n    psc.session_id,\n    psc.landing_datetime,\n    psc.ending_datetime,\n    psc.device_id,\n    pec.northstar_id,\n    pec.\"path\",\n    pec.event_name,\n    pec.event_datetime,\n    psc.session_utm_campaign,\n    psc.session_referrer_host\n  FROM\n    \"quasar_prod_warehouse\".\"public\".\"snowplow_raw_events\"\n    pec\n    JOIN \"quasar_prod_warehouse\".\"public\".\"snowplow_sessions\"\n    psc\n    ON (\n      pec.session_id = psc.session_id\n      AND pec.device_id = psc.device_id\n    ) --Filter to URL of interest\n  WHERE\n    pec.\"path\" ILIKE '%online-voter-registration-drives%'\n    AND psc.landing_datetime >= '2020-06-01'\n    AND pec.event_datetime >= '2020-06-01' --Filter to events of interest\n    AND pec.event_name IN (\n      'phoenix_clicked_share_snapchat',\n      'phoenix_clicked_copy_to_clipboard',\n      'phoenix_clicked_share_facebook',\n      'phoenix_clicked_share_email',\n      'phoenix_clicked_share_facebook_messenger',\n      'phoenix_clicked_share_twitter',\n      'phoenix_clicked_signup',\n      'phoenix_completed_signup',\n      'phoenix_clicked_voter_registration_action',\n      'phoenix_opened_modal',\n      'visit',\n      'view'\n    )\n),\nnorthstars AS (\n  --Authenticated Users\n  SELECT\n    device_id,\n    northstar_id,\n    session_id\n  FROM\n    funnel_base\n  WHERE\n    northstar_id IS NOT NULL\n  GROUP BY\n    1,\n    2,\n    3\n),\ndevices AS (\n  --Anonymous Users (removes cases of sessions that started anonymous and got autheticated afterwards)\n  SELECT\n    b.device_id,\n    b.session_id\n  FROM\n    funnel_base b\n    LEFT JOIN northstars n\n    ON (\n      b.session_id = n.session_id\n      AND b.device_id = n.device_id\n    )\n  WHERE\n    n.session_id IS NULL\n  GROUP BY\n    1,\n    2\n),\nsession_base AS (\n  --Authenticated Sessions\n  --Joining with users table to eliminate internal (dosomething.org) northstar_ids\n  SELECT\n    n.session_id,\n    n.device_id,\n    n.northstar_id\n  FROM\n    northstars n\n    JOIN \"quasar_prod_warehouse\".\"public\".\"users\"\n    u\n    ON (\n      n.northstar_id = u.northstar_id\n    )\n  UNION ALL\n    --Anonymous Sessions\n  SELECT\n    d.session_id,\n    d.device_id,\n    NULL\n  FROM\n    devices d\n),\ncreations AS (\n  --Signups represent the creation of the drive\n  SELECT\n    northstar_id,\n    s.id AS signup_id,\n    s.created_at,\n    s.group_id --, s.campaign_id, c.campaign_cause, c.campaign_name, c.campaign_run_start_date\n  FROM\n    \"quasar_prod_warehouse\".\"public\".\"signups\"\n    s\n    JOIN \"quasar_prod_warehouse\".\"public\".\"campaign_info\" C\n    ON (\n      s.campaign_id = C.campaign_id :: text\n    )\n  WHERE\n    s.source_bucket = 'web'\n    AND C.campaign_cause = 'voter-registration'\n    AND C.campaign_name LIKE '%Online%Drives 2020%'\n    AND s.group_id IS NOT NULL\n    AND s.created_at >= '2020-06-01'\n),\nstarts AS (\n  --There seem to be a few cases of multiple posts per northstar\n  SELECT\n    p.northstar_id,\n    p.id AS post_id,\n    p.status,\n    rock.started_registration_utc,\n    rock.tracking_source\n  FROM\n    \"quasar_prod_warehouse\".\"public\".\"posts\"\n    p\n    LEFT JOIN \"quasar_prod_warehouse\".\"public\".\"rock_the_vote\"\n    rock\n    ON (\n      rock.post_id = p.id\n    )\n  WHERE\n    p.vr_source = 'web'\n    AND p.\"type\" = 'voter-reg'\n    AND p.created_at >= '2020-06-01' --Only registrations with these tracking sources represent starting the funnel\n    AND rock.tracking_source LIKE '%OnlineRegistrationDrive_Affirmation%' --don't use any group_id filters because they're not flowing into the data\n    --AND p.group_id is not null\n),\nregistrations AS (\n  --There seem to be a few cases of multiple registrations per northstar (12 northstars -- 11 have 2 registrations and 1 has 3 for a total of 25 registrations)\n  SELECT\n    r.northstar_id,\n    r.post_id,\n    rock.started_registration_utc,\n    rock.tracking_source --row_number() over(partition by r.northstar order by rock.started_registration_utc desc) as nth_registration\n  FROM\n    \"quasar_prod_warehouse\".\"public\".\"reportbacks\"\n    r\n    LEFT JOIN \"quasar_prod_warehouse\".\"public\".\"rock_the_vote\"\n    rock\n    ON (\n      rock.post_id = r.post_id\n    )\n  WHERE\n    r.vr_source = 'web'\n    AND r.post_bucket = 'voter_registrations'\n    AND r.vr_source_details LIKE '%OnlineRegistrationDrive%'\n    AND r.post_created_at >= '2020-06-01' --Only registrations with these tracking sources represent completing the funnel\n    AND rock.tracking_source LIKE '%OnlineRegistrationDrive_Affirmation%' --don't use any group filters because they're not flowing into the data\n),\nreferral_counts AS (\n  --Get referral counts\n  SELECT\n    --Prefer referrer_user_id on post, extract value FROM tracking source for legacy posts\n    COALESCE(\n      p.referrer_user_id,\n      SPLIT_PART(\n        SUBSTRING(\n          tracking_source\n          FROM\n            'user\\:(.+)\\,'\n        ),\n        ',',\n        1\n      )\n    ) AS referrer,\n    --Group ID is not always populated in Post so we extract it FROM RTV\n    SUBSTRING(\n      rtv.tracking_source\n      FROM\n        'group_id=(.+)\\,'\n    ) AS group_id,\n    COUNT(*) AS referrals_start,\n    SUM(\n      CASE\n        WHEN rtv.status = 'Complete' THEN 1\n        ELSE 0\n      END\n    ) AS referrals_completed\n  FROM\n    \"quasar_prod_warehouse\".\"public\".\"posts\"\n    p\n    JOIN \"quasar_prod_warehouse\".\"public\".\"rock_the_vote\"\n    rtv\n    ON (\n      p.id = rtv.post_id\n    )\n  WHERE\n    --Must be referral\n    rtv.tracking_source LIKE '%onlinedrivereferral%group_id%referral=true%' --Exclude nonsense or empty nsid values\n    AND COALESCE(\n      p.referrer_user_id,\n      SPLIT_PART(\n        SUBSTRING(\n          tracking_source\n          FROM\n            'user\\:(.+)\\,'\n        ),\n        ',',\n        1\n      )\n    ) NOT IN (\n      '{userId}',\n      'null',\n      ''\n    )\n    AND p.created_at >= '2020-06-01'\n  GROUP BY\n    1,\n    2\n),\nfunnel AS (\n  SELECT\n    sb.session_id,\n    sb.device_id,\n    sb.northstar_id,\n    C.group_id,\n    --The signup represents the creation of the drive\n    MIN(\n      C.signup_id\n    ) AS signup_id,\n    COUNT(\n      DISTINCT C.signup_id\n    ) AS num_drives,\n    --We rank the signups per group in case there are multiple signups per group (so we only assign referrals to the first signup)\n    ROW_NUMBER() over(\n      PARTITION BY sb.northstar_id,\n      C.group_id\n      ORDER BY\n        MIN(\n          C.signup_id\n        )\n    ) AS nth_drive,\n    --If the referrer does in fact register to vote, this is the corresponding reportback\n    MIN(\n      reg.post_id\n    ) AS post_id,\n    --Earliest recorded page visit\n    MIN(\n      fb.event_datetime\n    ) AS journey_begin_ts,\n    --Earliest campaign signup (drive creation)\n    MIN(\n      C.created_at\n    ) AS drive_creation_ts,\n    --Latest registration timestamp for northstar\n    MAX(\n      reg.started_registration_utc\n    ) AS latest_register_ts,\n    --Latest start RTV process for northstar\n    MAX(\n      po.started_registration_utc\n    ) AS latest_get_started_ts,\n    --Did they visit? Includes other event types to account for missing visits in puck\n    MAX(\n      CASE\n        WHEN fb.session_utm_campaign ILIKE '%niche%' THEN 'niche'\n        WHEN fb.session_utm_campaign ILIKE '%fastweb%' THEN 'fastweb'\n        WHEN fb.session_referrer_host ILIKE '%dosomething%' THEN 'dosomething'\n        ELSE 'other'\n      END\n    ) AS traffic_source,\n    MAX(\n      CASE\n        WHEN fb.event_name IN (\n          'visit',\n          'view',\n          'phoenix_clicked_signup',\n          'phoenix_clicked_voter_registration_action'\n        ) THEN 1\n        ELSE 0\n      END\n    ) AS page_visit,\n    --Funnel flags\n    MAX(\n      CASE\n        WHEN fb.event_name = 'phoenix_clicked_signup' THEN 1\n        ELSE 0\n      END\n    ) AS click_join_us,\n    MAX(\n      CASE\n        WHEN C.signup_id IS NOT NULL THEN 1\n        ELSE 0\n      END\n    ) AS completed_signup,\n    MAX(\n      CASE\n        WHEN fb.northstar_id IS NOT NULL THEN 1\n        ELSE 0\n      END\n    ) AS authenticated,\n    MAX(\n      CASE\n        WHEN fb.event_name = 'phoenix_clicked_voter_registration_action' THEN 1\n        ELSE 0\n      END\n    ) AS click_start_registration,\n    MAX(\n      CASE\n        WHEN po.post_id IS NOT NULL THEN 1\n        ELSE 0\n      END\n    ) AS clicked_get_started,\n    MAX(\n      CASE\n        WHEN po.status IN (\n          'step-2',\n          'step-3',\n          'step-4',\n          'ineligible',\n          'under-18',\n          'register-OVR',\n          'register-form'\n        ) THEN 1\n        ELSE 0\n      END\n    ) AS rtv_step_2,\n    MAX(\n      CASE\n        WHEN po.status IN (\n          'step-3',\n          'ineligible',\n          'under-18',\n          'register-form'\n        ) THEN 1\n        ELSE 0\n      END\n    ) AS rtv_step_3,\n    MAX(\n      CASE\n        WHEN po.status IN (\n          'step-4',\n          'ineligible',\n          'under-18',\n          'register-OVR'\n        ) THEN 1\n        ELSE 0\n      END\n    ) AS rtv_step_4,\n    MAX(\n      CASE\n        WHEN po.status IN (\n          'step-3',\n          'step-4',\n          'ineligible',\n          'under-18',\n          'register-OVR',\n          'register-form'\n        ) THEN 1\n        ELSE 0\n      END\n    ) AS rtv_step_3_or_4,\n    MAX(\n      CASE\n        WHEN reg.northstar_id IS NOT NULL THEN 1\n        ELSE 0\n      END\n    ) AS registered,\n    MAX(\n      CASE\n        WHEN fb.event_name = 'phoenix_clicked_copy_to_clipboard' THEN 1\n        ELSE 0\n      END\n    ) AS click_copy_link,\n    MAX(\n      CASE\n        WHEN fb.event_name IN (\n          'phoenix_clicked_share_action_facebook',\n          'phoenix_clicked_share_email',\n          'phoenix_clicked_share_facebook_messenger',\n          'phoenix_clicked_share_twitter',\n          'phoenix_clicked_share_snapchat'\n        ) THEN 1\n        ELSE 0\n      END\n    ) AS clicked_any_share,\n    MAX(\n      CASE\n        WHEN fb.event_name = 'phoenix_clicked_share_facebook' THEN 1\n        ELSE 0\n      END\n    ) AS clicked_share_fb,\n    MAX(\n      CASE\n        WHEN fb.event_name = 'phoenix_clicked_share_email' THEN 1\n        ELSE 0\n      END\n    ) AS clicked_share_email,\n    MAX(\n      CASE\n        WHEN fb.event_name = 'phoenix_clicked_share_facebook_messenger' THEN 1\n        ELSE 0\n      END\n    ) AS clicked_share_fb_msgr,\n    MAX(\n      CASE\n        WHEN fb.event_name = 'phoenix_clicked_share_twitter' THEN 1\n        ELSE 0\n      END\n    ) AS clicked_share_twitter,\n    MAX(\n      CASE\n        WHEN fb.event_name = 'phoenix_clicked_share_snapchat' THEN 1\n        ELSE 0\n      END\n    ) AS clicked_share_snapchat\n  FROM\n    session_base sb\n    JOIN funnel_base fb\n    ON (\n      sb.session_id = fb.session_id\n      AND sb.device_id = fb.device_id\n    ) --Join Drive creations\n    LEFT JOIN creations C\n    ON (\n      sb.northstar_id = C.northstar_id\n      AND C.created_at BETWEEN fb.landing_datetime\n      AND fb.ending_datetime\n    ) --Join reportbacks to determine if they registered via the source we care about\n    LEFT JOIN registrations reg\n    ON (\n      sb.northstar_id = reg.northstar_id\n      AND reg.started_registration_utc BETWEEN fb.landing_datetime\n      AND fb.ending_datetime + INTERVAL '20 minute'\n    )\n    LEFT JOIN starts po\n    ON (\n      sb.northstar_id = po.northstar_id\n      AND po.started_registration_utc BETWEEN fb.landing_datetime\n      AND fb.ending_datetime + INTERVAL '20 minute'\n    )\n  GROUP BY\n    sb.session_id,\n    sb.device_id,\n    sb.northstar_id,\n    C.group_id --Only consider folks who did at least one of the below on the URL of interest\n  HAVING\n    MAX(\n      CASE\n        WHEN fb.event_name IN (\n          'visit',\n          'view',\n          'phoenix_clicked_signup',\n          'phoenix_completed_signup',\n          'phoenix_clicked_voter_registration_action'\n        ) THEN 1\n        ELSE 0\n      END\n    ) = 1\n)\nSELECT\n  f.session_id,\n  f.device_id,\n  f.northstar_id,\n  f.signup_id,\n  f.group_id,\n  gt.name AS group_name,\n  f.num_drives,\n  f.post_id,\n  journey_begin_ts,\n  drive_creation_ts,\n  latest_register_ts,\n  latest_get_started_ts,\n  traffic_source,\n  page_visit,\n  click_join_us,\n  authenticated,\n  completed_signup,\n  click_start_registration,\n  clicked_get_started,\n  rtv_step_2,\n  rtv_step_3,\n  rtv_step_4,\n  rtv_step_3_or_4,\n  registered,\n  click_copy_link,\n  clicked_any_share,\n  clicked_share_fb,\n  clicked_share_email,\n  clicked_share_fb_msgr,\n  clicked_share_twitter,\n  clicked_share_snapchat,\n  rc.referrals_start,\n  rc.referrals_completed\nFROM\n  funnel f\n  LEFT JOIN referral_counts rc\n  ON (\n    f.northstar_id = rc.referrer\n    AND f.group_id :: text = rc.group_id\n    AND f.nth_drive = 1\n  )\n  LEFT JOIN \"quasar_prod_warehouse\".\"public\".\"groups\"\n  g\n  ON (\n    f.group_id = g.id\n  )\n  LEFT JOIN \"quasar_prod_warehouse\".\"public\".\"group_types\"\n  gt\n  ON (\n    g.group_type_id = gt.id\n  )", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "WITH funnel_base AS (\n  --Unique combinations of device_id, session_id, northstar_id\n  SELECT\n    psc.session_id,\n    psc.landing_datetime,\n    psc.ending_datetime,\n    psc.device_id,\n    pec.northstar_id,\n    pec.\"path\",\n    pec.event_name,\n    pec.event_datetime,\n    psc.session_utm_campaign,\n    psc.session_referrer_host\n  FROM\n    \"quasar_prod_warehouse\".\"public\".\"snowplow_raw_events\"\n    pec\n    JOIN \"quasar_prod_warehouse\".\"public\".\"snowplow_sessions\"\n    psc\n    ON (\n      pec.session_id = psc.session_id\n      AND pec.device_id = psc.device_id\n    ) --Filter to URL of interest\n  WHERE\n    pec.\"path\" ILIKE '%online-voter-registration-drives%'\n    AND psc.landing_datetime >= '2020-06-01'\n    AND pec.event_datetime >= '2020-06-01' --Filter to events of interest\n    AND pec.event_name IN (\n      'phoenix_clicked_share_snapchat',\n      'phoenix_clicked_copy_to_clipboard',\n      'phoenix_clicked_share_facebook',\n      'phoenix_clicked_share_email',\n      'phoenix_clicked_share_facebook_messenger',\n      'phoenix_clicked_share_twitter',\n      'phoenix_clicked_signup',\n      'phoenix_completed_signup',\n      'phoenix_clicked_voter_registration_action',\n      'phoenix_opened_modal',\n      'visit',\n      'view'\n    )\n),\nnorthstars AS (\n  --Authenticated Users\n  SELECT\n    device_id,\n    northstar_id,\n    session_id\n  FROM\n    funnel_base\n  WHERE\n    northstar_id IS NOT NULL\n  GROUP BY\n    1,\n    2,\n    3\n),\ndevices AS (\n  --Anonymous Users (removes cases of sessions that started anonymous and got autheticated afterwards)\n  SELECT\n    b.device_id,\n    b.session_id\n  FROM\n    funnel_base b\n    LEFT JOIN northstars n\n    ON (\n      b.session_id = n.session_id\n      AND b.device_id = n.device_id\n    )\n  WHERE\n    n.session_id IS NULL\n  GROUP BY\n    1,\n    2\n),\nsession_base AS (\n  --Authenticated Sessions\n  --Joining with users table to eliminate internal (dosomething.org) northstar_ids\n  SELECT\n    n.session_id,\n    n.device_id,\n    n.northstar_id\n  FROM\n    northstars n\n    JOIN \"quasar_prod_warehouse\".\"public\".\"users\"\n    u\n    ON (\n      n.northstar_id = u.northstar_id\n    )\n  UNION ALL\n    --Anonymous Sessions\n  SELECT\n    d.session_id,\n    d.device_id,\n    NULL\n  FROM\n    devices d\n),\ncreations AS (\n  --Signups represent the creation of the drive\n  SELECT\n    northstar_id,\n    s.id AS signup_id,\n    s.created_at,\n    s.group_id --, s.campaign_id, c.campaign_cause, c.campaign_name, c.campaign_run_start_date\n  FROM\n    \"quasar_prod_warehouse\".\"public\".\"signups\"\n    s\n    JOIN \"quasar_prod_warehouse\".\"public\".\"campaign_info\" C\n    ON (\n      s.campaign_id = C.campaign_id :: text\n    )\n  WHERE\n    s.source_bucket = 'web'\n    AND C.campaign_cause = 'voter-registration'\n    AND C.campaign_name LIKE '%Online%Drives 2020%'\n    AND s.group_id IS NOT NULL\n    AND s.created_at >= '2020-06-01'\n),\nstarts AS (\n  --There seem to be a few cases of multiple posts per northstar\n  SELECT\n    p.northstar_id,\n    p.id AS post_id,\n    p.status,\n    rock.started_registration_utc,\n    rock.tracking_source\n  FROM\n    \"quasar_prod_warehouse\".\"public\".\"posts\"\n    p\n    LEFT JOIN \"quasar_prod_warehouse\".\"public\".\"rock_the_vote\"\n    rock\n    ON (\n      rock.post_id = p.id\n    )\n  WHERE\n    p.vr_source = 'web'\n    AND p.\"type\" = 'voter-reg'\n    AND p.created_at >= '2020-06-01' --Only registrations with these tracking sources represent starting the funnel\n    AND rock.tracking_source LIKE '%OnlineRegistrationDrive_Affirmation%' --don't use any group_id filters because they're not flowing into the data\n    --AND p.group_id is not null\n),\nregistrations AS (\n  --There seem to be a few cases of multiple registrations per northstar (12 northstars -- 11 have 2 registrations and 1 has 3 for a total of 25 registrations)\n  SELECT\n    r.northstar_id,\n    r.post_id,\n    rock.started_registration_utc,\n    rock.tracking_source --row_number() over(partition by r.northstar order by rock.started_registration_utc desc) as nth_registration\n  FROM\n    \"quasar_prod_warehouse\".\"public\".\"reportbacks\"\n    r\n    LEFT JOIN \"quasar_prod_warehouse\".\"public\".\"rock_the_vote\"\n    rock\n    ON (\n      rock.post_id = r.post_id\n    )\n  WHERE\n    r.vr_source = 'web'\n    AND r.post_bucket = 'voter_registrations'\n    AND r.vr_source_details LIKE '%OnlineRegistrationDrive%'\n    AND r.post_created_at >= '2020-06-01' --Only registrations with these tracking sources represent completing the funnel\n    AND rock.tracking_source LIKE '%OnlineRegistrationDrive_Affirmation%' --don't use any group filters because they're not flowing into the data\n),\nreferral_counts AS (\n  --Get referral counts\n  SELECT\n    --Prefer referrer_user_id on post, extract value FROM tracking source for legacy posts\n    COALESCE(\n      p.referrer_user_id,\n      SPLIT_PART(\n        SUBSTRING(\n          tracking_source\n          FROM\n            'user\\:(.+)\\,'\n        ),\n        ',',\n        1\n      )\n    ) AS referrer,\n    --Group ID is not always populated in Post so we extract it FROM RTV\n    SUBSTRING(\n      rtv.tracking_source\n      FROM\n        'group_id=(.+)\\,'\n    ) AS group_id,\n    COUNT(*) AS referrals_start,\n    SUM(\n      CASE\n        WHEN rtv.status = 'Complete' THEN 1\n        ELSE 0\n      END\n    ) AS referrals_completed\n  FROM\n    \"quasar_prod_warehouse\".\"public\".\"posts\"\n    p\n    JOIN \"quasar_prod_warehouse\".\"public\".\"rock_the_vote\"\n    rtv\n    ON (\n      p.id = rtv.post_id\n    )\n  WHERE\n    --Must be referral\n    rtv.tracking_source LIKE '%onlinedrivereferral%group_id%referral=true%' --Exclude nonsense or empty nsid values\n    AND COALESCE(\n      p.referrer_user_id,\n      SPLIT_PART(\n        SUBSTRING(\n          tracking_source\n          FROM\n            'user\\:(.+)\\,'\n        ),\n        ',',\n        1\n      )\n    ) NOT IN (\n      '{userId}',\n      'null',\n      ''\n    )\n    AND p.created_at >= '2020-06-01'\n  GROUP BY\n    1,\n    2\n),\nfunnel AS (\n  SELECT\n    sb.session_id,\n    sb.device_id,\n    sb.northstar_id,\n    C.group_id,\n    --The signup represents the creation of the drive\n    MIN(\n      C.signup_id\n    ) AS signup_id,\n    COUNT(\n      DISTINCT C.signup_id\n    ) AS num_drives,\n    --We rank the signups per group in case there are multiple signups per group (so we only assign referrals to the first signup)\n    ROW_NUMBER() over(\n      PARTITION BY sb.northstar_id,\n      C.group_id\n      ORDER BY\n        MIN(\n          C.signup_id\n        )\n    ) AS nth_drive,\n    --If the referrer does in fact register to vote, this is the corresponding reportback\n    MIN(\n      reg.post_id\n    ) AS post_id,\n    --Earliest recorded page visit\n    MIN(\n      fb.event_datetime\n    ) AS journey_begin_ts,\n    --Earliest campaign signup (drive creation)\n    MIN(\n      C.created_at\n    ) AS drive_creation_ts,\n    --Latest registration timestamp for northstar\n    MAX(\n      reg.started_registration_utc\n    ) AS latest_register_ts,\n    --Latest start RTV process for northstar\n    MAX(\n      po.started_registration_utc\n    ) AS latest_get_started_ts,\n    --Did they visit? Includes other event types to account for missing visits in puck\n    MAX(\n      CASE\n        WHEN fb.session_utm_campaign ILIKE '%niche%' THEN 'niche'\n        WHEN fb.session_utm_campaign ILIKE '%fastweb%' THEN 'fastweb'\n        WHEN fb.session_referrer_host ILIKE '%dosomething%' THEN 'dosomething'\n        ELSE 'other'\n      END\n    ) AS traffic_source,\n    MAX(\n      CASE\n        WHEN fb.event_name IN (\n          'visit',\n          'view',\n          'phoenix_clicked_signup',\n          'phoenix_clicked_voter_registration_action'\n        ) THEN 1\n        ELSE 0\n      END\n    ) AS page_visit,\n    --Funnel flags\n    MAX(\n      CASE\n        WHEN fb.event_name = 'phoenix_clicked_signup' THEN 1\n        ELSE 0\n      END\n    ) AS click_join_us,\n    MAX(\n      CASE\n        WHEN C.signup_id IS NOT NULL THEN 1\n        ELSE 0\n      END\n    ) AS completed_signup,\n    MAX(\n      CASE\n        WHEN fb.northstar_id IS NOT NULL THEN 1\n        ELSE 0\n      END\n    ) AS authenticated,\n    MAX(\n      CASE\n        WHEN fb.event_name = 'phoenix_clicked_voter_registration_action' THEN 1\n        ELSE 0\n      END\n    ) AS click_start_registration,\n    MAX(\n      CASE\n        WHEN po.post_id IS NOT NULL THEN 1\n        ELSE 0\n      END\n    ) AS clicked_get_started,\n    MAX(\n      CASE\n        WHEN po.status IN (\n          'step-2',\n          'step-3',\n          'step-4',\n          'ineligible',\n          'under-18',\n          'register-OVR',\n          'register-form'\n        ) THEN 1\n        ELSE 0\n      END\n    ) AS rtv_step_2,\n    MAX(\n      CASE\n        WHEN po.status IN (\n          'step-3',\n          'ineligible',\n          'under-18',\n          'register-form'\n        ) THEN 1\n        ELSE 0\n      END\n    ) AS rtv_step_3,\n    MAX(\n      CASE\n        WHEN po.status IN (\n          'step-4',\n          'ineligible',\n          'under-18',\n          'register-OVR'\n        ) THEN 1\n        ELSE 0\n      END\n    ) AS rtv_step_4,\n    MAX(\n      CASE\n        WHEN po.status IN (\n          'step-3',\n          'step-4',\n          'ineligible',\n          'under-18',\n          'register-OVR',\n          'register-form'\n        ) THEN 1\n        ELSE 0\n      END\n    ) AS rtv_step_3_or_4,\n    MAX(\n      CASE\n        WHEN reg.northstar_id IS NOT NULL THEN 1\n        ELSE 0\n      END\n    ) AS registered,\n    MAX(\n      CASE\n        WHEN fb.event_name = 'phoenix_clicked_copy_to_clipboard' THEN 1\n        ELSE 0\n      END\n    ) AS click_copy_link,\n    MAX(\n      CASE\n        WHEN fb.event_name IN (\n          'phoenix_clicked_share_action_facebook',\n          'phoenix_clicked_share_email',\n          'phoenix_clicked_share_facebook_messenger',\n          'phoenix_clicked_share_twitter',\n          'phoenix_clicked_share_snapchat'\n        ) THEN 1\n        ELSE 0\n      END\n    ) AS clicked_any_share,\n    MAX(\n      CASE\n        WHEN fb.event_name = 'phoenix_clicked_share_facebook' THEN 1\n        ELSE 0\n      END\n    ) AS clicked_share_fb,\n    MAX(\n      CASE\n        WHEN fb.event_name = 'phoenix_clicked_share_email' THEN 1\n        ELSE 0\n      END\n    ) AS clicked_share_email,\n    MAX(\n      CASE\n        WHEN fb.event_name = 'phoenix_clicked_share_facebook_messenger' THEN 1\n        ELSE 0\n      END\n    ) AS clicked_share_fb_msgr,\n    MAX(\n      CASE\n        WHEN fb.event_name = 'phoenix_clicked_share_twitter' THEN 1\n        ELSE 0\n      END\n    ) AS clicked_share_twitter,\n    MAX(\n      CASE\n        WHEN fb.event_name = 'phoenix_clicked_share_snapchat' THEN 1\n        ELSE 0\n      END\n    ) AS clicked_share_snapchat\n  FROM\n    session_base sb\n    JOIN funnel_base fb\n    ON (\n      sb.session_id = fb.session_id\n      AND sb.device_id = fb.device_id\n    ) --Join Drive creations\n    LEFT JOIN creations C\n    ON (\n      sb.northstar_id = C.northstar_id\n      AND C.created_at BETWEEN fb.landing_datetime\n      AND fb.ending_datetime\n    ) --Join reportbacks to determine if they registered via the source we care about\n    LEFT JOIN registrations reg\n    ON (\n      sb.northstar_id = reg.northstar_id\n      AND reg.started_registration_utc BETWEEN fb.landing_datetime\n      AND fb.ending_datetime + INTERVAL '20 minute'\n    )\n    LEFT JOIN starts po\n    ON (\n      sb.northstar_id = po.northstar_id\n      AND po.started_registration_utc BETWEEN fb.landing_datetime\n      AND fb.ending_datetime + INTERVAL '20 minute'\n    )\n  GROUP BY\n    sb.session_id,\n    sb.device_id,\n    sb.northstar_id,\n    C.group_id --Only consider folks who did at least one of the below on the URL of interest\n  HAVING\n    MAX(\n      CASE\n        WHEN fb.event_name IN (\n          'visit',\n          'view',\n          'phoenix_clicked_signup',\n          'phoenix_completed_signup',\n          'phoenix_clicked_voter_registration_action'\n        ) THEN 1\n        ELSE 0\n      END\n    ) = 1\n)\nSELECT\n  f.session_id,\n  f.device_id,\n  f.northstar_id,\n  f.signup_id,\n  f.group_id,\n  gt.name AS group_name,\n  f.num_drives,\n  f.post_id,\n  journey_begin_ts,\n  drive_creation_ts,\n  latest_register_ts,\n  latest_get_started_ts,\n  traffic_source,\n  page_visit,\n  click_join_us,\n  authenticated,\n  completed_signup,\n  click_start_registration,\n  clicked_get_started,\n  rtv_step_2,\n  rtv_step_3,\n  rtv_step_4,\n  rtv_step_3_or_4,\n  registered,\n  click_copy_link,\n  clicked_any_share,\n  clicked_share_fb,\n  clicked_share_email,\n  clicked_share_fb_msgr,\n  clicked_share_twitter,\n  clicked_share_snapchat,\n  rc.referrals_start,\n  rc.referrals_completed\nFROM\n  funnel f\n  LEFT JOIN referral_counts rc\n  ON (\n    f.northstar_id = rc.referrer\n    AND f.group_id :: text = rc.group_id\n    AND f.nth_drive = 1\n  )\n  LEFT JOIN \"quasar_prod_warehouse\".\"public\".\"groups\"\n  g\n  ON (\n    f.group_id = g.id\n  )\n  LEFT JOIN \"quasar_prod_warehouse\".\"public\".\"group_types\"\n  gt\n  ON (\n    g.group_type_id = gt.id\n  )"}, "error": null, "status": null, "execution_time": 0.04099559783935547, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-02-23T21:28:56.134242Z", "completed_at": "2021-02-23T21:28:56.174140Z"}, {"name": "execute", "started_at": "2021-02-23T21:28:56.174416Z", "completed_at": "2021-02-23T21:28:56.174424Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "WITH funnel_base AS (\n  SELECT\n    pec.session_id,\n    pec.device_id,\n    pec.northstar_id,\n    pec.event_name,\n    pec.event_datetime,\n    SUBSTRING(\n      pec.query_parameters\n      FROM\n        'group_id=([0-9]+)'\n    ) AS group_id\n  FROM\n    {{ ref('snowplow_raw_events') }}\n    pec\n    JOIN {{ ref('snowplow_sessions') }}\n    psc\n    ON (\n      pec.session_id = psc.session_id\n    ) --filter the url of interest\n  WHERE\n    pec.\"path\" ILIKE '%my-voter-registration-drive%'\n    AND pec.event_datetime >= '2020-08-01'\n),\nnorthstars AS (\n  --Authenticated Users\n  SELECT\n    device_id,\n    session_id,\n    northstar_id,\n    group_id\n  FROM\n    funnel_base\n  WHERE\n    northstar_id IS NOT NULL\n    AND group_id IS NOT NULL GROUP BY 1,\n    2,\n    3,\n    4\n),\ndevices AS (\n  --Anonymous Users (removes cases of sessions that started anonymous AND got autheticated afterwards)\n  SELECT\n    b.device_id,\n    b.session_id,\n    b.group_id\n  FROM\n    funnel_base b\n    LEFT JOIN northstars n\n    ON (\n      b.session_id = n.session_id\n      AND b.device_id = n.device_id\n    )\n  WHERE\n    n.session_id IS NULL\n    AND b.group_id IS NOT NULL GROUP BY 1,\n    2,\n    3\n),\nsession_base AS (\n  --Authenticated Sessions\n  --Joining with users table to eliminate internal (dosomething.org) northstar_ids\n  SELECT\n    f.device_id,\n    f.session_id,\n    f.northstar_id,\n    f.group_id\n  FROM\n    funnel_base f\n    JOIN northstars n\n    ON (\n      f.session_id = n.session_id\n    )\n    JOIN PUBLIC.users u\n    ON (\n      f.northstar_id = u.northstar_id\n    )\n  UNION ALL\n    --Anonymous Sessions\n  SELECT\n    f.device_id,\n    f.session_id,\n    NULL,\n    f.group_id\n  FROM\n    funnel_base f\n    JOIN devices d\n    ON (\n      f.device_id = d.device_id\n      AND f.session_id = d.session_id\n    )\n),\npost_base AS (\n  --uniON rtv process starts who came FROM a referral per their tracking source\n  SELECT\n    p.northstar_id,\n    rtv.started_registration_utc AS event_ts,\n    p.status AS event_name,\n    SUBSTRING(\n      rtv.tracking_source\n      FROM\n        'group_id=([0-9]+)'\n    ) AS group_id,\n    r.post_id,\n    CASE\n      WHEN r.post_id IS NOT NULL THEN 1\n    END AS registered\n  FROM\n    {{ ref('posts') }}\n    p\n    JOIN {{ ref('rock_the_vote') }}\n    rtv\n    ON p.id = rtv.post_id\n    LEFT JOIN {{ ref('reportbacks') }}\n    r\n    ON p.id = r.post_id\n  WHERE\n    p.vr_source_details LIKE '%onlinedrivereferral%'\n    AND rtv.tracking_source LIKE '%onlinedrivereferral%group_id%referral=true%'\n    AND p.created_at >= '2020-06-01'\n),\n--collapse the event log to a user level table with flags AND timestamps\nfunnel AS (\n  SELECT\n    sb.session_id,\n    sb.device_id,\n    COALESCE(\n      sb.northstar_id,\n      pb.northstar_id\n    ) AS northstar_id,\n    COALESCE(\n      sb.group_id,\n      pb.group_id\n    ) AS group_id,\n    pb.post_id,\n    --earliest ts ON record is when their journey began\n    MIN(COALESCE(fb.event_datetime, pb.event_ts)) AS journey_begin_ts,\n    --you must have visited the page if you are in the event log (allows us to 'backfill' some of the missing info\n    1 AS page_visit,\n    --earliest rtv record for the user is when they began registering\n    MIN(\n      pb.event_ts\n    ) AS started_register_ts,\n    --if they have a any event THEN they clicked get started\n    MAX(\n      CASE\n        WHEN pb.event_name IS NOT NULL THEN 1\n        ELSE 0\n      END\n    ) AS clicked_get_started,\n    --if they have any of the following steps, they made it to step 2\n    MAX(\n      CASE\n        WHEN pb.event_name IN (\n          'step-2',\n          'step-3',\n          'step-4',\n          'ineligible',\n          'under-18',\n          'register-OVR',\n          'register-form'\n        ) THEN 1\n        ELSE 0\n      END\n    ) AS rtv_step_2,\n    --if they have any of the following steps, they made it to step 3\n    MAX(\n      CASE\n        WHEN pb.event_name IN (\n          'step-3',\n          'ineligible',\n          'under-18',\n          'register-form'\n        ) THEN 1\n        ELSE 0\n      END\n    ) AS rtv_step_3,\n    --if they have any of the following steps, they made it to step 4\n    MAX(\n      CASE\n        WHEN pb.event_name IN (\n          'step-4',\n          'ineligible',\n          'under-18',\n          'register-ovr'\n        ) THEN 1\n        ELSE 0\n      END\n    ) AS rtv_step_4,\n    --if they have any of the following steps, they made it to step 3 or 4\n    MAX(\n      CASE\n        WHEN pb.event_name IN (\n          'step-3',\n          'step-4',\n          'ineligible',\n          'under-18',\n          'register-OVR',\n          'register-form'\n        ) THEN 1\n        ELSE 0\n      END\n    ) AS rtv_step_3_or_4,\n    --if they have a registratiON event THEN they registered\n    MAX(COALESCE(pb.registered, 0)) AS registered\n  FROM\n    session_base sb\n    JOIN funnel_base fb\n    ON (\n      sb.device_id = fb.device_id\n      AND sb.session_id = fb.session_id\n    ) FULL\n    OUTER JOIN post_base pb\n    ON (\n      sb.northstar_id = pb.northstar_id\n      AND pb.event_ts > fb.event_datetime\n    )\n  GROUP BY\n    sb.session_id,\n    sb.device_id,\n    COALESCE(\n      sb.northstar_id,\n      pb.northstar_id\n    ),\n    COALESCE(\n      sb.group_id,\n      pb.group_id\n    ),\n    pb.post_id\n)\nSELECT\n  session_id,\n  northstar_id,\n  device_id,\n  group_id,\n  gt.name AS group_name,\n  post_id,\n  journey_begin_ts,\n  page_visit,\n  started_register_ts,\n  clicked_get_started,\n  rtv_step_2,\n  rtv_step_3,\n  rtv_step_4,\n  rtv_step_3_or_4,\n  registered\nFROM\n  funnel f\n  LEFT JOIN {{ ref('groups') }}\n  g\n  ON (\n    f.group_id = g.id :: text\n  )\n  LEFT JOIN {{ ref('group_types') }}\n  gt\n  ON (\n    g.group_type_id = gt.id\n  )", "compiled": true, "database": "quasar_prod_warehouse", "schema": "public", "fqn": ["ds_dbt", "voter_reg", "ovrd_group_recipient_funnel"], "unique_id": "model.ds_dbt.ovrd_group_recipient_funnel", "package_name": "ds_dbt", "root_path": "/home/runner/work/quasar/quasar/quasar/dbt", "path": "voter_reg/ovrd_group_recipient_funnel.sql", "original_file_path": "models/voter_reg/ovrd_group_recipient_funnel.sql", "name": "ovrd_group_recipient_funnel", "resource_type": "model", "alias": "ovrd_group_recipient_funnel", "checksum": {"name": "sha256", "checksum": "ddf457a6971ec575ff7798cf665e37e1f06605da64bb80b6cb8fa62a9d08342d"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [{"sql": "CREATE INDEX {{ get_index_name(this, 'northstar_id') }}(northstar_id)", "transaction": true, "index": null}, {"sql": "{{ grant_select_to(this, ['dsanalyst', 'looker']) }}", "transaction": true, "index": null}], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": "ovrd_group_recipient_funnel", "schema": null, "database": null, "tags": ["voter_reg"], "full_refresh": null}, "tags": ["voter_reg"], "refs": [["snowplow_raw_events"], ["snowplow_sessions"], ["posts"], ["rock_the_vote"], ["reportbacks"], ["groups"], ["group_types"]], "sources": [], "depends_on": {"macros": ["macro.ds_dbt.get_index_name", "macro.ds_dbt.grant_select_to"], "nodes": ["model.ds_dbt.snowplow_raw_events", "model.ds_dbt.snowplow_sessions", "model.ds_dbt.posts", "model.ds_dbt.rock_the_vote", "model.ds_dbt.reportbacks", "model.ds_dbt.groups", "model.ds_dbt.group_types"]}, "description": "Needs a description", "columns": {"northstar_id": {"name": "northstar_id", "description": "The Northstar ID of the user who generated the event.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "journey_begin_ts": {"name": "journey_begin_ts", "description": "The first time the user landed on this URL", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicked_link": {"name": "clicked_link", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicked_get_started": {"name": "clicked_get_started", "description": "Did the user start the registration process on Instapage.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "completed_registration": {"name": "completed_registration", "description": "Did the user complete their registration?", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/voter_reg/schema.yml", "build_path": "../../docs/compiled/ds_dbt/models/voter_reg/ovrd_group_recipient_funnel.sql", "deferred": false, "compiled_sql": "WITH funnel_base AS (\n  SELECT\n    pec.session_id,\n    pec.device_id,\n    pec.northstar_id,\n    pec.event_name,\n    pec.event_datetime,\n    SUBSTRING(\n      pec.query_parameters\n      FROM\n        'group_id=([0-9]+)'\n    ) AS group_id\n  FROM\n    \"quasar_prod_warehouse\".\"public\".\"snowplow_raw_events\"\n    pec\n    JOIN \"quasar_prod_warehouse\".\"public\".\"snowplow_sessions\"\n    psc\n    ON (\n      pec.session_id = psc.session_id\n    ) --filter the url of interest\n  WHERE\n    pec.\"path\" ILIKE '%my-voter-registration-drive%'\n    AND pec.event_datetime >= '2020-08-01'\n),\nnorthstars AS (\n  --Authenticated Users\n  SELECT\n    device_id,\n    session_id,\n    northstar_id,\n    group_id\n  FROM\n    funnel_base\n  WHERE\n    northstar_id IS NOT NULL\n    AND group_id IS NOT NULL GROUP BY 1,\n    2,\n    3,\n    4\n),\ndevices AS (\n  --Anonymous Users (removes cases of sessions that started anonymous AND got autheticated afterwards)\n  SELECT\n    b.device_id,\n    b.session_id,\n    b.group_id\n  FROM\n    funnel_base b\n    LEFT JOIN northstars n\n    ON (\n      b.session_id = n.session_id\n      AND b.device_id = n.device_id\n    )\n  WHERE\n    n.session_id IS NULL\n    AND b.group_id IS NOT NULL GROUP BY 1,\n    2,\n    3\n),\nsession_base AS (\n  --Authenticated Sessions\n  --Joining with users table to eliminate internal (dosomething.org) northstar_ids\n  SELECT\n    f.device_id,\n    f.session_id,\n    f.northstar_id,\n    f.group_id\n  FROM\n    funnel_base f\n    JOIN northstars n\n    ON (\n      f.session_id = n.session_id\n    )\n    JOIN PUBLIC.users u\n    ON (\n      f.northstar_id = u.northstar_id\n    )\n  UNION ALL\n    --Anonymous Sessions\n  SELECT\n    f.device_id,\n    f.session_id,\n    NULL,\n    f.group_id\n  FROM\n    funnel_base f\n    JOIN devices d\n    ON (\n      f.device_id = d.device_id\n      AND f.session_id = d.session_id\n    )\n),\npost_base AS (\n  --uniON rtv process starts who came FROM a referral per their tracking source\n  SELECT\n    p.northstar_id,\n    rtv.started_registration_utc AS event_ts,\n    p.status AS event_name,\n    SUBSTRING(\n      rtv.tracking_source\n      FROM\n        'group_id=([0-9]+)'\n    ) AS group_id,\n    r.post_id,\n    CASE\n      WHEN r.post_id IS NOT NULL THEN 1\n    END AS registered\n  FROM\n    \"quasar_prod_warehouse\".\"public\".\"posts\"\n    p\n    JOIN \"quasar_prod_warehouse\".\"public\".\"rock_the_vote\"\n    rtv\n    ON p.id = rtv.post_id\n    LEFT JOIN \"quasar_prod_warehouse\".\"public\".\"reportbacks\"\n    r\n    ON p.id = r.post_id\n  WHERE\n    p.vr_source_details LIKE '%onlinedrivereferral%'\n    AND rtv.tracking_source LIKE '%onlinedrivereferral%group_id%referral=true%'\n    AND p.created_at >= '2020-06-01'\n),\n--collapse the event log to a user level table with flags AND timestamps\nfunnel AS (\n  SELECT\n    sb.session_id,\n    sb.device_id,\n    COALESCE(\n      sb.northstar_id,\n      pb.northstar_id\n    ) AS northstar_id,\n    COALESCE(\n      sb.group_id,\n      pb.group_id\n    ) AS group_id,\n    pb.post_id,\n    --earliest ts ON record is when their journey began\n    MIN(COALESCE(fb.event_datetime, pb.event_ts)) AS journey_begin_ts,\n    --you must have visited the page if you are in the event log (allows us to 'backfill' some of the missing info\n    1 AS page_visit,\n    --earliest rtv record for the user is when they began registering\n    MIN(\n      pb.event_ts\n    ) AS started_register_ts,\n    --if they have a any event THEN they clicked get started\n    MAX(\n      CASE\n        WHEN pb.event_name IS NOT NULL THEN 1\n        ELSE 0\n      END\n    ) AS clicked_get_started,\n    --if they have any of the following steps, they made it to step 2\n    MAX(\n      CASE\n        WHEN pb.event_name IN (\n          'step-2',\n          'step-3',\n          'step-4',\n          'ineligible',\n          'under-18',\n          'register-OVR',\n          'register-form'\n        ) THEN 1\n        ELSE 0\n      END\n    ) AS rtv_step_2,\n    --if they have any of the following steps, they made it to step 3\n    MAX(\n      CASE\n        WHEN pb.event_name IN (\n          'step-3',\n          'ineligible',\n          'under-18',\n          'register-form'\n        ) THEN 1\n        ELSE 0\n      END\n    ) AS rtv_step_3,\n    --if they have any of the following steps, they made it to step 4\n    MAX(\n      CASE\n        WHEN pb.event_name IN (\n          'step-4',\n          'ineligible',\n          'under-18',\n          'register-ovr'\n        ) THEN 1\n        ELSE 0\n      END\n    ) AS rtv_step_4,\n    --if they have any of the following steps, they made it to step 3 or 4\n    MAX(\n      CASE\n        WHEN pb.event_name IN (\n          'step-3',\n          'step-4',\n          'ineligible',\n          'under-18',\n          'register-OVR',\n          'register-form'\n        ) THEN 1\n        ELSE 0\n      END\n    ) AS rtv_step_3_or_4,\n    --if they have a registratiON event THEN they registered\n    MAX(COALESCE(pb.registered, 0)) AS registered\n  FROM\n    session_base sb\n    JOIN funnel_base fb\n    ON (\n      sb.device_id = fb.device_id\n      AND sb.session_id = fb.session_id\n    ) FULL\n    OUTER JOIN post_base pb\n    ON (\n      sb.northstar_id = pb.northstar_id\n      AND pb.event_ts > fb.event_datetime\n    )\n  GROUP BY\n    sb.session_id,\n    sb.device_id,\n    COALESCE(\n      sb.northstar_id,\n      pb.northstar_id\n    ),\n    COALESCE(\n      sb.group_id,\n      pb.group_id\n    ),\n    pb.post_id\n)\nSELECT\n  session_id,\n  northstar_id,\n  device_id,\n  group_id,\n  gt.name AS group_name,\n  post_id,\n  journey_begin_ts,\n  page_visit,\n  started_register_ts,\n  clicked_get_started,\n  rtv_step_2,\n  rtv_step_3,\n  rtv_step_4,\n  rtv_step_3_or_4,\n  registered\nFROM\n  funnel f\n  LEFT JOIN \"quasar_prod_warehouse\".\"public\".\"groups\"\n  g\n  ON (\n    f.group_id = g.id :: text\n  )\n  LEFT JOIN \"quasar_prod_warehouse\".\"public\".\"group_types\"\n  gt\n  ON (\n    g.group_type_id = gt.id\n  )", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "WITH funnel_base AS (\n  SELECT\n    pec.session_id,\n    pec.device_id,\n    pec.northstar_id,\n    pec.event_name,\n    pec.event_datetime,\n    SUBSTRING(\n      pec.query_parameters\n      FROM\n        'group_id=([0-9]+)'\n    ) AS group_id\n  FROM\n    \"quasar_prod_warehouse\".\"public\".\"snowplow_raw_events\"\n    pec\n    JOIN \"quasar_prod_warehouse\".\"public\".\"snowplow_sessions\"\n    psc\n    ON (\n      pec.session_id = psc.session_id\n    ) --filter the url of interest\n  WHERE\n    pec.\"path\" ILIKE '%my-voter-registration-drive%'\n    AND pec.event_datetime >= '2020-08-01'\n),\nnorthstars AS (\n  --Authenticated Users\n  SELECT\n    device_id,\n    session_id,\n    northstar_id,\n    group_id\n  FROM\n    funnel_base\n  WHERE\n    northstar_id IS NOT NULL\n    AND group_id IS NOT NULL GROUP BY 1,\n    2,\n    3,\n    4\n),\ndevices AS (\n  --Anonymous Users (removes cases of sessions that started anonymous AND got autheticated afterwards)\n  SELECT\n    b.device_id,\n    b.session_id,\n    b.group_id\n  FROM\n    funnel_base b\n    LEFT JOIN northstars n\n    ON (\n      b.session_id = n.session_id\n      AND b.device_id = n.device_id\n    )\n  WHERE\n    n.session_id IS NULL\n    AND b.group_id IS NOT NULL GROUP BY 1,\n    2,\n    3\n),\nsession_base AS (\n  --Authenticated Sessions\n  --Joining with users table to eliminate internal (dosomething.org) northstar_ids\n  SELECT\n    f.device_id,\n    f.session_id,\n    f.northstar_id,\n    f.group_id\n  FROM\n    funnel_base f\n    JOIN northstars n\n    ON (\n      f.session_id = n.session_id\n    )\n    JOIN PUBLIC.users u\n    ON (\n      f.northstar_id = u.northstar_id\n    )\n  UNION ALL\n    --Anonymous Sessions\n  SELECT\n    f.device_id,\n    f.session_id,\n    NULL,\n    f.group_id\n  FROM\n    funnel_base f\n    JOIN devices d\n    ON (\n      f.device_id = d.device_id\n      AND f.session_id = d.session_id\n    )\n),\npost_base AS (\n  --uniON rtv process starts who came FROM a referral per their tracking source\n  SELECT\n    p.northstar_id,\n    rtv.started_registration_utc AS event_ts,\n    p.status AS event_name,\n    SUBSTRING(\n      rtv.tracking_source\n      FROM\n        'group_id=([0-9]+)'\n    ) AS group_id,\n    r.post_id,\n    CASE\n      WHEN r.post_id IS NOT NULL THEN 1\n    END AS registered\n  FROM\n    \"quasar_prod_warehouse\".\"public\".\"posts\"\n    p\n    JOIN \"quasar_prod_warehouse\".\"public\".\"rock_the_vote\"\n    rtv\n    ON p.id = rtv.post_id\n    LEFT JOIN \"quasar_prod_warehouse\".\"public\".\"reportbacks\"\n    r\n    ON p.id = r.post_id\n  WHERE\n    p.vr_source_details LIKE '%onlinedrivereferral%'\n    AND rtv.tracking_source LIKE '%onlinedrivereferral%group_id%referral=true%'\n    AND p.created_at >= '2020-06-01'\n),\n--collapse the event log to a user level table with flags AND timestamps\nfunnel AS (\n  SELECT\n    sb.session_id,\n    sb.device_id,\n    COALESCE(\n      sb.northstar_id,\n      pb.northstar_id\n    ) AS northstar_id,\n    COALESCE(\n      sb.group_id,\n      pb.group_id\n    ) AS group_id,\n    pb.post_id,\n    --earliest ts ON record is when their journey began\n    MIN(COALESCE(fb.event_datetime, pb.event_ts)) AS journey_begin_ts,\n    --you must have visited the page if you are in the event log (allows us to 'backfill' some of the missing info\n    1 AS page_visit,\n    --earliest rtv record for the user is when they began registering\n    MIN(\n      pb.event_ts\n    ) AS started_register_ts,\n    --if they have a any event THEN they clicked get started\n    MAX(\n      CASE\n        WHEN pb.event_name IS NOT NULL THEN 1\n        ELSE 0\n      END\n    ) AS clicked_get_started,\n    --if they have any of the following steps, they made it to step 2\n    MAX(\n      CASE\n        WHEN pb.event_name IN (\n          'step-2',\n          'step-3',\n          'step-4',\n          'ineligible',\n          'under-18',\n          'register-OVR',\n          'register-form'\n        ) THEN 1\n        ELSE 0\n      END\n    ) AS rtv_step_2,\n    --if they have any of the following steps, they made it to step 3\n    MAX(\n      CASE\n        WHEN pb.event_name IN (\n          'step-3',\n          'ineligible',\n          'under-18',\n          'register-form'\n        ) THEN 1\n        ELSE 0\n      END\n    ) AS rtv_step_3,\n    --if they have any of the following steps, they made it to step 4\n    MAX(\n      CASE\n        WHEN pb.event_name IN (\n          'step-4',\n          'ineligible',\n          'under-18',\n          'register-ovr'\n        ) THEN 1\n        ELSE 0\n      END\n    ) AS rtv_step_4,\n    --if they have any of the following steps, they made it to step 3 or 4\n    MAX(\n      CASE\n        WHEN pb.event_name IN (\n          'step-3',\n          'step-4',\n          'ineligible',\n          'under-18',\n          'register-OVR',\n          'register-form'\n        ) THEN 1\n        ELSE 0\n      END\n    ) AS rtv_step_3_or_4,\n    --if they have a registratiON event THEN they registered\n    MAX(COALESCE(pb.registered, 0)) AS registered\n  FROM\n    session_base sb\n    JOIN funnel_base fb\n    ON (\n      sb.device_id = fb.device_id\n      AND sb.session_id = fb.session_id\n    ) FULL\n    OUTER JOIN post_base pb\n    ON (\n      sb.northstar_id = pb.northstar_id\n      AND pb.event_ts > fb.event_datetime\n    )\n  GROUP BY\n    sb.session_id,\n    sb.device_id,\n    COALESCE(\n      sb.northstar_id,\n      pb.northstar_id\n    ),\n    COALESCE(\n      sb.group_id,\n      pb.group_id\n    ),\n    pb.post_id\n)\nSELECT\n  session_id,\n  northstar_id,\n  device_id,\n  group_id,\n  gt.name AS group_name,\n  post_id,\n  journey_begin_ts,\n  page_visit,\n  started_register_ts,\n  clicked_get_started,\n  rtv_step_2,\n  rtv_step_3,\n  rtv_step_4,\n  rtv_step_3_or_4,\n  registered\nFROM\n  funnel f\n  LEFT JOIN \"quasar_prod_warehouse\".\"public\".\"groups\"\n  g\n  ON (\n    f.group_id = g.id :: text\n  )\n  LEFT JOIN \"quasar_prod_warehouse\".\"public\".\"group_types\"\n  gt\n  ON (\n    g.group_type_id = gt.id\n  )"}, "error": null, "status": null, "execution_time": 0.023867130279541016, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-02-23T21:28:56.175832Z", "completed_at": "2021-02-23T21:28:56.198541Z"}, {"name": "execute", "started_at": "2021-02-23T21:28:56.198855Z", "completed_at": "2021-02-23T21:28:56.198861Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "WITH funnel_base AS (\n  SELECT\n    pec.session_id,\n    pec.device_id,\n    pec.northstar_id,\n    pec.event_name,\n    pec.event_datetime\n  FROM\n    {{ ref('snowplow_raw_events') }}\n    pec\n    JOIN {{ ref('snowplow_sessions') }}\n    psc\n    ON (\n      pec.session_id = psc.session_id\n    ) --filter the url of interest\n  WHERE\n    pec.\"path\" ILIKE '%my-voter-registration-drive%'\n    AND pec.query_parameters NOT ILIKE '%group_id=%'\n    AND pec.event_datetime >= '2020-03-01'\n),\nnorthstars AS (\n  --Authenticated Users\n  SELECT\n    device_id,\n    session_id,\n    northstar_id\n  FROM\n    funnel_base\n  WHERE\n    northstar_id IS NOT NULL\n  GROUP BY\n    1,\n    2,\n    3\n),\ndevices AS (\n  --Anonymous Users (removes cases of sessions that started anonymous AND got autheticated afterwards)\n  SELECT\n    b.device_id,\n    b.session_id\n  FROM\n    funnel_base b\n    LEFT JOIN northstars n\n    ON (\n      b.session_id = n.session_id\n      AND b.device_id = n.device_id\n    )\n  WHERE\n    n.session_id IS NULL\n  GROUP BY\n    1,\n    2\n),\nsession_base AS (\n  --Authenticated Sessions\n  --Joining WITH users table to eliminate internal (dosomething.org) northstar_ids\n  SELECT\n    f.device_id,\n    f.session_id,\n    f.northstar_id\n  FROM\n    funnel_base f\n    JOIN northstars n\n    ON (\n      f.session_id = n.session_id\n    )\n    JOIN {{ ref('users') }}\n    u\n    ON (\n      f.northstar_id = u.northstar_id\n    )\n  UNION ALL\n    --Anonymous Sessions\n  SELECT\n    f.device_id,\n    f.session_id,\n    NULL\n  FROM\n    funnel_base f\n    JOIN devices d\n    ON (\n      f.device_id = d.device_id\n      AND f.session_id = d.session_id\n    )\n),\npost_base AS (\n  --posts AND rbs WITH who came FROM a group-based referral per their rtv tracking source\n  SELECT\n    p.northstar_id,\n    p.id,\n    r.post_id,\n    rtv.started_registration_utc AS event_ts,\n    p.status AS event_name,\n    CASE\n      WHEN r.post_id IS NOT NULL THEN 1\n    END AS registered\n  FROM\n    {{ ref('posts') }}\n    p\n    JOIN {{ ref('rock_the_vote') }}\n    rtv\n    ON p.id = rtv.post_id\n    LEFT JOIN {{ ref('reportbacks') }}\n    r\n    ON p.id = r.post_id\n  WHERE\n    p.vr_source_details LIKE '%onlinedrivereferral%'\n    AND rtv.tracking_source LIKE '%referral=true%'\n    AND rtv.tracking_source NOT LIKE '%group_id=%'\n    AND p.created_at >= '2020-03-01'\n    AND rtv.started_registration_utc >= '2020-03-01'\n) --collapse the event log to a user level table WITH flags AND timestamps\nSELECT\n  sb.session_id,\n  sb.device_id,\n  COALESCE(COALESCE(sb.northstar_id, pb.northstar_id)) AS northstar_id,\n  pb.post_id,\n  --earliest ts ON record is WHEN their journey began\n  MIN(COALESCE(fb.event_datetime, pb.event_ts)) AS journey_begin_ts,\n  --you must have visited the page if you are IN the event log (allows us to 'backfill' some of the missing info\n  1 AS page_visit,\n  --earliest rtv record for the user is WHEN they began registering\n  MIN(\n    CASE\n      WHEN pb.event_name IS NOT NULL THEN COALESCE(\n        fb.event_datetime,\n        pb.event_ts\n      )\n    END\n  ) AS started_register_ts,\n  --if they have a any event THEN they clicked get started\n  MAX(\n    CASE\n      WHEN pb.event_name IS NOT NULL THEN 1\n      ELSE 0\n    END\n  ) AS clicked_get_started,\n  --if they have any of the following steps, they made it to step 2\n  MAX(\n    CASE\n      WHEN pb.event_name IN (\n        'step-2',\n        'step-3',\n        'step-4',\n        'ineligible',\n        'under-18',\n        'register-OVR',\n        'register-form'\n      ) THEN 1\n      ELSE 0\n    END\n  ) AS rtv_step_2,\n  --if they have any of the following steps, they made it to step 3\n  MAX(\n    CASE\n      WHEN pb.event_name IN (\n        'step-3',\n        'ineligible',\n        'under-18',\n        'register-form'\n      ) THEN 1\n      ELSE 0\n    END\n  ) AS rtv_step_3,\n  --if they have any of the following steps, they made it to step 4\n  MAX(\n    CASE\n      WHEN pb.event_name IN (\n        'step-4',\n        'ineligible',\n        'under-18',\n        'register-ovr'\n      ) THEN 1\n      ELSE 0\n    END\n  ) AS rtv_step_4,\n  --if they have any of the following steps, they made it to step 3 or 4\n  MAX(\n    CASE\n      WHEN pb.event_name IN (\n        'step-3',\n        'step-4',\n        'ineligible',\n        'under-18',\n        'register-OVR',\n        'register-form'\n      ) THEN 1\n      ELSE 0\n    END\n  ) AS rtv_step_3_or_4,\n  --if they have a registration event THEN they registered\n  MAX(COALESCE(pb.registered, 0)) AS registered\nFROM\n  session_base sb\n  JOIN funnel_base fb\n  ON (\n    sb.device_id = fb.device_id\n    AND sb.session_id = fb.session_id\n  ) FULL\n  OUTER JOIN post_base pb\n  ON (\n    sb.northstar_id = pb.northstar_id\n    AND pb.event_ts > fb.event_datetime\n  )\nGROUP BY\n  sb.session_id,\n  sb.device_id,\n  COALESCE(COALESCE(sb.northstar_id, pb.northstar_id)),\n  pb.post_id", "compiled": true, "database": "quasar_prod_warehouse", "schema": "public", "fqn": ["ds_dbt", "voter_reg", "ovrd_recipient_funnel"], "unique_id": "model.ds_dbt.ovrd_recipient_funnel", "package_name": "ds_dbt", "root_path": "/home/runner/work/quasar/quasar/quasar/dbt", "path": "voter_reg/ovrd_recipient_funnel.sql", "original_file_path": "models/voter_reg/ovrd_recipient_funnel.sql", "name": "ovrd_recipient_funnel", "resource_type": "model", "alias": "ovrd_recipient_funnel", "checksum": {"name": "sha256", "checksum": "b00a1187ccd9144f87bf77b809bf436183a168bb5d952a280f9259d76294279a"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [{"sql": "CREATE INDEX {{ get_index_name(this, 'northstar_id') }}(northstar_id)", "transaction": true, "index": null}, {"sql": "{{ grant_select_to(this, ['dsanalyst', 'looker']) }}", "transaction": true, "index": null}], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": "ovrd_recipient_funnel", "schema": null, "database": null, "tags": ["voter_reg"], "full_refresh": null}, "tags": ["voter_reg"], "refs": [["snowplow_raw_events"], ["snowplow_sessions"], ["users"], ["posts"], ["rock_the_vote"], ["reportbacks"]], "sources": [], "depends_on": {"macros": ["macro.ds_dbt.get_index_name", "macro.ds_dbt.grant_select_to"], "nodes": ["model.ds_dbt.snowplow_raw_events", "model.ds_dbt.snowplow_sessions", "model.ds_dbt.users", "model.ds_dbt.posts", "model.ds_dbt.rock_the_vote", "model.ds_dbt.reportbacks"]}, "description": "Needs a description", "columns": {"northstar_id": {"name": "northstar_id", "description": "The Northstar ID of the user who generated the event.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "journey_begin_ts": {"name": "journey_begin_ts", "description": "The first time the user landed on this URL", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicked_link": {"name": "clicked_link", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicked_get_started": {"name": "clicked_get_started", "description": "Did the user start the registration process on Instapage.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "completed_registration": {"name": "completed_registration", "description": "Did the user complete their registration?", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/voter_reg/schema.yml", "build_path": "../../docs/compiled/ds_dbt/models/voter_reg/ovrd_recipient_funnel.sql", "deferred": false, "compiled_sql": "WITH funnel_base AS (\n  SELECT\n    pec.session_id,\n    pec.device_id,\n    pec.northstar_id,\n    pec.event_name,\n    pec.event_datetime\n  FROM\n    \"quasar_prod_warehouse\".\"public\".\"snowplow_raw_events\"\n    pec\n    JOIN \"quasar_prod_warehouse\".\"public\".\"snowplow_sessions\"\n    psc\n    ON (\n      pec.session_id = psc.session_id\n    ) --filter the url of interest\n  WHERE\n    pec.\"path\" ILIKE '%my-voter-registration-drive%'\n    AND pec.query_parameters NOT ILIKE '%group_id=%'\n    AND pec.event_datetime >= '2020-03-01'\n),\nnorthstars AS (\n  --Authenticated Users\n  SELECT\n    device_id,\n    session_id,\n    northstar_id\n  FROM\n    funnel_base\n  WHERE\n    northstar_id IS NOT NULL\n  GROUP BY\n    1,\n    2,\n    3\n),\ndevices AS (\n  --Anonymous Users (removes cases of sessions that started anonymous AND got autheticated afterwards)\n  SELECT\n    b.device_id,\n    b.session_id\n  FROM\n    funnel_base b\n    LEFT JOIN northstars n\n    ON (\n      b.session_id = n.session_id\n      AND b.device_id = n.device_id\n    )\n  WHERE\n    n.session_id IS NULL\n  GROUP BY\n    1,\n    2\n),\nsession_base AS (\n  --Authenticated Sessions\n  --Joining WITH users table to eliminate internal (dosomething.org) northstar_ids\n  SELECT\n    f.device_id,\n    f.session_id,\n    f.northstar_id\n  FROM\n    funnel_base f\n    JOIN northstars n\n    ON (\n      f.session_id = n.session_id\n    )\n    JOIN \"quasar_prod_warehouse\".\"public\".\"users\"\n    u\n    ON (\n      f.northstar_id = u.northstar_id\n    )\n  UNION ALL\n    --Anonymous Sessions\n  SELECT\n    f.device_id,\n    f.session_id,\n    NULL\n  FROM\n    funnel_base f\n    JOIN devices d\n    ON (\n      f.device_id = d.device_id\n      AND f.session_id = d.session_id\n    )\n),\npost_base AS (\n  --posts AND rbs WITH who came FROM a group-based referral per their rtv tracking source\n  SELECT\n    p.northstar_id,\n    p.id,\n    r.post_id,\n    rtv.started_registration_utc AS event_ts,\n    p.status AS event_name,\n    CASE\n      WHEN r.post_id IS NOT NULL THEN 1\n    END AS registered\n  FROM\n    \"quasar_prod_warehouse\".\"public\".\"posts\"\n    p\n    JOIN \"quasar_prod_warehouse\".\"public\".\"rock_the_vote\"\n    rtv\n    ON p.id = rtv.post_id\n    LEFT JOIN \"quasar_prod_warehouse\".\"public\".\"reportbacks\"\n    r\n    ON p.id = r.post_id\n  WHERE\n    p.vr_source_details LIKE '%onlinedrivereferral%'\n    AND rtv.tracking_source LIKE '%referral=true%'\n    AND rtv.tracking_source NOT LIKE '%group_id=%'\n    AND p.created_at >= '2020-03-01'\n    AND rtv.started_registration_utc >= '2020-03-01'\n) --collapse the event log to a user level table WITH flags AND timestamps\nSELECT\n  sb.session_id,\n  sb.device_id,\n  COALESCE(COALESCE(sb.northstar_id, pb.northstar_id)) AS northstar_id,\n  pb.post_id,\n  --earliest ts ON record is WHEN their journey began\n  MIN(COALESCE(fb.event_datetime, pb.event_ts)) AS journey_begin_ts,\n  --you must have visited the page if you are IN the event log (allows us to 'backfill' some of the missing info\n  1 AS page_visit,\n  --earliest rtv record for the user is WHEN they began registering\n  MIN(\n    CASE\n      WHEN pb.event_name IS NOT NULL THEN COALESCE(\n        fb.event_datetime,\n        pb.event_ts\n      )\n    END\n  ) AS started_register_ts,\n  --if they have a any event THEN they clicked get started\n  MAX(\n    CASE\n      WHEN pb.event_name IS NOT NULL THEN 1\n      ELSE 0\n    END\n  ) AS clicked_get_started,\n  --if they have any of the following steps, they made it to step 2\n  MAX(\n    CASE\n      WHEN pb.event_name IN (\n        'step-2',\n        'step-3',\n        'step-4',\n        'ineligible',\n        'under-18',\n        'register-OVR',\n        'register-form'\n      ) THEN 1\n      ELSE 0\n    END\n  ) AS rtv_step_2,\n  --if they have any of the following steps, they made it to step 3\n  MAX(\n    CASE\n      WHEN pb.event_name IN (\n        'step-3',\n        'ineligible',\n        'under-18',\n        'register-form'\n      ) THEN 1\n      ELSE 0\n    END\n  ) AS rtv_step_3,\n  --if they have any of the following steps, they made it to step 4\n  MAX(\n    CASE\n      WHEN pb.event_name IN (\n        'step-4',\n        'ineligible',\n        'under-18',\n        'register-ovr'\n      ) THEN 1\n      ELSE 0\n    END\n  ) AS rtv_step_4,\n  --if they have any of the following steps, they made it to step 3 or 4\n  MAX(\n    CASE\n      WHEN pb.event_name IN (\n        'step-3',\n        'step-4',\n        'ineligible',\n        'under-18',\n        'register-OVR',\n        'register-form'\n      ) THEN 1\n      ELSE 0\n    END\n  ) AS rtv_step_3_or_4,\n  --if they have a registration event THEN they registered\n  MAX(COALESCE(pb.registered, 0)) AS registered\nFROM\n  session_base sb\n  JOIN funnel_base fb\n  ON (\n    sb.device_id = fb.device_id\n    AND sb.session_id = fb.session_id\n  ) FULL\n  OUTER JOIN post_base pb\n  ON (\n    sb.northstar_id = pb.northstar_id\n    AND pb.event_ts > fb.event_datetime\n  )\nGROUP BY\n  sb.session_id,\n  sb.device_id,\n  COALESCE(COALESCE(sb.northstar_id, pb.northstar_id)),\n  pb.post_id", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "WITH funnel_base AS (\n  SELECT\n    pec.session_id,\n    pec.device_id,\n    pec.northstar_id,\n    pec.event_name,\n    pec.event_datetime\n  FROM\n    \"quasar_prod_warehouse\".\"public\".\"snowplow_raw_events\"\n    pec\n    JOIN \"quasar_prod_warehouse\".\"public\".\"snowplow_sessions\"\n    psc\n    ON (\n      pec.session_id = psc.session_id\n    ) --filter the url of interest\n  WHERE\n    pec.\"path\" ILIKE '%my-voter-registration-drive%'\n    AND pec.query_parameters NOT ILIKE '%group_id=%'\n    AND pec.event_datetime >= '2020-03-01'\n),\nnorthstars AS (\n  --Authenticated Users\n  SELECT\n    device_id,\n    session_id,\n    northstar_id\n  FROM\n    funnel_base\n  WHERE\n    northstar_id IS NOT NULL\n  GROUP BY\n    1,\n    2,\n    3\n),\ndevices AS (\n  --Anonymous Users (removes cases of sessions that started anonymous AND got autheticated afterwards)\n  SELECT\n    b.device_id,\n    b.session_id\n  FROM\n    funnel_base b\n    LEFT JOIN northstars n\n    ON (\n      b.session_id = n.session_id\n      AND b.device_id = n.device_id\n    )\n  WHERE\n    n.session_id IS NULL\n  GROUP BY\n    1,\n    2\n),\nsession_base AS (\n  --Authenticated Sessions\n  --Joining WITH users table to eliminate internal (dosomething.org) northstar_ids\n  SELECT\n    f.device_id,\n    f.session_id,\n    f.northstar_id\n  FROM\n    funnel_base f\n    JOIN northstars n\n    ON (\n      f.session_id = n.session_id\n    )\n    JOIN \"quasar_prod_warehouse\".\"public\".\"users\"\n    u\n    ON (\n      f.northstar_id = u.northstar_id\n    )\n  UNION ALL\n    --Anonymous Sessions\n  SELECT\n    f.device_id,\n    f.session_id,\n    NULL\n  FROM\n    funnel_base f\n    JOIN devices d\n    ON (\n      f.device_id = d.device_id\n      AND f.session_id = d.session_id\n    )\n),\npost_base AS (\n  --posts AND rbs WITH who came FROM a group-based referral per their rtv tracking source\n  SELECT\n    p.northstar_id,\n    p.id,\n    r.post_id,\n    rtv.started_registration_utc AS event_ts,\n    p.status AS event_name,\n    CASE\n      WHEN r.post_id IS NOT NULL THEN 1\n    END AS registered\n  FROM\n    \"quasar_prod_warehouse\".\"public\".\"posts\"\n    p\n    JOIN \"quasar_prod_warehouse\".\"public\".\"rock_the_vote\"\n    rtv\n    ON p.id = rtv.post_id\n    LEFT JOIN \"quasar_prod_warehouse\".\"public\".\"reportbacks\"\n    r\n    ON p.id = r.post_id\n  WHERE\n    p.vr_source_details LIKE '%onlinedrivereferral%'\n    AND rtv.tracking_source LIKE '%referral=true%'\n    AND rtv.tracking_source NOT LIKE '%group_id=%'\n    AND p.created_at >= '2020-03-01'\n    AND rtv.started_registration_utc >= '2020-03-01'\n) --collapse the event log to a user level table WITH flags AND timestamps\nSELECT\n  sb.session_id,\n  sb.device_id,\n  COALESCE(COALESCE(sb.northstar_id, pb.northstar_id)) AS northstar_id,\n  pb.post_id,\n  --earliest ts ON record is WHEN their journey began\n  MIN(COALESCE(fb.event_datetime, pb.event_ts)) AS journey_begin_ts,\n  --you must have visited the page if you are IN the event log (allows us to 'backfill' some of the missing info\n  1 AS page_visit,\n  --earliest rtv record for the user is WHEN they began registering\n  MIN(\n    CASE\n      WHEN pb.event_name IS NOT NULL THEN COALESCE(\n        fb.event_datetime,\n        pb.event_ts\n      )\n    END\n  ) AS started_register_ts,\n  --if they have a any event THEN they clicked get started\n  MAX(\n    CASE\n      WHEN pb.event_name IS NOT NULL THEN 1\n      ELSE 0\n    END\n  ) AS clicked_get_started,\n  --if they have any of the following steps, they made it to step 2\n  MAX(\n    CASE\n      WHEN pb.event_name IN (\n        'step-2',\n        'step-3',\n        'step-4',\n        'ineligible',\n        'under-18',\n        'register-OVR',\n        'register-form'\n      ) THEN 1\n      ELSE 0\n    END\n  ) AS rtv_step_2,\n  --if they have any of the following steps, they made it to step 3\n  MAX(\n    CASE\n      WHEN pb.event_name IN (\n        'step-3',\n        'ineligible',\n        'under-18',\n        'register-form'\n      ) THEN 1\n      ELSE 0\n    END\n  ) AS rtv_step_3,\n  --if they have any of the following steps, they made it to step 4\n  MAX(\n    CASE\n      WHEN pb.event_name IN (\n        'step-4',\n        'ineligible',\n        'under-18',\n        'register-ovr'\n      ) THEN 1\n      ELSE 0\n    END\n  ) AS rtv_step_4,\n  --if they have any of the following steps, they made it to step 3 or 4\n  MAX(\n    CASE\n      WHEN pb.event_name IN (\n        'step-3',\n        'step-4',\n        'ineligible',\n        'under-18',\n        'register-OVR',\n        'register-form'\n      ) THEN 1\n      ELSE 0\n    END\n  ) AS rtv_step_3_or_4,\n  --if they have a registration event THEN they registered\n  MAX(COALESCE(pb.registered, 0)) AS registered\nFROM\n  session_base sb\n  JOIN funnel_base fb\n  ON (\n    sb.device_id = fb.device_id\n    AND sb.session_id = fb.session_id\n  ) FULL\n  OUTER JOIN post_base pb\n  ON (\n    sb.northstar_id = pb.northstar_id\n    AND pb.event_ts > fb.event_datetime\n  )\nGROUP BY\n  sb.session_id,\n  sb.device_id,\n  COALESCE(COALESCE(sb.northstar_id, pb.northstar_id)),\n  pb.post_id"}, "error": null, "status": null, "execution_time": 0.024019241333007812, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-02-23T21:28:56.200056Z", "completed_at": "2021-02-23T21:28:56.222927Z"}, {"name": "execute", "started_at": "2021-02-23T21:28:56.223293Z", "completed_at": "2021-02-23T21:28:56.223300Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "--This code simplifies the multiple steps that anonymous users AND members take IN the Voter-Registration Quiz\n--which lauched IN dosomething.org IN Jan-2020\n--Each row is a unique combination of device_id, session_id, northstar_id AND post_id.\n-- A northstar_id can be null AND CASEs LIKE this, represent anonymous sessions WHERE no user was auTHENticated.\n-- A device_id - session_id combination that has been associated with one or multiple northstar_ids is not present again AS an anonymous session even if the start of the session was anonymous AND got auTHENticated later on.\n-- A device_id can be present multiple times associated with both a northstar_id AND a null northstar_id, across different sessions\n-- There are 457 device_id, session_id, northstar_id combinations that repeat because the same auTHENticated session session was mapped to multiple post_ids (registration events)\n--The registration event identified AS a reportback with vr_source='web' AND vr_source_details LIKE '%VoterRegQuiz%' is mapped to the quiz funnel by northstar_id AND timestamp\n--(start of the registration occurring within the session, extending the session-end for an additional 15 minutes).\n--Restricting the registration event to occur exactly within the web session start/end times was resulting IN a drop of about 1/2 of the registrations.\n--Extending the session for over 15 minutes was not increasing the number of mapped registrations but was making more registrations to get mapped to more than one session.\n--Mapping of registrations to multiple sessions could not be completely eliminated but was reduced to a minimum (161 or 0.05%) AS of Aug 1, 2020.\nWITH funnel_base AS (\n  --Unique combinations of device_id, session_id, northstar_id\n  SELECT\n    pec.device_id,\n    pec.northstar_id,\n    pec.session_id\n  FROM\n    {{ ref('snowplow_raw_events') }}\n    pec\n    JOIN {{ ref('snowplow_sessions') }}\n    psc\n    ON (\n      pec.session_id = psc.session_id\n    ) --URL of the VR quiz funnel\n  WHERE\n    (\n      pec.\"path\" ILIKE '%ready-vote'\n      OR pec.\"path\" ILIKE '%ready-vote/%'\n    )\n    AND pec.event_datetime >= '2020-01-01'\n  GROUP BY\n    pec.device_id,\n    pec.northstar_id,\n    pec.session_id\n),\nnorthstars AS (\n  --Authenticated Users\n  SELECT\n    device_id,\n    northstar_id,\n    session_id\n  FROM\n    funnel_base\n  WHERE\n    northstar_id IS NOT NULL\n  GROUP BY\n    1,\n    2,\n    3\n),\ndevices AS (\n  --Anonymous Users (removes cases of sessions that started anonymous AND got autheticated afterwards)\n  SELECT\n    b.device_id,\n    b.session_id\n  FROM\n    funnel_base b\n    LEFT JOIN northstars n\n    ON (\n      b.session_id = n.session_id\n      AND b.device_id = n.device_id\n    )\n  WHERE\n    n.session_id IS NULL\n  GROUP BY\n    1,\n    2\n),\nsession_base AS (\n  --Authenticated Sessions\n  --Joining with users table to eliminate internal (dosomething.org) northstar_ids\n  SELECT\n    f.device_id,\n    f.northstar_id,\n    f.session_id\n  FROM\n    funnel_base f\n    JOIN northstars n\n    ON (\n      f.session_id = n.session_id\n    )\n    JOIN {{ ref('users') }}\n    u\n    ON (\n      f.northstar_id = u.northstar_id\n    )\n  UNION ALL\n    --Anonymous Sessions\n  SELECT\n    f.device_id,\n    NULL,\n    f.session_id\n  FROM\n    funnel_base f\n    JOIN devices d\n    ON (\n      f.session_id = d.session_id\n    )\n),\nreg_started AS (\n  SELECT\n    p.northstar_id,\n    p.id AS post_id,\n    rtv.started_registration_utc AS started_registration,\n    rtv.tracking_source,\n    rtv.status\n  FROM\n    {{ ref('posts') }}\n    p\n    LEFT JOIN {{ ref('rock_the_vote') }}\n    rtv\n    ON (\n      p.id = rtv.post_id\n      AND rtv.status IS NOT NULL\n    )\n  WHERE\n    p.vr_source = 'web'\n    AND p.vr_source_details LIKE '%VoterRegQuiz%'\n    AND p.created_at >= '2020-01-01'\n),\nreg_completed AS (\n  --Registration events coming FROM web-based quiz\n  SELECT\n    r.northstar_id,\n    r.post_id,\n    rtv.tracking_source,\n    --r.post_created_at appears to be the UTC conversion of rock.started_registration\n    rtv.started_registration_utc AS started_registration\n  FROM\n    {{ ref('reportbacks') }}\n    r\n    LEFT JOIN {{ ref('rock_the_vote') }}\n    rtv\n    ON r.post_id = rtv.post_id\n  WHERE\n    r.post_bucket = 'voter_registrations'\n    AND r.vr_source = 'web'\n    AND r.vr_source_details LIKE '%VoterRegQuiz%'\n    AND r.post_created_at >= '2020-01-01'\n),\nfunnel_landing AS (\n  --The top of the funnel does not require authentication\n  --Pulling date AND creating yes/no flags for the initial 2 steps\n  SELECT\n    pec.device_id,\n    pec.session_id,\n    MIN(\n      psc.landing_datetime\n    ) AS session_landing_datetime,\n    MAX(\n      psc.ending_datetime\n    ) AS session_ending_datetime,\n    --Earliest page visit\n    MIN(\n      pec.event_datetime\n    ) AS journey_begin_ts,\n    --Create traffic source groupings\n    --TBD: maybe later we can create additional groups (social, search, etc)\n    MAX(\n      CASE\n        -- prev known as page_utm_campaign\n        WHEN pec.utm_campaign ILIKE '%niche%' THEN 'niche'\n        -- prev known as page_utm_campaign\n        WHEN pec.utm_campaign ILIKE '%fastweb%' THEN 'fastweb'\n        WHEN psc.session_referrer_host ILIKE '%dosomething%' THEN 'dosomething'\n        ELSE 'other'\n      END\n    ) AS traffic_source,\n    MAX(\n      CASE\n        WHEN pec.event_name IN (\n          'visit',\n          'view',\n          'phoenix_clicked_signup',\n          'phoenix_clicked_voter_registration_action'\n        ) THEN 1\n        ELSE 0\n      END\n    ) AS page_visit,\n    MAX(\n      CASE\n        WHEN pec.event_name = 'phoenix_clicked_signup' THEN 1\n        ELSE 0\n      END\n    ) AS click_join_us\n  FROM\n    {{ ref('snowplow_raw_events') }}\n    pec\n    JOIN {{ ref('snowplow_sessions') }}\n    psc\n    ON (\n      pec.session_id = psc.session_id\n    ) --URL of the VR quiz funnel\n  WHERE\n    pec.\"path\" ILIKE '%ready-vote%'\n    AND pec.event_datetime >= '2020-01-01'\n  GROUP BY\n    pec.device_id,\n    pec.session_id\n),\nfunnel_auth AS (\n  --The next steps of the funnel do require auTHENtication\n  --Pulling date AND creating yes/no flags for the following steps\n  SELECT\n    pec.session_id,\n    pec.northstar_id,\n    rc.post_id,\n    --Earliest page visit\n    MIN(\n      pec.event_datetime\n    ) AS journey_begin_ts,\n    --Latest click to rock the vote page event\n    MAX(\n      pec.event_datetime\n    ) filter(\n      WHERE\n        pec.event_name = 'phoenix_clicked_voter_registration_action'\n    ) AS max_click_registration_ts,\n    --latest quiz submission\n    MAX(\n      pec.event_datetime\n    ) filter(\n      WHERE\n        pec.event_name = 'phoenix_submitted_quiz'\n    ) AS max_submit_quiz_ts,\n    --latest registration timestamp\n    MAX(\n      rs.started_registration\n    ) AS latest_register_ts,\n    --latest registration start timestamp\n    MAX(\n      rc.started_registration\n    ) AS latest_get_started_ts,\n    --latest submit photo timestamp\n    MAX(\n      pec.event_datetime\n    ) filter(\n      WHERE\n        pec.event_name IN (\n          'phoenix_failed_post_request',\n          'phoenix_completed_post_request',\n          'phoenix_found_post_request',\n          'phoenix_submitted_photo_submission_action',\n          'phoenix_completed_photo_submission_action',\n          'phoenix_failed_photo_submission_action'\n        )\n    ) AS max_submit_photo_ts,\n    --Latest FB share timestamp\n    MAX(\n      pec.event_datetime\n    ) filter(\n      WHERE\n        pec.event_name = 'phoenix_clicked_share_action_facebook'\n    ) AS max_fb_share_ts,\n    MAX(\n      CASE\n        WHEN pec.northstar_id IS NOT NULL THEN 1\n        ELSE 0\n      END\n    ) AS authenticated,\n    MAX(\n      CASE\n        WHEN pec.event_name = 'phoenix_clicked_voter_registration_action' THEN 1\n        ELSE 0\n      END\n    ) AS click_start_registration,\n    MAX(\n      CASE\n        WHEN rs.post_id IS NOT NULL THEN 1\n        ELSE 0\n      END\n    ) AS clicked_get_started,\n    MAX(\n      CASE\n        WHEN rs.status IN (\n          'Step 2',\n          'Step 3',\n          'Step 4',\n          'Rejected',\n          'Under 18',\n          'Complete'\n        )\n        AND rs.tracking_source ILIKE '%VoterRegQuiz_Affirmation%' THEN 1\n        ELSE 0\n      END\n    ) AS rtv_step_2_affirmation,\n    MAX(\n      CASE\n        WHEN rs.status IN (\n          'Step 2',\n          'Step 3',\n          'Step 4',\n          'Rejected',\n          'Under 18',\n          'Complete'\n        )\n        AND rs.tracking_source ILIKE '%VoterRegQuiz_completed%' THEN 1\n        ELSE 0\n      END\n    ) AS rtv_step_2_quizcomplete,\n    MAX(\n      CASE\n        WHEN rs.status IN (\n          'Step 3',\n          'Step 4',\n          'Rejected',\n          'Under 18',\n          'Complete'\n        )\n        AND rs.tracking_source ILIKE '%VoterRegQuiz_Affirmation%' THEN 1\n        ELSE 0\n      END\n    ) AS rtv_step_3_affirmation,\n    MAX(\n      CASE\n        WHEN rs.status IN (\n          'Step 3',\n          'Step 4',\n          'Rejected',\n          'Under 18',\n          'Complete'\n        )\n        AND rs.tracking_source ILIKE '%VoterRegQuiz_completed%' THEN 1\n        ELSE 0\n      END\n    ) AS rtv_step_3_quizcomplete,\n    MAX(\n      CASE\n        WHEN rs.status IN (\n          'Step 4',\n          'Rejected',\n          'Under 18',\n          'Complete'\n        )\n        AND rs.tracking_source ILIKE '%VoterRegQuiz_Affirmation%' THEN 1\n        ELSE 0\n      END\n    ) AS rtv_step_4_affirmation,\n    MAX(\n      CASE\n        WHEN rs.status IN (\n          'Step 4',\n          'Rejected',\n          'Under 18',\n          'Complete'\n        )\n        AND rs.tracking_source ILIKE '%VoterRegQuiz_completed%' THEN 1\n        ELSE 0\n      END\n    ) AS rtv_step_4_quizcomplete,\n    MAX(\n      CASE\n        WHEN rs.status IN (\n          'Step 3',\n          'Step 4',\n          'Rejected',\n          'Under 18',\n          'Complete'\n        )\n        AND rs.tracking_source ILIKE '%VoterRegQuiz_Affirmation%' THEN 1\n        ELSE 0\n      END\n    ) AS rtv_step_3_or_4_affirmation,\n    MAX(\n      CASE\n        WHEN rs.status IN (\n          'Step 3',\n          'Step 4',\n          'Rejected',\n          'Under 18',\n          'Complete'\n        )\n        AND rs.tracking_source ILIKE '%VoterRegQuiz_completed%' THEN 1\n        ELSE 0\n      END\n    ) AS rtv_step_3_or_4_quizcomplete,\n    MAX(\n      CASE\n        WHEN rs.post_id IS NOT NULL\n        AND rs.tracking_source ILIKE '%VoterRegQuiz_Affirmation%' THEN 1\n        ELSE 0\n      END\n    ) AS clicked_get_started_affirmation,\n    MAX(\n      CASE\n        WHEN rs.post_id IS NOT NULL\n        AND rs.tracking_source ILIKE '%VoterRegQuiz_completed%' THEN 1\n        ELSE 0\n      END\n    ) AS clicked_get_started_quizcomplete,\n    MAX(\n      CASE\n        WHEN rc.northstar_id IS NOT NULL THEN 1\n        ELSE 0\n      END\n    ) AS registered,\n    MAX(\n      CASE\n        WHEN rc.northstar_id IS NOT NULL\n        AND rc.tracking_source ILIKE '%VoterRegQuiz_completed%' THEN 1\n        ELSE 0\n      END\n    ) AS registered_quizcomplete,\n    MAX(\n      CASE\n        WHEN rc.northstar_id IS NOT NULL\n        AND rc.tracking_source ILIKE '%VoterRegQuiz_Affirmation%' THEN 1\n        ELSE 0\n      END\n    ) AS registered_affirmation,\n    MAX(\n      CASE\n        WHEN pec.event_name = 'phoenix_clicked_share_action_facebook' THEN 1\n        ELSE 0\n      END\n    ) AS clicked_share_fb,\n    MAX(\n      CASE\n        WHEN pec.event_name = 'phoenix_submitted_quiz' THEN 1\n        ELSE 0\n      END\n    ) AS submitted_quiz,\n    MAX(\n      CASE\n        WHEN pec.event_name IN (\n          'phoenix_failed_post_request',\n          'phoenix_completed_post_request',\n          'phoenix_found_post_request',\n          'phoenix_submitted_photo_submission_action',\n          'phoenix_completed_photo_submission_action',\n          'phoenix_failed_photo_submission_action'\n        ) THEN 1\n        ELSE 0\n      END\n    ) AS clicked_submit_photo\n  FROM\n    {{ ref('snowplow_raw_events') }}\n    pec\n    JOIN {{ ref('snowplow_sessions') }}\n    psc\n    ON (\n      pec.session_id = psc.session_id\n    ) --Join northstar/session with voter reg activity FROM posts AND reportbacks\n    LEFT JOIN reg_started rs\n    ON (\n      rs.northstar_id = pec.northstar_id\n      AND rs.started_registration BETWEEN psc.landing_datetime\n      AND (\n        psc.ending_datetime + INTERVAL '15 minute'\n      )\n    )\n    LEFT JOIN reg_completed rc\n    ON (\n      rc.northstar_id = pec.northstar_id\n      AND rc.started_registration BETWEEN psc.landing_datetime\n      AND (\n        psc.ending_datetime + INTERVAL '15 minute'\n      )\n    )\n  WHERE\n    --URL of the VR quiz funnel\n    (\n      pec.\"path\" ILIKE '%ready-vote'\n      OR pec.\"path\" ILIKE '%ready-vote/%'\n    )\n    AND pec.northstar_id IS NOT NULL\n    AND pec.event_datetime >= '2020-01-01'\n  GROUP BY\n    pec.session_id,\n    pec.northstar_id,\n    rc.post_id\n) --We SELECT unique rows because some sessions are used by different northstar_id and this creates a multiplier effect WHEN joining funnel_landing and funnel_auth\nSELECT\n  DISTINCT s.device_id,\n  s.northstar_id,\n  s.session_id,\n  fl.session_landing_datetime,\n  fl.session_ending_datetime,\n  fl.journey_begin_ts AS journey_begin_ts,\n  fa.journey_begin_ts AS journey_begin_ts_northstar,\n  fa.post_id,\n  fa.max_click_registration_ts,\n  fa.max_submit_quiz_ts,\n  fa.latest_register_ts,\n  fa.latest_get_started_ts,\n  fa.max_submit_photo_ts,\n  fa.max_fb_share_ts,\n  fl.traffic_source,\n  fl.page_visit,\n  fl.click_join_us,\n  fa.authenticated,\n  fa.click_start_registration,\n  fa.clicked_get_started,\n  fa.rtv_step_2_affirmation,\n  fa.rtv_step_2_quizcomplete,\n  fa.rtv_step_3_affirmation,\n  fa.rtv_step_3_quizcomplete,\n  fa.rtv_step_4_affirmation,\n  fa.rtv_step_4_quizcomplete,\n  fa.rtv_step_3_or_4_affirmation,\n  fa.rtv_step_3_or_4_quizcomplete,\n  fa.clicked_get_started_affirmation,\n  fa.clicked_get_started_quizcomplete,\n  fa.registered,\n  fa.registered_quizcomplete,\n  fa.clicked_share_fb,\n  fa.registered_affirmation,\n  fa.submitted_quiz,\n  fa.clicked_submit_photo,\n  --additional flags from a combination and sequence of events\n  CASE\n    WHEN registered_affirmation = 1\n    AND max_submit_quiz_ts > max_click_registration_ts THEN 1\n    ELSE 0\n  END AS register_affirmation_THEN_quiz,\n  CASE\n    WHEN submitted_quiz = 1\n    AND registered_affirmation = 1\n    AND max_submit_quiz_ts < max_click_registration_ts THEN 1\n    ELSE 0\n  END AS submit_quiz_register_affirmation,\n  CASE\n    WHEN submitted_quiz = 1\n    AND registered_affirmation = 1\n    AND max_submit_quiz_ts > latest_register_ts\n    AND max_fb_share_ts > max_submit_quiz_ts THEN 1\n    ELSE 0\n  END AS share_quiz_post_register_affirm,\n  CASE\n    WHEN submitted_quiz = 1\n    AND registered_affirmation = 1\n    AND max_submit_quiz_ts > latest_register_ts\n    AND max_submit_photo_ts > max_submit_quiz_ts THEN 1\n    ELSE 0\n  END AS submit_photo_post_register_affirm,\n  CASE\n    WHEN submitted_quiz = 1\n    AND registered_quizcomplete = 1\n    AND max_submit_quiz_ts > latest_register_ts\n    AND max_fb_share_ts > max_submit_quiz_ts THEN 1\n    ELSE 0\n  END AS share_quiz_post_register_qcomp,\n  CASE\n    WHEN submitted_quiz = 1\n    AND registered_quizcomplete = 1\n    AND max_submit_quiz_ts > latest_register_ts\n    AND max_submit_photo_ts > max_submit_quiz_ts THEN 1\n    ELSE 0\n  END AS submit_photo_post_register_qcomp\nFROM\n  session_base s\n  LEFT JOIN funnel_landing fl\n  ON (\n    s.session_id = fl.session_id\n    AND s.device_id = fl.device_id\n  )\n  LEFT JOIN funnel_auth fa\n  ON (\n    s.session_id = fa.session_id\n    AND s.northstar_id = fa.northstar_id\n  )", "compiled": true, "database": "quasar_prod_warehouse", "schema": "public", "fqn": ["ds_dbt", "voter_reg", "voter_reg_quiz_funnel"], "unique_id": "model.ds_dbt.voter_reg_quiz_funnel", "package_name": "ds_dbt", "root_path": "/home/runner/work/quasar/quasar/quasar/dbt", "path": "voter_reg/voter_reg_quiz_funnel.sql", "original_file_path": "models/voter_reg/voter_reg_quiz_funnel.sql", "name": "voter_reg_quiz_funnel", "resource_type": "model", "alias": "voter_reg_quiz_funnel", "checksum": {"name": "sha256", "checksum": "1cea14f48d103b464c202952b6cc4a289c8ec6d11e52df9f4381fbf0d0b3e699"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [{"sql": "CREATE INDEX {{ get_index_name(this, 'northstar_id_device_id_journey_begin_ts') }} (northstar_id, device_id, journey_begin_ts)", "transaction": true, "index": null}, {"sql": "{{ grant_select_to(this, ['dsanalyst', 'looker']) }}", "transaction": true, "index": null}], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": "voter_reg_quiz_funnel", "schema": null, "database": null, "tags": ["voter_reg"], "full_refresh": null}, "tags": ["voter_reg"], "refs": [["snowplow_raw_events"], ["snowplow_sessions"], ["users"], ["posts"], ["rock_the_vote"], ["reportbacks"], ["rock_the_vote"], ["snowplow_raw_events"], ["snowplow_sessions"], ["snowplow_raw_events"], ["snowplow_sessions"]], "sources": [], "depends_on": {"macros": ["macro.ds_dbt.get_index_name", "macro.ds_dbt.grant_select_to"], "nodes": ["model.ds_dbt.snowplow_raw_events", "model.ds_dbt.snowplow_sessions", "model.ds_dbt.users", "model.ds_dbt.posts", "model.ds_dbt.rock_the_vote", "model.ds_dbt.reportbacks", "model.ds_dbt.rock_the_vote", "model.ds_dbt.snowplow_raw_events", "model.ds_dbt.snowplow_sessions", "model.ds_dbt.snowplow_raw_events", "model.ds_dbt.snowplow_sessions"]}, "description": "Needs a description", "columns": {"northstar_id": {"name": "northstar_id", "description": "The Northstar ID of the user who generated the event.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "device_id": {"name": "device_id", "description": "ID of the device used", "meta": {}, "data_type": null, "quote": null, "tags": []}, "journey_begin_ts": {"name": "journey_begin_ts", "description": "The first time the user landed on this URL", "meta": {}, "data_type": null, "quote": null, "tags": []}, "page_visit": {"name": "page_visit", "description": "Has the user visited the OVRD URL", "meta": {}, "data_type": null, "quote": null, "tags": []}, "click_join_us": {"name": "click_join_us", "description": "Did the user click the Join Us button to sign up for the campaign. Phoenix Events Combined event_name = phoenix_clicked_signup", "meta": {}, "data_type": null, "quote": null, "tags": []}, "authenticated": {"name": "authenticated", "description": "Did the user view the page while authenticated", "meta": {}, "data_type": null, "quote": null, "tags": []}, "click_start_registration": {"name": "click_start_registration", "description": "Did the user click the Start Registration button to go to Instapage. Phoenix Events Combined event_name = phoenix_clicked_voter_registration_action", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicked_get_started": {"name": "clicked_get_started", "description": "Did the user start the registration process on Instapage.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "registered": {"name": "registered", "description": "Has the user registered to vote?", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicked_share_fb": {"name": "clicked_share_fb", "description": "Did the user click the share via Facebook button? Phoenix Events Combined event_name = phoenix_clicked_share_action_facebook", "meta": {}, "data_type": null, "quote": null, "tags": []}, "traffic_source": {"name": "traffic_source", "description": "Where did this user come from? Is it from one of our top partners or an internal product?", "meta": {}, "data_type": null, "quote": null, "tags": []}, "submitted_quiz": {"name": "submitted_quiz", "description": "Did the user submit the quiz?", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clicked_submit_photo": {"name": "clicked_submit_photo", "description": "Did the user attempt to submit a photo post on the page?", "meta": {}, "data_type": null, "quote": null, "tags": []}, "register_affirmation_then_quiz": {"name": "register_affirmation_then_quiz", "description": "Registered via Affirmation, then returned to take the quiz", "meta": {}, "data_type": null, "quote": null, "tags": []}, "submit_quiz_register_affirmation": {"name": "submit_quiz_register_affirmation", "description": "Submitted the quiz, and then registered to vote", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/voter_reg/schema.yml", "build_path": "../../docs/compiled/ds_dbt/models/voter_reg/voter_reg_quiz_funnel.sql", "deferred": false, "compiled_sql": "--This code simplifies the multiple steps that anonymous users AND members take IN the Voter-Registration Quiz\n--which lauched IN dosomething.org IN Jan-2020\n--Each row is a unique combination of device_id, session_id, northstar_id AND post_id.\n-- A northstar_id can be null AND CASEs LIKE this, represent anonymous sessions WHERE no user was auTHENticated.\n-- A device_id - session_id combination that has been associated with one or multiple northstar_ids is not present again AS an anonymous session even if the start of the session was anonymous AND got auTHENticated later on.\n-- A device_id can be present multiple times associated with both a northstar_id AND a null northstar_id, across different sessions\n-- There are 457 device_id, session_id, northstar_id combinations that repeat because the same auTHENticated session session was mapped to multiple post_ids (registration events)\n--The registration event identified AS a reportback with vr_source='web' AND vr_source_details LIKE '%VoterRegQuiz%' is mapped to the quiz funnel by northstar_id AND timestamp\n--(start of the registration occurring within the session, extending the session-end for an additional 15 minutes).\n--Restricting the registration event to occur exactly within the web session start/end times was resulting IN a drop of about 1/2 of the registrations.\n--Extending the session for over 15 minutes was not increasing the number of mapped registrations but was making more registrations to get mapped to more than one session.\n--Mapping of registrations to multiple sessions could not be completely eliminated but was reduced to a minimum (161 or 0.05%) AS of Aug 1, 2020.\nWITH funnel_base AS (\n  --Unique combinations of device_id, session_id, northstar_id\n  SELECT\n    pec.device_id,\n    pec.northstar_id,\n    pec.session_id\n  FROM\n    \"quasar_prod_warehouse\".\"public\".\"snowplow_raw_events\"\n    pec\n    JOIN \"quasar_prod_warehouse\".\"public\".\"snowplow_sessions\"\n    psc\n    ON (\n      pec.session_id = psc.session_id\n    ) --URL of the VR quiz funnel\n  WHERE\n    (\n      pec.\"path\" ILIKE '%ready-vote'\n      OR pec.\"path\" ILIKE '%ready-vote/%'\n    )\n    AND pec.event_datetime >= '2020-01-01'\n  GROUP BY\n    pec.device_id,\n    pec.northstar_id,\n    pec.session_id\n),\nnorthstars AS (\n  --Authenticated Users\n  SELECT\n    device_id,\n    northstar_id,\n    session_id\n  FROM\n    funnel_base\n  WHERE\n    northstar_id IS NOT NULL\n  GROUP BY\n    1,\n    2,\n    3\n),\ndevices AS (\n  --Anonymous Users (removes cases of sessions that started anonymous AND got autheticated afterwards)\n  SELECT\n    b.device_id,\n    b.session_id\n  FROM\n    funnel_base b\n    LEFT JOIN northstars n\n    ON (\n      b.session_id = n.session_id\n      AND b.device_id = n.device_id\n    )\n  WHERE\n    n.session_id IS NULL\n  GROUP BY\n    1,\n    2\n),\nsession_base AS (\n  --Authenticated Sessions\n  --Joining with users table to eliminate internal (dosomething.org) northstar_ids\n  SELECT\n    f.device_id,\n    f.northstar_id,\n    f.session_id\n  FROM\n    funnel_base f\n    JOIN northstars n\n    ON (\n      f.session_id = n.session_id\n    )\n    JOIN \"quasar_prod_warehouse\".\"public\".\"users\"\n    u\n    ON (\n      f.northstar_id = u.northstar_id\n    )\n  UNION ALL\n    --Anonymous Sessions\n  SELECT\n    f.device_id,\n    NULL,\n    f.session_id\n  FROM\n    funnel_base f\n    JOIN devices d\n    ON (\n      f.session_id = d.session_id\n    )\n),\nreg_started AS (\n  SELECT\n    p.northstar_id,\n    p.id AS post_id,\n    rtv.started_registration_utc AS started_registration,\n    rtv.tracking_source,\n    rtv.status\n  FROM\n    \"quasar_prod_warehouse\".\"public\".\"posts\"\n    p\n    LEFT JOIN \"quasar_prod_warehouse\".\"public\".\"rock_the_vote\"\n    rtv\n    ON (\n      p.id = rtv.post_id\n      AND rtv.status IS NOT NULL\n    )\n  WHERE\n    p.vr_source = 'web'\n    AND p.vr_source_details LIKE '%VoterRegQuiz%'\n    AND p.created_at >= '2020-01-01'\n),\nreg_completed AS (\n  --Registration events coming FROM web-based quiz\n  SELECT\n    r.northstar_id,\n    r.post_id,\n    rtv.tracking_source,\n    --r.post_created_at appears to be the UTC conversion of rock.started_registration\n    rtv.started_registration_utc AS started_registration\n  FROM\n    \"quasar_prod_warehouse\".\"public\".\"reportbacks\"\n    r\n    LEFT JOIN \"quasar_prod_warehouse\".\"public\".\"rock_the_vote\"\n    rtv\n    ON r.post_id = rtv.post_id\n  WHERE\n    r.post_bucket = 'voter_registrations'\n    AND r.vr_source = 'web'\n    AND r.vr_source_details LIKE '%VoterRegQuiz%'\n    AND r.post_created_at >= '2020-01-01'\n),\nfunnel_landing AS (\n  --The top of the funnel does not require authentication\n  --Pulling date AND creating yes/no flags for the initial 2 steps\n  SELECT\n    pec.device_id,\n    pec.session_id,\n    MIN(\n      psc.landing_datetime\n    ) AS session_landing_datetime,\n    MAX(\n      psc.ending_datetime\n    ) AS session_ending_datetime,\n    --Earliest page visit\n    MIN(\n      pec.event_datetime\n    ) AS journey_begin_ts,\n    --Create traffic source groupings\n    --TBD: maybe later we can create additional groups (social, search, etc)\n    MAX(\n      CASE\n        -- prev known as page_utm_campaign\n        WHEN pec.utm_campaign ILIKE '%niche%' THEN 'niche'\n        -- prev known as page_utm_campaign\n        WHEN pec.utm_campaign ILIKE '%fastweb%' THEN 'fastweb'\n        WHEN psc.session_referrer_host ILIKE '%dosomething%' THEN 'dosomething'\n        ELSE 'other'\n      END\n    ) AS traffic_source,\n    MAX(\n      CASE\n        WHEN pec.event_name IN (\n          'visit',\n          'view',\n          'phoenix_clicked_signup',\n          'phoenix_clicked_voter_registration_action'\n        ) THEN 1\n        ELSE 0\n      END\n    ) AS page_visit,\n    MAX(\n      CASE\n        WHEN pec.event_name = 'phoenix_clicked_signup' THEN 1\n        ELSE 0\n      END\n    ) AS click_join_us\n  FROM\n    \"quasar_prod_warehouse\".\"public\".\"snowplow_raw_events\"\n    pec\n    JOIN \"quasar_prod_warehouse\".\"public\".\"snowplow_sessions\"\n    psc\n    ON (\n      pec.session_id = psc.session_id\n    ) --URL of the VR quiz funnel\n  WHERE\n    pec.\"path\" ILIKE '%ready-vote%'\n    AND pec.event_datetime >= '2020-01-01'\n  GROUP BY\n    pec.device_id,\n    pec.session_id\n),\nfunnel_auth AS (\n  --The next steps of the funnel do require auTHENtication\n  --Pulling date AND creating yes/no flags for the following steps\n  SELECT\n    pec.session_id,\n    pec.northstar_id,\n    rc.post_id,\n    --Earliest page visit\n    MIN(\n      pec.event_datetime\n    ) AS journey_begin_ts,\n    --Latest click to rock the vote page event\n    MAX(\n      pec.event_datetime\n    ) filter(\n      WHERE\n        pec.event_name = 'phoenix_clicked_voter_registration_action'\n    ) AS max_click_registration_ts,\n    --latest quiz submission\n    MAX(\n      pec.event_datetime\n    ) filter(\n      WHERE\n        pec.event_name = 'phoenix_submitted_quiz'\n    ) AS max_submit_quiz_ts,\n    --latest registration timestamp\n    MAX(\n      rs.started_registration\n    ) AS latest_register_ts,\n    --latest registration start timestamp\n    MAX(\n      rc.started_registration\n    ) AS latest_get_started_ts,\n    --latest submit photo timestamp\n    MAX(\n      pec.event_datetime\n    ) filter(\n      WHERE\n        pec.event_name IN (\n          'phoenix_failed_post_request',\n          'phoenix_completed_post_request',\n          'phoenix_found_post_request',\n          'phoenix_submitted_photo_submission_action',\n          'phoenix_completed_photo_submission_action',\n          'phoenix_failed_photo_submission_action'\n        )\n    ) AS max_submit_photo_ts,\n    --Latest FB share timestamp\n    MAX(\n      pec.event_datetime\n    ) filter(\n      WHERE\n        pec.event_name = 'phoenix_clicked_share_action_facebook'\n    ) AS max_fb_share_ts,\n    MAX(\n      CASE\n        WHEN pec.northstar_id IS NOT NULL THEN 1\n        ELSE 0\n      END\n    ) AS authenticated,\n    MAX(\n      CASE\n        WHEN pec.event_name = 'phoenix_clicked_voter_registration_action' THEN 1\n        ELSE 0\n      END\n    ) AS click_start_registration,\n    MAX(\n      CASE\n        WHEN rs.post_id IS NOT NULL THEN 1\n        ELSE 0\n      END\n    ) AS clicked_get_started,\n    MAX(\n      CASE\n        WHEN rs.status IN (\n          'Step 2',\n          'Step 3',\n          'Step 4',\n          'Rejected',\n          'Under 18',\n          'Complete'\n        )\n        AND rs.tracking_source ILIKE '%VoterRegQuiz_Affirmation%' THEN 1\n        ELSE 0\n      END\n    ) AS rtv_step_2_affirmation,\n    MAX(\n      CASE\n        WHEN rs.status IN (\n          'Step 2',\n          'Step 3',\n          'Step 4',\n          'Rejected',\n          'Under 18',\n          'Complete'\n        )\n        AND rs.tracking_source ILIKE '%VoterRegQuiz_completed%' THEN 1\n        ELSE 0\n      END\n    ) AS rtv_step_2_quizcomplete,\n    MAX(\n      CASE\n        WHEN rs.status IN (\n          'Step 3',\n          'Step 4',\n          'Rejected',\n          'Under 18',\n          'Complete'\n        )\n        AND rs.tracking_source ILIKE '%VoterRegQuiz_Affirmation%' THEN 1\n        ELSE 0\n      END\n    ) AS rtv_step_3_affirmation,\n    MAX(\n      CASE\n        WHEN rs.status IN (\n          'Step 3',\n          'Step 4',\n          'Rejected',\n          'Under 18',\n          'Complete'\n        )\n        AND rs.tracking_source ILIKE '%VoterRegQuiz_completed%' THEN 1\n        ELSE 0\n      END\n    ) AS rtv_step_3_quizcomplete,\n    MAX(\n      CASE\n        WHEN rs.status IN (\n          'Step 4',\n          'Rejected',\n          'Under 18',\n          'Complete'\n        )\n        AND rs.tracking_source ILIKE '%VoterRegQuiz_Affirmation%' THEN 1\n        ELSE 0\n      END\n    ) AS rtv_step_4_affirmation,\n    MAX(\n      CASE\n        WHEN rs.status IN (\n          'Step 4',\n          'Rejected',\n          'Under 18',\n          'Complete'\n        )\n        AND rs.tracking_source ILIKE '%VoterRegQuiz_completed%' THEN 1\n        ELSE 0\n      END\n    ) AS rtv_step_4_quizcomplete,\n    MAX(\n      CASE\n        WHEN rs.status IN (\n          'Step 3',\n          'Step 4',\n          'Rejected',\n          'Under 18',\n          'Complete'\n        )\n        AND rs.tracking_source ILIKE '%VoterRegQuiz_Affirmation%' THEN 1\n        ELSE 0\n      END\n    ) AS rtv_step_3_or_4_affirmation,\n    MAX(\n      CASE\n        WHEN rs.status IN (\n          'Step 3',\n          'Step 4',\n          'Rejected',\n          'Under 18',\n          'Complete'\n        )\n        AND rs.tracking_source ILIKE '%VoterRegQuiz_completed%' THEN 1\n        ELSE 0\n      END\n    ) AS rtv_step_3_or_4_quizcomplete,\n    MAX(\n      CASE\n        WHEN rs.post_id IS NOT NULL\n        AND rs.tracking_source ILIKE '%VoterRegQuiz_Affirmation%' THEN 1\n        ELSE 0\n      END\n    ) AS clicked_get_started_affirmation,\n    MAX(\n      CASE\n        WHEN rs.post_id IS NOT NULL\n        AND rs.tracking_source ILIKE '%VoterRegQuiz_completed%' THEN 1\n        ELSE 0\n      END\n    ) AS clicked_get_started_quizcomplete,\n    MAX(\n      CASE\n        WHEN rc.northstar_id IS NOT NULL THEN 1\n        ELSE 0\n      END\n    ) AS registered,\n    MAX(\n      CASE\n        WHEN rc.northstar_id IS NOT NULL\n        AND rc.tracking_source ILIKE '%VoterRegQuiz_completed%' THEN 1\n        ELSE 0\n      END\n    ) AS registered_quizcomplete,\n    MAX(\n      CASE\n        WHEN rc.northstar_id IS NOT NULL\n        AND rc.tracking_source ILIKE '%VoterRegQuiz_Affirmation%' THEN 1\n        ELSE 0\n      END\n    ) AS registered_affirmation,\n    MAX(\n      CASE\n        WHEN pec.event_name = 'phoenix_clicked_share_action_facebook' THEN 1\n        ELSE 0\n      END\n    ) AS clicked_share_fb,\n    MAX(\n      CASE\n        WHEN pec.event_name = 'phoenix_submitted_quiz' THEN 1\n        ELSE 0\n      END\n    ) AS submitted_quiz,\n    MAX(\n      CASE\n        WHEN pec.event_name IN (\n          'phoenix_failed_post_request',\n          'phoenix_completed_post_request',\n          'phoenix_found_post_request',\n          'phoenix_submitted_photo_submission_action',\n          'phoenix_completed_photo_submission_action',\n          'phoenix_failed_photo_submission_action'\n        ) THEN 1\n        ELSE 0\n      END\n    ) AS clicked_submit_photo\n  FROM\n    \"quasar_prod_warehouse\".\"public\".\"snowplow_raw_events\"\n    pec\n    JOIN \"quasar_prod_warehouse\".\"public\".\"snowplow_sessions\"\n    psc\n    ON (\n      pec.session_id = psc.session_id\n    ) --Join northstar/session with voter reg activity FROM posts AND reportbacks\n    LEFT JOIN reg_started rs\n    ON (\n      rs.northstar_id = pec.northstar_id\n      AND rs.started_registration BETWEEN psc.landing_datetime\n      AND (\n        psc.ending_datetime + INTERVAL '15 minute'\n      )\n    )\n    LEFT JOIN reg_completed rc\n    ON (\n      rc.northstar_id = pec.northstar_id\n      AND rc.started_registration BETWEEN psc.landing_datetime\n      AND (\n        psc.ending_datetime + INTERVAL '15 minute'\n      )\n    )\n  WHERE\n    --URL of the VR quiz funnel\n    (\n      pec.\"path\" ILIKE '%ready-vote'\n      OR pec.\"path\" ILIKE '%ready-vote/%'\n    )\n    AND pec.northstar_id IS NOT NULL\n    AND pec.event_datetime >= '2020-01-01'\n  GROUP BY\n    pec.session_id,\n    pec.northstar_id,\n    rc.post_id\n) --We SELECT unique rows because some sessions are used by different northstar_id and this creates a multiplier effect WHEN joining funnel_landing and funnel_auth\nSELECT\n  DISTINCT s.device_id,\n  s.northstar_id,\n  s.session_id,\n  fl.session_landing_datetime,\n  fl.session_ending_datetime,\n  fl.journey_begin_ts AS journey_begin_ts,\n  fa.journey_begin_ts AS journey_begin_ts_northstar,\n  fa.post_id,\n  fa.max_click_registration_ts,\n  fa.max_submit_quiz_ts,\n  fa.latest_register_ts,\n  fa.latest_get_started_ts,\n  fa.max_submit_photo_ts,\n  fa.max_fb_share_ts,\n  fl.traffic_source,\n  fl.page_visit,\n  fl.click_join_us,\n  fa.authenticated,\n  fa.click_start_registration,\n  fa.clicked_get_started,\n  fa.rtv_step_2_affirmation,\n  fa.rtv_step_2_quizcomplete,\n  fa.rtv_step_3_affirmation,\n  fa.rtv_step_3_quizcomplete,\n  fa.rtv_step_4_affirmation,\n  fa.rtv_step_4_quizcomplete,\n  fa.rtv_step_3_or_4_affirmation,\n  fa.rtv_step_3_or_4_quizcomplete,\n  fa.clicked_get_started_affirmation,\n  fa.clicked_get_started_quizcomplete,\n  fa.registered,\n  fa.registered_quizcomplete,\n  fa.clicked_share_fb,\n  fa.registered_affirmation,\n  fa.submitted_quiz,\n  fa.clicked_submit_photo,\n  --additional flags from a combination and sequence of events\n  CASE\n    WHEN registered_affirmation = 1\n    AND max_submit_quiz_ts > max_click_registration_ts THEN 1\n    ELSE 0\n  END AS register_affirmation_THEN_quiz,\n  CASE\n    WHEN submitted_quiz = 1\n    AND registered_affirmation = 1\n    AND max_submit_quiz_ts < max_click_registration_ts THEN 1\n    ELSE 0\n  END AS submit_quiz_register_affirmation,\n  CASE\n    WHEN submitted_quiz = 1\n    AND registered_affirmation = 1\n    AND max_submit_quiz_ts > latest_register_ts\n    AND max_fb_share_ts > max_submit_quiz_ts THEN 1\n    ELSE 0\n  END AS share_quiz_post_register_affirm,\n  CASE\n    WHEN submitted_quiz = 1\n    AND registered_affirmation = 1\n    AND max_submit_quiz_ts > latest_register_ts\n    AND max_submit_photo_ts > max_submit_quiz_ts THEN 1\n    ELSE 0\n  END AS submit_photo_post_register_affirm,\n  CASE\n    WHEN submitted_quiz = 1\n    AND registered_quizcomplete = 1\n    AND max_submit_quiz_ts > latest_register_ts\n    AND max_fb_share_ts > max_submit_quiz_ts THEN 1\n    ELSE 0\n  END AS share_quiz_post_register_qcomp,\n  CASE\n    WHEN submitted_quiz = 1\n    AND registered_quizcomplete = 1\n    AND max_submit_quiz_ts > latest_register_ts\n    AND max_submit_photo_ts > max_submit_quiz_ts THEN 1\n    ELSE 0\n  END AS submit_photo_post_register_qcomp\nFROM\n  session_base s\n  LEFT JOIN funnel_landing fl\n  ON (\n    s.session_id = fl.session_id\n    AND s.device_id = fl.device_id\n  )\n  LEFT JOIN funnel_auth fa\n  ON (\n    s.session_id = fa.session_id\n    AND s.northstar_id = fa.northstar_id\n  )", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "--This code simplifies the multiple steps that anonymous users AND members take IN the Voter-Registration Quiz\n--which lauched IN dosomething.org IN Jan-2020\n--Each row is a unique combination of device_id, session_id, northstar_id AND post_id.\n-- A northstar_id can be null AND CASEs LIKE this, represent anonymous sessions WHERE no user was auTHENticated.\n-- A device_id - session_id combination that has been associated with one or multiple northstar_ids is not present again AS an anonymous session even if the start of the session was anonymous AND got auTHENticated later on.\n-- A device_id can be present multiple times associated with both a northstar_id AND a null northstar_id, across different sessions\n-- There are 457 device_id, session_id, northstar_id combinations that repeat because the same auTHENticated session session was mapped to multiple post_ids (registration events)\n--The registration event identified AS a reportback with vr_source='web' AND vr_source_details LIKE '%VoterRegQuiz%' is mapped to the quiz funnel by northstar_id AND timestamp\n--(start of the registration occurring within the session, extending the session-end for an additional 15 minutes).\n--Restricting the registration event to occur exactly within the web session start/end times was resulting IN a drop of about 1/2 of the registrations.\n--Extending the session for over 15 minutes was not increasing the number of mapped registrations but was making more registrations to get mapped to more than one session.\n--Mapping of registrations to multiple sessions could not be completely eliminated but was reduced to a minimum (161 or 0.05%) AS of Aug 1, 2020.\nWITH funnel_base AS (\n  --Unique combinations of device_id, session_id, northstar_id\n  SELECT\n    pec.device_id,\n    pec.northstar_id,\n    pec.session_id\n  FROM\n    \"quasar_prod_warehouse\".\"public\".\"snowplow_raw_events\"\n    pec\n    JOIN \"quasar_prod_warehouse\".\"public\".\"snowplow_sessions\"\n    psc\n    ON (\n      pec.session_id = psc.session_id\n    ) --URL of the VR quiz funnel\n  WHERE\n    (\n      pec.\"path\" ILIKE '%ready-vote'\n      OR pec.\"path\" ILIKE '%ready-vote/%'\n    )\n    AND pec.event_datetime >= '2020-01-01'\n  GROUP BY\n    pec.device_id,\n    pec.northstar_id,\n    pec.session_id\n),\nnorthstars AS (\n  --Authenticated Users\n  SELECT\n    device_id,\n    northstar_id,\n    session_id\n  FROM\n    funnel_base\n  WHERE\n    northstar_id IS NOT NULL\n  GROUP BY\n    1,\n    2,\n    3\n),\ndevices AS (\n  --Anonymous Users (removes cases of sessions that started anonymous AND got autheticated afterwards)\n  SELECT\n    b.device_id,\n    b.session_id\n  FROM\n    funnel_base b\n    LEFT JOIN northstars n\n    ON (\n      b.session_id = n.session_id\n      AND b.device_id = n.device_id\n    )\n  WHERE\n    n.session_id IS NULL\n  GROUP BY\n    1,\n    2\n),\nsession_base AS (\n  --Authenticated Sessions\n  --Joining with users table to eliminate internal (dosomething.org) northstar_ids\n  SELECT\n    f.device_id,\n    f.northstar_id,\n    f.session_id\n  FROM\n    funnel_base f\n    JOIN northstars n\n    ON (\n      f.session_id = n.session_id\n    )\n    JOIN \"quasar_prod_warehouse\".\"public\".\"users\"\n    u\n    ON (\n      f.northstar_id = u.northstar_id\n    )\n  UNION ALL\n    --Anonymous Sessions\n  SELECT\n    f.device_id,\n    NULL,\n    f.session_id\n  FROM\n    funnel_base f\n    JOIN devices d\n    ON (\n      f.session_id = d.session_id\n    )\n),\nreg_started AS (\n  SELECT\n    p.northstar_id,\n    p.id AS post_id,\n    rtv.started_registration_utc AS started_registration,\n    rtv.tracking_source,\n    rtv.status\n  FROM\n    \"quasar_prod_warehouse\".\"public\".\"posts\"\n    p\n    LEFT JOIN \"quasar_prod_warehouse\".\"public\".\"rock_the_vote\"\n    rtv\n    ON (\n      p.id = rtv.post_id\n      AND rtv.status IS NOT NULL\n    )\n  WHERE\n    p.vr_source = 'web'\n    AND p.vr_source_details LIKE '%VoterRegQuiz%'\n    AND p.created_at >= '2020-01-01'\n),\nreg_completed AS (\n  --Registration events coming FROM web-based quiz\n  SELECT\n    r.northstar_id,\n    r.post_id,\n    rtv.tracking_source,\n    --r.post_created_at appears to be the UTC conversion of rock.started_registration\n    rtv.started_registration_utc AS started_registration\n  FROM\n    \"quasar_prod_warehouse\".\"public\".\"reportbacks\"\n    r\n    LEFT JOIN \"quasar_prod_warehouse\".\"public\".\"rock_the_vote\"\n    rtv\n    ON r.post_id = rtv.post_id\n  WHERE\n    r.post_bucket = 'voter_registrations'\n    AND r.vr_source = 'web'\n    AND r.vr_source_details LIKE '%VoterRegQuiz%'\n    AND r.post_created_at >= '2020-01-01'\n),\nfunnel_landing AS (\n  --The top of the funnel does not require authentication\n  --Pulling date AND creating yes/no flags for the initial 2 steps\n  SELECT\n    pec.device_id,\n    pec.session_id,\n    MIN(\n      psc.landing_datetime\n    ) AS session_landing_datetime,\n    MAX(\n      psc.ending_datetime\n    ) AS session_ending_datetime,\n    --Earliest page visit\n    MIN(\n      pec.event_datetime\n    ) AS journey_begin_ts,\n    --Create traffic source groupings\n    --TBD: maybe later we can create additional groups (social, search, etc)\n    MAX(\n      CASE\n        -- prev known as page_utm_campaign\n        WHEN pec.utm_campaign ILIKE '%niche%' THEN 'niche'\n        -- prev known as page_utm_campaign\n        WHEN pec.utm_campaign ILIKE '%fastweb%' THEN 'fastweb'\n        WHEN psc.session_referrer_host ILIKE '%dosomething%' THEN 'dosomething'\n        ELSE 'other'\n      END\n    ) AS traffic_source,\n    MAX(\n      CASE\n        WHEN pec.event_name IN (\n          'visit',\n          'view',\n          'phoenix_clicked_signup',\n          'phoenix_clicked_voter_registration_action'\n        ) THEN 1\n        ELSE 0\n      END\n    ) AS page_visit,\n    MAX(\n      CASE\n        WHEN pec.event_name = 'phoenix_clicked_signup' THEN 1\n        ELSE 0\n      END\n    ) AS click_join_us\n  FROM\n    \"quasar_prod_warehouse\".\"public\".\"snowplow_raw_events\"\n    pec\n    JOIN \"quasar_prod_warehouse\".\"public\".\"snowplow_sessions\"\n    psc\n    ON (\n      pec.session_id = psc.session_id\n    ) --URL of the VR quiz funnel\n  WHERE\n    pec.\"path\" ILIKE '%ready-vote%'\n    AND pec.event_datetime >= '2020-01-01'\n  GROUP BY\n    pec.device_id,\n    pec.session_id\n),\nfunnel_auth AS (\n  --The next steps of the funnel do require auTHENtication\n  --Pulling date AND creating yes/no flags for the following steps\n  SELECT\n    pec.session_id,\n    pec.northstar_id,\n    rc.post_id,\n    --Earliest page visit\n    MIN(\n      pec.event_datetime\n    ) AS journey_begin_ts,\n    --Latest click to rock the vote page event\n    MAX(\n      pec.event_datetime\n    ) filter(\n      WHERE\n        pec.event_name = 'phoenix_clicked_voter_registration_action'\n    ) AS max_click_registration_ts,\n    --latest quiz submission\n    MAX(\n      pec.event_datetime\n    ) filter(\n      WHERE\n        pec.event_name = 'phoenix_submitted_quiz'\n    ) AS max_submit_quiz_ts,\n    --latest registration timestamp\n    MAX(\n      rs.started_registration\n    ) AS latest_register_ts,\n    --latest registration start timestamp\n    MAX(\n      rc.started_registration\n    ) AS latest_get_started_ts,\n    --latest submit photo timestamp\n    MAX(\n      pec.event_datetime\n    ) filter(\n      WHERE\n        pec.event_name IN (\n          'phoenix_failed_post_request',\n          'phoenix_completed_post_request',\n          'phoenix_found_post_request',\n          'phoenix_submitted_photo_submission_action',\n          'phoenix_completed_photo_submission_action',\n          'phoenix_failed_photo_submission_action'\n        )\n    ) AS max_submit_photo_ts,\n    --Latest FB share timestamp\n    MAX(\n      pec.event_datetime\n    ) filter(\n      WHERE\n        pec.event_name = 'phoenix_clicked_share_action_facebook'\n    ) AS max_fb_share_ts,\n    MAX(\n      CASE\n        WHEN pec.northstar_id IS NOT NULL THEN 1\n        ELSE 0\n      END\n    ) AS authenticated,\n    MAX(\n      CASE\n        WHEN pec.event_name = 'phoenix_clicked_voter_registration_action' THEN 1\n        ELSE 0\n      END\n    ) AS click_start_registration,\n    MAX(\n      CASE\n        WHEN rs.post_id IS NOT NULL THEN 1\n        ELSE 0\n      END\n    ) AS clicked_get_started,\n    MAX(\n      CASE\n        WHEN rs.status IN (\n          'Step 2',\n          'Step 3',\n          'Step 4',\n          'Rejected',\n          'Under 18',\n          'Complete'\n        )\n        AND rs.tracking_source ILIKE '%VoterRegQuiz_Affirmation%' THEN 1\n        ELSE 0\n      END\n    ) AS rtv_step_2_affirmation,\n    MAX(\n      CASE\n        WHEN rs.status IN (\n          'Step 2',\n          'Step 3',\n          'Step 4',\n          'Rejected',\n          'Under 18',\n          'Complete'\n        )\n        AND rs.tracking_source ILIKE '%VoterRegQuiz_completed%' THEN 1\n        ELSE 0\n      END\n    ) AS rtv_step_2_quizcomplete,\n    MAX(\n      CASE\n        WHEN rs.status IN (\n          'Step 3',\n          'Step 4',\n          'Rejected',\n          'Under 18',\n          'Complete'\n        )\n        AND rs.tracking_source ILIKE '%VoterRegQuiz_Affirmation%' THEN 1\n        ELSE 0\n      END\n    ) AS rtv_step_3_affirmation,\n    MAX(\n      CASE\n        WHEN rs.status IN (\n          'Step 3',\n          'Step 4',\n          'Rejected',\n          'Under 18',\n          'Complete'\n        )\n        AND rs.tracking_source ILIKE '%VoterRegQuiz_completed%' THEN 1\n        ELSE 0\n      END\n    ) AS rtv_step_3_quizcomplete,\n    MAX(\n      CASE\n        WHEN rs.status IN (\n          'Step 4',\n          'Rejected',\n          'Under 18',\n          'Complete'\n        )\n        AND rs.tracking_source ILIKE '%VoterRegQuiz_Affirmation%' THEN 1\n        ELSE 0\n      END\n    ) AS rtv_step_4_affirmation,\n    MAX(\n      CASE\n        WHEN rs.status IN (\n          'Step 4',\n          'Rejected',\n          'Under 18',\n          'Complete'\n        )\n        AND rs.tracking_source ILIKE '%VoterRegQuiz_completed%' THEN 1\n        ELSE 0\n      END\n    ) AS rtv_step_4_quizcomplete,\n    MAX(\n      CASE\n        WHEN rs.status IN (\n          'Step 3',\n          'Step 4',\n          'Rejected',\n          'Under 18',\n          'Complete'\n        )\n        AND rs.tracking_source ILIKE '%VoterRegQuiz_Affirmation%' THEN 1\n        ELSE 0\n      END\n    ) AS rtv_step_3_or_4_affirmation,\n    MAX(\n      CASE\n        WHEN rs.status IN (\n          'Step 3',\n          'Step 4',\n          'Rejected',\n          'Under 18',\n          'Complete'\n        )\n        AND rs.tracking_source ILIKE '%VoterRegQuiz_completed%' THEN 1\n        ELSE 0\n      END\n    ) AS rtv_step_3_or_4_quizcomplete,\n    MAX(\n      CASE\n        WHEN rs.post_id IS NOT NULL\n        AND rs.tracking_source ILIKE '%VoterRegQuiz_Affirmation%' THEN 1\n        ELSE 0\n      END\n    ) AS clicked_get_started_affirmation,\n    MAX(\n      CASE\n        WHEN rs.post_id IS NOT NULL\n        AND rs.tracking_source ILIKE '%VoterRegQuiz_completed%' THEN 1\n        ELSE 0\n      END\n    ) AS clicked_get_started_quizcomplete,\n    MAX(\n      CASE\n        WHEN rc.northstar_id IS NOT NULL THEN 1\n        ELSE 0\n      END\n    ) AS registered,\n    MAX(\n      CASE\n        WHEN rc.northstar_id IS NOT NULL\n        AND rc.tracking_source ILIKE '%VoterRegQuiz_completed%' THEN 1\n        ELSE 0\n      END\n    ) AS registered_quizcomplete,\n    MAX(\n      CASE\n        WHEN rc.northstar_id IS NOT NULL\n        AND rc.tracking_source ILIKE '%VoterRegQuiz_Affirmation%' THEN 1\n        ELSE 0\n      END\n    ) AS registered_affirmation,\n    MAX(\n      CASE\n        WHEN pec.event_name = 'phoenix_clicked_share_action_facebook' THEN 1\n        ELSE 0\n      END\n    ) AS clicked_share_fb,\n    MAX(\n      CASE\n        WHEN pec.event_name = 'phoenix_submitted_quiz' THEN 1\n        ELSE 0\n      END\n    ) AS submitted_quiz,\n    MAX(\n      CASE\n        WHEN pec.event_name IN (\n          'phoenix_failed_post_request',\n          'phoenix_completed_post_request',\n          'phoenix_found_post_request',\n          'phoenix_submitted_photo_submission_action',\n          'phoenix_completed_photo_submission_action',\n          'phoenix_failed_photo_submission_action'\n        ) THEN 1\n        ELSE 0\n      END\n    ) AS clicked_submit_photo\n  FROM\n    \"quasar_prod_warehouse\".\"public\".\"snowplow_raw_events\"\n    pec\n    JOIN \"quasar_prod_warehouse\".\"public\".\"snowplow_sessions\"\n    psc\n    ON (\n      pec.session_id = psc.session_id\n    ) --Join northstar/session with voter reg activity FROM posts AND reportbacks\n    LEFT JOIN reg_started rs\n    ON (\n      rs.northstar_id = pec.northstar_id\n      AND rs.started_registration BETWEEN psc.landing_datetime\n      AND (\n        psc.ending_datetime + INTERVAL '15 minute'\n      )\n    )\n    LEFT JOIN reg_completed rc\n    ON (\n      rc.northstar_id = pec.northstar_id\n      AND rc.started_registration BETWEEN psc.landing_datetime\n      AND (\n        psc.ending_datetime + INTERVAL '15 minute'\n      )\n    )\n  WHERE\n    --URL of the VR quiz funnel\n    (\n      pec.\"path\" ILIKE '%ready-vote'\n      OR pec.\"path\" ILIKE '%ready-vote/%'\n    )\n    AND pec.northstar_id IS NOT NULL\n    AND pec.event_datetime >= '2020-01-01'\n  GROUP BY\n    pec.session_id,\n    pec.northstar_id,\n    rc.post_id\n) --We SELECT unique rows because some sessions are used by different northstar_id and this creates a multiplier effect WHEN joining funnel_landing and funnel_auth\nSELECT\n  DISTINCT s.device_id,\n  s.northstar_id,\n  s.session_id,\n  fl.session_landing_datetime,\n  fl.session_ending_datetime,\n  fl.journey_begin_ts AS journey_begin_ts,\n  fa.journey_begin_ts AS journey_begin_ts_northstar,\n  fa.post_id,\n  fa.max_click_registration_ts,\n  fa.max_submit_quiz_ts,\n  fa.latest_register_ts,\n  fa.latest_get_started_ts,\n  fa.max_submit_photo_ts,\n  fa.max_fb_share_ts,\n  fl.traffic_source,\n  fl.page_visit,\n  fl.click_join_us,\n  fa.authenticated,\n  fa.click_start_registration,\n  fa.clicked_get_started,\n  fa.rtv_step_2_affirmation,\n  fa.rtv_step_2_quizcomplete,\n  fa.rtv_step_3_affirmation,\n  fa.rtv_step_3_quizcomplete,\n  fa.rtv_step_4_affirmation,\n  fa.rtv_step_4_quizcomplete,\n  fa.rtv_step_3_or_4_affirmation,\n  fa.rtv_step_3_or_4_quizcomplete,\n  fa.clicked_get_started_affirmation,\n  fa.clicked_get_started_quizcomplete,\n  fa.registered,\n  fa.registered_quizcomplete,\n  fa.clicked_share_fb,\n  fa.registered_affirmation,\n  fa.submitted_quiz,\n  fa.clicked_submit_photo,\n  --additional flags from a combination and sequence of events\n  CASE\n    WHEN registered_affirmation = 1\n    AND max_submit_quiz_ts > max_click_registration_ts THEN 1\n    ELSE 0\n  END AS register_affirmation_THEN_quiz,\n  CASE\n    WHEN submitted_quiz = 1\n    AND registered_affirmation = 1\n    AND max_submit_quiz_ts < max_click_registration_ts THEN 1\n    ELSE 0\n  END AS submit_quiz_register_affirmation,\n  CASE\n    WHEN submitted_quiz = 1\n    AND registered_affirmation = 1\n    AND max_submit_quiz_ts > latest_register_ts\n    AND max_fb_share_ts > max_submit_quiz_ts THEN 1\n    ELSE 0\n  END AS share_quiz_post_register_affirm,\n  CASE\n    WHEN submitted_quiz = 1\n    AND registered_affirmation = 1\n    AND max_submit_quiz_ts > latest_register_ts\n    AND max_submit_photo_ts > max_submit_quiz_ts THEN 1\n    ELSE 0\n  END AS submit_photo_post_register_affirm,\n  CASE\n    WHEN submitted_quiz = 1\n    AND registered_quizcomplete = 1\n    AND max_submit_quiz_ts > latest_register_ts\n    AND max_fb_share_ts > max_submit_quiz_ts THEN 1\n    ELSE 0\n  END AS share_quiz_post_register_qcomp,\n  CASE\n    WHEN submitted_quiz = 1\n    AND registered_quizcomplete = 1\n    AND max_submit_quiz_ts > latest_register_ts\n    AND max_submit_photo_ts > max_submit_quiz_ts THEN 1\n    ELSE 0\n  END AS submit_photo_post_register_qcomp\nFROM\n  session_base s\n  LEFT JOIN funnel_landing fl\n  ON (\n    s.session_id = fl.session_id\n    AND s.device_id = fl.device_id\n  )\n  LEFT JOIN funnel_auth fa\n  ON (\n    s.session_id = fa.session_id\n    AND s.northstar_id = fa.northstar_id\n  )"}, "error": null, "status": null, "execution_time": 0.03775596618652344, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-02-23T21:28:56.224406Z", "completed_at": "2021-02-23T21:28:56.261062Z"}, {"name": "execute", "started_at": "2021-02-23T21:28:56.261362Z", "completed_at": "2021-02-23T21:28:56.261369Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='WARN') }}{{ test_is_between(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "is_between", "kwargs": {"bottom_number": 0, "top_number": 3600, "column_name": "session_duration_seconds", "model": "{{ ref('snowplow_sessions') }}"}}, "compiled": true, "database": "quasar_prod_warehouse", "schema": "public", "fqn": ["ds_dbt", "schema_test", "is_between_snowplow_sessions_0__session_duration_seconds__3600"], "unique_id": "test.ds_dbt.is_between_snowplow_sessions_0__session_duration_seconds__3600", "package_name": "ds_dbt", "root_path": "/home/runner/work/quasar/quasar/quasar/dbt", "path": "schema_test/is_between_snowplow_sessions_e479ab4f0a477f573d18652ec7bb9eba.sql", "original_file_path": "models/phoenix_events/schema.yml", "name": "is_between_snowplow_sessions_0__session_duration_seconds__3600", "resource_type": "test", "alias": "is_between_snowplow_sessions_0__session_duration_seconds__3600", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "WARN"}, "tags": ["schema"], "refs": [["snowplow_sessions"]], "sources": [], "depends_on": {"macros": ["macro.ds_dbt.test_is_between"], "nodes": ["model.ds_dbt.snowplow_sessions"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "../../docs/compiled/ds_dbt/models/phoenix_events/schema.yml/schema_test/is_between_snowplow_sessions_e479ab4f0a477f573d18652ec7bb9eba.sql", "deferred": false, "compiled_sql": "\n    WITH validation AS (\n        SELECT\n            session_duration_seconds AS field_to_test\n        FROM\n            \"quasar_prod_warehouse\".\"public\".\"snowplow_sessions\"\n    ),\n    validation_errors AS (\n        SELECT\n            field_to_test\n        FROM\n            validation\n        WHERE\n            field_to_test > 3600\n            OR field_to_test < 0\n    )\n    SELECT\n        count(*)\n    FROM\n        validation_errors\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n    WITH validation AS (\n        SELECT\n            session_duration_seconds AS field_to_test\n        FROM\n            \"quasar_prod_warehouse\".\"public\".\"snowplow_sessions\"\n    ),\n    validation_errors AS (\n        SELECT\n            field_to_test\n        FROM\n            validation\n        WHERE\n            field_to_test > 3600\n            OR field_to_test < 0\n    )\n    SELECT\n        count(*)\n    FROM\n        validation_errors\n", "column_name": "session_duration_seconds"}, "error": null, "status": null, "execution_time": 0.014338254928588867, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-02-23T21:28:56.262567Z", "completed_at": "2021-02-23T21:28:56.275782Z"}, {"name": "execute", "started_at": "2021-02-23T21:28:56.276119Z", "completed_at": "2021-02-23T21:28:56.276127Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='WARN') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "days_since_last_session", "model": "{{ ref('snowplow_sessions') }}"}}, "compiled": true, "database": "quasar_prod_warehouse", "schema": "public", "fqn": ["ds_dbt", "schema_test", "not_null_snowplow_sessions_days_since_last_session"], "unique_id": "test.ds_dbt.not_null_snowplow_sessions_days_since_last_session", "package_name": "ds_dbt", "root_path": "/home/runner/work/quasar/quasar/quasar/dbt", "path": "schema_test/not_null_snowplow_sessions_days_since_last_session.sql", "original_file_path": "models/phoenix_events/schema.yml", "name": "not_null_snowplow_sessions_days_since_last_session", "resource_type": "test", "alias": "not_null_snowplow_sessions_days_since_last_session", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "WARN"}, "tags": ["schema"], "refs": [["snowplow_sessions"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.ds_dbt.snowplow_sessions"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "../../docs/compiled/ds_dbt/models/phoenix_events/schema.yml/schema_test/not_null_snowplow_sessions_days_since_last_session.sql", "deferred": false, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom \"quasar_prod_warehouse\".\"public\".\"snowplow_sessions\"\nwhere days_since_last_session is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom \"quasar_prod_warehouse\".\"public\".\"snowplow_sessions\"\nwhere days_since_last_session is null\n\n\n", "column_name": "days_since_last_session"}, "error": null, "status": null, "execution_time": 0.012338399887084961, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-02-23T21:28:56.277368Z", "completed_at": "2021-02-23T21:28:56.288609Z"}, {"name": "execute", "started_at": "2021-02-23T21:28:56.288925Z", "completed_at": "2021-02-23T21:28:56.288931Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='WARN') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "device_id", "model": "{{ ref('snowplow_sessions') }}"}}, "compiled": true, "database": "quasar_prod_warehouse", "schema": "public", "fqn": ["ds_dbt", "schema_test", "not_null_snowplow_sessions_device_id"], "unique_id": "test.ds_dbt.not_null_snowplow_sessions_device_id", "package_name": "ds_dbt", "root_path": "/home/runner/work/quasar/quasar/quasar/dbt", "path": "schema_test/not_null_snowplow_sessions_device_id.sql", "original_file_path": "models/phoenix_events/schema.yml", "name": "not_null_snowplow_sessions_device_id", "resource_type": "test", "alias": "not_null_snowplow_sessions_device_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "WARN"}, "tags": ["schema"], "refs": [["snowplow_sessions"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.ds_dbt.snowplow_sessions"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "../../docs/compiled/ds_dbt/models/phoenix_events/schema.yml/schema_test/not_null_snowplow_sessions_device_id.sql", "deferred": false, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom \"quasar_prod_warehouse\".\"public\".\"snowplow_sessions\"\nwhere device_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom \"quasar_prod_warehouse\".\"public\".\"snowplow_sessions\"\nwhere device_id is null\n\n\n", "column_name": "device_id"}, "error": null, "status": null, "execution_time": 0.012408018112182617, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-02-23T21:28:56.290116Z", "completed_at": "2021-02-23T21:28:56.301409Z"}, {"name": "execute", "started_at": "2021-02-23T21:28:56.301780Z", "completed_at": "2021-02-23T21:28:56.301787Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='WARN') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "ending_datetime", "model": "{{ ref('snowplow_sessions') }}"}}, "compiled": true, "database": "quasar_prod_warehouse", "schema": "public", "fqn": ["ds_dbt", "schema_test", "not_null_snowplow_sessions_ending_datetime"], "unique_id": "test.ds_dbt.not_null_snowplow_sessions_ending_datetime", "package_name": "ds_dbt", "root_path": "/home/runner/work/quasar/quasar/quasar/dbt", "path": "schema_test/not_null_snowplow_sessions_ending_datetime.sql", "original_file_path": "models/phoenix_events/schema.yml", "name": "not_null_snowplow_sessions_ending_datetime", "resource_type": "test", "alias": "not_null_snowplow_sessions_ending_datetime", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "WARN"}, "tags": ["schema"], "refs": [["snowplow_sessions"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.ds_dbt.snowplow_sessions"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "../../docs/compiled/ds_dbt/models/phoenix_events/schema.yml/schema_test/not_null_snowplow_sessions_ending_datetime.sql", "deferred": false, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom \"quasar_prod_warehouse\".\"public\".\"snowplow_sessions\"\nwhere ending_datetime is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom \"quasar_prod_warehouse\".\"public\".\"snowplow_sessions\"\nwhere ending_datetime is null\n\n\n", "column_name": "ending_datetime"}, "error": null, "status": null, "execution_time": 0.012155532836914062, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-02-23T21:28:56.302963Z", "completed_at": "2021-02-23T21:28:56.314043Z"}, {"name": "execute", "started_at": "2021-02-23T21:28:56.314361Z", "completed_at": "2021-02-23T21:28:56.314367Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='WARN') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "exit_page", "model": "{{ ref('snowplow_sessions') }}"}}, "compiled": true, "database": "quasar_prod_warehouse", "schema": "public", "fqn": ["ds_dbt", "schema_test", "not_null_snowplow_sessions_exit_page"], "unique_id": "test.ds_dbt.not_null_snowplow_sessions_exit_page", "package_name": "ds_dbt", "root_path": "/home/runner/work/quasar/quasar/quasar/dbt", "path": "schema_test/not_null_snowplow_sessions_exit_page.sql", "original_file_path": "models/phoenix_events/schema.yml", "name": "not_null_snowplow_sessions_exit_page", "resource_type": "test", "alias": "not_null_snowplow_sessions_exit_page", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "WARN"}, "tags": ["schema"], "refs": [["snowplow_sessions"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.ds_dbt.snowplow_sessions"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "../../docs/compiled/ds_dbt/models/phoenix_events/schema.yml/schema_test/not_null_snowplow_sessions_exit_page.sql", "deferred": false, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom \"quasar_prod_warehouse\".\"public\".\"snowplow_sessions\"\nwhere exit_page is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom \"quasar_prod_warehouse\".\"public\".\"snowplow_sessions\"\nwhere exit_page is null\n\n\n", "column_name": "exit_page"}, "error": null, "status": null, "execution_time": 0.012144088745117188, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-02-23T21:28:56.315574Z", "completed_at": "2021-02-23T21:28:56.326655Z"}, {"name": "execute", "started_at": "2021-02-23T21:28:56.326986Z", "completed_at": "2021-02-23T21:28:56.326992Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='WARN') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "first_event_id", "model": "{{ ref('snowplow_sessions') }}"}}, "compiled": true, "database": "quasar_prod_warehouse", "schema": "public", "fqn": ["ds_dbt", "schema_test", "not_null_snowplow_sessions_first_event_id"], "unique_id": "test.ds_dbt.not_null_snowplow_sessions_first_event_id", "package_name": "ds_dbt", "root_path": "/home/runner/work/quasar/quasar/quasar/dbt", "path": "schema_test/not_null_snowplow_sessions_first_event_id.sql", "original_file_path": "models/phoenix_events/schema.yml", "name": "not_null_snowplow_sessions_first_event_id", "resource_type": "test", "alias": "not_null_snowplow_sessions_first_event_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "WARN"}, "tags": ["schema"], "refs": [["snowplow_sessions"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.ds_dbt.snowplow_sessions"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "../../docs/compiled/ds_dbt/models/phoenix_events/schema.yml/schema_test/not_null_snowplow_sessions_first_event_id.sql", "deferred": false, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom \"quasar_prod_warehouse\".\"public\".\"snowplow_sessions\"\nwhere first_event_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom \"quasar_prod_warehouse\".\"public\".\"snowplow_sessions\"\nwhere first_event_id is null\n\n\n", "column_name": "first_event_id"}, "error": null, "status": null, "execution_time": 0.012351036071777344, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-02-23T21:28:56.328161Z", "completed_at": "2021-02-23T21:28:56.339422Z"}, {"name": "execute", "started_at": "2021-02-23T21:28:56.339738Z", "completed_at": "2021-02-23T21:28:56.339745Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='WARN') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "landing_datetime", "model": "{{ ref('snowplow_sessions') }}"}}, "compiled": true, "database": "quasar_prod_warehouse", "schema": "public", "fqn": ["ds_dbt", "schema_test", "not_null_snowplow_sessions_landing_datetime"], "unique_id": "test.ds_dbt.not_null_snowplow_sessions_landing_datetime", "package_name": "ds_dbt", "root_path": "/home/runner/work/quasar/quasar/quasar/dbt", "path": "schema_test/not_null_snowplow_sessions_landing_datetime.sql", "original_file_path": "models/phoenix_events/schema.yml", "name": "not_null_snowplow_sessions_landing_datetime", "resource_type": "test", "alias": "not_null_snowplow_sessions_landing_datetime", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "WARN"}, "tags": ["schema"], "refs": [["snowplow_sessions"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.ds_dbt.snowplow_sessions"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "../../docs/compiled/ds_dbt/models/phoenix_events/schema.yml/schema_test/not_null_snowplow_sessions_landing_datetime.sql", "deferred": false, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom \"quasar_prod_warehouse\".\"public\".\"snowplow_sessions\"\nwhere landing_datetime is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom \"quasar_prod_warehouse\".\"public\".\"snowplow_sessions\"\nwhere landing_datetime is null\n\n\n", "column_name": "landing_datetime"}, "error": null, "status": null, "execution_time": 0.014644622802734375, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-02-23T21:28:56.340871Z", "completed_at": "2021-02-23T21:28:56.354048Z"}, {"name": "execute", "started_at": "2021-02-23T21:28:56.354346Z", "completed_at": "2021-02-23T21:28:56.354353Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='WARN') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "landing_page", "model": "{{ ref('snowplow_sessions') }}"}}, "compiled": true, "database": "quasar_prod_warehouse", "schema": "public", "fqn": ["ds_dbt", "schema_test", "not_null_snowplow_sessions_landing_page"], "unique_id": "test.ds_dbt.not_null_snowplow_sessions_landing_page", "package_name": "ds_dbt", "root_path": "/home/runner/work/quasar/quasar/quasar/dbt", "path": "schema_test/not_null_snowplow_sessions_landing_page.sql", "original_file_path": "models/phoenix_events/schema.yml", "name": "not_null_snowplow_sessions_landing_page", "resource_type": "test", "alias": "not_null_snowplow_sessions_landing_page", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "WARN"}, "tags": ["schema"], "refs": [["snowplow_sessions"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.ds_dbt.snowplow_sessions"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "../../docs/compiled/ds_dbt/models/phoenix_events/schema.yml/schema_test/not_null_snowplow_sessions_landing_page.sql", "deferred": false, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom \"quasar_prod_warehouse\".\"public\".\"snowplow_sessions\"\nwhere landing_page is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom \"quasar_prod_warehouse\".\"public\".\"snowplow_sessions\"\nwhere landing_page is null\n\n\n", "column_name": "landing_page"}, "error": null, "status": null, "execution_time": 0.01384735107421875, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-02-23T21:28:56.356763Z", "completed_at": "2021-02-23T21:28:56.369112Z"}, {"name": "execute", "started_at": "2021-02-23T21:28:56.369433Z", "completed_at": "2021-02-23T21:28:56.369440Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='WARN') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "num_pages_viewed", "model": "{{ ref('snowplow_sessions') }}"}}, "compiled": true, "database": "quasar_prod_warehouse", "schema": "public", "fqn": ["ds_dbt", "schema_test", "not_null_snowplow_sessions_num_pages_viewed"], "unique_id": "test.ds_dbt.not_null_snowplow_sessions_num_pages_viewed", "package_name": "ds_dbt", "root_path": "/home/runner/work/quasar/quasar/quasar/dbt", "path": "schema_test/not_null_snowplow_sessions_num_pages_viewed.sql", "original_file_path": "models/phoenix_events/schema.yml", "name": "not_null_snowplow_sessions_num_pages_viewed", "resource_type": "test", "alias": "not_null_snowplow_sessions_num_pages_viewed", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "WARN"}, "tags": ["schema"], "refs": [["snowplow_sessions"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.ds_dbt.snowplow_sessions"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "../../docs/compiled/ds_dbt/models/phoenix_events/schema.yml/schema_test/not_null_snowplow_sessions_num_pages_viewed.sql", "deferred": false, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom \"quasar_prod_warehouse\".\"public\".\"snowplow_sessions\"\nwhere num_pages_viewed is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom \"quasar_prod_warehouse\".\"public\".\"snowplow_sessions\"\nwhere num_pages_viewed is null\n\n\n", "column_name": "num_pages_viewed"}, "error": null, "status": null, "execution_time": 0.013543844223022461, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-02-23T21:28:56.370713Z", "completed_at": "2021-02-23T21:28:56.383136Z"}, {"name": "execute", "started_at": "2021-02-23T21:28:56.383438Z", "completed_at": "2021-02-23T21:28:56.383446Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='WARN') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "session_id", "model": "{{ ref('snowplow_sessions') }}"}}, "compiled": true, "database": "quasar_prod_warehouse", "schema": "public", "fqn": ["ds_dbt", "schema_test", "not_null_snowplow_sessions_session_id"], "unique_id": "test.ds_dbt.not_null_snowplow_sessions_session_id", "package_name": "ds_dbt", "root_path": "/home/runner/work/quasar/quasar/quasar/dbt", "path": "schema_test/not_null_snowplow_sessions_session_id.sql", "original_file_path": "models/phoenix_events/schema.yml", "name": "not_null_snowplow_sessions_session_id", "resource_type": "test", "alias": "not_null_snowplow_sessions_session_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "WARN"}, "tags": ["schema"], "refs": [["snowplow_sessions"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.ds_dbt.snowplow_sessions"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "../../docs/compiled/ds_dbt/models/phoenix_events/schema.yml/schema_test/not_null_snowplow_sessions_session_id.sql", "deferred": false, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom \"quasar_prod_warehouse\".\"public\".\"snowplow_sessions\"\nwhere session_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom \"quasar_prod_warehouse\".\"public\".\"snowplow_sessions\"\nwhere session_id is null\n\n\n", "column_name": "session_id"}, "error": null, "status": null, "execution_time": 0.015501737594604492, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-02-23T21:28:56.384810Z", "completed_at": "2021-02-23T21:28:56.399036Z"}, {"name": "execute", "started_at": "2021-02-23T21:28:56.399357Z", "completed_at": "2021-02-23T21:28:56.399363Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='WARN') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "device_id", "model": "{{ ref('snowplow_sessions') }}"}}, "compiled": true, "database": "quasar_prod_warehouse", "schema": "public", "fqn": ["ds_dbt", "schema_test", "unique_snowplow_sessions_device_id"], "unique_id": "test.ds_dbt.unique_snowplow_sessions_device_id", "package_name": "ds_dbt", "root_path": "/home/runner/work/quasar/quasar/quasar/dbt", "path": "schema_test/unique_snowplow_sessions_device_id.sql", "original_file_path": "models/phoenix_events/schema.yml", "name": "unique_snowplow_sessions_device_id", "resource_type": "test", "alias": "unique_snowplow_sessions_device_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "WARN"}, "tags": ["schema"], "refs": [["snowplow_sessions"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.ds_dbt.snowplow_sessions"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "../../docs/compiled/ds_dbt/models/phoenix_events/schema.yml/schema_test/unique_snowplow_sessions_device_id.sql", "deferred": false, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        device_id\n\n    from \"quasar_prod_warehouse\".\"public\".\"snowplow_sessions\"\n    where device_id is not null\n    group by device_id\n    having count(*) > 1\n\n) validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        device_id\n\n    from \"quasar_prod_warehouse\".\"public\".\"snowplow_sessions\"\n    where device_id is not null\n    group by device_id\n    having count(*) > 1\n\n) validation_errors\n\n\n", "column_name": "device_id"}, "error": null, "status": null, "execution_time": 0.012301921844482422, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-02-23T21:28:56.400476Z", "completed_at": "2021-02-23T21:28:56.411712Z"}, {"name": "execute", "started_at": "2021-02-23T21:28:56.412008Z", "completed_at": "2021-02-23T21:28:56.412015Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "device_id", "model": "{{ ref('device_northstar') }}"}}, "compiled": true, "database": "quasar_prod_warehouse", "schema": "public", "fqn": ["ds_dbt", "schema_test", "not_null_device_northstar_device_id"], "unique_id": "test.ds_dbt.not_null_device_northstar_device_id", "package_name": "ds_dbt", "root_path": "/home/runner/work/quasar/quasar/quasar/dbt", "path": "schema_test/not_null_device_northstar_device_id.sql", "original_file_path": "models/user_journey/schema.yml", "name": "not_null_device_northstar_device_id", "resource_type": "test", "alias": "not_null_device_northstar_device_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["device_northstar"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.ds_dbt.device_northstar"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "../../docs/compiled/ds_dbt/models/user_journey/schema.yml/schema_test/not_null_device_northstar_device_id.sql", "deferred": false, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom \"quasar_prod_warehouse\".\"public\".\"device_northstar\"\nwhere device_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom \"quasar_prod_warehouse\".\"public\".\"device_northstar\"\nwhere device_id is null\n\n\n", "column_name": "device_id"}, "error": null, "status": null, "execution_time": 0.012583017349243164, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-02-23T21:28:56.413101Z", "completed_at": "2021-02-23T21:28:56.424605Z"}, {"name": "execute", "started_at": "2021-02-23T21:28:56.424901Z", "completed_at": "2021-02-23T21:28:56.424908Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_relationships(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "relationships", "kwargs": {"to": "ref('users')", "field": "id", "column_name": "northstar_id", "model": "{{ ref('device_northstar') }}"}}, "compiled": true, "database": "quasar_prod_warehouse", "schema": "public", "fqn": ["ds_dbt", "schema_test", "relationships_device_northstar_northstar_id__id__ref_users_"], "unique_id": "test.ds_dbt.relationships_device_northstar_northstar_id__id__ref_users_", "package_name": "ds_dbt", "root_path": "/home/runner/work/quasar/quasar/quasar/dbt", "path": "schema_test/relationships_device_northstar_northstar_id__id__ref_users_.sql", "original_file_path": "models/user_journey/schema.yml", "name": "relationships_device_northstar_northstar_id__id__ref_users_", "resource_type": "test", "alias": "relationships_device_northstar_northstar_id__id__ref_users_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["users"], ["device_northstar"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_relationships"], "nodes": ["model.ds_dbt.users", "model.ds_dbt.device_northstar"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "../../docs/compiled/ds_dbt/models/user_journey/schema.yml/schema_test/relationships_device_northstar_northstar_id__id__ref_users_.sql", "deferred": false, "compiled_sql": "\n    \n    \n\n\n\n\nselect count(*) as validation_errors\nfrom (\n    select northstar_id as id from \"quasar_prod_warehouse\".\"public\".\"device_northstar\"\n) as child\nleft join (\n    select id as id from \"quasar_prod_warehouse\".\"public\".\"users\"\n) as parent on parent.id = child.id\nwhere child.id is not null\n  and parent.id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n    \n    \n\n\n\n\nselect count(*) as validation_errors\nfrom (\n    select northstar_id as id from \"quasar_prod_warehouse\".\"public\".\"device_northstar\"\n) as child\nleft join (\n    select id as id from \"quasar_prod_warehouse\".\"public\".\"users\"\n) as parent on parent.id = child.id\nwhere child.id is not null\n  and parent.id is null\n\n\n", "column_name": "northstar_id"}, "error": null, "status": null, "execution_time": 0.01416468620300293, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-02-23T21:28:56.426161Z", "completed_at": "2021-02-23T21:28:56.439232Z"}, {"name": "execute", "started_at": "2021-02-23T21:28:56.439527Z", "completed_at": "2021-02-23T21:28:56.439534Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "WITH\nrb_summary AS (\n    SELECT\n\tr_with_lag.northstar_id,\n\tsum(r_with_lag.reportback_volume) AS total_quantity,\n\tcount(DISTINCT r_with_lag.campaign_id) AS num_rbs,\n\tmax(r_with_lag.post_created_at) AS most_recent_rb,\n\tmin(r_with_lag.post_created_at) AS first_rb,\n\tavg(r_with_lag.time_betw_rbs) AS avg_time_betw_rbs\n    FROM (\n\tSELECT\n\t    *,\n\t    post_created_at - lag(post_created_at) OVER (\n\t\tPARTITION BY northstar_id ORDER BY post_created_at) AS time_betw_rbs\n\tFROM {{ ref('reportbacks') }}\n    ) r_with_lag\n    GROUP BY r_with_lag.northstar_id\n),\ngambit_unsub AS (\n    SELECT\n\tf.user_id,\n\tCASE WHEN f.last_macro = 'subscriptionStatusStop' OR f.last_topic = 'unsubscribed'\n\tTHEN f.last_ts ELSE NULL END AS unsub_ts\n    FROM (\n\tSELECT DISTINCT\n\t    user_id,\n\t    LAST_VALUE(macro) OVER (PARTITION BY user_id ORDER BY created_at\n\t\tRANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS last_macro,\n\t    LAST_VALUE(topic) OVER (PARTITION BY user_id ORDER BY created_at\n\t\tRANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS last_topic,\n\t    LAST_VALUE(created_at) OVER (PARTITION BY user_id ORDER BY created_at\n\t\tRANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS last_ts\n\tFROM {{ ref('gambit_messages_inbound') }}\n    ) f\n),\n-- If the member's sms_status is 'unknown', 'undeliverable' or 'GDPR'.\n-- The timestamp of when it was last updated in the user's app database is used\n-- as the timestamp this user was set as undeliverable.\n-- More details on the decision why we are using this logic as a \"good enough\" proxy\n-- to the real undeliverability timestamp can be found in https://www.pivotaltracker.com/story/show/171448501\nsms_undeliverable AS (\n    SELECT DISTINCT\n\t    northstar_id,\n\t    FIRST_VALUE(updated_at) OVER (PARTITION BY northstar_id ORDER BY updated_at\n\t\tROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS undeliverable_ts\n    FROM {{ ref('northstar_users_deduped') }}\n    WHERE sms_status IN ('unknown', 'undeliverable', 'GDPR')\n),\nemail_unsub AS (\n    SELECT\n\tf.customer_id,\n\tCASE WHEN f.last_status = 'customer_unsubscribed' THEN f.last_ts ELSE NULL\n\t    END AS email_unsubscribed_at\n    FROM (\n\tSELECT DISTINCT\n\t    customer_id,\n\t    LAST_VALUE(\"timestamp\") OVER (\n\t\tPARTITION BY customer_id ORDER BY \"timestamp\", event_type\n\t\tRANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS last_ts,\n\t    LAST_VALUE(event_type) OVER (\n\t\tPARTITION BY customer_id ORDER BY \"timestamp\", event_type\n\t\tRANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS last_status\n\t    FROM {{ ref('cio_customer_event') }}\n    ) f\n),\ntime_to_actions AS (\n    SELECT\n\tf.northstar_id,\n\tavg(date_part('day', f.time_to_next_action)) AS avg_days_next_action_after_rb,\n\tmin(date_part('day', f.time_to_next_action_last_rb)) AS days_to_next_action_after_last_rb\n    FROM (\n\tSELECT\n\t    r.northstar_id,\n\t    mel.next_action_ts - r.post_created_at AS time_to_next_action,\n\t    LAST_VALUE(mel.next_action_ts - r.post_created_at) OVER (\n\t\tPARTITION BY r.northstar_id ORDER BY r.post_created_at\n\t\tROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING\n\t    ) AS time_to_next_action_last_rb\n\tFROM {{ ref('reportbacks') }} r\n\tLEFT JOIN LATERAL (\n\t    SELECT \"timestamp\" AS next_action_ts, action_type AS next_action_type\n\t    FROM {{ ref('member_event_log') }}\n\t    WHERE northstar_id = r.northstar_id AND \"timestamp\" > r.post_created_at\n\t    ORDER BY \"timestamp\" ASC\n\t    LIMIT 1\n\t) mel\n\tON TRUE\n    ) f\n    GROUP BY f.northstar_id\n)\nSELECT\nu.northstar_id,\nu.created_at,\nu.sms_status,\nu.cio_status AS email_status,\ns.num_signups,\ns.most_recent_signup,\nr.num_rbs,\nr.total_quantity,\nr.most_recent_rb,\nr.first_rb,\nr.avg_time_betw_rbs,\ntime_to_actions.avg_days_next_action_after_rb,\ntime_to_actions.days_to_next_action_after_last_rb,\nmel.most_recent_action AS most_recent_mam_action,\nemail_opens.most_recent_email_open,\ngreatest(\n    mel.most_recent_action,\n    email_opens.most_recent_email_open\n) AS most_recent_all_actions,\nCASE WHEN time_to_actions.days_to_next_action_after_last_rb IS NULL\n    AND r.num_rbs > 0 THEN TRUE END AS last_action_is_rb,\nDATE_PART(\n    'day', now() - greatest(mel.most_recent_action, email_opens.most_recent_email_open)\n) as days_since_last_action,\n(r.first_rb - u.created_at) AS time_to_first_rb,\ngambit_unsub.unsub_ts AS sms_unsubscribed_at,\nsms_undeliverable.undeliverable_ts AS sms_undeliverable_at,\nemail_unsub.email_unsubscribed_at,\nCASE WHEN u.subscribed_member IS FALSE\n    THEN greatest(\n\tgambit_unsub.unsub_ts,\n\temail_unsub.email_unsubscribed_at) ELSE NULL\n    END AS user_unsubscribed_at,\nCASE WHEN u.\"source\" = 'importer-client' AND p.first_post = 'voter-reg'\n    THEN 1 ELSE 0 END AS voter_reg_acquisition\nFROM {{ ref('users') }} u\nLEFT JOIN (\nSELECT\n    northstar_id,\n    count(DISTINCT campaign_id) AS num_signups,\n    max(created_at) AS most_recent_signup\nFROM {{ ref('signups') }}\nGROUP BY northstar_id\n) s\nON u.northstar_id = s.northstar_id\nLEFT JOIN rb_summary r\nON u.northstar_id = r.northstar_id\nLEFT JOIN (\n    SELECT northstar_id, max(\"timestamp\") AS most_recent_action\n    FROM {{ ref('member_event_log') }}\n    GROUP BY northstar_id\n) mel\nON u.northstar_id = mel.northstar_id\nLEFT JOIN (\n    SELECT customer_id, max(\"timestamp\") AS most_recent_email_open\n    FROM {{ ref('cio_email_events') }}\n    WHERE event_type = 'email_opened'\n    GROUP BY customer_id\n) email_opens\nON u.northstar_id = email_opens.customer_id\nLEFT JOIN gambit_unsub\nON u.northstar_id = gambit_unsub.user_id\nLEFT JOIN sms_undeliverable\nON u.northstar_id = sms_undeliverable.northstar_id\nLEFT JOIN email_unsub\nON u.northstar_id = email_unsub.customer_id\nLEFT JOIN time_to_actions\nON u.northstar_id = time_to_actions.northstar_id\nLEFT JOIN (\n    SELECT DISTINCT\n\tnorthstar_id,\n\tFIRST_VALUE(\"type\") OVER (\n\t    PARTITION BY northstar_id ORDER BY created_at) AS first_post\n    FROM {{ ref('posts') }}\n) p\nON u.northstar_id = p.northstar_id", "compiled": true, "database": "quasar_prod_warehouse", "schema": "public", "fqn": ["ds_dbt", "user_activity", "user_activity"], "unique_id": "model.ds_dbt.user_activity", "package_name": "ds_dbt", "root_path": "/home/runner/work/quasar/quasar/quasar/dbt", "path": "user_activity/user_activity.sql", "original_file_path": "models/user_activity/user_activity.sql", "name": "user_activity", "resource_type": "model", "alias": "user_activity", "checksum": {"name": "sha256", "checksum": "ff6f9201e4b451e57e4271abf0dd68ed122ecd7cceb4d934d133c5eee796fed5"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [{"sql": "CREATE UNIQUE INDEX {{ get_index_name(this, 'unique_created_at_northstar_id') }} (created_at, northstar_id)", "transaction": true, "index": null}, {"sql": "CREATE INDEX {{ get_index_name(this, 'most_recent_all_actions') }} (most_recent_all_actions)", "transaction": true, "index": null}, {"sql": "{{ grant_select_to(this, ['dsanalyst', 'looker']) }}", "transaction": true, "index": null}], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": "user_activity", "schema": null, "database": null, "tags": ["user_activity"], "full_refresh": null}, "tags": ["user_activity"], "refs": [["reportbacks"], ["gambit_messages_inbound"], ["northstar_users_deduped"], ["cio_customer_event"], ["reportbacks"], ["member_event_log"], ["users"], ["signups"], ["member_event_log"], ["cio_email_events"], ["posts"]], "sources": [], "depends_on": {"macros": ["macro.ds_dbt.get_index_name", "macro.ds_dbt.grant_select_to"], "nodes": ["model.ds_dbt.reportbacks", "model.ds_dbt.gambit_messages_inbound", "model.ds_dbt.northstar_users_deduped", "model.ds_dbt.cio_customer_event", "model.ds_dbt.reportbacks", "model.ds_dbt.member_event_log", "model.ds_dbt.users", "model.ds_dbt.signups", "model.ds_dbt.member_event_log", "model.ds_dbt.cio_email_events", "model.ds_dbt.posts"]}, "description": "Table containing aggregated user activity data.", "columns": {"northstar_id": {"name": "northstar_id", "description": "The Northstar ID of the user who generated the event.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "When the item was created in UTC (eg. 2018-01-01 12:00:00)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sms_status": {"name": "sms_status", "description": "Current SMS status. (e.g. undeliverable, unknown)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "email_status": {"name": "email_status", "description": "Status of user from CIO. (e.g. customer_subscribed, customer_unsubscribed)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "num_signups": {"name": "num_signups", "description": "Quantity of campaign signups", "meta": {}, "data_type": null, "quote": null, "tags": []}, "most_recent_signup": {"name": "most_recent_signup", "description": "Timestamp of the most recent signup in UTC (eg. 2018-01-01 12:00:00)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "num_rbs": {"name": "num_rbs", "description": "Quantity of reportbacks for the user", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_quantity": {"name": "total_quantity", "description": "Total quantity of items in reportbacks", "meta": {}, "data_type": null, "quote": null, "tags": []}, "most_recent_rb": {"name": "most_recent_rb", "description": "When the most recent reportback occurred in UTC (eg. 2018-01-01 12:00:00)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "first_rb": {"name": "first_rb", "description": "When the first reportback occurred in UTC (eg. 2018-01-01 12:00:00)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "avg_time_betw_rbs": {"name": "avg_time_betw_rbs", "description": "Calculated average time between reportbacks.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "avg_days_next_action_after_rb": {"name": "avg_days_next_action_after_rb", "description": "Calculated average days until next action after reportback", "meta": {}, "data_type": null, "quote": null, "tags": []}, "days_to_next_action_after_last_rb": {"name": "days_to_next_action_after_last_rb", "description": "This is a unique identifier for each event", "meta": {}, "data_type": null, "quote": null, "tags": []}, "most_recent_mam_action": {"name": "most_recent_mam_action", "description": "Most recent monthly active member qualifying action in UTC (eg. 2018-01-01 12:00:00).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "most_recent_email_open": {"name": "most_recent_email_open", "description": "Most recent email open in UTC (eg. 2018-01-01 12:00:00)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "most_recent_all_actions": {"name": "most_recent_all_actions", "description": "Most recent timestamp of any action in UTC (eg. 2018-01-01 12:00:00)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_action_is_rb": {"name": "last_action_is_rb", "description": "Whether the last action the user took was a reportback", "meta": {}, "data_type": null, "quote": null, "tags": []}, "days_since_last_action": {"name": "days_since_last_action", "description": "Days since the user's last action", "meta": {}, "data_type": null, "quote": null, "tags": []}, "time_to_first_rb": {"name": "time_to_first_rb", "description": "How much time after registering until the user's first reportback", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sms_unsubscribed_at": {"name": "sms_unsubscribed_at", "description": "Timestamp of when user unsubscribed from email or sms", "meta": {}, "data_type": null, "quote": null, "tags": []}, "user_unsubscribed_at": {"name": "user_unsubscribed_at", "description": "Timestamp of when user unsubscribed from email or sms", "meta": {}, "data_type": null, "quote": null, "tags": []}, "voter_reg_acquisition": {"name": "voter_reg_acquisition", "description": "Whether the user was an acquisition through voter registration efforts.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/user_activity/schema.yml", "build_path": "../../docs/compiled/ds_dbt/models/user_activity/user_activity.sql", "deferred": false, "compiled_sql": "WITH\nrb_summary AS (\n    SELECT\n\tr_with_lag.northstar_id,\n\tsum(r_with_lag.reportback_volume) AS total_quantity,\n\tcount(DISTINCT r_with_lag.campaign_id) AS num_rbs,\n\tmax(r_with_lag.post_created_at) AS most_recent_rb,\n\tmin(r_with_lag.post_created_at) AS first_rb,\n\tavg(r_with_lag.time_betw_rbs) AS avg_time_betw_rbs\n    FROM (\n\tSELECT\n\t    *,\n\t    post_created_at - lag(post_created_at) OVER (\n\t\tPARTITION BY northstar_id ORDER BY post_created_at) AS time_betw_rbs\n\tFROM \"quasar_prod_warehouse\".\"public\".\"reportbacks\"\n    ) r_with_lag\n    GROUP BY r_with_lag.northstar_id\n),\ngambit_unsub AS (\n    SELECT\n\tf.user_id,\n\tCASE WHEN f.last_macro = 'subscriptionStatusStop' OR f.last_topic = 'unsubscribed'\n\tTHEN f.last_ts ELSE NULL END AS unsub_ts\n    FROM (\n\tSELECT DISTINCT\n\t    user_id,\n\t    LAST_VALUE(macro) OVER (PARTITION BY user_id ORDER BY created_at\n\t\tRANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS last_macro,\n\t    LAST_VALUE(topic) OVER (PARTITION BY user_id ORDER BY created_at\n\t\tRANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS last_topic,\n\t    LAST_VALUE(created_at) OVER (PARTITION BY user_id ORDER BY created_at\n\t\tRANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS last_ts\n\tFROM \"quasar_prod_warehouse\".\"public\".\"gambit_messages_inbound\"\n    ) f\n),\n-- If the member's sms_status is 'unknown', 'undeliverable' or 'GDPR'.\n-- The timestamp of when it was last updated in the user's app database is used\n-- as the timestamp this user was set as undeliverable.\n-- More details on the decision why we are using this logic as a \"good enough\" proxy\n-- to the real undeliverability timestamp can be found in https://www.pivotaltracker.com/story/show/171448501\nsms_undeliverable AS (\n    SELECT DISTINCT\n\t    northstar_id,\n\t    FIRST_VALUE(updated_at) OVER (PARTITION BY northstar_id ORDER BY updated_at\n\t\tROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS undeliverable_ts\n    FROM \"quasar_prod_warehouse\".\"public\".\"northstar_users_deduped\"\n    WHERE sms_status IN ('unknown', 'undeliverable', 'GDPR')\n),\nemail_unsub AS (\n    SELECT\n\tf.customer_id,\n\tCASE WHEN f.last_status = 'customer_unsubscribed' THEN f.last_ts ELSE NULL\n\t    END AS email_unsubscribed_at\n    FROM (\n\tSELECT DISTINCT\n\t    customer_id,\n\t    LAST_VALUE(\"timestamp\") OVER (\n\t\tPARTITION BY customer_id ORDER BY \"timestamp\", event_type\n\t\tRANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS last_ts,\n\t    LAST_VALUE(event_type) OVER (\n\t\tPARTITION BY customer_id ORDER BY \"timestamp\", event_type\n\t\tRANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS last_status\n\t    FROM \"quasar_prod_warehouse\".\"public\".\"cio_customer_event\"\n    ) f\n),\ntime_to_actions AS (\n    SELECT\n\tf.northstar_id,\n\tavg(date_part('day', f.time_to_next_action)) AS avg_days_next_action_after_rb,\n\tmin(date_part('day', f.time_to_next_action_last_rb)) AS days_to_next_action_after_last_rb\n    FROM (\n\tSELECT\n\t    r.northstar_id,\n\t    mel.next_action_ts - r.post_created_at AS time_to_next_action,\n\t    LAST_VALUE(mel.next_action_ts - r.post_created_at) OVER (\n\t\tPARTITION BY r.northstar_id ORDER BY r.post_created_at\n\t\tROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING\n\t    ) AS time_to_next_action_last_rb\n\tFROM \"quasar_prod_warehouse\".\"public\".\"reportbacks\" r\n\tLEFT JOIN LATERAL (\n\t    SELECT \"timestamp\" AS next_action_ts, action_type AS next_action_type\n\t    FROM \"quasar_prod_warehouse\".\"public\".\"member_event_log\"\n\t    WHERE northstar_id = r.northstar_id AND \"timestamp\" > r.post_created_at\n\t    ORDER BY \"timestamp\" ASC\n\t    LIMIT 1\n\t) mel\n\tON TRUE\n    ) f\n    GROUP BY f.northstar_id\n)\nSELECT\nu.northstar_id,\nu.created_at,\nu.sms_status,\nu.cio_status AS email_status,\ns.num_signups,\ns.most_recent_signup,\nr.num_rbs,\nr.total_quantity,\nr.most_recent_rb,\nr.first_rb,\nr.avg_time_betw_rbs,\ntime_to_actions.avg_days_next_action_after_rb,\ntime_to_actions.days_to_next_action_after_last_rb,\nmel.most_recent_action AS most_recent_mam_action,\nemail_opens.most_recent_email_open,\ngreatest(\n    mel.most_recent_action,\n    email_opens.most_recent_email_open\n) AS most_recent_all_actions,\nCASE WHEN time_to_actions.days_to_next_action_after_last_rb IS NULL\n    AND r.num_rbs > 0 THEN TRUE END AS last_action_is_rb,\nDATE_PART(\n    'day', now() - greatest(mel.most_recent_action, email_opens.most_recent_email_open)\n) as days_since_last_action,\n(r.first_rb - u.created_at) AS time_to_first_rb,\ngambit_unsub.unsub_ts AS sms_unsubscribed_at,\nsms_undeliverable.undeliverable_ts AS sms_undeliverable_at,\nemail_unsub.email_unsubscribed_at,\nCASE WHEN u.subscribed_member IS FALSE\n    THEN greatest(\n\tgambit_unsub.unsub_ts,\n\temail_unsub.email_unsubscribed_at) ELSE NULL\n    END AS user_unsubscribed_at,\nCASE WHEN u.\"source\" = 'importer-client' AND p.first_post = 'voter-reg'\n    THEN 1 ELSE 0 END AS voter_reg_acquisition\nFROM \"quasar_prod_warehouse\".\"public\".\"users\" u\nLEFT JOIN (\nSELECT\n    northstar_id,\n    count(DISTINCT campaign_id) AS num_signups,\n    max(created_at) AS most_recent_signup\nFROM \"quasar_prod_warehouse\".\"public\".\"signups\"\nGROUP BY northstar_id\n) s\nON u.northstar_id = s.northstar_id\nLEFT JOIN rb_summary r\nON u.northstar_id = r.northstar_id\nLEFT JOIN (\n    SELECT northstar_id, max(\"timestamp\") AS most_recent_action\n    FROM \"quasar_prod_warehouse\".\"public\".\"member_event_log\"\n    GROUP BY northstar_id\n) mel\nON u.northstar_id = mel.northstar_id\nLEFT JOIN (\n    SELECT customer_id, max(\"timestamp\") AS most_recent_email_open\n    FROM \"quasar_prod_warehouse\".\"public\".\"cio_email_events\"\n    WHERE event_type = 'email_opened'\n    GROUP BY customer_id\n) email_opens\nON u.northstar_id = email_opens.customer_id\nLEFT JOIN gambit_unsub\nON u.northstar_id = gambit_unsub.user_id\nLEFT JOIN sms_undeliverable\nON u.northstar_id = sms_undeliverable.northstar_id\nLEFT JOIN email_unsub\nON u.northstar_id = email_unsub.customer_id\nLEFT JOIN time_to_actions\nON u.northstar_id = time_to_actions.northstar_id\nLEFT JOIN (\n    SELECT DISTINCT\n\tnorthstar_id,\n\tFIRST_VALUE(\"type\") OVER (\n\t    PARTITION BY northstar_id ORDER BY created_at) AS first_post\n    FROM \"quasar_prod_warehouse\".\"public\".\"posts\"\n) p\nON u.northstar_id = p.northstar_id", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "WITH\nrb_summary AS (\n    SELECT\n\tr_with_lag.northstar_id,\n\tsum(r_with_lag.reportback_volume) AS total_quantity,\n\tcount(DISTINCT r_with_lag.campaign_id) AS num_rbs,\n\tmax(r_with_lag.post_created_at) AS most_recent_rb,\n\tmin(r_with_lag.post_created_at) AS first_rb,\n\tavg(r_with_lag.time_betw_rbs) AS avg_time_betw_rbs\n    FROM (\n\tSELECT\n\t    *,\n\t    post_created_at - lag(post_created_at) OVER (\n\t\tPARTITION BY northstar_id ORDER BY post_created_at) AS time_betw_rbs\n\tFROM \"quasar_prod_warehouse\".\"public\".\"reportbacks\"\n    ) r_with_lag\n    GROUP BY r_with_lag.northstar_id\n),\ngambit_unsub AS (\n    SELECT\n\tf.user_id,\n\tCASE WHEN f.last_macro = 'subscriptionStatusStop' OR f.last_topic = 'unsubscribed'\n\tTHEN f.last_ts ELSE NULL END AS unsub_ts\n    FROM (\n\tSELECT DISTINCT\n\t    user_id,\n\t    LAST_VALUE(macro) OVER (PARTITION BY user_id ORDER BY created_at\n\t\tRANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS last_macro,\n\t    LAST_VALUE(topic) OVER (PARTITION BY user_id ORDER BY created_at\n\t\tRANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS last_topic,\n\t    LAST_VALUE(created_at) OVER (PARTITION BY user_id ORDER BY created_at\n\t\tRANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS last_ts\n\tFROM \"quasar_prod_warehouse\".\"public\".\"gambit_messages_inbound\"\n    ) f\n),\n-- If the member's sms_status is 'unknown', 'undeliverable' or 'GDPR'.\n-- The timestamp of when it was last updated in the user's app database is used\n-- as the timestamp this user was set as undeliverable.\n-- More details on the decision why we are using this logic as a \"good enough\" proxy\n-- to the real undeliverability timestamp can be found in https://www.pivotaltracker.com/story/show/171448501\nsms_undeliverable AS (\n    SELECT DISTINCT\n\t    northstar_id,\n\t    FIRST_VALUE(updated_at) OVER (PARTITION BY northstar_id ORDER BY updated_at\n\t\tROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS undeliverable_ts\n    FROM \"quasar_prod_warehouse\".\"public\".\"northstar_users_deduped\"\n    WHERE sms_status IN ('unknown', 'undeliverable', 'GDPR')\n),\nemail_unsub AS (\n    SELECT\n\tf.customer_id,\n\tCASE WHEN f.last_status = 'customer_unsubscribed' THEN f.last_ts ELSE NULL\n\t    END AS email_unsubscribed_at\n    FROM (\n\tSELECT DISTINCT\n\t    customer_id,\n\t    LAST_VALUE(\"timestamp\") OVER (\n\t\tPARTITION BY customer_id ORDER BY \"timestamp\", event_type\n\t\tRANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS last_ts,\n\t    LAST_VALUE(event_type) OVER (\n\t\tPARTITION BY customer_id ORDER BY \"timestamp\", event_type\n\t\tRANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS last_status\n\t    FROM \"quasar_prod_warehouse\".\"public\".\"cio_customer_event\"\n    ) f\n),\ntime_to_actions AS (\n    SELECT\n\tf.northstar_id,\n\tavg(date_part('day', f.time_to_next_action)) AS avg_days_next_action_after_rb,\n\tmin(date_part('day', f.time_to_next_action_last_rb)) AS days_to_next_action_after_last_rb\n    FROM (\n\tSELECT\n\t    r.northstar_id,\n\t    mel.next_action_ts - r.post_created_at AS time_to_next_action,\n\t    LAST_VALUE(mel.next_action_ts - r.post_created_at) OVER (\n\t\tPARTITION BY r.northstar_id ORDER BY r.post_created_at\n\t\tROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING\n\t    ) AS time_to_next_action_last_rb\n\tFROM \"quasar_prod_warehouse\".\"public\".\"reportbacks\" r\n\tLEFT JOIN LATERAL (\n\t    SELECT \"timestamp\" AS next_action_ts, action_type AS next_action_type\n\t    FROM \"quasar_prod_warehouse\".\"public\".\"member_event_log\"\n\t    WHERE northstar_id = r.northstar_id AND \"timestamp\" > r.post_created_at\n\t    ORDER BY \"timestamp\" ASC\n\t    LIMIT 1\n\t) mel\n\tON TRUE\n    ) f\n    GROUP BY f.northstar_id\n)\nSELECT\nu.northstar_id,\nu.created_at,\nu.sms_status,\nu.cio_status AS email_status,\ns.num_signups,\ns.most_recent_signup,\nr.num_rbs,\nr.total_quantity,\nr.most_recent_rb,\nr.first_rb,\nr.avg_time_betw_rbs,\ntime_to_actions.avg_days_next_action_after_rb,\ntime_to_actions.days_to_next_action_after_last_rb,\nmel.most_recent_action AS most_recent_mam_action,\nemail_opens.most_recent_email_open,\ngreatest(\n    mel.most_recent_action,\n    email_opens.most_recent_email_open\n) AS most_recent_all_actions,\nCASE WHEN time_to_actions.days_to_next_action_after_last_rb IS NULL\n    AND r.num_rbs > 0 THEN TRUE END AS last_action_is_rb,\nDATE_PART(\n    'day', now() - greatest(mel.most_recent_action, email_opens.most_recent_email_open)\n) as days_since_last_action,\n(r.first_rb - u.created_at) AS time_to_first_rb,\ngambit_unsub.unsub_ts AS sms_unsubscribed_at,\nsms_undeliverable.undeliverable_ts AS sms_undeliverable_at,\nemail_unsub.email_unsubscribed_at,\nCASE WHEN u.subscribed_member IS FALSE\n    THEN greatest(\n\tgambit_unsub.unsub_ts,\n\temail_unsub.email_unsubscribed_at) ELSE NULL\n    END AS user_unsubscribed_at,\nCASE WHEN u.\"source\" = 'importer-client' AND p.first_post = 'voter-reg'\n    THEN 1 ELSE 0 END AS voter_reg_acquisition\nFROM \"quasar_prod_warehouse\".\"public\".\"users\" u\nLEFT JOIN (\nSELECT\n    northstar_id,\n    count(DISTINCT campaign_id) AS num_signups,\n    max(created_at) AS most_recent_signup\nFROM \"quasar_prod_warehouse\".\"public\".\"signups\"\nGROUP BY northstar_id\n) s\nON u.northstar_id = s.northstar_id\nLEFT JOIN rb_summary r\nON u.northstar_id = r.northstar_id\nLEFT JOIN (\n    SELECT northstar_id, max(\"timestamp\") AS most_recent_action\n    FROM \"quasar_prod_warehouse\".\"public\".\"member_event_log\"\n    GROUP BY northstar_id\n) mel\nON u.northstar_id = mel.northstar_id\nLEFT JOIN (\n    SELECT customer_id, max(\"timestamp\") AS most_recent_email_open\n    FROM \"quasar_prod_warehouse\".\"public\".\"cio_email_events\"\n    WHERE event_type = 'email_opened'\n    GROUP BY customer_id\n) email_opens\nON u.northstar_id = email_opens.customer_id\nLEFT JOIN gambit_unsub\nON u.northstar_id = gambit_unsub.user_id\nLEFT JOIN sms_undeliverable\nON u.northstar_id = sms_undeliverable.northstar_id\nLEFT JOIN email_unsub\nON u.northstar_id = email_unsub.customer_id\nLEFT JOIN time_to_actions\nON u.northstar_id = time_to_actions.northstar_id\nLEFT JOIN (\n    SELECT DISTINCT\n\tnorthstar_id,\n\tFIRST_VALUE(\"type\") OVER (\n\t    PARTITION BY northstar_id ORDER BY created_at) AS first_post\n    FROM \"quasar_prod_warehouse\".\"public\".\"posts\"\n) p\nON u.northstar_id = p.northstar_id"}, "error": null, "status": null, "execution_time": 0.04003477096557617, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-02-23T21:28:56.440679Z", "completed_at": "2021-02-23T21:28:56.479588Z"}, {"name": "execute", "started_at": "2021-02-23T21:28:56.479892Z", "completed_at": "2021-02-23T21:28:56.479900Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "WITH\nuser_mam AS (\n\tSELECT northstar_id, min(date(timestamp)) AS first_mam, max(date(timestamp)) AS last_mam\n\tFROM {{ ref('member_event_log') }}\n\tWHERE action_type <> 'account_creation'\n\tAND timestamp >= '2008-01-01'\n\tGROUP BY 1\n)\nSELECT u.northstar_id, u.email, u.created_at, \n\tCASE WHEN date(u.created_at) > date(a.first_mam) \n\t\t THEN date_trunc('month', date(a.first_mam)) \n\t\t ELSE date_trunc('month', date(u.created_at)) \n\tEND AS created_at_month,\n\tfirst_mam, last_mam\n   FROM {{ ref('users') }} u\n   JOIN user_mam a ON u.northstar_id = a.northstar_id\n   WHERE (u.email IS NULL OR u.email NOT LIKE '%@dosomething.org' OR email NOT LIKE '%invalid%')", "compiled": true, "database": "quasar_prod_warehouse", "schema": "public", "fqn": ["ds_dbt", "user_newsletter_signups", "user_created"], "unique_id": "model.ds_dbt.user_created", "package_name": "ds_dbt", "root_path": "/home/runner/work/quasar/quasar/quasar/dbt", "path": "user_newsletter_signups/user_created.sql", "original_file_path": "models/user_newsletter_signups/user_created.sql", "name": "user_created", "resource_type": "model", "alias": "user_created", "checksum": {"name": "sha256", "checksum": "62235e7b869a63ac85b3ace6d83701db71707b57e342b95134449330b27b9aeb"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [{"sql": "{{ grant_select_to(this, ['dsanalyst', 'looker']) }}", "transaction": true, "index": null}], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": "user_created", "schema": null, "database": null, "tags": ["user_newsletter_signups"], "full_refresh": null}, "tags": ["user_newsletter_signups"], "refs": [["member_event_log"], ["users"]], "sources": [], "depends_on": {"macros": ["macro.ds_dbt.grant_select_to"], "nodes": ["model.ds_dbt.member_event_log", "model.ds_dbt.users"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "../../docs/compiled/ds_dbt/models/user_newsletter_signups/user_created.sql", "deferred": false, "compiled_sql": "WITH\nuser_mam AS (\n\tSELECT northstar_id, min(date(timestamp)) AS first_mam, max(date(timestamp)) AS last_mam\n\tFROM \"quasar_prod_warehouse\".\"public\".\"member_event_log\"\n\tWHERE action_type <> 'account_creation'\n\tAND timestamp >= '2008-01-01'\n\tGROUP BY 1\n)\nSELECT u.northstar_id, u.email, u.created_at, \n\tCASE WHEN date(u.created_at) > date(a.first_mam) \n\t\t THEN date_trunc('month', date(a.first_mam)) \n\t\t ELSE date_trunc('month', date(u.created_at)) \n\tEND AS created_at_month,\n\tfirst_mam, last_mam\n   FROM \"quasar_prod_warehouse\".\"public\".\"users\" u\n   JOIN user_mam a ON u.northstar_id = a.northstar_id\n   WHERE (u.email IS NULL OR u.email NOT LIKE '%@dosomething.org' OR email NOT LIKE '%invalid%')", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "WITH\nuser_mam AS (\n\tSELECT northstar_id, min(date(timestamp)) AS first_mam, max(date(timestamp)) AS last_mam\n\tFROM \"quasar_prod_warehouse\".\"public\".\"member_event_log\"\n\tWHERE action_type <> 'account_creation'\n\tAND timestamp >= '2008-01-01'\n\tGROUP BY 1\n)\nSELECT u.northstar_id, u.email, u.created_at, \n\tCASE WHEN date(u.created_at) > date(a.first_mam) \n\t\t THEN date_trunc('month', date(a.first_mam)) \n\t\t ELSE date_trunc('month', date(u.created_at)) \n\tEND AS created_at_month,\n\tfirst_mam, last_mam\n   FROM \"quasar_prod_warehouse\".\"public\".\"users\" u\n   JOIN user_mam a ON u.northstar_id = a.northstar_id\n   WHERE (u.email IS NULL OR u.email NOT LIKE '%@dosomething.org' OR email NOT LIKE '%invalid%')"}, "error": null, "status": null, "execution_time": 0.014519453048706055, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-02-23T21:28:56.481259Z", "completed_at": "2021-02-23T21:28:56.494732Z"}, {"name": "execute", "started_at": "2021-02-23T21:28:56.495008Z", "completed_at": "2021-02-23T21:28:56.495017Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "WITH user_mam AS\n  (SELECT northstar_id,\n          min(date(TIMESTAMP)) AS first_mam,\n          max(date(TIMESTAMP)) AS last_mam\n   FROM {{ ref('member_event_log') }}\n   WHERE action_type<>'account_creation'\n     AND TIMESTAMP >='2008-01-01'\n   GROUP BY 1)\nSELECT u.northstar_id,\n       u.email,\n       u.created_at AS created_at_orig,\n       CASE\n           WHEN date(u.created_at) > date(a.first_mam) THEN date(a.first_mam)\n           ELSE date(u.created_at)\n       END AS created_at,\n       CASE\n           WHEN date(u.created_at) > date(a.first_mam) THEN date_trunc('month', date(a.first_mam))\n           ELSE date_trunc('month', date(u.created_at))\n       END AS created_at_month,\n       first_mam,\n       last_mam\nFROM {{ ref('users') }} u\nJOIN user_mam a ON u.northstar_id=a.northstar_id\nWHERE (u.email IS NULL\n       OR u.email NOT LIKE '%@dosomething.org'\n       OR email NOT LIKE '%invalid%')", "compiled": true, "database": "quasar_prod_warehouse", "schema": "public_intermediate", "fqn": ["ds_dbt", "user_activity", "intermediate", "campaign_activity_user_created"], "unique_id": "model.ds_dbt.campaign_activity_user_created", "package_name": "ds_dbt", "root_path": "/home/runner/work/quasar/quasar/quasar/dbt", "path": "user_activity/intermediate/campaign_activity_user_created.sql", "original_file_path": "models/user_activity/intermediate/campaign_activity_user_created.sql", "name": "campaign_activity_user_created", "resource_type": "model", "alias": "campaign_activity_user_created", "checksum": {"name": "sha256", "checksum": "6d38c2f8541e59933c6455d0b63b188da612f4d7943d53abd4c52658541e26a0"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [{"sql": "CREATE UNIQUE INDEX {{ get_index_name(this, 'unique_created_at_northstar_id') }} (created_at, northstar_id)", "transaction": true, "index": null}, {"sql": "{{ grant_select_to(this, ['dsanalyst', 'looker']) }}", "transaction": true, "index": null}], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": "campaign_activity_user_created", "schema": "intermediate", "database": null, "tags": ["user_activity"], "full_refresh": null}, "tags": ["user_activity"], "refs": [["member_event_log"], ["users"]], "sources": [], "depends_on": {"macros": ["macro.ds_dbt.get_index_name", "macro.ds_dbt.grant_select_to"], "nodes": ["model.ds_dbt.member_event_log", "model.ds_dbt.users"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "../../docs/compiled/ds_dbt/models/user_activity/intermediate/campaign_activity_user_created.sql", "deferred": false, "compiled_sql": "WITH user_mam AS\n  (SELECT northstar_id,\n          min(date(TIMESTAMP)) AS first_mam,\n          max(date(TIMESTAMP)) AS last_mam\n   FROM \"quasar_prod_warehouse\".\"public\".\"member_event_log\"\n   WHERE action_type<>'account_creation'\n     AND TIMESTAMP >='2008-01-01'\n   GROUP BY 1)\nSELECT u.northstar_id,\n       u.email,\n       u.created_at AS created_at_orig,\n       CASE\n           WHEN date(u.created_at) > date(a.first_mam) THEN date(a.first_mam)\n           ELSE date(u.created_at)\n       END AS created_at,\n       CASE\n           WHEN date(u.created_at) > date(a.first_mam) THEN date_trunc('month', date(a.first_mam))\n           ELSE date_trunc('month', date(u.created_at))\n       END AS created_at_month,\n       first_mam,\n       last_mam\nFROM \"quasar_prod_warehouse\".\"public\".\"users\" u\nJOIN user_mam a ON u.northstar_id=a.northstar_id\nWHERE (u.email IS NULL\n       OR u.email NOT LIKE '%@dosomething.org'\n       OR email NOT LIKE '%invalid%')", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "WITH user_mam AS\n  (SELECT northstar_id,\n          min(date(TIMESTAMP)) AS first_mam,\n          max(date(TIMESTAMP)) AS last_mam\n   FROM \"quasar_prod_warehouse\".\"public\".\"member_event_log\"\n   WHERE action_type<>'account_creation'\n     AND TIMESTAMP >='2008-01-01'\n   GROUP BY 1)\nSELECT u.northstar_id,\n       u.email,\n       u.created_at AS created_at_orig,\n       CASE\n           WHEN date(u.created_at) > date(a.first_mam) THEN date(a.first_mam)\n           ELSE date(u.created_at)\n       END AS created_at,\n       CASE\n           WHEN date(u.created_at) > date(a.first_mam) THEN date_trunc('month', date(a.first_mam))\n           ELSE date_trunc('month', date(u.created_at))\n       END AS created_at_month,\n       first_mam,\n       last_mam\nFROM \"quasar_prod_warehouse\".\"public\".\"users\" u\nJOIN user_mam a ON u.northstar_id=a.northstar_id\nWHERE (u.email IS NULL\n       OR u.email NOT LIKE '%@dosomething.org'\n       OR email NOT LIKE '%invalid%')"}, "error": null, "status": null, "execution_time": 0.013179779052734375, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-02-23T21:28:56.496257Z", "completed_at": "2021-02-23T21:28:56.508396Z"}, {"name": "execute", "started_at": "2021-02-23T21:28:56.508716Z", "completed_at": "2021-02-23T21:28:56.508732Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "SELECT northstar_id,\n       action_type,\n       action_id,\n       to_char(TIMESTAMP, 'YYYY-MM-DD HH:MI:SS:MS') AS time_char,\n       min(TIMESTAMP) AS TIMESTAMP\nFROM {{ ref('member_event_log') }}\nWHERE action_type<>'account_creation'\n  AND TIMESTAMP >='2008-01-01'\nGROUP BY 1, 2, 3, 4", "compiled": true, "database": "quasar_prod_warehouse", "schema": "public_intermediate", "fqn": ["ds_dbt", "user_activity", "intermediate", "user_actions"], "unique_id": "model.ds_dbt.user_actions", "package_name": "ds_dbt", "root_path": "/home/runner/work/quasar/quasar/quasar/dbt", "path": "user_activity/intermediate/user_actions.sql", "original_file_path": "models/user_activity/intermediate/user_actions.sql", "name": "user_actions", "resource_type": "model", "alias": "user_actions", "checksum": {"name": "sha256", "checksum": "f277bfa2342fdb211ba20fc5e93d8653aebfee9b9b1bb4d63b1f2e85d85a414c"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [{"sql": "CREATE INDEX {{ get_index_name(this, 'northstar_id') }} (northstar_id)", "transaction": true, "index": null}, {"sql": "{{ grant_select_to(this, ['dsanalyst', 'looker']) }}", "transaction": true, "index": null}], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": "user_actions", "schema": "intermediate", "database": null, "tags": ["user_activity"], "full_refresh": null}, "tags": ["user_activity"], "refs": [["member_event_log"]], "sources": [], "depends_on": {"macros": ["macro.ds_dbt.get_index_name", "macro.ds_dbt.grant_select_to"], "nodes": ["model.ds_dbt.member_event_log"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "../../docs/compiled/ds_dbt/models/user_activity/intermediate/user_actions.sql", "deferred": false, "compiled_sql": "SELECT northstar_id,\n       action_type,\n       action_id,\n       to_char(TIMESTAMP, 'YYYY-MM-DD HH:MI:SS:MS') AS time_char,\n       min(TIMESTAMP) AS TIMESTAMP\nFROM \"quasar_prod_warehouse\".\"public\".\"member_event_log\"\nWHERE action_type<>'account_creation'\n  AND TIMESTAMP >='2008-01-01'\nGROUP BY 1, 2, 3, 4", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "SELECT northstar_id,\n       action_type,\n       action_id,\n       to_char(TIMESTAMP, 'YYYY-MM-DD HH:MI:SS:MS') AS time_char,\n       min(TIMESTAMP) AS TIMESTAMP\nFROM \"quasar_prod_warehouse\".\"public\".\"member_event_log\"\nWHERE action_type<>'account_creation'\n  AND TIMESTAMP >='2008-01-01'\nGROUP BY 1, 2, 3, 4"}, "error": null, "status": null, "execution_time": 0.012077093124389648, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-02-23T21:28:56.509946Z", "completed_at": "2021-02-23T21:28:56.520944Z"}, {"name": "execute", "started_at": "2021-02-23T21:28:56.521208Z", "completed_at": "2021-02-23T21:28:56.521214Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "device_id", "model": "{{ ref('ovrd_creator_funnel') }}"}}, "compiled": true, "database": "quasar_prod_warehouse", "schema": "public", "fqn": ["ds_dbt", "schema_test", "not_null_ovrd_creator_funnel_device_id"], "unique_id": "test.ds_dbt.not_null_ovrd_creator_funnel_device_id", "package_name": "ds_dbt", "root_path": "/home/runner/work/quasar/quasar/quasar/dbt", "path": "schema_test/not_null_ovrd_creator_funnel_device_id.sql", "original_file_path": "models/voter_reg/schema.yml", "name": "not_null_ovrd_creator_funnel_device_id", "resource_type": "test", "alias": "not_null_ovrd_creator_funnel_device_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["ovrd_creator_funnel"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.ds_dbt.ovrd_creator_funnel"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "../../docs/compiled/ds_dbt/models/voter_reg/schema.yml/schema_test/not_null_ovrd_creator_funnel_device_id.sql", "deferred": false, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom \"quasar_prod_warehouse\".\"public\".\"ovrd_creator_funnel\"\nwhere device_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom \"quasar_prod_warehouse\".\"public\".\"ovrd_creator_funnel\"\nwhere device_id is null\n\n\n", "column_name": "device_id"}, "error": null, "status": null, "execution_time": 0.012540817260742188, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-02-23T21:28:56.522493Z", "completed_at": "2021-02-23T21:28:56.533798Z"}, {"name": "execute", "started_at": "2021-02-23T21:28:56.534103Z", "completed_at": "2021-02-23T21:28:56.534110Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "device_id", "model": "{{ ref('ovrd_group_creator_funnel') }}"}}, "compiled": true, "database": "quasar_prod_warehouse", "schema": "public", "fqn": ["ds_dbt", "schema_test", "not_null_ovrd_group_creator_funnel_device_id"], "unique_id": "test.ds_dbt.not_null_ovrd_group_creator_funnel_device_id", "package_name": "ds_dbt", "root_path": "/home/runner/work/quasar/quasar/quasar/dbt", "path": "schema_test/not_null_ovrd_group_creator_funnel_device_id.sql", "original_file_path": "models/voter_reg/schema.yml", "name": "not_null_ovrd_group_creator_funnel_device_id", "resource_type": "test", "alias": "not_null_ovrd_group_creator_funnel_device_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["ovrd_group_creator_funnel"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.ds_dbt.ovrd_group_creator_funnel"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "../../docs/compiled/ds_dbt/models/voter_reg/schema.yml/schema_test/not_null_ovrd_group_creator_funnel_device_id.sql", "deferred": false, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom \"quasar_prod_warehouse\".\"public\".\"ovrd_group_creator_funnel\"\nwhere device_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom \"quasar_prod_warehouse\".\"public\".\"ovrd_group_creator_funnel\"\nwhere device_id is null\n\n\n", "column_name": "device_id"}, "error": null, "status": null, "execution_time": 0.012034177780151367, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-02-23T21:28:56.535383Z", "completed_at": "2021-02-23T21:28:56.546400Z"}, {"name": "execute", "started_at": "2021-02-23T21:28:56.546664Z", "completed_at": "2021-02-23T21:28:56.546670Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "device_id", "model": "{{ ref('voter_reg_quiz_funnel') }}"}}, "compiled": true, "database": "quasar_prod_warehouse", "schema": "public", "fqn": ["ds_dbt", "schema_test", "not_null_voter_reg_quiz_funnel_device_id"], "unique_id": "test.ds_dbt.not_null_voter_reg_quiz_funnel_device_id", "package_name": "ds_dbt", "root_path": "/home/runner/work/quasar/quasar/quasar/dbt", "path": "schema_test/not_null_voter_reg_quiz_funnel_device_id.sql", "original_file_path": "models/voter_reg/schema.yml", "name": "not_null_voter_reg_quiz_funnel_device_id", "resource_type": "test", "alias": "not_null_voter_reg_quiz_funnel_device_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["voter_reg_quiz_funnel"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.ds_dbt.voter_reg_quiz_funnel"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "../../docs/compiled/ds_dbt/models/voter_reg/schema.yml/schema_test/not_null_voter_reg_quiz_funnel_device_id.sql", "deferred": false, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom \"quasar_prod_warehouse\".\"public\".\"voter_reg_quiz_funnel\"\nwhere device_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom \"quasar_prod_warehouse\".\"public\".\"voter_reg_quiz_funnel\"\nwhere device_id is null\n\n\n", "column_name": "device_id"}, "error": null, "status": null, "execution_time": 0.013912200927734375, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-02-23T21:28:56.547806Z", "completed_at": "2021-02-23T21:28:56.560670Z"}, {"name": "execute", "started_at": "2021-02-23T21:28:56.560940Z", "completed_at": "2021-02-23T21:28:56.560946Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "SELECT DISTINCT\n\tf.northstar_id,\n\tf.newsletter_topic,\n\tf.topic_subscribed_at::timestamptz,\n\tCASE WHEN topic_unsubscribed_at IS NOT NULL\n\t    THEN topic_unsubscribed_at\n\t    WHEN newsletters_unsubscribed_at IS NOT NULL\n\t    THEN newsletters_unsubscribed_at\n\t    WHEN f.topic_updated_at = f.user_updated_at\n\t    THEN NULL\n\t    ELSE f.user_updated_at END AS topic_unsubscribed_at\nFROM (\n\tSELECT DISTINCT\n\t\ts.northstar_id AS northstar_id,\n\t\ts.newsletter_topic,\n\t\tfirst_value(s.newsletter_updated_at) OVER (PARTITION BY s.northstar_id, s.newsletter_topic ORDER BY s.newsletter_updated_at\n\t\t\t) AS topic_subscribed_at,\n\t\tlast_value(s.newsletter_updated_at) OVER (PARTITION BY s.northstar_id, s.newsletter_topic ORDER BY s.newsletter_updated_at\n\t\t\tROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS topic_updated_at,\t\n\t\tlast_value(s.newsletter_updated_at) OVER (PARTITION BY s.northstar_id ORDER BY s.newsletter_updated_at\n\t\t\tROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS user_updated_at,\n\t\tu.topic_unsubscribed_at,\n\t\tua.newsletters_unsubscribed_at\n\tFROM {{ ref('email_subscription_topics_raw') }} s\n\tLEFT JOIN (\n\t\tSELECT\n\t\t\t_id AS id,\n\t\t\tto_timestamp(audit #>> '{email_subscription_topics,updated_at,date}', 'YYYY-MM-DD HH24:MI:SS') AS topic_unsubscribed_at,\n\t\t\tNULL AS newsletter_topic\n\t\tFROM {{ source('northstar', 'northstar_users_snapshot') }}\n\t\tWHERE email_subscription_topics IS NULL AND audit #>> '{email_subscription_topics,updated_at,date}' IS NOT NULL\n\t) u ON u.id = s.northstar_id\n    LEFT JOIN (\n\t\tSELECT\n\t\t\tnorthstar_id,\n\t\t\temail_unsubscribed_at AS newsletters_unsubscribed_at,\n\t\t\tNULL AS newsletter_topic\n\t\tFROM {{ ref('user_activity') }}\n\t) ua ON ua.northstar_id = s.northstar_id\n) f", "compiled": true, "database": "quasar_prod_warehouse", "schema": "public", "fqn": ["ds_dbt", "news_subscription", "user_newsletter_subscriptions"], "unique_id": "model.ds_dbt.user_newsletter_subscriptions", "package_name": "ds_dbt", "root_path": "/home/runner/work/quasar/quasar/quasar/dbt", "path": "news_subscription/user_newsletter_subscriptions.sql", "original_file_path": "models/news_subscription/user_newsletter_subscriptions.sql", "name": "user_newsletter_subscriptions", "resource_type": "model", "alias": "user_newsletter_subscriptions", "checksum": {"name": "sha256", "checksum": "fe1d81c4aa89596bf69412bd3ed89f274eff15024975dee0a82a80df65fb0ba6"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [{"sql": "CREATE INDEX {{ get_index_name(this, 'topic_subscribed_at_northstar_id') }} (topic_subscribed_at, northstar_id)", "transaction": true, "index": null}, {"sql": "{{ grant_select_to(this, ['dsanalyst', 'looker']) }}", "transaction": true, "index": null}], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": "user_newsletter_subscriptions", "schema": null, "database": null, "tags": ["news_subscription"], "full_refresh": null}, "tags": ["news_subscription"], "refs": [["email_subscription_topics_raw"], ["user_activity"]], "sources": [["northstar", "northstar_users_snapshot"]], "depends_on": {"macros": ["macro.ds_dbt.get_index_name", "macro.ds_dbt.grant_select_to"], "nodes": ["source.ds_dbt.northstar.northstar_users_snapshot", "model.ds_dbt.email_subscription_topics_raw", "model.ds_dbt.user_activity"]}, "description": "Table containing data for all member events.", "columns": {"northstar_id": {"name": "northstar_id", "description": "The Northstar ID of the user who generated the event.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "newsletter_topic": {"name": "newsletter_topic", "description": "Newsletter topic. (e.g. community, lifestyle)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "topic_subscribed_at": {"name": "topic_subscribed_at", "description": "Timestamp when user subscribed to the newsletter topic", "meta": {}, "data_type": null, "quote": null, "tags": []}, "topic_unsubscribed_at": {"name": "topic_unsubscribed_at", "description": "Timestamp when user unsubscribed from the newsletter topic", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/news_subscription/schema.yml", "build_path": "../../docs/compiled/ds_dbt/models/news_subscription/user_newsletter_subscriptions.sql", "deferred": false, "compiled_sql": "SELECT DISTINCT\n\tf.northstar_id,\n\tf.newsletter_topic,\n\tf.topic_subscribed_at::timestamptz,\n\tCASE WHEN topic_unsubscribed_at IS NOT NULL\n\t    THEN topic_unsubscribed_at\n\t    WHEN newsletters_unsubscribed_at IS NOT NULL\n\t    THEN newsletters_unsubscribed_at\n\t    WHEN f.topic_updated_at = f.user_updated_at\n\t    THEN NULL\n\t    ELSE f.user_updated_at END AS topic_unsubscribed_at\nFROM (\n\tSELECT DISTINCT\n\t\ts.northstar_id AS northstar_id,\n\t\ts.newsletter_topic,\n\t\tfirst_value(s.newsletter_updated_at) OVER (PARTITION BY s.northstar_id, s.newsletter_topic ORDER BY s.newsletter_updated_at\n\t\t\t) AS topic_subscribed_at,\n\t\tlast_value(s.newsletter_updated_at) OVER (PARTITION BY s.northstar_id, s.newsletter_topic ORDER BY s.newsletter_updated_at\n\t\t\tROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS topic_updated_at,\t\n\t\tlast_value(s.newsletter_updated_at) OVER (PARTITION BY s.northstar_id ORDER BY s.newsletter_updated_at\n\t\t\tROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS user_updated_at,\n\t\tu.topic_unsubscribed_at,\n\t\tua.newsletters_unsubscribed_at\n\tFROM \"quasar_prod_warehouse\".\"public\".\"email_subscription_topics_raw\" s\n\tLEFT JOIN (\n\t\tSELECT\n\t\t\t_id AS id,\n\t\t\tto_timestamp(audit #>> '{email_subscription_topics,updated_at,date}', 'YYYY-MM-DD HH24:MI:SS') AS topic_unsubscribed_at,\n\t\t\tNULL AS newsletter_topic\n\t\tFROM \"quasar_prod_warehouse\".\"northstar_ft_userapi\".\"northstar_users_snapshot\"\n\t\tWHERE email_subscription_topics IS NULL AND audit #>> '{email_subscription_topics,updated_at,date}' IS NOT NULL\n\t) u ON u.id = s.northstar_id\n    LEFT JOIN (\n\t\tSELECT\n\t\t\tnorthstar_id,\n\t\t\temail_unsubscribed_at AS newsletters_unsubscribed_at,\n\t\t\tNULL AS newsletter_topic\n\t\tFROM \"quasar_prod_warehouse\".\"public\".\"user_activity\"\n\t) ua ON ua.northstar_id = s.northstar_id\n) f", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "SELECT DISTINCT\n\tf.northstar_id,\n\tf.newsletter_topic,\n\tf.topic_subscribed_at::timestamptz,\n\tCASE WHEN topic_unsubscribed_at IS NOT NULL\n\t    THEN topic_unsubscribed_at\n\t    WHEN newsletters_unsubscribed_at IS NOT NULL\n\t    THEN newsletters_unsubscribed_at\n\t    WHEN f.topic_updated_at = f.user_updated_at\n\t    THEN NULL\n\t    ELSE f.user_updated_at END AS topic_unsubscribed_at\nFROM (\n\tSELECT DISTINCT\n\t\ts.northstar_id AS northstar_id,\n\t\ts.newsletter_topic,\n\t\tfirst_value(s.newsletter_updated_at) OVER (PARTITION BY s.northstar_id, s.newsletter_topic ORDER BY s.newsletter_updated_at\n\t\t\t) AS topic_subscribed_at,\n\t\tlast_value(s.newsletter_updated_at) OVER (PARTITION BY s.northstar_id, s.newsletter_topic ORDER BY s.newsletter_updated_at\n\t\t\tROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS topic_updated_at,\t\n\t\tlast_value(s.newsletter_updated_at) OVER (PARTITION BY s.northstar_id ORDER BY s.newsletter_updated_at\n\t\t\tROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS user_updated_at,\n\t\tu.topic_unsubscribed_at,\n\t\tua.newsletters_unsubscribed_at\n\tFROM \"quasar_prod_warehouse\".\"public\".\"email_subscription_topics_raw\" s\n\tLEFT JOIN (\n\t\tSELECT\n\t\t\t_id AS id,\n\t\t\tto_timestamp(audit #>> '{email_subscription_topics,updated_at,date}', 'YYYY-MM-DD HH24:MI:SS') AS topic_unsubscribed_at,\n\t\t\tNULL AS newsletter_topic\n\t\tFROM \"quasar_prod_warehouse\".\"northstar_ft_userapi\".\"northstar_users_snapshot\"\n\t\tWHERE email_subscription_topics IS NULL AND audit #>> '{email_subscription_topics,updated_at,date}' IS NOT NULL\n\t) u ON u.id = s.northstar_id\n    LEFT JOIN (\n\t\tSELECT\n\t\t\tnorthstar_id,\n\t\t\temail_unsubscribed_at AS newsletters_unsubscribed_at,\n\t\t\tNULL AS newsletter_topic\n\t\tFROM \"quasar_prod_warehouse\".\"public\".\"user_activity\"\n\t) ua ON ua.northstar_id = s.northstar_id\n) f"}, "error": null, "status": null, "execution_time": 0.01899576187133789, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-02-23T21:28:56.562121Z", "completed_at": "2021-02-23T21:28:56.580061Z"}, {"name": "execute", "started_at": "2021-02-23T21:28:56.580360Z", "completed_at": "2021-02-23T21:28:56.580367Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "WITH user_action_metrics AS\n  (SELECT u.northstar_id,\n          count(CASE\n                    WHEN date(m.timestamp) <= date(u.created_at)+ interval '6 month' THEN m.action_type\n                END) AS mams_06,\n          count(CASE\n                    WHEN date(r.post_created_at) <= date(u.created_at)+ interval '6 month' THEN r.post_id\n                END) AS rbs_06,\n          max(CASE\n                  WHEN date(m.timestamp) <= date(u.created_at)+ interval '6 month' THEN date(m.timestamp)\n              END) AS last_mam_06,\n          count(DISTINCT CASE\n                             WHEN date(m.timestamp) <= date(u.created_at)+ interval '6 month' THEN date_trunc('month', m.timestamp)\n                         END) AS months_active_06,\n          count(CASE\n                    WHEN date(m.timestamp) <= date(u.created_at)+ interval '12 month' THEN m.action_type\n                END) AS mams_12,\n          count(CASE\n                    WHEN date(r.post_created_at) <= date(u.created_at)+ interval '12 month' THEN r.post_id\n                END) AS rbs_12,\n          max(CASE\n                  WHEN date(m.timestamp) <= date(u.created_at)+ interval '12 month' THEN date(m.timestamp)\n              END) AS last_mam_12,\n          count(DISTINCT CASE\n                             WHEN date(m.timestamp) <= date(u.created_at)+ interval '12 month' THEN date_trunc('month', m.timestamp)\n                         END) AS months_active_12,\n          count(CASE\n                    WHEN date(m.timestamp) <= date(u.created_at)+ interval '24 month' THEN m.action_type\n                END) AS mams_24,\n          count(CASE\n                    WHEN date(r.post_created_at) <= date(u.created_at)+ interval '24 month' THEN r.post_id\n                END) AS rbs_24,\n          max(CASE\n                  WHEN date(m.timestamp) <= date(u.created_at)+ interval '24 month' THEN date(m.timestamp)\n              END) AS last_mam_24,\n          count(DISTINCT CASE\n                             WHEN date(m.timestamp) <= date(u.created_at)+ interval '24 month' THEN date_trunc('month', m.timestamp)\n                         END) AS months_active_24,\n          count(CASE\n                    WHEN date(m.timestamp) <= date(u.created_at)+ interval '60 month' THEN m.action_type\n                END) AS mams_60,\n          count(CASE\n                    WHEN date(r.post_created_at) <= date(u.created_at)+ interval '60 month' THEN r.post_id\n                END) AS rbs_60,\n          max(CASE\n                  WHEN date(m.timestamp) <= date(u.created_at)+ interval '60 month' THEN date(m.timestamp)\n              END) AS last_mam_60,\n          count(DISTINCT CASE\n                             WHEN date(m.timestamp) <= date(u.created_at)+ interval '60 month' THEN date_trunc('month', m.timestamp)\n                         END) AS months_active_60,\n          count(m.action_type) AS mams_total,\n          count(r.post_id) AS rbs_total,\n          max(date(m.timestamp)) AS last_mam_total,\n          count(DISTINCT date_trunc('month', m.timestamp)) AS months_active_total\n   FROM {{ ref('campaign_activity_user_created') }} u\n   JOIN\n     (SELECT northstar_id,\n             action_type,\n             action_id,\n             to_char(TIMESTAMP, 'YYYY-MM-DD HH:MI:SS:MS') AS time_char,\n             min(TIMESTAMP) AS TIMESTAMP\n      FROM {{ ref('member_event_log') }}\n      WHERE action_type<>'account_creation'\n        AND TIMESTAMP >='2008-01-01'\n      GROUP BY 1,\n               2,\n               3,\n               4) m ON (u.northstar_id=m.northstar_id)\n   LEFT JOIN {{ ref('reportbacks') }} r ON (u.northstar_id=r.northstar_id)\n   GROUP BY 1) ,\n     calc AS\n  (SELECT a.northstar_id,\n          created_at,\n          extract('year'\n                  FROM created_at) AS created_year,\n          date_trunc('month', created_at) AS created_month,\n          extract(YEAR\n                  FROM age(now(), created_at)) AS created_years,\n          extract(MONTH\n                  FROM age(now(), created_at)) AS created_months,\n          coalesce(mams_06, 0) AS mams_06,\n          coalesce(rbs_06, 0) AS rbs_06,\n          extract(MONTH\n                  FROM age(last_mam_06, created_at)) AS last_mam_06_months,\n          months_active_06,\n          coalesce(mams_12, 0) AS mams_12,\n          coalesce(rbs_12, 0) AS rbs_12,\n          extract(YEAR\n                  FROM age(last_mam_12, created_at)) AS last_mam_12_years,\n          extract(MONTH\n                  FROM age(last_mam_12, created_at)) AS last_mam_12_months,\n          months_active_12,\n          coalesce(mams_24, 0) AS mams_24,\n          coalesce(rbs_24, 0) AS rbs_24,\n          extract(YEAR\n                  FROM age(last_mam_24, created_at)) AS last_mam_24_years,\n          extract(MONTH\n                  FROM age(last_mam_24, created_at)) AS last_mam_24_months,\n          months_active_24,\n          coalesce(mams_60, 0) AS mams_60,\n          coalesce(rbs_60, 0) AS rbs_60,\n          extract(YEAR\n                  FROM age(last_mam_60, created_at)) AS last_mam_60_years,\n          extract(MONTH\n                  FROM age(last_mam_60, created_at)) AS last_mam_60_months,\n          months_active_60,\n          coalesce(mams_total, 0) AS mams_total,\n          coalesce(rbs_total, 0) AS rbs_total,\n          extract(YEAR\n                  FROM age(last_mam_total, created_at)) AS last_mam_total_years,\n          extract(MONTH\n                  FROM age(last_mam_total, created_at)) AS last_mam_total_months,\n          months_active_total\n   FROM user_action_metrics a\n   JOIN {{ ref('campaign_activity_user_created') }} c ON (a.northstar_id=c.northstar_id))\nSELECT northstar_id,\n       created_at,\n       created_year,\n       created_month,\n       (created_years*12)+created_months AS created_months,\n       mams_06,\n       rbs_06,\n       last_mam_06_months AS last_mam_06,\n       months_active_06,\n       mams_12,\n       rbs_12,\n       (last_mam_12_years*12)+last_mam_12_months AS last_mam_12,\n       months_active_12,\n       mams_24,\n       rbs_24,\n       (last_mam_24_years*12)+last_mam_24_months AS last_mam_24,\n       months_active_24,\n       mams_60,\n       rbs_60,\n       (last_mam_60_years*12)+last_mam_60_months AS last_mam_60,\n       months_active_60,\n       mams_total,\n       rbs_total,\n       (last_mam_total_years*12)+last_mam_total_months AS last_mam_total,\n       months_active_total\nFROM calc", "compiled": true, "database": "quasar_prod_warehouse", "schema": "public", "fqn": ["ds_dbt", "user_activity", "user_engagement_timeline"], "unique_id": "model.ds_dbt.user_engagement_timeline", "package_name": "ds_dbt", "root_path": "/home/runner/work/quasar/quasar/quasar/dbt", "path": "user_activity/user_engagement_timeline.sql", "original_file_path": "models/user_activity/user_engagement_timeline.sql", "name": "user_engagement_timeline", "resource_type": "model", "alias": "user_engagement_timeline", "checksum": {"name": "sha256", "checksum": "0b008067c8ee517d75833d35e19c7b723430368c45657b9e562eb1fedc5bba66"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [{"sql": "{{ grant_select_to(this, ['dsanalyst', 'looker']) }}", "transaction": true, "index": null}], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": "user_engagement_timeline", "schema": null, "database": null, "tags": ["user_activity"], "full_refresh": null}, "tags": ["user_activity"], "refs": [["campaign_activity_user_created"], ["member_event_log"], ["reportbacks"], ["campaign_activity_user_created"]], "sources": [], "depends_on": {"macros": ["macro.ds_dbt.grant_select_to"], "nodes": ["model.ds_dbt.campaign_activity_user_created", "model.ds_dbt.member_event_log", "model.ds_dbt.reportbacks", "model.ds_dbt.campaign_activity_user_created"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "../../docs/compiled/ds_dbt/models/user_activity/user_engagement_timeline.sql", "deferred": false, "compiled_sql": "WITH user_action_metrics AS\n  (SELECT u.northstar_id,\n          count(CASE\n                    WHEN date(m.timestamp) <= date(u.created_at)+ interval '6 month' THEN m.action_type\n                END) AS mams_06,\n          count(CASE\n                    WHEN date(r.post_created_at) <= date(u.created_at)+ interval '6 month' THEN r.post_id\n                END) AS rbs_06,\n          max(CASE\n                  WHEN date(m.timestamp) <= date(u.created_at)+ interval '6 month' THEN date(m.timestamp)\n              END) AS last_mam_06,\n          count(DISTINCT CASE\n                             WHEN date(m.timestamp) <= date(u.created_at)+ interval '6 month' THEN date_trunc('month', m.timestamp)\n                         END) AS months_active_06,\n          count(CASE\n                    WHEN date(m.timestamp) <= date(u.created_at)+ interval '12 month' THEN m.action_type\n                END) AS mams_12,\n          count(CASE\n                    WHEN date(r.post_created_at) <= date(u.created_at)+ interval '12 month' THEN r.post_id\n                END) AS rbs_12,\n          max(CASE\n                  WHEN date(m.timestamp) <= date(u.created_at)+ interval '12 month' THEN date(m.timestamp)\n              END) AS last_mam_12,\n          count(DISTINCT CASE\n                             WHEN date(m.timestamp) <= date(u.created_at)+ interval '12 month' THEN date_trunc('month', m.timestamp)\n                         END) AS months_active_12,\n          count(CASE\n                    WHEN date(m.timestamp) <= date(u.created_at)+ interval '24 month' THEN m.action_type\n                END) AS mams_24,\n          count(CASE\n                    WHEN date(r.post_created_at) <= date(u.created_at)+ interval '24 month' THEN r.post_id\n                END) AS rbs_24,\n          max(CASE\n                  WHEN date(m.timestamp) <= date(u.created_at)+ interval '24 month' THEN date(m.timestamp)\n              END) AS last_mam_24,\n          count(DISTINCT CASE\n                             WHEN date(m.timestamp) <= date(u.created_at)+ interval '24 month' THEN date_trunc('month', m.timestamp)\n                         END) AS months_active_24,\n          count(CASE\n                    WHEN date(m.timestamp) <= date(u.created_at)+ interval '60 month' THEN m.action_type\n                END) AS mams_60,\n          count(CASE\n                    WHEN date(r.post_created_at) <= date(u.created_at)+ interval '60 month' THEN r.post_id\n                END) AS rbs_60,\n          max(CASE\n                  WHEN date(m.timestamp) <= date(u.created_at)+ interval '60 month' THEN date(m.timestamp)\n              END) AS last_mam_60,\n          count(DISTINCT CASE\n                             WHEN date(m.timestamp) <= date(u.created_at)+ interval '60 month' THEN date_trunc('month', m.timestamp)\n                         END) AS months_active_60,\n          count(m.action_type) AS mams_total,\n          count(r.post_id) AS rbs_total,\n          max(date(m.timestamp)) AS last_mam_total,\n          count(DISTINCT date_trunc('month', m.timestamp)) AS months_active_total\n   FROM \"quasar_prod_warehouse\".\"public_intermediate\".\"campaign_activity_user_created\" u\n   JOIN\n     (SELECT northstar_id,\n             action_type,\n             action_id,\n             to_char(TIMESTAMP, 'YYYY-MM-DD HH:MI:SS:MS') AS time_char,\n             min(TIMESTAMP) AS TIMESTAMP\n      FROM \"quasar_prod_warehouse\".\"public\".\"member_event_log\"\n      WHERE action_type<>'account_creation'\n        AND TIMESTAMP >='2008-01-01'\n      GROUP BY 1,\n               2,\n               3,\n               4) m ON (u.northstar_id=m.northstar_id)\n   LEFT JOIN \"quasar_prod_warehouse\".\"public\".\"reportbacks\" r ON (u.northstar_id=r.northstar_id)\n   GROUP BY 1) ,\n     calc AS\n  (SELECT a.northstar_id,\n          created_at,\n          extract('year'\n                  FROM created_at) AS created_year,\n          date_trunc('month', created_at) AS created_month,\n          extract(YEAR\n                  FROM age(now(), created_at)) AS created_years,\n          extract(MONTH\n                  FROM age(now(), created_at)) AS created_months,\n          coalesce(mams_06, 0) AS mams_06,\n          coalesce(rbs_06, 0) AS rbs_06,\n          extract(MONTH\n                  FROM age(last_mam_06, created_at)) AS last_mam_06_months,\n          months_active_06,\n          coalesce(mams_12, 0) AS mams_12,\n          coalesce(rbs_12, 0) AS rbs_12,\n          extract(YEAR\n                  FROM age(last_mam_12, created_at)) AS last_mam_12_years,\n          extract(MONTH\n                  FROM age(last_mam_12, created_at)) AS last_mam_12_months,\n          months_active_12,\n          coalesce(mams_24, 0) AS mams_24,\n          coalesce(rbs_24, 0) AS rbs_24,\n          extract(YEAR\n                  FROM age(last_mam_24, created_at)) AS last_mam_24_years,\n          extract(MONTH\n                  FROM age(last_mam_24, created_at)) AS last_mam_24_months,\n          months_active_24,\n          coalesce(mams_60, 0) AS mams_60,\n          coalesce(rbs_60, 0) AS rbs_60,\n          extract(YEAR\n                  FROM age(last_mam_60, created_at)) AS last_mam_60_years,\n          extract(MONTH\n                  FROM age(last_mam_60, created_at)) AS last_mam_60_months,\n          months_active_60,\n          coalesce(mams_total, 0) AS mams_total,\n          coalesce(rbs_total, 0) AS rbs_total,\n          extract(YEAR\n                  FROM age(last_mam_total, created_at)) AS last_mam_total_years,\n          extract(MONTH\n                  FROM age(last_mam_total, created_at)) AS last_mam_total_months,\n          months_active_total\n   FROM user_action_metrics a\n   JOIN \"quasar_prod_warehouse\".\"public_intermediate\".\"campaign_activity_user_created\" c ON (a.northstar_id=c.northstar_id))\nSELECT northstar_id,\n       created_at,\n       created_year,\n       created_month,\n       (created_years*12)+created_months AS created_months,\n       mams_06,\n       rbs_06,\n       last_mam_06_months AS last_mam_06,\n       months_active_06,\n       mams_12,\n       rbs_12,\n       (last_mam_12_years*12)+last_mam_12_months AS last_mam_12,\n       months_active_12,\n       mams_24,\n       rbs_24,\n       (last_mam_24_years*12)+last_mam_24_months AS last_mam_24,\n       months_active_24,\n       mams_60,\n       rbs_60,\n       (last_mam_60_years*12)+last_mam_60_months AS last_mam_60,\n       months_active_60,\n       mams_total,\n       rbs_total,\n       (last_mam_total_years*12)+last_mam_total_months AS last_mam_total,\n       months_active_total\nFROM calc", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "WITH user_action_metrics AS\n  (SELECT u.northstar_id,\n          count(CASE\n                    WHEN date(m.timestamp) <= date(u.created_at)+ interval '6 month' THEN m.action_type\n                END) AS mams_06,\n          count(CASE\n                    WHEN date(r.post_created_at) <= date(u.created_at)+ interval '6 month' THEN r.post_id\n                END) AS rbs_06,\n          max(CASE\n                  WHEN date(m.timestamp) <= date(u.created_at)+ interval '6 month' THEN date(m.timestamp)\n              END) AS last_mam_06,\n          count(DISTINCT CASE\n                             WHEN date(m.timestamp) <= date(u.created_at)+ interval '6 month' THEN date_trunc('month', m.timestamp)\n                         END) AS months_active_06,\n          count(CASE\n                    WHEN date(m.timestamp) <= date(u.created_at)+ interval '12 month' THEN m.action_type\n                END) AS mams_12,\n          count(CASE\n                    WHEN date(r.post_created_at) <= date(u.created_at)+ interval '12 month' THEN r.post_id\n                END) AS rbs_12,\n          max(CASE\n                  WHEN date(m.timestamp) <= date(u.created_at)+ interval '12 month' THEN date(m.timestamp)\n              END) AS last_mam_12,\n          count(DISTINCT CASE\n                             WHEN date(m.timestamp) <= date(u.created_at)+ interval '12 month' THEN date_trunc('month', m.timestamp)\n                         END) AS months_active_12,\n          count(CASE\n                    WHEN date(m.timestamp) <= date(u.created_at)+ interval '24 month' THEN m.action_type\n                END) AS mams_24,\n          count(CASE\n                    WHEN date(r.post_created_at) <= date(u.created_at)+ interval '24 month' THEN r.post_id\n                END) AS rbs_24,\n          max(CASE\n                  WHEN date(m.timestamp) <= date(u.created_at)+ interval '24 month' THEN date(m.timestamp)\n              END) AS last_mam_24,\n          count(DISTINCT CASE\n                             WHEN date(m.timestamp) <= date(u.created_at)+ interval '24 month' THEN date_trunc('month', m.timestamp)\n                         END) AS months_active_24,\n          count(CASE\n                    WHEN date(m.timestamp) <= date(u.created_at)+ interval '60 month' THEN m.action_type\n                END) AS mams_60,\n          count(CASE\n                    WHEN date(r.post_created_at) <= date(u.created_at)+ interval '60 month' THEN r.post_id\n                END) AS rbs_60,\n          max(CASE\n                  WHEN date(m.timestamp) <= date(u.created_at)+ interval '60 month' THEN date(m.timestamp)\n              END) AS last_mam_60,\n          count(DISTINCT CASE\n                             WHEN date(m.timestamp) <= date(u.created_at)+ interval '60 month' THEN date_trunc('month', m.timestamp)\n                         END) AS months_active_60,\n          count(m.action_type) AS mams_total,\n          count(r.post_id) AS rbs_total,\n          max(date(m.timestamp)) AS last_mam_total,\n          count(DISTINCT date_trunc('month', m.timestamp)) AS months_active_total\n   FROM \"quasar_prod_warehouse\".\"public_intermediate\".\"campaign_activity_user_created\" u\n   JOIN\n     (SELECT northstar_id,\n             action_type,\n             action_id,\n             to_char(TIMESTAMP, 'YYYY-MM-DD HH:MI:SS:MS') AS time_char,\n             min(TIMESTAMP) AS TIMESTAMP\n      FROM \"quasar_prod_warehouse\".\"public\".\"member_event_log\"\n      WHERE action_type<>'account_creation'\n        AND TIMESTAMP >='2008-01-01'\n      GROUP BY 1,\n               2,\n               3,\n               4) m ON (u.northstar_id=m.northstar_id)\n   LEFT JOIN \"quasar_prod_warehouse\".\"public\".\"reportbacks\" r ON (u.northstar_id=r.northstar_id)\n   GROUP BY 1) ,\n     calc AS\n  (SELECT a.northstar_id,\n          created_at,\n          extract('year'\n                  FROM created_at) AS created_year,\n          date_trunc('month', created_at) AS created_month,\n          extract(YEAR\n                  FROM age(now(), created_at)) AS created_years,\n          extract(MONTH\n                  FROM age(now(), created_at)) AS created_months,\n          coalesce(mams_06, 0) AS mams_06,\n          coalesce(rbs_06, 0) AS rbs_06,\n          extract(MONTH\n                  FROM age(last_mam_06, created_at)) AS last_mam_06_months,\n          months_active_06,\n          coalesce(mams_12, 0) AS mams_12,\n          coalesce(rbs_12, 0) AS rbs_12,\n          extract(YEAR\n                  FROM age(last_mam_12, created_at)) AS last_mam_12_years,\n          extract(MONTH\n                  FROM age(last_mam_12, created_at)) AS last_mam_12_months,\n          months_active_12,\n          coalesce(mams_24, 0) AS mams_24,\n          coalesce(rbs_24, 0) AS rbs_24,\n          extract(YEAR\n                  FROM age(last_mam_24, created_at)) AS last_mam_24_years,\n          extract(MONTH\n                  FROM age(last_mam_24, created_at)) AS last_mam_24_months,\n          months_active_24,\n          coalesce(mams_60, 0) AS mams_60,\n          coalesce(rbs_60, 0) AS rbs_60,\n          extract(YEAR\n                  FROM age(last_mam_60, created_at)) AS last_mam_60_years,\n          extract(MONTH\n                  FROM age(last_mam_60, created_at)) AS last_mam_60_months,\n          months_active_60,\n          coalesce(mams_total, 0) AS mams_total,\n          coalesce(rbs_total, 0) AS rbs_total,\n          extract(YEAR\n                  FROM age(last_mam_total, created_at)) AS last_mam_total_years,\n          extract(MONTH\n                  FROM age(last_mam_total, created_at)) AS last_mam_total_months,\n          months_active_total\n   FROM user_action_metrics a\n   JOIN \"quasar_prod_warehouse\".\"public_intermediate\".\"campaign_activity_user_created\" c ON (a.northstar_id=c.northstar_id))\nSELECT northstar_id,\n       created_at,\n       created_year,\n       created_month,\n       (created_years*12)+created_months AS created_months,\n       mams_06,\n       rbs_06,\n       last_mam_06_months AS last_mam_06,\n       months_active_06,\n       mams_12,\n       rbs_12,\n       (last_mam_12_years*12)+last_mam_12_months AS last_mam_12,\n       months_active_12,\n       mams_24,\n       rbs_24,\n       (last_mam_24_years*12)+last_mam_24_months AS last_mam_24,\n       months_active_24,\n       mams_60,\n       rbs_60,\n       (last_mam_60_years*12)+last_mam_60_months AS last_mam_60,\n       months_active_60,\n       mams_total,\n       rbs_total,\n       (last_mam_total_years*12)+last_mam_total_months AS last_mam_total,\n       months_active_total\nFROM calc"}, "error": null, "status": null, "execution_time": 0.017284870147705078, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-02-23T21:28:56.581612Z", "completed_at": "2021-02-23T21:28:56.596677Z"}, {"name": "execute", "started_at": "2021-02-23T21:28:56.597975Z", "completed_at": "2021-02-23T21:28:56.597984Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "WITH user_mams AS\n  (SELECT northstar_id,\n          action_type,\n          TIMESTAMP,\n          rank() over(PARTITION BY northstar_id\n                      ORDER BY time_char, action_id) AS nth_action\n   FROM {{ ref('user_actions') }})\nSELECT u.northstar_id,\n       action_type,\n       nth_action,\n       CASE\n           WHEN date(m.timestamp) <= date(u.created_at)+ interval '6 month' THEN 6\n           WHEN date(m.timestamp) <= date(u.created_at)+ interval '12 month' THEN 12\n           WHEN date(m.timestamp) <= date(u.created_at)+ interval '24 month' THEN 24\n           WHEN date(m.timestamp) <= date(u.created_at)+ interval '60 month' THEN 60\n       END AS action_within\nFROM {{ ref('campaign_activity_user_created') }} u\nJOIN user_mams m ON (u.northstar_id=m.northstar_id)\nWHERE nth_action <=10", "compiled": true, "database": "quasar_prod_warehouse", "schema": "public", "fqn": ["ds_dbt", "user_activity", "user_engagement_actions"], "unique_id": "model.ds_dbt.user_engagement_actions", "package_name": "ds_dbt", "root_path": "/home/runner/work/quasar/quasar/quasar/dbt", "path": "user_activity/user_engagement_actions.sql", "original_file_path": "models/user_activity/user_engagement_actions.sql", "name": "user_engagement_actions", "resource_type": "model", "alias": "user_engagement_actions", "checksum": {"name": "sha256", "checksum": "fa4178551e1dc9f5e57a5cc0f7ed3fa3891e8e79866da168b43f865c8184f810"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [{"sql": "CREATE INDEX {{ get_index_name(this, 'northstar_id') }} (northstar_id)", "transaction": true, "index": null}, {"sql": "{{ grant_select_to(this, ['dsanalyst', 'looker']) }}", "transaction": true, "index": null}], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": "user_engagement_actions", "schema": null, "database": null, "tags": ["user_activity"], "full_refresh": null}, "tags": ["user_activity"], "refs": [["user_actions"], ["campaign_activity_user_created"]], "sources": [], "depends_on": {"macros": ["macro.ds_dbt.get_index_name", "macro.ds_dbt.grant_select_to"], "nodes": ["model.ds_dbt.user_actions", "model.ds_dbt.campaign_activity_user_created"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "../../docs/compiled/ds_dbt/models/user_activity/user_engagement_actions.sql", "deferred": false, "compiled_sql": "WITH user_mams AS\n  (SELECT northstar_id,\n          action_type,\n          TIMESTAMP,\n          rank() over(PARTITION BY northstar_id\n                      ORDER BY time_char, action_id) AS nth_action\n   FROM \"quasar_prod_warehouse\".\"public_intermediate\".\"user_actions\")\nSELECT u.northstar_id,\n       action_type,\n       nth_action,\n       CASE\n           WHEN date(m.timestamp) <= date(u.created_at)+ interval '6 month' THEN 6\n           WHEN date(m.timestamp) <= date(u.created_at)+ interval '12 month' THEN 12\n           WHEN date(m.timestamp) <= date(u.created_at)+ interval '24 month' THEN 24\n           WHEN date(m.timestamp) <= date(u.created_at)+ interval '60 month' THEN 60\n       END AS action_within\nFROM \"quasar_prod_warehouse\".\"public_intermediate\".\"campaign_activity_user_created\" u\nJOIN user_mams m ON (u.northstar_id=m.northstar_id)\nWHERE nth_action <=10", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "WITH user_mams AS\n  (SELECT northstar_id,\n          action_type,\n          TIMESTAMP,\n          rank() over(PARTITION BY northstar_id\n                      ORDER BY time_char, action_id) AS nth_action\n   FROM \"quasar_prod_warehouse\".\"public_intermediate\".\"user_actions\")\nSELECT u.northstar_id,\n       action_type,\n       nth_action,\n       CASE\n           WHEN date(m.timestamp) <= date(u.created_at)+ interval '6 month' THEN 6\n           WHEN date(m.timestamp) <= date(u.created_at)+ interval '12 month' THEN 12\n           WHEN date(m.timestamp) <= date(u.created_at)+ interval '24 month' THEN 24\n           WHEN date(m.timestamp) <= date(u.created_at)+ interval '60 month' THEN 60\n       END AS action_within\nFROM \"quasar_prod_warehouse\".\"public_intermediate\".\"campaign_activity_user_created\" u\nJOIN user_mams m ON (u.northstar_id=m.northstar_id)\nWHERE nth_action <=10"}, "error": null, "status": null, "execution_time": 0.01269078254699707, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-02-23T21:28:56.599268Z", "completed_at": "2021-02-23T21:28:56.610933Z"}, {"name": "execute", "started_at": "2021-02-23T21:28:56.611227Z", "completed_at": "2021-02-23T21:28:56.611234Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "WITH \ncal AS (\n\tSELECT generate_series( date_trunc('month', date('2019-03-01')), now(), '1 month' )::date AS cal_month\n), \nuser_months AS (\n\tSELECT \n\t\tu.northstar_id, \n\t\tu.created_at_month, \n\t\tu.last_mam, \n\t\tc.cal_month,\n\t\tage(c.cal_month, u.created_at_month) AS month_diff\n\tFROM {{ ref('user_created') }} u\n\tCROSS JOIN cal c \n\tWHERE date_trunc('month',created_at_month) < c.cal_month\n\t--We eliminate users which did not provide an email since they can't subscribe\n\tAND u.email IS NOT NULL\n),\nuser_cal AS (\n\tSELECT \n\t\tnorthstar_id,\n\t\tcreated_at_month, \n\t\tlast_mam, \n\t\tcal_month,\n\t\textract('year' FROM month_diff)*12 +extract('month' FROM month_diff) AS months_since_created\n\tFROM user_months\n),\nnls AS (\n\tSELECT DISTINCT newsletter_topic\n\tFROM {{ ref('user_newsletter_subscriptions') }}\n)\nSELECT \n\tnorthstar_id, created_at_month, last_mam, \n\tmonths_since_created,\n    cal_month as period_start,\n    cal_month + INTERVAL '1 MONTH - 1 MILLISECOND' as period_end,\n \tnewsletter_topic\nFROM user_cal\nCROSS JOIN nls \n--We eliminate the 1st month because it contains noise from the high number of registration-signups activity  \nWHERE (months_since_created > 1)", "compiled": true, "database": "quasar_prod_warehouse", "schema": "public", "fqn": ["ds_dbt", "user_newsletter_signups", "user_newsletter_cal_multi"], "unique_id": "model.ds_dbt.user_newsletter_cal_multi", "package_name": "ds_dbt", "root_path": "/home/runner/work/quasar/quasar/quasar/dbt", "path": "user_newsletter_signups/user_newsletter_cal_multi.sql", "original_file_path": "models/user_newsletter_signups/user_newsletter_cal_multi.sql", "name": "user_newsletter_cal_multi", "resource_type": "model", "alias": "user_newsletter_cal_multi", "checksum": {"name": "sha256", "checksum": "3ebf871585bfd29e7d33d0037bcaaa0213b95462c359bbead1c5ca5b5323b619"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [{"sql": "CREATE INDEX {{ get_index_name(this, 'northstar_id') }} (northstar_id)", "transaction": true, "index": null}, {"sql": "{{ grant_select_to(this, ['dsanalyst', 'looker']) }}", "transaction": true, "index": null}], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": "user_newsletter_cal_multi", "schema": null, "database": null, "tags": ["user_newsletter_signups"], "full_refresh": null}, "tags": ["user_newsletter_signups"], "refs": [["user_created"], ["user_newsletter_subscriptions"]], "sources": [], "depends_on": {"macros": ["macro.ds_dbt.get_index_name", "macro.ds_dbt.grant_select_to"], "nodes": ["model.ds_dbt.user_created", "model.ds_dbt.user_newsletter_subscriptions"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "../../docs/compiled/ds_dbt/models/user_newsletter_signups/user_newsletter_cal_multi.sql", "deferred": false, "compiled_sql": "WITH \ncal AS (\n\tSELECT generate_series( date_trunc('month', date('2019-03-01')), now(), '1 month' )::date AS cal_month\n), \nuser_months AS (\n\tSELECT \n\t\tu.northstar_id, \n\t\tu.created_at_month, \n\t\tu.last_mam, \n\t\tc.cal_month,\n\t\tage(c.cal_month, u.created_at_month) AS month_diff\n\tFROM \"quasar_prod_warehouse\".\"public\".\"user_created\" u\n\tCROSS JOIN cal c \n\tWHERE date_trunc('month',created_at_month) < c.cal_month\n\t--We eliminate users which did not provide an email since they can't subscribe\n\tAND u.email IS NOT NULL\n),\nuser_cal AS (\n\tSELECT \n\t\tnorthstar_id,\n\t\tcreated_at_month, \n\t\tlast_mam, \n\t\tcal_month,\n\t\textract('year' FROM month_diff)*12 +extract('month' FROM month_diff) AS months_since_created\n\tFROM user_months\n),\nnls AS (\n\tSELECT DISTINCT newsletter_topic\n\tFROM \"quasar_prod_warehouse\".\"public\".\"user_newsletter_subscriptions\"\n)\nSELECT \n\tnorthstar_id, created_at_month, last_mam, \n\tmonths_since_created,\n    cal_month as period_start,\n    cal_month + INTERVAL '1 MONTH - 1 MILLISECOND' as period_end,\n \tnewsletter_topic\nFROM user_cal\nCROSS JOIN nls \n--We eliminate the 1st month because it contains noise from the high number of registration-signups activity  \nWHERE (months_since_created > 1)", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "WITH \ncal AS (\n\tSELECT generate_series( date_trunc('month', date('2019-03-01')), now(), '1 month' )::date AS cal_month\n), \nuser_months AS (\n\tSELECT \n\t\tu.northstar_id, \n\t\tu.created_at_month, \n\t\tu.last_mam, \n\t\tc.cal_month,\n\t\tage(c.cal_month, u.created_at_month) AS month_diff\n\tFROM \"quasar_prod_warehouse\".\"public\".\"user_created\" u\n\tCROSS JOIN cal c \n\tWHERE date_trunc('month',created_at_month) < c.cal_month\n\t--We eliminate users which did not provide an email since they can't subscribe\n\tAND u.email IS NOT NULL\n),\nuser_cal AS (\n\tSELECT \n\t\tnorthstar_id,\n\t\tcreated_at_month, \n\t\tlast_mam, \n\t\tcal_month,\n\t\textract('year' FROM month_diff)*12 +extract('month' FROM month_diff) AS months_since_created\n\tFROM user_months\n),\nnls AS (\n\tSELECT DISTINCT newsletter_topic\n\tFROM \"quasar_prod_warehouse\".\"public\".\"user_newsletter_subscriptions\"\n)\nSELECT \n\tnorthstar_id, created_at_month, last_mam, \n\tmonths_since_created,\n    cal_month as period_start,\n    cal_month + INTERVAL '1 MONTH - 1 MILLISECOND' as period_end,\n \tnewsletter_topic\nFROM user_cal\nCROSS JOIN nls \n--We eliminate the 1st month because it contains noise from the high number of registration-signups activity  \nWHERE (months_since_created > 1)"}, "error": null, "status": null, "execution_time": 0.013265132904052734, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-02-23T21:28:56.612376Z", "completed_at": "2021-02-23T21:28:56.624555Z"}, {"name": "execute", "started_at": "2021-02-23T21:28:56.624860Z", "completed_at": "2021-02-23T21:28:56.624866Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "WITH user_newsletter_cal_status_temp AS (\nSELECT u.northstar_id, \n       u.created_at_month, \n       u.last_mam, \n       u.months_since_created, \n       u.period_start, \n       u.period_end,\n\t   u.newsletter_topic,\n\tCASE WHEN nl.topic_subscribed_at IS NULL \n\t\t   OR nl.topic_subscribed_at > u.period_end\n\t\t   OR nl.topic_unsubscribed_at < u.period_start\n\t\t   THEN NULL\n\t\tELSE nl.topic_subscribed_at END AS subscribed, \n\tCASE WHEN nl.topic_unsubscribed_at IS NULL \n\t\t   OR nl.topic_unsubscribed_at > u.period_end\n\t\t   OR nl.topic_unsubscribed_at < u.period_start\n\t\t   OR nl.topic_subscribed_at > u.period_end \n\t\t   THEN NULL \n\t\tELSE nl.topic_unsubscribed_at END AS unsubscribed\nFROM {{ ref('user_newsletter_cal_multi') }} u\nLEFT JOIN {{ ref('user_newsletter_subscriptions') }} nl ON (u.northstar_id = nl.northstar_id AND u.newsletter_topic = nl.newsletter_topic))\nSELECT *\nFROM user_newsletter_cal_status_temp\n-- The UNION ALL below originally started as an INSERT * FROM above query. Using UNION ALL and user_newsletter_cal_status_temp CTE to generate all records.\nUNION ALL\nSELECT n1.northstar_id,\n\t   n1.created_at_month, \n\t   n1.last_mam, \n\t   n1.months_since_created, \n\t   n1.period_start, \n\t   n1.period_end,\n\t   --n1.subscribed, n2.subscribed, n1.unsubscribed, n2.unsubscribed, \n\t   concat(n1.newsletter_topic, '-', n2.newsletter_topic) AS newsletter_topic,\n\t   CASE WHEN (n1.subscribed IS NOT NULL AND n2.subscribed IS NOT NULL) THEN greatest(n1.subscribed,n2.subscribed) END AS subscribed, \n\t   CASE WHEN (n1.subscribed IS NOT NULL AND n2.subscribed IS NOT NULL) THEN least(n1.unsubscribed,n2.unsubscribed) END AS unsubscribed\nFROM user_newsletter_cal_status_temp n1\nJOIN user_newsletter_cal_status_temp n2 ON (n1.northstar_id = n2.northstar_id AND n1.months_since_created = n2.months_since_created)\nWHERE (n1.newsletter_topic = '\"community\"' AND N2.newsletter_topic = '\"lifestyle\"')", "compiled": true, "database": "quasar_prod_warehouse", "schema": "public", "fqn": ["ds_dbt", "user_newsletter_signups", "user_newsletter_cal_status"], "unique_id": "model.ds_dbt.user_newsletter_cal_status", "package_name": "ds_dbt", "root_path": "/home/runner/work/quasar/quasar/quasar/dbt", "path": "user_newsletter_signups/user_newsletter_cal_status.sql", "original_file_path": "models/user_newsletter_signups/user_newsletter_cal_status.sql", "name": "user_newsletter_cal_status", "resource_type": "model", "alias": "user_newsletter_cal_status", "checksum": {"name": "sha256", "checksum": "803fefa8ca5d6d88292189ee4b1ac395e44ea802b10fa206689f494435abd853"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [{"sql": "CREATE INDEX {{ get_index_name(this, 'northstar_id') }} (northstar_id)", "transaction": true, "index": null}, {"sql": "{{ grant_select_to(this, ['dsanalyst', 'looker']) }}", "transaction": true, "index": null}], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": "user_newsletter_cal_status", "schema": null, "database": null, "tags": ["user_newsletter_signups"], "full_refresh": null}, "tags": ["user_newsletter_signups"], "refs": [["user_newsletter_cal_multi"], ["user_newsletter_subscriptions"]], "sources": [], "depends_on": {"macros": ["macro.ds_dbt.get_index_name", "macro.ds_dbt.grant_select_to"], "nodes": ["model.ds_dbt.user_newsletter_cal_multi", "model.ds_dbt.user_newsletter_subscriptions"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "../../docs/compiled/ds_dbt/models/user_newsletter_signups/user_newsletter_cal_status.sql", "deferred": false, "compiled_sql": "WITH user_newsletter_cal_status_temp AS (\nSELECT u.northstar_id, \n       u.created_at_month, \n       u.last_mam, \n       u.months_since_created, \n       u.period_start, \n       u.period_end,\n\t   u.newsletter_topic,\n\tCASE WHEN nl.topic_subscribed_at IS NULL \n\t\t   OR nl.topic_subscribed_at > u.period_end\n\t\t   OR nl.topic_unsubscribed_at < u.period_start\n\t\t   THEN NULL\n\t\tELSE nl.topic_subscribed_at END AS subscribed, \n\tCASE WHEN nl.topic_unsubscribed_at IS NULL \n\t\t   OR nl.topic_unsubscribed_at > u.period_end\n\t\t   OR nl.topic_unsubscribed_at < u.period_start\n\t\t   OR nl.topic_subscribed_at > u.period_end \n\t\t   THEN NULL \n\t\tELSE nl.topic_unsubscribed_at END AS unsubscribed\nFROM \"quasar_prod_warehouse\".\"public\".\"user_newsletter_cal_multi\" u\nLEFT JOIN \"quasar_prod_warehouse\".\"public\".\"user_newsletter_subscriptions\" nl ON (u.northstar_id = nl.northstar_id AND u.newsletter_topic = nl.newsletter_topic))\nSELECT *\nFROM user_newsletter_cal_status_temp\n-- The UNION ALL below originally started as an INSERT * FROM above query. Using UNION ALL and user_newsletter_cal_status_temp CTE to generate all records.\nUNION ALL\nSELECT n1.northstar_id,\n\t   n1.created_at_month, \n\t   n1.last_mam, \n\t   n1.months_since_created, \n\t   n1.period_start, \n\t   n1.period_end,\n\t   --n1.subscribed, n2.subscribed, n1.unsubscribed, n2.unsubscribed, \n\t   concat(n1.newsletter_topic, '-', n2.newsletter_topic) AS newsletter_topic,\n\t   CASE WHEN (n1.subscribed IS NOT NULL AND n2.subscribed IS NOT NULL) THEN greatest(n1.subscribed,n2.subscribed) END AS subscribed, \n\t   CASE WHEN (n1.subscribed IS NOT NULL AND n2.subscribed IS NOT NULL) THEN least(n1.unsubscribed,n2.unsubscribed) END AS unsubscribed\nFROM user_newsletter_cal_status_temp n1\nJOIN user_newsletter_cal_status_temp n2 ON (n1.northstar_id = n2.northstar_id AND n1.months_since_created = n2.months_since_created)\nWHERE (n1.newsletter_topic = '\"community\"' AND N2.newsletter_topic = '\"lifestyle\"')", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "WITH user_newsletter_cal_status_temp AS (\nSELECT u.northstar_id, \n       u.created_at_month, \n       u.last_mam, \n       u.months_since_created, \n       u.period_start, \n       u.period_end,\n\t   u.newsletter_topic,\n\tCASE WHEN nl.topic_subscribed_at IS NULL \n\t\t   OR nl.topic_subscribed_at > u.period_end\n\t\t   OR nl.topic_unsubscribed_at < u.period_start\n\t\t   THEN NULL\n\t\tELSE nl.topic_subscribed_at END AS subscribed, \n\tCASE WHEN nl.topic_unsubscribed_at IS NULL \n\t\t   OR nl.topic_unsubscribed_at > u.period_end\n\t\t   OR nl.topic_unsubscribed_at < u.period_start\n\t\t   OR nl.topic_subscribed_at > u.period_end \n\t\t   THEN NULL \n\t\tELSE nl.topic_unsubscribed_at END AS unsubscribed\nFROM \"quasar_prod_warehouse\".\"public\".\"user_newsletter_cal_multi\" u\nLEFT JOIN \"quasar_prod_warehouse\".\"public\".\"user_newsletter_subscriptions\" nl ON (u.northstar_id = nl.northstar_id AND u.newsletter_topic = nl.newsletter_topic))\nSELECT *\nFROM user_newsletter_cal_status_temp\n-- The UNION ALL below originally started as an INSERT * FROM above query. Using UNION ALL and user_newsletter_cal_status_temp CTE to generate all records.\nUNION ALL\nSELECT n1.northstar_id,\n\t   n1.created_at_month, \n\t   n1.last_mam, \n\t   n1.months_since_created, \n\t   n1.period_start, \n\t   n1.period_end,\n\t   --n1.subscribed, n2.subscribed, n1.unsubscribed, n2.unsubscribed, \n\t   concat(n1.newsletter_topic, '-', n2.newsletter_topic) AS newsletter_topic,\n\t   CASE WHEN (n1.subscribed IS NOT NULL AND n2.subscribed IS NOT NULL) THEN greatest(n1.subscribed,n2.subscribed) END AS subscribed, \n\t   CASE WHEN (n1.subscribed IS NOT NULL AND n2.subscribed IS NOT NULL) THEN least(n1.unsubscribed,n2.unsubscribed) END AS unsubscribed\nFROM user_newsletter_cal_status_temp n1\nJOIN user_newsletter_cal_status_temp n2 ON (n1.northstar_id = n2.northstar_id AND n1.months_since_created = n2.months_since_created)\nWHERE (n1.newsletter_topic = '\"community\"' AND N2.newsletter_topic = '\"lifestyle\"')"}, "error": null, "status": null, "execution_time": 0.012996912002563477, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-02-23T21:28:56.626274Z", "completed_at": "2021-02-23T21:28:56.638183Z"}, {"name": "execute", "started_at": "2021-02-23T21:28:56.638504Z", "completed_at": "2021-02-23T21:28:56.638511Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "WITH \nrecent_signups AS (\n\tSELECT s.northstar_id, s.created_at AS signup_date, \n\tCASE WHEN source_bucket='sms' THEN 'sms' ELSE 'web' END AS signup_source\n\tFROM {{ ref('signups') }} s\n\tWHERE s.created_at >= date('2019-03-01')\n\t\n),\nuser_nl_su AS (\n\tSELECT u.northstar_id,\n\t       u.last_mam,\n\t       u.months_since_created,\n\t       u.period_start,\n\t       u.period_end, \n\t\t   u.newsletter_topic,\n\t\t   u.subscribed,\n\t\t   u.unsubscribed, \n\t\t\t--As per requirements, we don't count subscriptions that occurr while the user signs-up\n\t\t   CASE WHEN date_trunc('day',s.signup_date)=date_trunc('day',u.subscribed) THEN NULL\n\t\t   \t\tWHEN s.signup_date BETWEEN u.period_start and u.period_end \n\t\t   \t\tTHEN s.signup_source \n\t\t   ELSE NULL END AS signup_source,\n\t\t   CASE WHEN date_trunc('day',s.signup_date) = date_trunc('day',u.subscribed) THEN NULL\n\t\t   \t\tWHEN s.signup_date BETWEEN u.period_start AND u.period_end \n\t\t   \t\tTHEN s.signup_date \n\t\t   ELSE NULL END AS signup_date\n\tFROM {{ ref('user_newsletter_cal_status') }} u\n\tLEFT JOIN recent_signups s ON (u.northstar_id = s.northstar_id)\n\tWHERE (s.signup_date BETWEEN u.period_start AND u.period_end OR s.northstar_id IS NULL)\n\n)\nSELECT northstar_id, \n       months_since_created,\n       last_mam,\n       period_start,\n       period_end, \n\t   newsletter_topic,\n\t   subscribed,\n\t   unsubscribed,\n\t   CASE WHEN subscribed IS NOT NULL AND signup_date IS NULL THEN 'Subscribed' \n\t   \t \tWHEN subscribed IS NOT NULL AND unsubscribed IS NULL AND signup_date > SUBSCRIBED THEN 'Subscribed'\n\t   \t \tWHEN subscribed IS NOT NULL AND signup_date BETWEEN subscribed AND coalesce(unsubscribed,period_end) THEN 'Subscribed'\n\t   \t \tWHEN subscribed IS NULL AND unsubscribed IS NOT NULL AND signup_date IS NULL THEN 'Subscribed'\n\t   \t \tWHEN subscribed IS NULL AND unsubscribed IS NOT NULL AND signup_date < unsubscribed THEN 'Subscribed'\n\t   ELSE 'Not Subscribed' END AS nl_status,\n\t signup_source, signup_date\nFROM user_nl_su", "compiled": true, "database": "quasar_prod_warehouse", "schema": "public", "fqn": ["ds_dbt", "user_newsletter_signups", "user_newsletter_signups"], "unique_id": "model.ds_dbt.user_newsletter_signups", "package_name": "ds_dbt", "root_path": "/home/runner/work/quasar/quasar/quasar/dbt", "path": "user_newsletter_signups/user_newsletter_signups.sql", "original_file_path": "models/user_newsletter_signups/user_newsletter_signups.sql", "name": "user_newsletter_signups", "resource_type": "model", "alias": "user_newsletter_signups", "checksum": {"name": "sha256", "checksum": "d6c52eeb0fe23b30f2235ba83645c1db5739fc3f794a1d368bf67d965468dbb8"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [{"sql": "{{ grant_select_to(this, ['dsanalyst', 'looker']) }}", "transaction": true, "index": null}], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": "user_newsletter_signups", "schema": null, "database": null, "tags": ["user_newsletter_signups"], "full_refresh": null}, "tags": ["user_newsletter_signups"], "refs": [["signups"], ["user_newsletter_cal_status"]], "sources": [], "depends_on": {"macros": ["macro.ds_dbt.grant_select_to"], "nodes": ["model.ds_dbt.signups", "model.ds_dbt.user_newsletter_cal_status"]}, "description": "Newsletter subscription status and signups for each northstar_id, for each month post 2019-03", "columns": {"northstar_id": {"name": "northstar_id", "description": "The Northstar ID of the user who generated the event.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "months_since_created": {"name": "months_since_created", "description": "How many months since the user was created", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_mam": {"name": "last_mam", "description": "Date corresponding to the most recent member action", "meta": {}, "data_type": null, "quote": null, "tags": []}, "period_start": {"name": "period_start", "description": "Date corresponding to the start of the period analyzing how newsletter subscription status contributes to campaign sign-up\n\nContext: Period start and end are simply the start and end of the month. In a previous iteration of the model, some periods were 5-months long which is why these fields are not called months.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "period_end": {"name": "period_end", "description": "Date corresponding to the end of the period analyzing how newsletter subscription status contributes to campaign sign-up\n\nContext: Period start and end are simply the start and end of the month. In a previous iteration of the model, some periods were 5-months long which is why these fields are not called months.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "newsletter_topic": {"name": "newsletter_topic", "description": "Newsletter topic. (e.g. community, lifestyle)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "subscribed": {"name": "subscribed", "description": "Whether the user is subscribed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "unsubscribed": {"name": "unsubscribed", "description": "Whether the user is subscribed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "nl_status": {"name": "nl_status", "description": "Newsletter status, whether or not the user is subscribed to the newsletter", "meta": {}, "data_type": null, "quote": null, "tags": []}, "signup_source": {"name": "signup_source", "description": "Source of signup, e.g. \"sms\" or \"web\"", "meta": {}, "data_type": null, "quote": null, "tags": []}, "signup_date": {"name": "signup_date", "description": "Date when user signed up for newsletter", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/user_newsletter_signups/schema.yml", "build_path": "../../docs/compiled/ds_dbt/models/user_newsletter_signups/user_newsletter_signups.sql", "deferred": false, "compiled_sql": "WITH \nrecent_signups AS (\n\tSELECT s.northstar_id, s.created_at AS signup_date, \n\tCASE WHEN source_bucket='sms' THEN 'sms' ELSE 'web' END AS signup_source\n\tFROM \"quasar_prod_warehouse\".\"public\".\"signups\" s\n\tWHERE s.created_at >= date('2019-03-01')\n\t\n),\nuser_nl_su AS (\n\tSELECT u.northstar_id,\n\t       u.last_mam,\n\t       u.months_since_created,\n\t       u.period_start,\n\t       u.period_end, \n\t\t   u.newsletter_topic,\n\t\t   u.subscribed,\n\t\t   u.unsubscribed, \n\t\t\t--As per requirements, we don't count subscriptions that occurr while the user signs-up\n\t\t   CASE WHEN date_trunc('day',s.signup_date)=date_trunc('day',u.subscribed) THEN NULL\n\t\t   \t\tWHEN s.signup_date BETWEEN u.period_start and u.period_end \n\t\t   \t\tTHEN s.signup_source \n\t\t   ELSE NULL END AS signup_source,\n\t\t   CASE WHEN date_trunc('day',s.signup_date) = date_trunc('day',u.subscribed) THEN NULL\n\t\t   \t\tWHEN s.signup_date BETWEEN u.period_start AND u.period_end \n\t\t   \t\tTHEN s.signup_date \n\t\t   ELSE NULL END AS signup_date\n\tFROM \"quasar_prod_warehouse\".\"public\".\"user_newsletter_cal_status\" u\n\tLEFT JOIN recent_signups s ON (u.northstar_id = s.northstar_id)\n\tWHERE (s.signup_date BETWEEN u.period_start AND u.period_end OR s.northstar_id IS NULL)\n\n)\nSELECT northstar_id, \n       months_since_created,\n       last_mam,\n       period_start,\n       period_end, \n\t   newsletter_topic,\n\t   subscribed,\n\t   unsubscribed,\n\t   CASE WHEN subscribed IS NOT NULL AND signup_date IS NULL THEN 'Subscribed' \n\t   \t \tWHEN subscribed IS NOT NULL AND unsubscribed IS NULL AND signup_date > SUBSCRIBED THEN 'Subscribed'\n\t   \t \tWHEN subscribed IS NOT NULL AND signup_date BETWEEN subscribed AND coalesce(unsubscribed,period_end) THEN 'Subscribed'\n\t   \t \tWHEN subscribed IS NULL AND unsubscribed IS NOT NULL AND signup_date IS NULL THEN 'Subscribed'\n\t   \t \tWHEN subscribed IS NULL AND unsubscribed IS NOT NULL AND signup_date < unsubscribed THEN 'Subscribed'\n\t   ELSE 'Not Subscribed' END AS nl_status,\n\t signup_source, signup_date\nFROM user_nl_su", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "WITH \nrecent_signups AS (\n\tSELECT s.northstar_id, s.created_at AS signup_date, \n\tCASE WHEN source_bucket='sms' THEN 'sms' ELSE 'web' END AS signup_source\n\tFROM \"quasar_prod_warehouse\".\"public\".\"signups\" s\n\tWHERE s.created_at >= date('2019-03-01')\n\t\n),\nuser_nl_su AS (\n\tSELECT u.northstar_id,\n\t       u.last_mam,\n\t       u.months_since_created,\n\t       u.period_start,\n\t       u.period_end, \n\t\t   u.newsletter_topic,\n\t\t   u.subscribed,\n\t\t   u.unsubscribed, \n\t\t\t--As per requirements, we don't count subscriptions that occurr while the user signs-up\n\t\t   CASE WHEN date_trunc('day',s.signup_date)=date_trunc('day',u.subscribed) THEN NULL\n\t\t   \t\tWHEN s.signup_date BETWEEN u.period_start and u.period_end \n\t\t   \t\tTHEN s.signup_source \n\t\t   ELSE NULL END AS signup_source,\n\t\t   CASE WHEN date_trunc('day',s.signup_date) = date_trunc('day',u.subscribed) THEN NULL\n\t\t   \t\tWHEN s.signup_date BETWEEN u.period_start AND u.period_end \n\t\t   \t\tTHEN s.signup_date \n\t\t   ELSE NULL END AS signup_date\n\tFROM \"quasar_prod_warehouse\".\"public\".\"user_newsletter_cal_status\" u\n\tLEFT JOIN recent_signups s ON (u.northstar_id = s.northstar_id)\n\tWHERE (s.signup_date BETWEEN u.period_start AND u.period_end OR s.northstar_id IS NULL)\n\n)\nSELECT northstar_id, \n       months_since_created,\n       last_mam,\n       period_start,\n       period_end, \n\t   newsletter_topic,\n\t   subscribed,\n\t   unsubscribed,\n\t   CASE WHEN subscribed IS NOT NULL AND signup_date IS NULL THEN 'Subscribed' \n\t   \t \tWHEN subscribed IS NOT NULL AND unsubscribed IS NULL AND signup_date > SUBSCRIBED THEN 'Subscribed'\n\t   \t \tWHEN subscribed IS NOT NULL AND signup_date BETWEEN subscribed AND coalesce(unsubscribed,period_end) THEN 'Subscribed'\n\t   \t \tWHEN subscribed IS NULL AND unsubscribed IS NOT NULL AND signup_date IS NULL THEN 'Subscribed'\n\t   \t \tWHEN subscribed IS NULL AND unsubscribed IS NOT NULL AND signup_date < unsubscribed THEN 'Subscribed'\n\t   ELSE 'Not Subscribed' END AS nl_status,\n\t signup_source, signup_date\nFROM user_nl_su"}, "error": null, "status": null, "execution_time": 0.022848129272460938, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-02-23T21:28:56.639901Z", "completed_at": "2021-02-23T21:28:56.661593Z"}, {"name": "execute", "started_at": "2021-02-23T21:28:56.661944Z", "completed_at": "2021-02-23T21:28:56.661952Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "last_mam", "model": "{{ ref('user_newsletter_signups') }}"}}, "compiled": true, "database": "quasar_prod_warehouse", "schema": "public", "fqn": ["ds_dbt", "schema_test", "not_null_user_newsletter_signups_last_mam"], "unique_id": "test.ds_dbt.not_null_user_newsletter_signups_last_mam", "package_name": "ds_dbt", "root_path": "/home/runner/work/quasar/quasar/quasar/dbt", "path": "schema_test/not_null_user_newsletter_signups_last_mam.sql", "original_file_path": "models/user_newsletter_signups/schema.yml", "name": "not_null_user_newsletter_signups_last_mam", "resource_type": "test", "alias": "not_null_user_newsletter_signups_last_mam", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["user_newsletter_signups"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.ds_dbt.user_newsletter_signups"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "../../docs/compiled/ds_dbt/models/user_newsletter_signups/schema.yml/schema_test/not_null_user_newsletter_signups_last_mam.sql", "deferred": false, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom \"quasar_prod_warehouse\".\"public\".\"user_newsletter_signups\"\nwhere last_mam is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom \"quasar_prod_warehouse\".\"public\".\"user_newsletter_signups\"\nwhere last_mam is null\n\n\n", "column_name": "last_mam"}, "error": null, "status": null, "execution_time": 0.01209402084350586, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-02-23T21:28:56.663450Z", "completed_at": "2021-02-23T21:28:56.674487Z"}, {"name": "execute", "started_at": "2021-02-23T21:28:56.674753Z", "completed_at": "2021-02-23T21:28:56.674759Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "months_since_created", "model": "{{ ref('user_newsletter_signups') }}"}}, "compiled": true, "database": "quasar_prod_warehouse", "schema": "public", "fqn": ["ds_dbt", "schema_test", "not_null_user_newsletter_signups_months_since_created"], "unique_id": "test.ds_dbt.not_null_user_newsletter_signups_months_since_created", "package_name": "ds_dbt", "root_path": "/home/runner/work/quasar/quasar/quasar/dbt", "path": "schema_test/not_null_user_newsletter_signups_months_since_created.sql", "original_file_path": "models/user_newsletter_signups/schema.yml", "name": "not_null_user_newsletter_signups_months_since_created", "resource_type": "test", "alias": "not_null_user_newsletter_signups_months_since_created", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["user_newsletter_signups"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.ds_dbt.user_newsletter_signups"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "../../docs/compiled/ds_dbt/models/user_newsletter_signups/schema.yml/schema_test/not_null_user_newsletter_signups_months_since_created.sql", "deferred": false, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom \"quasar_prod_warehouse\".\"public\".\"user_newsletter_signups\"\nwhere months_since_created is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom \"quasar_prod_warehouse\".\"public\".\"user_newsletter_signups\"\nwhere months_since_created is null\n\n\n", "column_name": "months_since_created"}, "error": null, "status": null, "execution_time": 0.012045621871948242, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-02-23T21:28:56.676055Z", "completed_at": "2021-02-23T21:28:56.687060Z"}, {"name": "execute", "started_at": "2021-02-23T21:28:56.687358Z", "completed_at": "2021-02-23T21:28:56.687364Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "newsletter_topic", "model": "{{ ref('user_newsletter_signups') }}"}}, "compiled": true, "database": "quasar_prod_warehouse", "schema": "public", "fqn": ["ds_dbt", "schema_test", "not_null_user_newsletter_signups_newsletter_topic"], "unique_id": "test.ds_dbt.not_null_user_newsletter_signups_newsletter_topic", "package_name": "ds_dbt", "root_path": "/home/runner/work/quasar/quasar/quasar/dbt", "path": "schema_test/not_null_user_newsletter_signups_newsletter_topic.sql", "original_file_path": "models/user_newsletter_signups/schema.yml", "name": "not_null_user_newsletter_signups_newsletter_topic", "resource_type": "test", "alias": "not_null_user_newsletter_signups_newsletter_topic", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["user_newsletter_signups"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.ds_dbt.user_newsletter_signups"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "../../docs/compiled/ds_dbt/models/user_newsletter_signups/schema.yml/schema_test/not_null_user_newsletter_signups_newsletter_topic.sql", "deferred": false, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom \"quasar_prod_warehouse\".\"public\".\"user_newsletter_signups\"\nwhere newsletter_topic is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom \"quasar_prod_warehouse\".\"public\".\"user_newsletter_signups\"\nwhere newsletter_topic is null\n\n\n", "column_name": "newsletter_topic"}, "error": null, "status": null, "execution_time": 0.012460947036743164, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-02-23T21:28:56.688508Z", "completed_at": "2021-02-23T21:28:56.699883Z"}, {"name": "execute", "started_at": "2021-02-23T21:28:56.700180Z", "completed_at": "2021-02-23T21:28:56.700187Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "period_end", "model": "{{ ref('user_newsletter_signups') }}"}}, "compiled": true, "database": "quasar_prod_warehouse", "schema": "public", "fqn": ["ds_dbt", "schema_test", "not_null_user_newsletter_signups_period_end"], "unique_id": "test.ds_dbt.not_null_user_newsletter_signups_period_end", "package_name": "ds_dbt", "root_path": "/home/runner/work/quasar/quasar/quasar/dbt", "path": "schema_test/not_null_user_newsletter_signups_period_end.sql", "original_file_path": "models/user_newsletter_signups/schema.yml", "name": "not_null_user_newsletter_signups_period_end", "resource_type": "test", "alias": "not_null_user_newsletter_signups_period_end", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["user_newsletter_signups"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.ds_dbt.user_newsletter_signups"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "../../docs/compiled/ds_dbt/models/user_newsletter_signups/schema.yml/schema_test/not_null_user_newsletter_signups_period_end.sql", "deferred": false, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom \"quasar_prod_warehouse\".\"public\".\"user_newsletter_signups\"\nwhere period_end is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom \"quasar_prod_warehouse\".\"public\".\"user_newsletter_signups\"\nwhere period_end is null\n\n\n", "column_name": "period_end"}, "error": null, "status": null, "execution_time": 0.013242483139038086, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-02-23T21:28:56.701281Z", "completed_at": "2021-02-23T21:28:56.713408Z"}, {"name": "execute", "started_at": "2021-02-23T21:28:56.713766Z", "completed_at": "2021-02-23T21:28:56.713775Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "period_start", "model": "{{ ref('user_newsletter_signups') }}"}}, "compiled": true, "database": "quasar_prod_warehouse", "schema": "public", "fqn": ["ds_dbt", "schema_test", "not_null_user_newsletter_signups_period_start"], "unique_id": "test.ds_dbt.not_null_user_newsletter_signups_period_start", "package_name": "ds_dbt", "root_path": "/home/runner/work/quasar/quasar/quasar/dbt", "path": "schema_test/not_null_user_newsletter_signups_period_start.sql", "original_file_path": "models/user_newsletter_signups/schema.yml", "name": "not_null_user_newsletter_signups_period_start", "resource_type": "test", "alias": "not_null_user_newsletter_signups_period_start", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["user_newsletter_signups"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.ds_dbt.user_newsletter_signups"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "../../docs/compiled/ds_dbt/models/user_newsletter_signups/schema.yml/schema_test/not_null_user_newsletter_signups_period_start.sql", "deferred": false, "compiled_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom \"quasar_prod_warehouse\".\"public\".\"user_newsletter_signups\"\nwhere period_start is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n    \n    \n\n\n\nselect count(*) as validation_errors\nfrom \"quasar_prod_warehouse\".\"public\".\"user_newsletter_signups\"\nwhere period_start is null\n\n\n", "column_name": "period_start"}, "error": null, "status": null, "execution_time": 0.013113737106323242, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-02-23T21:28:56.715005Z", "completed_at": "2021-02-23T21:28:56.727009Z"}, {"name": "execute", "started_at": "2021-02-23T21:28:56.727317Z", "completed_at": "2021-02-23T21:28:56.727323Z"}], "fail": null, "warn": null, "skip": false}, {"node": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_relationships(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "relationships", "kwargs": {"to": "ref('users')", "field": "id", "column_name": "northstar_id", "model": "{{ ref('user_newsletter_signups') }}"}}, "compiled": true, "database": "quasar_prod_warehouse", "schema": "public", "fqn": ["ds_dbt", "schema_test", "relationships_user_newsletter_signups_northstar_id__id__ref_users_"], "unique_id": "test.ds_dbt.relationships_user_newsletter_signups_northstar_id__id__ref_users_", "package_name": "ds_dbt", "root_path": "/home/runner/work/quasar/quasar/quasar/dbt", "path": "schema_test/relationships_user_newsletter_signups_northstar_id__id__ref_users_.sql", "original_file_path": "models/user_newsletter_signups/schema.yml", "name": "relationships_user_newsletter_signups_northstar_id__id__ref_users_", "resource_type": "test", "alias": "relationships_user_newsletter_signups_northstar_id__id__ref_users_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["users"], ["user_newsletter_signups"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_relationships"], "nodes": ["model.ds_dbt.users", "model.ds_dbt.user_newsletter_signups"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "../../docs/compiled/ds_dbt/models/user_newsletter_signups/schema.yml/schema_test/relationships_user_newsletter_signups_northstar_id__id__ref_users_.sql", "deferred": false, "compiled_sql": "\n    \n    \n\n\n\n\nselect count(*) as validation_errors\nfrom (\n    select northstar_id as id from \"quasar_prod_warehouse\".\"public\".\"user_newsletter_signups\"\n) as child\nleft join (\n    select id as id from \"quasar_prod_warehouse\".\"public\".\"users\"\n) as parent on parent.id = child.id\nwhere child.id is not null\n  and parent.id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n    \n    \n\n\n\n\nselect count(*) as validation_errors\nfrom (\n    select northstar_id as id from \"quasar_prod_warehouse\".\"public\".\"user_newsletter_signups\"\n) as child\nleft join (\n    select id as id from \"quasar_prod_warehouse\".\"public\".\"users\"\n) as parent on parent.id = child.id\nwhere child.id is not null\n  and parent.id is null\n\n\n", "column_name": "northstar_id"}, "error": null, "status": null, "execution_time": 0.015831947326660156, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2021-02-23T21:28:56.728451Z", "completed_at": "2021-02-23T21:28:56.743236Z"}, {"name": "execute", "started_at": "2021-02-23T21:28:56.743534Z", "completed_at": "2021-02-23T21:28:56.743541Z"}], "fail": null, "warn": null, "skip": false}], "generated_at": "2021-02-23T21:28:56.782955Z", "elapsed_time": 3.625732898712158}