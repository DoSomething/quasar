{"results": [{"node": {"name": "campaign_info_all", "root_path": "/Users/mrich/projects/quasar/quasar/dbt", "resource_type": "model", "path": "campaign_info/campaign_info_all.sql", "original_file_path": "models/campaign_info/campaign_info_all.sql", "package_name": "ds_dbt", "raw_sql": "SELECT c.field_campaigns_target_id as campaign_node_id,\n       n2.title as campaign_node_id_title,\n       c.entity_id as campaign_run_id,\n       n1.title as campaign_run_id_title,\n       fdfct.field_campaign_type_value as campaign_type,\n       c.language as campaign_language,\n       fdfrd.field_run_date_value as campaign_run_start_date,\n       fdfrd.field_run_date_value2 as campaign_run_end_date,\n       to_timestamp(n1.created) as campaign_created_date,\n       fdfrn.field_reportback_noun_value as campaign_noun,\n       fdfrv.field_reportback_verb_value as campaign_verb,\n       array_to_string(array_agg(distinct ttd2.name), ', ') as campaign_cause_type,\n       array_to_string(array_agg(distinct fdfcta.field_call_to_action_value), ', ') as campaign_cta,\n       array_to_string(array_agg(distinct ttd1.name), ', ') as campaign_action_type \nFROM {{ env_var('FIELD_DATA_FIELD_CAMPAIGNS') }} c \nLEFT JOIN {{ env_var('NODE') }} n1 \n    ON n1.nid = c.entity_id \nLEFT JOIN {{ env_var('NODE') }} n2 \n    ON n2.nid = c.field_campaigns_target_id \nLEFT JOIN {{ env_var('FIELD_DATA_FIELD_CAMPAIGN_TYPE') }} fdfct \n    ON c.field_campaigns_target_id = fdfct.entity_id \nLEFT JOIN {{ env_var('FIELD_DATA_FIELD_RUN_DATE') }} fdfrd \n    ON c.entity_id = fdfrd.entity_id and c.language = fdfrd.language \nLEFT JOIN {{ env_var('FIELD_DATA_FIELD_CALL_TO_ACTION') }} fdfcta \n    ON c.field_campaigns_target_id = fdfcta.entity_id and c.language = fdfcta.language \nLEFT JOIN {{ env_var('FIELD_DATA_FIELD_REPORTBACK_NOUN') }} fdfrn \n    ON c.field_campaigns_target_id = fdfrn.entity_id and c.language = fdfrn.language \nLEFT JOIN {{ env_var('FIELD_DATA_FIELD_REPORTBACK_VERB') }} fdfrv \n    ON c.field_campaigns_target_id = fdfrv.entity_id and c.language = fdfrv.language \nLEFT JOIN {{ env_var('FIELD_DATA_FIELD_ACTION_TYPE') }} fdfat \n    ON fdfat.entity_id = c.field_campaigns_target_id \nLEFT JOIN {{ env_var('TAXONOMY_TERM_DATA') }} ttd1 \n    ON fdfat.field_action_type_tid = ttd1.tid \nLEFT JOIN {{ env_var('FIELD_DATA_FIELD_CAUSE') }} fdfc \n    ON fdfc.entity_id = c.field_campaigns_target_id \nLEFT JOIN {{ env_var('TAXONOMY_TERM_DATA') }} ttd2 \n    ON fdfc.field_cause_tid = ttd2.tid \nWHERE c.bundle = 'campaign_run' \nGROUP BY 1,2,3,4,5,6,7,8,9,10,11 \nORDER BY c.field_campaigns_target_id, fdfrd.field_run_date_value", "refs": [], "sources": [], "depends_on": {"nodes": [], "macros": []}, "unique_id": "model.ds_dbt.campaign_info_all", "empty": false, "fqn": ["ds_dbt", "campaign_info", "campaign_info_all"], "tags": [], "config": {"enabled": true, "materialized": "table", "post-hook": [], "pre-hook": [], "tags": [], "quoting": {}, "vars": {}, "column_types": {}, "persist_docs": {}, "alias": "campaign_info_all"}, "schema": "ds_dbt", "database": "quasar_prod_warehouse", "alias": "campaign_info_all", "columns": {}, "description": "", "compiled": true, "compiled_sql": "SELECT c.field_campaigns_target_id as campaign_node_id,\n       n2.title as campaign_node_id_title,\n       c.entity_id as campaign_run_id,\n       n1.title as campaign_run_id_title,\n       fdfct.field_campaign_type_value as campaign_type,\n       c.language as campaign_language,\n       fdfrd.field_run_date_value as campaign_run_start_date,\n       fdfrd.field_run_date_value2 as campaign_run_end_date,\n       to_timestamp(n1.created) as campaign_created_date,\n       fdfrn.field_reportback_noun_value as campaign_noun,\n       fdfrv.field_reportback_verb_value as campaign_verb,\n       array_to_string(array_agg(distinct ttd2.name), ', ') as campaign_cause_type,\n       array_to_string(array_agg(distinct fdfcta.field_call_to_action_value), ', ') as campaign_cta,\n       array_to_string(array_agg(distinct ttd1.name), ', ') as campaign_action_type \nFROM dosomething.field_data_field_campaigns c \nLEFT JOIN dosomething.node n1 \n    ON n1.nid = c.entity_id \nLEFT JOIN dosomething.node n2 \n    ON n2.nid = c.field_campaigns_target_id \nLEFT JOIN dosomething.field_data_field_campaign_type fdfct \n    ON c.field_campaigns_target_id = fdfct.entity_id \nLEFT JOIN dosomething.field_data_field_run_date fdfrd \n    ON c.entity_id = fdfrd.entity_id and c.language = fdfrd.language \nLEFT JOIN dosomething.field_data_field_call_to_action fdfcta \n    ON c.field_campaigns_target_id = fdfcta.entity_id and c.language = fdfcta.language \nLEFT JOIN dosomething.field_data_field_reportback_noun fdfrn \n    ON c.field_campaigns_target_id = fdfrn.entity_id and c.language = fdfrn.language \nLEFT JOIN dosomething.field_data_field_reportback_verb fdfrv \n    ON c.field_campaigns_target_id = fdfrv.entity_id and c.language = fdfrv.language \nLEFT JOIN dosomething.field_data_field_action_type fdfat \n    ON fdfat.entity_id = c.field_campaigns_target_id \nLEFT JOIN dosomething.taxonomy_term_data ttd1 \n    ON fdfat.field_action_type_tid = ttd1.tid \nLEFT JOIN dosomething.field_data_field_cause fdfc \n    ON fdfc.entity_id = c.field_campaigns_target_id \nLEFT JOIN dosomething.taxonomy_term_data ttd2 \n    ON fdfc.field_cause_tid = ttd2.tid \nWHERE c.bundle = 'campaign_run' \nGROUP BY 1,2,3,4,5,6,7,8,9,10,11 \nORDER BY c.field_campaigns_target_id, fdfrd.field_run_date_value", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "SELECT c.field_campaigns_target_id as campaign_node_id,\n       n2.title as campaign_node_id_title,\n       c.entity_id as campaign_run_id,\n       n1.title as campaign_run_id_title,\n       fdfct.field_campaign_type_value as campaign_type,\n       c.language as campaign_language,\n       fdfrd.field_run_date_value as campaign_run_start_date,\n       fdfrd.field_run_date_value2 as campaign_run_end_date,\n       to_timestamp(n1.created) as campaign_created_date,\n       fdfrn.field_reportback_noun_value as campaign_noun,\n       fdfrv.field_reportback_verb_value as campaign_verb,\n       array_to_string(array_agg(distinct ttd2.name), ', ') as campaign_cause_type,\n       array_to_string(array_agg(distinct fdfcta.field_call_to_action_value), ', ') as campaign_cta,\n       array_to_string(array_agg(distinct ttd1.name), ', ') as campaign_action_type \nFROM dosomething.field_data_field_campaigns c \nLEFT JOIN dosomething.node n1 \n    ON n1.nid = c.entity_id \nLEFT JOIN dosomething.node n2 \n    ON n2.nid = c.field_campaigns_target_id \nLEFT JOIN dosomething.field_data_field_campaign_type fdfct \n    ON c.field_campaigns_target_id = fdfct.entity_id \nLEFT JOIN dosomething.field_data_field_run_date fdfrd \n    ON c.entity_id = fdfrd.entity_id and c.language = fdfrd.language \nLEFT JOIN dosomething.field_data_field_call_to_action fdfcta \n    ON c.field_campaigns_target_id = fdfcta.entity_id and c.language = fdfcta.language \nLEFT JOIN dosomething.field_data_field_reportback_noun fdfrn \n    ON c.field_campaigns_target_id = fdfrn.entity_id and c.language = fdfrn.language \nLEFT JOIN dosomething.field_data_field_reportback_verb fdfrv \n    ON c.field_campaigns_target_id = fdfrv.entity_id and c.language = fdfrv.language \nLEFT JOIN dosomething.field_data_field_action_type fdfat \n    ON fdfat.entity_id = c.field_campaigns_target_id \nLEFT JOIN dosomething.taxonomy_term_data ttd1 \n    ON fdfat.field_action_type_tid = ttd1.tid \nLEFT JOIN dosomething.field_data_field_cause fdfc \n    ON fdfc.entity_id = c.field_campaigns_target_id \nLEFT JOIN dosomething.taxonomy_term_data ttd2 \n    ON fdfc.field_cause_tid = ttd2.tid \nWHERE c.bundle = 'campaign_run' \nGROUP BY 1,2,3,4,5,6,7,8,9,10,11 \nORDER BY c.field_campaigns_target_id, fdfrd.field_run_date_value", "wrapped_sql": "None", "build_path": "../../docs/compiled/ds_dbt/campaign_info/campaign_info_all.sql"}, "error": null, "skip": false, "status": null, "fail": null, "warn": null, "execution_time": 0.13065695762634277, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2019-11-05T20:29:22.830694Z", "completed_at": "2019-11-05T20:29:22.843156Z"}, {"name": "execute", "started_at": "2019-11-05T20:29:22.843306Z", "completed_at": "2019-11-05T20:29:22.844859Z"}]}, {"node": {"name": "snowplow_base_event", "root_path": "/Users/mrich/projects/quasar/quasar/dbt", "resource_type": "model", "path": "phoenix_events/snowplow_base_event.sql", "original_file_path": "models/phoenix_events/snowplow_base_event.sql", "package_name": "ds_dbt", "raw_sql": "SELECT \n    event_id AS event_id,\n    app_id AS event_source,\n    collector_tstamp AS event_datetime,\n    se_property AS event_name,\n    \"event\" AS event_type,\n    page_urlhost AS host,\n    page_urlpath AS \"path\",\n    page_urlquery AS query_parameters,\n    se_category,\n    se_action,\n    se_label,\n    domain_sessionid AS session_id,\n    domain_sessionidx AS session_counter,\n    dvce_type AS browser_size,\n    user_id AS northstar_id,\n    domain_userid AS device_id,\n    refr_urlhost AS referrer_host,\n    refr_urlpath AS referrer_path,\n    refr_source AS referrer_source\n  FROM {{ env_var('FT_SNOWPLOW') }}.\"event\"\n  WHERE event_id NOT IN\n  (SELECT event_id\n   FROM {{ env_var('FT_SNOWPLOW') }}.ua_parser_context u\n   WHERE u.useragent_family SIMILAR TO\n   '%%(bot|crawl|slurp|spider|archiv|spinn|sniff|seo|audit|survey|pingdom|worm|capture|(browser|screen)shots|analyz|index|thumb|check|facebook|YandexBot|Twitterbot|a_archiver|facebookexternalhit|Bingbot|Googlebot|Baiduspider|360(Spider|User-agent)|Ghost)%%')", "refs": [], "sources": [], "depends_on": {"nodes": [], "macros": []}, "unique_id": "model.ds_dbt.snowplow_base_event", "empty": false, "fqn": ["ds_dbt", "phoenix_events", "snowplow_base_event"], "tags": [], "config": {"enabled": true, "materialized": "table", "post-hook": [{"sql": "CREATE INDEX IF NOT EXISTS event_index ON {{ this }}(event_id)", "transaction": true, "index": 0}, {"sql": "GRANT SELECT ON {{ this }} TO dsanalyst", "transaction": true, "index": 1}], "pre-hook": [], "tags": [], "quoting": {}, "vars": {}, "column_types": {}, "persist_docs": {}, "alias": "snowplow_base_event"}, "schema": "ds_dbt", "database": "quasar_prod_warehouse", "alias": "snowplow_base_event", "columns": {}, "description": "", "compiled": true, "compiled_sql": "SELECT \n    event_id AS event_id,\n    app_id AS event_source,\n    collector_tstamp AS event_datetime,\n    se_property AS event_name,\n    \"event\" AS event_type,\n    page_urlhost AS host,\n    page_urlpath AS \"path\",\n    page_urlquery AS query_parameters,\n    se_category,\n    se_action,\n    se_label,\n    domain_sessionid AS session_id,\n    domain_sessionidx AS session_counter,\n    dvce_type AS browser_size,\n    user_id AS northstar_id,\n    domain_userid AS device_id,\n    refr_urlhost AS referrer_host,\n    refr_urlpath AS referrer_path,\n    refr_source AS referrer_source\n  FROM ft_snowplow.\"event\"\n  WHERE event_id NOT IN\n  (SELECT event_id\n   FROM ft_snowplow.ua_parser_context u\n   WHERE u.useragent_family SIMILAR TO\n   '%%(bot|crawl|slurp|spider|archiv|spinn|sniff|seo|audit|survey|pingdom|worm|capture|(browser|screen)shots|analyz|index|thumb|check|facebook|YandexBot|Twitterbot|a_archiver|facebookexternalhit|Bingbot|Googlebot|Baiduspider|360(Spider|User-agent)|Ghost)%%')", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "SELECT \n    event_id AS event_id,\n    app_id AS event_source,\n    collector_tstamp AS event_datetime,\n    se_property AS event_name,\n    \"event\" AS event_type,\n    page_urlhost AS host,\n    page_urlpath AS \"path\",\n    page_urlquery AS query_parameters,\n    se_category,\n    se_action,\n    se_label,\n    domain_sessionid AS session_id,\n    domain_sessionidx AS session_counter,\n    dvce_type AS browser_size,\n    user_id AS northstar_id,\n    domain_userid AS device_id,\n    refr_urlhost AS referrer_host,\n    refr_urlpath AS referrer_path,\n    refr_source AS referrer_source\n  FROM ft_snowplow.\"event\"\n  WHERE event_id NOT IN\n  (SELECT event_id\n   FROM ft_snowplow.ua_parser_context u\n   WHERE u.useragent_family SIMILAR TO\n   '%%(bot|crawl|slurp|spider|archiv|spinn|sniff|seo|audit|survey|pingdom|worm|capture|(browser|screen)shots|analyz|index|thumb|check|facebook|YandexBot|Twitterbot|a_archiver|facebookexternalhit|Bingbot|Googlebot|Baiduspider|360(Spider|User-agent)|Ghost)%%')", "wrapped_sql": "None", "build_path": "../../docs/compiled/ds_dbt/phoenix_events/snowplow_base_event.sql"}, "error": null, "skip": false, "status": null, "fail": null, "warn": null, "execution_time": 0.007910966873168945, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2019-11-05T20:29:22.847898Z", "completed_at": "2019-11-05T20:29:22.852594Z"}, {"name": "execute", "started_at": "2019-11-05T20:29:22.852742Z", "completed_at": "2019-11-05T20:29:22.854070Z"}]}, {"node": {"name": "snowplow_payload_event", "root_path": "/Users/mrich/projects/quasar/quasar/dbt", "resource_type": "model", "path": "phoenix_events/snowplow_payload_event.sql", "original_file_path": "models/phoenix_events/snowplow_payload_event.sql", "package_name": "ds_dbt", "raw_sql": "SELECT\n    event_id,\n    payload::jsonb #>> '{utmSource}' AS utm_source,\n    payload::jsonb #>> '{utmMedium}' AS utm_medium,\n    payload::jsonb #>> '{utmCampaign}' AS utm_campaign,\n    payload::jsonb #>> '{url}' AS url,\n    payload::jsonb #>> '{campaignId}' AS campaign_id,\n    payload::jsonb #>> '{modalType}' AS modal_type,\n    payload::jsonb #>> '{searchQuery}' AS search_query,\n    _fivetran_synced AS ft_timestamp\n  FROM {{ env_var('FT_SNOWPLOW') }}.snowplow_event", "refs": [], "sources": [], "depends_on": {"nodes": [], "macros": []}, "unique_id": "model.ds_dbt.snowplow_payload_event", "empty": false, "fqn": ["ds_dbt", "phoenix_events", "snowplow_payload_event"], "tags": [], "config": {"enabled": true, "materialized": "table", "post-hook": [{"sql": "CREATE INDEX IF NOT EXISTS payload_event_id ON {{ this }}(event_id)", "transaction": true, "index": 0}, {"sql": "GRANT SELECT ON {{ this }} TO dsanalyst", "transaction": true, "index": 1}], "pre-hook": [], "tags": [], "quoting": {}, "vars": {}, "column_types": {}, "persist_docs": {}, "alias": "snowplow_payload_event"}, "schema": "ds_dbt", "database": "quasar_prod_warehouse", "alias": "snowplow_payload_event", "columns": {}, "description": "", "compiled": true, "compiled_sql": "SELECT\n    event_id,\n    payload::jsonb #>> '{utmSource}' AS utm_source,\n    payload::jsonb #>> '{utmMedium}' AS utm_medium,\n    payload::jsonb #>> '{utmCampaign}' AS utm_campaign,\n    payload::jsonb #>> '{url}' AS url,\n    payload::jsonb #>> '{campaignId}' AS campaign_id,\n    payload::jsonb #>> '{modalType}' AS modal_type,\n    payload::jsonb #>> '{searchQuery}' AS search_query,\n    _fivetran_synced AS ft_timestamp\n  FROM ft_snowplow.snowplow_event", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "SELECT\n    event_id,\n    payload::jsonb #>> '{utmSource}' AS utm_source,\n    payload::jsonb #>> '{utmMedium}' AS utm_medium,\n    payload::jsonb #>> '{utmCampaign}' AS utm_campaign,\n    payload::jsonb #>> '{url}' AS url,\n    payload::jsonb #>> '{campaignId}' AS campaign_id,\n    payload::jsonb #>> '{modalType}' AS modal_type,\n    payload::jsonb #>> '{searchQuery}' AS search_query,\n    _fivetran_synced AS ft_timestamp\n  FROM ft_snowplow.snowplow_event", "wrapped_sql": "None", "build_path": "../../docs/compiled/ds_dbt/phoenix_events/snowplow_payload_event.sql"}, "error": null, "skip": false, "status": null, "fail": null, "warn": null, "execution_time": 0.007280826568603516, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2019-11-05T20:29:22.857010Z", "completed_at": "2019-11-05T20:29:22.861160Z"}, {"name": "execute", "started_at": "2019-11-05T20:29:22.861392Z", "completed_at": "2019-11-05T20:29:22.862662Z"}]}, {"node": {"name": "messages_flattened", "root_path": "/Users/mrich/projects/quasar/quasar/dbt", "resource_type": "model", "path": "gambit_messages/messages_flattened.sql", "original_file_path": "models/gambit_messages/messages_flattened.sql", "package_name": "ds_dbt", "raw_sql": "SELECT\n    agent_id AS agent_id,\n    attachments->0->>'contentType' AS attachment_content_type,\n    attachments->0->>'url' AS attachment_url,\n    broadcast_id AS broadcast_id,\n    campaign_id AS campaign_id,\n    conversation_id AS conversation_id,\n    created_at as created_at,\n    direction AS direction,\n    _id AS message_id,\n    macro AS macro,\n    match AS match,\n    metadata #>> '{delivery,deliveredAt}' AS carrier_delivered_at,\n    metadata #>> '{delivery,failureData,code}' as carrier_failure_code,\n    (metadata #> '{delivery}' ->> 'totalSegments')::INT AS total_segments,\n    platform_message_id as platform_message_id,\n    template AS template,\n    text AS text,\n    topic AS topic,\n    user_id AS user_id\n  FROM {{ env_var('FT_GAMBIT') }}.messages", "refs": [], "sources": [], "depends_on": {"nodes": [], "macros": []}, "unique_id": "model.ds_dbt.messages_flattened", "empty": false, "fqn": ["ds_dbt", "gambit_messages", "messages_flattened"], "tags": [], "config": {"enabled": true, "materialized": "table", "post-hook": [{"sql": "CREATE INDEX IF NOT EXISTS messages_user_id ON {{ this }}(user_id)", "transaction": true, "index": 0}, {"sql": "CREATE INDEX IF NOT EXISTS platform_message_id ON {{ this }}(platform_message_id)", "transaction": true, "index": 1}, {"sql": "GRANT SELECT ON {{ this }} TO dsanalyst", "transaction": true, "index": 2}, {"sql": "GRANT SELECT ON {{ this }} TO looker", "transaction": true, "index": 3}], "pre-hook": [], "tags": [], "quoting": {}, "vars": {}, "column_types": {}, "persist_docs": {}, "alias": "messages_flattened"}, "schema": "ds_dbt", "database": "quasar_prod_warehouse", "alias": "messages_flattened", "columns": {}, "description": "", "compiled": true, "compiled_sql": "SELECT\n    agent_id AS agent_id,\n    attachments->0->>'contentType' AS attachment_content_type,\n    attachments->0->>'url' AS attachment_url,\n    broadcast_id AS broadcast_id,\n    campaign_id AS campaign_id,\n    conversation_id AS conversation_id,\n    created_at as created_at,\n    direction AS direction,\n    _id AS message_id,\n    macro AS macro,\n    match AS match,\n    metadata #>> '{delivery,deliveredAt}' AS carrier_delivered_at,\n    metadata #>> '{delivery,failureData,code}' as carrier_failure_code,\n    (metadata #> '{delivery}' ->> 'totalSegments')::INT AS total_segments,\n    platform_message_id as platform_message_id,\n    template AS template,\n    text AS text,\n    topic AS topic,\n    user_id AS user_id\n  FROM ft_gambit_conversations_api.messages", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "SELECT\n    agent_id AS agent_id,\n    attachments->0->>'contentType' AS attachment_content_type,\n    attachments->0->>'url' AS attachment_url,\n    broadcast_id AS broadcast_id,\n    campaign_id AS campaign_id,\n    conversation_id AS conversation_id,\n    created_at as created_at,\n    direction AS direction,\n    _id AS message_id,\n    macro AS macro,\n    match AS match,\n    metadata #>> '{delivery,deliveredAt}' AS carrier_delivered_at,\n    metadata #>> '{delivery,failureData,code}' as carrier_failure_code,\n    (metadata #> '{delivery}' ->> 'totalSegments')::INT AS total_segments,\n    platform_message_id as platform_message_id,\n    template AS template,\n    text AS text,\n    topic AS topic,\n    user_id AS user_id\n  FROM ft_gambit_conversations_api.messages", "wrapped_sql": "None", "build_path": "../../docs/compiled/ds_dbt/gambit_messages/messages_flattened.sql"}, "error": null, "skip": false, "status": null, "fail": null, "warn": null, "execution_time": 0.008345842361450195, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2019-11-05T20:29:22.865632Z", "completed_at": "2019-11-05T20:29:22.870374Z"}, {"name": "execute", "started_at": "2019-11-05T20:29:22.870581Z", "completed_at": "2019-11-05T20:29:22.872219Z"}]}, {"node": {"name": "rock_the_vote", "root_path": "/Users/mrich/projects/quasar/quasar/dbt", "resource_type": "model", "path": "campaign_activity/rock_the_vote.sql", "original_file_path": "models/campaign_activity/rock_the_vote.sql", "package_name": "ds_dbt", "raw_sql": "SELECT id AS post_id, \n   details::jsonb->>'Tracking Source' AS tracking_source,\n   (details::jsonb->>'Started registration')::timestamp AS started_registration,\n   details::jsonb->>'Finish with State' AS finish_with_state,\n   details::jsonb->>'Status' AS status,\n   COALESCE(details::jsonb->>'Email address',details::jsonb->>'email') AS email,\n   details::jsonb->>'Home zip code' AS zip\n FROM {{ env_var('FT_ROGUE') }}.posts\n WHERE source = 'rock-the-vote'", "refs": [], "sources": [], "depends_on": {"nodes": [], "macros": []}, "unique_id": "model.ds_dbt.rock_the_vote", "empty": false, "fqn": ["ds_dbt", "campaign_activity", "rock_the_vote"], "tags": [], "config": {"enabled": true, "materialized": "table", "post-hook": [{"sql": "CREATE UNIQUE INDEX IF NOT EXISTS rtv_unique ON {{ this }}(post_id, started_registration)", "transaction": true, "index": 0}, {"sql": "GRANT SELECT ON {{ this }} TO dsanalyst", "transaction": true, "index": 1}, {"sql": "GRANT SELECT ON {{ this }} TO looker", "transaction": true, "index": 2}], "pre-hook": [], "tags": [], "quoting": {}, "vars": {}, "column_types": {}, "persist_docs": {}, "alias": "rock_the_vote"}, "schema": "ds_dbt", "database": "quasar_prod_warehouse", "alias": "rock_the_vote", "columns": {}, "description": "", "compiled": true, "compiled_sql": "SELECT id AS post_id, \n   details::jsonb->>'Tracking Source' AS tracking_source,\n   (details::jsonb->>'Started registration')::timestamp AS started_registration,\n   details::jsonb->>'Finish with State' AS finish_with_state,\n   details::jsonb->>'Status' AS status,\n   COALESCE(details::jsonb->>'Email address',details::jsonb->>'email') AS email,\n   details::jsonb->>'Home zip code' AS zip\n FROM ft_dosomething_rogue.posts\n WHERE source = 'rock-the-vote'", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "SELECT id AS post_id, \n   details::jsonb->>'Tracking Source' AS tracking_source,\n   (details::jsonb->>'Started registration')::timestamp AS started_registration,\n   details::jsonb->>'Finish with State' AS finish_with_state,\n   details::jsonb->>'Status' AS status,\n   COALESCE(details::jsonb->>'Email address',details::jsonb->>'email') AS email,\n   details::jsonb->>'Home zip code' AS zip\n FROM ft_dosomething_rogue.posts\n WHERE source = 'rock-the-vote'", "wrapped_sql": "None", "build_path": "../../docs/compiled/ds_dbt/campaign_activity/rock_the_vote.sql"}, "error": null, "skip": false, "status": null, "fail": null, "warn": null, "execution_time": 0.008505105972290039, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2019-11-05T20:29:22.876130Z", "completed_at": "2019-11-05T20:29:22.880720Z"}, {"name": "execute", "started_at": "2019-11-05T20:29:22.880934Z", "completed_at": "2019-11-05T20:29:22.882330Z"}]}, {"node": {"name": "signups", "root_path": "/Users/mrich/projects/quasar/quasar/dbt", "resource_type": "model", "path": "campaign_activity/signups.sql", "original_file_path": "models/campaign_activity/signups.sql", "package_name": "ds_dbt", "raw_sql": "SELECT\n    sd.northstar_id AS northstar_id,\n    sd.id AS id,\n    sd.campaign_id AS campaign_id,\n    sd.campaign_run_id AS campaign_run_id,\n    sd.why_participated AS why_participated,\n    sd.\"source\" AS \"source\",\n    sd.details,\n\tCASE WHEN sd.\"source\" = 'niche' THEN 'niche'\n\t     WHEN sd.\"source\" ilike '%%sms%%' THEN 'sms'\n\t     WHEN sd.\"source\" in ('rock-the-vote', 'turbovote') THEN 'voter-reg'\n\t     ELSE 'web' END AS source_bucket,\n    sd.created_at AS created_at,\n    sd.source_details,\n    CASE \n\t\tWHEN source_details ILIKE '%%\\}'\n\t\tTHEN (CAST(source_details as json) ->> 'utm_medium') \n\t\tELSE NULL END AS utm_medium,\n\tCASE \n\t\tWHEN source_details ILIKE '%%\\}'\n\t\tTHEN (CAST(source_details as json) ->> 'utm_source') \n\t\tELSE NULL END AS utm_source,\n\tCASE \n\t\tWHEN source_details ILIKE '%%\\}'\n\t\tTHEN (CAST(source_details as json) ->> 'utm_campaign') \n\t\tELSE NULL END AS utm_campaign\nFROM {{ env_var('FT_ROGUE') }}.signups sd\nWHERE sd._fivetran_deleted = 'false'\nAND sd.deleted_at IS NULL\nAND sd.\"source\" IS DISTINCT FROM 'rogue-oauth'\nAND sd.why_participated IS DISTINCT FROM 'Testing from Ghost Inspector!'", "refs": [], "sources": [], "depends_on": {"nodes": [], "macros": []}, "unique_id": "model.ds_dbt.signups", "empty": false, "fqn": ["ds_dbt", "campaign_activity", "signups"], "tags": [], "config": {"enabled": true, "materialized": "table", "post-hook": [{"sql": "CREATE UNIQUE INDEX IF NOT EXISTS signups_unique ON {{ this }}(created_at, id)", "transaction": true, "index": 0}, {"sql": "GRANT SELECT ON {{ this }} TO dsanalyst", "transaction": true, "index": 1}, {"sql": "GRANT SELECT ON {{ this }} TO looker", "transaction": true, "index": 2}], "pre-hook": [], "tags": [], "quoting": {}, "vars": {}, "column_types": {}, "persist_docs": {}, "alias": "signups"}, "schema": "ds_dbt", "database": "quasar_prod_warehouse", "alias": "signups", "columns": {}, "description": "", "compiled": true, "compiled_sql": "SELECT\n    sd.northstar_id AS northstar_id,\n    sd.id AS id,\n    sd.campaign_id AS campaign_id,\n    sd.campaign_run_id AS campaign_run_id,\n    sd.why_participated AS why_participated,\n    sd.\"source\" AS \"source\",\n    sd.details,\n\tCASE WHEN sd.\"source\" = 'niche' THEN 'niche'\n\t     WHEN sd.\"source\" ilike '%%sms%%' THEN 'sms'\n\t     WHEN sd.\"source\" in ('rock-the-vote', 'turbovote') THEN 'voter-reg'\n\t     ELSE 'web' END AS source_bucket,\n    sd.created_at AS created_at,\n    sd.source_details,\n    CASE \n\t\tWHEN source_details ILIKE '%%\\}'\n\t\tTHEN (CAST(source_details as json) ->> 'utm_medium') \n\t\tELSE NULL END AS utm_medium,\n\tCASE \n\t\tWHEN source_details ILIKE '%%\\}'\n\t\tTHEN (CAST(source_details as json) ->> 'utm_source') \n\t\tELSE NULL END AS utm_source,\n\tCASE \n\t\tWHEN source_details ILIKE '%%\\}'\n\t\tTHEN (CAST(source_details as json) ->> 'utm_campaign') \n\t\tELSE NULL END AS utm_campaign\nFROM ft_dosomething_rogue.signups sd\nWHERE sd._fivetran_deleted = 'false'\nAND sd.deleted_at IS NULL\nAND sd.\"source\" IS DISTINCT FROM 'rogue-oauth'\nAND sd.why_participated IS DISTINCT FROM 'Testing from Ghost Inspector!'", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "SELECT\n    sd.northstar_id AS northstar_id,\n    sd.id AS id,\n    sd.campaign_id AS campaign_id,\n    sd.campaign_run_id AS campaign_run_id,\n    sd.why_participated AS why_participated,\n    sd.\"source\" AS \"source\",\n    sd.details,\n\tCASE WHEN sd.\"source\" = 'niche' THEN 'niche'\n\t     WHEN sd.\"source\" ilike '%%sms%%' THEN 'sms'\n\t     WHEN sd.\"source\" in ('rock-the-vote', 'turbovote') THEN 'voter-reg'\n\t     ELSE 'web' END AS source_bucket,\n    sd.created_at AS created_at,\n    sd.source_details,\n    CASE \n\t\tWHEN source_details ILIKE '%%\\}'\n\t\tTHEN (CAST(source_details as json) ->> 'utm_medium') \n\t\tELSE NULL END AS utm_medium,\n\tCASE \n\t\tWHEN source_details ILIKE '%%\\}'\n\t\tTHEN (CAST(source_details as json) ->> 'utm_source') \n\t\tELSE NULL END AS utm_source,\n\tCASE \n\t\tWHEN source_details ILIKE '%%\\}'\n\t\tTHEN (CAST(source_details as json) ->> 'utm_campaign') \n\t\tELSE NULL END AS utm_campaign\nFROM ft_dosomething_rogue.signups sd\nWHERE sd._fivetran_deleted = 'false'\nAND sd.deleted_at IS NULL\nAND sd.\"source\" IS DISTINCT FROM 'rogue-oauth'\nAND sd.why_participated IS DISTINCT FROM 'Testing from Ghost Inspector!'", "wrapped_sql": "None", "build_path": "../../docs/compiled/ds_dbt/campaign_activity/signups.sql"}, "error": null, "skip": false, "status": null, "fail": null, "warn": null, "execution_time": 0.01623988151550293, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2019-11-05T20:29:22.885633Z", "completed_at": "2019-11-05T20:29:22.897809Z"}, {"name": "execute", "started_at": "2019-11-05T20:29:22.898525Z", "completed_at": "2019-11-05T20:29:22.900005Z"}]}, {"node": {"name": "turbovote", "root_path": "/Users/mrich/projects/quasar/quasar/dbt", "resource_type": "model", "path": "campaign_activity/turbovote.sql", "original_file_path": "models/campaign_activity/turbovote.sql", "package_name": "ds_dbt", "raw_sql": "SELECT id AS post_id, \n\tdetails::jsonb->>'hostname' AS hostname,\n\tdetails::jsonb->>'referral_code' AS referral_code,\n\tdetails::jsonb->>'partner_comms_opt_in' AS partner_comms_opt_in,\n\t(details::jsonb->>'created-at')::timestamp AS created_at,\n\t(details::jsonb->>'updated-at')::timestamp AS updated_at,\n\tsource_details,\n\tdetails::jsonb->>'voter_registration_status' AS voter_registration_status,\n\tdetails::jsonb->>'voter_registration_source' AS voter_registration_source,\n\tdetails::jsonb->>'voter_registration_method' AS voter_registration_method,\n\tdetails::jsonb->>'voter_registration_preference' AS voter_registration_preference,\n\tdetails::jsonb->>'email_subscribed' AS email_subscribed,\n\tdetails::jsonb->>'sms_subscribed' AS sms_subscribed\nFROM {{ env_var('FT_ROGUE') }}.posts\nWHERE source = 'turbovote'", "refs": [], "sources": [], "depends_on": {"nodes": [], "macros": []}, "unique_id": "model.ds_dbt.turbovote", "empty": false, "fqn": ["ds_dbt", "campaign_activity", "turbovote"], "tags": [], "config": {"enabled": true, "materialized": "table", "post-hook": [{"sql": "CREATE UNIQUE INDEX IF NOT EXISTS turbovote_unique ON {{ this }}(post_id, created_at, updated_at)", "transaction": true, "index": 0}, {"sql": "GRANT SELECT ON {{ this }} TO dsanalyst", "transaction": true, "index": 1}, {"sql": "GRANT SELECT ON {{ this }} TO looker", "transaction": true, "index": 2}], "pre-hook": [], "tags": [], "quoting": {}, "vars": {}, "column_types": {}, "persist_docs": {}, "alias": "turbovote"}, "schema": "ds_dbt", "database": "quasar_prod_warehouse", "alias": "turbovote", "columns": {}, "description": "", "compiled": true, "compiled_sql": "SELECT id AS post_id, \n\tdetails::jsonb->>'hostname' AS hostname,\n\tdetails::jsonb->>'referral_code' AS referral_code,\n\tdetails::jsonb->>'partner_comms_opt_in' AS partner_comms_opt_in,\n\t(details::jsonb->>'created-at')::timestamp AS created_at,\n\t(details::jsonb->>'updated-at')::timestamp AS updated_at,\n\tsource_details,\n\tdetails::jsonb->>'voter_registration_status' AS voter_registration_status,\n\tdetails::jsonb->>'voter_registration_source' AS voter_registration_source,\n\tdetails::jsonb->>'voter_registration_method' AS voter_registration_method,\n\tdetails::jsonb->>'voter_registration_preference' AS voter_registration_preference,\n\tdetails::jsonb->>'email_subscribed' AS email_subscribed,\n\tdetails::jsonb->>'sms_subscribed' AS sms_subscribed\nFROM ft_dosomething_rogue.posts\nWHERE source = 'turbovote'", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "SELECT id AS post_id, \n\tdetails::jsonb->>'hostname' AS hostname,\n\tdetails::jsonb->>'referral_code' AS referral_code,\n\tdetails::jsonb->>'partner_comms_opt_in' AS partner_comms_opt_in,\n\t(details::jsonb->>'created-at')::timestamp AS created_at,\n\t(details::jsonb->>'updated-at')::timestamp AS updated_at,\n\tsource_details,\n\tdetails::jsonb->>'voter_registration_status' AS voter_registration_status,\n\tdetails::jsonb->>'voter_registration_source' AS voter_registration_source,\n\tdetails::jsonb->>'voter_registration_method' AS voter_registration_method,\n\tdetails::jsonb->>'voter_registration_preference' AS voter_registration_preference,\n\tdetails::jsonb->>'email_subscribed' AS email_subscribed,\n\tdetails::jsonb->>'sms_subscribed' AS sms_subscribed\nFROM ft_dosomething_rogue.posts\nWHERE source = 'turbovote'", "wrapped_sql": "None", "build_path": "../../docs/compiled/ds_dbt/campaign_activity/turbovote.sql"}, "error": null, "skip": false, "status": null, "fail": null, "warn": null, "execution_time": 0.007625102996826172, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2019-11-05T20:29:22.903896Z", "completed_at": "2019-11-05T20:29:22.908236Z"}, {"name": "execute", "started_at": "2019-11-05T20:29:22.908375Z", "completed_at": "2019-11-05T20:29:22.909674Z"}]}, {"node": {"name": "cio_latest_status", "root_path": "/Users/mrich/projects/quasar/quasar/dbt", "resource_type": "model", "path": "users_table/cio_latest_status.sql", "original_file_path": "models/users_table/cio_latest_status.sql", "package_name": "ds_dbt", "raw_sql": "SELECT \n\tcio.customer_id,\n\tmax(CASE WHEN \n\t\t\tcio.event_type = 'customer_unsubscribed' \n\t\t\tTHEN 'customer_unsubscribed' \n\t\t\tELSE 'customer_subscribed' END) AS event_type,\n\tmax(cio.\"timestamp\") AS \"timestamp\"\nFROM cio.customer_event cio\nINNER JOIN \n\t(SELECT \n\t\tctemp.customer_id,\n\t\tmax(ctemp.\"timestamp\") AS max_update\n\tFROM cio.customer_event ctemp\n\tGROUP BY ctemp.customer_id) cio_max \n\t\tON cio_max.customer_id = cio.customer_id \n\t\tAND cio_max.max_update = cio.\"timestamp\"\nGROUP BY cio.customer_id", "refs": [], "sources": [], "depends_on": {"nodes": [], "macros": []}, "unique_id": "model.ds_dbt.cio_latest_status", "empty": false, "fqn": ["ds_dbt", "users_table", "cio_latest_status"], "tags": [], "config": {"enabled": true, "materialized": "table", "post-hook": [{"sql": "CREATE INDEX IF NOT EXISTS cio_indices ON {{ this }}(customer_id)", "transaction": true, "index": 0}, {"sql": "GRANT SELECT ON {{ this }} TO dsanalyst", "transaction": true, "index": 1}, {"sql": "GRANT SELECT ON {{ this }} TO looker", "transaction": true, "index": 2}], "pre-hook": [], "tags": [], "quoting": {}, "vars": {}, "column_types": {}, "persist_docs": {}, "alias": "cio_latest_status"}, "schema": "ds_dbt", "database": "quasar_prod_warehouse", "alias": "cio_latest_status", "columns": {}, "description": "", "compiled": true, "compiled_sql": "SELECT \n\tcio.customer_id,\n\tmax(CASE WHEN \n\t\t\tcio.event_type = 'customer_unsubscribed' \n\t\t\tTHEN 'customer_unsubscribed' \n\t\t\tELSE 'customer_subscribed' END) AS event_type,\n\tmax(cio.\"timestamp\") AS \"timestamp\"\nFROM cio.customer_event cio\nINNER JOIN \n\t(SELECT \n\t\tctemp.customer_id,\n\t\tmax(ctemp.\"timestamp\") AS max_update\n\tFROM cio.customer_event ctemp\n\tGROUP BY ctemp.customer_id) cio_max \n\t\tON cio_max.customer_id = cio.customer_id \n\t\tAND cio_max.max_update = cio.\"timestamp\"\nGROUP BY cio.customer_id", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "SELECT \n\tcio.customer_id,\n\tmax(CASE WHEN \n\t\t\tcio.event_type = 'customer_unsubscribed' \n\t\t\tTHEN 'customer_unsubscribed' \n\t\t\tELSE 'customer_subscribed' END) AS event_type,\n\tmax(cio.\"timestamp\") AS \"timestamp\"\nFROM cio.customer_event cio\nINNER JOIN \n\t(SELECT \n\t\tctemp.customer_id,\n\t\tmax(ctemp.\"timestamp\") AS max_update\n\tFROM cio.customer_event ctemp\n\tGROUP BY ctemp.customer_id) cio_max \n\t\tON cio_max.customer_id = cio.customer_id \n\t\tAND cio_max.max_update = cio.\"timestamp\"\nGROUP BY cio.customer_id", "wrapped_sql": "None", "build_path": "../../docs/compiled/ds_dbt/users_table/cio_latest_status.sql"}, "error": null, "skip": false, "status": null, "fail": null, "warn": null, "execution_time": 0.007421016693115234, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2019-11-05T20:29:22.912773Z", "completed_at": "2019-11-05T20:29:22.916867Z"}, {"name": "execute", "started_at": "2019-11-05T20:29:22.917066Z", "completed_at": "2019-11-05T20:29:22.918450Z"}]}, {"node": {"name": "bertly_clicks", "root_path": "/Users/mrich/projects/quasar/quasar/dbt", "resource_type": "model", "path": "bertly/bertly_clicks.sql", "original_file_path": "models/bertly/bertly_clicks.sql", "package_name": "ds_dbt", "raw_sql": "SELECT\n    *,\n    (regexp_split_to_array(\n        (regexp_split_to_array(\n            (regexp_split_to_array(\n                c.target_url, 'user')\n            )[2], E'[=:]+')\n        )[2],\n        E'[^a-zA-Z0-9]')\n    )[1] AS northstar_id,\n    COALESCE(\n        (regexp_split_to_array(c.target_url, 'broadcastid=', 'i'))[2],\n        (regexp_split_to_array(c.target_url, 'broadcastid_', 'i'))[2],\n        (regexp_split_to_array(c.target_url, 'broadcast_id=', 'i'))[2],\n        (regexp_split_to_array(c.target_url, 'broadcast_id_', 'i'))[2],\n        (regexp_split_to_array(c.target_url, 'broadcast_', 'i'))[2]\n            ) AS broadcast_id,\n    (CASE WHEN target_url ilike '%%source=web%%' THEN 'web'\n        WHEN target_url ilike '%%source=email%%' THEN 'email'\n        ELSE 'sms'\n        END) AS SOURCE,\n    CASE\n        WHEN c.user_agent IS NULL THEN 'uncertain'\n        WHEN c.user_agent ILIKE '%%facebot twitterbot%%'\n                OR c.user_agent ILIKE '%%X11; Ubuntu; Linux i686%%' THEN 'preview'\n        ELSE 'click' END AS interaction_type\nFROM {{ env_var('BERTLY') }}.clicks c", "refs": [], "sources": [], "depends_on": {"nodes": [], "macros": []}, "unique_id": "model.ds_dbt.bertly_clicks", "empty": false, "fqn": ["ds_dbt", "bertly", "bertly_clicks"], "tags": [], "config": {"enabled": true, "materialized": "table", "post-hook": [{"sql": "CREATE UNIQUE INDEX IF NOT EXISTS clicks_unique ON {{ this }}(click_id)", "transaction": true, "index": 0}, {"sql": "GRANT SELECT ON {{ this }} TO dsanalyst", "transaction": true, "index": 1}, {"sql": "GRANT SELECT ON {{ this }} TO looker", "transaction": true, "index": 2}], "pre-hook": [], "tags": [], "quoting": {}, "vars": {}, "column_types": {}, "persist_docs": {}, "alias": "bertly_clicks"}, "schema": "ds_dbt", "database": "quasar_prod_warehouse", "alias": "bertly_clicks", "columns": {}, "description": "", "compiled": true, "compiled_sql": "SELECT\n    *,\n    (regexp_split_to_array(\n        (regexp_split_to_array(\n            (regexp_split_to_array(\n                c.target_url, 'user')\n            )[2], E'[=:]+')\n        )[2],\n        E'[^a-zA-Z0-9]')\n    )[1] AS northstar_id,\n    COALESCE(\n        (regexp_split_to_array(c.target_url, 'broadcastid=', 'i'))[2],\n        (regexp_split_to_array(c.target_url, 'broadcastid_', 'i'))[2],\n        (regexp_split_to_array(c.target_url, 'broadcast_id=', 'i'))[2],\n        (regexp_split_to_array(c.target_url, 'broadcast_id_', 'i'))[2],\n        (regexp_split_to_array(c.target_url, 'broadcast_', 'i'))[2]\n            ) AS broadcast_id,\n    (CASE WHEN target_url ilike '%%source=web%%' THEN 'web'\n        WHEN target_url ilike '%%source=email%%' THEN 'email'\n        ELSE 'sms'\n        END) AS SOURCE,\n    CASE\n        WHEN c.user_agent IS NULL THEN 'uncertain'\n        WHEN c.user_agent ILIKE '%%facebot twitterbot%%'\n                OR c.user_agent ILIKE '%%X11; Ubuntu; Linux i686%%' THEN 'preview'\n        ELSE 'click' END AS interaction_type\nFROM bertly.clicks c", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "SELECT\n    *,\n    (regexp_split_to_array(\n        (regexp_split_to_array(\n            (regexp_split_to_array(\n                c.target_url, 'user')\n            )[2], E'[=:]+')\n        )[2],\n        E'[^a-zA-Z0-9]')\n    )[1] AS northstar_id,\n    COALESCE(\n        (regexp_split_to_array(c.target_url, 'broadcastid=', 'i'))[2],\n        (regexp_split_to_array(c.target_url, 'broadcastid_', 'i'))[2],\n        (regexp_split_to_array(c.target_url, 'broadcast_id=', 'i'))[2],\n        (regexp_split_to_array(c.target_url, 'broadcast_id_', 'i'))[2],\n        (regexp_split_to_array(c.target_url, 'broadcast_', 'i'))[2]\n            ) AS broadcast_id,\n    (CASE WHEN target_url ilike '%%source=web%%' THEN 'web'\n        WHEN target_url ilike '%%source=email%%' THEN 'email'\n        ELSE 'sms'\n        END) AS SOURCE,\n    CASE\n        WHEN c.user_agent IS NULL THEN 'uncertain'\n        WHEN c.user_agent ILIKE '%%facebot twitterbot%%'\n                OR c.user_agent ILIKE '%%X11; Ubuntu; Linux i686%%' THEN 'preview'\n        ELSE 'click' END AS interaction_type\nFROM bertly.clicks c", "wrapped_sql": "None", "build_path": "../../docs/compiled/ds_dbt/bertly/bertly_clicks.sql"}, "error": null, "skip": false, "status": null, "fail": null, "warn": null, "execution_time": 0.0077970027923583984, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2019-11-05T20:29:22.921777Z", "completed_at": "2019-11-05T20:29:22.926293Z"}, {"name": "execute", "started_at": "2019-11-05T20:29:22.926438Z", "completed_at": "2019-11-05T20:29:22.927764Z"}]}, {"node": {"name": "email_subscription_topics_raw", "root_path": "/Users/mrich/projects/quasar/quasar/dbt", "resource_type": "model", "path": "news_subscription/email_subscription_topics_raw.sql", "original_file_path": "models/news_subscription/email_subscription_topics_raw.sql", "package_name": "ds_dbt", "raw_sql": "SELECT DISTINCT\n\t_id as northstar_id,\n\t(audit #>> '{email_subscription_topics,updated_at,date}')::timestamp AS newsletter_updated_at,\n\tjson_array_elements(u.email_subscription_topics)::TEXT AS newsletter_topic\nFROM {{ env_var(\"NORTHSTAR_FT_SCHEMA\") }}.northstar_users_snapshot u\nWHERE audit #>> '{email_subscription_topics,updated_at,date}' IS NOT NULL", "refs": [], "sources": [], "depends_on": {"nodes": [], "macros": []}, "unique_id": "model.ds_dbt.email_subscription_topics_raw", "empty": false, "fqn": ["ds_dbt", "news_subscription", "email_subscription_topics_raw"], "tags": [], "config": {"enabled": true, "materialized": "table", "post-hook": [{"sql": "GRANT SELECT ON {{ this }} TO dsanalyst", "transaction": true, "index": 0}, {"sql": "GRANT SELECT ON {{ this }} TO looker", "transaction": true, "index": 1}], "pre-hook": [], "tags": [], "quoting": {}, "vars": {}, "column_types": {}, "persist_docs": {}, "alias": "email_subscription_topics_raw"}, "schema": "ds_dbt", "database": "quasar_prod_warehouse", "alias": "email_subscription_topics_raw", "columns": {}, "description": "", "compiled": true, "compiled_sql": "SELECT DISTINCT\n\t_id as northstar_id,\n\t(audit #>> '{email_subscription_topics,updated_at,date}')::timestamp AS newsletter_updated_at,\n\tjson_array_elements(u.email_subscription_topics)::TEXT AS newsletter_topic\nFROM northstar_ft_userapi.northstar_users_snapshot u\nWHERE audit #>> '{email_subscription_topics,updated_at,date}' IS NOT NULL", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "SELECT DISTINCT\n\t_id as northstar_id,\n\t(audit #>> '{email_subscription_topics,updated_at,date}')::timestamp AS newsletter_updated_at,\n\tjson_array_elements(u.email_subscription_topics)::TEXT AS newsletter_topic\nFROM northstar_ft_userapi.northstar_users_snapshot u\nWHERE audit #>> '{email_subscription_topics,updated_at,date}' IS NOT NULL", "wrapped_sql": "None", "build_path": "../../docs/compiled/ds_dbt/news_subscription/email_subscription_topics_raw.sql"}, "error": null, "skip": false, "status": null, "fail": null, "warn": null, "execution_time": 0.007157325744628906, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2019-11-05T20:29:22.930820Z", "completed_at": "2019-11-05T20:29:22.934844Z"}, {"name": "execute", "started_at": "2019-11-05T20:29:22.934989Z", "completed_at": "2019-11-05T20:29:22.936274Z"}]}, {"node": {"name": "post_actions", "root_path": "/Users/mrich/projects/quasar/quasar/dbt", "resource_type": "model", "path": "post_actions/post_actions.sql", "original_file_path": "models/post_actions/post_actions.sql", "package_name": "ds_dbt", "raw_sql": "SELECT *\nFROM {{ env_var('FT_ROGUE') }}.actions", "refs": [], "sources": [], "depends_on": {"nodes": [], "macros": []}, "unique_id": "model.ds_dbt.post_actions", "empty": false, "fqn": ["ds_dbt", "post_actions", "post_actions"], "tags": [], "config": {"enabled": true, "materialized": "table", "post-hook": [{"sql": "CREATE UNIQUE INDEX IF NOT EXISTS post_actions_unique ON {{ this }}(created_at, id)", "transaction": true, "index": 0}, {"sql": "GRANT SELECT ON {{ this }} TO dsanalyst", "transaction": true, "index": 1}, {"sql": "GRANT SELECT ON {{ this }} TO looker", "transaction": true, "index": 2}], "pre-hook": [], "tags": [], "quoting": {}, "vars": {}, "column_types": {}, "persist_docs": {}, "alias": "post_actions"}, "schema": "ds_dbt", "database": "quasar_prod_warehouse", "alias": "post_actions", "columns": {}, "description": "", "compiled": true, "compiled_sql": "SELECT *\nFROM ft_dosomething_rogue.actions", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "SELECT *\nFROM ft_dosomething_rogue.actions", "wrapped_sql": "None", "build_path": "../../docs/compiled/ds_dbt/post_actions/post_actions.sql"}, "error": null, "skip": false, "status": null, "fail": null, "warn": null, "execution_time": 0.007538795471191406, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2019-11-05T20:29:22.939595Z", "completed_at": "2019-11-05T20:29:22.943779Z"}, {"name": "execute", "started_at": "2019-11-05T20:29:22.943925Z", "completed_at": "2019-11-05T20:29:22.945263Z"}]}, {"node": {"name": "northstar_users_snapshot", "root_path": "/Users/mrich/projects/quasar/quasar/dbt", "resource_type": "snapshot", "path": "northstar.sql", "original_file_path": "snapshots/northstar.sql", "package_name": "ds_dbt", "raw_sql": "\n\n    {{\n        config(\n          target_database=env_var(\"NORTHSTAR_TARGET_DB\"),\n          target_schema=env_var(\"NORTHSTAR_FT_SCHEMA\"),\n          unique_key='_id',\n          strategy='timestamp',\n          updated_at='updated_at',\n        )\n    }}\n    \n    select * from {{ env_var('NORTHSTAR_FT_SCHEMA') }}.users\n    \n", "refs": [], "sources": [], "depends_on": {"nodes": [], "macros": []}, "unique_id": "snapshot.ds_dbt.northstar_users_snapshot", "empty": false, "fqn": ["ds_dbt", "northstar_users_snapshot"], "tags": [], "config": {"enabled": true, "materialized": "snapshot", "post-hook": [], "pre-hook": [], "tags": [], "quoting": {}, "vars": {}, "column_types": {}, "persist_docs": {}, "target_database": "quasar_prod_warehouse", "target_schema": "northstar_ft_userapi", "unique_key": "_id", "strategy": "timestamp", "updated_at": "updated_at"}, "schema": "northstar_ft_userapi", "database": "quasar_prod_warehouse", "alias": "northstar_users_snapshot", "columns": {}, "description": "", "compiled": true, "compiled_sql": "\n\n    \n    \n    select * from northstar_ft_userapi.users\n    ", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "\n\n    \n    \n    select * from northstar_ft_userapi.users\n    ", "wrapped_sql": "None"}, "error": null, "skip": false, "status": null, "fail": null, "warn": null, "execution_time": 0.007208108901977539, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2019-11-05T20:29:22.948368Z", "completed_at": "2019-11-05T20:29:22.952718Z"}, {"name": "execute", "started_at": "2019-11-05T20:29:22.952828Z", "completed_at": "2019-11-05T20:29:22.953820Z"}]}, {"node": {"name": "campaign_info", "root_path": "/Users/mrich/projects/quasar/quasar/dbt", "resource_type": "model", "path": "campaign_info/campaign_info.sql", "original_file_path": "models/campaign_info/campaign_info.sql", "package_name": "ds_dbt", "raw_sql": "SELECT \n\tc.id AS campaign_id,\n\tc.campaign_run_id,\n\tc.internal_title AS campaign_name,\n\tc.cause AS campaign_cause,\n\tc.start_date AS campaign_run_start_date,\n\tc.end_date AS campaign_run_end_date,\n\tc.created_at AS campaign_created_date,\n\tCOALESCE(i.campaign_node_id, c.id) AS campaign_node_id,\n\ti.campaign_node_id_title,\n\ti.campaign_run_id_title,\n\ti.campaign_action_type,\n\ti.campaign_cause_type,\n\ti.campaign_noun,\n\ti.campaign_verb,\n\ti.campaign_cta\nFROM {{ env_var('FT_ROGUE') }}.campaigns c\nLEFT JOIN {{ ref('campaign_info_all') }} i ON i.campaign_run_id = c.campaign_run_id\nWHERE i.campaign_language = 'en' OR i.campaign_language IS NULL", "refs": [["campaign_info_all"]], "sources": [], "depends_on": {"nodes": ["model.ds_dbt.campaign_info_all"], "macros": []}, "unique_id": "model.ds_dbt.campaign_info", "empty": false, "fqn": ["ds_dbt", "campaign_info", "campaign_info"], "tags": [], "config": {"enabled": true, "materialized": "table", "post-hook": [{"sql": "CREATE UNIQUE INDEX IF NOT EXISTS campaign_info_i ON {{ this }} (campaign_run_id, campaign_id)", "transaction": true, "index": 0}, {"sql": "GRANT SELECT ON {{ this }} TO dsanalyst", "transaction": true, "index": 1}, {"sql": "GRANT SELECT ON {{ this }} TO looker", "transaction": true, "index": 2}], "pre-hook": [], "tags": [], "quoting": {}, "vars": {}, "column_types": {}, "persist_docs": {}, "alias": "campaign_info"}, "schema": "ds_dbt", "database": "quasar_prod_warehouse", "alias": "campaign_info", "columns": {}, "description": "", "compiled": true, "compiled_sql": "SELECT \n\tc.id AS campaign_id,\n\tc.campaign_run_id,\n\tc.internal_title AS campaign_name,\n\tc.cause AS campaign_cause,\n\tc.start_date AS campaign_run_start_date,\n\tc.end_date AS campaign_run_end_date,\n\tc.created_at AS campaign_created_date,\n\tCOALESCE(i.campaign_node_id, c.id) AS campaign_node_id,\n\ti.campaign_node_id_title,\n\ti.campaign_run_id_title,\n\ti.campaign_action_type,\n\ti.campaign_cause_type,\n\ti.campaign_noun,\n\ti.campaign_verb,\n\ti.campaign_cta\nFROM ft_dosomething_rogue.campaigns c\nLEFT JOIN \"quasar_prod_warehouse\".\"ds_dbt\".\"campaign_info_all\" i ON i.campaign_run_id = c.campaign_run_id\nWHERE i.campaign_language = 'en' OR i.campaign_language IS NULL", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "SELECT \n\tc.id AS campaign_id,\n\tc.campaign_run_id,\n\tc.internal_title AS campaign_name,\n\tc.cause AS campaign_cause,\n\tc.start_date AS campaign_run_start_date,\n\tc.end_date AS campaign_run_end_date,\n\tc.created_at AS campaign_created_date,\n\tCOALESCE(i.campaign_node_id, c.id) AS campaign_node_id,\n\ti.campaign_node_id_title,\n\ti.campaign_run_id_title,\n\ti.campaign_action_type,\n\ti.campaign_cause_type,\n\ti.campaign_noun,\n\ti.campaign_verb,\n\ti.campaign_cta\nFROM ft_dosomething_rogue.campaigns c\nLEFT JOIN \"quasar_prod_warehouse\".\"ds_dbt\".\"campaign_info_all\" i ON i.campaign_run_id = c.campaign_run_id\nWHERE i.campaign_language = 'en' OR i.campaign_language IS NULL", "wrapped_sql": "None", "build_path": "../../docs/compiled/ds_dbt/campaign_info/campaign_info.sql"}, "error": null, "skip": false, "status": null, "fail": null, "warn": null, "execution_time": 0.007956981658935547, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2019-11-05T20:29:22.956540Z", "completed_at": "2019-11-05T20:29:22.961239Z"}, {"name": "execute", "started_at": "2019-11-05T20:29:22.961371Z", "completed_at": "2019-11-05T20:29:22.963012Z"}]}, {"node": {"name": "campaign_info_international", "root_path": "/Users/mrich/projects/quasar/quasar/dbt", "resource_type": "model", "path": "campaign_info/campaign_info_international.sql", "original_file_path": "models/campaign_info/campaign_info_international.sql", "package_name": "ds_dbt", "raw_sql": "SELECT \n\tc.campaign_id,\n\tc.campaign_name,\n\ti.*\nFROM {{ ref('campaign_info_all') }} i\nLEFT JOIN {{ env_var('FT_ROGUE') }}.campaigns c ON i.campaign_run_id = c.campaign_run_id\nWHERE campaign_language IS DISTINCT FROM 'en'", "refs": [["campaign_info_all"]], "sources": [], "depends_on": {"nodes": ["model.ds_dbt.campaign_info_all"], "macros": []}, "unique_id": "model.ds_dbt.campaign_info_international", "empty": false, "fqn": ["ds_dbt", "campaign_info", "campaign_info_international"], "tags": [], "config": {"enabled": true, "materialized": "table", "post-hook": [{"sql": "GRANT SELECT ON {{ this }} TO dsanalyst", "transaction": true, "index": 0}, {"sql": "GRANT SELECT ON {{ this }} TO looker", "transaction": true, "index": 1}], "pre-hook": [], "tags": [], "quoting": {}, "vars": {}, "column_types": {}, "persist_docs": {}}, "schema": "ds_dbt", "database": "quasar_prod_warehouse", "alias": "campaign_info_international", "columns": {}, "description": "", "compiled": true, "compiled_sql": "SELECT \n\tc.campaign_id,\n\tc.campaign_name,\n\ti.*\nFROM \"quasar_prod_warehouse\".\"ds_dbt\".\"campaign_info_all\" i\nLEFT JOIN ft_dosomething_rogue.campaigns c ON i.campaign_run_id = c.campaign_run_id\nWHERE campaign_language IS DISTINCT FROM 'en'", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "SELECT \n\tc.campaign_id,\n\tc.campaign_name,\n\ti.*\nFROM \"quasar_prod_warehouse\".\"ds_dbt\".\"campaign_info_all\" i\nLEFT JOIN ft_dosomething_rogue.campaigns c ON i.campaign_run_id = c.campaign_run_id\nWHERE campaign_language IS DISTINCT FROM 'en'", "wrapped_sql": "None", "build_path": "../../docs/compiled/ds_dbt/campaign_info/campaign_info_international.sql"}, "error": null, "skip": false, "status": null, "fail": null, "warn": null, "execution_time": 0.01240396499633789, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2019-11-05T20:29:22.966811Z", "completed_at": "2019-11-05T20:29:22.975383Z"}, {"name": "execute", "started_at": "2019-11-05T20:29:22.975588Z", "completed_at": "2019-11-05T20:29:22.976811Z"}]}, {"node": {"name": "snowplow_raw_events", "root_path": "/Users/mrich/projects/quasar/quasar/dbt", "resource_type": "model", "path": "phoenix_events/snowplow_raw_events.sql", "original_file_path": "models/phoenix_events/snowplow_raw_events.sql", "package_name": "ds_dbt", "raw_sql": "SELECT\n\tb.event_id,\n\tb.event_source,\n\tb.event_datetime,\n\tb.event_name,\n\tb.event_type,\n\tb.\"host\",\n\tb.\"path\",\n    b.query_parameters,\n\tb.se_category,\n\tb.se_action,\n\tb.se_label,\n\tb.session_id,\n\tb.session_counter,\n\tb.browser_size,\n\tb.northstar_id,\n\tb.device_id,\n\tb.referrer_host,\n\tb.referrer_path,\n\tb.referrer_source,\n\tp.utm_source,\n\tp.utm_medium,\n\tp.utm_campaign,\n\tp.url AS clicked_link_url,\n\tp.campaign_id,\n\tp.modal_type,\n\tp.search_query\n  FROM {{ ref('snowplow_base_event') }} b\n  LEFT JOIN {{ ref('snowplow_payload_event') }} p \n  ON b.event_id = p.event_id", "refs": [["snowplow_base_event"], ["snowplow_payload_event"]], "sources": [], "depends_on": {"nodes": ["model.ds_dbt.snowplow_base_event", "model.ds_dbt.snowplow_payload_event"], "macros": []}, "unique_id": "model.ds_dbt.snowplow_raw_events", "empty": false, "fqn": ["ds_dbt", "phoenix_events", "snowplow_raw_events"], "tags": [], "config": {"enabled": true, "materialized": "table", "post-hook": [{"sql": "CREATE INDEX IF NOT EXISTS raw_event_id ON {{ this }}(event_id)", "transaction": true, "index": 0}, {"sql": "GRANT SELECT ON {{ this }} TO dsanalyst", "transaction": true, "index": 1}], "pre-hook": [], "tags": [], "quoting": {}, "vars": {}, "column_types": {}, "persist_docs": {}, "alias": "snowplow_raw_events"}, "schema": "ds_dbt", "database": "quasar_prod_warehouse", "alias": "snowplow_raw_events", "columns": {}, "description": "", "compiled": true, "compiled_sql": "SELECT\n\tb.event_id,\n\tb.event_source,\n\tb.event_datetime,\n\tb.event_name,\n\tb.event_type,\n\tb.\"host\",\n\tb.\"path\",\n    b.query_parameters,\n\tb.se_category,\n\tb.se_action,\n\tb.se_label,\n\tb.session_id,\n\tb.session_counter,\n\tb.browser_size,\n\tb.northstar_id,\n\tb.device_id,\n\tb.referrer_host,\n\tb.referrer_path,\n\tb.referrer_source,\n\tp.utm_source,\n\tp.utm_medium,\n\tp.utm_campaign,\n\tp.url AS clicked_link_url,\n\tp.campaign_id,\n\tp.modal_type,\n\tp.search_query\n  FROM \"quasar_prod_warehouse\".\"ds_dbt\".\"snowplow_base_event\" b\n  LEFT JOIN \"quasar_prod_warehouse\".\"ds_dbt\".\"snowplow_payload_event\" p \n  ON b.event_id = p.event_id", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "SELECT\n\tb.event_id,\n\tb.event_source,\n\tb.event_datetime,\n\tb.event_name,\n\tb.event_type,\n\tb.\"host\",\n\tb.\"path\",\n    b.query_parameters,\n\tb.se_category,\n\tb.se_action,\n\tb.se_label,\n\tb.session_id,\n\tb.session_counter,\n\tb.browser_size,\n\tb.northstar_id,\n\tb.device_id,\n\tb.referrer_host,\n\tb.referrer_path,\n\tb.referrer_source,\n\tp.utm_source,\n\tp.utm_medium,\n\tp.utm_campaign,\n\tp.url AS clicked_link_url,\n\tp.campaign_id,\n\tp.modal_type,\n\tp.search_query\n  FROM \"quasar_prod_warehouse\".\"ds_dbt\".\"snowplow_base_event\" b\n  LEFT JOIN \"quasar_prod_warehouse\".\"ds_dbt\".\"snowplow_payload_event\" p \n  ON b.event_id = p.event_id", "wrapped_sql": "None", "build_path": "../../docs/compiled/ds_dbt/phoenix_events/snowplow_raw_events.sql"}, "error": null, "skip": false, "status": null, "fail": null, "warn": null, "execution_time": 0.00888967514038086, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2019-11-05T20:29:22.979793Z", "completed_at": "2019-11-05T20:29:22.985474Z"}, {"name": "execute", "started_at": "2019-11-05T20:29:22.985675Z", "completed_at": "2019-11-05T20:29:22.986975Z"}]}, {"node": {"name": "gambit_messages_inbound", "root_path": "/Users/mrich/projects/quasar/quasar/dbt", "resource_type": "model", "path": "gambit_messages/gambit_messages_inbound.sql", "original_file_path": "models/gambit_messages/gambit_messages_inbound.sql", "package_name": "ds_dbt", "raw_sql": "SELECT\n  *\n  FROM\n    {{ ref('messages_flattened') }} f\n  WHERE\n    f.direction = 'inbound'\n    AND f.user_id IS NOT NULL\n  UNION ALL\n    (SELECT\n      g.agent_id,\n      g.attachment_url,\n      g.attachment_content_type,\n      g.broadcast_id,\n      g.campaign_id,\n      g.conversation_id,\n      g.created_at,\n      g.direction,\n      g.message_id,\n      g.macro,\n      g.\"match\",\n      g.carrier_delivered_at,\n      g.carrier_failure_code,\n      g.total_segments,\n      g.platform_message_id,\n      g.template,\n      g.text,\n      g.topic,\n      u.northstar_id AS user_id\n    FROM\n      {{ ref('messages_flattened') }} g\n    LEFT JOIN\n      {{ env_var('FT_GAMBIT') }}.conversations c\n    ON g.conversation_id = c._id\n    LEFT JOIN\n      public.users u\n      ON substring(c.platform_user_id, 3, 10) = u.mobile\n      AND u.mobile IS NOT NULL\n      AND u.mobile <> ''\n    WHERE\n      g.direction = 'inbound'\n      AND g.user_id IS NULL)", "refs": [["messages_flattened"], ["messages_flattened"]], "sources": [], "depends_on": {"nodes": ["model.ds_dbt.messages_flattened", "model.ds_dbt.messages_flattened"], "macros": []}, "unique_id": "model.ds_dbt.gambit_messages_inbound", "empty": false, "fqn": ["ds_dbt", "gambit_messages", "gambit_messages_inbound"], "tags": [], "config": {"enabled": true, "materialized": "table", "post-hook": [{"sql": "CREATE INDEX IF NOT EXISTS messages_in_index ON {{ this }}(message_id, created_at, user_id, conversation_id)", "transaction": true, "index": 0}, {"sql": "GRANT SELECT ON {{ this }} TO dsanalyst", "transaction": true, "index": 1}, {"sql": "GRANT SELECT ON {{ this }} TO looker", "transaction": true, "index": 2}], "pre-hook": [], "tags": [], "quoting": {}, "vars": {}, "column_types": {}, "persist_docs": {}, "alias": "gambit_messages_inbound"}, "schema": "ds_dbt", "database": "quasar_prod_warehouse", "alias": "gambit_messages_inbound", "columns": {}, "description": "", "compiled": true, "compiled_sql": "SELECT\n  *\n  FROM\n    \"quasar_prod_warehouse\".\"ds_dbt\".\"messages_flattened\" f\n  WHERE\n    f.direction = 'inbound'\n    AND f.user_id IS NOT NULL\n  UNION ALL\n    (SELECT\n      g.agent_id,\n      g.attachment_url,\n      g.attachment_content_type,\n      g.broadcast_id,\n      g.campaign_id,\n      g.conversation_id,\n      g.created_at,\n      g.direction,\n      g.message_id,\n      g.macro,\n      g.\"match\",\n      g.carrier_delivered_at,\n      g.carrier_failure_code,\n      g.total_segments,\n      g.platform_message_id,\n      g.template,\n      g.text,\n      g.topic,\n      u.northstar_id AS user_id\n    FROM\n      \"quasar_prod_warehouse\".\"ds_dbt\".\"messages_flattened\" g\n    LEFT JOIN\n      ft_gambit_conversations_api.conversations c\n    ON g.conversation_id = c._id\n    LEFT JOIN\n      public.users u\n      ON substring(c.platform_user_id, 3, 10) = u.mobile\n      AND u.mobile IS NOT NULL\n      AND u.mobile <> ''\n    WHERE\n      g.direction = 'inbound'\n      AND g.user_id IS NULL)", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "SELECT\n  *\n  FROM\n    \"quasar_prod_warehouse\".\"ds_dbt\".\"messages_flattened\" f\n  WHERE\n    f.direction = 'inbound'\n    AND f.user_id IS NOT NULL\n  UNION ALL\n    (SELECT\n      g.agent_id,\n      g.attachment_url,\n      g.attachment_content_type,\n      g.broadcast_id,\n      g.campaign_id,\n      g.conversation_id,\n      g.created_at,\n      g.direction,\n      g.message_id,\n      g.macro,\n      g.\"match\",\n      g.carrier_delivered_at,\n      g.carrier_failure_code,\n      g.total_segments,\n      g.platform_message_id,\n      g.template,\n      g.text,\n      g.topic,\n      u.northstar_id AS user_id\n    FROM\n      \"quasar_prod_warehouse\".\"ds_dbt\".\"messages_flattened\" g\n    LEFT JOIN\n      ft_gambit_conversations_api.conversations c\n    ON g.conversation_id = c._id\n    LEFT JOIN\n      public.users u\n      ON substring(c.platform_user_id, 3, 10) = u.mobile\n      AND u.mobile IS NOT NULL\n      AND u.mobile <> ''\n    WHERE\n      g.direction = 'inbound'\n      AND g.user_id IS NULL)", "wrapped_sql": "None", "build_path": "../../docs/compiled/ds_dbt/gambit_messages/gambit_messages_inbound.sql"}, "error": null, "skip": false, "status": null, "fail": null, "warn": null, "execution_time": 0.008776187896728516, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2019-11-05T20:29:22.990036Z", "completed_at": "2019-11-05T20:29:22.995550Z"}, {"name": "execute", "started_at": "2019-11-05T20:29:22.995691Z", "completed_at": "2019-11-05T20:29:22.997061Z"}]}, {"node": {"name": "gambit_messages_outbound", "root_path": "/Users/mrich/projects/quasar/quasar/dbt", "resource_type": "model", "path": "gambit_messages/gambit_messages_outbound.sql", "original_file_path": "models/gambit_messages/gambit_messages_outbound.sql", "package_name": "ds_dbt", "raw_sql": "SELECT\n    f.campaign_id,\n    f.conversation_id,\n    f.broadcast_id,\n    f.created_at,\n    f.direction,\n    f.message_id,\n    f.macro,\n    f.\"match\",\n    f.carrier_delivered_at,\n    f.carrier_failure_code,\n    f.platform_message_id,\n    f.template,\n    f.text,\n    f.topic,\n    f.user_id\n  FROM\n    {{ ref('messages_flattened') }} f\n  WHERE\n    f.direction <> 'inbound'\n    AND f.user_id IS NOT NULL\n  UNION ALL\n    (SELECT\n      g.campaign_id,\n      g.conversation_id,\n      g.broadcast_id,\n      g.created_at,\n      g.direction,\n      g.message_id,\n      g.macro,\n      g.\"match\",\n      g.carrier_delivered_at,\n      g.carrier_failure_code,\n      g.platform_message_id,\n      g.template,\n      g.text,\n      g.topic,\n      u.northstar_id AS user_id\n      FROM\n        {{ ref('messages_flattened') }} g\n      LEFT JOIN\n        {{ env_var('FT_GAMBIT') }}.conversations c\n      ON g.conversation_id = c._id\n      LEFT JOIN\n        public.users u\n      ON substring(c.platform_user_id, 3, 10) = u.mobile\n        AND u.mobile IS NOT NULL\n        AND u.mobile <> ''\n      WHERE\n        g.direction <> 'inbound'\n        AND g.user_id IS NULL)", "refs": [["messages_flattened"], ["messages_flattened"]], "sources": [], "depends_on": {"nodes": ["model.ds_dbt.messages_flattened", "model.ds_dbt.messages_flattened"], "macros": []}, "unique_id": "model.ds_dbt.gambit_messages_outbound", "empty": false, "fqn": ["ds_dbt", "gambit_messages", "gambit_messages_outbound"], "tags": [], "config": {"enabled": true, "materialized": "table", "post-hook": [{"sql": "CREATE INDEX IF NOT EXISTS messages_out_index ON {{ this }}(message_id, created_at, user_id, conversation_id)", "transaction": true, "index": 0}, {"sql": "CREATE INDEX IF NOT EXISTS deliverability ON {{ this }}(created_at, carrier_failure_code)", "transaction": true, "index": 1}, {"sql": "GRANT SELECT ON {{ this }} TO dsanalyst", "transaction": true, "index": 2}, {"sql": "GRANT SELECT ON {{ this }} TO looker", "transaction": true, "index": 3}], "pre-hook": [], "tags": [], "quoting": {}, "vars": {}, "column_types": {}, "persist_docs": {}, "alias": "gambit_messages_outbound"}, "schema": "ds_dbt", "database": "quasar_prod_warehouse", "alias": "gambit_messages_outbound", "columns": {}, "description": "", "compiled": true, "compiled_sql": "SELECT\n    f.campaign_id,\n    f.conversation_id,\n    f.broadcast_id,\n    f.created_at,\n    f.direction,\n    f.message_id,\n    f.macro,\n    f.\"match\",\n    f.carrier_delivered_at,\n    f.carrier_failure_code,\n    f.platform_message_id,\n    f.template,\n    f.text,\n    f.topic,\n    f.user_id\n  FROM\n    \"quasar_prod_warehouse\".\"ds_dbt\".\"messages_flattened\" f\n  WHERE\n    f.direction <> 'inbound'\n    AND f.user_id IS NOT NULL\n  UNION ALL\n    (SELECT\n      g.campaign_id,\n      g.conversation_id,\n      g.broadcast_id,\n      g.created_at,\n      g.direction,\n      g.message_id,\n      g.macro,\n      g.\"match\",\n      g.carrier_delivered_at,\n      g.carrier_failure_code,\n      g.platform_message_id,\n      g.template,\n      g.text,\n      g.topic,\n      u.northstar_id AS user_id\n      FROM\n        \"quasar_prod_warehouse\".\"ds_dbt\".\"messages_flattened\" g\n      LEFT JOIN\n        ft_gambit_conversations_api.conversations c\n      ON g.conversation_id = c._id\n      LEFT JOIN\n        public.users u\n      ON substring(c.platform_user_id, 3, 10) = u.mobile\n        AND u.mobile IS NOT NULL\n        AND u.mobile <> ''\n      WHERE\n        g.direction <> 'inbound'\n        AND g.user_id IS NULL)", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "SELECT\n    f.campaign_id,\n    f.conversation_id,\n    f.broadcast_id,\n    f.created_at,\n    f.direction,\n    f.message_id,\n    f.macro,\n    f.\"match\",\n    f.carrier_delivered_at,\n    f.carrier_failure_code,\n    f.platform_message_id,\n    f.template,\n    f.text,\n    f.topic,\n    f.user_id\n  FROM\n    \"quasar_prod_warehouse\".\"ds_dbt\".\"messages_flattened\" f\n  WHERE\n    f.direction <> 'inbound'\n    AND f.user_id IS NOT NULL\n  UNION ALL\n    (SELECT\n      g.campaign_id,\n      g.conversation_id,\n      g.broadcast_id,\n      g.created_at,\n      g.direction,\n      g.message_id,\n      g.macro,\n      g.\"match\",\n      g.carrier_delivered_at,\n      g.carrier_failure_code,\n      g.platform_message_id,\n      g.template,\n      g.text,\n      g.topic,\n      u.northstar_id AS user_id\n      FROM\n        \"quasar_prod_warehouse\".\"ds_dbt\".\"messages_flattened\" g\n      LEFT JOIN\n        ft_gambit_conversations_api.conversations c\n      ON g.conversation_id = c._id\n      LEFT JOIN\n        public.users u\n      ON substring(c.platform_user_id, 3, 10) = u.mobile\n        AND u.mobile IS NOT NULL\n        AND u.mobile <> ''\n      WHERE\n        g.direction <> 'inbound'\n        AND g.user_id IS NULL)", "wrapped_sql": "None", "build_path": "../../docs/compiled/ds_dbt/gambit_messages/gambit_messages_outbound.sql"}, "error": null, "skip": false, "status": null, "fail": null, "warn": null, "execution_time": 0.009673118591308594, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2019-11-05T20:29:22.998955Z", "completed_at": "2019-11-05T20:29:23.006146Z"}, {"name": "execute", "started_at": "2019-11-05T20:29:23.006310Z", "completed_at": "2019-11-05T20:29:23.008116Z"}]}, {"node": {"name": "posts", "root_path": "/Users/mrich/projects/quasar/quasar/dbt", "resource_type": "model", "path": "campaign_activity/posts.sql", "original_file_path": "models/campaign_activity/posts.sql", "package_name": "ds_dbt", "raw_sql": "SELECT\n\tpd.northstar_id as northstar_id,\n\tpd.id AS id,\n\tpd.\"type\" AS \"type\",\n\ta.\"name\" AS \"action\",\n\tpd.status AS status,\n\tpd.quantity AS quantity,\n\tpd.campaign_id,\n\tCASE\n\t\tWHEN pd.id IS NULL THEN NULL\n\t\tWHEN a.\"name\" = 'voter-reg OTG'\n\t\tTHEN pd.quantity\n\t\tELSE 1 END AS reportback_volume,\n\tpd.\"source\" AS \"source\",\n\tCASE\n\t\tWHEN pd.\"source\" IS NULL THEN NULL\n\t\tWHEN pd.\"source\" ilike '%%sms%%' THEN 'sms'\n\t\tELSE 'web' END AS source_bucket,\n\tCASE\n\t\tWHEN pd.\"type\" = 'phone-call'\n\t\tTHEN (pd.details::json ->> 'call_timestamp')::timestamptz\n\t\tELSE COALESCE(rtv.created_at, tv.created_at, pd.created_at)\n\t\tEND AS created_at,\n\tpd.url AS url,\n\tpd.text,\n\tCASE\n\t\tWHEN s.\"source\" = 'importer-client'\n\t\tAND pd.\"type\" = 'share-social'\n\t\tAND pd.created_at < s.created_at\n\t\tTHEN -1\n\t\tELSE pd.signup_id END AS signup_id,\n\tCASE\n\t\tWHEN pd.id IS NULL\n\t\tTHEN NULL\n\t\tELSE CONCAT(pd.\"type\", ' - ', a.\"name\") END AS post_class,\n\tCASE WHEN pd.status IN ('accepted', 'pending')\n\t\tAND a.\"name\" NOT ILIKE '%%vote%%'\n\t\tTHEN 1\n\t\tWHEN pd.status IN ('accepted', 'confirmed', 'register-OVR', 'register-form')\n\t\tAND a.\"name\" ILIKE '%%vote%%'\n\t\tTHEN 1\n\t\tELSE NULL END AS is_accepted,\n\tpd.action_id,\n\tpd.location,\n\tpd.postal_code,\n\ta.reportback AS is_reportback,\n\ta.civic_action,\n\ta.scholarship_entry\nFROM {{ env_var('FT_ROGUE') }}.posts pd\nINNER JOIN {{ ref('signups') }} s\n\tON pd.signup_id = s.id\nLEFT JOIN {{ ref('turbovote') }} tv\n\tON tv.post_id::bigint = pd.id::bigint\nLEFT JOIN\n\t(SELECT\n\t\tDISTINCT r.*,\n\t\tCASE\n\t\t\tWHEN r.started_registration < '2017-01-01'\n\t\t\tTHEN r.started_registration + interval '4 year'\n\t\t\tELSE r.started_registration END AS created_at\n\t\tFROM {{ ref('rock_the_vote') }} r\n\t) rtv\n\tON rtv.post_id::bigint = pd.id::bigint\nLEFT JOIN {{ env_var('FT_ROGUE') }}.actions a\n\tON pd.action_id = a.id\nWHERE pd.deleted_at IS NULL\nAND pd.\"text\" IS DISTINCT FROM 'test runscope upload'\nAND a.\"name\" IS NOT NULL", "refs": [["signups"], ["turbovote"], ["rock_the_vote"]], "sources": [], "depends_on": {"nodes": ["model.ds_dbt.signups", "model.ds_dbt.turbovote", "model.ds_dbt.rock_the_vote"], "macros": []}, "unique_id": "model.ds_dbt.posts", "empty": false, "fqn": ["ds_dbt", "campaign_activity", "posts"], "tags": [], "config": {"enabled": true, "materialized": "table", "post-hook": [{"sql": "CREATE UNIQUE INDEX IF NOT EXISTS posts_unique ON {{ this }}(created_at, campaign_id, id)", "transaction": true, "index": 0}, {"sql": "CREATE INDEX IF NOT EXISTS posts_i ON {{ this }}(is_reportback, is_accepted, signup_id, id, post_class)", "transaction": true, "index": 1}, {"sql": "GRANT SELECT ON {{ this }} TO dsanalyst", "transaction": true, "index": 2}, {"sql": "GRANT SELECT ON {{ this }} TO looker", "transaction": true, "index": 3}], "pre-hook": [], "tags": [], "quoting": {}, "vars": {}, "column_types": {}, "persist_docs": {}, "alias": "posts"}, "schema": "ds_dbt", "database": "quasar_prod_warehouse", "alias": "posts", "columns": {}, "description": "", "compiled": true, "compiled_sql": "SELECT\n\tpd.northstar_id as northstar_id,\n\tpd.id AS id,\n\tpd.\"type\" AS \"type\",\n\ta.\"name\" AS \"action\",\n\tpd.status AS status,\n\tpd.quantity AS quantity,\n\tpd.campaign_id,\n\tCASE\n\t\tWHEN pd.id IS NULL THEN NULL\n\t\tWHEN a.\"name\" = 'voter-reg OTG'\n\t\tTHEN pd.quantity\n\t\tELSE 1 END AS reportback_volume,\n\tpd.\"source\" AS \"source\",\n\tCASE\n\t\tWHEN pd.\"source\" IS NULL THEN NULL\n\t\tWHEN pd.\"source\" ilike '%%sms%%' THEN 'sms'\n\t\tELSE 'web' END AS source_bucket,\n\tCASE\n\t\tWHEN pd.\"type\" = 'phone-call'\n\t\tTHEN (pd.details::json ->> 'call_timestamp')::timestamptz\n\t\tELSE COALESCE(rtv.created_at, tv.created_at, pd.created_at)\n\t\tEND AS created_at,\n\tpd.url AS url,\n\tpd.text,\n\tCASE\n\t\tWHEN s.\"source\" = 'importer-client'\n\t\tAND pd.\"type\" = 'share-social'\n\t\tAND pd.created_at < s.created_at\n\t\tTHEN -1\n\t\tELSE pd.signup_id END AS signup_id,\n\tCASE\n\t\tWHEN pd.id IS NULL\n\t\tTHEN NULL\n\t\tELSE CONCAT(pd.\"type\", ' - ', a.\"name\") END AS post_class,\n\tCASE WHEN pd.status IN ('accepted', 'pending')\n\t\tAND a.\"name\" NOT ILIKE '%%vote%%'\n\t\tTHEN 1\n\t\tWHEN pd.status IN ('accepted', 'confirmed', 'register-OVR', 'register-form')\n\t\tAND a.\"name\" ILIKE '%%vote%%'\n\t\tTHEN 1\n\t\tELSE NULL END AS is_accepted,\n\tpd.action_id,\n\tpd.location,\n\tpd.postal_code,\n\ta.reportback AS is_reportback,\n\ta.civic_action,\n\ta.scholarship_entry\nFROM ft_dosomething_rogue.posts pd\nINNER JOIN \"quasar_prod_warehouse\".\"ds_dbt\".\"signups\" s\n\tON pd.signup_id = s.id\nLEFT JOIN \"quasar_prod_warehouse\".\"ds_dbt\".\"turbovote\" tv\n\tON tv.post_id::bigint = pd.id::bigint\nLEFT JOIN\n\t(SELECT\n\t\tDISTINCT r.*,\n\t\tCASE\n\t\t\tWHEN r.started_registration < '2017-01-01'\n\t\t\tTHEN r.started_registration + interval '4 year'\n\t\t\tELSE r.started_registration END AS created_at\n\t\tFROM \"quasar_prod_warehouse\".\"ds_dbt\".\"rock_the_vote\" r\n\t) rtv\n\tON rtv.post_id::bigint = pd.id::bigint\nLEFT JOIN ft_dosomething_rogue.actions a\n\tON pd.action_id = a.id\nWHERE pd.deleted_at IS NULL\nAND pd.\"text\" IS DISTINCT FROM 'test runscope upload'\nAND a.\"name\" IS NOT NULL", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "SELECT\n\tpd.northstar_id as northstar_id,\n\tpd.id AS id,\n\tpd.\"type\" AS \"type\",\n\ta.\"name\" AS \"action\",\n\tpd.status AS status,\n\tpd.quantity AS quantity,\n\tpd.campaign_id,\n\tCASE\n\t\tWHEN pd.id IS NULL THEN NULL\n\t\tWHEN a.\"name\" = 'voter-reg OTG'\n\t\tTHEN pd.quantity\n\t\tELSE 1 END AS reportback_volume,\n\tpd.\"source\" AS \"source\",\n\tCASE\n\t\tWHEN pd.\"source\" IS NULL THEN NULL\n\t\tWHEN pd.\"source\" ilike '%%sms%%' THEN 'sms'\n\t\tELSE 'web' END AS source_bucket,\n\tCASE\n\t\tWHEN pd.\"type\" = 'phone-call'\n\t\tTHEN (pd.details::json ->> 'call_timestamp')::timestamptz\n\t\tELSE COALESCE(rtv.created_at, tv.created_at, pd.created_at)\n\t\tEND AS created_at,\n\tpd.url AS url,\n\tpd.text,\n\tCASE\n\t\tWHEN s.\"source\" = 'importer-client'\n\t\tAND pd.\"type\" = 'share-social'\n\t\tAND pd.created_at < s.created_at\n\t\tTHEN -1\n\t\tELSE pd.signup_id END AS signup_id,\n\tCASE\n\t\tWHEN pd.id IS NULL\n\t\tTHEN NULL\n\t\tELSE CONCAT(pd.\"type\", ' - ', a.\"name\") END AS post_class,\n\tCASE WHEN pd.status IN ('accepted', 'pending')\n\t\tAND a.\"name\" NOT ILIKE '%%vote%%'\n\t\tTHEN 1\n\t\tWHEN pd.status IN ('accepted', 'confirmed', 'register-OVR', 'register-form')\n\t\tAND a.\"name\" ILIKE '%%vote%%'\n\t\tTHEN 1\n\t\tELSE NULL END AS is_accepted,\n\tpd.action_id,\n\tpd.location,\n\tpd.postal_code,\n\ta.reportback AS is_reportback,\n\ta.civic_action,\n\ta.scholarship_entry\nFROM ft_dosomething_rogue.posts pd\nINNER JOIN \"quasar_prod_warehouse\".\"ds_dbt\".\"signups\" s\n\tON pd.signup_id = s.id\nLEFT JOIN \"quasar_prod_warehouse\".\"ds_dbt\".\"turbovote\" tv\n\tON tv.post_id::bigint = pd.id::bigint\nLEFT JOIN\n\t(SELECT\n\t\tDISTINCT r.*,\n\t\tCASE\n\t\t\tWHEN r.started_registration < '2017-01-01'\n\t\t\tTHEN r.started_registration + interval '4 year'\n\t\t\tELSE r.started_registration END AS created_at\n\t\tFROM \"quasar_prod_warehouse\".\"ds_dbt\".\"rock_the_vote\" r\n\t) rtv\n\tON rtv.post_id::bigint = pd.id::bigint\nLEFT JOIN ft_dosomething_rogue.actions a\n\tON pd.action_id = a.id\nWHERE pd.deleted_at IS NULL\nAND pd.\"text\" IS DISTINCT FROM 'test runscope upload'\nAND a.\"name\" IS NOT NULL", "wrapped_sql": "None", "build_path": "../../docs/compiled/ds_dbt/campaign_activity/posts.sql"}, "error": null, "skip": false, "status": null, "fail": null, "warn": null, "execution_time": 0.011960983276367188, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2019-11-05T20:29:23.011805Z", "completed_at": "2019-11-05T20:29:23.019851Z"}, {"name": "execute", "started_at": "2019-11-05T20:29:23.020035Z", "completed_at": "2019-11-05T20:29:23.021781Z"}]}, {"node": {"name": "users", "root_path": "/Users/mrich/projects/quasar/quasar/dbt", "resource_type": "model", "path": "users_table/users.sql", "original_file_path": "models/users_table/users.sql", "package_name": "ds_dbt", "raw_sql": "SELECT \n\tu.id AS northstar_id,\n\tu.created_at,\n\tumax.max_last_auth AS last_logged_in,\n\tumax.max_last_access AS last_accessed,\n\tumax.max_last_message AS last_messaged_at,\n\tu.drupal_id AS drupal_uid,\n\tu.\"source\",\n\tu.email,\n\tu.facebook_id,\n\tu.mobile,\n\tCASE WHEN \n\t\tu.birthdate < '1900-01-01' OR \n\t\tu.birthdate > (date('now') - INTERVAL '10 years') \n\t\tTHEN NULL ELSE u.birthdate END AS birthdate,\n\tu.first_name,\n\tu.last_name,\n\tu.voter_registration_status,\n\tu.addr_street1 AS address_street_1,\n\tu.addr_street2 AS address_street_2,\n\tu.addr_city AS city,\n\tu.addr_state AS state,\n\tu.addr_zip AS zipcode,\n\tu.country,\n\tu.\"language\",\n\temail_status.event_type AS cio_status,\n\temail_status.\"timestamp\" AS cio_status_timestamp,\n\tu.sms_status,\n\tu.source_detail,\n\tsubstring(u.source_detail from '(?<=utm_medium\\:)(\\w*)') AS utm_medium,\n\tsubstring(u.source_detail from '(?<=utm_source\\:)(\\w*)') AS utm_source,\n\tsubstring(u.source_detail from '(?<=utm_campaign\\:)(\\w*)') AS utm_campaign,\n\t(u.feature_flags #>> '{badges}')::boolean as badges,\n\t(u.feature_flags #>> '{refer-friends}')::boolean as refer_friends,\n\tCASE WHEN \n\t\tu.sms_status in ('active','less','pending') OR \n\t\temail_status.event_type = 'customer_subscribed' \n\t\tTHEN TRUE ELSE FALSE END AS subscribed_member,\n\tumax.max_update AS last_updated_at\nFROM northstar.users u\nINNER JOIN \n\t(SELECT\n\t\tutemp.id,\n\t\tmax(utemp.updated_at) AS max_update,\n\t\tmax(utemp.last_accessed_at) AS max_last_access,\n\t\tmax(utemp.last_authenticated_at) AS max_last_auth,\n\t\tmax(utemp.last_messaged_at) AS max_last_message\n\tFROM northstar.users utemp\n\tGROUP BY utemp.id) umax ON umax.id = u.id AND umax.max_update = u.updated_at\nLEFT JOIN {{ ref('cio_latest_status') }} email_status ON email_status.customer_id = u.id\nWHERE u.\"source\" IS DISTINCT FROM 'runscope'\nAND u.\"source\" IS DISTINCT FROM 'runscope-client'\nAND u.email IS DISTINCT FROM 'runscope-scheduled-test@dosomething.org'\nAND u.email IS DISTINCT FROM 'juy+runscopescheduledtests@dosomething.org'\nAND (u.email NOT ILIKE '%%@example.org%%' OR u.email IS NULL)", "refs": [["cio_latest_status"]], "sources": [], "depends_on": {"nodes": ["model.ds_dbt.cio_latest_status"], "macros": []}, "unique_id": "model.ds_dbt.users", "empty": false, "fqn": ["ds_dbt", "users_table", "users"], "tags": [], "config": {"enabled": true, "materialized": "table", "post-hook": [{"sql": "CREATE UNIQUE INDEX IF NOT EXISTS du_indicies ON {{ this }}(northstar_id, created_at, email, mobile, 'source')", "transaction": true, "index": 0}, {"sql": "GRANT SELECT ON {{ this }} TO dsanalyst", "transaction": true, "index": 1}, {"sql": "GRANT SELECT ON {{ this }} TO looker", "transaction": true, "index": 2}, {"sql": "GRANT SELECT ON {{ this }} TO public", "transaction": true, "index": 3}], "pre-hook": [], "tags": [], "quoting": {}, "vars": {}, "column_types": {}, "persist_docs": {}, "alias": "users"}, "schema": "ds_dbt", "database": "quasar_prod_warehouse", "alias": "users", "columns": {}, "description": "", "compiled": true, "compiled_sql": "SELECT \n\tu.id AS northstar_id,\n\tu.created_at,\n\tumax.max_last_auth AS last_logged_in,\n\tumax.max_last_access AS last_accessed,\n\tumax.max_last_message AS last_messaged_at,\n\tu.drupal_id AS drupal_uid,\n\tu.\"source\",\n\tu.email,\n\tu.facebook_id,\n\tu.mobile,\n\tCASE WHEN \n\t\tu.birthdate < '1900-01-01' OR \n\t\tu.birthdate > (date('now') - INTERVAL '10 years') \n\t\tTHEN NULL ELSE u.birthdate END AS birthdate,\n\tu.first_name,\n\tu.last_name,\n\tu.voter_registration_status,\n\tu.addr_street1 AS address_street_1,\n\tu.addr_street2 AS address_street_2,\n\tu.addr_city AS city,\n\tu.addr_state AS state,\n\tu.addr_zip AS zipcode,\n\tu.country,\n\tu.\"language\",\n\temail_status.event_type AS cio_status,\n\temail_status.\"timestamp\" AS cio_status_timestamp,\n\tu.sms_status,\n\tu.source_detail,\n\tsubstring(u.source_detail from '(?<=utm_medium\\:)(\\w*)') AS utm_medium,\n\tsubstring(u.source_detail from '(?<=utm_source\\:)(\\w*)') AS utm_source,\n\tsubstring(u.source_detail from '(?<=utm_campaign\\:)(\\w*)') AS utm_campaign,\n\t(u.feature_flags #>> '{badges}')::boolean as badges,\n\t(u.feature_flags #>> '{refer-friends}')::boolean as refer_friends,\n\tCASE WHEN \n\t\tu.sms_status in ('active','less','pending') OR \n\t\temail_status.event_type = 'customer_subscribed' \n\t\tTHEN TRUE ELSE FALSE END AS subscribed_member,\n\tumax.max_update AS last_updated_at\nFROM northstar.users u\nINNER JOIN \n\t(SELECT\n\t\tutemp.id,\n\t\tmax(utemp.updated_at) AS max_update,\n\t\tmax(utemp.last_accessed_at) AS max_last_access,\n\t\tmax(utemp.last_authenticated_at) AS max_last_auth,\n\t\tmax(utemp.last_messaged_at) AS max_last_message\n\tFROM northstar.users utemp\n\tGROUP BY utemp.id) umax ON umax.id = u.id AND umax.max_update = u.updated_at\nLEFT JOIN \"quasar_prod_warehouse\".\"ds_dbt\".\"cio_latest_status\" email_status ON email_status.customer_id = u.id\nWHERE u.\"source\" IS DISTINCT FROM 'runscope'\nAND u.\"source\" IS DISTINCT FROM 'runscope-client'\nAND u.email IS DISTINCT FROM 'runscope-scheduled-test@dosomething.org'\nAND u.email IS DISTINCT FROM 'juy+runscopescheduledtests@dosomething.org'\nAND (u.email NOT ILIKE '%%@example.org%%' OR u.email IS NULL)", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "SELECT \n\tu.id AS northstar_id,\n\tu.created_at,\n\tumax.max_last_auth AS last_logged_in,\n\tumax.max_last_access AS last_accessed,\n\tumax.max_last_message AS last_messaged_at,\n\tu.drupal_id AS drupal_uid,\n\tu.\"source\",\n\tu.email,\n\tu.facebook_id,\n\tu.mobile,\n\tCASE WHEN \n\t\tu.birthdate < '1900-01-01' OR \n\t\tu.birthdate > (date('now') - INTERVAL '10 years') \n\t\tTHEN NULL ELSE u.birthdate END AS birthdate,\n\tu.first_name,\n\tu.last_name,\n\tu.voter_registration_status,\n\tu.addr_street1 AS address_street_1,\n\tu.addr_street2 AS address_street_2,\n\tu.addr_city AS city,\n\tu.addr_state AS state,\n\tu.addr_zip AS zipcode,\n\tu.country,\n\tu.\"language\",\n\temail_status.event_type AS cio_status,\n\temail_status.\"timestamp\" AS cio_status_timestamp,\n\tu.sms_status,\n\tu.source_detail,\n\tsubstring(u.source_detail from '(?<=utm_medium\\:)(\\w*)') AS utm_medium,\n\tsubstring(u.source_detail from '(?<=utm_source\\:)(\\w*)') AS utm_source,\n\tsubstring(u.source_detail from '(?<=utm_campaign\\:)(\\w*)') AS utm_campaign,\n\t(u.feature_flags #>> '{badges}')::boolean as badges,\n\t(u.feature_flags #>> '{refer-friends}')::boolean as refer_friends,\n\tCASE WHEN \n\t\tu.sms_status in ('active','less','pending') OR \n\t\temail_status.event_type = 'customer_subscribed' \n\t\tTHEN TRUE ELSE FALSE END AS subscribed_member,\n\tumax.max_update AS last_updated_at\nFROM northstar.users u\nINNER JOIN \n\t(SELECT\n\t\tutemp.id,\n\t\tmax(utemp.updated_at) AS max_update,\n\t\tmax(utemp.last_accessed_at) AS max_last_access,\n\t\tmax(utemp.last_authenticated_at) AS max_last_auth,\n\t\tmax(utemp.last_messaged_at) AS max_last_message\n\tFROM northstar.users utemp\n\tGROUP BY utemp.id) umax ON umax.id = u.id AND umax.max_update = u.updated_at\nLEFT JOIN \"quasar_prod_warehouse\".\"ds_dbt\".\"cio_latest_status\" email_status ON email_status.customer_id = u.id\nWHERE u.\"source\" IS DISTINCT FROM 'runscope'\nAND u.\"source\" IS DISTINCT FROM 'runscope-client'\nAND u.email IS DISTINCT FROM 'runscope-scheduled-test@dosomething.org'\nAND u.email IS DISTINCT FROM 'juy+runscopescheduledtests@dosomething.org'\nAND (u.email NOT ILIKE '%%@example.org%%' OR u.email IS NULL)", "wrapped_sql": "None", "build_path": "../../docs/compiled/ds_dbt/users_table/users.sql"}, "error": null, "skip": false, "status": null, "fail": null, "warn": null, "execution_time": 0.009003162384033203, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2019-11-05T20:29:23.025420Z", "completed_at": "2019-11-05T20:29:23.030451Z"}, {"name": "execute", "started_at": "2019-11-05T20:29:23.030624Z", "completed_at": "2019-11-05T20:29:23.032316Z"}]}, {"node": {"name": "user_newsletter_subscriptions", "root_path": "/Users/mrich/projects/quasar/quasar/dbt", "resource_type": "model", "path": "news_subscription/user_newsletter_subscriptions.sql", "original_file_path": "models/news_subscription/user_newsletter_subscriptions.sql", "package_name": "ds_dbt", "raw_sql": "SELECT DISTINCT\n\tf.northstar_id,\n\tf.newsletter_topic,\n\tf.topic_subscribed_at::timestamptz,\n\tCASE WHEN topic_unsubscribed_at IS NOT NULL\n\t    THEN topic_unsubscribed_at\n\t    WHEN newsletters_unsubscribed_at IS NOT NULL\n\t    THEN newsletters_unsubscribed_at\n\t    WHEN f.topic_updated_at = f.user_updated_at\n\t    THEN NULL\n\t    ELSE f.user_updated_at END AS topic_unsubscribed_at\nFROM (\n\tSELECT DISTINCT\n\t\ts.northstar_id AS northstar_id,\n\t\ts.newsletter_topic,\n\t\tfirst_value(s.newsletter_updated_at) OVER (PARTITION BY s.northstar_id, s.newsletter_topic ORDER BY s.newsletter_updated_at\n\t\t\t) AS topic_subscribed_at,\n\t\tlast_value(s.newsletter_updated_at) OVER (PARTITION BY s.northstar_id, s.newsletter_topic ORDER BY s.newsletter_updated_at\n\t\t\tROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS topic_updated_at,\t\n\t\tlast_value(s.newsletter_updated_at) OVER (PARTITION BY s.northstar_id ORDER BY s.newsletter_updated_at\n\t\t\tROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS user_updated_at,\n\t\tu.topic_unsubscribed_at,\n\t\tua.newsletters_unsubscribed_at\n\tFROM {{ ref('email_subscription_topics_raw') }} s\n\tLEFT JOIN (\n\t\tSELECT\n\t\t\t_id AS id,\n\t\t\tto_timestamp(audit #>> '{email_subscription_topics,updated_at,date}', 'YYYY-MM-DD HH24:MI:SS') AS topic_unsubscribed_at,\n\t\t\tNULL AS newsletter_topic\n\t\tFROM {{ env_var(\"NORTHSTAR_FT_SCHEMA\") }}.northstar_users_snapshot\n\t\tWHERE email_subscription_topics IS NULL AND audit #>> '{email_subscription_topics,updated_at,date}' IS NOT NULL\n\t) u ON u.id = s.northstar_id\n    LEFT JOIN (\n\t\tSELECT\n\t\t\tnorthstar_id,\n\t\t\temail_unsubscribed_at AS newsletters_unsubscribed_at,\n\t\t\tNULL AS newsletter_topic\n\t\tFROM public.user_activity\n\t) ua ON ua.northstar_id = s.northstar_id\n) f", "refs": [["email_subscription_topics_raw"]], "sources": [], "depends_on": {"nodes": ["model.ds_dbt.email_subscription_topics_raw"], "macros": []}, "unique_id": "model.ds_dbt.user_newsletter_subscriptions", "empty": false, "fqn": ["ds_dbt", "news_subscription", "user_newsletter_subscriptions"], "tags": [], "config": {"enabled": true, "materialized": "table", "post-hook": [{"sql": "CREATE INDEX IF NOT EXISTS email_subscription_topics_i ON {{ this }}(topic_subscribed_at, northstar_id)", "transaction": true, "index": 0}, {"sql": "GRANT SELECT ON {{ this }} TO dsanalyst", "transaction": true, "index": 1}, {"sql": "GRANT SELECT ON {{ this }} TO looker", "transaction": true, "index": 2}], "pre-hook": [], "tags": [], "quoting": {}, "vars": {}, "column_types": {}, "persist_docs": {}, "alias": "user_newsletter_subscriptions"}, "schema": "ds_dbt", "database": "quasar_prod_warehouse", "alias": "user_newsletter_subscriptions", "columns": {}, "description": "", "compiled": true, "compiled_sql": "SELECT DISTINCT\n\tf.northstar_id,\n\tf.newsletter_topic,\n\tf.topic_subscribed_at::timestamptz,\n\tCASE WHEN topic_unsubscribed_at IS NOT NULL\n\t    THEN topic_unsubscribed_at\n\t    WHEN newsletters_unsubscribed_at IS NOT NULL\n\t    THEN newsletters_unsubscribed_at\n\t    WHEN f.topic_updated_at = f.user_updated_at\n\t    THEN NULL\n\t    ELSE f.user_updated_at END AS topic_unsubscribed_at\nFROM (\n\tSELECT DISTINCT\n\t\ts.northstar_id AS northstar_id,\n\t\ts.newsletter_topic,\n\t\tfirst_value(s.newsletter_updated_at) OVER (PARTITION BY s.northstar_id, s.newsletter_topic ORDER BY s.newsletter_updated_at\n\t\t\t) AS topic_subscribed_at,\n\t\tlast_value(s.newsletter_updated_at) OVER (PARTITION BY s.northstar_id, s.newsletter_topic ORDER BY s.newsletter_updated_at\n\t\t\tROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS topic_updated_at,\t\n\t\tlast_value(s.newsletter_updated_at) OVER (PARTITION BY s.northstar_id ORDER BY s.newsletter_updated_at\n\t\t\tROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS user_updated_at,\n\t\tu.topic_unsubscribed_at,\n\t\tua.newsletters_unsubscribed_at\n\tFROM \"quasar_prod_warehouse\".\"ds_dbt\".\"email_subscription_topics_raw\" s\n\tLEFT JOIN (\n\t\tSELECT\n\t\t\t_id AS id,\n\t\t\tto_timestamp(audit #>> '{email_subscription_topics,updated_at,date}', 'YYYY-MM-DD HH24:MI:SS') AS topic_unsubscribed_at,\n\t\t\tNULL AS newsletter_topic\n\t\tFROM northstar_ft_userapi.northstar_users_snapshot\n\t\tWHERE email_subscription_topics IS NULL AND audit #>> '{email_subscription_topics,updated_at,date}' IS NOT NULL\n\t) u ON u.id = s.northstar_id\n    LEFT JOIN (\n\t\tSELECT\n\t\t\tnorthstar_id,\n\t\t\temail_unsubscribed_at AS newsletters_unsubscribed_at,\n\t\t\tNULL AS newsletter_topic\n\t\tFROM public.user_activity\n\t) ua ON ua.northstar_id = s.northstar_id\n) f", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "SELECT DISTINCT\n\tf.northstar_id,\n\tf.newsletter_topic,\n\tf.topic_subscribed_at::timestamptz,\n\tCASE WHEN topic_unsubscribed_at IS NOT NULL\n\t    THEN topic_unsubscribed_at\n\t    WHEN newsletters_unsubscribed_at IS NOT NULL\n\t    THEN newsletters_unsubscribed_at\n\t    WHEN f.topic_updated_at = f.user_updated_at\n\t    THEN NULL\n\t    ELSE f.user_updated_at END AS topic_unsubscribed_at\nFROM (\n\tSELECT DISTINCT\n\t\ts.northstar_id AS northstar_id,\n\t\ts.newsletter_topic,\n\t\tfirst_value(s.newsletter_updated_at) OVER (PARTITION BY s.northstar_id, s.newsletter_topic ORDER BY s.newsletter_updated_at\n\t\t\t) AS topic_subscribed_at,\n\t\tlast_value(s.newsletter_updated_at) OVER (PARTITION BY s.northstar_id, s.newsletter_topic ORDER BY s.newsletter_updated_at\n\t\t\tROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS topic_updated_at,\t\n\t\tlast_value(s.newsletter_updated_at) OVER (PARTITION BY s.northstar_id ORDER BY s.newsletter_updated_at\n\t\t\tROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS user_updated_at,\n\t\tu.topic_unsubscribed_at,\n\t\tua.newsletters_unsubscribed_at\n\tFROM \"quasar_prod_warehouse\".\"ds_dbt\".\"email_subscription_topics_raw\" s\n\tLEFT JOIN (\n\t\tSELECT\n\t\t\t_id AS id,\n\t\t\tto_timestamp(audit #>> '{email_subscription_topics,updated_at,date}', 'YYYY-MM-DD HH24:MI:SS') AS topic_unsubscribed_at,\n\t\t\tNULL AS newsletter_topic\n\t\tFROM northstar_ft_userapi.northstar_users_snapshot\n\t\tWHERE email_subscription_topics IS NULL AND audit #>> '{email_subscription_topics,updated_at,date}' IS NOT NULL\n\t) u ON u.id = s.northstar_id\n    LEFT JOIN (\n\t\tSELECT\n\t\t\tnorthstar_id,\n\t\t\temail_unsubscribed_at AS newsletters_unsubscribed_at,\n\t\t\tNULL AS newsletter_topic\n\t\tFROM public.user_activity\n\t) ua ON ua.northstar_id = s.northstar_id\n) f", "wrapped_sql": "None", "build_path": "../../docs/compiled/ds_dbt/news_subscription/user_newsletter_subscriptions.sql"}, "error": null, "skip": false, "status": null, "fail": null, "warn": null, "execution_time": 0.013341903686523438, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2019-11-05T20:29:23.037491Z", "completed_at": "2019-11-05T20:29:23.045897Z"}, {"name": "execute", "started_at": "2019-11-05T20:29:23.046070Z", "completed_at": "2019-11-05T20:29:23.047620Z"}]}, {"node": {"name": "snowplow_phoenix_events", "root_path": "/Users/mrich/projects/quasar/quasar/dbt", "resource_type": "model", "path": "phoenix_events/snowplow_phoenix_events.sql", "original_file_path": "models/phoenix_events/snowplow_phoenix_events.sql", "package_name": "ds_dbt", "raw_sql": "SELECT\n    e.event_id,\n    e.event_datetime,\n    CASE WHEN e.event_name IS NULL\n    AND e.event_type = 'pv'\n    THEN 'view' ELSE e.event_name END AS event_name,\n    e.event_source,\n    e.\"path\",\n    e.\"host\",\n    e.query_parameters,\n    e.clicked_link_url,\n    e.utm_source AS page_utm_source,\n    e.utm_medium AS page_utm_medium,\n    e.utm_campaign AS page_utm_campaign,\n    e.referrer_host,\n    e.referrer_path,\n    e.referrer_source,\n    e.campaign_id,\n    i.campaign_name,\n    e.modal_type,\n    e.search_query,\n    e.session_id,\n    e.browser_size,\n    e.northstar_id,\n    e.device_id\nFROM {{ ref('snowplow_raw_events') }} e\nLEFT JOIN {{ ref('campaign_info') }} i ON i.campaign_id = e.campaign_id::bigint", "refs": [["snowplow_raw_events"], ["campaign_info"]], "sources": [], "depends_on": {"nodes": ["model.ds_dbt.snowplow_raw_events", "model.ds_dbt.campaign_info"], "macros": []}, "unique_id": "model.ds_dbt.snowplow_phoenix_events", "empty": false, "fqn": ["ds_dbt", "phoenix_events", "snowplow_phoenix_events"], "tags": [], "config": {"enabled": true, "materialized": "table", "post-hook": [{"sql": "CREATE UNIQUE INDEX IF NOT EXISTS spe_unique ON {{ this }}(event_datetime, event_name, event_id)", "transaction": true, "index": 0}, {"sql": "CREATE INDEX IF NOT EXISTS spe_session_id ON {{ this }} (session_id)", "transaction": true, "index": 1}, {"sql": "GRANT SELECT ON {{ this }} TO looker", "transaction": true, "index": 2}, {"sql": "GRANT SELECT ON {{ this }} TO dsanalyst", "transaction": true, "index": 3}], "pre-hook": [], "tags": [], "quoting": {}, "vars": {}, "column_types": {}, "persist_docs": {}, "alias": "snowplow_phoenix_events"}, "schema": "ds_dbt", "database": "quasar_prod_warehouse", "alias": "snowplow_phoenix_events", "columns": {}, "description": "", "compiled": true, "compiled_sql": "SELECT\n    e.event_id,\n    e.event_datetime,\n    CASE WHEN e.event_name IS NULL\n    AND e.event_type = 'pv'\n    THEN 'view' ELSE e.event_name END AS event_name,\n    e.event_source,\n    e.\"path\",\n    e.\"host\",\n    e.query_parameters,\n    e.clicked_link_url,\n    e.utm_source AS page_utm_source,\n    e.utm_medium AS page_utm_medium,\n    e.utm_campaign AS page_utm_campaign,\n    e.referrer_host,\n    e.referrer_path,\n    e.referrer_source,\n    e.campaign_id,\n    i.campaign_name,\n    e.modal_type,\n    e.search_query,\n    e.session_id,\n    e.browser_size,\n    e.northstar_id,\n    e.device_id\nFROM \"quasar_prod_warehouse\".\"ds_dbt\".\"snowplow_raw_events\" e\nLEFT JOIN \"quasar_prod_warehouse\".\"ds_dbt\".\"campaign_info\" i ON i.campaign_id = e.campaign_id::bigint", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "SELECT\n    e.event_id,\n    e.event_datetime,\n    CASE WHEN e.event_name IS NULL\n    AND e.event_type = 'pv'\n    THEN 'view' ELSE e.event_name END AS event_name,\n    e.event_source,\n    e.\"path\",\n    e.\"host\",\n    e.query_parameters,\n    e.clicked_link_url,\n    e.utm_source AS page_utm_source,\n    e.utm_medium AS page_utm_medium,\n    e.utm_campaign AS page_utm_campaign,\n    e.referrer_host,\n    e.referrer_path,\n    e.referrer_source,\n    e.campaign_id,\n    i.campaign_name,\n    e.modal_type,\n    e.search_query,\n    e.session_id,\n    e.browser_size,\n    e.northstar_id,\n    e.device_id\nFROM \"quasar_prod_warehouse\".\"ds_dbt\".\"snowplow_raw_events\" e\nLEFT JOIN \"quasar_prod_warehouse\".\"ds_dbt\".\"campaign_info\" i ON i.campaign_id = e.campaign_id::bigint", "wrapped_sql": "None", "build_path": "../../docs/compiled/ds_dbt/phoenix_events/snowplow_phoenix_events.sql"}, "error": null, "skip": false, "status": null, "fail": null, "warn": null, "execution_time": 0.009009838104248047, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2019-11-05T20:29:23.050809Z", "completed_at": "2019-11-05T20:29:23.056244Z"}, {"name": "execute", "started_at": "2019-11-05T20:29:23.056404Z", "completed_at": "2019-11-05T20:29:23.058037Z"}]}, {"node": {"name": "reportbacks", "root_path": "/Users/mrich/projects/quasar/quasar/dbt", "resource_type": "model", "path": "campaign_activity/reportbacks.sql", "original_file_path": "models/campaign_activity/reportbacks.sql", "package_name": "ds_dbt", "raw_sql": "SELECT\n    pd.northstar_id,\n    pd.id as post_id,\n    pd.signup_id,\n    pd.campaign_id,\n    pd.\"action\" as post_action,\n    pd.\"type\" as post_type,\n    pd.status as post_status,\n    pd.post_class,\n    pd.created_at as post_created_at,\n    pd.source as post_source,\n    pd.source_bucket as post_source_bucket,\n    pd.reportback_volume,\n    pd.civic_action,\n    pd.scholarship_entry,\n    pd.location,\n    pd.postal_code,\n    CASE\n        WHEN (pd.post_class ilike '%%vote%%' AND pd.status = 'confirmed')\n        THEN 'self-reported registrations'\n        WHEN (pd.post_class ilike '%%vote%%' AND pd.status <> 'confirmed')\n        THEN 'voter_registrations'\n        WHEN pd.post_class ilike '%%photo%%'\n        THEN 'photo_rbs'\n        WHEN pd.post_class ilike '%%text%%'\n        THEN 'text_rbs'\n        WHEN pd.post_class ilike '%%social%%'\n        THEN 'social'\n        WHEN pd.post_class ilike '%%call%%'\n        THEN 'phone_calls'\n        ELSE NULL END AS post_bucket\nFROM {{ ref('posts') }} pd\nWHERE pd.id IN\n    (SELECT\n        min(id)\n    FROM {{ ref('posts') }} p\n    WHERE p.is_reportback = 'true' AND p.is_accepted = 1\n    GROUP BY p.northstar_id, p.campaign_id, p.signup_id, p.post_class, p.reportback_volume)", "refs": [["posts"], ["posts"]], "sources": [], "depends_on": {"nodes": ["model.ds_dbt.posts", "model.ds_dbt.posts"], "macros": []}, "unique_id": "model.ds_dbt.reportbacks", "empty": false, "fqn": ["ds_dbt", "campaign_activity", "reportbacks"], "tags": [], "config": {"enabled": true, "materialized": "table", "post-hook": [{"sql": "CREATE UNIQUE INDEX IF NOT EXISTS reportbacks_unique ON {{ this }}(post_id)", "transaction": true, "index": 0}, {"sql": "CREATE INDEX IF NOT EXISTS reportbacks_i ON {{ this }}(post_created_at, campaign_id, post_class, reportback_volume)", "transaction": true, "index": 1}, {"sql": "GRANT SELECT ON {{ this }} TO dsanalyst", "transaction": true, "index": 2}, {"sql": "GRANT SELECT ON {{ this }} TO looker", "transaction": true, "index": 3}], "pre-hook": [], "tags": [], "quoting": {}, "vars": {}, "column_types": {}, "persist_docs": {}, "alias": "reportbacks"}, "schema": "ds_dbt", "database": "quasar_prod_warehouse", "alias": "reportbacks", "columns": {}, "description": "", "compiled": true, "compiled_sql": "SELECT\n    pd.northstar_id,\n    pd.id as post_id,\n    pd.signup_id,\n    pd.campaign_id,\n    pd.\"action\" as post_action,\n    pd.\"type\" as post_type,\n    pd.status as post_status,\n    pd.post_class,\n    pd.created_at as post_created_at,\n    pd.source as post_source,\n    pd.source_bucket as post_source_bucket,\n    pd.reportback_volume,\n    pd.civic_action,\n    pd.scholarship_entry,\n    pd.location,\n    pd.postal_code,\n    CASE\n        WHEN (pd.post_class ilike '%%vote%%' AND pd.status = 'confirmed')\n        THEN 'self-reported registrations'\n        WHEN (pd.post_class ilike '%%vote%%' AND pd.status <> 'confirmed')\n        THEN 'voter_registrations'\n        WHEN pd.post_class ilike '%%photo%%'\n        THEN 'photo_rbs'\n        WHEN pd.post_class ilike '%%text%%'\n        THEN 'text_rbs'\n        WHEN pd.post_class ilike '%%social%%'\n        THEN 'social'\n        WHEN pd.post_class ilike '%%call%%'\n        THEN 'phone_calls'\n        ELSE NULL END AS post_bucket\nFROM \"quasar_prod_warehouse\".\"ds_dbt\".\"posts\" pd\nWHERE pd.id IN\n    (SELECT\n        min(id)\n    FROM \"quasar_prod_warehouse\".\"ds_dbt\".\"posts\" p\n    WHERE p.is_reportback = 'true' AND p.is_accepted = 1\n    GROUP BY p.northstar_id, p.campaign_id, p.signup_id, p.post_class, p.reportback_volume)", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "SELECT\n    pd.northstar_id,\n    pd.id as post_id,\n    pd.signup_id,\n    pd.campaign_id,\n    pd.\"action\" as post_action,\n    pd.\"type\" as post_type,\n    pd.status as post_status,\n    pd.post_class,\n    pd.created_at as post_created_at,\n    pd.source as post_source,\n    pd.source_bucket as post_source_bucket,\n    pd.reportback_volume,\n    pd.civic_action,\n    pd.scholarship_entry,\n    pd.location,\n    pd.postal_code,\n    CASE\n        WHEN (pd.post_class ilike '%%vote%%' AND pd.status = 'confirmed')\n        THEN 'self-reported registrations'\n        WHEN (pd.post_class ilike '%%vote%%' AND pd.status <> 'confirmed')\n        THEN 'voter_registrations'\n        WHEN pd.post_class ilike '%%photo%%'\n        THEN 'photo_rbs'\n        WHEN pd.post_class ilike '%%text%%'\n        THEN 'text_rbs'\n        WHEN pd.post_class ilike '%%social%%'\n        THEN 'social'\n        WHEN pd.post_class ilike '%%call%%'\n        THEN 'phone_calls'\n        ELSE NULL END AS post_bucket\nFROM \"quasar_prod_warehouse\".\"ds_dbt\".\"posts\" pd\nWHERE pd.id IN\n    (SELECT\n        min(id)\n    FROM \"quasar_prod_warehouse\".\"ds_dbt\".\"posts\" p\n    WHERE p.is_reportback = 'true' AND p.is_accepted = 1\n    GROUP BY p.northstar_id, p.campaign_id, p.signup_id, p.post_class, p.reportback_volume)", "wrapped_sql": "None", "build_path": "../../docs/compiled/ds_dbt/campaign_activity/reportbacks.sql"}, "error": null, "skip": false, "status": null, "fail": null, "warn": null, "execution_time": 0.015790224075317383, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2019-11-05T20:29:23.062727Z", "completed_at": "2019-11-05T20:29:23.071025Z"}, {"name": "execute", "started_at": "2019-11-05T20:29:23.071232Z", "completed_at": "2019-11-05T20:29:23.075508Z"}]}, {"node": {"name": "member_event_log", "root_path": "/Users/mrich/projects/quasar/quasar/dbt", "resource_type": "model", "path": "mel/member_event_log.sql", "original_file_path": "models/mel/member_event_log.sql", "package_name": "ds_dbt", "raw_sql": "SELECT\n    MD5(concat(a.northstar_id, a.\"timestamp\", a.action_id, a.action_serial_id)) AS event_id,\n    a.northstar_id AS northstar_id,\n    a.\"timestamp\" AS \"timestamp\",\n    a.\"action\" AS action_type,\n    a.action_id AS action_id,\n    a.\"source\" AS \"source\",\n    a.action_serial_id AS action_serial_id,\n    a.channel AS channel,\n    CASE \n    \tWHEN date_trunc('month', a.\"timestamp\") = date_trunc('month', u.created_at) \n    \tTHEN 'New' \n    \tELSE 'Returning' END \n    \tAS \"type\",\n    MIN(\"timestamp\") \n    \tOVER \n    \t(PARTITION BY a.northstar_id, date_trunc('month', a.\"timestamp\")) \n    \tAS first_action_month\nFROM ( \nSELECT\n    DISTINCT s.northstar_id AS northstar_id,\n    s.created_at AS \"timestamp\",\n    'signup' AS \"action\",\n    '1' AS action_id, \n    s.\"source\" AS \"source\",\n    s.id::varchar AS action_serial_id,\n(CASE WHEN s.\"source\" ILIKE '%%sms%%' THEN 'sms'\nWHEN s.\"source\" NOT LIKE '%%sms%%'AND s.\"source\" NOT LIKE '%%email%%' AND s.\"source\" NOT LIKE '%%niche%%' OR s.\"source\" IN ('rock-the-vote', 'turbovote') THEN 'web'\nWHEN s.\"source\" ILIKE '%%email%%' THEN 'email'\nWHEN s.\"source\" ILIKE '%%niche%%' THEN 'niche_coregistration'\nWHEN s.\"source\" NOT LIKE '%%sms%%'AND s.\"source\" NOT LIKE '%%email%%' AND s.\"source\" NOT LIKE '%%niche%%' AND s.\"source\" NOT IN ('rock-the-vote', 'turbovote') AND s.\"source\" IS NOT NULL THEN 'other' END) AS \"channel\"\nFROM {{ ref('signups') }} s\nWHERE s.\"source\" IS DISTINCT FROM 'importer-client'\nAND s.\"source\" IS DISTINCT FROM 'rock-the-vote'\nAND s.\"source\" IS DISTINCT FROM 'turbovote'\nUNION ALL\nSELECT\n    DISTINCT p.northstar_id AS northstar_id,\n    p.created_at AS \"timestamp\",\n    'post' AS \"action\",\n    '2' AS action_id,\n    p.\"source\" AS \"source\",\n    p.id::varchar AS action_serial_id,\n(CASE WHEN p.\"source\" ILIKE '%%sms%%' THEN 'sms'\nWHEN p.\"source\" ILIKE '%%phoenix%%' OR p.\"source\" IS NULL or p.\"source\" ILIKE '%%turbovote%%' THEN 'web'\nWHEN p.\"source\" ILIKE '%%app%%' THEN 'mobile_app'\nWHEN p.\"source\" NOT LIKE '%%phoenix%%' AND p.\"source\" NOT LIKE '%%sms%%' AND p.\"source\" IS NOT NULL AND p.\"source\" NOT LIKE '%%app%%' and p.\"source\" NOT LIKE '%%turbovote%%' THEN 'other' END) AS \"channel\"\nFROM {{ ref('posts') }} p\nWHERE p.status IN ('accepted', 'confirmed', 'register-OVR', 'register-form', 'pending')\nUNION ALL\nSELECT DISTINCT \n    u_access.id AS northstar_id,\n    u_access.last_accessed_at AS \"timestamp\",\n    'site_access' AS \"action\",\n    '3' AS action_id,\n    NULL AS \"source\",\n    '0' AS action_serial_id,\n    'web' AS channel\nFROM northstar.users u_access\nWHERE u_access.last_accessed_at IS NOT NULL\nAND u_access.\"source\" IS DISTINCT FROM 'runscope'\nAND u_access.\"source\" IS DISTINCT FROM 'runscope-client'\nAND u_access.email IS DISTINCT FROM 'runscope-scheduled-test@dosomething.org'\nAND u_access.email IS DISTINCT FROM 'juy+runscopescheduledtests@dosomething.org'\nAND (u_access.email NOT ILIKE '%%@example.org%%' OR u_access.email IS NULL) \nUNION ALL\nSELECT DISTINCT \n    u_login.id AS northstar_id,\n    u_login.last_authenticated_at AS \"timestamp\",\n    'site_login' AS \"action\",\n    '4' AS action_id,\n    NULL AS \"source\",\n    '0' AS action_serial_id,\n    'web' AS channel\nFROM northstar.users u_login\nWHERE u_login.last_authenticated_at IS NOT NULL \nAND u_login.\"source\" IS DISTINCT FROM 'runscope'\nAND u_login.\"source\" IS DISTINCT FROM 'runscope-client'\nAND u_login.email IS DISTINCT FROM 'runscope-scheduled-test@dosomething.org'\nAND u_login.email IS DISTINCT FROM 'juy+runscopescheduledtests@dosomething.org'\nAND (u_login.email NOT ILIKE '%%@example.org%%' OR u_login.email IS NULL) \nUNION ALL \nSELECT\n    DISTINCT u.id AS northstar_id,\n    u.created_at AS \"timestamp\",\n    'account_creation' AS action, \n    '5' AS action_id,\n    u.\"source\" AS \"source\",\n    '0' AS action_serial_id, \n    (CASE WHEN u.\"source\" ILIKE '%%sms%%' THEN 'sms'\n    WHEN u.\"source\" ILIKE '%%phoenix%%' OR u.\"source\" IS NULL THEN 'web'\n    WHEN u.\"source\" ILIKE '%%niche%%' THEN 'niche_coregistration'\n    WHEN u.\"source\" NOT LIKE '%%niche%%' AND u.\"source\" NOT LIKE '%%sms%%' AND u.\"source\" NOT LIKE '%%phoenix%%' AND u.\"source\" IS NOT NULL THEN 'other' END) AS \"channel\"\nFROM\n    (SELECT \n            u_create.id,\n            max(u_create.\"source\") AS \"source\",\n            min(u_create.created_at) AS created_at\n    FROM northstar.users u_create\nWHERE u_create.\"source\" IS DISTINCT FROM 'importer-client'\nAND u_create.\"source\" IS DISTINCT FROM 'runscope'\nAND u_create.\"source\" IS DISTINCT FROM 'runscope-client'\nAND u_create.email IS DISTINCT FROM 'runscope-scheduled-test@dosomething.org'\nAND u_create.email IS DISTINCT FROM 'juy+runscopescheduledtests@dosomething.org'\nAND (u_create.email NOT ILIKE '%%@example.org%%' OR u_create.email IS NULL) \n    GROUP BY u_create.id) u\nUNION ALL \nSELECT\n    DISTINCT g.user_id AS northstar_id,\n    g.created_at AS \"timestamp\",\n    'messaged_gambit' AS \"action\", \n    '6' AS action_id,\n    'SMS' AS \"source\",\n    g.message_id AS action_serial_id,\n    'sms' AS \"channel\"\nFROM\n    {{ ref('gambit_messages_inbound') }} g\nWHERE \n\tg.user_id IS NOT NULL\n\tAND g.macro <> 'subscriptionStatusStop' \nUNION ALL \n    SELECT\n        DISTINCT cio.customer_id AS northstar_id,\n        cio.\"timestamp\" AS \"timestamp\",\n        'clicked_link' AS \"action\",\n        '7' AS action_id,\n        cio.template_id::CHARACTER AS \"source\",\n        cio.event_id AS action_serial_id, \n        'email' AS \"channel\"\n    FROM\n        cio.email_event cio\n    WHERE \n        cio.event_type = 'email_clicked'\n    AND cio.customer_id IS NOT NULL\nUNION ALL \nSELECT DISTINCT\n    b.northstar_id AS northstar_id,\n    b.click_time AS \"timestamp\",\n    CONCAT('bertly_link_', b.interaction_type) AS \"action\",\n    '10' AS action_id,\n    'bertly' AS \"source\",\n    b.click_id AS action_serial_id,\n    b.\"source\" AS \"channel\"\nFROM {{ ref('bertly_clicks') }} b\nINNER JOIN {{ ref('users') }} u\nON b.northstar_id = u.northstar_id\nWHERE b.northstar_id IS NOT NULL\nAND b.interaction_type IS DISTINCT FROM 'preview'\n) AS a\nLEFT JOIN {{ ref('users') }} u ON u.northstar_id = a.northstar_id", "refs": [["signups"], ["posts"], ["gambit_messages_inbound"], ["bertly_clicks"], ["users"], ["users"]], "sources": [], "depends_on": {"nodes": ["model.ds_dbt.signups", "model.ds_dbt.posts", "model.ds_dbt.gambit_messages_inbound", "model.ds_dbt.bertly_clicks", "model.ds_dbt.users", "model.ds_dbt.users"], "macros": []}, "unique_id": "model.ds_dbt.member_event_log", "empty": false, "fqn": ["ds_dbt", "mel", "member_event_log"], "tags": [], "config": {"enabled": true, "materialized": "table", "post-hook": [{"sql": "CREATE UNIQUE INDEX mel_unique_i IF NOT EXISTS ON {{ this }}(timestamp, northstar_id, event_id)", "transaction": true, "index": 0}, {"sql": "CREATE INDEX nid_timestamp_i IF NOT EXISTS ON {{ this }}(northstar_id, timestamp)", "transaction": true, "index": 1}, {"sql": "GRANT SELECT ON {{ this }} TO dsanalyst", "transaction": true, "index": 2}, {"sql": "GRANT SELECT ON {{ this }} TO looker", "transaction": true, "index": 3}], "pre-hook": [], "tags": [], "quoting": {}, "vars": {}, "column_types": {}, "persist_docs": {}, "alias": "mel"}, "schema": "ds_dbt", "database": "quasar_prod_warehouse", "alias": "mel", "columns": {}, "description": "", "compiled": true, "compiled_sql": "SELECT\n    MD5(concat(a.northstar_id, a.\"timestamp\", a.action_id, a.action_serial_id)) AS event_id,\n    a.northstar_id AS northstar_id,\n    a.\"timestamp\" AS \"timestamp\",\n    a.\"action\" AS action_type,\n    a.action_id AS action_id,\n    a.\"source\" AS \"source\",\n    a.action_serial_id AS action_serial_id,\n    a.channel AS channel,\n    CASE \n    \tWHEN date_trunc('month', a.\"timestamp\") = date_trunc('month', u.created_at) \n    \tTHEN 'New' \n    \tELSE 'Returning' END \n    \tAS \"type\",\n    MIN(\"timestamp\") \n    \tOVER \n    \t(PARTITION BY a.northstar_id, date_trunc('month', a.\"timestamp\")) \n    \tAS first_action_month\nFROM ( \nSELECT\n    DISTINCT s.northstar_id AS northstar_id,\n    s.created_at AS \"timestamp\",\n    'signup' AS \"action\",\n    '1' AS action_id, \n    s.\"source\" AS \"source\",\n    s.id::varchar AS action_serial_id,\n(CASE WHEN s.\"source\" ILIKE '%%sms%%' THEN 'sms'\nWHEN s.\"source\" NOT LIKE '%%sms%%'AND s.\"source\" NOT LIKE '%%email%%' AND s.\"source\" NOT LIKE '%%niche%%' OR s.\"source\" IN ('rock-the-vote', 'turbovote') THEN 'web'\nWHEN s.\"source\" ILIKE '%%email%%' THEN 'email'\nWHEN s.\"source\" ILIKE '%%niche%%' THEN 'niche_coregistration'\nWHEN s.\"source\" NOT LIKE '%%sms%%'AND s.\"source\" NOT LIKE '%%email%%' AND s.\"source\" NOT LIKE '%%niche%%' AND s.\"source\" NOT IN ('rock-the-vote', 'turbovote') AND s.\"source\" IS NOT NULL THEN 'other' END) AS \"channel\"\nFROM \"quasar_prod_warehouse\".\"ds_dbt\".\"signups\" s\nWHERE s.\"source\" IS DISTINCT FROM 'importer-client'\nAND s.\"source\" IS DISTINCT FROM 'rock-the-vote'\nAND s.\"source\" IS DISTINCT FROM 'turbovote'\nUNION ALL\nSELECT\n    DISTINCT p.northstar_id AS northstar_id,\n    p.created_at AS \"timestamp\",\n    'post' AS \"action\",\n    '2' AS action_id,\n    p.\"source\" AS \"source\",\n    p.id::varchar AS action_serial_id,\n(CASE WHEN p.\"source\" ILIKE '%%sms%%' THEN 'sms'\nWHEN p.\"source\" ILIKE '%%phoenix%%' OR p.\"source\" IS NULL or p.\"source\" ILIKE '%%turbovote%%' THEN 'web'\nWHEN p.\"source\" ILIKE '%%app%%' THEN 'mobile_app'\nWHEN p.\"source\" NOT LIKE '%%phoenix%%' AND p.\"source\" NOT LIKE '%%sms%%' AND p.\"source\" IS NOT NULL AND p.\"source\" NOT LIKE '%%app%%' and p.\"source\" NOT LIKE '%%turbovote%%' THEN 'other' END) AS \"channel\"\nFROM \"quasar_prod_warehouse\".\"ds_dbt\".\"posts\" p\nWHERE p.status IN ('accepted', 'confirmed', 'register-OVR', 'register-form', 'pending')\nUNION ALL\nSELECT DISTINCT \n    u_access.id AS northstar_id,\n    u_access.last_accessed_at AS \"timestamp\",\n    'site_access' AS \"action\",\n    '3' AS action_id,\n    NULL AS \"source\",\n    '0' AS action_serial_id,\n    'web' AS channel\nFROM northstar.users u_access\nWHERE u_access.last_accessed_at IS NOT NULL\nAND u_access.\"source\" IS DISTINCT FROM 'runscope'\nAND u_access.\"source\" IS DISTINCT FROM 'runscope-client'\nAND u_access.email IS DISTINCT FROM 'runscope-scheduled-test@dosomething.org'\nAND u_access.email IS DISTINCT FROM 'juy+runscopescheduledtests@dosomething.org'\nAND (u_access.email NOT ILIKE '%%@example.org%%' OR u_access.email IS NULL) \nUNION ALL\nSELECT DISTINCT \n    u_login.id AS northstar_id,\n    u_login.last_authenticated_at AS \"timestamp\",\n    'site_login' AS \"action\",\n    '4' AS action_id,\n    NULL AS \"source\",\n    '0' AS action_serial_id,\n    'web' AS channel\nFROM northstar.users u_login\nWHERE u_login.last_authenticated_at IS NOT NULL \nAND u_login.\"source\" IS DISTINCT FROM 'runscope'\nAND u_login.\"source\" IS DISTINCT FROM 'runscope-client'\nAND u_login.email IS DISTINCT FROM 'runscope-scheduled-test@dosomething.org'\nAND u_login.email IS DISTINCT FROM 'juy+runscopescheduledtests@dosomething.org'\nAND (u_login.email NOT ILIKE '%%@example.org%%' OR u_login.email IS NULL) \nUNION ALL \nSELECT\n    DISTINCT u.id AS northstar_id,\n    u.created_at AS \"timestamp\",\n    'account_creation' AS action, \n    '5' AS action_id,\n    u.\"source\" AS \"source\",\n    '0' AS action_serial_id, \n    (CASE WHEN u.\"source\" ILIKE '%%sms%%' THEN 'sms'\n    WHEN u.\"source\" ILIKE '%%phoenix%%' OR u.\"source\" IS NULL THEN 'web'\n    WHEN u.\"source\" ILIKE '%%niche%%' THEN 'niche_coregistration'\n    WHEN u.\"source\" NOT LIKE '%%niche%%' AND u.\"source\" NOT LIKE '%%sms%%' AND u.\"source\" NOT LIKE '%%phoenix%%' AND u.\"source\" IS NOT NULL THEN 'other' END) AS \"channel\"\nFROM\n    (SELECT \n            u_create.id,\n            max(u_create.\"source\") AS \"source\",\n            min(u_create.created_at) AS created_at\n    FROM northstar.users u_create\nWHERE u_create.\"source\" IS DISTINCT FROM 'importer-client'\nAND u_create.\"source\" IS DISTINCT FROM 'runscope'\nAND u_create.\"source\" IS DISTINCT FROM 'runscope-client'\nAND u_create.email IS DISTINCT FROM 'runscope-scheduled-test@dosomething.org'\nAND u_create.email IS DISTINCT FROM 'juy+runscopescheduledtests@dosomething.org'\nAND (u_create.email NOT ILIKE '%%@example.org%%' OR u_create.email IS NULL) \n    GROUP BY u_create.id) u\nUNION ALL \nSELECT\n    DISTINCT g.user_id AS northstar_id,\n    g.created_at AS \"timestamp\",\n    'messaged_gambit' AS \"action\", \n    '6' AS action_id,\n    'SMS' AS \"source\",\n    g.message_id AS action_serial_id,\n    'sms' AS \"channel\"\nFROM\n    \"quasar_prod_warehouse\".\"ds_dbt\".\"gambit_messages_inbound\" g\nWHERE \n\tg.user_id IS NOT NULL\n\tAND g.macro <> 'subscriptionStatusStop' \nUNION ALL \n    SELECT\n        DISTINCT cio.customer_id AS northstar_id,\n        cio.\"timestamp\" AS \"timestamp\",\n        'clicked_link' AS \"action\",\n        '7' AS action_id,\n        cio.template_id::CHARACTER AS \"source\",\n        cio.event_id AS action_serial_id, \n        'email' AS \"channel\"\n    FROM\n        cio.email_event cio\n    WHERE \n        cio.event_type = 'email_clicked'\n    AND cio.customer_id IS NOT NULL\nUNION ALL \nSELECT DISTINCT\n    b.northstar_id AS northstar_id,\n    b.click_time AS \"timestamp\",\n    CONCAT('bertly_link_', b.interaction_type) AS \"action\",\n    '10' AS action_id,\n    'bertly' AS \"source\",\n    b.click_id AS action_serial_id,\n    b.\"source\" AS \"channel\"\nFROM \"quasar_prod_warehouse\".\"ds_dbt\".\"bertly_clicks\" b\nINNER JOIN \"quasar_prod_warehouse\".\"ds_dbt\".\"users\" u\nON b.northstar_id = u.northstar_id\nWHERE b.northstar_id IS NOT NULL\nAND b.interaction_type IS DISTINCT FROM 'preview'\n) AS a\nLEFT JOIN \"quasar_prod_warehouse\".\"ds_dbt\".\"users\" u ON u.northstar_id = a.northstar_id", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "SELECT\n    MD5(concat(a.northstar_id, a.\"timestamp\", a.action_id, a.action_serial_id)) AS event_id,\n    a.northstar_id AS northstar_id,\n    a.\"timestamp\" AS \"timestamp\",\n    a.\"action\" AS action_type,\n    a.action_id AS action_id,\n    a.\"source\" AS \"source\",\n    a.action_serial_id AS action_serial_id,\n    a.channel AS channel,\n    CASE \n    \tWHEN date_trunc('month', a.\"timestamp\") = date_trunc('month', u.created_at) \n    \tTHEN 'New' \n    \tELSE 'Returning' END \n    \tAS \"type\",\n    MIN(\"timestamp\") \n    \tOVER \n    \t(PARTITION BY a.northstar_id, date_trunc('month', a.\"timestamp\")) \n    \tAS first_action_month\nFROM ( \nSELECT\n    DISTINCT s.northstar_id AS northstar_id,\n    s.created_at AS \"timestamp\",\n    'signup' AS \"action\",\n    '1' AS action_id, \n    s.\"source\" AS \"source\",\n    s.id::varchar AS action_serial_id,\n(CASE WHEN s.\"source\" ILIKE '%%sms%%' THEN 'sms'\nWHEN s.\"source\" NOT LIKE '%%sms%%'AND s.\"source\" NOT LIKE '%%email%%' AND s.\"source\" NOT LIKE '%%niche%%' OR s.\"source\" IN ('rock-the-vote', 'turbovote') THEN 'web'\nWHEN s.\"source\" ILIKE '%%email%%' THEN 'email'\nWHEN s.\"source\" ILIKE '%%niche%%' THEN 'niche_coregistration'\nWHEN s.\"source\" NOT LIKE '%%sms%%'AND s.\"source\" NOT LIKE '%%email%%' AND s.\"source\" NOT LIKE '%%niche%%' AND s.\"source\" NOT IN ('rock-the-vote', 'turbovote') AND s.\"source\" IS NOT NULL THEN 'other' END) AS \"channel\"\nFROM \"quasar_prod_warehouse\".\"ds_dbt\".\"signups\" s\nWHERE s.\"source\" IS DISTINCT FROM 'importer-client'\nAND s.\"source\" IS DISTINCT FROM 'rock-the-vote'\nAND s.\"source\" IS DISTINCT FROM 'turbovote'\nUNION ALL\nSELECT\n    DISTINCT p.northstar_id AS northstar_id,\n    p.created_at AS \"timestamp\",\n    'post' AS \"action\",\n    '2' AS action_id,\n    p.\"source\" AS \"source\",\n    p.id::varchar AS action_serial_id,\n(CASE WHEN p.\"source\" ILIKE '%%sms%%' THEN 'sms'\nWHEN p.\"source\" ILIKE '%%phoenix%%' OR p.\"source\" IS NULL or p.\"source\" ILIKE '%%turbovote%%' THEN 'web'\nWHEN p.\"source\" ILIKE '%%app%%' THEN 'mobile_app'\nWHEN p.\"source\" NOT LIKE '%%phoenix%%' AND p.\"source\" NOT LIKE '%%sms%%' AND p.\"source\" IS NOT NULL AND p.\"source\" NOT LIKE '%%app%%' and p.\"source\" NOT LIKE '%%turbovote%%' THEN 'other' END) AS \"channel\"\nFROM \"quasar_prod_warehouse\".\"ds_dbt\".\"posts\" p\nWHERE p.status IN ('accepted', 'confirmed', 'register-OVR', 'register-form', 'pending')\nUNION ALL\nSELECT DISTINCT \n    u_access.id AS northstar_id,\n    u_access.last_accessed_at AS \"timestamp\",\n    'site_access' AS \"action\",\n    '3' AS action_id,\n    NULL AS \"source\",\n    '0' AS action_serial_id,\n    'web' AS channel\nFROM northstar.users u_access\nWHERE u_access.last_accessed_at IS NOT NULL\nAND u_access.\"source\" IS DISTINCT FROM 'runscope'\nAND u_access.\"source\" IS DISTINCT FROM 'runscope-client'\nAND u_access.email IS DISTINCT FROM 'runscope-scheduled-test@dosomething.org'\nAND u_access.email IS DISTINCT FROM 'juy+runscopescheduledtests@dosomething.org'\nAND (u_access.email NOT ILIKE '%%@example.org%%' OR u_access.email IS NULL) \nUNION ALL\nSELECT DISTINCT \n    u_login.id AS northstar_id,\n    u_login.last_authenticated_at AS \"timestamp\",\n    'site_login' AS \"action\",\n    '4' AS action_id,\n    NULL AS \"source\",\n    '0' AS action_serial_id,\n    'web' AS channel\nFROM northstar.users u_login\nWHERE u_login.last_authenticated_at IS NOT NULL \nAND u_login.\"source\" IS DISTINCT FROM 'runscope'\nAND u_login.\"source\" IS DISTINCT FROM 'runscope-client'\nAND u_login.email IS DISTINCT FROM 'runscope-scheduled-test@dosomething.org'\nAND u_login.email IS DISTINCT FROM 'juy+runscopescheduledtests@dosomething.org'\nAND (u_login.email NOT ILIKE '%%@example.org%%' OR u_login.email IS NULL) \nUNION ALL \nSELECT\n    DISTINCT u.id AS northstar_id,\n    u.created_at AS \"timestamp\",\n    'account_creation' AS action, \n    '5' AS action_id,\n    u.\"source\" AS \"source\",\n    '0' AS action_serial_id, \n    (CASE WHEN u.\"source\" ILIKE '%%sms%%' THEN 'sms'\n    WHEN u.\"source\" ILIKE '%%phoenix%%' OR u.\"source\" IS NULL THEN 'web'\n    WHEN u.\"source\" ILIKE '%%niche%%' THEN 'niche_coregistration'\n    WHEN u.\"source\" NOT LIKE '%%niche%%' AND u.\"source\" NOT LIKE '%%sms%%' AND u.\"source\" NOT LIKE '%%phoenix%%' AND u.\"source\" IS NOT NULL THEN 'other' END) AS \"channel\"\nFROM\n    (SELECT \n            u_create.id,\n            max(u_create.\"source\") AS \"source\",\n            min(u_create.created_at) AS created_at\n    FROM northstar.users u_create\nWHERE u_create.\"source\" IS DISTINCT FROM 'importer-client'\nAND u_create.\"source\" IS DISTINCT FROM 'runscope'\nAND u_create.\"source\" IS DISTINCT FROM 'runscope-client'\nAND u_create.email IS DISTINCT FROM 'runscope-scheduled-test@dosomething.org'\nAND u_create.email IS DISTINCT FROM 'juy+runscopescheduledtests@dosomething.org'\nAND (u_create.email NOT ILIKE '%%@example.org%%' OR u_create.email IS NULL) \n    GROUP BY u_create.id) u\nUNION ALL \nSELECT\n    DISTINCT g.user_id AS northstar_id,\n    g.created_at AS \"timestamp\",\n    'messaged_gambit' AS \"action\", \n    '6' AS action_id,\n    'SMS' AS \"source\",\n    g.message_id AS action_serial_id,\n    'sms' AS \"channel\"\nFROM\n    \"quasar_prod_warehouse\".\"ds_dbt\".\"gambit_messages_inbound\" g\nWHERE \n\tg.user_id IS NOT NULL\n\tAND g.macro <> 'subscriptionStatusStop' \nUNION ALL \n    SELECT\n        DISTINCT cio.customer_id AS northstar_id,\n        cio.\"timestamp\" AS \"timestamp\",\n        'clicked_link' AS \"action\",\n        '7' AS action_id,\n        cio.template_id::CHARACTER AS \"source\",\n        cio.event_id AS action_serial_id, \n        'email' AS \"channel\"\n    FROM\n        cio.email_event cio\n    WHERE \n        cio.event_type = 'email_clicked'\n    AND cio.customer_id IS NOT NULL\nUNION ALL \nSELECT DISTINCT\n    b.northstar_id AS northstar_id,\n    b.click_time AS \"timestamp\",\n    CONCAT('bertly_link_', b.interaction_type) AS \"action\",\n    '10' AS action_id,\n    'bertly' AS \"source\",\n    b.click_id AS action_serial_id,\n    b.\"source\" AS \"channel\"\nFROM \"quasar_prod_warehouse\".\"ds_dbt\".\"bertly_clicks\" b\nINNER JOIN \"quasar_prod_warehouse\".\"ds_dbt\".\"users\" u\nON b.northstar_id = u.northstar_id\nWHERE b.northstar_id IS NOT NULL\nAND b.interaction_type IS DISTINCT FROM 'preview'\n) AS a\nLEFT JOIN \"quasar_prod_warehouse\".\"ds_dbt\".\"users\" u ON u.northstar_id = a.northstar_id", "wrapped_sql": "None", "build_path": "../../docs/compiled/ds_dbt/mel/member_event_log.sql"}, "error": null, "skip": false, "status": null, "fail": null, "warn": null, "execution_time": 0.01346898078918457, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2019-11-05T20:29:23.079181Z", "completed_at": "2019-11-05T20:29:23.088970Z"}, {"name": "execute", "started_at": "2019-11-05T20:29:23.089108Z", "completed_at": "2019-11-05T20:29:23.090746Z"}]}, {"node": {"name": "snowplow_sessions", "root_path": "/Users/mrich/projects/quasar/quasar/dbt", "resource_type": "model", "path": "phoenix_events/snowplow_sessions.sql", "original_file_path": "models/phoenix_events/snowplow_sessions.sql", "package_name": "ds_dbt", "raw_sql": "WITH sessions AS (\nSELECT\n    session_id,\n    min(device_id) AS device_id,\n    min(event_datetime) AS landing_datetime,\n    max(event_datetime) AS ending_datetime,\n    date_part(\n\t'seconds', max(event_datetime) - min(event_datetime)\n    ) AS session_duration_seconds,\n    count(DISTINCT CASE WHEN event_name = 'view' THEN \"path\" END) AS num_pages_viewed\nFROM {{ ref('snowplow_phoenix_events') }}\nGROUP BY session_id\n),\nentry_exit_pages AS (\nSELECT DISTINCT\n    session_id,\n    first_value(\"path\") OVER (PARTITION BY session_id ORDER BY event_datetime \n\tROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS landing_page,\n    first_value(event_id) OVER (PARTITION BY session_id ORDER BY event_datetime \n\tROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS event_id,\n    last_value(\"path\") OVER (PARTITION BY session_id ORDER BY event_datetime \n\tROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS exit_page\nFROM {{ ref('snowplow_phoenix_events') }}\n),\ntime_between_sessions AS (\nSELECT DISTINCT\n    device_id,\n    session_id,\n    LAG(ending_datetime) OVER (PARTITION BY device_id ORDER BY landing_datetime\n\tROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING\n    ) AS prev_session_endtime\nFROM sessions\n)\nSELECT\ns.session_id,\np.event_id,\ns.device_id,\ns.landing_datetime,\ns.ending_datetime,\ns.session_duration_seconds,\ns.num_pages_viewed,\np.landing_page,\np.exit_page,\ndate_part('day', s.landing_datetime - t.prev_session_endtime) AS days_since_last_session\nFROM sessions s\nLEFT JOIN entry_exit_pages p\nON p.session_id = s.session_id\nLEFT JOIN time_between_sessions t\nON t.session_id = s.session_id", "refs": [["snowplow_phoenix_events"], ["snowplow_phoenix_events"]], "sources": [], "depends_on": {"nodes": ["model.ds_dbt.snowplow_phoenix_events", "model.ds_dbt.snowplow_phoenix_events"], "macros": []}, "unique_id": "model.ds_dbt.snowplow_sessions", "empty": false, "fqn": ["ds_dbt", "phoenix_events", "snowplow_sessions"], "tags": [], "config": {"enabled": true, "materialized": "table", "post-hook": [{"sql": "CREATE INDEX IF NOT EXISTS sps_landing ON {{ this }}(landing_datetime, landing_page)", "transaction": true, "index": 0}, {"sql": "GRANT SELECT ON {{ this }} TO looker", "transaction": true, "index": 1}, {"sql": "GRANT SELECT ON {{ this }} TO dsanalyst", "transaction": true, "index": 2}], "pre-hook": [], "tags": [], "quoting": {}, "vars": {}, "column_types": {}, "persist_docs": {}}, "schema": "ds_dbt", "database": "quasar_prod_warehouse", "alias": "snowplow_sessions", "columns": {}, "description": "", "compiled": true, "compiled_sql": "WITH sessions AS (\nSELECT\n    session_id,\n    min(device_id) AS device_id,\n    min(event_datetime) AS landing_datetime,\n    max(event_datetime) AS ending_datetime,\n    date_part(\n\t'seconds', max(event_datetime) - min(event_datetime)\n    ) AS session_duration_seconds,\n    count(DISTINCT CASE WHEN event_name = 'view' THEN \"path\" END) AS num_pages_viewed\nFROM \"quasar_prod_warehouse\".\"ds_dbt\".\"snowplow_phoenix_events\"\nGROUP BY session_id\n),\nentry_exit_pages AS (\nSELECT DISTINCT\n    session_id,\n    first_value(\"path\") OVER (PARTITION BY session_id ORDER BY event_datetime \n\tROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS landing_page,\n    first_value(event_id) OVER (PARTITION BY session_id ORDER BY event_datetime \n\tROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS event_id,\n    last_value(\"path\") OVER (PARTITION BY session_id ORDER BY event_datetime \n\tROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS exit_page\nFROM \"quasar_prod_warehouse\".\"ds_dbt\".\"snowplow_phoenix_events\"\n),\ntime_between_sessions AS (\nSELECT DISTINCT\n    device_id,\n    session_id,\n    LAG(ending_datetime) OVER (PARTITION BY device_id ORDER BY landing_datetime\n\tROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING\n    ) AS prev_session_endtime\nFROM sessions\n)\nSELECT\ns.session_id,\np.event_id,\ns.device_id,\ns.landing_datetime,\ns.ending_datetime,\ns.session_duration_seconds,\ns.num_pages_viewed,\np.landing_page,\np.exit_page,\ndate_part('day', s.landing_datetime - t.prev_session_endtime) AS days_since_last_session\nFROM sessions s\nLEFT JOIN entry_exit_pages p\nON p.session_id = s.session_id\nLEFT JOIN time_between_sessions t\nON t.session_id = s.session_id", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "WITH sessions AS (\nSELECT\n    session_id,\n    min(device_id) AS device_id,\n    min(event_datetime) AS landing_datetime,\n    max(event_datetime) AS ending_datetime,\n    date_part(\n\t'seconds', max(event_datetime) - min(event_datetime)\n    ) AS session_duration_seconds,\n    count(DISTINCT CASE WHEN event_name = 'view' THEN \"path\" END) AS num_pages_viewed\nFROM \"quasar_prod_warehouse\".\"ds_dbt\".\"snowplow_phoenix_events\"\nGROUP BY session_id\n),\nentry_exit_pages AS (\nSELECT DISTINCT\n    session_id,\n    first_value(\"path\") OVER (PARTITION BY session_id ORDER BY event_datetime \n\tROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS landing_page,\n    first_value(event_id) OVER (PARTITION BY session_id ORDER BY event_datetime \n\tROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS event_id,\n    last_value(\"path\") OVER (PARTITION BY session_id ORDER BY event_datetime \n\tROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS exit_page\nFROM \"quasar_prod_warehouse\".\"ds_dbt\".\"snowplow_phoenix_events\"\n),\ntime_between_sessions AS (\nSELECT DISTINCT\n    device_id,\n    session_id,\n    LAG(ending_datetime) OVER (PARTITION BY device_id ORDER BY landing_datetime\n\tROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING\n    ) AS prev_session_endtime\nFROM sessions\n)\nSELECT\ns.session_id,\np.event_id,\ns.device_id,\ns.landing_datetime,\ns.ending_datetime,\ns.session_duration_seconds,\ns.num_pages_viewed,\np.landing_page,\np.exit_page,\ndate_part('day', s.landing_datetime - t.prev_session_endtime) AS days_since_last_session\nFROM sessions s\nLEFT JOIN entry_exit_pages p\nON p.session_id = s.session_id\nLEFT JOIN time_between_sessions t\nON t.session_id = s.session_id", "wrapped_sql": "None", "build_path": "../../docs/compiled/ds_dbt/phoenix_events/snowplow_sessions.sql"}, "error": null, "skip": false, "status": null, "fail": null, "warn": null, "execution_time": 0.00941920280456543, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2019-11-05T20:29:23.094409Z", "completed_at": "2019-11-05T20:29:23.100167Z"}, {"name": "execute", "started_at": "2019-11-05T20:29:23.100306Z", "completed_at": "2019-11-05T20:29:23.101844Z"}]}, {"node": {"name": "phoenix_events_combined", "root_path": "/Users/mrich/projects/quasar/quasar/dbt", "resource_type": "model", "path": "phoenix_events/phoenix_events_combined.sql", "original_file_path": "models/phoenix_events/phoenix_events_combined.sql", "package_name": "ds_dbt", "raw_sql": "SELECT\n    p.event_id,\n    p.event_datetime,\n    p.event_name,\n    p.event_source,\n    p.\"path\",\n    p.\"host\",\n    NULL AS query_parameters,\n    NULL AS clicked_link_url,\n    p.page_utm_source,\n    p.page_utm_medium,\n    p.page_utm_campaign,\n    p.referrer_host,\n    p.referrer_path,\n    p.referrer_source,\n    p.campaign_id,\n    p.campaign_name,\n    p.modal_type,\n    NULL AS search_query,\n    p.session_id,\n    p.browser_size,\n    p.northstar_id,\n    p.device_id\nFROM\n    public.puck_phoenix_events p\nUNION ALL\nSELECT\n    s.event_id,\n    s.event_datetime,\n    s.event_name,\n    s.event_source,\n    s.\"path\",\n    s.\"host\",\n    s.query_parameters,\n    s.clicked_link_url,\n    s.page_utm_source,\n    s.page_utm_medium,\n    s.page_utm_campaign,\n    s.referrer_host,\n    s.referrer_path,\n    s.referrer_source,\n    s.campaign_id,\n    s.campaign_name,\n    s.modal_type,\n    s.search_query,\n    s.session_id,\n    s.browser_size,\n    s.northstar_id,\n    s.device_id\nFROM\n    {{ ref('snowplow_phoenix_events') }} s", "refs": [["snowplow_phoenix_events"]], "sources": [], "depends_on": {"nodes": ["model.ds_dbt.snowplow_phoenix_events"], "macros": []}, "unique_id": "model.ds_dbt.phoenix_events_combined", "empty": false, "fqn": ["ds_dbt", "phoenix_events", "phoenix_events_combined"], "tags": [], "config": {"enabled": true, "materialized": "table", "post-hook": [{"sql": "CREATE UNIQUE INDEX IF NOT EXISTS pec_unique ON {{ this }}(event_datetime, event_name, event_id)", "transaction": true, "index": 0}, {"sql": "CREATE INDEX IF NOT EXISTS pec_session_id ON {{ this }} (session_id)", "transaction": true, "index": 1}, {"sql": "GRANT SELECT ON {{ this }} TO looker", "transaction": true, "index": 2}, {"sql": "GRANT SELECT ON {{ this }} TO dsanalyst", "transaction": true, "index": 3}], "pre-hook": [], "tags": [], "quoting": {}, "vars": {}, "column_types": {}, "persist_docs": {}, "alias": "phoenix_events_combined"}, "schema": "ds_dbt", "database": "quasar_prod_warehouse", "alias": "phoenix_events_combined", "columns": {}, "description": "", "compiled": true, "compiled_sql": "SELECT\n    p.event_id,\n    p.event_datetime,\n    p.event_name,\n    p.event_source,\n    p.\"path\",\n    p.\"host\",\n    NULL AS query_parameters,\n    NULL AS clicked_link_url,\n    p.page_utm_source,\n    p.page_utm_medium,\n    p.page_utm_campaign,\n    p.referrer_host,\n    p.referrer_path,\n    p.referrer_source,\n    p.campaign_id,\n    p.campaign_name,\n    p.modal_type,\n    NULL AS search_query,\n    p.session_id,\n    p.browser_size,\n    p.northstar_id,\n    p.device_id\nFROM\n    public.puck_phoenix_events p\nUNION ALL\nSELECT\n    s.event_id,\n    s.event_datetime,\n    s.event_name,\n    s.event_source,\n    s.\"path\",\n    s.\"host\",\n    s.query_parameters,\n    s.clicked_link_url,\n    s.page_utm_source,\n    s.page_utm_medium,\n    s.page_utm_campaign,\n    s.referrer_host,\n    s.referrer_path,\n    s.referrer_source,\n    s.campaign_id,\n    s.campaign_name,\n    s.modal_type,\n    s.search_query,\n    s.session_id,\n    s.browser_size,\n    s.northstar_id,\n    s.device_id\nFROM\n    \"quasar_prod_warehouse\".\"ds_dbt\".\"snowplow_phoenix_events\" s", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "SELECT\n    p.event_id,\n    p.event_datetime,\n    p.event_name,\n    p.event_source,\n    p.\"path\",\n    p.\"host\",\n    NULL AS query_parameters,\n    NULL AS clicked_link_url,\n    p.page_utm_source,\n    p.page_utm_medium,\n    p.page_utm_campaign,\n    p.referrer_host,\n    p.referrer_path,\n    p.referrer_source,\n    p.campaign_id,\n    p.campaign_name,\n    p.modal_type,\n    NULL AS search_query,\n    p.session_id,\n    p.browser_size,\n    p.northstar_id,\n    p.device_id\nFROM\n    public.puck_phoenix_events p\nUNION ALL\nSELECT\n    s.event_id,\n    s.event_datetime,\n    s.event_name,\n    s.event_source,\n    s.\"path\",\n    s.\"host\",\n    s.query_parameters,\n    s.clicked_link_url,\n    s.page_utm_source,\n    s.page_utm_medium,\n    s.page_utm_campaign,\n    s.referrer_host,\n    s.referrer_path,\n    s.referrer_source,\n    s.campaign_id,\n    s.campaign_name,\n    s.modal_type,\n    s.search_query,\n    s.session_id,\n    s.browser_size,\n    s.northstar_id,\n    s.device_id\nFROM\n    \"quasar_prod_warehouse\".\"ds_dbt\".\"snowplow_phoenix_events\" s", "wrapped_sql": "None", "build_path": "../../docs/compiled/ds_dbt/phoenix_events/phoenix_events_combined.sql"}, "error": null, "skip": false, "status": null, "fail": null, "warn": null, "execution_time": 0.012941837310791016, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2019-11-05T20:29:23.105666Z", "completed_at": "2019-11-05T20:29:23.114282Z"}, {"name": "execute", "started_at": "2019-11-05T20:29:23.114473Z", "completed_at": "2019-11-05T20:29:23.116276Z"}]}, {"node": {"name": "user_activity", "root_path": "/Users/mrich/projects/quasar/quasar/dbt", "resource_type": "model", "path": "user_activity/user_activity.sql", "original_file_path": "models/user_activity/user_activity.sql", "package_name": "ds_dbt", "raw_sql": "WITH\nrb_summary AS (\n    SELECT\n\tr_with_lag.northstar_id,\n\tsum(r_with_lag.reportback_volume) AS total_quantity,\n\tcount(DISTINCT r_with_lag.campaign_id) AS num_rbs,\n\tmax(r_with_lag.post_created_at) AS most_recent_rb,\n\tmin(r_with_lag.post_created_at) AS first_rb,\n\tavg(r_with_lag.time_betw_rbs) AS avg_time_betw_rbs\n    FROM (\n\tSELECT\n\t    *,\n\t    post_created_at - lag(post_created_at) OVER (\n\t\tPARTITION BY northstar_id ORDER BY post_created_at) AS time_betw_rbs\n\tFROM {{ ref('reportbacks') }}\n    ) r_with_lag\n    GROUP BY r_with_lag.northstar_id\n),\ngambit_unsub AS (\n    SELECT\n\tf.user_id,\n\tCASE WHEN f.last_macro = 'subscriptionStatusStop' OR f.last_topic = 'unsubscribed'\n\tTHEN f.last_ts ELSE NULL END AS unsub_ts\n    FROM (\n\tSELECT DISTINCT\n\t    user_id,\n\t    LAST_VALUE(macro) OVER (PARTITION BY user_id ORDER BY created_at\n\t\tRANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS last_macro,\n\t    LAST_VALUE(topic) OVER (PARTITION BY user_id ORDER BY created_at\n\t\tRANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS last_topic,\n\t    LAST_VALUE(created_at) OVER (PARTITION BY user_id ORDER BY created_at\n\t\tRANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS last_ts\n\tFROM {{ ref('gambit_messages_inbound') }}\n    ) f\n),\nsms_undeliverable AS (\n    SELECT DISTINCT\n\t    id,\n\t    FIRST_VALUE(updated_at) OVER (PARTITION BY id ORDER BY updated_at\n\t\tROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS unsub_ts\n    FROM northstar.users\n    WHERE sms_status IN ('unknown', 'undeliverable', 'GDPR')\n),\nemail_unsub AS (\n    SELECT\n\tf.customer_id,\n\tCASE WHEN f.last_status = 'customer_unsubscribed' THEN f.last_ts ELSE NULL\n\t    END AS email_unsubscribed_at\n    FROM (\n\tSELECT DISTINCT\n\t    customer_id,\n\t    LAST_VALUE(\"timestamp\") OVER (\n\t\tPARTITION BY customer_id ORDER BY \"timestamp\", event_type\n\t\tRANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS last_ts,\n\t    LAST_VALUE(event_type) OVER (\n\t\tPARTITION BY customer_id ORDER BY \"timestamp\", event_type\n\t\tRANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS last_status\n\t    FROM cio.customer_event\n    ) f\n),\ntime_to_actions AS (\n    SELECT\n\tf.northstar_id,\n\tavg(date_part('day', f.time_to_next_action)) AS avg_days_next_action_after_rb,\n\tmin(date_part('day', f.time_to_next_action_last_rb)) AS days_to_next_action_after_last_rb\n    FROM (\n\tSELECT\n\t    r.northstar_id,\n\t    mel.next_action_ts - r.post_created_at AS time_to_next_action,\n\t    LAST_VALUE(mel.next_action_ts - r.post_created_at) OVER (\n\t\tPARTITION BY r.northstar_id ORDER BY r.post_created_at\n\t\tROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING\n\t    ) AS time_to_next_action_last_rb\n\tFROM {{ ref('reportbacks') }} r\n\tLEFT JOIN LATERAL (\n\t    SELECT \"timestamp\" AS next_action_ts, action_type AS next_action_type\n\t    FROM {{ ref('member_event_log') }}\n\t    WHERE northstar_id = r.northstar_id AND \"timestamp\" > r.post_created_at\n\t    ORDER BY \"timestamp\" ASC\n\t    LIMIT 1\n\t) mel\n\tON TRUE\n    ) f\n    GROUP BY f.northstar_id\n)\nSELECT\nu.northstar_id,\nu.created_at,\nu.sms_status,\nu.cio_status AS email_status,\ns.num_signups,\ns.most_recent_signup,\nr.num_rbs,\nr.total_quantity,\nr.most_recent_rb,\nr.first_rb,\nr.avg_time_betw_rbs,\ntime_to_actions.avg_days_next_action_after_rb,\ntime_to_actions.days_to_next_action_after_last_rb,\nmel.most_recent_action AS most_recent_mam_action,\nemail_opens.most_recent_email_open,\ngreatest(\n    mel.most_recent_action,\n    email_opens.most_recent_email_open\n) AS most_recent_all_actions,\nCASE WHEN time_to_actions.days_to_next_action_after_last_rb IS NULL\n    AND r.num_rbs > 0 THEN TRUE END AS last_action_is_rb,\nDATE_PART(\n    'day', now() - greatest(mel.most_recent_action, email_opens.most_recent_email_open)\n) as days_since_last_action,\n(r.first_rb - u.created_at) AS time_to_first_rb,\nCOALESCE(gambit_unsub.unsub_ts, sms_undeliverable.unsub_ts) AS sms_unsubscribed_at,\nemail_unsub.email_unsubscribed_at,\nCASE WHEN u.subscribed_member IS FALSE\n    THEN greatest(\n\tgambit_unsub.unsub_ts,\n\tsms_undeliverable.unsub_ts,\n\temail_unsub.email_unsubscribed_at) ELSE NULL\n    END AS user_unsubscribed_at,\nCASE WHEN u.\"source\" = 'importer-client' AND p.first_post = 'voter-reg'\n    THEN 1 ELSE 0 END AS voter_reg_acquisition\nFROM {{ ref('users') }} u\nLEFT JOIN (\nSELECT\n    northstar_id,\n    count(DISTINCT campaign_id) AS num_signups,\n    max(created_at) AS most_recent_signup\nFROM {{ ref('signups') }}\nGROUP BY northstar_id\n) s\nON u.northstar_id = s.northstar_id\nLEFT JOIN rb_summary r\nON u.northstar_id = r.northstar_id\nLEFT JOIN (\n    SELECT northstar_id, max(\"timestamp\") AS most_recent_action\n    FROM {{ ref('member_event_log') }}\n    GROUP BY northstar_id\n) mel\nON u.northstar_id = mel.northstar_id\nLEFT JOIN (\n    SELECT customer_id, max(\"timestamp\") AS most_recent_email_open\n    FROM cio.email_event\n    WHERE event_type = 'email_opened'\n    GROUP BY customer_id\n) email_opens\nON u.northstar_id = email_opens.customer_id\nLEFT JOIN gambit_unsub\nON u.northstar_id = gambit_unsub.user_id\nLEFT JOIN sms_undeliverable\nON u.northstar_id = sms_undeliverable.id\nLEFT JOIN email_unsub\nON u.northstar_id = email_unsub.customer_id\nLEFT JOIN time_to_actions\nON u.northstar_id = time_to_actions.northstar_id\nLEFT JOIN (\n    SELECT DISTINCT\n\tnorthstar_id,\n\tFIRST_VALUE(\"type\") OVER (\n\t    PARTITION BY northstar_id ORDER BY created_at) AS first_post\n    FROM {{ ref('posts') }}\n) p\nON u.northstar_id = p.northstar_id", "refs": [["reportbacks"], ["gambit_messages_inbound"], ["reportbacks"], ["member_event_log"], ["users"], ["signups"], ["member_event_log"], ["posts"]], "sources": [], "depends_on": {"nodes": ["model.ds_dbt.reportbacks", "model.ds_dbt.gambit_messages_inbound", "model.ds_dbt.reportbacks", "model.ds_dbt.member_event_log", "model.ds_dbt.users", "model.ds_dbt.signups", "model.ds_dbt.member_event_log", "model.ds_dbt.posts"], "macros": []}, "unique_id": "model.ds_dbt.user_activity", "empty": false, "fqn": ["ds_dbt", "user_activity", "user_activity"], "tags": [], "config": {"enabled": true, "materialized": "table", "post-hook": [{"sql": "CREATE UNIQUE INDEX user_activity_unique_i ON {{ this }}(created_at, northstar_id)", "transaction": true, "index": 0}, {"sql": "CREATE INDEX IF NOT EXISTS most_recent_all_actions_i ON {{ this }}(most_recent_all_actions)", "transaction": true, "index": 1}, {"sql": "GRANT SELECT ON {{ this }} TO dsanalyst", "transaction": true, "index": 2}, {"sql": "GRANT SELECT ON {{ this }} TO looker", "transaction": true, "index": 3}], "pre-hook": [], "tags": [], "quoting": {}, "vars": {}, "column_types": {}, "persist_docs": {}, "alias": "user_activity"}, "schema": "ds_dbt", "database": "quasar_prod_warehouse", "alias": "user_activity", "columns": {}, "description": "", "compiled": true, "compiled_sql": "WITH\nrb_summary AS (\n    SELECT\n\tr_with_lag.northstar_id,\n\tsum(r_with_lag.reportback_volume) AS total_quantity,\n\tcount(DISTINCT r_with_lag.campaign_id) AS num_rbs,\n\tmax(r_with_lag.post_created_at) AS most_recent_rb,\n\tmin(r_with_lag.post_created_at) AS first_rb,\n\tavg(r_with_lag.time_betw_rbs) AS avg_time_betw_rbs\n    FROM (\n\tSELECT\n\t    *,\n\t    post_created_at - lag(post_created_at) OVER (\n\t\tPARTITION BY northstar_id ORDER BY post_created_at) AS time_betw_rbs\n\tFROM \"quasar_prod_warehouse\".\"ds_dbt\".\"reportbacks\"\n    ) r_with_lag\n    GROUP BY r_with_lag.northstar_id\n),\ngambit_unsub AS (\n    SELECT\n\tf.user_id,\n\tCASE WHEN f.last_macro = 'subscriptionStatusStop' OR f.last_topic = 'unsubscribed'\n\tTHEN f.last_ts ELSE NULL END AS unsub_ts\n    FROM (\n\tSELECT DISTINCT\n\t    user_id,\n\t    LAST_VALUE(macro) OVER (PARTITION BY user_id ORDER BY created_at\n\t\tRANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS last_macro,\n\t    LAST_VALUE(topic) OVER (PARTITION BY user_id ORDER BY created_at\n\t\tRANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS last_topic,\n\t    LAST_VALUE(created_at) OVER (PARTITION BY user_id ORDER BY created_at\n\t\tRANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS last_ts\n\tFROM \"quasar_prod_warehouse\".\"ds_dbt\".\"gambit_messages_inbound\"\n    ) f\n),\nsms_undeliverable AS (\n    SELECT DISTINCT\n\t    id,\n\t    FIRST_VALUE(updated_at) OVER (PARTITION BY id ORDER BY updated_at\n\t\tROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS unsub_ts\n    FROM northstar.users\n    WHERE sms_status IN ('unknown', 'undeliverable', 'GDPR')\n),\nemail_unsub AS (\n    SELECT\n\tf.customer_id,\n\tCASE WHEN f.last_status = 'customer_unsubscribed' THEN f.last_ts ELSE NULL\n\t    END AS email_unsubscribed_at\n    FROM (\n\tSELECT DISTINCT\n\t    customer_id,\n\t    LAST_VALUE(\"timestamp\") OVER (\n\t\tPARTITION BY customer_id ORDER BY \"timestamp\", event_type\n\t\tRANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS last_ts,\n\t    LAST_VALUE(event_type) OVER (\n\t\tPARTITION BY customer_id ORDER BY \"timestamp\", event_type\n\t\tRANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS last_status\n\t    FROM cio.customer_event\n    ) f\n),\ntime_to_actions AS (\n    SELECT\n\tf.northstar_id,\n\tavg(date_part('day', f.time_to_next_action)) AS avg_days_next_action_after_rb,\n\tmin(date_part('day', f.time_to_next_action_last_rb)) AS days_to_next_action_after_last_rb\n    FROM (\n\tSELECT\n\t    r.northstar_id,\n\t    mel.next_action_ts - r.post_created_at AS time_to_next_action,\n\t    LAST_VALUE(mel.next_action_ts - r.post_created_at) OVER (\n\t\tPARTITION BY r.northstar_id ORDER BY r.post_created_at\n\t\tROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING\n\t    ) AS time_to_next_action_last_rb\n\tFROM \"quasar_prod_warehouse\".\"ds_dbt\".\"reportbacks\" r\n\tLEFT JOIN LATERAL (\n\t    SELECT \"timestamp\" AS next_action_ts, action_type AS next_action_type\n\t    FROM \"quasar_prod_warehouse\".\"ds_dbt\".\"mel\"\n\t    WHERE northstar_id = r.northstar_id AND \"timestamp\" > r.post_created_at\n\t    ORDER BY \"timestamp\" ASC\n\t    LIMIT 1\n\t) mel\n\tON TRUE\n    ) f\n    GROUP BY f.northstar_id\n)\nSELECT\nu.northstar_id,\nu.created_at,\nu.sms_status,\nu.cio_status AS email_status,\ns.num_signups,\ns.most_recent_signup,\nr.num_rbs,\nr.total_quantity,\nr.most_recent_rb,\nr.first_rb,\nr.avg_time_betw_rbs,\ntime_to_actions.avg_days_next_action_after_rb,\ntime_to_actions.days_to_next_action_after_last_rb,\nmel.most_recent_action AS most_recent_mam_action,\nemail_opens.most_recent_email_open,\ngreatest(\n    mel.most_recent_action,\n    email_opens.most_recent_email_open\n) AS most_recent_all_actions,\nCASE WHEN time_to_actions.days_to_next_action_after_last_rb IS NULL\n    AND r.num_rbs > 0 THEN TRUE END AS last_action_is_rb,\nDATE_PART(\n    'day', now() - greatest(mel.most_recent_action, email_opens.most_recent_email_open)\n) as days_since_last_action,\n(r.first_rb - u.created_at) AS time_to_first_rb,\nCOALESCE(gambit_unsub.unsub_ts, sms_undeliverable.unsub_ts) AS sms_unsubscribed_at,\nemail_unsub.email_unsubscribed_at,\nCASE WHEN u.subscribed_member IS FALSE\n    THEN greatest(\n\tgambit_unsub.unsub_ts,\n\tsms_undeliverable.unsub_ts,\n\temail_unsub.email_unsubscribed_at) ELSE NULL\n    END AS user_unsubscribed_at,\nCASE WHEN u.\"source\" = 'importer-client' AND p.first_post = 'voter-reg'\n    THEN 1 ELSE 0 END AS voter_reg_acquisition\nFROM \"quasar_prod_warehouse\".\"ds_dbt\".\"users\" u\nLEFT JOIN (\nSELECT\n    northstar_id,\n    count(DISTINCT campaign_id) AS num_signups,\n    max(created_at) AS most_recent_signup\nFROM \"quasar_prod_warehouse\".\"ds_dbt\".\"signups\"\nGROUP BY northstar_id\n) s\nON u.northstar_id = s.northstar_id\nLEFT JOIN rb_summary r\nON u.northstar_id = r.northstar_id\nLEFT JOIN (\n    SELECT northstar_id, max(\"timestamp\") AS most_recent_action\n    FROM \"quasar_prod_warehouse\".\"ds_dbt\".\"mel\"\n    GROUP BY northstar_id\n) mel\nON u.northstar_id = mel.northstar_id\nLEFT JOIN (\n    SELECT customer_id, max(\"timestamp\") AS most_recent_email_open\n    FROM cio.email_event\n    WHERE event_type = 'email_opened'\n    GROUP BY customer_id\n) email_opens\nON u.northstar_id = email_opens.customer_id\nLEFT JOIN gambit_unsub\nON u.northstar_id = gambit_unsub.user_id\nLEFT JOIN sms_undeliverable\nON u.northstar_id = sms_undeliverable.id\nLEFT JOIN email_unsub\nON u.northstar_id = email_unsub.customer_id\nLEFT JOIN time_to_actions\nON u.northstar_id = time_to_actions.northstar_id\nLEFT JOIN (\n    SELECT DISTINCT\n\tnorthstar_id,\n\tFIRST_VALUE(\"type\") OVER (\n\t    PARTITION BY northstar_id ORDER BY created_at) AS first_post\n    FROM \"quasar_prod_warehouse\".\"ds_dbt\".\"posts\"\n) p\nON u.northstar_id = p.northstar_id", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "WITH\nrb_summary AS (\n    SELECT\n\tr_with_lag.northstar_id,\n\tsum(r_with_lag.reportback_volume) AS total_quantity,\n\tcount(DISTINCT r_with_lag.campaign_id) AS num_rbs,\n\tmax(r_with_lag.post_created_at) AS most_recent_rb,\n\tmin(r_with_lag.post_created_at) AS first_rb,\n\tavg(r_with_lag.time_betw_rbs) AS avg_time_betw_rbs\n    FROM (\n\tSELECT\n\t    *,\n\t    post_created_at - lag(post_created_at) OVER (\n\t\tPARTITION BY northstar_id ORDER BY post_created_at) AS time_betw_rbs\n\tFROM \"quasar_prod_warehouse\".\"ds_dbt\".\"reportbacks\"\n    ) r_with_lag\n    GROUP BY r_with_lag.northstar_id\n),\ngambit_unsub AS (\n    SELECT\n\tf.user_id,\n\tCASE WHEN f.last_macro = 'subscriptionStatusStop' OR f.last_topic = 'unsubscribed'\n\tTHEN f.last_ts ELSE NULL END AS unsub_ts\n    FROM (\n\tSELECT DISTINCT\n\t    user_id,\n\t    LAST_VALUE(macro) OVER (PARTITION BY user_id ORDER BY created_at\n\t\tRANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS last_macro,\n\t    LAST_VALUE(topic) OVER (PARTITION BY user_id ORDER BY created_at\n\t\tRANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS last_topic,\n\t    LAST_VALUE(created_at) OVER (PARTITION BY user_id ORDER BY created_at\n\t\tRANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS last_ts\n\tFROM \"quasar_prod_warehouse\".\"ds_dbt\".\"gambit_messages_inbound\"\n    ) f\n),\nsms_undeliverable AS (\n    SELECT DISTINCT\n\t    id,\n\t    FIRST_VALUE(updated_at) OVER (PARTITION BY id ORDER BY updated_at\n\t\tROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS unsub_ts\n    FROM northstar.users\n    WHERE sms_status IN ('unknown', 'undeliverable', 'GDPR')\n),\nemail_unsub AS (\n    SELECT\n\tf.customer_id,\n\tCASE WHEN f.last_status = 'customer_unsubscribed' THEN f.last_ts ELSE NULL\n\t    END AS email_unsubscribed_at\n    FROM (\n\tSELECT DISTINCT\n\t    customer_id,\n\t    LAST_VALUE(\"timestamp\") OVER (\n\t\tPARTITION BY customer_id ORDER BY \"timestamp\", event_type\n\t\tRANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS last_ts,\n\t    LAST_VALUE(event_type) OVER (\n\t\tPARTITION BY customer_id ORDER BY \"timestamp\", event_type\n\t\tRANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS last_status\n\t    FROM cio.customer_event\n    ) f\n),\ntime_to_actions AS (\n    SELECT\n\tf.northstar_id,\n\tavg(date_part('day', f.time_to_next_action)) AS avg_days_next_action_after_rb,\n\tmin(date_part('day', f.time_to_next_action_last_rb)) AS days_to_next_action_after_last_rb\n    FROM (\n\tSELECT\n\t    r.northstar_id,\n\t    mel.next_action_ts - r.post_created_at AS time_to_next_action,\n\t    LAST_VALUE(mel.next_action_ts - r.post_created_at) OVER (\n\t\tPARTITION BY r.northstar_id ORDER BY r.post_created_at\n\t\tROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING\n\t    ) AS time_to_next_action_last_rb\n\tFROM \"quasar_prod_warehouse\".\"ds_dbt\".\"reportbacks\" r\n\tLEFT JOIN LATERAL (\n\t    SELECT \"timestamp\" AS next_action_ts, action_type AS next_action_type\n\t    FROM \"quasar_prod_warehouse\".\"ds_dbt\".\"mel\"\n\t    WHERE northstar_id = r.northstar_id AND \"timestamp\" > r.post_created_at\n\t    ORDER BY \"timestamp\" ASC\n\t    LIMIT 1\n\t) mel\n\tON TRUE\n    ) f\n    GROUP BY f.northstar_id\n)\nSELECT\nu.northstar_id,\nu.created_at,\nu.sms_status,\nu.cio_status AS email_status,\ns.num_signups,\ns.most_recent_signup,\nr.num_rbs,\nr.total_quantity,\nr.most_recent_rb,\nr.first_rb,\nr.avg_time_betw_rbs,\ntime_to_actions.avg_days_next_action_after_rb,\ntime_to_actions.days_to_next_action_after_last_rb,\nmel.most_recent_action AS most_recent_mam_action,\nemail_opens.most_recent_email_open,\ngreatest(\n    mel.most_recent_action,\n    email_opens.most_recent_email_open\n) AS most_recent_all_actions,\nCASE WHEN time_to_actions.days_to_next_action_after_last_rb IS NULL\n    AND r.num_rbs > 0 THEN TRUE END AS last_action_is_rb,\nDATE_PART(\n    'day', now() - greatest(mel.most_recent_action, email_opens.most_recent_email_open)\n) as days_since_last_action,\n(r.first_rb - u.created_at) AS time_to_first_rb,\nCOALESCE(gambit_unsub.unsub_ts, sms_undeliverable.unsub_ts) AS sms_unsubscribed_at,\nemail_unsub.email_unsubscribed_at,\nCASE WHEN u.subscribed_member IS FALSE\n    THEN greatest(\n\tgambit_unsub.unsub_ts,\n\tsms_undeliverable.unsub_ts,\n\temail_unsub.email_unsubscribed_at) ELSE NULL\n    END AS user_unsubscribed_at,\nCASE WHEN u.\"source\" = 'importer-client' AND p.first_post = 'voter-reg'\n    THEN 1 ELSE 0 END AS voter_reg_acquisition\nFROM \"quasar_prod_warehouse\".\"ds_dbt\".\"users\" u\nLEFT JOIN (\nSELECT\n    northstar_id,\n    count(DISTINCT campaign_id) AS num_signups,\n    max(created_at) AS most_recent_signup\nFROM \"quasar_prod_warehouse\".\"ds_dbt\".\"signups\"\nGROUP BY northstar_id\n) s\nON u.northstar_id = s.northstar_id\nLEFT JOIN rb_summary r\nON u.northstar_id = r.northstar_id\nLEFT JOIN (\n    SELECT northstar_id, max(\"timestamp\") AS most_recent_action\n    FROM \"quasar_prod_warehouse\".\"ds_dbt\".\"mel\"\n    GROUP BY northstar_id\n) mel\nON u.northstar_id = mel.northstar_id\nLEFT JOIN (\n    SELECT customer_id, max(\"timestamp\") AS most_recent_email_open\n    FROM cio.email_event\n    WHERE event_type = 'email_opened'\n    GROUP BY customer_id\n) email_opens\nON u.northstar_id = email_opens.customer_id\nLEFT JOIN gambit_unsub\nON u.northstar_id = gambit_unsub.user_id\nLEFT JOIN sms_undeliverable\nON u.northstar_id = sms_undeliverable.id\nLEFT JOIN email_unsub\nON u.northstar_id = email_unsub.customer_id\nLEFT JOIN time_to_actions\nON u.northstar_id = time_to_actions.northstar_id\nLEFT JOIN (\n    SELECT DISTINCT\n\tnorthstar_id,\n\tFIRST_VALUE(\"type\") OVER (\n\t    PARTITION BY northstar_id ORDER BY created_at) AS first_post\n    FROM \"quasar_prod_warehouse\".\"ds_dbt\".\"posts\"\n) p\nON u.northstar_id = p.northstar_id", "wrapped_sql": "None", "build_path": "../../docs/compiled/ds_dbt/user_activity/user_activity.sql"}, "error": null, "skip": false, "status": null, "fail": null, "warn": null, "execution_time": 0.016756057739257812, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2019-11-05T20:29:23.120727Z", "completed_at": "2019-11-05T20:29:23.131008Z"}, {"name": "execute", "started_at": "2019-11-05T20:29:23.131254Z", "completed_at": "2019-11-05T20:29:23.135292Z"}]}, {"node": {"name": "phoenix_sessions_combined", "root_path": "/Users/mrich/projects/quasar/quasar/dbt", "resource_type": "model", "path": "phoenix_events/phoenix_sessions_combined.sql", "original_file_path": "models/phoenix_events/phoenix_sessions_combined.sql", "package_name": "ds_dbt", "raw_sql": "SELECT \n    p.session_id,\n    p.event_id,\n    p.device_id,\n    p.landing_datetime,\n    p.end_datetime as ending_datetime,\n    EXTRACT(EPOCH FROM (end_datetime - landing_datetime)) AS session_duration_seconds,\n    NULL as num_pages_viewed,\n    p.landing_page,\n    NULL as exit_page,\n    NULL as days_since_last_session\nFROM public.puck_phoenix_sessions p\nUNION ALL\nSELECT\n    s.session_id,\n    s.event_id,\n    s.device_id,\n    s.landing_datetime,\n    s.ending_datetime,\n    s.session_duration_seconds,\n    s.num_pages_viewed,\n    s.landing_page,\n    s.exit_page,\n    s.days_since_last_session\nFROM {{ ref('snowplow_sessions') }} s", "refs": [["snowplow_sessions"]], "sources": [], "depends_on": {"nodes": ["model.ds_dbt.snowplow_sessions"], "macros": []}, "unique_id": "model.ds_dbt.phoenix_sessions_combined", "empty": false, "fqn": ["ds_dbt", "phoenix_events", "phoenix_sessions_combined"], "tags": [], "config": {"enabled": true, "materialized": "table", "post-hook": [{"sql": "CREATE INDEX IF NOT EXISTS psc_landing ON {{ this }}(landing_datetime, landing_page)", "transaction": true, "index": 0}, {"sql": "GRANT SELECT ON {{ this }} TO looker", "transaction": true, "index": 1}, {"sql": "GRANT SELECT ON {{ this }} TO dsanalyst", "transaction": true, "index": 2}], "pre-hook": [], "tags": [], "quoting": {}, "vars": {}, "column_types": {}, "persist_docs": {}, "alias": "phoenix_sessions_combined"}, "schema": "ds_dbt", "database": "quasar_prod_warehouse", "alias": "phoenix_sessions_combined", "columns": {}, "description": "", "compiled": true, "compiled_sql": "SELECT \n    p.session_id,\n    p.event_id,\n    p.device_id,\n    p.landing_datetime,\n    p.end_datetime as ending_datetime,\n    EXTRACT(EPOCH FROM (end_datetime - landing_datetime)) AS session_duration_seconds,\n    NULL as num_pages_viewed,\n    p.landing_page,\n    NULL as exit_page,\n    NULL as days_since_last_session\nFROM public.puck_phoenix_sessions p\nUNION ALL\nSELECT\n    s.session_id,\n    s.event_id,\n    s.device_id,\n    s.landing_datetime,\n    s.ending_datetime,\n    s.session_duration_seconds,\n    s.num_pages_viewed,\n    s.landing_page,\n    s.exit_page,\n    s.days_since_last_session\nFROM \"quasar_prod_warehouse\".\"ds_dbt\".\"snowplow_sessions\" s", "extra_ctes_injected": true, "extra_ctes": [], "injected_sql": "SELECT \n    p.session_id,\n    p.event_id,\n    p.device_id,\n    p.landing_datetime,\n    p.end_datetime as ending_datetime,\n    EXTRACT(EPOCH FROM (end_datetime - landing_datetime)) AS session_duration_seconds,\n    NULL as num_pages_viewed,\n    p.landing_page,\n    NULL as exit_page,\n    NULL as days_since_last_session\nFROM public.puck_phoenix_sessions p\nUNION ALL\nSELECT\n    s.session_id,\n    s.event_id,\n    s.device_id,\n    s.landing_datetime,\n    s.ending_datetime,\n    s.session_duration_seconds,\n    s.num_pages_viewed,\n    s.landing_page,\n    s.exit_page,\n    s.days_since_last_session\nFROM \"quasar_prod_warehouse\".\"ds_dbt\".\"snowplow_sessions\" s", "wrapped_sql": "None", "build_path": "../../docs/compiled/ds_dbt/phoenix_events/phoenix_sessions_combined.sql"}, "error": null, "skip": false, "status": null, "fail": null, "warn": null, "execution_time": 0.011809110641479492, "thread_id": "Thread-1", "timing": [{"name": "compile", "started_at": "2019-11-05T20:29:23.138617Z", "completed_at": "2019-11-05T20:29:23.146775Z"}, {"name": "execute", "started_at": "2019-11-05T20:29:23.147038Z", "completed_at": "2019-11-05T20:29:23.149789Z"}]}], "generated_at": "2019-11-05T20:29:23.237244Z", "elapsed_time": 0.5233850479125977}