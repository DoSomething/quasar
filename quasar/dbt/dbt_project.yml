
# Name your package! Package names should contain only lowercase characters
# and underscores. A good package name should reflect your organization's
# name or the intended use of these models
name: 'ds_dbt'
version: '1.0'

# This setting configures which "profile" dbt uses for this project. Profiles contain
# database connection information, and should be configured in the  ~/.dbt/profiles.yml file
profile: 'default'

# These configurations specify where dbt should look for different types of files.
# The `source-paths` config, for example, states that source models can be found
# in the "models/" directory. You probably won't need to change these!
source-paths: ["models"]
analysis-paths: ["analysis"] 
test-paths: ["tests"]
data-paths: ["data"]
macro-paths: ["macros"]

target-path: "target"  # directory which will store compiled SQL files
clean-targets:         # directories to be removed by `dbt clean`
    - "target"
    - "dbt_modules"

# You can define configurations for models in the `source-paths` directory here.
# Using these configurations, you can enable or disable models, change how they
# are materialized, and more!

# In this example config, we tell dbt to build all models in the example/ directory
# as views (the default). These settings can be overridden in the individual model files
# using the `{{ config(...) }}` macro.
models:
  ds_dbt:
      # Applies to all files under models/phoenix_events/
      phoenix_events:
        snowplow_base_event:
          alias: snowplow_base_event
          materialized: incremental
          sql_where: "event_datetime > (select max(event_datetime) from {{ this }}"
          post-hook:
           - "CREATE INDEX IF NOT EXISTS event_index ON {{ this }}(event_id)"
           - "GRANT SELECT ON {{ this }} TO dsanalyst"
        snowplow_payload_event:
          alias: snowplow_payload_event
          materialized: incremental
          sql_where: "ft_timestamp > (select max(ft_timestamp) from {{ this }}"
          post-hook:
           - "CREATE INDEX IF NOT EXISTS payload_event_id ON {{ this }}(event_id)"
           - "GRANT SELECT ON {{ this }} TO dsanalyst"
        snowplow_raw_event:
          materialized: incremental
          sql_where: "event_datetime > (select max(event_datetime) from {{ this }}"
          post-hook:
            - "CREATE INDEX IF NOT EXISTS raw_event_id ON {{ this }}(event_id)"
            - "GRANT SELECT ON {{ this }} TO dsanalyst"
        snowplow_phoenix_events:
          materialized: incremental
          sql_where: "event_datetime > (select max(event_datetime) from {{ this }}"
          post-hook:
            - "CREATE UNIQUE INDEX spe_unique ON {{ this }}(event_datetime, event_name, event_id)"
            - "CREATE INDEX spe_session_id ON {{ this }} (session_id)"
            - "GRANT SELECT ON {{ this }} TO looker"
            - "GRANT SELECT ON {{ this }} TO dsanalyst"
        snowplow_sessions:
          materialized: incremental
          sql_where: "ending_datetime > (select max(ending_datetime) from {{ this }}"
          post-hook:
            - "CREATE INDEX sps_landing ON {{ this }}(landing_datetime, landing_page)"
            - "GRANT SELECT ON {{ this }} TO looker"
            - "GRANT SELECT ON {{ this }} TO dsanalyst"
        phoenix_events_combined:
          materialized: incremental
          sql_where: "event_datetime > (select max(event_datetime) from {{ this }}"
          post-hook:
            - "CREATE UNIQUE INDEX pec_unique ON {{ this }}(event_datetime, event_name, event_id)"
            - "CREATE INDEX pec_session_id ON {{ this }} (session_id)"
            - "GRANT SELECT ON {{ this }} TO looker"
            - "GRANT SELECT ON {{ this }} TO dsanalyst"
        phoenix_sessions_combined:
          materialized: incremental
          sql_where: "ending_datetime > (select max(ending_datetime) from {{ this }}"
          post-hook:
            - "CREATE INDEX psc_landing ON {{ this }}(landing_datetime, landing_page)"
            - "GRANT SELECT ON {{ this }} TO looker"
            - "GRANT SELECT ON {{ this }} TO dsanalyst"

