{"nodes": {"model.ds_dbt.snowplow_sessions": {"name": "snowplow_sessions", "root_path": "/Users/mrich/projects/quasar/quasar/dbt", "resource_type": "model", "path": "phoenix_events/snowplow_sessions.sql", "original_file_path": "models/phoenix_events/snowplow_sessions.sql", "package_name": "ds_dbt", "raw_sql": "WITH sessions AS (\nSELECT\n    session_id,\n    min(device_id) AS device_id,\n    min(event_datetime) AS landing_datetime,\n    max(event_datetime) AS ending_datetime,\n    date_part(\n\t'seconds', max(event_datetime) - min(event_datetime)\n    ) AS session_duration_seconds,\n    count(DISTINCT CASE WHEN event_name = 'view' THEN \"path\" END) AS num_pages_viewed\nFROM {{ ref('snowplow_phoenix_events') }}\nGROUP BY session_id\n),\nentry_exit_pages AS (\nSELECT DISTINCT\n    session_id,\n    first_value(\"path\") OVER (PARTITION BY session_id ORDER BY event_datetime \n\tROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS landing_page,\n    first_value(event_id) OVER (PARTITION BY session_id ORDER BY event_datetime \n\tROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS event_id,\n    last_value(\"path\") OVER (PARTITION BY session_id ORDER BY event_datetime \n\tROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS exit_page\nFROM {{ ref('snowplow_phoenix_events') }}\n),\nsession_referrer AS (\nSELECT DISTINCT\n    session_id,\n    first_value(referrer_host) OVER (PARTITION BY session_id ORDER BY event_datetime \n\tROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS session_referrer_host,\n    first_value(page_utm_source) OVER (PARTITION BY session_id ORDER BY event_datetime \n\tROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS session_utm_source,\n    first_value(page_utm_campaign) OVER (PARTITION BY session_id ORDER BY event_datetime \n\tROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS session_utm_campaign \nFROM {{ ref('snowplow_phoenix_events') }}\n),\ntime_between_sessions AS (\nSELECT DISTINCT\n    device_id,\n    session_id,\n    LAG(ending_datetime) OVER (PARTITION BY device_id ORDER BY landing_datetime\n\tROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING\n    ) AS prev_session_endtime\nFROM sessions\n)\nSELECT\ns.session_id,\np.event_id,\ns.device_id,\ns.landing_datetime,\ns.ending_datetime,\nr.session_referrer_host,\nr.session_utm_source,\nr.session_utm_campaign,\ns.session_duration_seconds,\ns.num_pages_viewed,\np.landing_page,\np.exit_page,\ndate_part('day', s.landing_datetime - t.prev_session_endtime) AS days_since_last_session\nFROM sessions s\nLEFT JOIN entry_exit_pages p\nON p.session_id = s.session_id\nLEFT JOIN session_referrer r\nON r.session_id = s.session_id\nLEFT JOIN time_between_sessions t\nON t.session_id = s.session_id", "refs": [["snowplow_phoenix_events"], ["snowplow_phoenix_events"], ["snowplow_phoenix_events"]], "sources": [], "depends_on": {"nodes": ["model.ds_dbt.snowplow_phoenix_events", "model.ds_dbt.snowplow_phoenix_events", "model.ds_dbt.snowplow_phoenix_events"], "macros": []}, "unique_id": "model.ds_dbt.snowplow_sessions", "empty": false, "fqn": ["ds_dbt", "phoenix_events", "snowplow_sessions"], "tags": [], "config": {"enabled": true, "materialized": "table", "tags": [], "pre-hook": [], "post-hook": [{"sql": "CREATE INDEX IF NOT EXISTS sps_landing ON {{ this }}(landing_datetime, landing_page)", "transaction": true, "index": 0}, {"sql": "GRANT SELECT ON {{ this }} TO looker", "transaction": true, "index": 1}, {"sql": "GRANT SELECT ON {{ this }} TO dsanalyst", "transaction": true, "index": 2}], "quoting": {}, "persist_docs": {}, "vars": {}, "column_types": {}}, "schema": "public", "database": "quasar_prod_warehouse", "alias": "snowplow_sessions", "columns": {"session_id": {"name": "session_id", "description": "Unique identifier of the user's session"}, "event_id": {"name": "event_id", "description": "This is a unique identifier for each event"}, "device_id": {"name": "device_id", "description": "ID of the device used"}, "landing_datetime": {"name": "landing_datetime", "description": "When the session started in UTC (eg. 2018-01-01 12:00:00)"}, "ending_datetime": {"name": "ending_datetime", "description": "When the session ended in UTC (eg. 2018-01-01 12:00:00)"}, "session_duration_seconds": {"name": "session_duration_seconds", "description": "Session duration in seconds"}, "num_pages_views": {"name": "num_pages_views", "description": "Number of pages viewed in session"}, "landing_page": {"name": "landing_page", "description": "First page the user viewed in the session (eg. /us/facts/11-facts-about-bp-oil-spill)"}, "exit_page": {"name": "exit_page", "description": "\"Which page the user ended or exited their session from (eg. /us/campaigns/green-your-getaway)\""}, "days_since_last_session": {"name": "days_since_last_session", "description": "\"Days since their last session.\""}}, "description": "Table containing user session data derived from snowplow_phoenix_events", "patch_path": "models/phoenix_events/schema.yml", "docrefs": [{"documentation_package": "", "documentation_name": "session_id", "column_name": "session_id"}, {"documentation_package": "", "documentation_name": "event_id", "column_name": "event_id"}, {"documentation_package": "", "documentation_name": "device_id", "column_name": "device_id"}, {"documentation_package": "", "documentation_name": "landing_datetime", "column_name": "landing_datetime"}, {"documentation_package": "", "documentation_name": "ending_datetime", "column_name": "ending_datetime"}, {"documentation_package": "", "documentation_name": "session_duration_seconds", "column_name": "session_duration_seconds"}, {"documentation_package": "", "documentation_name": "num_pages_views", "column_name": "num_pages_views"}, {"documentation_package": "", "documentation_name": "landing_page", "column_name": "landing_page"}, {"documentation_package": "", "documentation_name": "exit_page", "column_name": "exit_page"}, {"documentation_package": "", "documentation_name": "days_since_last_session", "column_name": "days_since_last_session"}]}, "model.ds_dbt.snowplow_base_event": {"name": "snowplow_base_event", "root_path": "/Users/mrich/projects/quasar/quasar/dbt", "resource_type": "model", "path": "phoenix_events/snowplow_base_event.sql", "original_file_path": "models/phoenix_events/snowplow_base_event.sql", "package_name": "ds_dbt", "raw_sql": "SELECT \n    event_id AS event_id,\n    app_id AS event_source,\n    collector_tstamp AS event_datetime,\n    se_property AS event_name,\n    \"event\" AS event_type,\n    page_urlhost AS host,\n    page_urlpath AS \"path\",\n    page_urlquery AS query_parameters,\n    se_category,\n    se_action,\n    se_label,\n    domain_sessionid AS session_id,\n    domain_sessionidx AS session_counter,\n    dvce_type AS browser_size,\n    user_id AS northstar_id,\n    domain_userid AS device_id,\n    refr_urlhost AS referrer_host,\n    refr_urlpath AS referrer_path,\n    refr_source AS referrer_source\n  FROM {{ env_var('FT_SNOWPLOW') }}.\"event\"\n  WHERE event_id NOT IN\n  (SELECT event_id\n   FROM {{ env_var('FT_SNOWPLOW') }}.ua_parser_context u\n   WHERE u.useragent_family SIMILAR TO\n   '%(bot|crawl|slurp|spider|archiv|spinn|sniff|seo|audit|survey|pingdom|worm|capture|(browser|screen)shots|analyz|index|thumb|check|facebook|YandexBot|Twitterbot|a_archiver|facebookexternalhit|Bingbot|Googlebot|Baiduspider|360(Spider|User-agent)|Ghost)%')", "refs": [], "sources": [], "depends_on": {"nodes": [], "macros": []}, "unique_id": "model.ds_dbt.snowplow_base_event", "empty": false, "fqn": ["ds_dbt", "phoenix_events", "snowplow_base_event"], "tags": [], "config": {"enabled": true, "materialized": "table", "tags": [], "pre-hook": [], "post-hook": [{"sql": "CREATE INDEX IF NOT EXISTS event_index ON {{ this }}(event_id)", "transaction": true, "index": 0}, {"sql": "GRANT SELECT ON {{ this }} TO dsanalyst", "transaction": true, "index": 1}], "quoting": {}, "persist_docs": {}, "vars": {}, "column_types": {}, "alias": "snowplow_base_event"}, "schema": "public", "database": "quasar_prod_warehouse", "alias": "snowplow_base_event", "columns": {"event_id": {"name": "event_id", "description": "This is a unique identifier for each event"}, "event_source": {"name": "event_source", "description": "Application source for event (eg. Phoenix, Northstar)"}, "event_datetime": {"name": "event_datetime", "description": "When the event occurred in UTC (eg. 2018-01-01 12:00:00)"}, "event_name": {"name": "event_name", "description": "Name of the event (eg. northstar_submitted_register, https://docs.google.com/spreadsheets/d/1lm-fGrIm85nUTxSojqyCt_Ehmm1zEbViFhKpxcJiz1A/edit#gid=406441516)"}, "event_type": {"name": "event_type", "description": "Type of event (pv = 'Page View', se = 'Structured Event')"}, "host": {"name": "host", "description": "URL host where event occurred (eg. www.dosomething.org or identity.dosomething.org)"}, "path": {"name": "path", "description": "URL path event occurred at (eg. /login or /us/campaigns/huddle-for-heroes)"}, "query_parameters": {"name": "query_parameters", "description": "Optional query parameters for the request (eg. query=huddle)"}, "se_category": {"name": "se_category", "description": "Category of event (eg. focused_field, authentication) - Custom structured event"}, "se_action": {"name": "se_action", "description": "Action performed / event name (eg. form_submitted, action_failed) - Custom structured event"}, "se_label": {"name": "se_label", "description": "The object of the action (eg. first_name, register, voter_reg_status) - Custom structured event"}, "session_id": {"name": "session_id", "description": "Unique identifier of the user's session"}, "session_counter": {"name": "session_counter", "description": "How many sessions a user has started"}, "browser_size": {"name": "browser_size", "description": "Which type of browser a user is using (eg. Mobile, Desktop)"}, "northstar_id": {"name": "northstar_id", "description": "The Northstar ID of the user who generated the event"}, "device_id": {"name": "device_id", "description": "ID of the device used"}, "referrer_host": {"name": "referrer_host", "description": "URL host of the referring site (eg. google.com)"}, "referrer_path": {"name": "referrer_path", "description": "URL path from referring site (eg. /10-stats-on-teen-drug-and-alcohol-use/)"}, "referrer_source": {"name": "referrer_source", "description": "Referrer source name (eg. Google, Facebook)"}}, "description": "Table that extracts and cleans up relevant columns from raw DS web clickstream data.", "patch_path": "models/phoenix_events/schema.yml", "docrefs": [{"documentation_package": "", "documentation_name": "event_id", "column_name": "event_id"}, {"documentation_package": "", "documentation_name": "event_source", "column_name": "event_source"}, {"documentation_package": "", "documentation_name": "event_datetime", "column_name": "event_datetime"}, {"documentation_package": "", "documentation_name": "event_name", "column_name": "event_name"}, {"documentation_package": "", "documentation_name": "event_type", "column_name": "event_type"}, {"documentation_package": "", "documentation_name": "host", "column_name": "host"}, {"documentation_package": "", "documentation_name": "path", "column_name": "path"}, {"documentation_package": "", "documentation_name": "query_parameters", "column_name": "query_parameters"}, {"documentation_package": "", "documentation_name": "se_category", "column_name": "se_category"}, {"documentation_package": "", "documentation_name": "se_action", "column_name": "se_action"}, {"documentation_package": "", "documentation_name": "se_label", "column_name": "se_label"}, {"documentation_package": "", "documentation_name": "session_id", "column_name": "session_id"}, {"documentation_package": "", "documentation_name": "session_counter", "column_name": "session_counter"}, {"documentation_package": "", "documentation_name": "browser_size", "column_name": "browser_size"}, {"documentation_package": "", "documentation_name": "northstar_id", "column_name": "northstar_id"}, {"documentation_package": "", "documentation_name": "device_id", "column_name": "device_id"}, {"documentation_package": "", "documentation_name": "referrer_host", "column_name": "referrer_host"}, {"documentation_package": "", "documentation_name": "referrer_path", "column_name": "referrer_path"}, {"documentation_package": "", "documentation_name": "referrer_source", "column_name": "referrer_source"}]}, "model.ds_dbt.phoenix_sessions_combined": {"name": "phoenix_sessions_combined", "root_path": "/Users/mrich/projects/quasar/quasar/dbt", "resource_type": "model", "path": "phoenix_events/phoenix_sessions_combined.sql", "original_file_path": "models/phoenix_events/phoenix_sessions_combined.sql", "package_name": "ds_dbt", "raw_sql": "SELECT \n    p.session_id,\n    p.event_id,\n    p.device_id,\n    p.landing_datetime,\n    p.end_datetime as ending_datetime,\n    p.referrer_host as session_referrer_host,\n    p.utm_source as session_utm_source,\n    p.utm_campaign as session_utm_campaign,\n    EXTRACT(EPOCH FROM (end_datetime - landing_datetime)) AS session_duration_seconds,\n    NULL as num_pages_viewed,\n    p.landing_page,\n    NULL as exit_page,\n    NULL as days_since_last_session\nFROM public.puck_phoenix_sessions p\nUNION ALL\nSELECT\n    s.session_id,\n    s.event_id,\n    s.device_id,\n    s.landing_datetime,\n    s.ending_datetime,\n    s.session_referrer_host,\n    s.session_utm_source,\n    s.session_utm_campaign,\n    s.session_duration_seconds,\n    s.num_pages_viewed,\n    s.landing_page,\n    s.exit_page,\n    s.days_since_last_session\nFROM {{ ref('snowplow_sessions') }} s", "refs": [["snowplow_sessions"]], "sources": [], "depends_on": {"nodes": ["model.ds_dbt.snowplow_sessions"], "macros": []}, "unique_id": "model.ds_dbt.phoenix_sessions_combined", "empty": false, "fqn": ["ds_dbt", "phoenix_events", "phoenix_sessions_combined"], "tags": [], "config": {"enabled": true, "materialized": "table", "tags": [], "pre-hook": [], "post-hook": [{"sql": "CREATE INDEX IF NOT EXISTS psc_landing ON {{ this }}(landing_datetime, landing_page)", "transaction": true, "index": 0}, {"sql": "GRANT SELECT ON {{ this }} TO looker", "transaction": true, "index": 1}, {"sql": "GRANT SELECT ON {{ this }} TO dsanalyst", "transaction": true, "index": 2}], "quoting": {}, "persist_docs": {}, "vars": {}, "column_types": {}, "alias": "phoenix_sessions_combined"}, "schema": "public", "database": "quasar_prod_warehouse", "alias": "phoenix_sessions_combined", "columns": {"session_id": {"name": "session_id", "description": "Unique identifier of the user's session"}, "event_id": {"name": "event_id", "description": "This is a unique identifier for each event"}, "device_id": {"name": "device_id", "description": "ID of the device used"}, "landing_datetime": {"name": "landing_datetime", "description": "When the session started in UTC (eg. 2018-01-01 12:00:00)"}, "ending_datetime": {"name": "ending_datetime", "description": "When the session ended in UTC (eg. 2018-01-01 12:00:00)"}, "session_duration_seconds": {"name": "session_duration_seconds", "description": "Session duration in seconds"}, "num_pages_views": {"name": "num_pages_views", "description": "Number of pages viewed in session"}, "landing_page": {"name": "landing_page", "description": "First page the user viewed in the session (eg. /us/facts/11-facts-about-bp-oil-spill)"}, "exit_page": {"name": "exit_page", "description": "\"Which page the user ended or exited their session from (eg. /us/campaigns/green-your-getaway)\""}, "days_since_last_session": {"name": "days_since_last_session", "description": "\"Days since their last session.\""}}, "description": "Table combining Snowplow based web session data with legacy Puck data based on 7/12/2019 cutover date", "patch_path": "models/phoenix_events/schema.yml", "docrefs": [{"documentation_package": "", "documentation_name": "session_id", "column_name": "session_id"}, {"documentation_package": "", "documentation_name": "event_id", "column_name": "event_id"}, {"documentation_package": "", "documentation_name": "device_id", "column_name": "device_id"}, {"documentation_package": "", "documentation_name": "landing_datetime", "column_name": "landing_datetime"}, {"documentation_package": "", "documentation_name": "ending_datetime", "column_name": "ending_datetime"}, {"documentation_package": "", "documentation_name": "session_duration_seconds", "column_name": "session_duration_seconds"}, {"documentation_package": "", "documentation_name": "num_pages_views", "column_name": "num_pages_views"}, {"documentation_package": "", "documentation_name": "landing_page", "column_name": "landing_page"}, {"documentation_package": "", "documentation_name": "exit_page", "column_name": "exit_page"}, {"documentation_package": "", "documentation_name": "days_since_last_session", "column_name": "days_since_last_session"}]}, "model.ds_dbt.snowplow_phoenix_events": {"name": "snowplow_phoenix_events", "root_path": "/Users/mrich/projects/quasar/quasar/dbt", "resource_type": "model", "path": "phoenix_events/snowplow_phoenix_events.sql", "original_file_path": "models/phoenix_events/snowplow_phoenix_events.sql", "package_name": "ds_dbt", "raw_sql": "SELECT\n    e.event_id,\n    e.event_datetime,\n    CASE WHEN e.event_name IS NULL\n    AND e.event_type = 'pv'\n    THEN 'view' ELSE e.event_name END AS event_name,\n    e.event_source,\n    e.\"path\",\n    e.\"host\",\n    e.query_parameters,\n    e.clicked_link_url,\n    e.utm_source AS page_utm_source,\n    e.utm_medium AS page_utm_medium,\n    e.utm_campaign AS page_utm_campaign,\n    e.referrer_host,\n    e.referrer_path,\n    e.referrer_source,\n    e.campaign_id,\n    i.campaign_name,\n    e.modal_type,\n    e.search_query,\n    e.context_source,\n    e.session_id,\n    e.browser_size,\n    e.northstar_id,\n    e.device_id\nFROM {{ ref('snowplow_raw_events') }} e\nLEFT JOIN {{ ref('campaign_info') }} i ON i.campaign_id = e.campaign_id::bigint", "refs": [["snowplow_raw_events"], ["campaign_info"]], "sources": [], "depends_on": {"nodes": ["model.ds_dbt.snowplow_raw_events", "model.ds_dbt.campaign_info"], "macros": []}, "unique_id": "model.ds_dbt.snowplow_phoenix_events", "empty": false, "fqn": ["ds_dbt", "phoenix_events", "snowplow_phoenix_events"], "tags": [], "config": {"enabled": true, "materialized": "table", "tags": [], "pre-hook": [], "post-hook": [{"sql": "CREATE UNIQUE INDEX IF NOT EXISTS spe_unique ON {{ this }}(event_datetime, event_name, event_id)", "transaction": true, "index": 0}, {"sql": "CREATE INDEX IF NOT EXISTS spe_session_id ON {{ this }} (session_id)", "transaction": true, "index": 1}, {"sql": "GRANT SELECT ON {{ this }} TO looker", "transaction": true, "index": 2}, {"sql": "GRANT SELECT ON {{ this }} TO dsanalyst", "transaction": true, "index": 3}], "quoting": {}, "persist_docs": {}, "vars": {}, "column_types": {}, "alias": "snowplow_phoenix_events"}, "schema": "public", "database": "quasar_prod_warehouse", "alias": "snowplow_phoenix_events", "columns": {"event_id": {"name": "event_id", "description": "This is a unique identifier for each event"}, "event_datetime": {"name": "event_datetime", "description": "When the event occurred in UTC (eg. 2018-01-01 12:00:00)"}, "event_name": {"name": "event_name", "description": "Name of the event (eg. northstar_submitted_register, https://docs.google.com/spreadsheets/d/1lm-fGrIm85nUTxSojqyCt_Ehmm1zEbViFhKpxcJiz1A/edit#gid=406441516)"}, "event_source": {"name": "event_source", "description": "Application source for event (eg. Phoenix, Northstar)"}, "path": {"name": "path", "description": "URL path"}, "host": {"name": "host", "description": "URL domain"}, "query_parameters": {"name": "query_parameters", "description": "Optional query parameters for the request (eg. query=huddle)"}, "clicked_link_url": {"name": "clicked_link_url", "description": "URL of campaign (eg. https://dosome.click/nyn5m7)"}, "page_utm_source": {"name": "page_utm_source", "description": "Tracks where the traffic is coming from. (eg. scholarship_listing, Facebook)"}, "page_utm_medium": {"name": "page_utm_medium", "description": "How the traffic got to the platform (eg. referral, CPC)"}, "page_utm_campaign": {"name": "page_utm_campaign", "description": "Tracks which campaign the traffic was generated by. Shows up in Google Analytics as Campaign Name (eg. editorial_newsletter)"}, "referrer_host": {"name": "referrer_host", "description": "URL host of the referring site (eg. google.com)"}, "referrer_path": {"name": "referrer_path", "description": "URL path from referring site (eg. /10-stats-on-teen-drug-and-alcohol-use/)"}, "referrer_source": {"name": "referrer_source", "description": "Referrer source name (eg. Google, Facebook)"}, "campaign_id": {"name": "campaign_id", "description": "Internal campaign id from contentful"}, "campaign_name": {"name": "campaign_name", "description": "Name of campaign"}, "modal_type": {"name": "modal_type", "description": "NULL or SURVEY_MODAL"}, "session_id": {"name": "session_id", "description": "Unique identifier of the user's session"}, "browser_size": {"name": "browser_size", "description": "Which type of browser a user is using (eg. Mobile, Desktop)"}, "northstar_id": {"name": "northstar_id", "description": "The Northstar ID of the user who generated the event"}, "device_id": {"name": "device_id", "description": "ID of the device used"}}, "description": "Table transforming snowplow_raw_event into rich derived data table for all clickstream info", "patch_path": "models/phoenix_events/schema.yml", "docrefs": [{"documentation_package": "", "documentation_name": "event_id", "column_name": "event_id"}, {"documentation_package": "", "documentation_name": "event_datetime", "column_name": "event_datetime"}, {"documentation_package": "", "documentation_name": "event_name", "column_name": "event_name"}, {"documentation_package": "", "documentation_name": "event_source", "column_name": "event_source"}, {"documentation_package": "", "documentation_name": "query_parameters", "column_name": "query_parameters"}, {"documentation_package": "", "documentation_name": "url", "column_name": "clicked_link_url"}, {"documentation_package": "", "documentation_name": "utm_source", "column_name": "page_utm_source"}, {"documentation_package": "", "documentation_name": "utm_medium", "column_name": "page_utm_medium"}, {"documentation_package": "", "documentation_name": "utm_campaign", "column_name": "page_utm_campaign"}, {"documentation_package": "", "documentation_name": "referrer_host", "column_name": "referrer_host"}, {"documentation_package": "", "documentation_name": "referrer_path", "column_name": "referrer_path"}, {"documentation_package": "", "documentation_name": "referrer_source", "column_name": "referrer_source"}, {"documentation_package": "", "documentation_name": "modal_type", "column_name": "modal_type"}, {"documentation_package": "", "documentation_name": "session_id", "column_name": "session_id"}, {"documentation_package": "", "documentation_name": "browser_size", "column_name": "browser_size"}, {"documentation_package": "", "documentation_name": "northstar_id", "column_name": "northstar_id"}, {"documentation_package": "", "documentation_name": "device_id", "column_name": "device_id"}]}, "model.ds_dbt.snowplow_payload_event": {"name": "snowplow_payload_event", "root_path": "/Users/mrich/projects/quasar/quasar/dbt", "resource_type": "model", "path": "phoenix_events/snowplow_payload_event.sql", "original_file_path": "models/phoenix_events/snowplow_payload_event.sql", "package_name": "ds_dbt", "raw_sql": "SELECT\n    event_id,\n    payload::jsonb #>> '{utmSource}' AS utm_source,\n    payload::jsonb #>> '{utmMedium}' AS utm_medium,\n    payload::jsonb #>> '{utmCampaign}' AS utm_campaign,\n    payload::jsonb #>> '{url}' AS url,\n    payload::jsonb #>> '{campaignId}' AS campaign_id,\n    payload::jsonb #>> '{modalType}' AS modal_type,\n    payload::jsonb #>> '{searchQuery}' AS search_query,\n    payload::jsonb #>> '{contextSource}' AS context_source,\n    _fivetran_synced AS ft_timestamp\n  FROM {{ env_var('FT_SNOWPLOW') }}.snowplow_event", "refs": [], "sources": [], "depends_on": {"nodes": [], "macros": []}, "unique_id": "model.ds_dbt.snowplow_payload_event", "empty": false, "fqn": ["ds_dbt", "phoenix_events", "snowplow_payload_event"], "tags": [], "config": {"enabled": true, "materialized": "table", "tags": [], "pre-hook": [], "post-hook": [{"sql": "CREATE INDEX IF NOT EXISTS payload_event_id ON {{ this }}(event_id)", "transaction": true, "index": 0}, {"sql": "GRANT SELECT ON {{ this }} TO dsanalyst", "transaction": true, "index": 1}], "quoting": {}, "persist_docs": {}, "vars": {}, "column_types": {}, "alias": "snowplow_payload_event"}, "schema": "public", "database": "quasar_prod_warehouse", "alias": "snowplow_payload_event", "columns": {"event_id": {"name": "event_id", "description": "This is a unique identifier for each event"}, "utm_source": {"name": "utm_source", "description": "Tracks where the traffic is coming from. (eg. scholarship_listing, Facebook)"}, "utm_medium": {"name": "utm_medium", "description": "How the traffic got to the platform (eg. referral, CPC)"}, "utm_campaign": {"name": "utm_campaign", "description": "Tracks which campaign the traffic was generated by. Shows up in Google Analytics as Campaign Name (eg. editorial_newsletter)"}, "url": {"name": "url", "description": "URL of campaign (eg. https://dosome.click/nyn5m7)"}, "campaign_id": {"name": "campaign_id", "description": "Internal campaign id from contentful"}, "modal_type": {"name": "modal_type", "description": "NULL or SURVEY_MODAL"}, "ft_timestamp": {"name": "ft_timestamp", "description": "When the event occurred in UTC (eg. 2018-01-01 12:00:00)"}}, "description": "Table containing extra data from events in snowplow_base_event table", "patch_path": "models/phoenix_events/schema.yml", "docrefs": [{"documentation_package": "", "documentation_name": "event_id", "column_name": "event_id"}, {"documentation_package": "", "documentation_name": "utm_source", "column_name": "utm_source"}, {"documentation_package": "", "documentation_name": "utm_medium", "column_name": "utm_medium"}, {"documentation_package": "", "documentation_name": "utm_campaign", "column_name": "utm_campaign"}, {"documentation_package": "", "documentation_name": "url", "column_name": "url"}, {"documentation_package": "", "documentation_name": "modal_type", "column_name": "modal_type"}, {"documentation_package": "", "documentation_name": "event_datetime", "column_name": "ft_timestamp"}]}, "model.ds_dbt.phoenix_events_combined": {"name": "phoenix_events_combined", "root_path": "/Users/mrich/projects/quasar/quasar/dbt", "resource_type": "model", "path": "phoenix_events/phoenix_events_combined.sql", "original_file_path": "models/phoenix_events/phoenix_events_combined.sql", "package_name": "ds_dbt", "raw_sql": "SELECT\n    p.event_id,\n    p.event_datetime,\n    p.event_name,\n    p.event_source,\n    p.\"path\",\n    p.\"host\",\n    NULL AS query_parameters,\n    NULL AS clicked_link_url,\n    p.page_utm_source,\n    p.page_utm_medium,\n    p.page_utm_campaign,\n    p.referrer_host,\n    p.referrer_path,\n    p.referrer_source,\n    p.campaign_id,\n    p.campaign_name,\n    p.modal_type,\n    NULL AS search_query,\n    NULL AS context_source,\n    p.session_id,\n    p.browser_size,\n    p.northstar_id,\n    p.device_id\nFROM\n    public.puck_phoenix_events p\nUNION ALL\nSELECT\n    s.event_id,\n    s.event_datetime,\n    s.event_name,\n    s.event_source,\n    s.\"path\",\n    s.\"host\",\n    s.query_parameters,\n    s.clicked_link_url,\n    s.page_utm_source,\n    s.page_utm_medium,\n    s.page_utm_campaign,\n    s.referrer_host,\n    s.referrer_path,\n    s.referrer_source,\n    s.campaign_id,\n    s.campaign_name,\n    s.modal_type,\n    s.search_query,\n    s.context_source,\n    s.session_id,\n    s.browser_size,\n    s.northstar_id,\n    s.device_id\nFROM\n    {{ ref('snowplow_phoenix_events') }} s", "refs": [["snowplow_phoenix_events"]], "sources": [], "depends_on": {"nodes": ["model.ds_dbt.snowplow_phoenix_events"], "macros": []}, "unique_id": "model.ds_dbt.phoenix_events_combined", "empty": false, "fqn": ["ds_dbt", "phoenix_events", "phoenix_events_combined"], "tags": [], "config": {"enabled": true, "materialized": "table", "tags": [], "pre-hook": [], "post-hook": [{"sql": "CREATE UNIQUE INDEX IF NOT EXISTS pec_unique ON {{ this }}(event_datetime, event_name, event_id)", "transaction": true, "index": 0}, {"sql": "CREATE INDEX IF NOT EXISTS pec_session_id ON {{ this }} (session_id)", "transaction": true, "index": 1}, {"sql": "GRANT SELECT ON {{ this }} TO looker", "transaction": true, "index": 2}, {"sql": "GRANT SELECT ON {{ this }} TO dsanalyst", "transaction": true, "index": 3}], "quoting": {}, "persist_docs": {}, "vars": {}, "column_types": {}, "alias": "phoenix_events_combined"}, "schema": "public", "database": "quasar_prod_warehouse", "alias": "phoenix_events_combined", "columns": {"event_id": {"name": "event_id", "description": "This is a unique identifier for each event"}, "event_datetime": {"name": "event_datetime", "description": "When the event occurred in UTC (eg. 2018-01-01 12:00:00)"}, "event_name": {"name": "event_name", "description": "Name of the event (eg. northstar_submitted_register, https://docs.google.com/spreadsheets/d/1lm-fGrIm85nUTxSojqyCt_Ehmm1zEbViFhKpxcJiz1A/edit#gid=406441516)"}, "event_source": {"name": "event_source", "description": "Application source for event (eg. Phoenix, Northstar)"}, "path": {"name": "path", "description": "URL path event occurred at (eg. /login or /us/campaigns/huddle-for-heroes)"}, "host": {"name": "host", "description": "URL host where event occurred (eg. www.dosomething.org or identity.dosomething.org)"}, "query_parameters": {"name": "query_parameters", "description": "Optional query parameters for the request (eg. query=huddle)"}, "clicked_link_url": {"name": "clicked_link_url", "description": "URL of campaign (eg. https://dosome.click/nyn5m7)"}, "page_utm_source": {"name": "page_utm_source", "description": "Tracks where the traffic is coming from. (eg. scholarship_listing, Facebook)"}, "page_utm_medium": {"name": "page_utm_medium", "description": "How the traffic got to the platform (eg. referral, CPC)"}, "page_utm_campaign": {"name": "page_utm_campaign", "description": "Tracks which campaign the traffic was generated by. Shows up in Google Analytics as Campaign Name (eg. editorial_newsletter)"}, "referrer_host": {"name": "referrer_host", "description": "URL host of the referring site (eg. google.com)"}, "referrer_path": {"name": "referrer_path", "description": "URL path from referring site (eg. /10-stats-on-teen-drug-and-alcohol-use/)"}, "referrer_source": {"name": "referrer_source", "description": "Referrer source name (eg. Google, Facebook)"}, "campaign_id": {"name": "campaign_id", "description": "Internal campaign id from contentful"}, "campaign_name": {"name": "campaign_name", "description": "Name of campaign"}, "modal_type": {"name": "modal_type", "description": "NULL or SURVEY_MODAL"}, "session_id": {"name": "session_id", "description": "Unique identifier of the user's session"}, "browser_size": {"name": "browser_size", "description": "Which type of browser a user is using (eg. Mobile, Desktop)"}, "northstar_id": {"name": "northstar_id", "description": "The Northstar ID of the user who generated the event"}, "device_id": {"name": "device_id", "description": "ID of the device used"}}, "description": "Table combining Snowplow based web event data with legacy Puck data based on 7/12/2019 cutover date", "patch_path": "models/phoenix_events/schema.yml", "docrefs": [{"documentation_package": "", "documentation_name": "event_id", "column_name": "event_id"}, {"documentation_package": "", "documentation_name": "event_datetime", "column_name": "event_datetime"}, {"documentation_package": "", "documentation_name": "event_name", "column_name": "event_name"}, {"documentation_package": "", "documentation_name": "event_source", "column_name": "event_source"}, {"documentation_package": "", "documentation_name": "path", "column_name": "path"}, {"documentation_package": "", "documentation_name": "host", "column_name": "host"}, {"documentation_package": "", "documentation_name": "query_parameters", "column_name": "query_parameters"}, {"documentation_package": "", "documentation_name": "url", "column_name": "clicked_link_url"}, {"documentation_package": "", "documentation_name": "utm_source", "column_name": "page_utm_source"}, {"documentation_package": "", "documentation_name": "utm_medium", "column_name": "page_utm_medium"}, {"documentation_package": "", "documentation_name": "utm_campaign", "column_name": "page_utm_campaign"}, {"documentation_package": "", "documentation_name": "referrer_host", "column_name": "referrer_host"}, {"documentation_package": "", "documentation_name": "referrer_path", "column_name": "referrer_path"}, {"documentation_package": "", "documentation_name": "referrer_source", "column_name": "referrer_source"}, {"documentation_package": "", "documentation_name": "modal_type", "column_name": "modal_type"}, {"documentation_package": "", "documentation_name": "session_id", "column_name": "session_id"}, {"documentation_package": "", "documentation_name": "browser_size", "column_name": "browser_size"}, {"documentation_package": "", "documentation_name": "northstar_id", "column_name": "northstar_id"}, {"documentation_package": "", "documentation_name": "device_id", "column_name": "device_id"}]}, "model.ds_dbt.snowplow_raw_events": {"name": "snowplow_raw_events", "root_path": "/Users/mrich/projects/quasar/quasar/dbt", "resource_type": "model", "path": "phoenix_events/snowplow_raw_events.sql", "original_file_path": "models/phoenix_events/snowplow_raw_events.sql", "package_name": "ds_dbt", "raw_sql": "SELECT\n\tb.event_id,\n\tb.event_source,\n\tb.event_datetime,\n\tb.event_name,\n\tb.event_type,\n\tb.\"host\",\n\tb.\"path\",\n    b.query_parameters,\n\tb.se_category,\n\tb.se_action,\n\tb.se_label,\n\tb.session_id,\n\tb.session_counter,\n\tb.browser_size,\n\tb.northstar_id,\n\tb.device_id,\n\tb.referrer_host,\n\tb.referrer_path,\n\tb.referrer_source,\n\tp.utm_source,\n\tp.utm_medium,\n\tp.utm_campaign,\n\tp.url AS clicked_link_url,\n\tp.campaign_id,\n\tp.modal_type,\n\tp.search_query,\n\tp.context_source\n  FROM {{ ref('snowplow_base_event') }} b\n  LEFT JOIN {{ ref('snowplow_payload_event') }} p \n  ON b.event_id = p.event_id", "refs": [["snowplow_base_event"], ["snowplow_payload_event"]], "sources": [], "depends_on": {"nodes": ["model.ds_dbt.snowplow_base_event", "model.ds_dbt.snowplow_payload_event"], "macros": []}, "unique_id": "model.ds_dbt.snowplow_raw_events", "empty": false, "fqn": ["ds_dbt", "phoenix_events", "snowplow_raw_events"], "tags": [], "config": {"enabled": true, "materialized": "table", "tags": [], "pre-hook": [], "post-hook": [{"sql": "CREATE INDEX IF NOT EXISTS raw_event_id ON {{ this }}(event_id)", "transaction": true, "index": 0}, {"sql": "GRANT SELECT ON {{ this }} TO dsanalyst", "transaction": true, "index": 1}], "quoting": {}, "persist_docs": {}, "vars": {}, "column_types": {}, "alias": "snowplow_raw_events"}, "schema": "public", "database": "quasar_prod_warehouse", "alias": "snowplow_raw_events", "columns": {"event_id": {"name": "event_id", "description": "This is a unique identifier for each event"}, "event_source": {"name": "event_source", "description": "Application source for event (eg. Phoenix, Northstar)"}, "event_datetime": {"name": "event_datetime", "description": "When the event occurred in UTC (eg. 2018-01-01 12:00:00)"}, "event_name": {"name": "event_name", "description": "Name of the event (eg. northstar_submitted_register, https://docs.google.com/spreadsheets/d/1lm-fGrIm85nUTxSojqyCt_Ehmm1zEbViFhKpxcJiz1A/edit#gid=406441516)"}, "event_type": {"name": "event_type", "description": "Type of event (pv = 'Page View', se = 'Structured Event')"}, "host": {"name": "host", "description": "URL host where event occurred (eg. www.dosomething.org or identity.dosomething.org)"}, "path": {"name": "path", "description": "URL path event occurred at (eg. /login or /us/campaigns/huddle-for-heroes)"}, "query_parameters": {"name": "query_parameters", "description": "Optional query parameters for the request (eg. query=huddle)"}, "se_category": {"name": "se_category", "description": "Category of event (eg. focused_field, authentication) - Custom structured event"}, "se_action": {"name": "se_action", "description": "Action performed / event name (eg. form_submitted, action_failed) - Custom structured event"}, "se_label": {"name": "se_label", "description": "The object of the action (eg. first_name, register, voter_reg_status) - Custom structured event"}, "session_id": {"name": "session_id", "description": "Unique identifier of the user's session"}, "session_counter": {"name": "session_counter", "description": "How many sessions a user has started"}, "browser_size": {"name": "browser_size", "description": "Which type of browser a user is using (eg. Mobile, Desktop)"}, "northstar_id": {"name": "northstar_id", "description": "The Northstar ID of the user who generated the event"}, "device_id": {"name": "device_id", "description": "ID of the device used"}, "referrer_host": {"name": "referrer_host", "description": "URL host of the referring site (eg. google.com)"}, "referrer_path": {"name": "referrer_path", "description": "URL path from referring site (eg. /10-stats-on-teen-drug-and-alcohol-use/)"}, "referrer_source": {"name": "referrer_source", "description": "Referrer source name (eg. Google, Facebook)"}, "utm_source": {"name": "utm_source", "description": "Tracks where the traffic is coming from. (eg. scholarship_listing, Facebook)"}, "utm_medium": {"name": "utm_medium", "description": "How the traffic got to the platform (eg. referral, CPC)"}, "utm_campaign": {"name": "utm_campaign", "description": "Tracks which campaign the traffic was generated by. Shows up in Google Analytics as Campaign Name (eg. editorial_newsletter)"}, "clicked_link_url": {"name": "clicked_link_url", "description": "URL of campaign (eg. https://dosome.click/nyn5m7)"}, "campaign_id": {"name": "campaign_id", "description": "Internal campaign id from contentful"}, "modal_type": {"name": "modal_type", "description": "NULL or SURVEY_MODAL"}}, "description": "Table combining snowplow_base_event and snowplow_paylod_event into rich raw data source for all clickstream info", "patch_path": "models/phoenix_events/schema.yml", "docrefs": [{"documentation_package": "", "documentation_name": "event_id", "column_name": "event_id"}, {"documentation_package": "", "documentation_name": "event_source", "column_name": "event_source"}, {"documentation_package": "", "documentation_name": "event_datetime", "column_name": "event_datetime"}, {"documentation_package": "", "documentation_name": "event_name", "column_name": "event_name"}, {"documentation_package": "", "documentation_name": "event_type", "column_name": "event_type"}, {"documentation_package": "", "documentation_name": "host", "column_name": "host"}, {"documentation_package": "", "documentation_name": "path", "column_name": "path"}, {"documentation_package": "", "documentation_name": "query_parameters", "column_name": "query_parameters"}, {"documentation_package": "", "documentation_name": "se_category", "column_name": "se_category"}, {"documentation_package": "", "documentation_name": "se_action", "column_name": "se_action"}, {"documentation_package": "", "documentation_name": "se_label", "column_name": "se_label"}, {"documentation_package": "", "documentation_name": "session_id", "column_name": "session_id"}, {"documentation_package": "", "documentation_name": "session_counter", "column_name": "session_counter"}, {"documentation_package": "", "documentation_name": "browser_size", "column_name": "browser_size"}, {"documentation_package": "", "documentation_name": "northstar_id", "column_name": "northstar_id"}, {"documentation_package": "", "documentation_name": "device_id", "column_name": "device_id"}, {"documentation_package": "", "documentation_name": "referrer_host", "column_name": "referrer_host"}, {"documentation_package": "", "documentation_name": "referrer_path", "column_name": "referrer_path"}, {"documentation_package": "", "documentation_name": "referrer_source", "column_name": "referrer_source"}, {"documentation_package": "", "documentation_name": "utm_source", "column_name": "utm_source"}, {"documentation_package": "", "documentation_name": "utm_medium", "column_name": "utm_medium"}, {"documentation_package": "", "documentation_name": "utm_campaign", "column_name": "utm_campaign"}, {"documentation_package": "", "documentation_name": "url", "column_name": "clicked_link_url"}, {"documentation_package": "", "documentation_name": "modal_type", "column_name": "modal_type"}]}, "model.ds_dbt.device_northstar": {"name": "device_northstar", "root_path": "/Users/mrich/projects/quasar/quasar/dbt", "resource_type": "model", "path": "user_journey/device_northstar.sql", "original_file_path": "models/user_journey/device_northstar.sql", "package_name": "ds_dbt", "raw_sql": "--All Device ID - Northstar ID Combinations\nWITH devices_all AS (\n    SELEct device_id, northstar_id\n    FROM {{ ref('phoenix_events_combined') }}\n    GROUP BY device_id, northstar_id\n)\n,\n--Devices purely Anonymous (Remove Devices ever associated with NSIDs)\n--If a DeviceID was both logged-in and logged-out, it will be removed from the anonymous DeviceID pool\ndevices_an AS (\n    SELECt device_id\n    FROM devices_all\n    WHERE northstar_id IS NULL\n    EXCEPT\n    SELECT device_id\n    FROM devices_all\n    WHERE northstar_id IS NOT NULL\n)\nSELECT device_id, northstar_id\nFROM devices_all\nUNION ALL\nSELECT device_id, NULL\nFROM devices_an", "refs": [["phoenix_events_combined"]], "sources": [], "depends_on": {"nodes": ["model.ds_dbt.phoenix_events_combined"], "macros": []}, "unique_id": "model.ds_dbt.device_northstar", "empty": false, "fqn": ["ds_dbt", "user_journey", "device_northstar"], "tags": [], "config": {"enabled": true, "materialized": "table", "tags": [], "pre-hook": [], "post-hook": [{"sql": "CREATE INDEX ON {{ this }}(device_id)", "transaction": true, "index": 0}, {"sql": "CREATE INDEX ON {{ this }}(northstar_id)", "transaction": true, "index": 1}, {"sql": "GRANT SELECT ON {{ this }} TO dsanalyst", "transaction": true, "index": 2}, {"sql": "GRANT SELECT ON {{ this }} TO looker", "transaction": true, "index": 3}], "quoting": {}, "persist_docs": {}, "vars": {}, "column_types": {}, "alias": "device_northstar"}, "schema": "public", "database": "quasar_prod_warehouse", "alias": "device_northstar", "columns": {}, "description": ""}, "model.ds_dbt.email_subscription_topics_raw": {"name": "email_subscription_topics_raw", "root_path": "/Users/mrich/projects/quasar/quasar/dbt", "resource_type": "model", "path": "news_subscription/email_subscription_topics_raw.sql", "original_file_path": "models/news_subscription/email_subscription_topics_raw.sql", "package_name": "ds_dbt", "raw_sql": "SELECT DISTINCT\n\t_id as northstar_id,\n\t(audit #>> '{email_subscription_topics,updated_at,date}')::timestamp AS newsletter_updated_at,\n\tjson_array_elements(u.email_subscription_topics)::TEXT AS newsletter_topic\nFROM {{ env_var(\"NORTHSTAR_FT_SCHEMA\") }}.northstar_users_snapshot u\nWHERE audit #>> '{email_subscription_topics,updated_at,date}' IS NOT NULL", "refs": [], "sources": [], "depends_on": {"nodes": [], "macros": []}, "unique_id": "model.ds_dbt.email_subscription_topics_raw", "empty": false, "fqn": ["ds_dbt", "news_subscription", "email_subscription_topics_raw"], "tags": [], "config": {"enabled": true, "materialized": "table", "tags": [], "pre-hook": [], "post-hook": [{"sql": "GRANT SELECT ON {{ this }} TO dsanalyst", "transaction": true, "index": 0}, {"sql": "GRANT SELECT ON {{ this }} TO looker", "transaction": true, "index": 1}], "quoting": {}, "persist_docs": {}, "vars": {}, "column_types": {}, "alias": "email_subscription_topics_raw"}, "schema": "public", "database": "quasar_prod_warehouse", "alias": "email_subscription_topics_raw", "columns": {"northstar_id": {"name": "northstar_id", "description": "The Northstar ID of the user who generated the event"}, "newsletter_updated_at": {"name": "newsletter_updated_at", "description": "When the item was updated in UTC (eg. 2018-01-01 12:00:00)"}, "newsletter_topic": {"name": "newsletter_topic", "description": "Newsletter topic. (e.g. community, lifestyle)"}}, "description": "Table containing data for all member events.", "patch_path": "models/news_subscription/schema.yml", "docrefs": [{"documentation_package": "", "documentation_name": "northstar_id", "column_name": "northstar_id"}, {"documentation_package": "", "documentation_name": "updated_at", "column_name": "newsletter_updated_at"}, {"documentation_package": "", "documentation_name": "newsletter_topic", "column_name": "newsletter_topic"}]}, "model.ds_dbt.user_newsletter_subscriptions": {"name": "user_newsletter_subscriptions", "root_path": "/Users/mrich/projects/quasar/quasar/dbt", "resource_type": "model", "path": "news_subscription/user_newsletter_subscriptions.sql", "original_file_path": "models/news_subscription/user_newsletter_subscriptions.sql", "package_name": "ds_dbt", "raw_sql": "SELECT DISTINCT\n\tf.northstar_id,\n\tf.newsletter_topic,\n\tf.topic_subscribed_at::timestamptz,\n\tCASE WHEN topic_unsubscribed_at IS NOT NULL\n\t    THEN topic_unsubscribed_at\n\t    WHEN newsletters_unsubscribed_at IS NOT NULL\n\t    THEN newsletters_unsubscribed_at\n\t    WHEN f.topic_updated_at = f.user_updated_at\n\t    THEN NULL\n\t    ELSE f.user_updated_at END AS topic_unsubscribed_at\nFROM (\n\tSELECT DISTINCT\n\t\ts.northstar_id AS northstar_id,\n\t\ts.newsletter_topic,\n\t\tfirst_value(s.newsletter_updated_at) OVER (PARTITION BY s.northstar_id, s.newsletter_topic ORDER BY s.newsletter_updated_at\n\t\t\t) AS topic_subscribed_at,\n\t\tlast_value(s.newsletter_updated_at) OVER (PARTITION BY s.northstar_id, s.newsletter_topic ORDER BY s.newsletter_updated_at\n\t\t\tROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS topic_updated_at,\t\n\t\tlast_value(s.newsletter_updated_at) OVER (PARTITION BY s.northstar_id ORDER BY s.newsletter_updated_at\n\t\t\tROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS user_updated_at,\n\t\tu.topic_unsubscribed_at,\n\t\tua.newsletters_unsubscribed_at\n\tFROM {{ ref('email_subscription_topics_raw') }} s\n\tLEFT JOIN (\n\t\tSELECT\n\t\t\t_id AS id,\n\t\t\tto_timestamp(audit #>> '{email_subscription_topics,updated_at,date}', 'YYYY-MM-DD HH24:MI:SS') AS topic_unsubscribed_at,\n\t\t\tNULL AS newsletter_topic\n\t\tFROM {{ env_var(\"NORTHSTAR_FT_SCHEMA\") }}.northstar_users_snapshot\n\t\tWHERE email_subscription_topics IS NULL AND audit #>> '{email_subscription_topics,updated_at,date}' IS NOT NULL\n\t) u ON u.id = s.northstar_id\n    LEFT JOIN (\n\t\tSELECT\n\t\t\tnorthstar_id,\n\t\t\temail_unsubscribed_at AS newsletters_unsubscribed_at,\n\t\t\tNULL AS newsletter_topic\n\t\tFROM public.user_activity\n\t) ua ON ua.northstar_id = s.northstar_id\n) f", "refs": [["email_subscription_topics_raw"]], "sources": [], "depends_on": {"nodes": ["model.ds_dbt.email_subscription_topics_raw"], "macros": []}, "unique_id": "model.ds_dbt.user_newsletter_subscriptions", "empty": false, "fqn": ["ds_dbt", "news_subscription", "user_newsletter_subscriptions"], "tags": [], "config": {"enabled": true, "materialized": "table", "tags": [], "pre-hook": [], "post-hook": [{"sql": "CREATE INDEX IF NOT EXISTS email_subscription_topics_i ON {{ this }}(topic_subscribed_at, northstar_id)", "transaction": true, "index": 0}, {"sql": "GRANT SELECT ON {{ this }} TO dsanalyst", "transaction": true, "index": 1}, {"sql": "GRANT SELECT ON {{ this }} TO looker", "transaction": true, "index": 2}], "quoting": {}, "persist_docs": {}, "vars": {}, "column_types": {}, "alias": "user_newsletter_subscriptions"}, "schema": "public", "database": "quasar_prod_warehouse", "alias": "user_newsletter_subscriptions", "columns": {"northstar_id": {"name": "northstar_id", "description": "The Northstar ID of the user who generated the event"}, "newsletter_topic": {"name": "newsletter_topic", "description": "Newsletter topic. (e.g. community, lifestyle)"}, "topic_subscribed_at": {"name": "topic_subscribed_at", "description": "Timestamp when user subscribed to the newsletter topic"}, "topic_unsubscribed_at": {"name": "topic_unsubscribed_at", "description": "Timestamp when user unsubscribed from the newsletter topic"}}, "description": "Table containing data for all member events.", "patch_path": "models/news_subscription/schema.yml", "docrefs": [{"documentation_package": "", "documentation_name": "northstar_id", "column_name": "northstar_id"}, {"documentation_package": "", "documentation_name": "newsletter_topic", "column_name": "newsletter_topic"}]}, "model.ds_dbt.member_event_log": {"name": "member_event_log", "root_path": "/Users/mrich/projects/quasar/quasar/dbt", "resource_type": "model", "path": "member_event_log/member_event_log.sql", "original_file_path": "models/member_event_log/member_event_log.sql", "package_name": "ds_dbt", "raw_sql": "SELECT\n    MD5(concat(a.northstar_id, a.\"timestamp\", a.action_id, a.action_serial_id)) AS event_id,\n    a.northstar_id AS northstar_id,\n    a.\"timestamp\" AS \"timestamp\",\n    a.\"action\" AS action_type,\n    a.action_id AS action_id,\n    a.\"source\" AS \"source\",\n    a.action_serial_id AS action_serial_id,\n    a.channel AS channel,\n    CASE \n    \tWHEN date_trunc('month', a.\"timestamp\") = date_trunc('month', u.created_at) \n    \tTHEN 'New' \n    \tELSE 'Returning' END\n    \tAS \"type\",\n    MIN(\"timestamp\") \n    \tOVER \n    \t(PARTITION BY a.northstar_id, date_trunc('month', a.\"timestamp\"))\n    \tAS first_action_month\nFROM ( \nSELECT\n    DISTINCT s.northstar_id AS northstar_id,\n    s.created_at AS \"timestamp\",\n    'signup' AS \"action\",\n    '1' AS action_id, \n    s.\"source\" AS \"source\",\n    s.id::varchar AS action_serial_id,\n(CASE WHEN s.\"source\" ILIKE '%sms%' THEN 'sms'\nWHEN s.\"source\" NOT LIKE '%sms%'AND s.\"source\" NOT LIKE '%email%' AND s.\"source\" NOT LIKE '%niche%' OR s.\"source\" IN ('rock-the-vote', 'turbovote') THEN 'web'\nWHEN s.\"source\" ILIKE '%email%' THEN 'email'\nWHEN s.\"source\" ILIKE '%niche%' THEN 'niche_coregistration'\nWHEN s.\"source\" NOT LIKE '%sms%'AND s.\"source\" NOT LIKE '%email%' AND s.\"source\" NOT LIKE '%niche%' AND s.\"source\" NOT IN ('rock-the-vote', 'turbovote') AND s.\"source\" IS NOT NULL THEN 'other' END) AS \"channel\"\nFROM {{ ref('signups') }} s\nWHERE s.\"source\" IS DISTINCT FROM 'importer-client'\nAND s.\"source\" IS DISTINCT FROM 'rock-the-vote'\nAND s.\"source\" IS DISTINCT FROM 'turbovote'\nUNION ALL\nSELECT\n    DISTINCT p.northstar_id AS northstar_id,\n    p.created_at AS \"timestamp\",\n    'post' AS \"action\",\n    '2' AS action_id,\n    p.\"source\" AS \"source\",\n    p.id::varchar AS action_serial_id,\n(CASE WHEN p.\"source\" ILIKE '%sms%' THEN 'sms'\nWHEN p.\"source\" ILIKE '%phoenix%' OR p.\"source\" IS NULL OR p.\"source\" ILIKE '%turbovote%' THEN 'web'\nWHEN p.\"source\" ILIKE '%app%' THEN 'mobile_app'\nWHEN p.\"source\" NOT LIKE '%phoenix%' AND p.\"source\" NOT LIKE '%sms%' AND p.\"source\" IS NOT NULL AND p.\"source\" NOT LIKE '%app%' AND p.\"source\" NOT LIKE '%turbovote%' THEN 'other' END) AS \"channel\"\nFROM {{ ref('posts') }} p\nWHERE p.status IN ('accepted', 'confirmed', 'register-OVR', 'register-form', 'pending')\nUNION ALL\nSELECT DISTINCT \n    u_access.id AS northstar_id,\n    u_access.last_accessed_at AS \"timestamp\",\n    'site_access' AS \"action\",\n    '3' AS action_id,\n    NULL AS \"source\",\n    '0' AS action_serial_id,\n    'web' AS channel\nFROM {{ ref('northstar_users_deduped') }} u_access\nWHERE u_access.last_accessed_at IS NOT NULL\nAND u_access.\"source\" IS DISTINCT FROM 'runscope'\nAND u_access.\"source\" IS DISTINCT FROM 'runscope-client'\nAND u_access.email IS DISTINCT FROM 'runscope-scheduled-test@dosomething.org'\nAND u_access.email IS DISTINCT FROM 'juy+runscopescheduledtests@dosomething.org'\nAND (u_access.email NOT ILIKE '%@example.org%' OR u_access.email IS NULL) \nUNION ALL\nSELECT DISTINCT \n    u_login.id AS northstar_id,\n    u_login.last_authenticated_at AS \"timestamp\",\n    'site_login' AS \"action\",\n    '4' AS action_id,\n    NULL AS \"source\",\n    '0' AS action_serial_id,\n    'web' AS channel\nFROM {{ ref('northstar_users_deduped') }} u_login\nWHERE u_login.last_authenticated_at IS NOT NULL \nAND u_login.\"source\" IS DISTINCT FROM 'runscope'\nAND u_login.\"source\" IS DISTINCT FROM 'runscope-client'\nAND u_login.email IS DISTINCT FROM 'runscope-scheduled-test@dosomething.org'\nAND u_login.email IS DISTINCT FROM 'juy+runscopescheduledtests@dosomething.org'\nAND (u_login.email NOT ILIKE '%@example.org%' OR u_login.email IS NULL) \nUNION ALL \nSELECT\n    DISTINCT u.id AS northstar_id,\n    u.created_at AS \"timestamp\",\n    'account_creation' AS action, \n    '5' AS action_id,\n    u.\"source\" AS \"source\",\n    '0' AS action_serial_id, \n    (CASE WHEN u.\"source\" ILIKE '%sms%' THEN 'sms'\n    WHEN u.\"source\" ILIKE '%phoenix%' OR u.\"source\" IS NULL THEN 'web'\n    WHEN u.\"source\" ILIKE '%niche%' THEN 'niche_coregistration'\n    WHEN u.\"source\" NOT LIKE '%niche%' AND u.\"source\" NOT LIKE '%sms%' AND u.\"source\" NOT LIKE '%phoenix%' AND u.\"source\" IS NOT NULL THEN 'other' END) AS \"channel\"\nFROM\n    (SELECT \n            u_create.id,\n            max(u_create.\"source\") AS \"source\",\n            min(u_create.created_at) AS created_at\n    FROM {{ ref('northstar_users_deduped') }} u_create\nWHERE u_create.\"source\" IS DISTINCT FROM 'importer-client'\nAND u_create.\"source\" IS DISTINCT FROM 'runscope'\nAND u_create.\"source\" IS DISTINCT FROM 'runscope-client'\nAND u_create.email IS DISTINCT FROM 'runscope-scheduled-test@dosomething.org'\nAND u_create.email IS DISTINCT FROM 'juy+runscopescheduledtests@dosomething.org'\nAND (u_create.email NOT ILIKE '%@example.org%' OR u_create.email IS NULL) \n    GROUP BY u_create.id) u\nUNION ALL \nSELECT\n    DISTINCT g.user_id AS northstar_id,\n    g.created_at AS \"timestamp\",\n    'messaged_gambit' AS \"action\", \n    '6' AS action_id,\n    'SMS' AS \"source\",\n    g.message_id AS action_serial_id,\n    'sms' AS \"channel\"\nFROM\n    {{ ref('gambit_messages_inbound') }} g\nWHERE \n\tg.user_id IS NOT NULL\n\tAND g.macro <> 'subscriptionStatusStop' \nUNION ALL \n    SELECT\n        DISTINCT cio.customer_id AS northstar_id,\n        cio.\"timestamp\" AS \"timestamp\",\n        'clicked_link' AS \"action\",\n        '7' AS action_id,\n        cio.template_id::CHARACTER AS \"source\",\n        cio.event_id AS action_serial_id, \n        'email' AS \"channel\"\n    FROM\n        cio.email_event cio\n    WHERE \n        cio.event_type = 'email_clicked'\n    AND cio.customer_id IS NOT NULL\nUNION ALL \nSELECT DISTINCT\n    b.northstar_id AS northstar_id,\n    b.click_time AS \"timestamp\",\n    CONCAT('bertly_link_', b.interaction_type) AS \"action\",\n    '10' AS action_id,\n    'bertly' AS \"source\",\n    b.click_id AS action_serial_id,\n    b.\"source\" AS \"channel\"\nFROM {{ ref('bertly_clicks') }} b\nINNER JOIN {{ ref('users') }} u\nON b.northstar_id = u.northstar_id\nWHERE b.northstar_id IS NOT NULL\nAND b.interaction_type IS DISTINCT FROM 'preview'\n) AS a\nLEFT JOIN {{ ref('users') }} u ON u.northstar_id = a.northstar_id", "refs": [["signups"], ["posts"], ["northstar_users_deduped"], ["northstar_users_deduped"], ["northstar_users_deduped"], ["gambit_messages_inbound"], ["bertly_clicks"], ["users"], ["users"]], "sources": [], "depends_on": {"nodes": ["model.ds_dbt.signups", "model.ds_dbt.posts", "model.ds_dbt.northstar_users_deduped", "model.ds_dbt.northstar_users_deduped", "model.ds_dbt.northstar_users_deduped", "model.ds_dbt.gambit_messages_inbound", "model.ds_dbt.bertly_clicks", "model.ds_dbt.users", "model.ds_dbt.users"], "macros": []}, "unique_id": "model.ds_dbt.member_event_log", "empty": false, "fqn": ["ds_dbt", "member_event_log", "member_event_log"], "tags": [], "config": {"enabled": true, "materialized": "table", "tags": [], "pre-hook": [], "post-hook": [{"sql": "CREATE UNIQUE INDEX ON {{ this }}(timestamp, northstar_id, event_id)", "transaction": true, "index": 0}, {"sql": "CREATE INDEX ON {{ this }}(northstar_id, timestamp)", "transaction": true, "index": 1}, {"sql": "GRANT SELECT ON {{ this }} TO dsanalyst", "transaction": true, "index": 2}, {"sql": "GRANT SELECT ON {{ this }} TO looker", "transaction": true, "index": 3}], "quoting": {}, "persist_docs": {}, "vars": {}, "column_types": {}, "alias": "member_event_log"}, "schema": "public", "database": "quasar_prod_warehouse", "alias": "member_event_log", "columns": {"event_id": {"name": "event_id", "description": "This is a unique identifier for each event"}, "northstar_id": {"name": "northstar_id", "description": "The Northstar ID of the user who generated the event"}, "timestamp": {"name": "timestamp", "description": "When the item was created in UTC (eg. 2018-01-01 12:00:00)"}, "action_type": {"name": "action_type", "description": "Type of action the user took. (e.g. share-something, donate-something)"}, "action_id": {"name": "action_id", "description": "Internal identifier of the action"}, "source": {"name": "source", "description": "Source of the URL (e.g. SMS, web), origin of the post (e.g. phoenix-web, phoenix-ashes, sms), or source where user was acquired. (e.g. sms, phoenix-next)"}, "action_serial_id": {"name": "action_serial_id", "description": "Serial id for the user's action. Depends on the source of the action. May be the bertly click id, sms message id, etc."}, "channel": {"name": "channel", "description": "Channel for the user's action. Depends on the source of the action. (e.g. web, sms)"}, "type": {"name": "type", "description": "Whether the user is new or returning"}, "first_action_month": {"name": "first_action_month", "description": "Month during which the user took their first action."}}, "description": "Table containing data for all member events.", "patch_path": "models/member_event_log/schema.yml", "docrefs": [{"documentation_package": "", "documentation_name": "event_id", "column_name": "event_id"}, {"documentation_package": "", "documentation_name": "northstar_id", "column_name": "northstar_id"}, {"documentation_package": "", "documentation_name": "created_at", "column_name": "timestamp"}, {"documentation_package": "", "documentation_name": "action_type", "column_name": "action_type"}, {"documentation_package": "", "documentation_name": "action_id", "column_name": "action_id"}, {"documentation_package": "", "documentation_name": "source", "column_name": "source"}, {"documentation_package": "", "documentation_name": "action_serial_id", "column_name": "action_serial_id"}, {"documentation_package": "", "documentation_name": "channel", "column_name": "channel"}, {"documentation_package": "", "documentation_name": "first_action_month", "column_name": "first_action_month"}]}, "model.ds_dbt.gambit_messages_inbound": {"name": "gambit_messages_inbound", "root_path": "/Users/mrich/projects/quasar/quasar/dbt", "resource_type": "model", "path": "gambit_messages/gambit_messages_inbound.sql", "original_file_path": "models/gambit_messages/gambit_messages_inbound.sql", "package_name": "ds_dbt", "raw_sql": "SELECT\n  *\n  FROM\n    {{ ref('messages_flattened') }} f\n  WHERE\n    f.direction = 'inbound'\n    AND f.user_id IS NOT NULL\n  UNION ALL\n    (SELECT\n      g.agent_id,\n      g.attachment_url,\n      g.attachment_content_type,\n      g.broadcast_id,\n      g.campaign_id,\n      g.conversation_id,\n      g.created_at,\n      g.direction,\n      g.message_id,\n      g.macro,\n      g.\"match\",\n      g.carrier_delivered_at,\n      g.carrier_failure_code,\n      g.total_segments,\n      g.platform_message_id,\n      g.template,\n      g.text,\n      g.topic,\n      u.northstar_id AS user_id\n    FROM\n      {{ ref('messages_flattened') }} g\n    LEFT JOIN\n      {{ env_var('FT_GAMBIT') }}.conversations c\n    ON g.conversation_id = c._id\n    LEFT JOIN\n      public.users u\n      ON substring(c.platform_user_id, 3, 10) = u.mobile\n      AND u.mobile IS NOT NULL\n      AND u.mobile <> ''\n    WHERE\n      g.direction = 'inbound'\n      AND g.user_id IS NULL)", "refs": [["messages_flattened"], ["messages_flattened"]], "sources": [], "depends_on": {"nodes": ["model.ds_dbt.messages_flattened", "model.ds_dbt.messages_flattened"], "macros": []}, "unique_id": "model.ds_dbt.gambit_messages_inbound", "empty": false, "fqn": ["ds_dbt", "gambit_messages", "gambit_messages_inbound"], "tags": [], "config": {"enabled": true, "materialized": "table", "tags": [], "pre-hook": [], "post-hook": [{"sql": "CREATE INDEX IF NOT EXISTS messages_in_index ON {{ this }}(message_id, created_at, user_id, conversation_id)", "transaction": true, "index": 0}, {"sql": "GRANT SELECT ON {{ this }} TO dsanalyst", "transaction": true, "index": 1}, {"sql": "GRANT SELECT ON {{ this }} TO looker", "transaction": true, "index": 2}], "quoting": {}, "persist_docs": {}, "vars": {}, "column_types": {}, "alias": "gambit_messages_inbound"}, "schema": "public", "database": "quasar_prod_warehouse", "alias": "gambit_messages_inbound", "columns": {"agent_id": {"name": "agent_id", "description": "If set, the content type of the picture the member is sending us. Exp. image/png."}, "attachment_content_type": {"name": "attachment_content_type", "description": "If set, the handle of the Front agent this outbound support message is from."}, "attachment_url": {"name": "attachment_url", "description": "If set, link to the picture sent by the member."}, "broadcast_id": {"name": "broadcast_id", "description": "If set, this message was an outbound broadcast (when direction == 'outbound-api-send'), or the User's reply to an outbound broadcast (when direction == 'inbound')"}, "campaign_id": {"name": "campaign_id", "description": "If set, holds a reference to the **last** campaign topic the member's conversation was in. This is useful to allow members to talk to Gambit and get quick responses (through Rivescript), without Gambit completely forgetting what state the member's interaction with a campaign topic was in. 'This is a unique identifier for the campaign'"}, "conversation_id": {"name": "conversation_id", "description": "Conversation the Message belongs to."}, "created_at": {"name": "created_at", "description": "Message's created date."}, "direction": {"name": "direction", "description": "Describes if the message is being received (inbound) or being sent (outbound-*)."}, "message_id": {"name": "message_id", "description": "Unique identifier for a Message (MongoDB id)."}, "macro": {"name": "macro", "description": "If set, this message is part of this macro's workflow. Example: subscription status updates, voting plan submission, aswering a multichoice broadcast, etc."}, "match": {"name": "match", "description": "Rivescript trigger matched by inbound text."}, "carrier_delivered_at": {"name": "carrier_delivered_at", "description": "Date when we received a delivery confirmation from the carrier."}, "carrier_failure_code": {"name": "carrier_failure_code", "description": "Error code reported by the carrier (Only for outbound messages)."}, "total_segments": {"name": "total_segments", "description": "Number of chunks the message is broken into by the SMS API."}, "platform_message_id": {"name": "platform_message_id", "description": "The Message identifier per platform."}, "template": {"name": "template", "description": "If set, template of outbound message sent (e.g. askQuantity, completedMenu)."}, "text": {"name": "text", "description": "Body of the message."}, "topic": {"name": "topic", "description": "Holds a reference to the **last** campaign topic the member's conversation was in. This is useful to allow members to talk to Gambit and get quick responses (through Rivescript), without Gambit completely forgetting what state the member's interaction with a campaign topic was in."}, "user_id": {"name": "user_id", "description": "The Northstar id of the member."}}, "description": "Inbound messages.", "patch_path": "models/gambit_messages/schema.yml", "docrefs": [{"documentation_package": "", "documentation_name": "agent_id", "column_name": "agent_id"}, {"documentation_package": "", "documentation_name": "attachment_content_type", "column_name": "attachment_content_type"}, {"documentation_package": "", "documentation_name": "campaign_id", "column_name": "campaign_id"}, {"documentation_package": "", "documentation_name": "topic", "column_name": "topic"}]}, "model.ds_dbt.messages_flattened": {"name": "messages_flattened", "root_path": "/Users/mrich/projects/quasar/quasar/dbt", "resource_type": "model", "path": "gambit_messages/messages_flattened.sql", "original_file_path": "models/gambit_messages/messages_flattened.sql", "package_name": "ds_dbt", "raw_sql": "SELECT\n    agent_id AS agent_id,\n    attachments->0->>'contentType' AS attachment_content_type,\n    attachments->0->>'url' AS attachment_url,\n    broadcast_id AS broadcast_id,\n    campaign_id AS campaign_id,\n    conversation_id AS conversation_id,\n    created_at as created_at,\n    direction AS direction,\n    _id AS message_id,\n    macro AS macro,\n    match AS match,\n    metadata #>> '{delivery,deliveredAt}' AS carrier_delivered_at,\n    metadata #>> '{delivery,failureData,code}' as carrier_failure_code,\n    (metadata #> '{delivery}' ->> 'totalSegments')::INT AS total_segments,\n    platform_message_id as platform_message_id,\n    template AS template,\n    text AS text,\n    topic AS topic,\n    user_id AS user_id\n  FROM {{ env_var('FT_GAMBIT') }}.messages", "refs": [], "sources": [], "depends_on": {"nodes": [], "macros": []}, "unique_id": "model.ds_dbt.messages_flattened", "empty": false, "fqn": ["ds_dbt", "gambit_messages", "messages_flattened"], "tags": [], "config": {"enabled": true, "materialized": "table", "tags": [], "pre-hook": [], "post-hook": [{"sql": "CREATE INDEX IF NOT EXISTS messages_user_id ON {{ this }}(user_id)", "transaction": true, "index": 0}, {"sql": "CREATE INDEX IF NOT EXISTS platform_message_id ON {{ this }}(platform_message_id)", "transaction": true, "index": 1}, {"sql": "GRANT SELECT ON {{ this }} TO dsanalyst", "transaction": true, "index": 2}, {"sql": "GRANT SELECT ON {{ this }} TO looker", "transaction": true, "index": 3}], "quoting": {}, "persist_docs": {}, "vars": {}, "column_types": {}, "alias": "messages_flattened"}, "schema": "public", "database": "quasar_prod_warehouse", "alias": "messages_flattened", "columns": {"agent_id": {"name": "agent_id", "description": "If set, the content type of the picture the member is sending us. Exp. image/png."}, "attachment_content_type": {"name": "attachment_content_type", "description": "If set, the handle of the Front agent this outbound support message is from."}, "attachment_url": {"name": "attachment_url", "description": "If set, link to the picture sent by the member."}, "broadcast_id": {"name": "broadcast_id", "description": "If set, this message was an outbound broadcast (when direction == 'outbound-api-send'), or the User's reply to an outbound broadcast (when direction == 'inbound')"}, "campaign_id": {"name": "campaign_id", "description": "If set, holds a reference to the **last** campaign topic the member's conversation was in. This is useful to allow members to talk to Gambit and get quick responses (through Rivescript), without Gambit completely forgetting what state the member's interaction with a campaign topic was in. 'This is a unique identifier for the campaign'"}, "conversation_id": {"name": "conversation_id", "description": "Conversation the Message belongs to."}, "created_at": {"name": "created_at", "description": "Message's created date."}, "direction": {"name": "direction", "description": "Describes if the message is being received (inbound) or being sent (outbound-*)."}, "message_id": {"name": "message_id", "description": "Unique identifier for a Message (MongoDB id)."}, "macro": {"name": "macro", "description": "If set, this message is part of this macro's workflow. Example: subscription status updates, voting plan submission, aswering a multichoice broadcast, etc."}, "match": {"name": "match", "description": "Rivescript trigger matched by inbound text."}, "carrier_delivered_at": {"name": "carrier_delivered_at", "description": "Date when we received a delivery confirmation from the carrier."}, "carrier_failure_code": {"name": "carrier_failure_code", "description": "Error code reported by the carrier (Only for outbound messages)."}, "total_segments": {"name": "total_segments", "description": "Number of chunks the message is broken into by the SMS API."}, "platform_message_id": {"name": "platform_message_id", "description": "The Message identifier per platform."}, "template": {"name": "template", "description": "If set, template of outbound message sent (e.g. askQuantity, completedMenu)."}, "text": {"name": "text", "description": "Body of the message."}, "topic": {"name": "topic", "description": "Holds a reference to the **last** campaign topic the member's conversation was in. This is useful to allow members to talk to Gambit and get quick responses (through Rivescript), without Gambit completely forgetting what state the member's interaction with a campaign topic was in."}, "user_id": {"name": "user_id", "description": "The Northstar id of the member."}}, "description": "Messages which nested values have been flattened for easier querying.", "patch_path": "models/gambit_messages/schema.yml", "docrefs": [{"documentation_package": "", "documentation_name": "agent_id", "column_name": "agent_id"}, {"documentation_package": "", "documentation_name": "attachment_content_type", "column_name": "attachment_content_type"}, {"documentation_package": "", "documentation_name": "campaign_id", "column_name": "campaign_id"}, {"documentation_package": "", "documentation_name": "topic", "column_name": "topic"}]}, "model.ds_dbt.gambit_messages_outbound": {"name": "gambit_messages_outbound", "root_path": "/Users/mrich/projects/quasar/quasar/dbt", "resource_type": "model", "path": "gambit_messages/gambit_messages_outbound.sql", "original_file_path": "models/gambit_messages/gambit_messages_outbound.sql", "package_name": "ds_dbt", "raw_sql": "SELECT\n    f.campaign_id,\n    f.conversation_id,\n    f.broadcast_id,\n    f.created_at,\n    f.direction,\n    f.message_id,\n    f.macro,\n    f.\"match\",\n    f.carrier_delivered_at,\n    f.carrier_failure_code,\n    f.platform_message_id,\n    f.template,\n    f.text,\n    f.topic,\n    f.user_id\n  FROM\n    {{ ref('messages_flattened') }} f\n  WHERE\n    f.direction <> 'inbound'\n    AND f.user_id IS NOT NULL\n  UNION ALL\n    (SELECT\n      g.campaign_id,\n      g.conversation_id,\n      g.broadcast_id,\n      g.created_at,\n      g.direction,\n      g.message_id,\n      g.macro,\n      g.\"match\",\n      g.carrier_delivered_at,\n      g.carrier_failure_code,\n      g.platform_message_id,\n      g.template,\n      g.text,\n      g.topic,\n      u.northstar_id AS user_id\n      FROM\n        {{ ref('messages_flattened') }} g\n      LEFT JOIN\n        {{ env_var('FT_GAMBIT') }}.conversations c\n      ON g.conversation_id = c._id\n      LEFT JOIN\n        public.users u\n      ON substring(c.platform_user_id, 3, 10) = u.mobile\n        AND u.mobile IS NOT NULL\n        AND u.mobile <> ''\n      WHERE\n        g.direction <> 'inbound'\n        AND g.user_id IS NULL)", "refs": [["messages_flattened"], ["messages_flattened"]], "sources": [], "depends_on": {"nodes": ["model.ds_dbt.messages_flattened", "model.ds_dbt.messages_flattened"], "macros": []}, "unique_id": "model.ds_dbt.gambit_messages_outbound", "empty": false, "fqn": ["ds_dbt", "gambit_messages", "gambit_messages_outbound"], "tags": [], "config": {"enabled": true, "materialized": "table", "tags": [], "pre-hook": [], "post-hook": [{"sql": "CREATE INDEX IF NOT EXISTS messages_out_index ON {{ this }}(message_id, created_at, user_id, conversation_id)", "transaction": true, "index": 0}, {"sql": "CREATE INDEX IF NOT EXISTS deliverability ON {{ this }}(created_at, carrier_failure_code)", "transaction": true, "index": 1}, {"sql": "GRANT SELECT ON {{ this }} TO dsanalyst", "transaction": true, "index": 2}, {"sql": "GRANT SELECT ON {{ this }} TO looker", "transaction": true, "index": 3}], "quoting": {}, "persist_docs": {}, "vars": {}, "column_types": {}, "alias": "gambit_messages_outbound"}, "schema": "public", "database": "quasar_prod_warehouse", "alias": "gambit_messages_outbound", "columns": {"agent_id": {"name": "agent_id", "description": "If set, the content type of the picture the member is sending us. Exp. image/png."}, "attachment_content_type": {"name": "attachment_content_type", "description": "If set, the handle of the Front agent this outbound support message is from."}, "attachment_url": {"name": "attachment_url", "description": "If set, link to the picture sent by the member."}, "broadcast_id": {"name": "broadcast_id", "description": "If set, this message was an outbound broadcast (when direction == 'outbound-api-send'), or the User's reply to an outbound broadcast (when direction == 'inbound')"}, "campaign_id": {"name": "campaign_id", "description": "If set, holds a reference to the **last** campaign topic the member's conversation was in. This is useful to allow members to talk to Gambit and get quick responses (through Rivescript), without Gambit completely forgetting what state the member's interaction with a campaign topic was in. 'This is a unique identifier for the campaign'"}, "conversation_id": {"name": "conversation_id", "description": "Conversation the Message belongs to."}, "created_at": {"name": "created_at", "description": "Message's created date."}, "direction": {"name": "direction", "description": "Describes if the message is being received (inbound) or being sent (outbound-*)."}, "message_id": {"name": "message_id", "description": "Unique identifier for a Message (MongoDB id)."}, "macro": {"name": "macro", "description": "If set, this message is part of this macro's workflow. Example: subscription status updates, voting plan submission, aswering a multichoice broadcast, etc."}, "match": {"name": "match", "description": "Rivescript trigger matched by inbound text."}, "carrier_delivered_at": {"name": "carrier_delivered_at", "description": "Date when we received a delivery confirmation from the carrier."}, "carrier_failure_code": {"name": "carrier_failure_code", "description": "Error code reported by the carrier (Only for outbound messages)."}, "total_segments": {"name": "total_segments", "description": "Number of chunks the message is broken into by the SMS API."}, "platform_message_id": {"name": "platform_message_id", "description": "The Message identifier per platform."}, "template": {"name": "template", "description": "If set, template of outbound message sent (e.g. askQuantity, completedMenu)."}, "text": {"name": "text", "description": "Body of the message."}, "topic": {"name": "topic", "description": "Holds a reference to the **last** campaign topic the member's conversation was in. This is useful to allow members to talk to Gambit and get quick responses (through Rivescript), without Gambit completely forgetting what state the member's interaction with a campaign topic was in."}, "user_id": {"name": "user_id", "description": "The Northstar id of the member."}}, "description": "Outbound messages.", "patch_path": "models/gambit_messages/schema.yml", "docrefs": [{"documentation_package": "", "documentation_name": "agent_id", "column_name": "agent_id"}, {"documentation_package": "", "documentation_name": "attachment_content_type", "column_name": "attachment_content_type"}, {"documentation_package": "", "documentation_name": "campaign_id", "column_name": "campaign_id"}, {"documentation_package": "", "documentation_name": "topic", "column_name": "topic"}]}, "model.ds_dbt.post_actions": {"name": "post_actions", "root_path": "/Users/mrich/projects/quasar/quasar/dbt", "resource_type": "model", "path": "post_actions/post_actions.sql", "original_file_path": "models/post_actions/post_actions.sql", "package_name": "ds_dbt", "raw_sql": "SELECT *\nFROM {{ env_var('FT_ROGUE') }}.actions", "refs": [], "sources": [], "depends_on": {"nodes": [], "macros": []}, "unique_id": "model.ds_dbt.post_actions", "empty": false, "fqn": ["ds_dbt", "post_actions", "post_actions"], "tags": [], "config": {"enabled": true, "materialized": "table", "tags": [], "pre-hook": [], "post-hook": [{"sql": "CREATE UNIQUE INDEX IF NOT EXISTS post_actions_unique ON {{ this }}(created_at, id)", "transaction": true, "index": 0}, {"sql": "GRANT SELECT ON {{ this }} TO dsanalyst", "transaction": true, "index": 1}, {"sql": "GRANT SELECT ON {{ this }} TO looker", "transaction": true, "index": 2}], "quoting": {}, "persist_docs": {}, "vars": {}, "column_types": {}, "alias": "post_actions"}, "schema": "public", "database": "quasar_prod_warehouse", "alias": "post_actions", "columns": {"id": {"name": "id", "description": "Unique identifier for the post"}, "name": {"name": "name", "description": "Name of the action. (e.g. Huddle for Heroes Photo Reportback)"}, "campaign_id": {"name": "campaign_id", "description": "This is a unique identifier for the campaign"}, "post_type": {"name": "post_type", "description": "Type of post, (e.g. photo, voter-reg)"}, "noun": {"name": "noun", "description": "Noun that corresponds to the item in the call to action that was delivered. (e.g. drawings, tweets)"}, "verb": {"name": "verb", "description": "Verb corresponding to the action the user took. (e.g. shared, sent, taken)"}, "created_at": {"name": "created_at", "description": "When the item was created in UTC (eg. 2018-01-01 12:00:00)"}, "updated_at": {"name": "updated_at", "description": "When the item was updated in UTC (eg. 2018-01-01 12:00:00)"}, "deleted_at": {"name": "deleted_at", "description": "Date time in UTC when a user deleted their post."}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Marks rows that were deleted in the source table"}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "(UTC timestamp) keeps track of when each row was last successfully synced"}, "reportback": {"name": "reportback", "description": "Whether the post is a reportback"}, "civic_action": {"name": "civic_action", "description": "Whether the post is a Civic Action. The application allows for multiple types of posts."}, "scholarship_entry": {"name": "scholarship_entry", "description": "Whether the post is a Scholarship Entry. The application allows for multiple types of posts."}, "active": {"name": "active", "description": "Whether the user is active"}, "anonymous": {"name": "anonymous", "description": "Whether the user is anonymous when making the post"}, "callpower_campaign_id": {"name": "callpower_campaign_id", "description": "Unique ID corresponding to the Callpower campaign. Callpower allows users to record messages for their representatives."}, "quiz": {"name": "quiz", "description": "Whether the post is a quiz"}, "action_type": {"name": "action_type", "description": "Type of action the user took. (e.g. share-something, donate-something)"}, "online": {"name": "online", "description": "Whether the action is a online as opposed to IRL."}, "time_commitment": {"name": "time_commitment", "description": "Estimated time required to do the action (e.g. 3.0+, <0.5)"}}, "description": "Table that tracks actions like reportbacks, civic actions and scholarship entries.", "patch_path": "models/post_actions/schema.yml", "docrefs": [{"documentation_package": "", "documentation_name": "id", "column_name": "id"}, {"documentation_package": "", "documentation_name": "campaign_id", "column_name": "campaign_id"}, {"documentation_package": "", "documentation_name": "post_type", "column_name": "post_type"}, {"documentation_package": "", "documentation_name": "noun", "column_name": "noun"}, {"documentation_package": "", "documentation_name": "verb", "column_name": "verb"}, {"documentation_package": "", "documentation_name": "created_at", "column_name": "created_at"}, {"documentation_package": "", "documentation_name": "updated_at", "column_name": "updated_at"}, {"documentation_package": "", "documentation_name": "deleted_at", "column_name": "deleted_at"}, {"documentation_package": "", "documentation_name": "_fivetran_deleted", "column_name": "_fivetran_deleted"}, {"documentation_package": "", "documentation_name": "_fivetran_synced", "column_name": "_fivetran_synced"}, {"documentation_package": "", "documentation_name": "reportback", "column_name": "reportback"}, {"documentation_package": "", "documentation_name": "civic_action", "column_name": "civic_action"}, {"documentation_package": "", "documentation_name": "scholarship_entry", "column_name": "scholarship_entry"}, {"documentation_package": "", "documentation_name": "active", "column_name": "active"}, {"documentation_package": "", "documentation_name": "anonymous", "column_name": "anonymous"}, {"documentation_package": "", "documentation_name": "callpower_campaign_id", "column_name": "callpower_campaign_id"}, {"documentation_package": "", "documentation_name": "quiz", "column_name": "quiz"}, {"documentation_package": "", "documentation_name": "action_type", "column_name": "action_type"}, {"documentation_package": "", "documentation_name": "online", "column_name": "online"}, {"documentation_package": "", "documentation_name": "time_commitment", "column_name": "time_commitment"}]}, "model.ds_dbt.campaign_info_international": {"name": "campaign_info_international", "root_path": "/Users/mrich/projects/quasar/quasar/dbt", "resource_type": "model", "path": "campaign_info/campaign_info_international.sql", "original_file_path": "models/campaign_info/campaign_info_international.sql", "package_name": "ds_dbt", "raw_sql": "SELECT \n\tc.id AS campaign_id,\n\tc.internal_title AS campaign_name,\n\ti.*\nFROM {{ env_var('CAMPAIGN_INFO_ASHES_SNAPSHOT') }} i\nLEFT JOIN {{ env_var('FT_ROGUE') }}.campaigns c ON i.campaign_run_id = c.campaign_run_id\nWHERE campaign_language IS DISTINCT FROM 'en'", "refs": [], "sources": [], "depends_on": {"nodes": [], "macros": []}, "unique_id": "model.ds_dbt.campaign_info_international", "empty": false, "fqn": ["ds_dbt", "campaign_info", "campaign_info_international"], "tags": [], "config": {"enabled": true, "materialized": "table", "tags": [], "pre-hook": [], "post-hook": [{"sql": "GRANT SELECT ON {{ this }} TO dsanalyst", "transaction": true, "index": 0}, {"sql": "GRANT SELECT ON {{ this }} TO looker", "transaction": true, "index": 1}], "quoting": {}, "persist_docs": {}, "vars": {}, "column_types": {}}, "schema": "public", "database": "quasar_prod_warehouse", "alias": "campaign_info_international", "columns": {"campaign_id": {"name": "campaign_id", "description": "This is a unique identifier for the campaign"}, "campaign_name": {"name": "campaign_name", "description": "Name of the campaign"}, "campaign_node_id": {"name": "campaign_node_id", "description": "This is a unique identifier for the campaign"}, "campaign_node_id_title": {"name": "campaign_node_id_title", "description": "Campaign title"}, "campaign_run_id": {"name": "campaign_run_id", "description": "Unique identifier for the campaign run"}, "campaign_run_id_title": {"name": "campaign_run_id_title", "description": "Title of the campaign run"}, "campaign_type": {"name": "campaign_type", "description": "Campaign cause type (eg. Mental Health, Education)"}, "campaign_language": {"name": "campaign_language", "description": "\"Language in which the campaign is available\""}, "campaign_run_start_date": {"name": "campaign_run_start_date", "description": "Start date of the campaign run"}, "campaign_run_end_date": {"name": "campaign_run_end_date", "description": "End date of the campaign run"}, "campaign_created_date": {"name": "campaign_created_date", "description": "When the campaign was created in UTC (eg. 2018-01-01 12:00:00)"}, "campaign_noun": {"name": "campaign_noun", "description": "Noun applicable to the user's action"}, "campaign_verb": {"name": "campaign_verb", "description": "Verb describing the action the user should take"}, "campaign_cause_type": {"name": "campaign_cause_type", "description": "Campaign cause type (eg. Mental Health, Education)"}, "campaign_cta": {"name": "campaign_cta", "description": "Campaign's call to action"}, "campaign_action_type": {"name": "campaign_action_type", "description": "Campaign action type (eg. Make Something, Share Something)"}}, "description": "A table containing information about international campaigns", "patch_path": "models/campaign_info/schema.yml", "docrefs": [{"documentation_package": "", "documentation_name": "campaign_id", "column_name": "campaign_id"}, {"documentation_package": "", "documentation_name": "campaign_name", "column_name": "campaign_name"}, {"documentation_package": "", "documentation_name": "campaign_id", "column_name": "campaign_node_id"}, {"documentation_package": "", "documentation_name": "campaign_node_id_title", "column_name": "campaign_node_id_title"}, {"documentation_package": "", "documentation_name": "campaign_run_id", "column_name": "campaign_run_id"}, {"documentation_package": "", "documentation_name": "campaign_run_id_title", "column_name": "campaign_run_id_title"}, {"documentation_package": "", "documentation_name": "campaign_cause_type", "column_name": "campaign_type"}, {"documentation_package": "", "documentation_name": "campaign_language", "column_name": "campaign_language"}, {"documentation_package": "", "documentation_name": "campaign_run_start_date", "column_name": "campaign_run_start_date"}, {"documentation_package": "", "documentation_name": "campaign_run_end_date", "column_name": "campaign_run_end_date"}, {"documentation_package": "", "documentation_name": "campaign_created_date", "column_name": "campaign_created_date"}, {"documentation_package": "", "documentation_name": "campaign_noun", "column_name": "campaign_noun"}, {"documentation_package": "", "documentation_name": "campaign_verb", "column_name": "campaign_verb"}, {"documentation_package": "", "documentation_name": "campaign_cause_type", "column_name": "campaign_cause_type"}, {"documentation_package": "", "documentation_name": "campaign_cta", "column_name": "campaign_cta"}, {"documentation_package": "", "documentation_name": "campaign_action_type", "column_name": "campaign_action_type"}]}, "model.ds_dbt.campaign_info": {"name": "campaign_info", "root_path": "/Users/mrich/projects/quasar/quasar/dbt", "resource_type": "model", "path": "campaign_info/campaign_info.sql", "original_file_path": "models/campaign_info/campaign_info.sql", "package_name": "ds_dbt", "raw_sql": "SELECT \n\tc.id AS campaign_id,\n\tc.campaign_run_id,\n\tc.internal_title AS campaign_name,\n\tc.cause AS campaign_cause,\n\tc.start_date AS campaign_run_start_date,\n\tc.end_date AS campaign_run_end_date,\n\tc.created_at AS campaign_created_date,\n\tCOALESCE(i.campaign_node_id, c.id) AS campaign_node_id,\n\ti.campaign_node_id_title,\n\ti.campaign_run_id_title,\n\ti.campaign_action_type,\n\tCOALESCE(c.cause, i.campaign_cause_type) AS campaign_cause_type,\n\ti.campaign_noun,\n\ti.campaign_verb,\n\ti.campaign_cta\nFROM {{ env_var('FT_ROGUE') }}.campaigns c\nLEFT JOIN {{ env_var('CAMPAIGN_INFO_ASHES_SNAPSHOT') }}  i ON i.campaign_run_id = c.campaign_run_id\nWHERE i.campaign_language = 'en' OR i.campaign_language IS NULL", "refs": [], "sources": [], "depends_on": {"nodes": [], "macros": []}, "unique_id": "model.ds_dbt.campaign_info", "empty": false, "fqn": ["ds_dbt", "campaign_info", "campaign_info"], "tags": [], "config": {"enabled": true, "materialized": "table", "tags": [], "pre-hook": [], "post-hook": [{"sql": "CREATE UNIQUE INDEX IF NOT EXISTS campaign_info_i ON {{ this }} (campaign_run_id, campaign_id)", "transaction": true, "index": 0}, {"sql": "GRANT SELECT ON {{ this }} TO dsanalyst", "transaction": true, "index": 1}, {"sql": "GRANT SELECT ON {{ this }} TO looker", "transaction": true, "index": 2}], "quoting": {}, "persist_docs": {}, "vars": {}, "column_types": {}, "alias": "campaign_info"}, "schema": "public", "database": "quasar_prod_warehouse", "alias": "campaign_info", "columns": {"campaign_id": {"name": "campaign_id", "description": "This is a unique identifier for the campaign"}, "campaign_run_id": {"name": "campaign_run_id", "description": "Unique identifier for the campaign run"}, "campaign_name": {"name": "campaign_name", "description": "Name of the campaign"}, "campaign_cause": {"name": "campaign_cause", "description": "Campaign cause (eg. Mental Health, Education)"}, "campaign_run_start_date": {"name": "campaign_run_start_date", "description": "Start date of the campaign run"}, "campaign_run_end_date": {"name": "campaign_run_end_date", "description": "End date of the campaign run"}, "campaign_created_date": {"name": "campaign_created_date", "description": "When the campaign was created in UTC (eg. 2018-01-01 12:00:00)"}, "campaign_node_id": {"name": "campaign_node_id", "description": "This is a unique identifier for the campaign"}, "campaign_node_id_title": {"name": "campaign_node_id_title", "description": "Campaign title"}, "campaign_run_id_title": {"name": "campaign_run_id_title", "description": "Title of the campaign run"}, "campaign_action_type": {"name": "campaign_action_type", "description": "Campaign action type (eg. Make Something, Share Something)"}, "campaign_cause_type": {"name": "campaign_cause_type", "description": "Campaign cause type (eg. Mental Health, Education)"}, "campaign_noun": {"name": "campaign_noun", "description": "Noun applicable to the user's action"}, "campaign_verb": {"name": "campaign_verb", "description": "Verb describing the action the user should take"}, "campaign_cta": {"name": "campaign_cta", "description": "Campaign's call to action"}}, "description": "A table containing information about campaigns", "patch_path": "models/campaign_info/schema.yml", "docrefs": [{"documentation_package": "", "documentation_name": "campaign_id", "column_name": "campaign_id"}, {"documentation_package": "", "documentation_name": "campaign_run_id", "column_name": "campaign_run_id"}, {"documentation_package": "", "documentation_name": "campaign_name", "column_name": "campaign_name"}, {"documentation_package": "", "documentation_name": "campaign_cause", "column_name": "campaign_cause"}, {"documentation_package": "", "documentation_name": "campaign_run_start_date", "column_name": "campaign_run_start_date"}, {"documentation_package": "", "documentation_name": "campaign_run_end_date", "column_name": "campaign_run_end_date"}, {"documentation_package": "", "documentation_name": "campaign_created_date", "column_name": "campaign_created_date"}, {"documentation_package": "", "documentation_name": "campaign_id", "column_name": "campaign_node_id"}, {"documentation_package": "", "documentation_name": "campaign_node_id_title", "column_name": "campaign_node_id_title"}, {"documentation_package": "", "documentation_name": "campaign_run_id_title", "column_name": "campaign_run_id_title"}, {"documentation_package": "", "documentation_name": "campaign_action_type", "column_name": "campaign_action_type"}, {"documentation_package": "", "documentation_name": "campaign_cause_type", "column_name": "campaign_cause_type"}, {"documentation_package": "", "documentation_name": "campaign_noun", "column_name": "campaign_noun"}, {"documentation_package": "", "documentation_name": "campaign_verb", "column_name": "campaign_verb"}, {"documentation_package": "", "documentation_name": "campaign_cta", "column_name": "campaign_cta"}]}, "model.ds_dbt.rock_the_vote": {"name": "rock_the_vote", "root_path": "/Users/mrich/projects/quasar/quasar/dbt", "resource_type": "model", "path": "campaign_activity/rock_the_vote.sql", "original_file_path": "models/campaign_activity/rock_the_vote.sql", "package_name": "ds_dbt", "raw_sql": "SELECT id AS post_id, \n   details::jsonb->>'Tracking Source' AS tracking_source,\n   (details::jsonb->>'Started registration')::timestamp AS started_registration,\n   details::jsonb->>'Finish with State' AS finish_with_state,\n   details::jsonb->>'Status' AS status,\n   COALESCE(details::jsonb->>'Email address',details::jsonb->>'email') AS email,\n   details::jsonb->>'Home zip code' AS zip\n FROM {{ env_var('FT_ROGUE') }}.posts\n WHERE source = 'rock-the-vote'", "refs": [], "sources": [], "depends_on": {"nodes": [], "macros": []}, "unique_id": "model.ds_dbt.rock_the_vote", "empty": false, "fqn": ["ds_dbt", "campaign_activity", "rock_the_vote"], "tags": [], "config": {"enabled": true, "materialized": "table", "tags": [], "pre-hook": [], "post-hook": [{"sql": "CREATE UNIQUE INDEX IF NOT EXISTS rtv_unique ON {{ this }}(post_id, started_registration)", "transaction": true, "index": 0}, {"sql": "GRANT SELECT ON {{ this }} TO dsanalyst", "transaction": true, "index": 1}, {"sql": "GRANT SELECT ON {{ this }} TO looker", "transaction": true, "index": 2}], "quoting": {}, "persist_docs": {}, "vars": {}, "column_types": {}, "alias": "rock_the_vote"}, "schema": "public", "database": "quasar_prod_warehouse", "alias": "rock_the_vote", "columns": {"post_id": {"name": "post_id", "description": "Unique identifier for the post"}, "tracking_source": {"name": "tracking_source", "description": "CSV string representing source of record (e.g. campaignID:822,campaignRunID:8171,source:web,source_details:STV_Affirmation) 'Details about the source of the item. This is sometimes represented as a JSON object, and for other tables like Turbovote its represented as a string. (e.g. \"{\"contentful_id\":\"3CTLlXfbwtz1FOMpl31SKV\",\"utm_source\":\"scholarship_listing\",\"utm_medium\":\"referral\",\"utm_campaign\":\"fastweb_2019_08\"}\", newsletter_456)'"}, "started_registration": {"name": "started_registration", "description": "When the user started registration. 'When the item was created in UTC (eg. 2018-01-01 12:00:00)'"}, "finish_with_state": {"name": "finish_with_state", "description": "Whether the user ?"}, "status": {"name": "status", "description": "Status of the submission. (e.g. complete, rejected, step 1)"}, "email": {"name": "email", "description": "Email address of the user."}, "zip": {"name": "zip", "description": "Postal code where the action takes place"}}, "description": "A table containing ingested Rock the Vote data", "patch_path": "models/campaign_activity/schema.yml", "docrefs": [{"documentation_package": "", "documentation_name": "id", "column_name": "post_id"}, {"documentation_package": "", "documentation_name": "source_details", "column_name": "tracking_source"}, {"documentation_package": "", "documentation_name": "created_at", "column_name": "started_registration"}, {"documentation_package": "", "documentation_name": "email", "column_name": "email"}, {"documentation_package": "", "documentation_name": "postal_code", "column_name": "zip"}]}, "model.ds_dbt.turbovote": {"name": "turbovote", "root_path": "/Users/mrich/projects/quasar/quasar/dbt", "resource_type": "model", "path": "campaign_activity/turbovote.sql", "original_file_path": "models/campaign_activity/turbovote.sql", "package_name": "ds_dbt", "raw_sql": "SELECT id AS post_id, \n\tdetails::jsonb->>'hostname' AS hostname,\n\tdetails::jsonb->>'referral-code' AS referral_code,\n\tdetails::jsonb->>'partner-comms-opt-in' AS partner_comms_opt_in,\n\t(details::jsonb->>'created-at')::timestamp AS created_at,\n\t(details::jsonb->>'updated-at')::timestamp AS updated_at,\n\tsource_details,\n\tdetails::jsonb->>'voter-registration-status' AS voter_registration_status,\n\tdetails::jsonb->>'voter-registration-source' AS voter_registration_source,\n\tdetails::jsonb->>'voter-registration-method' AS voter_registration_method,\n\tdetails::jsonb->>'voting-method-preference' AS voter_registration_preference,\n\tdetails::jsonb->>'email subscribed' AS email_subscribed,\n\tdetails::jsonb->>'sms subscribed' AS sms_subscribed\nFROM {{ env_var('FT_ROGUE') }}.posts\nWHERE source = 'turbovote'", "refs": [], "sources": [], "depends_on": {"nodes": [], "macros": []}, "unique_id": "model.ds_dbt.turbovote", "empty": false, "fqn": ["ds_dbt", "campaign_activity", "turbovote"], "tags": [], "config": {"enabled": true, "materialized": "table", "tags": [], "pre-hook": [], "post-hook": [{"sql": "CREATE UNIQUE INDEX IF NOT EXISTS turbovote_unique ON {{ this }}(post_id, created_at, updated_at)", "transaction": true, "index": 0}, {"sql": "GRANT SELECT ON {{ this }} TO dsanalyst", "transaction": true, "index": 1}, {"sql": "GRANT SELECT ON {{ this }} TO looker", "transaction": true, "index": 2}], "quoting": {}, "persist_docs": {}, "vars": {}, "column_types": {}, "alias": "turbovote"}, "schema": "public", "database": "quasar_prod_warehouse", "alias": "turbovote", "columns": {"post_id": {"name": "post_id", "description": "Unique identifier for the post"}, "hostname": {"name": "hostname", "description": "URL host where event occurred (eg. www.dosomething.org or identity.dosomething.org)"}, "referral-code": {"name": "referral-code", "description": "???"}, "partner-comms-opt-in": {"name": "partner-comms-opt-in", "description": "???"}, "created_at": {"name": "created_at", "description": "When the item was created in UTC (eg. 2018-01-01 12:00:00)"}, "updated_at": {"name": "updated_at", "description": "When the item was updated in UTC (eg. 2018-01-01 12:00:00)"}, "source_details": {"name": "source_details", "description": "Details about the source of the item. This is sometimes represented as a JSON object, and for other tables like Turbovote its represented as a string. (e.g. \"{\"contentful_id\":\"3CTLlXfbwtz1FOMpl31SKV\",\"utm_source\":\"scholarship_listing\",\"utm_medium\":\"referral\",\"utm_campaign\":\"fastweb_2019_08\"}\", newsletter_456)"}, "voter-registration-status": {"name": "voter-registration-status", "description": "Status of the voter's registration."}, "voter-registration-source": {"name": "voter-registration-source", "description": "Source of the registration."}, "voter-registration-method": {"name": "voter-registration-method", "description": "Method of registration."}, "voter-registration-preference": {"name": "voter-registration-preference", "description": "Preference of registration."}, "email subscribed": {"name": "email subscribed", "description": "Whether the use is subscribed to email"}, "sms subscribed": {"name": "sms subscribed", "description": "Whether the use is subscribed to SMS"}}, "description": "A table containing information about Turbovote registrations", "patch_path": "models/campaign_activity/schema.yml", "docrefs": [{"documentation_package": "", "documentation_name": "id", "column_name": "post_id"}, {"documentation_package": "", "documentation_name": "host", "column_name": "hostname"}, {"documentation_package": "", "documentation_name": "created_at", "column_name": "created_at"}, {"documentation_package": "", "documentation_name": "updated_at", "column_name": "updated_at"}, {"documentation_package": "", "documentation_name": "source_details", "column_name": "source_details"}]}, "model.ds_dbt.posts": {"name": "posts", "root_path": "/Users/mrich/projects/quasar/quasar/dbt", "resource_type": "model", "path": "campaign_activity/posts.sql", "original_file_path": "models/campaign_activity/posts.sql", "package_name": "ds_dbt", "raw_sql": "SELECT\n\tpd.northstar_id as northstar_id,\n\tpd.id AS id,\n\tpd.\"type\" AS \"type\",\n\ta.\"name\" AS \"action\",\n\tpd.status AS status,\n\tpd.quantity AS quantity,\n\tpd.campaign_id,\n\tCASE\n\t\tWHEN pd.id IS NULL THEN NULL\n\t\tWHEN a.\"name\" = 'voter-reg OTG'\n\t\tTHEN pd.quantity\n\t\tELSE 1 END AS reportback_volume,\n\tpd.\"source\" AS \"source\",\n\tCASE\n\t\tWHEN pd.\"source\" IS NULL THEN NULL\n\t\tWHEN pd.\"source\" ilike '%sms%' THEN 'sms'\n\t\tELSE 'web' END AS source_bucket,\n\tCASE\n\t\tWHEN pd.\"type\" = 'phone-call' AND pd.details <> ''\n\t\tTHEN (pd.details::json ->> 'call_timestamp')::timestamptz\n\t\tELSE COALESCE(rtv.created_at, tv.created_at, pd.created_at)\n\t\tEND AS created_at,\n\tpd.url AS url,\n\tpd.text,\n\tCASE\n\t\tWHEN s.\"source\" = 'importer-client'\n\t\tAND pd.\"type\" = 'share-social'\n\t\tAND pd.created_at < s.created_at\n\t\tTHEN -1\n\t\tELSE pd.signup_id END AS signup_id,\n\tCASE\n\t\tWHEN pd.id IS NULL\n\t\tTHEN NULL\n\t\tELSE CONCAT(pd.\"type\", ' - ', a.\"name\") END AS post_class,\n\tCASE WHEN pd.status IN ('accepted', 'pending')\n\t\tAND a.\"name\" NOT ILIKE '%vote%'\n\t\tTHEN 1\n\t\tWHEN pd.status IN ('accepted', 'confirmed', 'register-OVR', 'register-form')\n\t\tAND a.\"name\" ILIKE '%vote%'\n\t\tTHEN 1\n\t\tELSE NULL END AS is_accepted,\n\tpd.action_id,\n\tpd.location,\n\tpd.postal_code,\n\ta.reportback AS is_reportback,\n\tCASE \n\t    WHEN pd.details <> '' THEN (pd.details::json ->> 'number_of_participants')::INT\n\t    ELSE NULL END AS num_participants,\n\ta.civic_action,\n\ta.scholarship_entry,\n\tpd.school_id\nFROM {{ env_var('FT_ROGUE') }}.posts pd\nINNER JOIN {{ ref('signups') }} s\n\tON pd.signup_id = s.id\nLEFT JOIN {{ ref('turbovote') }} tv\n\tON tv.post_id::bigint = pd.id::bigint\nLEFT JOIN\n\t(SELECT\n\t\tDISTINCT r.*,\n\t\tCASE\n\t\t\tWHEN r.started_registration < '2017-01-01'\n\t\t\tTHEN r.started_registration + interval '4 year'\n\t\t\tELSE r.started_registration END AS created_at\n\t\tFROM {{ ref('rock_the_vote') }} r\n\t) rtv\n\tON rtv.post_id::bigint = pd.id::bigint\nLEFT JOIN {{ env_var('FT_ROGUE') }}.actions a\n\tON pd.action_id = a.id\nWHERE pd.deleted_at IS NULL\nAND pd.\"text\" IS DISTINCT FROM 'test runscope upload'\nAND a.\"name\" IS NOT NULL", "refs": [["signups"], ["turbovote"], ["rock_the_vote"]], "sources": [], "depends_on": {"nodes": ["model.ds_dbt.signups", "model.ds_dbt.turbovote", "model.ds_dbt.rock_the_vote"], "macros": []}, "unique_id": "model.ds_dbt.posts", "empty": false, "fqn": ["ds_dbt", "campaign_activity", "posts"], "tags": [], "config": {"enabled": true, "materialized": "table", "tags": [], "pre-hook": [], "post-hook": [{"sql": "CREATE UNIQUE INDEX IF NOT EXISTS posts_unique ON {{ this }}(created_at, campaign_id, id)", "transaction": true, "index": 0}, {"sql": "CREATE INDEX IF NOT EXISTS posts_i ON {{ this }}(is_reportback, is_accepted, signup_id, id, post_class)", "transaction": true, "index": 1}, {"sql": "GRANT SELECT ON {{ this }} TO dsanalyst", "transaction": true, "index": 2}, {"sql": "GRANT SELECT ON {{ this }} TO looker", "transaction": true, "index": 3}], "quoting": {}, "persist_docs": {}, "vars": {}, "column_types": {}, "alias": "posts"}, "schema": "public", "database": "quasar_prod_warehouse", "alias": "posts", "columns": {"northstar_id": {"name": "northstar_id", "description": "The Northstar ID of the user who generated the event"}, "id": {"name": "id", "description": "Unique identifier for the post"}, "type": {"name": "type", "description": "Type of post (e.g. photo)"}, "action": {"name": "action", "description": "Post action (e.g. DefendDreamers_Nov9_CongressCalls, GunViolence2018_Feb15_ParklandResponse)"}, "status": {"name": "status", "description": "Post status (e.g. accepted, rejected)"}, "quantity": {"name": "quantity", "description": "Numerical quantity of items specified in the call to action (e.g. 10, 200)"}, "campaign_id": {"name": "campaign_id", "description": "This is a unique identifier for the campaign"}, "reportback_volume": {"name": "reportback_volume", "description": "This field returns 1 if non voter-reg action, since campaigns team only counts those a 1 reportback. If voter-reg action, we want to count quantity of post as number of registered voters."}, "source": {"name": "source", "description": "Source of the URL (e.g. SMS, web), origin of the post (e.g. phoenix-web, phoenix-ashes, sms), or source where user was acquired. (e.g. sms, phoenix-next)"}, "source_bucket": {"name": "source_bucket", "description": "Grouping bucket for origin of the post (e.g. web, sms)"}, "created_at": {"name": "created_at", "description": "When the item was created in UTC (eg. 2018-01-01 12:00:00)"}, "url": {"name": "url", "description": "URL of campaign (eg. https://dosome.click/nyn5m7)"}, "text": {"name": "text", "description": "Text of the post (e.g. \"Zoo animals and a super hero trying to help too!\")"}, "signup_id": {"name": "signup_id", "description": "Unique identifier for the signup"}, "post_class": {"name": "post_class", "description": "Class of the signup (e.g. \"photo - default\", \"phone-call - DefendDreamers_Jan16_BothBodies\")"}, "is_accepted": {"name": "is_accepted", "description": "Whether the post has been accepted to be displayed to the public on the website"}, "action_id": {"name": "action_id", "description": "Internal identifier of the action"}, "location": {"name": "location", "description": "Location where the action takes place (e.g. US-NY)"}, "postal_code": {"name": "postal_code", "description": "Postal code where the action takes place"}, "is_reportback": {"name": "is_reportback", "description": "Whether the post is a reportback. The application allows for multiple types of posts."}, "civic_action": {"name": "civic_action", "description": "Whether the post is a Civic Action. The application allows for multiple types of posts."}, "scholarship_entry": {"name": "scholarship_entry", "description": "Whether the post is a Scholarship Entry. The application allows for multiple types of posts."}, "school_id": {"name": "school_id", "description": "Unique identifier for the user's school. This info comes from the school finder."}}, "description": "A table containing information about posts", "patch_path": "models/campaign_activity/schema.yml", "docrefs": [{"documentation_package": "", "documentation_name": "northstar_id", "column_name": "northstar_id"}, {"documentation_package": "", "documentation_name": "id", "column_name": "id"}, {"documentation_package": "", "documentation_name": "type", "column_name": "type"}, {"documentation_package": "", "documentation_name": "action", "column_name": "action"}, {"documentation_package": "", "documentation_name": "status", "column_name": "status"}, {"documentation_package": "", "documentation_name": "quantity", "column_name": "quantity"}, {"documentation_package": "", "documentation_name": "campaign_id", "column_name": "campaign_id"}, {"documentation_package": "", "documentation_name": "reportback_volume", "column_name": "reportback_volume"}, {"documentation_package": "", "documentation_name": "source", "column_name": "source"}, {"documentation_package": "", "documentation_name": "source_bucket", "column_name": "source_bucket"}, {"documentation_package": "", "documentation_name": "created_at", "column_name": "created_at"}, {"documentation_package": "", "documentation_name": "url", "column_name": "url"}, {"documentation_package": "", "documentation_name": "text", "column_name": "text"}, {"documentation_package": "", "documentation_name": "signup_id", "column_name": "signup_id"}, {"documentation_package": "", "documentation_name": "post_class", "column_name": "post_class"}, {"documentation_package": "", "documentation_name": "is_accepted", "column_name": "is_accepted"}, {"documentation_package": "", "documentation_name": "action_id", "column_name": "action_id"}, {"documentation_package": "", "documentation_name": "location", "column_name": "location"}, {"documentation_package": "", "documentation_name": "postal_code", "column_name": "postal_code"}, {"documentation_package": "", "documentation_name": "is_reportback", "column_name": "is_reportback"}, {"documentation_package": "", "documentation_name": "civic_action", "column_name": "civic_action"}, {"documentation_package": "", "documentation_name": "scholarship_entry", "column_name": "scholarship_entry"}, {"documentation_package": "", "documentation_name": "school_id", "column_name": "school_id"}]}, "model.ds_dbt.signups": {"name": "signups", "root_path": "/Users/mrich/projects/quasar/quasar/dbt", "resource_type": "model", "path": "campaign_activity/signups.sql", "original_file_path": "models/campaign_activity/signups.sql", "package_name": "ds_dbt", "raw_sql": "SELECT\n    sd.northstar_id AS northstar_id,\n    sd.id AS id,\n    sd.campaign_id AS campaign_id,\n    sd.campaign_run_id AS campaign_run_id,\n    sd.why_participated AS why_participated,\n    sd.\"source\" AS \"source\",\n    sd.details,\n\tCASE WHEN sd.\"source\" = 'niche' THEN 'niche'\n\t     WHEN sd.\"source\" ilike '%sms%' THEN 'sms'\n\t     WHEN sd.\"source\" in ('rock-the-vote', 'turbovote') THEN 'voter-reg'\n\t     ELSE 'web' END AS source_bucket,\n    sd.created_at AS created_at,\n    sd.source_details,\n    CASE \n\t\tWHEN source_details ILIKE '%\\}'\n\t\tTHEN (CAST(source_details as json) ->> 'utm_medium') \n\t\tELSE NULL END AS utm_medium,\n\tCASE \n\t\tWHEN source_details ILIKE '%\\}'\n\t\tTHEN (CAST(source_details as json) ->> 'utm_source') \n\t\tELSE NULL END AS utm_source,\n\tCASE \n\t\tWHEN source_details ILIKE '%\\}'\n\t\tTHEN (CAST(source_details as json) ->> 'utm_campaign') \n\t\tELSE NULL END AS utm_campaign\nFROM {{ env_var('FT_ROGUE') }}.signups sd\nWHERE sd._fivetran_deleted = 'false'\nAND sd.deleted_at IS NULL\nAND sd.\"source\" IS DISTINCT FROM 'rogue-oauth'\nAND sd.why_participated IS DISTINCT FROM 'Testing from Ghost Inspector!'", "refs": [], "sources": [], "depends_on": {"nodes": [], "macros": []}, "unique_id": "model.ds_dbt.signups", "empty": false, "fqn": ["ds_dbt", "campaign_activity", "signups"], "tags": [], "config": {"enabled": true, "materialized": "table", "tags": [], "pre-hook": [], "post-hook": [{"sql": "CREATE UNIQUE INDEX IF NOT EXISTS signups_unique ON {{ this }}(created_at, id)", "transaction": true, "index": 0}, {"sql": "GRANT SELECT ON {{ this }} TO dsanalyst", "transaction": true, "index": 1}, {"sql": "GRANT SELECT ON {{ this }} TO looker", "transaction": true, "index": 2}], "quoting": {}, "persist_docs": {}, "vars": {}, "column_types": {}, "alias": "signups"}, "schema": "public", "database": "quasar_prod_warehouse", "alias": "signups", "columns": {"northstar_id": {"name": "northstar_id", "description": "The Northstar ID of the user who generated the event"}, "id": {"name": "id", "description": "Unique identifier for the post"}, "campaign_id": {"name": "campaign_id", "description": "This is a unique identifier for the campaign"}, "campaign_run_id": {"name": "campaign_run_id", "description": "Defined in web events docs. Fix this."}, "why_participated": {"name": "why_participated", "description": "Why the user participated in this action. Entered by the user."}, "source": {"name": "source", "description": "Source of the URL (e.g. SMS, web), origin of the post (e.g. phoenix-web, phoenix-ashes, sms), or source where user was acquired. (e.g. sms, phoenix-next)"}, "details": {"name": "details", "description": "Details about the post. Contains contentfulId and other information (e.g. {\"campaignContentfulId\":\"6ATBgGEQEeJoIcxs1qbwaC\"})"}, "source_bucket": {"name": "source_bucket", "description": "Grouping bucket for origin of the post (e.g. web, sms)"}, "created_at": {"name": "created_at", "description": "When the item was created in UTC (eg. 2018-01-01 12:00:00)"}, "source_details": {"name": "source_details", "description": "Details about the source of the item. This is sometimes represented as a JSON object, and for other tables like Turbovote its represented as a string. (e.g. \"{\"contentful_id\":\"3CTLlXfbwtz1FOMpl31SKV\",\"utm_source\":\"scholarship_listing\",\"utm_medium\":\"referral\",\"utm_campaign\":\"fastweb_2019_08\"}\", newsletter_456)"}, "utm_medium": {"name": "utm_medium", "description": "How the traffic got to the platform (eg. referral, CPC)"}, "utm_source": {"name": "utm_source", "description": "Tracks where the traffic is coming from. (eg. scholarship_listing, Facebook)"}, "utm_campaign": {"name": "utm_campaign", "description": "Tracks which campaign the traffic was generated by. Shows up in Google Analytics as Campaign Name (eg. editorial_newsletter)"}}, "description": "A table containing information about signups", "patch_path": "models/campaign_activity/schema.yml", "docrefs": [{"documentation_package": "", "documentation_name": "northstar_id", "column_name": "northstar_id"}, {"documentation_package": "", "documentation_name": "id", "column_name": "id"}, {"documentation_package": "", "documentation_name": "campaign_id", "column_name": "campaign_id"}, {"documentation_package": "", "documentation_name": "why_participated", "column_name": "why_participated"}, {"documentation_package": "", "documentation_name": "source", "column_name": "source"}, {"documentation_package": "", "documentation_name": "details", "column_name": "details"}, {"documentation_package": "", "documentation_name": "source_bucket", "column_name": "source_bucket"}, {"documentation_package": "", "documentation_name": "created_at", "column_name": "created_at"}, {"documentation_package": "", "documentation_name": "source_details", "column_name": "source_details"}, {"documentation_package": "", "documentation_name": "utm_medium", "column_name": "utm_medium"}, {"documentation_package": "", "documentation_name": "utm_source", "column_name": "utm_source"}, {"documentation_package": "", "documentation_name": "utm_campaign", "column_name": "utm_campaign"}]}, "model.ds_dbt.reportbacks": {"name": "reportbacks", "root_path": "/Users/mrich/projects/quasar/quasar/dbt", "resource_type": "model", "path": "campaign_activity/reportbacks.sql", "original_file_path": "models/campaign_activity/reportbacks.sql", "package_name": "ds_dbt", "raw_sql": "SELECT\n    pd.northstar_id,\n    pd.id as post_id,\n    pd.signup_id,\n    pd.campaign_id,\n    pd.\"action\" as post_action,\n    pd.\"type\" as post_type,\n    pd.status as post_status,\n    pd.post_class,\n    pd.created_at as post_created_at,\n    pd.source as post_source,\n    pd.source_bucket as post_source_bucket,\n    pd.reportback_volume,\n    pd.civic_action,\n    pd.scholarship_entry,\n    pd.location,\n    pd.postal_code,\n    CASE\n        WHEN (pd.post_class ilike '%vote%' AND pd.status = 'confirmed')\n        THEN 'self-reported registrations'\n        WHEN (pd.post_class ilike '%vote%' AND pd.status <> 'confirmed')\n        THEN 'voter_registrations'\n        WHEN pd.\"type\" ilike '%photo%' AND pd.post_class NOT ilike '%vote%'\n        THEN 'photo_rbs'\n        WHEN pd.\"type\" ilike '%text%'\n        THEN 'text_rbs'\n        WHEN pd.\"type\" ilike '%social%'\n        THEN 'social'\n        WHEN pd.\"type\" ilike '%call%'\n        THEN 'phone_calls'\n        ELSE NULL END AS post_bucket\nFROM {{ ref('posts') }} pd\nWHERE pd.id IN\n    (SELECT\n        min(id)\n    FROM {{ ref('posts') }} p\n    WHERE p.is_reportback = 'true' AND p.is_accepted = 1\n    GROUP BY p.northstar_id, p.campaign_id, p.signup_id, p.post_class, p.reportback_volume)", "refs": [["posts"], ["posts"]], "sources": [], "depends_on": {"nodes": ["model.ds_dbt.posts", "model.ds_dbt.posts"], "macros": []}, "unique_id": "model.ds_dbt.reportbacks", "empty": false, "fqn": ["ds_dbt", "campaign_activity", "reportbacks"], "tags": [], "config": {"enabled": true, "materialized": "table", "tags": [], "pre-hook": [], "post-hook": [{"sql": "CREATE UNIQUE INDEX IF NOT EXISTS reportbacks_unique ON {{ this }}(post_id)", "transaction": true, "index": 0}, {"sql": "CREATE INDEX IF NOT EXISTS reportbacks_i ON {{ this }}(post_created_at, campaign_id, post_class, reportback_volume)", "transaction": true, "index": 1}, {"sql": "GRANT SELECT ON {{ this }} TO dsanalyst", "transaction": true, "index": 2}, {"sql": "GRANT SELECT ON {{ this }} TO looker", "transaction": true, "index": 3}], "quoting": {}, "persist_docs": {}, "vars": {}, "column_types": {}, "alias": "reportbacks"}, "schema": "public", "database": "quasar_prod_warehouse", "alias": "reportbacks", "columns": {"northstar_id": {"name": "northstar_id", "description": "The Northstar ID of the user who generated the event"}, "post_id": {"name": "post_id", "description": "Unique identifier for the post"}, "signup_id": {"name": "signup_id", "description": "Unique identifier for the signup"}, "campaign_id": {"name": "campaign_id", "description": "This is a unique identifier for the campaign"}, "post_action": {"name": "post_action", "description": "Post action (e.g. DefendDreamers_Nov9_CongressCalls, GunViolence2018_Feb15_ParklandResponse)"}, "post_type": {"name": "post_type", "description": "Type of post (e.g. photo)"}, "post_status": {"name": "post_status", "description": "Post status (e.g. accepted, rejected)"}, "post_class": {"name": "post_class", "description": "Class of the signup (e.g. \"photo - default\", \"phone-call - DefendDreamers_Jan16_BothBodies\")"}, "post_created_at": {"name": "post_created_at", "description": "When the item was created in UTC (eg. 2018-01-01 12:00:00)"}, "post_source": {"name": "post_source", "description": "Source of the URL (e.g. SMS, web), origin of the post (e.g. phoenix-web, phoenix-ashes, sms), or source where user was acquired. (e.g. sms, phoenix-next)"}, "post_source_bucket": {"name": "post_source_bucket", "description": "Grouping bucket for origin of the post (e.g. web, sms)"}, "reportback_volume": {"name": "reportback_volume", "description": "This field returns 1 if non voter-reg action, since campaigns team only counts those a 1 reportback. If voter-reg action, we want to count quantity of post as number of registered voters."}, "civic_action": {"name": "civic_action", "description": "Whether the post is a Civic Action. The application allows for multiple types of posts."}, "scholarship_entry": {"name": "scholarship_entry", "description": "Whether the post is a Scholarship Entry. The application allows for multiple types of posts."}, "location": {"name": "location", "description": "Location where the action takes place (e.g. US-NY)"}, "postal_code": {"name": "postal_code", "description": "Postal code where the action takes place"}, "post_bucket": {"name": "post_bucket", "description": "Grouping to which a post belongs (e.g. photo_rbs, phone_calls, social)"}}, "description": "A table containing information about reportbacks", "patch_path": "models/campaign_activity/schema.yml", "docrefs": [{"documentation_package": "", "documentation_name": "northstar_id", "column_name": "northstar_id"}, {"documentation_package": "", "documentation_name": "id", "column_name": "post_id"}, {"documentation_package": "", "documentation_name": "signup_id", "column_name": "signup_id"}, {"documentation_package": "", "documentation_name": "campaign_id", "column_name": "campaign_id"}, {"documentation_package": "", "documentation_name": "action", "column_name": "post_action"}, {"documentation_package": "", "documentation_name": "type", "column_name": "post_type"}, {"documentation_package": "", "documentation_name": "status", "column_name": "post_status"}, {"documentation_package": "", "documentation_name": "post_class", "column_name": "post_class"}, {"documentation_package": "", "documentation_name": "created_at", "column_name": "post_created_at"}, {"documentation_package": "", "documentation_name": "source", "column_name": "post_source"}, {"documentation_package": "", "documentation_name": "source_bucket", "column_name": "post_source_bucket"}, {"documentation_package": "", "documentation_name": "reportback_volume", "column_name": "reportback_volume"}, {"documentation_package": "", "documentation_name": "civic_action", "column_name": "civic_action"}, {"documentation_package": "", "documentation_name": "scholarship_entry", "column_name": "scholarship_entry"}, {"documentation_package": "", "documentation_name": "location", "column_name": "location"}, {"documentation_package": "", "documentation_name": "postal_code", "column_name": "postal_code"}]}, "model.ds_dbt.users": {"name": "users", "root_path": "/Users/mrich/projects/quasar/quasar/dbt", "resource_type": "model", "path": "users_table/users.sql", "original_file_path": "models/users_table/users.sql", "package_name": "ds_dbt", "raw_sql": "SELECT\n\tu.id AS northstar_id,\n\tu.created_at,\n\tumax.max_last_auth AS last_logged_in,\n\tumax.max_last_access AS last_accessed,\n\tumax.max_last_message AS last_messaged_at,\n\tu.drupal_id AS drupal_uid,\n\tu.\"source\",\n\tu.email,\n\tu.facebook_id,\n\tu.mobile,\n\tCASE WHEN\n\t\tu.birthdate < '1900-01-01' OR \n\t\tu.birthdate > (date('now') - INTERVAL '10 years') \n\t\tTHEN NULL ELSE u.birthdate END AS birthdate,\n\tu.first_name,\n\tu.last_name,\n\tu.voter_registration_status,\n\tu.addr_street1 AS address_street_1,\n\tu.addr_street2 AS address_street_2,\n\tu.addr_city AS city,\n\tu.addr_state AS state,\n\tu.addr_zip AS zipcode,\n\tu.country,\n\tu.\"language\",\n\temail_status.event_type AS cio_status,\n\temail_status.\"timestamp\" AS cio_status_timestamp,\n\tu.sms_status,\n\tu.source_detail,\n\tsubstring(u.source_detail from '(?<=utm_medium\\:)(\\w*)') AS utm_medium,\n\tsubstring(u.source_detail from '(?<=utm_source\\:)(\\w*)') AS utm_source,\n\tsubstring(u.source_detail from '(?<=utm_campaign\\:)(\\w*)') AS utm_campaign,\n\t(u.feature_flags #>> '{badges}')::boolean as badges,\n\t(u.feature_flags #>> '{refer-friends}')::boolean as refer_friends,\n\t(u.feature_flags #>> '{refer-friends-scholarship}')::boolean as refer_friends_scholarship,\n\tCASE WHEN\n\t\tu.sms_status in ('active','less','pending') OR\n\t\temail_status.event_type = 'customer_subscribed' \n\t\tTHEN TRUE ELSE FALSE END AS subscribed_member,\n\tumax.max_update AS last_updated_at,\n\tu.school_id\nFROM {{ ref('northstar_users_deduped') }} u\nINNER JOIN\n\t(SELECT\n\t\tutemp.id,\n\t\tmax(utemp.updated_at) AS max_update,\n\t\tmax(utemp.last_accessed_at) AS max_last_access,\n\t\tmax(utemp.last_authenticated_at) AS max_last_auth,\n\t\tmax(utemp.last_messaged_at) AS max_last_message\n\tFROM {{ ref('northstar_users_deduped') }} utemp\n\tGROUP BY utemp.id) umax ON umax.id = u.id AND umax.max_update = u.updated_at\nLEFT JOIN {{ ref('cio_latest_status') }} email_status ON email_status.customer_id = u.id\nWHERE\n\t(u.\"source\" IS DISTINCT FROM 'runscope'\n\tAND u.\"source\" IS DISTINCT FROM 'runscope-client'\n\tAND u.email NOT SIMILAR TO '%runscope%@%'\n\tAND u.email NOT SIMILAR TO '%@%dosomething%') OR u.email IS NULL", "refs": [["northstar_users_deduped"], ["northstar_users_deduped"], ["cio_latest_status"]], "sources": [], "depends_on": {"nodes": ["model.ds_dbt.northstar_users_deduped", "model.ds_dbt.northstar_users_deduped", "model.ds_dbt.cio_latest_status"], "macros": []}, "unique_id": "model.ds_dbt.users", "empty": false, "fqn": ["ds_dbt", "users_table", "users"], "tags": [], "config": {"enabled": true, "materialized": "table", "tags": [], "pre-hook": [], "post-hook": [{"sql": "CREATE UNIQUE INDEX IF NOT EXISTS du_indicies ON {{ this }}(northstar_id, created_at, email, mobile, source)", "transaction": true, "index": 0}, {"sql": "GRANT SELECT ON {{ this }} TO dsanalyst", "transaction": true, "index": 1}, {"sql": "GRANT SELECT ON {{ this }} TO looker", "transaction": true, "index": 2}, {"sql": "GRANT SELECT ON {{ this }} TO public", "transaction": true, "index": 3}], "quoting": {}, "persist_docs": {}, "vars": {}, "column_types": {}, "alias": "users"}, "schema": "public", "database": "quasar_prod_warehouse", "alias": "users", "columns": {"northstar_id": {"name": "northstar_id", "description": "The Northstar ID of the user who generated the event"}, "created_at": {"name": "created_at", "description": "When the item was created in UTC (eg. 2018-01-01 12:00:00)"}, "last_logged_in": {"name": "last_logged_in", "description": "Date time in UTC when user last logged in to Northstar"}, "last_accessed": {"name": "last_accessed", "description": "Date time in UTC when user last access the website"}, "last_messaged_at": {"name": "last_messaged_at", "description": "Date time in UTC when user was last sent a message via SMS or email"}, "source": {"name": "source", "description": "Source of the URL (e.g. SMS, web), origin of the post (e.g. phoenix-web, phoenix-ashes, sms), or source where user was acquired. (e.g. sms, phoenix-next)"}, "email": {"name": "email", "description": "Email address of the user."}, "facebook_id": {"name": "facebook_id", "description": "User's facebook id"}, "mobile": {"name": "mobile", "description": "Users's mobile phone number"}, "birthdate": {"name": "birthdate", "description": "User's birthdate"}, "first_name": {"name": "first_name", "description": "User's first name"}, "last_name": {"name": "last_name", "description": "User's last name"}, "voter_registration_status": {"name": "voter_registration_status", "description": "User's registration status. (e.g. registration_complete, confirmed, uncertain)"}, "address_street_1": {"name": "address_street_1", "description": "First line of user's street address"}, "address_street_2": {"name": "address_street_2", "description": "Second line of user's street address"}, "city": {"name": "city", "description": "User's city"}, "state": {"name": "state", "description": "User's state"}, "zipcode": {"name": "zipcode", "description": "Postal code where the action takes place"}, "country": {"name": "country", "description": "User's country"}, "language": {"name": "language", "description": "User's language"}, "cio_status": {"name": "cio_status", "description": "Status of user from CIO. (e.g. customer_subscribed, customer_unsubscribed)"}, "cio_status_timestamp": {"name": "cio_status_timestamp", "description": "Timestamp when users's status was updated."}, "sms_status": {"name": "sms_status", "description": "Current SMS status. (e.g. undeliverable, unknown)"}, "source_detail": {"name": "source_detail", "description": "Details of the origin of the user. (e.g. tell_a_friend, other, opt_in_path/197981)"}, "utm_medium": {"name": "utm_medium", "description": "How the traffic got to the platform (eg. referral, CPC)"}, "utm_source": {"name": "utm_source", "description": "Tracks where the traffic is coming from. (eg. scholarship_listing, Facebook)"}, "utm_campaign": {"name": "utm_campaign", "description": "Tracks which campaign the traffic was generated by. Shows up in Google Analytics as Campaign Name (eg. editorial_newsletter)"}, "badges": {"name": "badges", "description": "Whether the user has any badges."}, "refer_friends": {"name": "refer_friends", "description": "Whether the user is a part of the refer a friend campaign."}, "subscribed_member": {"name": "subscribed_member", "description": "Whether the user is subscribed."}, "last_updated_at": {"name": "last_updated_at", "description": "Timestamp when users's was updated."}, "school_id": {"name": "school_id", "description": "Unique identifier for the user's school. This info comes from the school finder."}}, "description": "A table containing aggregated user data.", "patch_path": "models/users_table/schema.yml", "docrefs": [{"documentation_package": "", "documentation_name": "northstar_id", "column_name": "northstar_id"}, {"documentation_package": "", "documentation_name": "created_at", "column_name": "created_at"}, {"documentation_package": "", "documentation_name": "last_logged_in", "column_name": "last_logged_in"}, {"documentation_package": "", "documentation_name": "last_accessed", "column_name": "last_accessed"}, {"documentation_package": "", "documentation_name": "last_messaged_at", "column_name": "last_messaged_at"}, {"documentation_package": "", "documentation_name": "source", "column_name": "source"}, {"documentation_package": "", "documentation_name": "email", "column_name": "email"}, {"documentation_package": "", "documentation_name": "facebook_id", "column_name": "facebook_id"}, {"documentation_package": "", "documentation_name": "mobile", "column_name": "mobile"}, {"documentation_package": "", "documentation_name": "birthdate", "column_name": "birthdate"}, {"documentation_package": "", "documentation_name": "first_name", "column_name": "first_name"}, {"documentation_package": "", "documentation_name": "last_name", "column_name": "last_name"}, {"documentation_package": "", "documentation_name": "voter_registration_status", "column_name": "voter_registration_status"}, {"documentation_package": "", "documentation_name": "address_street_1", "column_name": "address_street_1"}, {"documentation_package": "", "documentation_name": "address_street_2", "column_name": "address_street_2"}, {"documentation_package": "", "documentation_name": "city", "column_name": "city"}, {"documentation_package": "", "documentation_name": "state", "column_name": "state"}, {"documentation_package": "", "documentation_name": "postal_code", "column_name": "zipcode"}, {"documentation_package": "", "documentation_name": "country", "column_name": "country"}, {"documentation_package": "", "documentation_name": "language", "column_name": "language"}, {"documentation_package": "", "documentation_name": "cio_status", "column_name": "cio_status"}, {"documentation_package": "", "documentation_name": "cio_status_timestamp", "column_name": "cio_status_timestamp"}, {"documentation_package": "", "documentation_name": "sms_status", "column_name": "sms_status"}, {"documentation_package": "", "documentation_name": "source_detail", "column_name": "source_detail"}, {"documentation_package": "", "documentation_name": "utm_medium", "column_name": "utm_medium"}, {"documentation_package": "", "documentation_name": "utm_source", "column_name": "utm_source"}, {"documentation_package": "", "documentation_name": "utm_campaign", "column_name": "utm_campaign"}, {"documentation_package": "", "documentation_name": "badges", "column_name": "badges"}, {"documentation_package": "", "documentation_name": "refer_friends", "column_name": "refer_friends"}, {"documentation_package": "", "documentation_name": "subscribed_member", "column_name": "subscribed_member"}, {"documentation_package": "", "documentation_name": "last_updated_at", "column_name": "last_updated_at"}, {"documentation_package": "", "documentation_name": "school_id", "column_name": "school_id"}]}, "model.ds_dbt.cio_latest_status": {"name": "cio_latest_status", "root_path": "/Users/mrich/projects/quasar/quasar/dbt", "resource_type": "model", "path": "users_table/cio_latest_status.sql", "original_file_path": "models/users_table/cio_latest_status.sql", "package_name": "ds_dbt", "raw_sql": "SELECT \n\tcio.customer_id,\n\tmax(CASE WHEN \n\t\t\tcio.event_type = 'customer_unsubscribed' \n\t\t\tTHEN 'customer_unsubscribed' \n\t\t\tELSE 'customer_subscribed' END) AS event_type,\n\tmax(cio.\"timestamp\") AS \"timestamp\"\nFROM cio.customer_event cio\nINNER JOIN \n\t(SELECT \n\t\tctemp.customer_id,\n\t\tmax(ctemp.\"timestamp\") AS max_update\n\tFROM cio.customer_event ctemp\n\tGROUP BY ctemp.customer_id) cio_max \n\t\tON cio_max.customer_id = cio.customer_id \n\t\tAND cio_max.max_update = cio.\"timestamp\"\nGROUP BY cio.customer_id", "refs": [], "sources": [], "depends_on": {"nodes": [], "macros": []}, "unique_id": "model.ds_dbt.cio_latest_status", "empty": false, "fqn": ["ds_dbt", "users_table", "cio_latest_status"], "tags": [], "config": {"enabled": true, "materialized": "table", "tags": [], "pre-hook": [], "post-hook": [{"sql": "CREATE INDEX IF NOT EXISTS cio_indices ON {{ this }}(customer_id)", "transaction": true, "index": 0}, {"sql": "GRANT SELECT ON {{ this }} TO dsanalyst", "transaction": true, "index": 1}, {"sql": "GRANT SELECT ON {{ this }} TO looker", "transaction": true, "index": 2}], "quoting": {}, "persist_docs": {}, "vars": {}, "column_types": {}, "alias": "cio_latest_status"}, "schema": "public", "database": "quasar_prod_warehouse", "alias": "cio_latest_status", "columns": {"customer_id": {"name": "customer_id", "description": "This customer_id we set when we send data to Customer.io, and is the Northstar ID of the user. 'The Northstar ID of the user who generated the event'"}, "event_type": {"name": "event_type", "description": "Type of event (pv = 'Page View', se = 'Structured Event')"}, "timestamp": {"name": "timestamp", "description": "When the event occurred in UTC (eg. 2018-01-01 12:00:00)"}}, "description": "Table containing users' latest status from CIO API.", "patch_path": "models/users_table/schema.yml", "docrefs": [{"documentation_package": "", "documentation_name": "northstar_id", "column_name": "customer_id"}, {"documentation_package": "", "documentation_name": "event_type", "column_name": "event_type"}, {"documentation_package": "", "documentation_name": "event_datetime", "column_name": "timestamp"}]}, "model.ds_dbt.northstar_users_raw": {"name": "northstar_users_raw", "root_path": "/Users/mrich/projects/quasar/quasar/dbt", "resource_type": "model", "path": "users_table/northstar_users_raw.sql", "original_file_path": "models/users_table/northstar_users_raw.sql", "package_name": "ds_dbt", "raw_sql": "SELECT\n\tnus._id AS northstar_id,\n\tnus.country,\n\tnus.birthdate,\n\tnus.drupal_id::VARCHAR,\n\tnus.email_subscription_status::int::bool,\n\tnus.created_at,\n\tnus.addr_zip,\n\tnus.\"language\",\n\tnus.\"source\",\n\tnus.updated_at,\n\tnus.CAMPAIGNS::jsonb,\n\tnus.audit::jsonb,\n\tnus.first_name,\n\tnus.email,\n\tnus.last_name,\n\tnus.addr_state,\n\tnus.addr_street_2,\n\tnus.addr_street_1,\n\tnus.addr_city,\n\tnus.\"role\",\n\tnus.sms_status,\n\tnus.last_authenticated_at,\n\tnus.last_accessed_at,\n\tnus.mobile,\n\tnus.cio_backfilled,\n\tnus.addr_source,\n\tnus.source_detail,\n\tnus.last_messaged_at,\n\tnus.email_subscription_topics::jsonb,\n\tnus.sms_paused,\n\tnus.voting_plan_status,\n\tnus.voting_plan_time_of_day,\n\tnus.voting_plan_method_of_transport,\n\tnus.voting_plan_attending_with,\n\tnus.voter_registration_status,\n\tnus.facebook_id::varchar,\n\tnus.deleted_at::jsonb,\n\tnus.feature_flags::jsonb,\n\tnus.dbt_scd_id,\n\tnus.dbt_updated_at,\n\tnus.dbt_valid_from,\n\tnus.dbt_valid_to,\n\tnus.google_id,\n\tnus.causes::jsonb,\n\tnus.school_id\nFROM {{ env_var('NORTHSTAR_FT_SCHEMA') }}.northstar_users_snapshot nus\nUNION ALL\nSELECT\n\tnu.id,\n\tnu.country,\n\tnu.birthdate,\n\tnu.drupal_id,\n\tnu.email_subscription_status,\n\tnu.created_at,\n\tnu.addr_zip,\n\tnu.\"language\",\n\tnu.\"source\",\n\tnu.updated_at,\n\tNULL AS CAMPAIGNS,\n\tNULL AS AUDIT,\n\tnu.first_name,\n\tnu.email,\n\tnu.last_name,\n\tnu.addr_state,\n\tnu.addr_street2,\n\tnu.addr_street1,\n\tnu.addr_city,\n\tnu.\"role\",\n\tnu.sms_status,\n\tnu.last_authenticated_at,\n\tnu.last_accessed_at,\n\tnu.mobile,\n\tNULL AS cio_backfilled,\n\tnu.addr_source, \n\tnu.source_detail, \n\tnu.last_messaged_at,\n\tNULL AS email_subscription_topics,\n\tNULL AS sms_paused,\n\tNULL AS voting_plan_status,\n\tNULL AS voting_plan_time_of_day,\n\tNULL AS voting_plan_method_of_transport,\n\tNULL AS voting_plan_attending_with,\n\tNULL AS voter_registration_status,\n\tnu.facebook_id,\n\tNULL AS DELETED_AT,\n\tnu.feature_flags::jsonb,\n\tNULL AS dbt_scd_id,\n\tNULL AS dbt_updated_at,\n\tNULL AS dbt_valid_from,\n\tNULL AS dbt_valid_to,\n\tNULL AS google_id,\n\tNULL AS causes,\n\tnu.school_id\nFROM {{ source('northstar', 'users') }} nu", "refs": [], "sources": [["northstar", "users"]], "depends_on": {"nodes": ["source.ds_dbt.northstar.users"], "macros": []}, "unique_id": "model.ds_dbt.northstar_users_raw", "empty": false, "fqn": ["ds_dbt", "users_table", "northstar_users_raw"], "tags": [], "config": {"enabled": true, "materialized": "table", "tags": [], "pre-hook": [], "post-hook": [{"sql": "CREATE INDEX IF NOT EXISTS northstar_users_raw_northstar_id_updated_at_i ON {{ this }}(northstar_id, updated_at)", "transaction": true, "index": 0}, {"sql": "CREATE INDEX IF NOT EXISTS northstar_users_raw_northstar_id_updated_at_dbt_scd_id_idx ON {{ this }}(northstar_id DESC, updated_at DESC, dbt_scd_id DESC)", "transaction": true, "index": 1}, {"sql": "GRANT SELECT ON {{ this }} TO dsanalyst", "transaction": true, "index": 2}, {"sql": "GRANT SELECT ON {{ this }} TO looker", "transaction": true, "index": 3}, {"sql": "GRANT SELECT ON {{ this }} TO public", "transaction": true, "index": 4}], "quoting": {}, "persist_docs": {}, "vars": {}, "column_types": {}, "alias": "northstar_users_raw"}, "schema": "public", "database": "quasar_prod_warehouse", "alias": "northstar_users_raw", "columns": {"northstar_id": {"name": "northstar_id", "description": "The Northstar ID of the user who generated the event"}, "country": {"name": "country", "description": "User's country"}, "birthdate": {"name": "birthdate", "description": "User's birthdate"}, "drupal_id": {"name": "drupal_id", "description": "Old Drupal user ID"}, "email_subscription_status": {"name": "email_subscription_status", "description": "Email subscription status of the user"}, "created_at": {"name": "created_at", "description": "When the item was created in UTC (eg. 2018-01-01 12:00:00)"}, "addr_zip": {"name": "addr_zip", "description": "Postal code where the action takes place"}, "language": {"name": "language", "description": "User's language"}, "source": {"name": "source", "description": "Source of the URL (e.g. SMS, web), origin of the post (e.g. phoenix-web, phoenix-ashes, sms), or source where user was acquired. (e.g. sms, phoenix-next)"}, "updated_at": {"name": "updated_at", "description": "When the item was updated in UTC (eg. 2018-01-01 12:00:00)"}, "campaigns": {"name": "campaigns", "description": "Campaigns a user is signed up for."}, "audit": {"name": "audit", "description": "A very useful field with data containing information about changes to a user, e.g. timestamps when the user subscribed and unsubscribed."}, "first_name": {"name": "first_name", "description": "User's first name"}, "email": {"name": "email", "description": "Email address of the user."}, "last_name": {"name": "last_name", "description": "User's last name"}, "addr_state": {"name": "addr_state", "description": "User's state"}, "addr_street_2": {"name": "addr_street_2", "description": "Second line of user's street address"}, "addr_street_1": {"name": "addr_street_1", "description": "First line of user's street address"}, "addr_city": {"name": "addr_city", "description": "User's city"}, "role": {"name": "role", "description": "User's role, e.g. user, staff"}, "sms_status": {"name": "sms_status", "description": "Current SMS status. (e.g. undeliverable, unknown)"}, "last_authenticated_at": {"name": "last_authenticated_at", "description": "Date time in UTC when user last logged in to Northstar"}, "last_accessed": {"name": "last_accessed", "description": "Date time in UTC when user last access the website"}, "mobile": {"name": "mobile", "description": "Users's mobile phone number"}, "cio_backfilled": {"name": "cio_backfilled", "description": "Whether this user's data was backfilled from CIO"}, "addr_source": {"name": "addr_source", "description": "Where the user submitted their address, e.g. sms, GDPR"}, "source_detail": {"name": "source_detail", "description": "Details of the origin of the user. (e.g. tell_a_friend, other, opt_in_path/197981)"}, "last_messaged_at": {"name": "last_messaged_at", "description": "Date time in UTC when user was last sent a message via SMS or email"}, "email_subscription_topics": {"name": "email_subscription_topics", "description": "Email subscription topics correspond to categories in CIO in which the user is interested. e.g. lifestyle, community, scholarship"}, "sms_paused": {"name": "sms_paused", "description": "Whether we've paused sending sms messages to the user."}, "voting_plan_status": {"name": "voting_plan_status", "description": "The indication of the user's plan to vote, e.g. voting, not_voting, cant_vote"}, "voting_plan_time_of_day": {"name": "voting_plan_time_of_day", "description": "The time of day when the user plans to vote, e.g morning, afternoon, evening"}, "voting_plan_method_of_transport": {"name": "voting_plan_method_of_transport", "description": "How the user plans to get to their polling place. e.g. walk, drive"}, "voting_plan_attending_with": {"name": "voting_plan_attending_with", "description": "With Whom the user plans to go voting, e.g. family, friends, alone"}, "voter_registration_status": {"name": "voter_registration_status", "description": "User's registration status. (e.g. registration_complete, confirmed, uncertain)"}, "facebook_id": {"name": "facebook_id", "description": "User's facebook id"}, "deleted_at": {"name": "deleted_at", "description": "Date time in UTC when a user deleted their post."}, "feature_flags": {"name": "feature_flags", "description": "JSON containing info on features like badges and refer-a-friend."}, "dbt_scd_id": {"name": "dbt_scd_id", "description": "DBT snapshot table data. A unique key generated for each snapshotted record."}, "dbt_updated_at": {"name": "dbt_updated_at", "description": "DBT snapshot table data. The updated_at timestamp of the source record when this snapshot row was inserted."}, "dbt_valid_from": {"name": "dbt_valid_from", "description": "DBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this snapshot row was first inserted"}, "dbt_valid_to": {"name": "dbt_valid_to", "description": "DBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this row row became invalidated."}, "google_id": {"name": "google_id", "description": "User's Google ID obtained from login."}, "causes": {"name": "causes", "description": "Causes in which a user is interested. e.g. animal welfare, education, mental_health"}, "school_id": {"name": "school_id", "description": "Unique identifier for the user's school. This info comes from the school finder."}}, "description": "A table containing aggregated user data.", "patch_path": "models/users_table/schema.yml", "docrefs": [{"documentation_package": "", "documentation_name": "northstar_id", "column_name": "northstar_id"}, {"documentation_package": "", "documentation_name": "country", "column_name": "country"}, {"documentation_package": "", "documentation_name": "birthdate", "column_name": "birthdate"}, {"documentation_package": "", "documentation_name": "drupal_id", "column_name": "drupal_id"}, {"documentation_package": "", "documentation_name": "email_subscription_status", "column_name": "email_subscription_status"}, {"documentation_package": "", "documentation_name": "created_at", "column_name": "created_at"}, {"documentation_package": "", "documentation_name": "postal_code", "column_name": "addr_zip"}, {"documentation_package": "", "documentation_name": "language", "column_name": "language"}, {"documentation_package": "", "documentation_name": "source", "column_name": "source"}, {"documentation_package": "", "documentation_name": "updated_at", "column_name": "updated_at"}, {"documentation_package": "", "documentation_name": "campaigns", "column_name": "campaigns"}, {"documentation_package": "", "documentation_name": "audit", "column_name": "audit"}, {"documentation_package": "", "documentation_name": "first_name", "column_name": "first_name"}, {"documentation_package": "", "documentation_name": "email", "column_name": "email"}, {"documentation_package": "", "documentation_name": "last_name", "column_name": "last_name"}, {"documentation_package": "", "documentation_name": "state", "column_name": "addr_state"}, {"documentation_package": "", "documentation_name": "address_street_2", "column_name": "addr_street_2"}, {"documentation_package": "", "documentation_name": "address_street_1", "column_name": "addr_street_1"}, {"documentation_package": "", "documentation_name": "city", "column_name": "addr_city"}, {"documentation_package": "", "documentation_name": "role", "column_name": "role"}, {"documentation_package": "", "documentation_name": "sms_status", "column_name": "sms_status"}, {"documentation_package": "", "documentation_name": "last_logged_in", "column_name": "last_authenticated_at"}, {"documentation_package": "", "documentation_name": "last_accessed", "column_name": "last_accessed"}, {"documentation_package": "", "documentation_name": "mobile", "column_name": "mobile"}, {"documentation_package": "", "documentation_name": "cio_backfilled", "column_name": "cio_backfilled"}, {"documentation_package": "", "documentation_name": "addr_source", "column_name": "addr_source"}, {"documentation_package": "", "documentation_name": "source_detail", "column_name": "source_detail"}, {"documentation_package": "", "documentation_name": "last_messaged_at", "column_name": "last_messaged_at"}, {"documentation_package": "", "documentation_name": "email_subscription_topics", "column_name": "email_subscription_topics"}, {"documentation_package": "", "documentation_name": "sms_paused", "column_name": "sms_paused"}, {"documentation_package": "", "documentation_name": "voting_plan_status", "column_name": "voting_plan_status"}, {"documentation_package": "", "documentation_name": "voting_plan_time_of_day", "column_name": "voting_plan_time_of_day"}, {"documentation_package": "", "documentation_name": "voting_plan_method_of_transport", "column_name": "voting_plan_method_of_transport"}, {"documentation_package": "", "documentation_name": "voting_plan_attending_with", "column_name": "voting_plan_attending_with"}, {"documentation_package": "", "documentation_name": "voter_registration_status", "column_name": "voter_registration_status"}, {"documentation_package": "", "documentation_name": "facebook_id", "column_name": "facebook_id"}, {"documentation_package": "", "documentation_name": "deleted_at", "column_name": "deleted_at"}, {"documentation_package": "", "documentation_name": "feature_flags", "column_name": "feature_flags"}, {"documentation_package": "", "documentation_name": "dbt_scd_id", "column_name": "dbt_scd_id"}, {"documentation_package": "", "documentation_name": "dbt_updated_at", "column_name": "dbt_updated_at"}, {"documentation_package": "", "documentation_name": "dbt_valid_from", "column_name": "dbt_valid_from"}, {"documentation_package": "", "documentation_name": "dbt_valid_to", "column_name": "dbt_valid_to"}, {"documentation_package": "", "documentation_name": "google_id", "column_name": "google_id"}, {"documentation_package": "", "documentation_name": "causes", "column_name": "causes"}, {"documentation_package": "", "documentation_name": "school_id", "column_name": "school_id"}]}, "model.ds_dbt.northstar_users_deduped": {"name": "northstar_users_deduped", "root_path": "/Users/mrich/projects/quasar/quasar/dbt", "resource_type": "model", "path": "users_table/northstar_users_deduped.sql", "original_file_path": "models/users_table/northstar_users_deduped.sql", "package_name": "ds_dbt", "raw_sql": "SELECT DISTINCT ON (northstar_id, updated_at) *\nFROM {{ ref('northstar_users_raw') }}", "refs": [["northstar_users_raw"]], "sources": [], "depends_on": {"nodes": ["model.ds_dbt.northstar_users_raw"], "macros": []}, "unique_id": "model.ds_dbt.northstar_users_deduped", "empty": false, "fqn": ["ds_dbt", "users_table", "northstar_users_deduped"], "tags": [], "config": {"enabled": true, "materialized": "table", "tags": [], "pre-hook": [], "post-hook": [{"sql": "CREATE INDEX IF NOT EXISTS northstar_users_deduped_northstar_id_updated_at_i ON {{ this }}(northstar_id, updated_at)", "transaction": true, "index": 0}, {"sql": "GRANT SELECT ON {{ this }} TO dsanalyst", "transaction": true, "index": 1}, {"sql": "GRANT SELECT ON {{ this }} TO looker", "transaction": true, "index": 2}, {"sql": "GRANT SELECT ON {{ this }} TO public", "transaction": true, "index": 3}], "quoting": {}, "persist_docs": {}, "vars": {}, "column_types": {}, "alias": "northstar_users_deduped"}, "schema": "public", "database": "quasar_prod_warehouse", "alias": "northstar_users_deduped", "columns": {}, "description": ""}, "model.ds_dbt.bertly_clicks": {"name": "bertly_clicks", "root_path": "/Users/mrich/projects/quasar/quasar/dbt", "resource_type": "model", "path": "bertly/bertly_clicks.sql", "original_file_path": "models/bertly/bertly_clicks.sql", "package_name": "ds_dbt", "raw_sql": "SELECT\n    *,\n    (regexp_split_to_array(\n        (regexp_split_to_array(\n            (regexp_split_to_array(\n                c.target_url, 'user')\n            )[2], E'[=:]+')\n        )[2],\n        E'[^a-zA-Z0-9]')\n    )[1] AS northstar_id,\n    COALESCE(\n        (regexp_split_to_array(c.target_url, 'broadcastid=', 'i'))[2],\n        (regexp_split_to_array(c.target_url, 'broadcastid_', 'i'))[2],\n        (regexp_split_to_array(c.target_url, 'broadcast_id=', 'i'))[2],\n        (regexp_split_to_array(c.target_url, 'broadcast_id_', 'i'))[2],\n        (regexp_split_to_array(c.target_url, 'broadcast_', 'i'))[2]\n            ) AS broadcast_id,\n    (CASE WHEN target_url ilike '%source=web%' THEN 'web'\n        WHEN target_url ilike '%source=email%' THEN 'email'\n        ELSE 'sms'\n        END) AS SOURCE,\n    CASE\n        WHEN c.user_agent IS NULL THEN 'uncertain'\n        WHEN c.user_agent ILIKE '%facebot twitterbot%'\n                OR c.user_agent ILIKE '%X11; Ubuntu; Linux i686%' THEN 'preview'\n        ELSE 'click' END AS interaction_type\nFROM {{ env_var('BERTLY') }}.clicks c", "refs": [], "sources": [], "depends_on": {"nodes": [], "macros": []}, "unique_id": "model.ds_dbt.bertly_clicks", "empty": false, "fqn": ["ds_dbt", "bertly", "bertly_clicks"], "tags": [], "config": {"enabled": true, "materialized": "table", "tags": [], "pre-hook": [], "post-hook": [{"sql": "CREATE UNIQUE INDEX IF NOT EXISTS clicks_unique ON {{ this }}(click_id)", "transaction": true, "index": 0}, {"sql": "GRANT SELECT ON {{ this }} TO dsanalyst", "transaction": true, "index": 1}, {"sql": "GRANT SELECT ON {{ this }} TO looker", "transaction": true, "index": 2}], "quoting": {}, "persist_docs": {}, "vars": {}, "column_types": {}, "alias": "bertly_clicks"}, "schema": "public", "database": "quasar_prod_warehouse", "alias": "bertly_clicks", "columns": {"click_id": {"name": "click_id", "description": "This is a unique identifier for each click"}, "click_time": {"name": "click_time", "description": "Timestamp when user clicked."}, "shortened": {"name": "shortened", "description": "Shortened URL"}, "target_url": {"name": "target_url", "description": "URL where the user will be directed"}, "user_agent": {"name": "user_agent", "description": "Full user agent string for a user's browser (e.g. \"Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:24.0) Gecko/20100101 Firefox/24.0\")"}, "northstar_id": {"name": "northstar_id", "description": "The Northstar ID of the user who generated the event"}, "broadcast_id": {"name": "broadcast_id", "description": "ID of the broadcast that generated the shortened URL"}, "source": {"name": "source", "description": "Source of the URL (e.g. SMS, web), origin of the post (e.g. phoenix-web, phoenix-ashes, sms), or source where user was acquired. (e.g. sms, phoenix-next)"}, "interaction_type": {"name": "interaction_type", "description": "How the user interacted with the link (e.g. preview, click)"}}, "description": "Table containing data from Bertly, our serverless link shortener.", "patch_path": "models/bertly/schema.yml", "docrefs": [{"documentation_package": "", "documentation_name": "click_id", "column_name": "click_id"}, {"documentation_package": "", "documentation_name": "click_time", "column_name": "click_time"}, {"documentation_package": "", "documentation_name": "shortened", "column_name": "shortened"}, {"documentation_package": "", "documentation_name": "target_url", "column_name": "target_url"}, {"documentation_package": "", "documentation_name": "user_agent", "column_name": "user_agent"}, {"documentation_package": "", "documentation_name": "northstar_id", "column_name": "northstar_id"}, {"documentation_package": "", "documentation_name": "broadcast_id", "column_name": "broadcast_id"}, {"documentation_package": "", "documentation_name": "source", "column_name": "source"}, {"documentation_package": "", "documentation_name": "interaction_type", "column_name": "interaction_type"}]}, "model.ds_dbt.user_activity": {"name": "user_activity", "root_path": "/Users/mrich/projects/quasar/quasar/dbt", "resource_type": "model", "path": "user_activity/user_activity.sql", "original_file_path": "models/user_activity/user_activity.sql", "package_name": "ds_dbt", "raw_sql": "WITH\nrb_summary AS (\n    SELECT\n\tr_with_lag.northstar_id,\n\tsum(r_with_lag.reportback_volume) AS total_quantity,\n\tcount(DISTINCT r_with_lag.campaign_id) AS num_rbs,\n\tmax(r_with_lag.post_created_at) AS most_recent_rb,\n\tmin(r_with_lag.post_created_at) AS first_rb,\n\tavg(r_with_lag.time_betw_rbs) AS avg_time_betw_rbs\n    FROM (\n\tSELECT\n\t    *,\n\t    post_created_at - lag(post_created_at) OVER (\n\t\tPARTITION BY northstar_id ORDER BY post_created_at) AS time_betw_rbs\n\tFROM {{ ref('reportbacks') }}\n    ) r_with_lag\n    GROUP BY r_with_lag.northstar_id\n),\ngambit_unsub AS (\n    SELECT\n\tf.user_id,\n\tCASE WHEN f.last_macro = 'subscriptionStatusStop' OR f.last_topic = 'unsubscribed'\n\tTHEN f.last_ts ELSE NULL END AS unsub_ts\n    FROM (\n\tSELECT DISTINCT\n\t    user_id,\n\t    LAST_VALUE(macro) OVER (PARTITION BY user_id ORDER BY created_at\n\t\tRANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS last_macro,\n\t    LAST_VALUE(topic) OVER (PARTITION BY user_id ORDER BY created_at\n\t\tRANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS last_topic,\n\t    LAST_VALUE(created_at) OVER (PARTITION BY user_id ORDER BY created_at\n\t\tRANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS last_ts\n\tFROM {{ ref('gambit_messages_inbound') }}\n    ) f\n),\nsms_undeliverable AS (\n    SELECT DISTINCT\n\t    id,\n\t    FIRST_VALUE(updated_at) OVER (PARTITION BY id ORDER BY updated_at\n\t\tROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS unsub_ts\n    FROM {{ ref('northstar_users_deduped') }}\n    WHERE sms_status IN ('unknown', 'undeliverable', 'GDPR')\n),\nemail_unsub AS (\n    SELECT\n\tf.customer_id,\n\tCASE WHEN f.last_status = 'customer_unsubscribed' THEN f.last_ts ELSE NULL\n\t    END AS email_unsubscribed_at\n    FROM (\n\tSELECT DISTINCT\n\t    customer_id,\n\t    LAST_VALUE(\"timestamp\") OVER (\n\t\tPARTITION BY customer_id ORDER BY \"timestamp\", event_type\n\t\tRANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS last_ts,\n\t    LAST_VALUE(event_type) OVER (\n\t\tPARTITION BY customer_id ORDER BY \"timestamp\", event_type\n\t\tRANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS last_status\n\t    FROM cio.customer_event\n    ) f\n),\ntime_to_actions AS (\n    SELECT\n\tf.northstar_id,\n\tavg(date_part('day', f.time_to_next_action)) AS avg_days_next_action_after_rb,\n\tmin(date_part('day', f.time_to_next_action_last_rb)) AS days_to_next_action_after_last_rb\n    FROM (\n\tSELECT\n\t    r.northstar_id,\n\t    mel.next_action_ts - r.post_created_at AS time_to_next_action,\n\t    LAST_VALUE(mel.next_action_ts - r.post_created_at) OVER (\n\t\tPARTITION BY r.northstar_id ORDER BY r.post_created_at\n\t\tROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING\n\t    ) AS time_to_next_action_last_rb\n\tFROM {{ ref('reportbacks') }} r\n\tLEFT JOIN LATERAL (\n\t    SELECT \"timestamp\" AS next_action_ts, action_type AS next_action_type\n\t    FROM {{ ref('member_event_log') }}\n\t    WHERE northstar_id = r.northstar_id AND \"timestamp\" > r.post_created_at\n\t    ORDER BY \"timestamp\" ASC\n\t    LIMIT 1\n\t) mel\n\tON TRUE\n    ) f\n    GROUP BY f.northstar_id\n)\nSELECT\nu.northstar_id,\nu.created_at,\nu.sms_status,\nu.cio_status AS email_status,\ns.num_signups,\ns.most_recent_signup,\nr.num_rbs,\nr.total_quantity,\nr.most_recent_rb,\nr.first_rb,\nr.avg_time_betw_rbs,\ntime_to_actions.avg_days_next_action_after_rb,\ntime_to_actions.days_to_next_action_after_last_rb,\nmel.most_recent_action AS most_recent_mam_action,\nemail_opens.most_recent_email_open,\ngreatest(\n    mel.most_recent_action,\n    email_opens.most_recent_email_open\n) AS most_recent_all_actions,\nCASE WHEN time_to_actions.days_to_next_action_after_last_rb IS NULL\n    AND r.num_rbs > 0 THEN TRUE END AS last_action_is_rb,\nDATE_PART(\n    'day', now() - greatest(mel.most_recent_action, email_opens.most_recent_email_open)\n) as days_since_last_action,\n(r.first_rb - u.created_at) AS time_to_first_rb,\nCOALESCE(gambit_unsub.unsub_ts, sms_undeliverable.unsub_ts) AS sms_unsubscribed_at,\nemail_unsub.email_unsubscribed_at,\nCASE WHEN u.subscribed_member IS FALSE\n    THEN greatest(\n\tgambit_unsub.unsub_ts,\n\tsms_undeliverable.unsub_ts,\n\temail_unsub.email_unsubscribed_at) ELSE NULL\n    END AS user_unsubscribed_at,\nCASE WHEN u.\"source\" = 'importer-client' AND p.first_post = 'voter-reg'\n    THEN 1 ELSE 0 END AS voter_reg_acquisition\nFROM {{ ref('users') }} u\nLEFT JOIN (\nSELECT\n    northstar_id,\n    count(DISTINCT campaign_id) AS num_signups,\n    max(created_at) AS most_recent_signup\nFROM {{ ref('signups') }}\nGROUP BY northstar_id\n) s\nON u.northstar_id = s.northstar_id\nLEFT JOIN rb_summary r\nON u.northstar_id = r.northstar_id\nLEFT JOIN (\n    SELECT northstar_id, max(\"timestamp\") AS most_recent_action\n    FROM {{ ref('member_event_log') }}\n    GROUP BY northstar_id\n) mel\nON u.northstar_id = mel.northstar_id\nLEFT JOIN (\n    SELECT customer_id, max(\"timestamp\") AS most_recent_email_open\n    FROM cio.email_event\n    WHERE event_type = 'email_opened'\n    GROUP BY customer_id\n) email_opens\nON u.northstar_id = email_opens.customer_id\nLEFT JOIN gambit_unsub\nON u.northstar_id = gambit_unsub.user_id\nLEFT JOIN sms_undeliverable\nON u.northstar_id = sms_undeliverable.id\nLEFT JOIN email_unsub\nON u.northstar_id = email_unsub.customer_id\nLEFT JOIN time_to_actions\nON u.northstar_id = time_to_actions.northstar_id\nLEFT JOIN (\n    SELECT DISTINCT\n\tnorthstar_id,\n\tFIRST_VALUE(\"type\") OVER (\n\t    PARTITION BY northstar_id ORDER BY created_at) AS first_post\n    FROM {{ ref('posts') }}\n) p\nON u.northstar_id = p.northstar_id", "refs": [["reportbacks"], ["gambit_messages_inbound"], ["northstar_users_deduped"], ["reportbacks"], ["member_event_log"], ["users"], ["signups"], ["member_event_log"], ["posts"]], "sources": [], "depends_on": {"nodes": ["model.ds_dbt.reportbacks", "model.ds_dbt.gambit_messages_inbound", "model.ds_dbt.northstar_users_deduped", "model.ds_dbt.reportbacks", "model.ds_dbt.member_event_log", "model.ds_dbt.users", "model.ds_dbt.signups", "model.ds_dbt.member_event_log", "model.ds_dbt.posts"], "macros": []}, "unique_id": "model.ds_dbt.user_activity", "empty": false, "fqn": ["ds_dbt", "user_activity", "user_activity"], "tags": [], "config": {"enabled": true, "materialized": "table", "tags": [], "pre-hook": [], "post-hook": [{"sql": "CREATE UNIQUE INDEX IF NOT EXISTS user_activity_unique_i ON {{ this }}(created_at, northstar_id)", "transaction": true, "index": 0}, {"sql": "CREATE INDEX IF NOT EXISTS most_recent_all_actions_i ON {{ this }}(most_recent_all_actions)", "transaction": true, "index": 1}, {"sql": "GRANT SELECT ON {{ this }} TO dsanalyst", "transaction": true, "index": 2}, {"sql": "GRANT SELECT ON {{ this }} TO looker", "transaction": true, "index": 3}], "quoting": {}, "persist_docs": {}, "vars": {}, "column_types": {}, "alias": "user_activity"}, "schema": "public", "database": "quasar_prod_warehouse", "alias": "user_activity", "columns": {"northstar_id": {"name": "northstar_id", "description": "The Northstar ID of the user who generated the event"}, "created_at": {"name": "created_at", "description": "When the item was created in UTC (eg. 2018-01-01 12:00:00)"}, "sms_status": {"name": "sms_status", "description": "Current SMS status. (e.g. undeliverable, unknown)"}, "email_status": {"name": "email_status", "description": "Status of user from CIO. (e.g. customer_subscribed, customer_unsubscribed)"}, "num_signups": {"name": "num_signups", "description": "Quantity of campaign signups"}, "most_recent_signup": {"name": "most_recent_signup", "description": "Timestamp of the most recent signup in UTC (eg. 2018-01-01 12:00:00)"}, "num_rbs": {"name": "num_rbs", "description": "Quantity of reportbacks for the user"}, "total_quantity": {"name": "total_quantity", "description": "Total quantity of items in reportbacks"}, "most_recent_rb": {"name": "most_recent_rb", "description": "When the most recent reportback occurred in UTC (eg. 2018-01-01 12:00:00)"}, "first_rb": {"name": "first_rb", "description": "When the first reportback occurred in UTC (eg. 2018-01-01 12:00:00)"}, "avg_time_betw_rbs": {"name": "avg_time_betw_rbs", "description": "Calculated average time between reportbacks."}, "avg_days_next_action_after_rb": {"name": "avg_days_next_action_after_rb", "description": "Calculated average days until next action after reportback"}, "days_to_next_action_after_last_rb": {"name": "days_to_next_action_after_last_rb", "description": "This is a unique identifier for each event"}, "most_recent_mam_action": {"name": "most_recent_mam_action", "description": "Most recent monthly active member qualifying action in UTC (eg. 2018-01-01 12:00:00)."}, "most_recent_email_open": {"name": "most_recent_email_open", "description": "Most recent email open in UTC (eg. 2018-01-01 12:00:00)"}, "most_recent_all_actions": {"name": "most_recent_all_actions", "description": "Most recent timestamp of any action in UTC (eg. 2018-01-01 12:00:00)"}, "last_action_is_rb": {"name": "last_action_is_rb", "description": "Whether the last action the user took was a reportback"}, "days_since_last_action": {"name": "days_since_last_action", "description": "Days since the user's last action"}, "time_to_first_rb": {"name": "time_to_first_rb", "description": "How much time after registering until the user's first reportback"}, "sms_unsubscribed_at": {"name": "sms_unsubscribed_at", "description": "Timestamp of when user unsubscribed from email or sms"}, "user_unsubscribed_at": {"name": "user_unsubscribed_at", "description": "Timestamp of when user unsubscribed from email or sms"}, "voter_reg_acquisition": {"name": "voter_reg_acquisition", "description": "Whether the user was an acquisition through voter registration efforts."}}, "description": "Table containing aggregated user activity data.", "patch_path": "models/user_activity/schema.yml", "docrefs": [{"documentation_package": "", "documentation_name": "northstar_id", "column_name": "northstar_id"}, {"documentation_package": "", "documentation_name": "created_at", "column_name": "created_at"}, {"documentation_package": "", "documentation_name": "sms_status", "column_name": "sms_status"}, {"documentation_package": "", "documentation_name": "cio_status", "column_name": "email_status"}, {"documentation_package": "", "documentation_name": "num_signups", "column_name": "num_signups"}, {"documentation_package": "", "documentation_name": "most_recent_signup", "column_name": "most_recent_signup"}, {"documentation_package": "", "documentation_name": "num_rbs", "column_name": "num_rbs"}, {"documentation_package": "", "documentation_name": "total_quantity", "column_name": "total_quantity"}, {"documentation_package": "", "documentation_name": "most_recent_rb", "column_name": "most_recent_rb"}, {"documentation_package": "", "documentation_name": "first_rb", "column_name": "first_rb"}, {"documentation_package": "", "documentation_name": "avg_time_betw_rbs", "column_name": "avg_time_betw_rbs"}, {"documentation_package": "", "documentation_name": "avg_days_next_action_after_rb", "column_name": "avg_days_next_action_after_rb"}, {"documentation_package": "", "documentation_name": "days_to_next_action_after_last_rb", "column_name": "days_to_next_action_after_last_rb"}, {"documentation_package": "", "documentation_name": "most_recent_mam_action", "column_name": "most_recent_mam_action"}, {"documentation_package": "", "documentation_name": "most_recent_email_open", "column_name": "most_recent_email_open"}, {"documentation_package": "", "documentation_name": "most_recent_all_actions", "column_name": "most_recent_all_actions"}, {"documentation_package": "", "documentation_name": "last_action_is_rb", "column_name": "last_action_is_rb"}, {"documentation_package": "", "documentation_name": "days_since_last_action", "column_name": "days_since_last_action"}, {"documentation_package": "", "documentation_name": "time_to_first_rb", "column_name": "time_to_first_rb"}, {"documentation_package": "", "documentation_name": "user_unsubscribed_at", "column_name": "sms_unsubscribed_at"}, {"documentation_package": "", "documentation_name": "user_unsubscribed_at", "column_name": "user_unsubscribed_at"}, {"documentation_package": "", "documentation_name": "voter_reg_acquisition", "column_name": "voter_reg_acquisition"}]}, "snapshot.ds_dbt.northstar_users_snapshot": {"name": "northstar_users_snapshot", "root_path": "/Users/mrich/projects/quasar/quasar/dbt", "resource_type": "snapshot", "path": "northstar.sql", "original_file_path": "snapshots/northstar.sql", "package_name": "ds_dbt", "raw_sql": "\n\n    {{\n        config(\n          target_database=env_var(\"NORTHSTAR_TARGET_DB\"),\n          target_schema=env_var(\"NORTHSTAR_FT_SCHEMA\"),\n          unique_key='_id',\n          strategy='timestamp',\n          updated_at='updated_at',\n        )\n    }}\n    \n    select * from {{ env_var('NORTHSTAR_FT_SCHEMA') }}.users\n    \n", "refs": [], "sources": [], "depends_on": {"nodes": [], "macros": []}, "unique_id": "snapshot.ds_dbt.northstar_users_snapshot", "empty": false, "fqn": ["ds_dbt", "northstar_users_snapshot"], "tags": [], "config": {"enabled": true, "materialized": "snapshot", "tags": [], "pre-hook": [], "post-hook": [], "quoting": {}, "persist_docs": {}, "vars": {}, "column_types": {}, "target_database": "quasar_prod_warehouse", "target_schema": "northstar_ft_userapi", "unique_key": "_id", "strategy": "timestamp", "updated_at": "updated_at"}, "schema": "northstar_ft_userapi", "database": "quasar_prod_warehouse", "alias": "northstar_users_snapshot", "columns": {}, "description": ""}, "source.ds_dbt.northstar.users": {"package_name": "ds_dbt", "database": "quasar_prod_warehouse", "schema": "northstar_ft_userapi", "identifier": "users", "root_path": "/Users/mrich/projects/quasar/quasar/dbt", "path": "models/users_table/schema.yml", "original_file_path": "models/users_table/schema.yml", "columns": {}, "unique_id": "source.ds_dbt.northstar.users", "name": "users", "description": "", "source_name": "northstar", "source_description": "", "loader": "", "docrefs": [], "loaded_at_field": null, "freshness": {}, "quoting": {}, "resource_type": "source", "fqn": ["ds_dbt", "northstar", "users"]}, "test.ds_dbt.unique_snowplow_base_event_event_id": {"name": "unique_snowplow_base_event_event_id", "resource_type": "test", "package_name": "ds_dbt", "root_path": "/Users/mrich/projects/quasar/quasar/dbt", "path": "schema_test/unique_snowplow_base_event_event_id.sql", "original_file_path": "models/phoenix_events/schema.yml", "raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(model=ref('snowplow_base_event'), column_name='event_id') }}", "refs": [["snowplow_base_event"]], "sources": [], "depends_on": {"nodes": ["model.ds_dbt.snowplow_base_event"], "macros": []}, "unique_id": "test.ds_dbt.unique_snowplow_base_event_event_id", "empty": false, "fqn": ["ds_dbt", "schema_test", "unique_snowplow_base_event_event_id"], "tags": ["schema"], "config": {"enabled": true, "materialized": "view", "severity": "ERROR", "tags": [], "pre-hook": [], "post-hook": [], "quoting": {}, "persist_docs": {}, "vars": {}, "column_types": {}}, "schema": "public", "database": "quasar_prod_warehouse", "alias": "unique_snowplow_base_event_event_id", "column_name": "event_id", "columns": {}, "description": ""}, "test.ds_dbt.not_null_snowplow_base_event_event_id": {"name": "not_null_snowplow_base_event_event_id", "resource_type": "test", "package_name": "ds_dbt", "root_path": "/Users/mrich/projects/quasar/quasar/dbt", "path": "schema_test/not_null_snowplow_base_event_event_id.sql", "original_file_path": "models/phoenix_events/schema.yml", "raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(model=ref('snowplow_base_event'), column_name='event_id') }}", "refs": [["snowplow_base_event"]], "sources": [], "depends_on": {"nodes": ["model.ds_dbt.snowplow_base_event"], "macros": []}, "unique_id": "test.ds_dbt.not_null_snowplow_base_event_event_id", "empty": false, "fqn": ["ds_dbt", "schema_test", "not_null_snowplow_base_event_event_id"], "tags": ["schema"], "config": {"enabled": true, "materialized": "view", "severity": "ERROR", "tags": [], "pre-hook": [], "post-hook": [], "quoting": {}, "persist_docs": {}, "vars": {}, "column_types": {}}, "schema": "public", "database": "quasar_prod_warehouse", "alias": "not_null_snowplow_base_event_event_id", "column_name": "event_id", "columns": {}, "description": ""}, "test.ds_dbt.unique_snowplow_base_event_event_source": {"name": "unique_snowplow_base_event_event_source", "resource_type": "test", "package_name": "ds_dbt", "root_path": "/Users/mrich/projects/quasar/quasar/dbt", "path": "schema_test/unique_snowplow_base_event_event_source.sql", "original_file_path": "models/phoenix_events/schema.yml", "raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(model=ref('snowplow_base_event'), column_name='event_source') }}", "refs": [["snowplow_base_event"]], "sources": [], "depends_on": {"nodes": ["model.ds_dbt.snowplow_base_event"], "macros": []}, "unique_id": "test.ds_dbt.unique_snowplow_base_event_event_source", "empty": false, "fqn": ["ds_dbt", "schema_test", "unique_snowplow_base_event_event_source"], "tags": ["schema"], "config": {"enabled": true, "materialized": "view", "severity": "ERROR", "tags": [], "pre-hook": [], "post-hook": [], "quoting": {}, "persist_docs": {}, "vars": {}, "column_types": {}}, "schema": "public", "database": "quasar_prod_warehouse", "alias": "unique_snowplow_base_event_event_source", "column_name": "event_source", "columns": {}, "description": ""}, "test.ds_dbt.not_null_snowplow_base_event_event_source": {"name": "not_null_snowplow_base_event_event_source", "resource_type": "test", "package_name": "ds_dbt", "root_path": "/Users/mrich/projects/quasar/quasar/dbt", "path": "schema_test/not_null_snowplow_base_event_event_source.sql", "original_file_path": "models/phoenix_events/schema.yml", "raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(model=ref('snowplow_base_event'), column_name='event_source') }}", "refs": [["snowplow_base_event"]], "sources": [], "depends_on": {"nodes": ["model.ds_dbt.snowplow_base_event"], "macros": []}, "unique_id": "test.ds_dbt.not_null_snowplow_base_event_event_source", "empty": false, "fqn": ["ds_dbt", "schema_test", "not_null_snowplow_base_event_event_source"], "tags": ["schema"], "config": {"enabled": true, "materialized": "view", "severity": "ERROR", "tags": [], "pre-hook": [], "post-hook": [], "quoting": {}, "persist_docs": {}, "vars": {}, "column_types": {}}, "schema": "public", "database": "quasar_prod_warehouse", "alias": "not_null_snowplow_base_event_event_source", "column_name": "event_source", "columns": {}, "description": ""}, "test.ds_dbt.not_null_snowplow_base_event_event_datetime": {"name": "not_null_snowplow_base_event_event_datetime", "resource_type": "test", "package_name": "ds_dbt", "root_path": "/Users/mrich/projects/quasar/quasar/dbt", "path": "schema_test/not_null_snowplow_base_event_event_datetime.sql", "original_file_path": "models/phoenix_events/schema.yml", "raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(model=ref('snowplow_base_event'), column_name='event_datetime') }}", "refs": [["snowplow_base_event"]], "sources": [], "depends_on": {"nodes": ["model.ds_dbt.snowplow_base_event"], "macros": []}, "unique_id": "test.ds_dbt.not_null_snowplow_base_event_event_datetime", "empty": false, "fqn": ["ds_dbt", "schema_test", "not_null_snowplow_base_event_event_datetime"], "tags": ["schema"], "config": {"enabled": true, "materialized": "view", "severity": "ERROR", "tags": [], "pre-hook": [], "post-hook": [], "quoting": {}, "persist_docs": {}, "vars": {}, "column_types": {}}, "schema": "public", "database": "quasar_prod_warehouse", "alias": "not_null_snowplow_base_event_event_datetime", "column_name": "event_datetime", "columns": {}, "description": ""}, "test.ds_dbt.not_null_snowplow_base_event_event_type": {"name": "not_null_snowplow_base_event_event_type", "resource_type": "test", "package_name": "ds_dbt", "root_path": "/Users/mrich/projects/quasar/quasar/dbt", "path": "schema_test/not_null_snowplow_base_event_event_type.sql", "original_file_path": "models/phoenix_events/schema.yml", "raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(model=ref('snowplow_base_event'), column_name='event_type') }}", "refs": [["snowplow_base_event"]], "sources": [], "depends_on": {"nodes": ["model.ds_dbt.snowplow_base_event"], "macros": []}, "unique_id": "test.ds_dbt.not_null_snowplow_base_event_event_type", "empty": false, "fqn": ["ds_dbt", "schema_test", "not_null_snowplow_base_event_event_type"], "tags": ["schema"], "config": {"enabled": true, "materialized": "view", "severity": "ERROR", "tags": [], "pre-hook": [], "post-hook": [], "quoting": {}, "persist_docs": {}, "vars": {}, "column_types": {}}, "schema": "public", "database": "quasar_prod_warehouse", "alias": "not_null_snowplow_base_event_event_type", "column_name": "event_type", "columns": {}, "description": ""}, "test.ds_dbt.not_null_snowplow_base_event_host": {"name": "not_null_snowplow_base_event_host", "resource_type": "test", "package_name": "ds_dbt", "root_path": "/Users/mrich/projects/quasar/quasar/dbt", "path": "schema_test/not_null_snowplow_base_event_host.sql", "original_file_path": "models/phoenix_events/schema.yml", "raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(model=ref('snowplow_base_event'), column_name='host') }}", "refs": [["snowplow_base_event"]], "sources": [], "depends_on": {"nodes": ["model.ds_dbt.snowplow_base_event"], "macros": []}, "unique_id": "test.ds_dbt.not_null_snowplow_base_event_host", "empty": false, "fqn": ["ds_dbt", "schema_test", "not_null_snowplow_base_event_host"], "tags": ["schema"], "config": {"enabled": true, "materialized": "view", "severity": "ERROR", "tags": [], "pre-hook": [], "post-hook": [], "quoting": {}, "persist_docs": {}, "vars": {}, "column_types": {}}, "schema": "public", "database": "quasar_prod_warehouse", "alias": "not_null_snowplow_base_event_host", "column_name": "host", "columns": {}, "description": ""}, "test.ds_dbt.not_null_snowplow_base_event_path": {"name": "not_null_snowplow_base_event_path", "resource_type": "test", "package_name": "ds_dbt", "root_path": "/Users/mrich/projects/quasar/quasar/dbt", "path": "schema_test/not_null_snowplow_base_event_path.sql", "original_file_path": "models/phoenix_events/schema.yml", "raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(model=ref('snowplow_base_event'), column_name='path') }}", "refs": [["snowplow_base_event"]], "sources": [], "depends_on": {"nodes": ["model.ds_dbt.snowplow_base_event"], "macros": []}, "unique_id": "test.ds_dbt.not_null_snowplow_base_event_path", "empty": false, "fqn": ["ds_dbt", "schema_test", "not_null_snowplow_base_event_path"], "tags": ["schema"], "config": {"enabled": true, "materialized": "view", "severity": "ERROR", "tags": [], "pre-hook": [], "post-hook": [], "quoting": {}, "persist_docs": {}, "vars": {}, "column_types": {}}, "schema": "public", "database": "quasar_prod_warehouse", "alias": "not_null_snowplow_base_event_path", "column_name": "path", "columns": {}, "description": ""}, "test.ds_dbt.not_null_snowplow_base_event_session_id": {"name": "not_null_snowplow_base_event_session_id", "resource_type": "test", "package_name": "ds_dbt", "root_path": "/Users/mrich/projects/quasar/quasar/dbt", "path": "schema_test/not_null_snowplow_base_event_session_id.sql", "original_file_path": "models/phoenix_events/schema.yml", "raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(model=ref('snowplow_base_event'), column_name='session_id') }}", "refs": [["snowplow_base_event"]], "sources": [], "depends_on": {"nodes": ["model.ds_dbt.snowplow_base_event"], "macros": []}, "unique_id": "test.ds_dbt.not_null_snowplow_base_event_session_id", "empty": false, "fqn": ["ds_dbt", "schema_test", "not_null_snowplow_base_event_session_id"], "tags": ["schema"], "config": {"enabled": true, "materialized": "view", "severity": "ERROR", "tags": [], "pre-hook": [], "post-hook": [], "quoting": {}, "persist_docs": {}, "vars": {}, "column_types": {}}, "schema": "public", "database": "quasar_prod_warehouse", "alias": "not_null_snowplow_base_event_session_id", "column_name": "session_id", "columns": {}, "description": ""}, "test.ds_dbt.not_null_snowplow_base_event_session_counter": {"name": "not_null_snowplow_base_event_session_counter", "resource_type": "test", "package_name": "ds_dbt", "root_path": "/Users/mrich/projects/quasar/quasar/dbt", "path": "schema_test/not_null_snowplow_base_event_session_counter.sql", "original_file_path": "models/phoenix_events/schema.yml", "raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(model=ref('snowplow_base_event'), column_name='session_counter') }}", "refs": [["snowplow_base_event"]], "sources": [], "depends_on": {"nodes": ["model.ds_dbt.snowplow_base_event"], "macros": []}, "unique_id": "test.ds_dbt.not_null_snowplow_base_event_session_counter", "empty": false, "fqn": ["ds_dbt", "schema_test", "not_null_snowplow_base_event_session_counter"], "tags": ["schema"], "config": {"enabled": true, "materialized": "view", "severity": "ERROR", "tags": [], "pre-hook": [], "post-hook": [], "quoting": {}, "persist_docs": {}, "vars": {}, "column_types": {}}, "schema": "public", "database": "quasar_prod_warehouse", "alias": "not_null_snowplow_base_event_session_counter", "column_name": "session_counter", "columns": {}, "description": ""}, "test.ds_dbt.not_null_snowplow_base_event_browser_size": {"name": "not_null_snowplow_base_event_browser_size", "resource_type": "test", "package_name": "ds_dbt", "root_path": "/Users/mrich/projects/quasar/quasar/dbt", "path": "schema_test/not_null_snowplow_base_event_browser_size.sql", "original_file_path": "models/phoenix_events/schema.yml", "raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(model=ref('snowplow_base_event'), column_name='browser_size') }}", "refs": [["snowplow_base_event"]], "sources": [], "depends_on": {"nodes": ["model.ds_dbt.snowplow_base_event"], "macros": []}, "unique_id": "test.ds_dbt.not_null_snowplow_base_event_browser_size", "empty": false, "fqn": ["ds_dbt", "schema_test", "not_null_snowplow_base_event_browser_size"], "tags": ["schema"], "config": {"enabled": true, "materialized": "view", "severity": "ERROR", "tags": [], "pre-hook": [], "post-hook": [], "quoting": {}, "persist_docs": {}, "vars": {}, "column_types": {}}, "schema": "public", "database": "quasar_prod_warehouse", "alias": "not_null_snowplow_base_event_browser_size", "column_name": "browser_size", "columns": {}, "description": ""}, "test.ds_dbt.relationships_snowplow_base_event_northstar_id__id__ref_users_": {"name": "relationships_snowplow_base_event_northstar_id__id__ref_users_", "resource_type": "test", "package_name": "ds_dbt", "root_path": "/Users/mrich/projects/quasar/quasar/dbt", "path": "schema_test/relationships_snowplow_base_event_northstar_id__id__ref_users_.sql", "original_file_path": "models/phoenix_events/schema.yml", "raw_sql": "{{ config(severity='ERROR') }}{{ test_relationships(model=ref('snowplow_base_event'), column_name='northstar_id', field='id', to=ref('users')) }}", "refs": [["snowplow_base_event"], ["users"]], "sources": [], "depends_on": {"nodes": ["model.ds_dbt.snowplow_base_event", "model.ds_dbt.users"], "macros": []}, "unique_id": "test.ds_dbt.relationships_snowplow_base_event_northstar_id__id__ref_users_", "empty": false, "fqn": ["ds_dbt", "schema_test", "relationships_snowplow_base_event_northstar_id__id__ref_users_"], "tags": ["schema"], "config": {"enabled": true, "materialized": "view", "severity": "ERROR", "tags": [], "pre-hook": [], "post-hook": [], "quoting": {}, "persist_docs": {}, "vars": {}, "column_types": {}}, "schema": "public", "database": "quasar_prod_warehouse", "alias": "relationships_snowplow_base_event_northstar_id__id__ref_users_", "column_name": "northstar_id", "columns": {}, "description": ""}, "test.ds_dbt.not_null_snowplow_base_event_device_id": {"name": "not_null_snowplow_base_event_device_id", "resource_type": "test", "package_name": "ds_dbt", "root_path": "/Users/mrich/projects/quasar/quasar/dbt", "path": "schema_test/not_null_snowplow_base_event_device_id.sql", "original_file_path": "models/phoenix_events/schema.yml", "raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(model=ref('snowplow_base_event'), column_name='device_id') }}", "refs": [["snowplow_base_event"]], "sources": [], "depends_on": {"nodes": ["model.ds_dbt.snowplow_base_event"], "macros": []}, "unique_id": "test.ds_dbt.not_null_snowplow_base_event_device_id", "empty": false, "fqn": ["ds_dbt", "schema_test", "not_null_snowplow_base_event_device_id"], "tags": ["schema"], "config": {"enabled": true, "materialized": "view", "severity": "ERROR", "tags": [], "pre-hook": [], "post-hook": [], "quoting": {}, "persist_docs": {}, "vars": {}, "column_types": {}}, "schema": "public", "database": "quasar_prod_warehouse", "alias": "not_null_snowplow_base_event_device_id", "column_name": "device_id", "columns": {}, "description": ""}, "test.ds_dbt.not_null_snowplow_base_event_referrer_host": {"name": "not_null_snowplow_base_event_referrer_host", "resource_type": "test", "package_name": "ds_dbt", "root_path": "/Users/mrich/projects/quasar/quasar/dbt", "path": "schema_test/not_null_snowplow_base_event_referrer_host.sql", "original_file_path": "models/phoenix_events/schema.yml", "raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(model=ref('snowplow_base_event'), column_name='referrer_host') }}", "refs": [["snowplow_base_event"]], "sources": [], "depends_on": {"nodes": ["model.ds_dbt.snowplow_base_event"], "macros": []}, "unique_id": "test.ds_dbt.not_null_snowplow_base_event_referrer_host", "empty": false, "fqn": ["ds_dbt", "schema_test", "not_null_snowplow_base_event_referrer_host"], "tags": ["schema"], "config": {"enabled": true, "materialized": "view", "severity": "ERROR", "tags": [], "pre-hook": [], "post-hook": [], "quoting": {}, "persist_docs": {}, "vars": {}, "column_types": {}}, "schema": "public", "database": "quasar_prod_warehouse", "alias": "not_null_snowplow_base_event_referrer_host", "column_name": "referrer_host", "columns": {}, "description": ""}, "test.ds_dbt.not_null_snowplow_base_event_referrer_path": {"name": "not_null_snowplow_base_event_referrer_path", "resource_type": "test", "package_name": "ds_dbt", "root_path": "/Users/mrich/projects/quasar/quasar/dbt", "path": "schema_test/not_null_snowplow_base_event_referrer_path.sql", "original_file_path": "models/phoenix_events/schema.yml", "raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(model=ref('snowplow_base_event'), column_name='referrer_path') }}", "refs": [["snowplow_base_event"]], "sources": [], "depends_on": {"nodes": ["model.ds_dbt.snowplow_base_event"], "macros": []}, "unique_id": "test.ds_dbt.not_null_snowplow_base_event_referrer_path", "empty": false, "fqn": ["ds_dbt", "schema_test", "not_null_snowplow_base_event_referrer_path"], "tags": ["schema"], "config": {"enabled": true, "materialized": "view", "severity": "ERROR", "tags": [], "pre-hook": [], "post-hook": [], "quoting": {}, "persist_docs": {}, "vars": {}, "column_types": {}}, "schema": "public", "database": "quasar_prod_warehouse", "alias": "not_null_snowplow_base_event_referrer_path", "column_name": "referrer_path", "columns": {}, "description": ""}, "test.ds_dbt.unique_snowplow_payload_event_event_id": {"name": "unique_snowplow_payload_event_event_id", "resource_type": "test", "package_name": "ds_dbt", "root_path": "/Users/mrich/projects/quasar/quasar/dbt", "path": "schema_test/unique_snowplow_payload_event_event_id.sql", "original_file_path": "models/phoenix_events/schema.yml", "raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(model=ref('snowplow_payload_event'), column_name='event_id') }}", "refs": [["snowplow_payload_event"]], "sources": [], "depends_on": {"nodes": ["model.ds_dbt.snowplow_payload_event"], "macros": []}, "unique_id": "test.ds_dbt.unique_snowplow_payload_event_event_id", "empty": false, "fqn": ["ds_dbt", "schema_test", "unique_snowplow_payload_event_event_id"], "tags": ["schema"], "config": {"enabled": true, "materialized": "view", "severity": "ERROR", "tags": [], "pre-hook": [], "post-hook": [], "quoting": {}, "persist_docs": {}, "vars": {}, "column_types": {}}, "schema": "public", "database": "quasar_prod_warehouse", "alias": "unique_snowplow_payload_event_event_id", "column_name": "event_id", "columns": {}, "description": ""}, "test.ds_dbt.not_null_snowplow_payload_event_event_id": {"name": "not_null_snowplow_payload_event_event_id", "resource_type": "test", "package_name": "ds_dbt", "root_path": "/Users/mrich/projects/quasar/quasar/dbt", "path": "schema_test/not_null_snowplow_payload_event_event_id.sql", "original_file_path": "models/phoenix_events/schema.yml", "raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(model=ref('snowplow_payload_event'), column_name='event_id') }}", "refs": [["snowplow_payload_event"]], "sources": [], "depends_on": {"nodes": ["model.ds_dbt.snowplow_payload_event"], "macros": []}, "unique_id": "test.ds_dbt.not_null_snowplow_payload_event_event_id", "empty": false, "fqn": ["ds_dbt", "schema_test", "not_null_snowplow_payload_event_event_id"], "tags": ["schema"], "config": {"enabled": true, "materialized": "view", "severity": "ERROR", "tags": [], "pre-hook": [], "post-hook": [], "quoting": {}, "persist_docs": {}, "vars": {}, "column_types": {}}, "schema": "public", "database": "quasar_prod_warehouse", "alias": "not_null_snowplow_payload_event_event_id", "column_name": "event_id", "columns": {}, "description": ""}, "test.ds_dbt.not_null_snowplow_payload_event_ft_timestamp": {"name": "not_null_snowplow_payload_event_ft_timestamp", "resource_type": "test", "package_name": "ds_dbt", "root_path": "/Users/mrich/projects/quasar/quasar/dbt", "path": "schema_test/not_null_snowplow_payload_event_ft_timestamp.sql", "original_file_path": "models/phoenix_events/schema.yml", "raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(model=ref('snowplow_payload_event'), column_name='ft_timestamp') }}", "refs": [["snowplow_payload_event"]], "sources": [], "depends_on": {"nodes": ["model.ds_dbt.snowplow_payload_event"], "macros": []}, "unique_id": "test.ds_dbt.not_null_snowplow_payload_event_ft_timestamp", "empty": false, "fqn": ["ds_dbt", "schema_test", "not_null_snowplow_payload_event_ft_timestamp"], "tags": ["schema"], "config": {"enabled": true, "materialized": "view", "severity": "ERROR", "tags": [], "pre-hook": [], "post-hook": [], "quoting": {}, "persist_docs": {}, "vars": {}, "column_types": {}}, "schema": "public", "database": "quasar_prod_warehouse", "alias": "not_null_snowplow_payload_event_ft_timestamp", "column_name": "ft_timestamp", "columns": {}, "description": ""}, "test.ds_dbt.unique_snowplow_raw_events_event_id": {"name": "unique_snowplow_raw_events_event_id", "resource_type": "test", "package_name": "ds_dbt", "root_path": "/Users/mrich/projects/quasar/quasar/dbt", "path": "schema_test/unique_snowplow_raw_events_event_id.sql", "original_file_path": "models/phoenix_events/schema.yml", "raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(model=ref('snowplow_raw_events'), column_name='event_id') }}", "refs": [["snowplow_raw_events"]], "sources": [], "depends_on": {"nodes": ["model.ds_dbt.snowplow_raw_events"], "macros": []}, "unique_id": "test.ds_dbt.unique_snowplow_raw_events_event_id", "empty": false, "fqn": ["ds_dbt", "schema_test", "unique_snowplow_raw_events_event_id"], "tags": ["schema"], "config": {"enabled": true, "materialized": "view", "severity": "ERROR", "tags": [], "pre-hook": [], "post-hook": [], "quoting": {}, "persist_docs": {}, "vars": {}, "column_types": {}}, "schema": "public", "database": "quasar_prod_warehouse", "alias": "unique_snowplow_raw_events_event_id", "column_name": "event_id", "columns": {}, "description": ""}, "test.ds_dbt.not_null_snowplow_raw_events_event_id": {"name": "not_null_snowplow_raw_events_event_id", "resource_type": "test", "package_name": "ds_dbt", "root_path": "/Users/mrich/projects/quasar/quasar/dbt", "path": "schema_test/not_null_snowplow_raw_events_event_id.sql", "original_file_path": "models/phoenix_events/schema.yml", "raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(model=ref('snowplow_raw_events'), column_name='event_id') }}", "refs": [["snowplow_raw_events"]], "sources": [], "depends_on": {"nodes": ["model.ds_dbt.snowplow_raw_events"], "macros": []}, "unique_id": "test.ds_dbt.not_null_snowplow_raw_events_event_id", "empty": false, "fqn": ["ds_dbt", "schema_test", "not_null_snowplow_raw_events_event_id"], "tags": ["schema"], "config": {"enabled": true, "materialized": "view", "severity": "ERROR", "tags": [], "pre-hook": [], "post-hook": [], "quoting": {}, "persist_docs": {}, "vars": {}, "column_types": {}}, "schema": "public", "database": "quasar_prod_warehouse", "alias": "not_null_snowplow_raw_events_event_id", "column_name": "event_id", "columns": {}, "description": ""}, "test.ds_dbt.unique_snowplow_raw_events_event_source": {"name": "unique_snowplow_raw_events_event_source", "resource_type": "test", "package_name": "ds_dbt", "root_path": "/Users/mrich/projects/quasar/quasar/dbt", "path": "schema_test/unique_snowplow_raw_events_event_source.sql", "original_file_path": "models/phoenix_events/schema.yml", "raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(model=ref('snowplow_raw_events'), column_name='event_source') }}", "refs": [["snowplow_raw_events"]], "sources": [], "depends_on": {"nodes": ["model.ds_dbt.snowplow_raw_events"], "macros": []}, "unique_id": "test.ds_dbt.unique_snowplow_raw_events_event_source", "empty": false, "fqn": ["ds_dbt", "schema_test", "unique_snowplow_raw_events_event_source"], "tags": ["schema"], "config": {"enabled": true, "materialized": "view", "severity": "ERROR", "tags": [], "pre-hook": [], "post-hook": [], "quoting": {}, "persist_docs": {}, "vars": {}, "column_types": {}}, "schema": "public", "database": "quasar_prod_warehouse", "alias": "unique_snowplow_raw_events_event_source", "column_name": "event_source", "columns": {}, "description": ""}, "test.ds_dbt.not_null_snowplow_raw_events_event_source": {"name": "not_null_snowplow_raw_events_event_source", "resource_type": "test", "package_name": "ds_dbt", "root_path": "/Users/mrich/projects/quasar/quasar/dbt", "path": "schema_test/not_null_snowplow_raw_events_event_source.sql", "original_file_path": "models/phoenix_events/schema.yml", "raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(model=ref('snowplow_raw_events'), column_name='event_source') }}", "refs": [["snowplow_raw_events"]], "sources": [], "depends_on": {"nodes": ["model.ds_dbt.snowplow_raw_events"], "macros": []}, "unique_id": "test.ds_dbt.not_null_snowplow_raw_events_event_source", "empty": false, "fqn": ["ds_dbt", "schema_test", "not_null_snowplow_raw_events_event_source"], "tags": ["schema"], "config": {"enabled": true, "materialized": "view", "severity": "ERROR", "tags": [], "pre-hook": [], "post-hook": [], "quoting": {}, "persist_docs": {}, "vars": {}, "column_types": {}}, "schema": "public", "database": "quasar_prod_warehouse", "alias": "not_null_snowplow_raw_events_event_source", "column_name": "event_source", "columns": {}, "description": ""}, "test.ds_dbt.not_null_snowplow_raw_events_event_datetime": {"name": "not_null_snowplow_raw_events_event_datetime", "resource_type": "test", "package_name": "ds_dbt", "root_path": "/Users/mrich/projects/quasar/quasar/dbt", "path": "schema_test/not_null_snowplow_raw_events_event_datetime.sql", "original_file_path": "models/phoenix_events/schema.yml", "raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(model=ref('snowplow_raw_events'), column_name='event_datetime') }}", "refs": [["snowplow_raw_events"]], "sources": [], "depends_on": {"nodes": ["model.ds_dbt.snowplow_raw_events"], "macros": []}, "unique_id": "test.ds_dbt.not_null_snowplow_raw_events_event_datetime", "empty": false, "fqn": ["ds_dbt", "schema_test", "not_null_snowplow_raw_events_event_datetime"], "tags": ["schema"], "config": {"enabled": true, "materialized": "view", "severity": "ERROR", "tags": [], "pre-hook": [], "post-hook": [], "quoting": {}, "persist_docs": {}, "vars": {}, "column_types": {}}, "schema": "public", "database": "quasar_prod_warehouse", "alias": "not_null_snowplow_raw_events_event_datetime", "column_name": "event_datetime", "columns": {}, "description": ""}, "test.ds_dbt.not_null_snowplow_raw_events_event_type": {"name": "not_null_snowplow_raw_events_event_type", "resource_type": "test", "package_name": "ds_dbt", "root_path": "/Users/mrich/projects/quasar/quasar/dbt", "path": "schema_test/not_null_snowplow_raw_events_event_type.sql", "original_file_path": "models/phoenix_events/schema.yml", "raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(model=ref('snowplow_raw_events'), column_name='event_type') }}", "refs": [["snowplow_raw_events"]], "sources": [], "depends_on": {"nodes": ["model.ds_dbt.snowplow_raw_events"], "macros": []}, "unique_id": "test.ds_dbt.not_null_snowplow_raw_events_event_type", "empty": false, "fqn": ["ds_dbt", "schema_test", "not_null_snowplow_raw_events_event_type"], "tags": ["schema"], "config": {"enabled": true, "materialized": "view", "severity": "ERROR", "tags": [], "pre-hook": [], "post-hook": [], "quoting": {}, "persist_docs": {}, "vars": {}, "column_types": {}}, "schema": "public", "database": "quasar_prod_warehouse", "alias": "not_null_snowplow_raw_events_event_type", "column_name": "event_type", "columns": {}, "description": ""}, "test.ds_dbt.not_null_snowplow_raw_events_host": {"name": "not_null_snowplow_raw_events_host", "resource_type": "test", "package_name": "ds_dbt", "root_path": "/Users/mrich/projects/quasar/quasar/dbt", "path": "schema_test/not_null_snowplow_raw_events_host.sql", "original_file_path": "models/phoenix_events/schema.yml", "raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(model=ref('snowplow_raw_events'), column_name='host') }}", "refs": [["snowplow_raw_events"]], "sources": [], "depends_on": {"nodes": ["model.ds_dbt.snowplow_raw_events"], "macros": []}, "unique_id": "test.ds_dbt.not_null_snowplow_raw_events_host", "empty": false, "fqn": ["ds_dbt", "schema_test", "not_null_snowplow_raw_events_host"], "tags": ["schema"], "config": {"enabled": true, "materialized": "view", "severity": "ERROR", "tags": [], "pre-hook": [], "post-hook": [], "quoting": {}, "persist_docs": {}, "vars": {}, "column_types": {}}, "schema": "public", "database": "quasar_prod_warehouse", "alias": "not_null_snowplow_raw_events_host", "column_name": "host", "columns": {}, "description": ""}, "test.ds_dbt.not_null_snowplow_raw_events_path": {"name": "not_null_snowplow_raw_events_path", "resource_type": "test", "package_name": "ds_dbt", "root_path": "/Users/mrich/projects/quasar/quasar/dbt", "path": "schema_test/not_null_snowplow_raw_events_path.sql", "original_file_path": "models/phoenix_events/schema.yml", "raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(model=ref('snowplow_raw_events'), column_name='path') }}", "refs": [["snowplow_raw_events"]], "sources": [], "depends_on": {"nodes": ["model.ds_dbt.snowplow_raw_events"], "macros": []}, "unique_id": "test.ds_dbt.not_null_snowplow_raw_events_path", "empty": false, "fqn": ["ds_dbt", "schema_test", "not_null_snowplow_raw_events_path"], "tags": ["schema"], "config": {"enabled": true, "materialized": "view", "severity": "ERROR", "tags": [], "pre-hook": [], "post-hook": [], "quoting": {}, "persist_docs": {}, "vars": {}, "column_types": {}}, "schema": "public", "database": "quasar_prod_warehouse", "alias": "not_null_snowplow_raw_events_path", "column_name": "path", "columns": {}, "description": ""}, "test.ds_dbt.not_null_snowplow_raw_events_session_id": {"name": "not_null_snowplow_raw_events_session_id", "resource_type": "test", "package_name": "ds_dbt", "root_path": "/Users/mrich/projects/quasar/quasar/dbt", "path": "schema_test/not_null_snowplow_raw_events_session_id.sql", "original_file_path": "models/phoenix_events/schema.yml", "raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(model=ref('snowplow_raw_events'), column_name='session_id') }}", "refs": [["snowplow_raw_events"]], "sources": [], "depends_on": {"nodes": ["model.ds_dbt.snowplow_raw_events"], "macros": []}, "unique_id": "test.ds_dbt.not_null_snowplow_raw_events_session_id", "empty": false, "fqn": ["ds_dbt", "schema_test", "not_null_snowplow_raw_events_session_id"], "tags": ["schema"], "config": {"enabled": true, "materialized": "view", "severity": "ERROR", "tags": [], "pre-hook": [], "post-hook": [], "quoting": {}, "persist_docs": {}, "vars": {}, "column_types": {}}, "schema": "public", "database": "quasar_prod_warehouse", "alias": "not_null_snowplow_raw_events_session_id", "column_name": "session_id", "columns": {}, "description": ""}, "test.ds_dbt.not_null_snowplow_raw_events_session_counter": {"name": "not_null_snowplow_raw_events_session_counter", "resource_type": "test", "package_name": "ds_dbt", "root_path": "/Users/mrich/projects/quasar/quasar/dbt", "path": "schema_test/not_null_snowplow_raw_events_session_counter.sql", "original_file_path": "models/phoenix_events/schema.yml", "raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(model=ref('snowplow_raw_events'), column_name='session_counter') }}", "refs": [["snowplow_raw_events"]], "sources": [], "depends_on": {"nodes": ["model.ds_dbt.snowplow_raw_events"], "macros": []}, "unique_id": "test.ds_dbt.not_null_snowplow_raw_events_session_counter", "empty": false, "fqn": ["ds_dbt", "schema_test", "not_null_snowplow_raw_events_session_counter"], "tags": ["schema"], "config": {"enabled": true, "materialized": "view", "severity": "ERROR", "tags": [], "pre-hook": [], "post-hook": [], "quoting": {}, "persist_docs": {}, "vars": {}, "column_types": {}}, "schema": "public", "database": "quasar_prod_warehouse", "alias": "not_null_snowplow_raw_events_session_counter", "column_name": "session_counter", "columns": {}, "description": ""}, "test.ds_dbt.not_null_snowplow_raw_events_browser_size": {"name": "not_null_snowplow_raw_events_browser_size", "resource_type": "test", "package_name": "ds_dbt", "root_path": "/Users/mrich/projects/quasar/quasar/dbt", "path": "schema_test/not_null_snowplow_raw_events_browser_size.sql", "original_file_path": "models/phoenix_events/schema.yml", "raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(model=ref('snowplow_raw_events'), column_name='browser_size') }}", "refs": [["snowplow_raw_events"]], "sources": [], "depends_on": {"nodes": ["model.ds_dbt.snowplow_raw_events"], "macros": []}, "unique_id": "test.ds_dbt.not_null_snowplow_raw_events_browser_size", "empty": false, "fqn": ["ds_dbt", "schema_test", "not_null_snowplow_raw_events_browser_size"], "tags": ["schema"], "config": {"enabled": true, "materialized": "view", "severity": "ERROR", "tags": [], "pre-hook": [], "post-hook": [], "quoting": {}, "persist_docs": {}, "vars": {}, "column_types": {}}, "schema": "public", "database": "quasar_prod_warehouse", "alias": "not_null_snowplow_raw_events_browser_size", "column_name": "browser_size", "columns": {}, "description": ""}, "test.ds_dbt.relationships_snowplow_raw_events_northstar_id__id__ref_users_": {"name": "relationships_snowplow_raw_events_northstar_id__id__ref_users_", "resource_type": "test", "package_name": "ds_dbt", "root_path": "/Users/mrich/projects/quasar/quasar/dbt", "path": "schema_test/relationships_snowplow_raw_events_northstar_id__id__ref_users_.sql", "original_file_path": "models/phoenix_events/schema.yml", "raw_sql": "{{ config(severity='ERROR') }}{{ test_relationships(model=ref('snowplow_raw_events'), column_name='northstar_id', field='id', to=ref('users')) }}", "refs": [["snowplow_raw_events"], ["users"]], "sources": [], "depends_on": {"nodes": ["model.ds_dbt.snowplow_raw_events", "model.ds_dbt.users"], "macros": []}, "unique_id": "test.ds_dbt.relationships_snowplow_raw_events_northstar_id__id__ref_users_", "empty": false, "fqn": ["ds_dbt", "schema_test", "relationships_snowplow_raw_events_northstar_id__id__ref_users_"], "tags": ["schema"], "config": {"enabled": true, "materialized": "view", "severity": "ERROR", "tags": [], "pre-hook": [], "post-hook": [], "quoting": {}, "persist_docs": {}, "vars": {}, "column_types": {}}, "schema": "public", "database": "quasar_prod_warehouse", "alias": "relationships_snowplow_raw_events_northstar_id__id__ref_users_", "column_name": "northstar_id", "columns": {}, "description": ""}, "test.ds_dbt.not_null_snowplow_raw_events_device_id": {"name": "not_null_snowplow_raw_events_device_id", "resource_type": "test", "package_name": "ds_dbt", "root_path": "/Users/mrich/projects/quasar/quasar/dbt", "path": "schema_test/not_null_snowplow_raw_events_device_id.sql", "original_file_path": "models/phoenix_events/schema.yml", "raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(model=ref('snowplow_raw_events'), column_name='device_id') }}", "refs": [["snowplow_raw_events"]], "sources": [], "depends_on": {"nodes": ["model.ds_dbt.snowplow_raw_events"], "macros": []}, "unique_id": "test.ds_dbt.not_null_snowplow_raw_events_device_id", "empty": false, "fqn": ["ds_dbt", "schema_test", "not_null_snowplow_raw_events_device_id"], "tags": ["schema"], "config": {"enabled": true, "materialized": "view", "severity": "ERROR", "tags": [], "pre-hook": [], "post-hook": [], "quoting": {}, "persist_docs": {}, "vars": {}, "column_types": {}}, "schema": "public", "database": "quasar_prod_warehouse", "alias": "not_null_snowplow_raw_events_device_id", "column_name": "device_id", "columns": {}, "description": ""}, "test.ds_dbt.not_null_snowplow_raw_events_referrer_host": {"name": "not_null_snowplow_raw_events_referrer_host", "resource_type": "test", "package_name": "ds_dbt", "root_path": "/Users/mrich/projects/quasar/quasar/dbt", "path": "schema_test/not_null_snowplow_raw_events_referrer_host.sql", "original_file_path": "models/phoenix_events/schema.yml", "raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(model=ref('snowplow_raw_events'), column_name='referrer_host') }}", "refs": [["snowplow_raw_events"]], "sources": [], "depends_on": {"nodes": ["model.ds_dbt.snowplow_raw_events"], "macros": []}, "unique_id": "test.ds_dbt.not_null_snowplow_raw_events_referrer_host", "empty": false, "fqn": ["ds_dbt", "schema_test", "not_null_snowplow_raw_events_referrer_host"], "tags": ["schema"], "config": {"enabled": true, "materialized": "view", "severity": "ERROR", "tags": [], "pre-hook": [], "post-hook": [], "quoting": {}, "persist_docs": {}, "vars": {}, "column_types": {}}, "schema": "public", "database": "quasar_prod_warehouse", "alias": "not_null_snowplow_raw_events_referrer_host", "column_name": "referrer_host", "columns": {}, "description": ""}, "test.ds_dbt.not_null_snowplow_raw_events_referrer_path": {"name": "not_null_snowplow_raw_events_referrer_path", "resource_type": "test", "package_name": "ds_dbt", "root_path": "/Users/mrich/projects/quasar/quasar/dbt", "path": "schema_test/not_null_snowplow_raw_events_referrer_path.sql", "original_file_path": "models/phoenix_events/schema.yml", "raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(model=ref('snowplow_raw_events'), column_name='referrer_path') }}", "refs": [["snowplow_raw_events"]], "sources": [], "depends_on": {"nodes": ["model.ds_dbt.snowplow_raw_events"], "macros": []}, "unique_id": "test.ds_dbt.not_null_snowplow_raw_events_referrer_path", "empty": false, "fqn": ["ds_dbt", "schema_test", "not_null_snowplow_raw_events_referrer_path"], "tags": ["schema"], "config": {"enabled": true, "materialized": "view", "severity": "ERROR", "tags": [], "pre-hook": [], "post-hook": [], "quoting": {}, "persist_docs": {}, "vars": {}, "column_types": {}}, "schema": "public", "database": "quasar_prod_warehouse", "alias": "not_null_snowplow_raw_events_referrer_path", "column_name": "referrer_path", "columns": {}, "description": ""}, "test.ds_dbt.unique_snowplow_phoenix_events_event_id": {"name": "unique_snowplow_phoenix_events_event_id", "resource_type": "test", "package_name": "ds_dbt", "root_path": "/Users/mrich/projects/quasar/quasar/dbt", "path": "schema_test/unique_snowplow_phoenix_events_event_id.sql", "original_file_path": "models/phoenix_events/schema.yml", "raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(model=ref('snowplow_phoenix_events'), column_name='event_id') }}", "refs": [["snowplow_phoenix_events"]], "sources": [], "depends_on": {"nodes": ["model.ds_dbt.snowplow_phoenix_events"], "macros": []}, "unique_id": "test.ds_dbt.unique_snowplow_phoenix_events_event_id", "empty": false, "fqn": ["ds_dbt", "schema_test", "unique_snowplow_phoenix_events_event_id"], "tags": ["schema"], "config": {"enabled": true, "materialized": "view", "severity": "ERROR", "tags": [], "pre-hook": [], "post-hook": [], "quoting": {}, "persist_docs": {}, "vars": {}, "column_types": {}}, "schema": "public", "database": "quasar_prod_warehouse", "alias": "unique_snowplow_phoenix_events_event_id", "column_name": "event_id", "columns": {}, "description": ""}, "test.ds_dbt.not_null_snowplow_phoenix_events_event_id": {"name": "not_null_snowplow_phoenix_events_event_id", "resource_type": "test", "package_name": "ds_dbt", "root_path": "/Users/mrich/projects/quasar/quasar/dbt", "path": "schema_test/not_null_snowplow_phoenix_events_event_id.sql", "original_file_path": "models/phoenix_events/schema.yml", "raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(model=ref('snowplow_phoenix_events'), column_name='event_id') }}", "refs": [["snowplow_phoenix_events"]], "sources": [], "depends_on": {"nodes": ["model.ds_dbt.snowplow_phoenix_events"], "macros": []}, "unique_id": "test.ds_dbt.not_null_snowplow_phoenix_events_event_id", "empty": false, "fqn": ["ds_dbt", "schema_test", "not_null_snowplow_phoenix_events_event_id"], "tags": ["schema"], "config": {"enabled": true, "materialized": "view", "severity": "ERROR", "tags": [], "pre-hook": [], "post-hook": [], "quoting": {}, "persist_docs": {}, "vars": {}, "column_types": {}}, "schema": "public", "database": "quasar_prod_warehouse", "alias": "not_null_snowplow_phoenix_events_event_id", "column_name": "event_id", "columns": {}, "description": ""}, "test.ds_dbt.not_null_snowplow_phoenix_events_event_datetime": {"name": "not_null_snowplow_phoenix_events_event_datetime", "resource_type": "test", "package_name": "ds_dbt", "root_path": "/Users/mrich/projects/quasar/quasar/dbt", "path": "schema_test/not_null_snowplow_phoenix_events_event_datetime.sql", "original_file_path": "models/phoenix_events/schema.yml", "raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(model=ref('snowplow_phoenix_events'), column_name='event_datetime') }}", "refs": [["snowplow_phoenix_events"]], "sources": [], "depends_on": {"nodes": ["model.ds_dbt.snowplow_phoenix_events"], "macros": []}, "unique_id": "test.ds_dbt.not_null_snowplow_phoenix_events_event_datetime", "empty": false, "fqn": ["ds_dbt", "schema_test", "not_null_snowplow_phoenix_events_event_datetime"], "tags": ["schema"], "config": {"enabled": true, "materialized": "view", "severity": "ERROR", "tags": [], "pre-hook": [], "post-hook": [], "quoting": {}, "persist_docs": {}, "vars": {}, "column_types": {}}, "schema": "public", "database": "quasar_prod_warehouse", "alias": "not_null_snowplow_phoenix_events_event_datetime", "column_name": "event_datetime", "columns": {}, "description": ""}, "test.ds_dbt.unique_snowplow_phoenix_events_event_source": {"name": "unique_snowplow_phoenix_events_event_source", "resource_type": "test", "package_name": "ds_dbt", "root_path": "/Users/mrich/projects/quasar/quasar/dbt", "path": "schema_test/unique_snowplow_phoenix_events_event_source.sql", "original_file_path": "models/phoenix_events/schema.yml", "raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(model=ref('snowplow_phoenix_events'), column_name='event_source') }}", "refs": [["snowplow_phoenix_events"]], "sources": [], "depends_on": {"nodes": ["model.ds_dbt.snowplow_phoenix_events"], "macros": []}, "unique_id": "test.ds_dbt.unique_snowplow_phoenix_events_event_source", "empty": false, "fqn": ["ds_dbt", "schema_test", "unique_snowplow_phoenix_events_event_source"], "tags": ["schema"], "config": {"enabled": true, "materialized": "view", "severity": "ERROR", "tags": [], "pre-hook": [], "post-hook": [], "quoting": {}, "persist_docs": {}, "vars": {}, "column_types": {}}, "schema": "public", "database": "quasar_prod_warehouse", "alias": "unique_snowplow_phoenix_events_event_source", "column_name": "event_source", "columns": {}, "description": ""}, "test.ds_dbt.not_null_snowplow_phoenix_events_event_source": {"name": "not_null_snowplow_phoenix_events_event_source", "resource_type": "test", "package_name": "ds_dbt", "root_path": "/Users/mrich/projects/quasar/quasar/dbt", "path": "schema_test/not_null_snowplow_phoenix_events_event_source.sql", "original_file_path": "models/phoenix_events/schema.yml", "raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(model=ref('snowplow_phoenix_events'), column_name='event_source') }}", "refs": [["snowplow_phoenix_events"]], "sources": [], "depends_on": {"nodes": ["model.ds_dbt.snowplow_phoenix_events"], "macros": []}, "unique_id": "test.ds_dbt.not_null_snowplow_phoenix_events_event_source", "empty": false, "fqn": ["ds_dbt", "schema_test", "not_null_snowplow_phoenix_events_event_source"], "tags": ["schema"], "config": {"enabled": true, "materialized": "view", "severity": "ERROR", "tags": [], "pre-hook": [], "post-hook": [], "quoting": {}, "persist_docs": {}, "vars": {}, "column_types": {}}, "schema": "public", "database": "quasar_prod_warehouse", "alias": "not_null_snowplow_phoenix_events_event_source", "column_name": "event_source", "columns": {}, "description": ""}, "test.ds_dbt.not_null_snowplow_phoenix_events_path": {"name": "not_null_snowplow_phoenix_events_path", "resource_type": "test", "package_name": "ds_dbt", "root_path": "/Users/mrich/projects/quasar/quasar/dbt", "path": "schema_test/not_null_snowplow_phoenix_events_path.sql", "original_file_path": "models/phoenix_events/schema.yml", "raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(model=ref('snowplow_phoenix_events'), column_name='path') }}", "refs": [["snowplow_phoenix_events"]], "sources": [], "depends_on": {"nodes": ["model.ds_dbt.snowplow_phoenix_events"], "macros": []}, "unique_id": "test.ds_dbt.not_null_snowplow_phoenix_events_path", "empty": false, "fqn": ["ds_dbt", "schema_test", "not_null_snowplow_phoenix_events_path"], "tags": ["schema"], "config": {"enabled": true, "materialized": "view", "severity": "ERROR", "tags": [], "pre-hook": [], "post-hook": [], "quoting": {}, "persist_docs": {}, "vars": {}, "column_types": {}}, "schema": "public", "database": "quasar_prod_warehouse", "alias": "not_null_snowplow_phoenix_events_path", "column_name": "path", "columns": {}, "description": ""}, "test.ds_dbt.not_null_snowplow_phoenix_events_host": {"name": "not_null_snowplow_phoenix_events_host", "resource_type": "test", "package_name": "ds_dbt", "root_path": "/Users/mrich/projects/quasar/quasar/dbt", "path": "schema_test/not_null_snowplow_phoenix_events_host.sql", "original_file_path": "models/phoenix_events/schema.yml", "raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(model=ref('snowplow_phoenix_events'), column_name='host') }}", "refs": [["snowplow_phoenix_events"]], "sources": [], "depends_on": {"nodes": ["model.ds_dbt.snowplow_phoenix_events"], "macros": []}, "unique_id": "test.ds_dbt.not_null_snowplow_phoenix_events_host", "empty": false, "fqn": ["ds_dbt", "schema_test", "not_null_snowplow_phoenix_events_host"], "tags": ["schema"], "config": {"enabled": true, "materialized": "view", "severity": "ERROR", "tags": [], "pre-hook": [], "post-hook": [], "quoting": {}, "persist_docs": {}, "vars": {}, "column_types": {}}, "schema": "public", "database": "quasar_prod_warehouse", "alias": "not_null_snowplow_phoenix_events_host", "column_name": "host", "columns": {}, "description": ""}, "test.ds_dbt.not_null_snowplow_phoenix_events_referrer_host": {"name": "not_null_snowplow_phoenix_events_referrer_host", "resource_type": "test", "package_name": "ds_dbt", "root_path": "/Users/mrich/projects/quasar/quasar/dbt", "path": "schema_test/not_null_snowplow_phoenix_events_referrer_host.sql", "original_file_path": "models/phoenix_events/schema.yml", "raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(model=ref('snowplow_phoenix_events'), column_name='referrer_host') }}", "refs": [["snowplow_phoenix_events"]], "sources": [], "depends_on": {"nodes": ["model.ds_dbt.snowplow_phoenix_events"], "macros": []}, "unique_id": "test.ds_dbt.not_null_snowplow_phoenix_events_referrer_host", "empty": false, "fqn": ["ds_dbt", "schema_test", "not_null_snowplow_phoenix_events_referrer_host"], "tags": ["schema"], "config": {"enabled": true, "materialized": "view", "severity": "ERROR", "tags": [], "pre-hook": [], "post-hook": [], "quoting": {}, "persist_docs": {}, "vars": {}, "column_types": {}}, "schema": "public", "database": "quasar_prod_warehouse", "alias": "not_null_snowplow_phoenix_events_referrer_host", "column_name": "referrer_host", "columns": {}, "description": ""}, "test.ds_dbt.not_null_snowplow_phoenix_events_referrer_path": {"name": "not_null_snowplow_phoenix_events_referrer_path", "resource_type": "test", "package_name": "ds_dbt", "root_path": "/Users/mrich/projects/quasar/quasar/dbt", "path": "schema_test/not_null_snowplow_phoenix_events_referrer_path.sql", "original_file_path": "models/phoenix_events/schema.yml", "raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(model=ref('snowplow_phoenix_events'), column_name='referrer_path') }}", "refs": [["snowplow_phoenix_events"]], "sources": [], "depends_on": {"nodes": ["model.ds_dbt.snowplow_phoenix_events"], "macros": []}, "unique_id": "test.ds_dbt.not_null_snowplow_phoenix_events_referrer_path", "empty": false, "fqn": ["ds_dbt", "schema_test", "not_null_snowplow_phoenix_events_referrer_path"], "tags": ["schema"], "config": {"enabled": true, "materialized": "view", "severity": "ERROR", "tags": [], "pre-hook": [], "post-hook": [], "quoting": {}, "persist_docs": {}, "vars": {}, "column_types": {}}, "schema": "public", "database": "quasar_prod_warehouse", "alias": "not_null_snowplow_phoenix_events_referrer_path", "column_name": "referrer_path", "columns": {}, "description": ""}, "test.ds_dbt.not_null_snowplow_phoenix_events_session_id": {"name": "not_null_snowplow_phoenix_events_session_id", "resource_type": "test", "package_name": "ds_dbt", "root_path": "/Users/mrich/projects/quasar/quasar/dbt", "path": "schema_test/not_null_snowplow_phoenix_events_session_id.sql", "original_file_path": "models/phoenix_events/schema.yml", "raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(model=ref('snowplow_phoenix_events'), column_name='session_id') }}", "refs": [["snowplow_phoenix_events"]], "sources": [], "depends_on": {"nodes": ["model.ds_dbt.snowplow_phoenix_events"], "macros": []}, "unique_id": "test.ds_dbt.not_null_snowplow_phoenix_events_session_id", "empty": false, "fqn": ["ds_dbt", "schema_test", "not_null_snowplow_phoenix_events_session_id"], "tags": ["schema"], "config": {"enabled": true, "materialized": "view", "severity": "ERROR", "tags": [], "pre-hook": [], "post-hook": [], "quoting": {}, "persist_docs": {}, "vars": {}, "column_types": {}}, "schema": "public", "database": "quasar_prod_warehouse", "alias": "not_null_snowplow_phoenix_events_session_id", "column_name": "session_id", "columns": {}, "description": ""}, "test.ds_dbt.not_null_snowplow_phoenix_events_browser_size": {"name": "not_null_snowplow_phoenix_events_browser_size", "resource_type": "test", "package_name": "ds_dbt", "root_path": "/Users/mrich/projects/quasar/quasar/dbt", "path": "schema_test/not_null_snowplow_phoenix_events_browser_size.sql", "original_file_path": "models/phoenix_events/schema.yml", "raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(model=ref('snowplow_phoenix_events'), column_name='browser_size') }}", "refs": [["snowplow_phoenix_events"]], "sources": [], "depends_on": {"nodes": ["model.ds_dbt.snowplow_phoenix_events"], "macros": []}, "unique_id": "test.ds_dbt.not_null_snowplow_phoenix_events_browser_size", "empty": false, "fqn": ["ds_dbt", "schema_test", "not_null_snowplow_phoenix_events_browser_size"], "tags": ["schema"], "config": {"enabled": true, "materialized": "view", "severity": "ERROR", "tags": [], "pre-hook": [], "post-hook": [], "quoting": {}, "persist_docs": {}, "vars": {}, "column_types": {}}, "schema": "public", "database": "quasar_prod_warehouse", "alias": "not_null_snowplow_phoenix_events_browser_size", "column_name": "browser_size", "columns": {}, "description": ""}, "test.ds_dbt.relationships_snowplow_phoenix_events_northstar_id__id__ref_users_": {"name": "relationships_snowplow_phoenix_events_northstar_id__id__ref_users_", "resource_type": "test", "package_name": "ds_dbt", "root_path": "/Users/mrich/projects/quasar/quasar/dbt", "path": "schema_test/relationships_snowplow_phoenix_events_northstar_id__id__ref_users_.sql", "original_file_path": "models/phoenix_events/schema.yml", "raw_sql": "{{ config(severity='ERROR') }}{{ test_relationships(model=ref('snowplow_phoenix_events'), column_name='northstar_id', field='id', to=ref('users')) }}", "refs": [["snowplow_phoenix_events"], ["users"]], "sources": [], "depends_on": {"nodes": ["model.ds_dbt.snowplow_phoenix_events", "model.ds_dbt.users"], "macros": []}, "unique_id": "test.ds_dbt.relationships_snowplow_phoenix_events_northstar_id__id__ref_users_", "empty": false, "fqn": ["ds_dbt", "schema_test", "relationships_snowplow_phoenix_events_northstar_id__id__ref_users_"], "tags": ["schema"], "config": {"enabled": true, "materialized": "view", "severity": "ERROR", "tags": [], "pre-hook": [], "post-hook": [], "quoting": {}, "persist_docs": {}, "vars": {}, "column_types": {}}, "schema": "public", "database": "quasar_prod_warehouse", "alias": "relationships_snowplow_phoenix_events_northstar_id__id__ref_users_", "column_name": "northstar_id", "columns": {}, "description": ""}, "test.ds_dbt.not_null_snowplow_phoenix_events_device_id": {"name": "not_null_snowplow_phoenix_events_device_id", "resource_type": "test", "package_name": "ds_dbt", "root_path": "/Users/mrich/projects/quasar/quasar/dbt", "path": "schema_test/not_null_snowplow_phoenix_events_device_id.sql", "original_file_path": "models/phoenix_events/schema.yml", "raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(model=ref('snowplow_phoenix_events'), column_name='device_id') }}", "refs": [["snowplow_phoenix_events"]], "sources": [], "depends_on": {"nodes": ["model.ds_dbt.snowplow_phoenix_events"], "macros": []}, "unique_id": "test.ds_dbt.not_null_snowplow_phoenix_events_device_id", "empty": false, "fqn": ["ds_dbt", "schema_test", "not_null_snowplow_phoenix_events_device_id"], "tags": ["schema"], "config": {"enabled": true, "materialized": "view", "severity": "ERROR", "tags": [], "pre-hook": [], "post-hook": [], "quoting": {}, "persist_docs": {}, "vars": {}, "column_types": {}}, "schema": "public", "database": "quasar_prod_warehouse", "alias": "not_null_snowplow_phoenix_events_device_id", "column_name": "device_id", "columns": {}, "description": ""}, "test.ds_dbt.unique_snowplow_sessions_session_id": {"name": "unique_snowplow_sessions_session_id", "resource_type": "test", "package_name": "ds_dbt", "root_path": "/Users/mrich/projects/quasar/quasar/dbt", "path": "schema_test/unique_snowplow_sessions_session_id.sql", "original_file_path": "models/phoenix_events/schema.yml", "raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(model=ref('snowplow_sessions'), column_name='session_id') }}", "refs": [["snowplow_sessions"]], "sources": [], "depends_on": {"nodes": ["model.ds_dbt.snowplow_sessions"], "macros": []}, "unique_id": "test.ds_dbt.unique_snowplow_sessions_session_id", "empty": false, "fqn": ["ds_dbt", "schema_test", "unique_snowplow_sessions_session_id"], "tags": ["schema"], "config": {"enabled": true, "materialized": "view", "severity": "ERROR", "tags": [], "pre-hook": [], "post-hook": [], "quoting": {}, "persist_docs": {}, "vars": {}, "column_types": {}}, "schema": "public", "database": "quasar_prod_warehouse", "alias": "unique_snowplow_sessions_session_id", "column_name": "session_id", "columns": {}, "description": ""}, "test.ds_dbt.not_null_snowplow_sessions_session_id": {"name": "not_null_snowplow_sessions_session_id", "resource_type": "test", "package_name": "ds_dbt", "root_path": "/Users/mrich/projects/quasar/quasar/dbt", "path": "schema_test/not_null_snowplow_sessions_session_id.sql", "original_file_path": "models/phoenix_events/schema.yml", "raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(model=ref('snowplow_sessions'), column_name='session_id') }}", "refs": [["snowplow_sessions"]], "sources": [], "depends_on": {"nodes": ["model.ds_dbt.snowplow_sessions"], "macros": []}, "unique_id": "test.ds_dbt.not_null_snowplow_sessions_session_id", "empty": false, "fqn": ["ds_dbt", "schema_test", "not_null_snowplow_sessions_session_id"], "tags": ["schema"], "config": {"enabled": true, "materialized": "view", "severity": "ERROR", "tags": [], "pre-hook": [], "post-hook": [], "quoting": {}, "persist_docs": {}, "vars": {}, "column_types": {}}, "schema": "public", "database": "quasar_prod_warehouse", "alias": "not_null_snowplow_sessions_session_id", "column_name": "session_id", "columns": {}, "description": ""}, "test.ds_dbt.unique_snowplow_sessions_event_id": {"name": "unique_snowplow_sessions_event_id", "resource_type": "test", "package_name": "ds_dbt", "root_path": "/Users/mrich/projects/quasar/quasar/dbt", "path": "schema_test/unique_snowplow_sessions_event_id.sql", "original_file_path": "models/phoenix_events/schema.yml", "raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(model=ref('snowplow_sessions'), column_name='event_id') }}", "refs": [["snowplow_sessions"]], "sources": [], "depends_on": {"nodes": ["model.ds_dbt.snowplow_sessions"], "macros": []}, "unique_id": "test.ds_dbt.unique_snowplow_sessions_event_id", "empty": false, "fqn": ["ds_dbt", "schema_test", "unique_snowplow_sessions_event_id"], "tags": ["schema"], "config": {"enabled": true, "materialized": "view", "severity": "ERROR", "tags": [], "pre-hook": [], "post-hook": [], "quoting": {}, "persist_docs": {}, "vars": {}, "column_types": {}}, "schema": "public", "database": "quasar_prod_warehouse", "alias": "unique_snowplow_sessions_event_id", "column_name": "event_id", "columns": {}, "description": ""}, "test.ds_dbt.not_null_snowplow_sessions_event_id": {"name": "not_null_snowplow_sessions_event_id", "resource_type": "test", "package_name": "ds_dbt", "root_path": "/Users/mrich/projects/quasar/quasar/dbt", "path": "schema_test/not_null_snowplow_sessions_event_id.sql", "original_file_path": "models/phoenix_events/schema.yml", "raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(model=ref('snowplow_sessions'), column_name='event_id') }}", "refs": [["snowplow_sessions"]], "sources": [], "depends_on": {"nodes": ["model.ds_dbt.snowplow_sessions"], "macros": []}, "unique_id": "test.ds_dbt.not_null_snowplow_sessions_event_id", "empty": false, "fqn": ["ds_dbt", "schema_test", "not_null_snowplow_sessions_event_id"], "tags": ["schema"], "config": {"enabled": true, "materialized": "view", "severity": "ERROR", "tags": [], "pre-hook": [], "post-hook": [], "quoting": {}, "persist_docs": {}, "vars": {}, "column_types": {}}, "schema": "public", "database": "quasar_prod_warehouse", "alias": "not_null_snowplow_sessions_event_id", "column_name": "event_id", "columns": {}, "description": ""}, "test.ds_dbt.not_null_snowplow_sessions_device_id": {"name": "not_null_snowplow_sessions_device_id", "resource_type": "test", "package_name": "ds_dbt", "root_path": "/Users/mrich/projects/quasar/quasar/dbt", "path": "schema_test/not_null_snowplow_sessions_device_id.sql", "original_file_path": "models/phoenix_events/schema.yml", "raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(model=ref('snowplow_sessions'), column_name='device_id') }}", "refs": [["snowplow_sessions"]], "sources": [], "depends_on": {"nodes": ["model.ds_dbt.snowplow_sessions"], "macros": []}, "unique_id": "test.ds_dbt.not_null_snowplow_sessions_device_id", "empty": false, "fqn": ["ds_dbt", "schema_test", "not_null_snowplow_sessions_device_id"], "tags": ["schema"], "config": {"enabled": true, "materialized": "view", "severity": "ERROR", "tags": [], "pre-hook": [], "post-hook": [], "quoting": {}, "persist_docs": {}, "vars": {}, "column_types": {}}, "schema": "public", "database": "quasar_prod_warehouse", "alias": "not_null_snowplow_sessions_device_id", "column_name": "device_id", "columns": {}, "description": ""}, "test.ds_dbt.not_null_snowplow_sessions_landing_datetime": {"name": "not_null_snowplow_sessions_landing_datetime", "resource_type": "test", "package_name": "ds_dbt", "root_path": "/Users/mrich/projects/quasar/quasar/dbt", "path": "schema_test/not_null_snowplow_sessions_landing_datetime.sql", "original_file_path": "models/phoenix_events/schema.yml", "raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(model=ref('snowplow_sessions'), column_name='landing_datetime') }}", "refs": [["snowplow_sessions"]], "sources": [], "depends_on": {"nodes": ["model.ds_dbt.snowplow_sessions"], "macros": []}, "unique_id": "test.ds_dbt.not_null_snowplow_sessions_landing_datetime", "empty": false, "fqn": ["ds_dbt", "schema_test", "not_null_snowplow_sessions_landing_datetime"], "tags": ["schema"], "config": {"enabled": true, "materialized": "view", "severity": "ERROR", "tags": [], "pre-hook": [], "post-hook": [], "quoting": {}, "persist_docs": {}, "vars": {}, "column_types": {}}, "schema": "public", "database": "quasar_prod_warehouse", "alias": "not_null_snowplow_sessions_landing_datetime", "column_name": "landing_datetime", "columns": {}, "description": ""}, "test.ds_dbt.not_null_snowplow_sessions_ending_datetime": {"name": "not_null_snowplow_sessions_ending_datetime", "resource_type": "test", "package_name": "ds_dbt", "root_path": "/Users/mrich/projects/quasar/quasar/dbt", "path": "schema_test/not_null_snowplow_sessions_ending_datetime.sql", "original_file_path": "models/phoenix_events/schema.yml", "raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(model=ref('snowplow_sessions'), column_name='ending_datetime') }}", "refs": [["snowplow_sessions"]], "sources": [], "depends_on": {"nodes": ["model.ds_dbt.snowplow_sessions"], "macros": []}, "unique_id": "test.ds_dbt.not_null_snowplow_sessions_ending_datetime", "empty": false, "fqn": ["ds_dbt", "schema_test", "not_null_snowplow_sessions_ending_datetime"], "tags": ["schema"], "config": {"enabled": true, "materialized": "view", "severity": "ERROR", "tags": [], "pre-hook": [], "post-hook": [], "quoting": {}, "persist_docs": {}, "vars": {}, "column_types": {}}, "schema": "public", "database": "quasar_prod_warehouse", "alias": "not_null_snowplow_sessions_ending_datetime", "column_name": "ending_datetime", "columns": {}, "description": ""}, "test.ds_dbt.not_null_snowplow_sessions_session_duration_seconds": {"name": "not_null_snowplow_sessions_session_duration_seconds", "resource_type": "test", "package_name": "ds_dbt", "root_path": "/Users/mrich/projects/quasar/quasar/dbt", "path": "schema_test/not_null_snowplow_sessions_session_duration_seconds.sql", "original_file_path": "models/phoenix_events/schema.yml", "raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(model=ref('snowplow_sessions'), column_name='session_duration_seconds') }}", "refs": [["snowplow_sessions"]], "sources": [], "depends_on": {"nodes": ["model.ds_dbt.snowplow_sessions"], "macros": []}, "unique_id": "test.ds_dbt.not_null_snowplow_sessions_session_duration_seconds", "empty": false, "fqn": ["ds_dbt", "schema_test", "not_null_snowplow_sessions_session_duration_seconds"], "tags": ["schema"], "config": {"enabled": true, "materialized": "view", "severity": "ERROR", "tags": [], "pre-hook": [], "post-hook": [], "quoting": {}, "persist_docs": {}, "vars": {}, "column_types": {}}, "schema": "public", "database": "quasar_prod_warehouse", "alias": "not_null_snowplow_sessions_session_duration_seconds", "column_name": "session_duration_seconds", "columns": {}, "description": ""}, "test.ds_dbt.not_null_snowplow_sessions_num_pages_views": {"name": "not_null_snowplow_sessions_num_pages_views", "resource_type": "test", "package_name": "ds_dbt", "root_path": "/Users/mrich/projects/quasar/quasar/dbt", "path": "schema_test/not_null_snowplow_sessions_num_pages_views.sql", "original_file_path": "models/phoenix_events/schema.yml", "raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(model=ref('snowplow_sessions'), column_name='num_pages_views') }}", "refs": [["snowplow_sessions"]], "sources": [], "depends_on": {"nodes": ["model.ds_dbt.snowplow_sessions"], "macros": []}, "unique_id": "test.ds_dbt.not_null_snowplow_sessions_num_pages_views", "empty": false, "fqn": ["ds_dbt", "schema_test", "not_null_snowplow_sessions_num_pages_views"], "tags": ["schema"], "config": {"enabled": true, "materialized": "view", "severity": "ERROR", "tags": [], "pre-hook": [], "post-hook": [], "quoting": {}, "persist_docs": {}, "vars": {}, "column_types": {}}, "schema": "public", "database": "quasar_prod_warehouse", "alias": "not_null_snowplow_sessions_num_pages_views", "column_name": "num_pages_views", "columns": {}, "description": ""}, "test.ds_dbt.not_null_snowplow_sessions_landing_page": {"name": "not_null_snowplow_sessions_landing_page", "resource_type": "test", "package_name": "ds_dbt", "root_path": "/Users/mrich/projects/quasar/quasar/dbt", "path": "schema_test/not_null_snowplow_sessions_landing_page.sql", "original_file_path": "models/phoenix_events/schema.yml", "raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(model=ref('snowplow_sessions'), column_name='landing_page') }}", "refs": [["snowplow_sessions"]], "sources": [], "depends_on": {"nodes": ["model.ds_dbt.snowplow_sessions"], "macros": []}, "unique_id": "test.ds_dbt.not_null_snowplow_sessions_landing_page", "empty": false, "fqn": ["ds_dbt", "schema_test", "not_null_snowplow_sessions_landing_page"], "tags": ["schema"], "config": {"enabled": true, "materialized": "view", "severity": "ERROR", "tags": [], "pre-hook": [], "post-hook": [], "quoting": {}, "persist_docs": {}, "vars": {}, "column_types": {}}, "schema": "public", "database": "quasar_prod_warehouse", "alias": "not_null_snowplow_sessions_landing_page", "column_name": "landing_page", "columns": {}, "description": ""}, "test.ds_dbt.not_null_snowplow_sessions_exit_page": {"name": "not_null_snowplow_sessions_exit_page", "resource_type": "test", "package_name": "ds_dbt", "root_path": "/Users/mrich/projects/quasar/quasar/dbt", "path": "schema_test/not_null_snowplow_sessions_exit_page.sql", "original_file_path": "models/phoenix_events/schema.yml", "raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(model=ref('snowplow_sessions'), column_name='exit_page') }}", "refs": [["snowplow_sessions"]], "sources": [], "depends_on": {"nodes": ["model.ds_dbt.snowplow_sessions"], "macros": []}, "unique_id": "test.ds_dbt.not_null_snowplow_sessions_exit_page", "empty": false, "fqn": ["ds_dbt", "schema_test", "not_null_snowplow_sessions_exit_page"], "tags": ["schema"], "config": {"enabled": true, "materialized": "view", "severity": "ERROR", "tags": [], "pre-hook": [], "post-hook": [], "quoting": {}, "persist_docs": {}, "vars": {}, "column_types": {}}, "schema": "public", "database": "quasar_prod_warehouse", "alias": "not_null_snowplow_sessions_exit_page", "column_name": "exit_page", "columns": {}, "description": ""}, "test.ds_dbt.unique_phoenix_events_combined_event_id": {"name": "unique_phoenix_events_combined_event_id", "resource_type": "test", "package_name": "ds_dbt", "root_path": "/Users/mrich/projects/quasar/quasar/dbt", "path": "schema_test/unique_phoenix_events_combined_event_id.sql", "original_file_path": "models/phoenix_events/schema.yml", "raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(model=ref('phoenix_events_combined'), column_name='event_id') }}", "refs": [["phoenix_events_combined"]], "sources": [], "depends_on": {"nodes": ["model.ds_dbt.phoenix_events_combined"], "macros": []}, "unique_id": "test.ds_dbt.unique_phoenix_events_combined_event_id", "empty": false, "fqn": ["ds_dbt", "schema_test", "unique_phoenix_events_combined_event_id"], "tags": ["schema"], "config": {"enabled": true, "materialized": "view", "severity": "ERROR", "tags": [], "pre-hook": [], "post-hook": [], "quoting": {}, "persist_docs": {}, "vars": {}, "column_types": {}}, "schema": "public", "database": "quasar_prod_warehouse", "alias": "unique_phoenix_events_combined_event_id", "column_name": "event_id", "columns": {}, "description": ""}, "test.ds_dbt.not_null_phoenix_events_combined_event_id": {"name": "not_null_phoenix_events_combined_event_id", "resource_type": "test", "package_name": "ds_dbt", "root_path": "/Users/mrich/projects/quasar/quasar/dbt", "path": "schema_test/not_null_phoenix_events_combined_event_id.sql", "original_file_path": "models/phoenix_events/schema.yml", "raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(model=ref('phoenix_events_combined'), column_name='event_id') }}", "refs": [["phoenix_events_combined"]], "sources": [], "depends_on": {"nodes": ["model.ds_dbt.phoenix_events_combined"], "macros": []}, "unique_id": "test.ds_dbt.not_null_phoenix_events_combined_event_id", "empty": false, "fqn": ["ds_dbt", "schema_test", "not_null_phoenix_events_combined_event_id"], "tags": ["schema"], "config": {"enabled": true, "materialized": "view", "severity": "ERROR", "tags": [], "pre-hook": [], "post-hook": [], "quoting": {}, "persist_docs": {}, "vars": {}, "column_types": {}}, "schema": "public", "database": "quasar_prod_warehouse", "alias": "not_null_phoenix_events_combined_event_id", "column_name": "event_id", "columns": {}, "description": ""}, "test.ds_dbt.not_null_phoenix_events_combined_event_datetime": {"name": "not_null_phoenix_events_combined_event_datetime", "resource_type": "test", "package_name": "ds_dbt", "root_path": "/Users/mrich/projects/quasar/quasar/dbt", "path": "schema_test/not_null_phoenix_events_combined_event_datetime.sql", "original_file_path": "models/phoenix_events/schema.yml", "raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(model=ref('phoenix_events_combined'), column_name='event_datetime') }}", "refs": [["phoenix_events_combined"]], "sources": [], "depends_on": {"nodes": ["model.ds_dbt.phoenix_events_combined"], "macros": []}, "unique_id": "test.ds_dbt.not_null_phoenix_events_combined_event_datetime", "empty": false, "fqn": ["ds_dbt", "schema_test", "not_null_phoenix_events_combined_event_datetime"], "tags": ["schema"], "config": {"enabled": true, "materialized": "view", "severity": "ERROR", "tags": [], "pre-hook": [], "post-hook": [], "quoting": {}, "persist_docs": {}, "vars": {}, "column_types": {}}, "schema": "public", "database": "quasar_prod_warehouse", "alias": "not_null_phoenix_events_combined_event_datetime", "column_name": "event_datetime", "columns": {}, "description": ""}, "test.ds_dbt.unique_phoenix_events_combined_event_source": {"name": "unique_phoenix_events_combined_event_source", "resource_type": "test", "package_name": "ds_dbt", "root_path": "/Users/mrich/projects/quasar/quasar/dbt", "path": "schema_test/unique_phoenix_events_combined_event_source.sql", "original_file_path": "models/phoenix_events/schema.yml", "raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(model=ref('phoenix_events_combined'), column_name='event_source') }}", "refs": [["phoenix_events_combined"]], "sources": [], "depends_on": {"nodes": ["model.ds_dbt.phoenix_events_combined"], "macros": []}, "unique_id": "test.ds_dbt.unique_phoenix_events_combined_event_source", "empty": false, "fqn": ["ds_dbt", "schema_test", "unique_phoenix_events_combined_event_source"], "tags": ["schema"], "config": {"enabled": true, "materialized": "view", "severity": "ERROR", "tags": [], "pre-hook": [], "post-hook": [], "quoting": {}, "persist_docs": {}, "vars": {}, "column_types": {}}, "schema": "public", "database": "quasar_prod_warehouse", "alias": "unique_phoenix_events_combined_event_source", "column_name": "event_source", "columns": {}, "description": ""}, "test.ds_dbt.not_null_phoenix_events_combined_event_source": {"name": "not_null_phoenix_events_combined_event_source", "resource_type": "test", "package_name": "ds_dbt", "root_path": "/Users/mrich/projects/quasar/quasar/dbt", "path": "schema_test/not_null_phoenix_events_combined_event_source.sql", "original_file_path": "models/phoenix_events/schema.yml", "raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(model=ref('phoenix_events_combined'), column_name='event_source') }}", "refs": [["phoenix_events_combined"]], "sources": [], "depends_on": {"nodes": ["model.ds_dbt.phoenix_events_combined"], "macros": []}, "unique_id": "test.ds_dbt.not_null_phoenix_events_combined_event_source", "empty": false, "fqn": ["ds_dbt", "schema_test", "not_null_phoenix_events_combined_event_source"], "tags": ["schema"], "config": {"enabled": true, "materialized": "view", "severity": "ERROR", "tags": [], "pre-hook": [], "post-hook": [], "quoting": {}, "persist_docs": {}, "vars": {}, "column_types": {}}, "schema": "public", "database": "quasar_prod_warehouse", "alias": "not_null_phoenix_events_combined_event_source", "column_name": "event_source", "columns": {}, "description": ""}, "test.ds_dbt.not_null_phoenix_events_combined_path": {"name": "not_null_phoenix_events_combined_path", "resource_type": "test", "package_name": "ds_dbt", "root_path": "/Users/mrich/projects/quasar/quasar/dbt", "path": "schema_test/not_null_phoenix_events_combined_path.sql", "original_file_path": "models/phoenix_events/schema.yml", "raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(model=ref('phoenix_events_combined'), column_name='path') }}", "refs": [["phoenix_events_combined"]], "sources": [], "depends_on": {"nodes": ["model.ds_dbt.phoenix_events_combined"], "macros": []}, "unique_id": "test.ds_dbt.not_null_phoenix_events_combined_path", "empty": false, "fqn": ["ds_dbt", "schema_test", "not_null_phoenix_events_combined_path"], "tags": ["schema"], "config": {"enabled": true, "materialized": "view", "severity": "ERROR", "tags": [], "pre-hook": [], "post-hook": [], "quoting": {}, "persist_docs": {}, "vars": {}, "column_types": {}}, "schema": "public", "database": "quasar_prod_warehouse", "alias": "not_null_phoenix_events_combined_path", "column_name": "path", "columns": {}, "description": ""}, "test.ds_dbt.not_null_phoenix_events_combined_host": {"name": "not_null_phoenix_events_combined_host", "resource_type": "test", "package_name": "ds_dbt", "root_path": "/Users/mrich/projects/quasar/quasar/dbt", "path": "schema_test/not_null_phoenix_events_combined_host.sql", "original_file_path": "models/phoenix_events/schema.yml", "raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(model=ref('phoenix_events_combined'), column_name='host') }}", "refs": [["phoenix_events_combined"]], "sources": [], "depends_on": {"nodes": ["model.ds_dbt.phoenix_events_combined"], "macros": []}, "unique_id": "test.ds_dbt.not_null_phoenix_events_combined_host", "empty": false, "fqn": ["ds_dbt", "schema_test", "not_null_phoenix_events_combined_host"], "tags": ["schema"], "config": {"enabled": true, "materialized": "view", "severity": "ERROR", "tags": [], "pre-hook": [], "post-hook": [], "quoting": {}, "persist_docs": {}, "vars": {}, "column_types": {}}, "schema": "public", "database": "quasar_prod_warehouse", "alias": "not_null_phoenix_events_combined_host", "column_name": "host", "columns": {}, "description": ""}, "test.ds_dbt.not_null_phoenix_events_combined_referrer_host": {"name": "not_null_phoenix_events_combined_referrer_host", "resource_type": "test", "package_name": "ds_dbt", "root_path": "/Users/mrich/projects/quasar/quasar/dbt", "path": "schema_test/not_null_phoenix_events_combined_referrer_host.sql", "original_file_path": "models/phoenix_events/schema.yml", "raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(model=ref('phoenix_events_combined'), column_name='referrer_host') }}", "refs": [["phoenix_events_combined"]], "sources": [], "depends_on": {"nodes": ["model.ds_dbt.phoenix_events_combined"], "macros": []}, "unique_id": "test.ds_dbt.not_null_phoenix_events_combined_referrer_host", "empty": false, "fqn": ["ds_dbt", "schema_test", "not_null_phoenix_events_combined_referrer_host"], "tags": ["schema"], "config": {"enabled": true, "materialized": "view", "severity": "ERROR", "tags": [], "pre-hook": [], "post-hook": [], "quoting": {}, "persist_docs": {}, "vars": {}, "column_types": {}}, "schema": "public", "database": "quasar_prod_warehouse", "alias": "not_null_phoenix_events_combined_referrer_host", "column_name": "referrer_host", "columns": {}, "description": ""}, "test.ds_dbt.not_null_phoenix_events_combined_referrer_path": {"name": "not_null_phoenix_events_combined_referrer_path", "resource_type": "test", "package_name": "ds_dbt", "root_path": "/Users/mrich/projects/quasar/quasar/dbt", "path": "schema_test/not_null_phoenix_events_combined_referrer_path.sql", "original_file_path": "models/phoenix_events/schema.yml", "raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(model=ref('phoenix_events_combined'), column_name='referrer_path') }}", "refs": [["phoenix_events_combined"]], "sources": [], "depends_on": {"nodes": ["model.ds_dbt.phoenix_events_combined"], "macros": []}, "unique_id": "test.ds_dbt.not_null_phoenix_events_combined_referrer_path", "empty": false, "fqn": ["ds_dbt", "schema_test", "not_null_phoenix_events_combined_referrer_path"], "tags": ["schema"], "config": {"enabled": true, "materialized": "view", "severity": "ERROR", "tags": [], "pre-hook": [], "post-hook": [], "quoting": {}, "persist_docs": {}, "vars": {}, "column_types": {}}, "schema": "public", "database": "quasar_prod_warehouse", "alias": "not_null_phoenix_events_combined_referrer_path", "column_name": "referrer_path", "columns": {}, "description": ""}, "test.ds_dbt.not_null_phoenix_events_combined_session_id": {"name": "not_null_phoenix_events_combined_session_id", "resource_type": "test", "package_name": "ds_dbt", "root_path": "/Users/mrich/projects/quasar/quasar/dbt", "path": "schema_test/not_null_phoenix_events_combined_session_id.sql", "original_file_path": "models/phoenix_events/schema.yml", "raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(model=ref('phoenix_events_combined'), column_name='session_id') }}", "refs": [["phoenix_events_combined"]], "sources": [], "depends_on": {"nodes": ["model.ds_dbt.phoenix_events_combined"], "macros": []}, "unique_id": "test.ds_dbt.not_null_phoenix_events_combined_session_id", "empty": false, "fqn": ["ds_dbt", "schema_test", "not_null_phoenix_events_combined_session_id"], "tags": ["schema"], "config": {"enabled": true, "materialized": "view", "severity": "ERROR", "tags": [], "pre-hook": [], "post-hook": [], "quoting": {}, "persist_docs": {}, "vars": {}, "column_types": {}}, "schema": "public", "database": "quasar_prod_warehouse", "alias": "not_null_phoenix_events_combined_session_id", "column_name": "session_id", "columns": {}, "description": ""}, "test.ds_dbt.not_null_phoenix_events_combined_browser_size": {"name": "not_null_phoenix_events_combined_browser_size", "resource_type": "test", "package_name": "ds_dbt", "root_path": "/Users/mrich/projects/quasar/quasar/dbt", "path": "schema_test/not_null_phoenix_events_combined_browser_size.sql", "original_file_path": "models/phoenix_events/schema.yml", "raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(model=ref('phoenix_events_combined'), column_name='browser_size') }}", "refs": [["phoenix_events_combined"]], "sources": [], "depends_on": {"nodes": ["model.ds_dbt.phoenix_events_combined"], "macros": []}, "unique_id": "test.ds_dbt.not_null_phoenix_events_combined_browser_size", "empty": false, "fqn": ["ds_dbt", "schema_test", "not_null_phoenix_events_combined_browser_size"], "tags": ["schema"], "config": {"enabled": true, "materialized": "view", "severity": "ERROR", "tags": [], "pre-hook": [], "post-hook": [], "quoting": {}, "persist_docs": {}, "vars": {}, "column_types": {}}, "schema": "public", "database": "quasar_prod_warehouse", "alias": "not_null_phoenix_events_combined_browser_size", "column_name": "browser_size", "columns": {}, "description": ""}, "test.ds_dbt.relationships_phoenix_events_combined_northstar_id__id__ref_users_": {"name": "relationships_phoenix_events_combined_northstar_id__id__ref_users_", "resource_type": "test", "package_name": "ds_dbt", "root_path": "/Users/mrich/projects/quasar/quasar/dbt", "path": "schema_test/relationships_phoenix_events_combined_northstar_id__id__ref_users_.sql", "original_file_path": "models/phoenix_events/schema.yml", "raw_sql": "{{ config(severity='ERROR') }}{{ test_relationships(model=ref('phoenix_events_combined'), column_name='northstar_id', field='id', to=ref('users')) }}", "refs": [["phoenix_events_combined"], ["users"]], "sources": [], "depends_on": {"nodes": ["model.ds_dbt.phoenix_events_combined", "model.ds_dbt.users"], "macros": []}, "unique_id": "test.ds_dbt.relationships_phoenix_events_combined_northstar_id__id__ref_users_", "empty": false, "fqn": ["ds_dbt", "schema_test", "relationships_phoenix_events_combined_northstar_id__id__ref_users_"], "tags": ["schema"], "config": {"enabled": true, "materialized": "view", "severity": "ERROR", "tags": [], "pre-hook": [], "post-hook": [], "quoting": {}, "persist_docs": {}, "vars": {}, "column_types": {}}, "schema": "public", "database": "quasar_prod_warehouse", "alias": "relationships_phoenix_events_combined_northstar_id__id__ref_users_", "column_name": "northstar_id", "columns": {}, "description": ""}, "test.ds_dbt.not_null_phoenix_events_combined_device_id": {"name": "not_null_phoenix_events_combined_device_id", "resource_type": "test", "package_name": "ds_dbt", "root_path": "/Users/mrich/projects/quasar/quasar/dbt", "path": "schema_test/not_null_phoenix_events_combined_device_id.sql", "original_file_path": "models/phoenix_events/schema.yml", "raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(model=ref('phoenix_events_combined'), column_name='device_id') }}", "refs": [["phoenix_events_combined"]], "sources": [], "depends_on": {"nodes": ["model.ds_dbt.phoenix_events_combined"], "macros": []}, "unique_id": "test.ds_dbt.not_null_phoenix_events_combined_device_id", "empty": false, "fqn": ["ds_dbt", "schema_test", "not_null_phoenix_events_combined_device_id"], "tags": ["schema"], "config": {"enabled": true, "materialized": "view", "severity": "ERROR", "tags": [], "pre-hook": [], "post-hook": [], "quoting": {}, "persist_docs": {}, "vars": {}, "column_types": {}}, "schema": "public", "database": "quasar_prod_warehouse", "alias": "not_null_phoenix_events_combined_device_id", "column_name": "device_id", "columns": {}, "description": ""}, "test.ds_dbt.unique_phoenix_sessions_combined_session_id": {"name": "unique_phoenix_sessions_combined_session_id", "resource_type": "test", "package_name": "ds_dbt", "root_path": "/Users/mrich/projects/quasar/quasar/dbt", "path": "schema_test/unique_phoenix_sessions_combined_session_id.sql", "original_file_path": "models/phoenix_events/schema.yml", "raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(model=ref('phoenix_sessions_combined'), column_name='session_id') }}", "refs": [["phoenix_sessions_combined"]], "sources": [], "depends_on": {"nodes": ["model.ds_dbt.phoenix_sessions_combined"], "macros": []}, "unique_id": "test.ds_dbt.unique_phoenix_sessions_combined_session_id", "empty": false, "fqn": ["ds_dbt", "schema_test", "unique_phoenix_sessions_combined_session_id"], "tags": ["schema"], "config": {"enabled": true, "materialized": "view", "severity": "ERROR", "tags": [], "pre-hook": [], "post-hook": [], "quoting": {}, "persist_docs": {}, "vars": {}, "column_types": {}}, "schema": "public", "database": "quasar_prod_warehouse", "alias": "unique_phoenix_sessions_combined_session_id", "column_name": "session_id", "columns": {}, "description": ""}, "test.ds_dbt.not_null_phoenix_sessions_combined_session_id": {"name": "not_null_phoenix_sessions_combined_session_id", "resource_type": "test", "package_name": "ds_dbt", "root_path": "/Users/mrich/projects/quasar/quasar/dbt", "path": "schema_test/not_null_phoenix_sessions_combined_session_id.sql", "original_file_path": "models/phoenix_events/schema.yml", "raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(model=ref('phoenix_sessions_combined'), column_name='session_id') }}", "refs": [["phoenix_sessions_combined"]], "sources": [], "depends_on": {"nodes": ["model.ds_dbt.phoenix_sessions_combined"], "macros": []}, "unique_id": "test.ds_dbt.not_null_phoenix_sessions_combined_session_id", "empty": false, "fqn": ["ds_dbt", "schema_test", "not_null_phoenix_sessions_combined_session_id"], "tags": ["schema"], "config": {"enabled": true, "materialized": "view", "severity": "ERROR", "tags": [], "pre-hook": [], "post-hook": [], "quoting": {}, "persist_docs": {}, "vars": {}, "column_types": {}}, "schema": "public", "database": "quasar_prod_warehouse", "alias": "not_null_phoenix_sessions_combined_session_id", "column_name": "session_id", "columns": {}, "description": ""}, "test.ds_dbt.unique_phoenix_sessions_combined_event_id": {"name": "unique_phoenix_sessions_combined_event_id", "resource_type": "test", "package_name": "ds_dbt", "root_path": "/Users/mrich/projects/quasar/quasar/dbt", "path": "schema_test/unique_phoenix_sessions_combined_event_id.sql", "original_file_path": "models/phoenix_events/schema.yml", "raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(model=ref('phoenix_sessions_combined'), column_name='event_id') }}", "refs": [["phoenix_sessions_combined"]], "sources": [], "depends_on": {"nodes": ["model.ds_dbt.phoenix_sessions_combined"], "macros": []}, "unique_id": "test.ds_dbt.unique_phoenix_sessions_combined_event_id", "empty": false, "fqn": ["ds_dbt", "schema_test", "unique_phoenix_sessions_combined_event_id"], "tags": ["schema"], "config": {"enabled": true, "materialized": "view", "severity": "ERROR", "tags": [], "pre-hook": [], "post-hook": [], "quoting": {}, "persist_docs": {}, "vars": {}, "column_types": {}}, "schema": "public", "database": "quasar_prod_warehouse", "alias": "unique_phoenix_sessions_combined_event_id", "column_name": "event_id", "columns": {}, "description": ""}, "test.ds_dbt.not_null_phoenix_sessions_combined_event_id": {"name": "not_null_phoenix_sessions_combined_event_id", "resource_type": "test", "package_name": "ds_dbt", "root_path": "/Users/mrich/projects/quasar/quasar/dbt", "path": "schema_test/not_null_phoenix_sessions_combined_event_id.sql", "original_file_path": "models/phoenix_events/schema.yml", "raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(model=ref('phoenix_sessions_combined'), column_name='event_id') }}", "refs": [["phoenix_sessions_combined"]], "sources": [], "depends_on": {"nodes": ["model.ds_dbt.phoenix_sessions_combined"], "macros": []}, "unique_id": "test.ds_dbt.not_null_phoenix_sessions_combined_event_id", "empty": false, "fqn": ["ds_dbt", "schema_test", "not_null_phoenix_sessions_combined_event_id"], "tags": ["schema"], "config": {"enabled": true, "materialized": "view", "severity": "ERROR", "tags": [], "pre-hook": [], "post-hook": [], "quoting": {}, "persist_docs": {}, "vars": {}, "column_types": {}}, "schema": "public", "database": "quasar_prod_warehouse", "alias": "not_null_phoenix_sessions_combined_event_id", "column_name": "event_id", "columns": {}, "description": ""}, "test.ds_dbt.not_null_phoenix_sessions_combined_device_id": {"name": "not_null_phoenix_sessions_combined_device_id", "resource_type": "test", "package_name": "ds_dbt", "root_path": "/Users/mrich/projects/quasar/quasar/dbt", "path": "schema_test/not_null_phoenix_sessions_combined_device_id.sql", "original_file_path": "models/phoenix_events/schema.yml", "raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(model=ref('phoenix_sessions_combined'), column_name='device_id') }}", "refs": [["phoenix_sessions_combined"]], "sources": [], "depends_on": {"nodes": ["model.ds_dbt.phoenix_sessions_combined"], "macros": []}, "unique_id": "test.ds_dbt.not_null_phoenix_sessions_combined_device_id", "empty": false, "fqn": ["ds_dbt", "schema_test", "not_null_phoenix_sessions_combined_device_id"], "tags": ["schema"], "config": {"enabled": true, "materialized": "view", "severity": "ERROR", "tags": [], "pre-hook": [], "post-hook": [], "quoting": {}, "persist_docs": {}, "vars": {}, "column_types": {}}, "schema": "public", "database": "quasar_prod_warehouse", "alias": "not_null_phoenix_sessions_combined_device_id", "column_name": "device_id", "columns": {}, "description": ""}, "test.ds_dbt.not_null_phoenix_sessions_combined_landing_datetime": {"name": "not_null_phoenix_sessions_combined_landing_datetime", "resource_type": "test", "package_name": "ds_dbt", "root_path": "/Users/mrich/projects/quasar/quasar/dbt", "path": "schema_test/not_null_phoenix_sessions_combined_landing_datetime.sql", "original_file_path": "models/phoenix_events/schema.yml", "raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(model=ref('phoenix_sessions_combined'), column_name='landing_datetime') }}", "refs": [["phoenix_sessions_combined"]], "sources": [], "depends_on": {"nodes": ["model.ds_dbt.phoenix_sessions_combined"], "macros": []}, "unique_id": "test.ds_dbt.not_null_phoenix_sessions_combined_landing_datetime", "empty": false, "fqn": ["ds_dbt", "schema_test", "not_null_phoenix_sessions_combined_landing_datetime"], "tags": ["schema"], "config": {"enabled": true, "materialized": "view", "severity": "ERROR", "tags": [], "pre-hook": [], "post-hook": [], "quoting": {}, "persist_docs": {}, "vars": {}, "column_types": {}}, "schema": "public", "database": "quasar_prod_warehouse", "alias": "not_null_phoenix_sessions_combined_landing_datetime", "column_name": "landing_datetime", "columns": {}, "description": ""}, "test.ds_dbt.not_null_phoenix_sessions_combined_ending_datetime": {"name": "not_null_phoenix_sessions_combined_ending_datetime", "resource_type": "test", "package_name": "ds_dbt", "root_path": "/Users/mrich/projects/quasar/quasar/dbt", "path": "schema_test/not_null_phoenix_sessions_combined_ending_datetime.sql", "original_file_path": "models/phoenix_events/schema.yml", "raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(model=ref('phoenix_sessions_combined'), column_name='ending_datetime') }}", "refs": [["phoenix_sessions_combined"]], "sources": [], "depends_on": {"nodes": ["model.ds_dbt.phoenix_sessions_combined"], "macros": []}, "unique_id": "test.ds_dbt.not_null_phoenix_sessions_combined_ending_datetime", "empty": false, "fqn": ["ds_dbt", "schema_test", "not_null_phoenix_sessions_combined_ending_datetime"], "tags": ["schema"], "config": {"enabled": true, "materialized": "view", "severity": "ERROR", "tags": [], "pre-hook": [], "post-hook": [], "quoting": {}, "persist_docs": {}, "vars": {}, "column_types": {}}, "schema": "public", "database": "quasar_prod_warehouse", "alias": "not_null_phoenix_sessions_combined_ending_datetime", "column_name": "ending_datetime", "columns": {}, "description": ""}, "test.ds_dbt.not_null_phoenix_sessions_combined_session_duration_seconds": {"name": "not_null_phoenix_sessions_combined_session_duration_seconds", "resource_type": "test", "package_name": "ds_dbt", "root_path": "/Users/mrich/projects/quasar/quasar/dbt", "path": "schema_test/not_null_phoenix_sessions_combined_session_duration_seconds.sql", "original_file_path": "models/phoenix_events/schema.yml", "raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(model=ref('phoenix_sessions_combined'), column_name='session_duration_seconds') }}", "refs": [["phoenix_sessions_combined"]], "sources": [], "depends_on": {"nodes": ["model.ds_dbt.phoenix_sessions_combined"], "macros": []}, "unique_id": "test.ds_dbt.not_null_phoenix_sessions_combined_session_duration_seconds", "empty": false, "fqn": ["ds_dbt", "schema_test", "not_null_phoenix_sessions_combined_session_duration_seconds"], "tags": ["schema"], "config": {"enabled": true, "materialized": "view", "severity": "ERROR", "tags": [], "pre-hook": [], "post-hook": [], "quoting": {}, "persist_docs": {}, "vars": {}, "column_types": {}}, "schema": "public", "database": "quasar_prod_warehouse", "alias": "not_null_phoenix_sessions_combined_session_duration_seconds", "column_name": "session_duration_seconds", "columns": {}, "description": ""}, "test.ds_dbt.not_null_phoenix_sessions_combined_num_pages_views": {"name": "not_null_phoenix_sessions_combined_num_pages_views", "resource_type": "test", "package_name": "ds_dbt", "root_path": "/Users/mrich/projects/quasar/quasar/dbt", "path": "schema_test/not_null_phoenix_sessions_combined_num_pages_views.sql", "original_file_path": "models/phoenix_events/schema.yml", "raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(model=ref('phoenix_sessions_combined'), column_name='num_pages_views') }}", "refs": [["phoenix_sessions_combined"]], "sources": [], "depends_on": {"nodes": ["model.ds_dbt.phoenix_sessions_combined"], "macros": []}, "unique_id": "test.ds_dbt.not_null_phoenix_sessions_combined_num_pages_views", "empty": false, "fqn": ["ds_dbt", "schema_test", "not_null_phoenix_sessions_combined_num_pages_views"], "tags": ["schema"], "config": {"enabled": true, "materialized": "view", "severity": "ERROR", "tags": [], "pre-hook": [], "post-hook": [], "quoting": {}, "persist_docs": {}, "vars": {}, "column_types": {}}, "schema": "public", "database": "quasar_prod_warehouse", "alias": "not_null_phoenix_sessions_combined_num_pages_views", "column_name": "num_pages_views", "columns": {}, "description": ""}, "test.ds_dbt.not_null_phoenix_sessions_combined_landing_page": {"name": "not_null_phoenix_sessions_combined_landing_page", "resource_type": "test", "package_name": "ds_dbt", "root_path": "/Users/mrich/projects/quasar/quasar/dbt", "path": "schema_test/not_null_phoenix_sessions_combined_landing_page.sql", "original_file_path": "models/phoenix_events/schema.yml", "raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(model=ref('phoenix_sessions_combined'), column_name='landing_page') }}", "refs": [["phoenix_sessions_combined"]], "sources": [], "depends_on": {"nodes": ["model.ds_dbt.phoenix_sessions_combined"], "macros": []}, "unique_id": "test.ds_dbt.not_null_phoenix_sessions_combined_landing_page", "empty": false, "fqn": ["ds_dbt", "schema_test", "not_null_phoenix_sessions_combined_landing_page"], "tags": ["schema"], "config": {"enabled": true, "materialized": "view", "severity": "ERROR", "tags": [], "pre-hook": [], "post-hook": [], "quoting": {}, "persist_docs": {}, "vars": {}, "column_types": {}}, "schema": "public", "database": "quasar_prod_warehouse", "alias": "not_null_phoenix_sessions_combined_landing_page", "column_name": "landing_page", "columns": {}, "description": ""}, "test.ds_dbt.not_null_phoenix_sessions_combined_exit_page": {"name": "not_null_phoenix_sessions_combined_exit_page", "resource_type": "test", "package_name": "ds_dbt", "root_path": "/Users/mrich/projects/quasar/quasar/dbt", "path": "schema_test/not_null_phoenix_sessions_combined_exit_page.sql", "original_file_path": "models/phoenix_events/schema.yml", "raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(model=ref('phoenix_sessions_combined'), column_name='exit_page') }}", "refs": [["phoenix_sessions_combined"]], "sources": [], "depends_on": {"nodes": ["model.ds_dbt.phoenix_sessions_combined"], "macros": []}, "unique_id": "test.ds_dbt.not_null_phoenix_sessions_combined_exit_page", "empty": false, "fqn": ["ds_dbt", "schema_test", "not_null_phoenix_sessions_combined_exit_page"], "tags": ["schema"], "config": {"enabled": true, "materialized": "view", "severity": "ERROR", "tags": [], "pre-hook": [], "post-hook": [], "quoting": {}, "persist_docs": {}, "vars": {}, "column_types": {}}, "schema": "public", "database": "quasar_prod_warehouse", "alias": "not_null_phoenix_sessions_combined_exit_page", "column_name": "exit_page", "columns": {}, "description": ""}, "test.ds_dbt.unique_campaign_info_campaign_id": {"name": "unique_campaign_info_campaign_id", "resource_type": "test", "package_name": "ds_dbt", "root_path": "/Users/mrich/projects/quasar/quasar/dbt", "path": "schema_test/unique_campaign_info_campaign_id.sql", "original_file_path": "models/campaign_info/schema.yml", "raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(model=ref('campaign_info'), column_name='campaign_id') }}", "refs": [["campaign_info"]], "sources": [], "depends_on": {"nodes": ["model.ds_dbt.campaign_info"], "macros": []}, "unique_id": "test.ds_dbt.unique_campaign_info_campaign_id", "empty": false, "fqn": ["ds_dbt", "schema_test", "unique_campaign_info_campaign_id"], "tags": ["schema"], "config": {"enabled": true, "materialized": "view", "severity": "ERROR", "tags": [], "pre-hook": [], "post-hook": [], "quoting": {}, "persist_docs": {}, "vars": {}, "column_types": {}}, "schema": "public", "database": "quasar_prod_warehouse", "alias": "unique_campaign_info_campaign_id", "column_name": "campaign_id", "columns": {}, "description": ""}, "test.ds_dbt.not_null_campaign_info_campaign_id": {"name": "not_null_campaign_info_campaign_id", "resource_type": "test", "package_name": "ds_dbt", "root_path": "/Users/mrich/projects/quasar/quasar/dbt", "path": "schema_test/not_null_campaign_info_campaign_id.sql", "original_file_path": "models/campaign_info/schema.yml", "raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(model=ref('campaign_info'), column_name='campaign_id') }}", "refs": [["campaign_info"]], "sources": [], "depends_on": {"nodes": ["model.ds_dbt.campaign_info"], "macros": []}, "unique_id": "test.ds_dbt.not_null_campaign_info_campaign_id", "empty": false, "fqn": ["ds_dbt", "schema_test", "not_null_campaign_info_campaign_id"], "tags": ["schema"], "config": {"enabled": true, "materialized": "view", "severity": "ERROR", "tags": [], "pre-hook": [], "post-hook": [], "quoting": {}, "persist_docs": {}, "vars": {}, "column_types": {}}, "schema": "public", "database": "quasar_prod_warehouse", "alias": "not_null_campaign_info_campaign_id", "column_name": "campaign_id", "columns": {}, "description": ""}, "test.ds_dbt.unique_campaign_info_campaign_run_id": {"name": "unique_campaign_info_campaign_run_id", "resource_type": "test", "package_name": "ds_dbt", "root_path": "/Users/mrich/projects/quasar/quasar/dbt", "path": "schema_test/unique_campaign_info_campaign_run_id.sql", "original_file_path": "models/campaign_info/schema.yml", "raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(model=ref('campaign_info'), column_name='campaign_run_id') }}", "refs": [["campaign_info"]], "sources": [], "depends_on": {"nodes": ["model.ds_dbt.campaign_info"], "macros": []}, "unique_id": "test.ds_dbt.unique_campaign_info_campaign_run_id", "empty": false, "fqn": ["ds_dbt", "schema_test", "unique_campaign_info_campaign_run_id"], "tags": ["schema"], "config": {"enabled": true, "materialized": "view", "severity": "ERROR", "tags": [], "pre-hook": [], "post-hook": [], "quoting": {}, "persist_docs": {}, "vars": {}, "column_types": {}}, "schema": "public", "database": "quasar_prod_warehouse", "alias": "unique_campaign_info_campaign_run_id", "column_name": "campaign_run_id", "columns": {}, "description": ""}, "test.ds_dbt.not_null_campaign_info_campaign_run_id": {"name": "not_null_campaign_info_campaign_run_id", "resource_type": "test", "package_name": "ds_dbt", "root_path": "/Users/mrich/projects/quasar/quasar/dbt", "path": "schema_test/not_null_campaign_info_campaign_run_id.sql", "original_file_path": "models/campaign_info/schema.yml", "raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(model=ref('campaign_info'), column_name='campaign_run_id') }}", "refs": [["campaign_info"]], "sources": [], "depends_on": {"nodes": ["model.ds_dbt.campaign_info"], "macros": []}, "unique_id": "test.ds_dbt.not_null_campaign_info_campaign_run_id", "empty": false, "fqn": ["ds_dbt", "schema_test", "not_null_campaign_info_campaign_run_id"], "tags": ["schema"], "config": {"enabled": true, "materialized": "view", "severity": "ERROR", "tags": [], "pre-hook": [], "post-hook": [], "quoting": {}, "persist_docs": {}, "vars": {}, "column_types": {}}, "schema": "public", "database": "quasar_prod_warehouse", "alias": "not_null_campaign_info_campaign_run_id", "column_name": "campaign_run_id", "columns": {}, "description": ""}, "test.ds_dbt.not_null_campaign_info_campaign_cause": {"name": "not_null_campaign_info_campaign_cause", "resource_type": "test", "package_name": "ds_dbt", "root_path": "/Users/mrich/projects/quasar/quasar/dbt", "path": "schema_test/not_null_campaign_info_campaign_cause.sql", "original_file_path": "models/campaign_info/schema.yml", "raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(model=ref('campaign_info'), column_name='campaign_cause') }}", "refs": [["campaign_info"]], "sources": [], "depends_on": {"nodes": ["model.ds_dbt.campaign_info"], "macros": []}, "unique_id": "test.ds_dbt.not_null_campaign_info_campaign_cause", "empty": false, "fqn": ["ds_dbt", "schema_test", "not_null_campaign_info_campaign_cause"], "tags": ["schema"], "config": {"enabled": true, "materialized": "view", "severity": "ERROR", "tags": [], "pre-hook": [], "post-hook": [], "quoting": {}, "persist_docs": {}, "vars": {}, "column_types": {}}, "schema": "public", "database": "quasar_prod_warehouse", "alias": "not_null_campaign_info_campaign_cause", "column_name": "campaign_cause", "columns": {}, "description": ""}, "test.ds_dbt.unique_campaign_info_campaign_run_start_date": {"name": "unique_campaign_info_campaign_run_start_date", "resource_type": "test", "package_name": "ds_dbt", "root_path": "/Users/mrich/projects/quasar/quasar/dbt", "path": "schema_test/unique_campaign_info_campaign_run_start_date.sql", "original_file_path": "models/campaign_info/schema.yml", "raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(model=ref('campaign_info'), column_name='campaign_run_start_date') }}", "refs": [["campaign_info"]], "sources": [], "depends_on": {"nodes": ["model.ds_dbt.campaign_info"], "macros": []}, "unique_id": "test.ds_dbt.unique_campaign_info_campaign_run_start_date", "empty": false, "fqn": ["ds_dbt", "schema_test", "unique_campaign_info_campaign_run_start_date"], "tags": ["schema"], "config": {"enabled": true, "materialized": "view", "severity": "ERROR", "tags": [], "pre-hook": [], "post-hook": [], "quoting": {}, "persist_docs": {}, "vars": {}, "column_types": {}}, "schema": "public", "database": "quasar_prod_warehouse", "alias": "unique_campaign_info_campaign_run_start_date", "column_name": "campaign_run_start_date", "columns": {}, "description": ""}, "test.ds_dbt.not_null_campaign_info_campaign_run_start_date": {"name": "not_null_campaign_info_campaign_run_start_date", "resource_type": "test", "package_name": "ds_dbt", "root_path": "/Users/mrich/projects/quasar/quasar/dbt", "path": "schema_test/not_null_campaign_info_campaign_run_start_date.sql", "original_file_path": "models/campaign_info/schema.yml", "raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(model=ref('campaign_info'), column_name='campaign_run_start_date') }}", "refs": [["campaign_info"]], "sources": [], "depends_on": {"nodes": ["model.ds_dbt.campaign_info"], "macros": []}, "unique_id": "test.ds_dbt.not_null_campaign_info_campaign_run_start_date", "empty": false, "fqn": ["ds_dbt", "schema_test", "not_null_campaign_info_campaign_run_start_date"], "tags": ["schema"], "config": {"enabled": true, "materialized": "view", "severity": "ERROR", "tags": [], "pre-hook": [], "post-hook": [], "quoting": {}, "persist_docs": {}, "vars": {}, "column_types": {}}, "schema": "public", "database": "quasar_prod_warehouse", "alias": "not_null_campaign_info_campaign_run_start_date", "column_name": "campaign_run_start_date", "columns": {}, "description": ""}, "test.ds_dbt.not_null_campaign_info_campaign_run_end_date": {"name": "not_null_campaign_info_campaign_run_end_date", "resource_type": "test", "package_name": "ds_dbt", "root_path": "/Users/mrich/projects/quasar/quasar/dbt", "path": "schema_test/not_null_campaign_info_campaign_run_end_date.sql", "original_file_path": "models/campaign_info/schema.yml", "raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(model=ref('campaign_info'), column_name='campaign_run_end_date') }}", "refs": [["campaign_info"]], "sources": [], "depends_on": {"nodes": ["model.ds_dbt.campaign_info"], "macros": []}, "unique_id": "test.ds_dbt.not_null_campaign_info_campaign_run_end_date", "empty": false, "fqn": ["ds_dbt", "schema_test", "not_null_campaign_info_campaign_run_end_date"], "tags": ["schema"], "config": {"enabled": true, "materialized": "view", "severity": "ERROR", "tags": [], "pre-hook": [], "post-hook": [], "quoting": {}, "persist_docs": {}, "vars": {}, "column_types": {}}, "schema": "public", "database": "quasar_prod_warehouse", "alias": "not_null_campaign_info_campaign_run_end_date", "column_name": "campaign_run_end_date", "columns": {}, "description": ""}, "test.ds_dbt.not_null_campaign_info_campaign_created_date": {"name": "not_null_campaign_info_campaign_created_date", "resource_type": "test", "package_name": "ds_dbt", "root_path": "/Users/mrich/projects/quasar/quasar/dbt", "path": "schema_test/not_null_campaign_info_campaign_created_date.sql", "original_file_path": "models/campaign_info/schema.yml", "raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(model=ref('campaign_info'), column_name='campaign_created_date') }}", "refs": [["campaign_info"]], "sources": [], "depends_on": {"nodes": ["model.ds_dbt.campaign_info"], "macros": []}, "unique_id": "test.ds_dbt.not_null_campaign_info_campaign_created_date", "empty": false, "fqn": ["ds_dbt", "schema_test", "not_null_campaign_info_campaign_created_date"], "tags": ["schema"], "config": {"enabled": true, "materialized": "view", "severity": "ERROR", "tags": [], "pre-hook": [], "post-hook": [], "quoting": {}, "persist_docs": {}, "vars": {}, "column_types": {}}, "schema": "public", "database": "quasar_prod_warehouse", "alias": "not_null_campaign_info_campaign_created_date", "column_name": "campaign_created_date", "columns": {}, "description": ""}, "test.ds_dbt.unique_campaign_info_campaign_node_id": {"name": "unique_campaign_info_campaign_node_id", "resource_type": "test", "package_name": "ds_dbt", "root_path": "/Users/mrich/projects/quasar/quasar/dbt", "path": "schema_test/unique_campaign_info_campaign_node_id.sql", "original_file_path": "models/campaign_info/schema.yml", "raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(model=ref('campaign_info'), column_name='campaign_node_id') }}", "refs": [["campaign_info"]], "sources": [], "depends_on": {"nodes": ["model.ds_dbt.campaign_info"], "macros": []}, "unique_id": "test.ds_dbt.unique_campaign_info_campaign_node_id", "empty": false, "fqn": ["ds_dbt", "schema_test", "unique_campaign_info_campaign_node_id"], "tags": ["schema"], "config": {"enabled": true, "materialized": "view", "severity": "ERROR", "tags": [], "pre-hook": [], "post-hook": [], "quoting": {}, "persist_docs": {}, "vars": {}, "column_types": {}}, "schema": "public", "database": "quasar_prod_warehouse", "alias": "unique_campaign_info_campaign_node_id", "column_name": "campaign_node_id", "columns": {}, "description": ""}, "test.ds_dbt.not_null_campaign_info_campaign_node_id": {"name": "not_null_campaign_info_campaign_node_id", "resource_type": "test", "package_name": "ds_dbt", "root_path": "/Users/mrich/projects/quasar/quasar/dbt", "path": "schema_test/not_null_campaign_info_campaign_node_id.sql", "original_file_path": "models/campaign_info/schema.yml", "raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(model=ref('campaign_info'), column_name='campaign_node_id') }}", "refs": [["campaign_info"]], "sources": [], "depends_on": {"nodes": ["model.ds_dbt.campaign_info"], "macros": []}, "unique_id": "test.ds_dbt.not_null_campaign_info_campaign_node_id", "empty": false, "fqn": ["ds_dbt", "schema_test", "not_null_campaign_info_campaign_node_id"], "tags": ["schema"], "config": {"enabled": true, "materialized": "view", "severity": "ERROR", "tags": [], "pre-hook": [], "post-hook": [], "quoting": {}, "persist_docs": {}, "vars": {}, "column_types": {}}, "schema": "public", "database": "quasar_prod_warehouse", "alias": "not_null_campaign_info_campaign_node_id", "column_name": "campaign_node_id", "columns": {}, "description": ""}, "test.ds_dbt.not_null_campaign_info_campaign_node_id_title": {"name": "not_null_campaign_info_campaign_node_id_title", "resource_type": "test", "package_name": "ds_dbt", "root_path": "/Users/mrich/projects/quasar/quasar/dbt", "path": "schema_test/not_null_campaign_info_campaign_node_id_title.sql", "original_file_path": "models/campaign_info/schema.yml", "raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(model=ref('campaign_info'), column_name='campaign_node_id_title') }}", "refs": [["campaign_info"]], "sources": [], "depends_on": {"nodes": ["model.ds_dbt.campaign_info"], "macros": []}, "unique_id": "test.ds_dbt.not_null_campaign_info_campaign_node_id_title", "empty": false, "fqn": ["ds_dbt", "schema_test", "not_null_campaign_info_campaign_node_id_title"], "tags": ["schema"], "config": {"enabled": true, "materialized": "view", "severity": "ERROR", "tags": [], "pre-hook": [], "post-hook": [], "quoting": {}, "persist_docs": {}, "vars": {}, "column_types": {}}, "schema": "public", "database": "quasar_prod_warehouse", "alias": "not_null_campaign_info_campaign_node_id_title", "column_name": "campaign_node_id_title", "columns": {}, "description": ""}, "test.ds_dbt.not_null_campaign_info_campaign_run_id_title": {"name": "not_null_campaign_info_campaign_run_id_title", "resource_type": "test", "package_name": "ds_dbt", "root_path": "/Users/mrich/projects/quasar/quasar/dbt", "path": "schema_test/not_null_campaign_info_campaign_run_id_title.sql", "original_file_path": "models/campaign_info/schema.yml", "raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(model=ref('campaign_info'), column_name='campaign_run_id_title') }}", "refs": [["campaign_info"]], "sources": [], "depends_on": {"nodes": ["model.ds_dbt.campaign_info"], "macros": []}, "unique_id": "test.ds_dbt.not_null_campaign_info_campaign_run_id_title", "empty": false, "fqn": ["ds_dbt", "schema_test", "not_null_campaign_info_campaign_run_id_title"], "tags": ["schema"], "config": {"enabled": true, "materialized": "view", "severity": "ERROR", "tags": [], "pre-hook": [], "post-hook": [], "quoting": {}, "persist_docs": {}, "vars": {}, "column_types": {}}, "schema": "public", "database": "quasar_prod_warehouse", "alias": "not_null_campaign_info_campaign_run_id_title", "column_name": "campaign_run_id_title", "columns": {}, "description": ""}, "test.ds_dbt.not_null_campaign_info_campaign_action_type": {"name": "not_null_campaign_info_campaign_action_type", "resource_type": "test", "package_name": "ds_dbt", "root_path": "/Users/mrich/projects/quasar/quasar/dbt", "path": "schema_test/not_null_campaign_info_campaign_action_type.sql", "original_file_path": "models/campaign_info/schema.yml", "raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(model=ref('campaign_info'), column_name='campaign_action_type') }}", "refs": [["campaign_info"]], "sources": [], "depends_on": {"nodes": ["model.ds_dbt.campaign_info"], "macros": []}, "unique_id": "test.ds_dbt.not_null_campaign_info_campaign_action_type", "empty": false, "fqn": ["ds_dbt", "schema_test", "not_null_campaign_info_campaign_action_type"], "tags": ["schema"], "config": {"enabled": true, "materialized": "view", "severity": "ERROR", "tags": [], "pre-hook": [], "post-hook": [], "quoting": {}, "persist_docs": {}, "vars": {}, "column_types": {}}, "schema": "public", "database": "quasar_prod_warehouse", "alias": "not_null_campaign_info_campaign_action_type", "column_name": "campaign_action_type", "columns": {}, "description": ""}, "test.ds_dbt.not_null_campaign_info_campaign_cause_type": {"name": "not_null_campaign_info_campaign_cause_type", "resource_type": "test", "package_name": "ds_dbt", "root_path": "/Users/mrich/projects/quasar/quasar/dbt", "path": "schema_test/not_null_campaign_info_campaign_cause_type.sql", "original_file_path": "models/campaign_info/schema.yml", "raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(model=ref('campaign_info'), column_name='campaign_cause_type') }}", "refs": [["campaign_info"]], "sources": [], "depends_on": {"nodes": ["model.ds_dbt.campaign_info"], "macros": []}, "unique_id": "test.ds_dbt.not_null_campaign_info_campaign_cause_type", "empty": false, "fqn": ["ds_dbt", "schema_test", "not_null_campaign_info_campaign_cause_type"], "tags": ["schema"], "config": {"enabled": true, "materialized": "view", "severity": "ERROR", "tags": [], "pre-hook": [], "post-hook": [], "quoting": {}, "persist_docs": {}, "vars": {}, "column_types": {}}, "schema": "public", "database": "quasar_prod_warehouse", "alias": "not_null_campaign_info_campaign_cause_type", "column_name": "campaign_cause_type", "columns": {}, "description": ""}, "test.ds_dbt.unique_campaign_info_campaign_noun": {"name": "unique_campaign_info_campaign_noun", "resource_type": "test", "package_name": "ds_dbt", "root_path": "/Users/mrich/projects/quasar/quasar/dbt", "path": "schema_test/unique_campaign_info_campaign_noun.sql", "original_file_path": "models/campaign_info/schema.yml", "raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(model=ref('campaign_info'), column_name='campaign_noun') }}", "refs": [["campaign_info"]], "sources": [], "depends_on": {"nodes": ["model.ds_dbt.campaign_info"], "macros": []}, "unique_id": "test.ds_dbt.unique_campaign_info_campaign_noun", "empty": false, "fqn": ["ds_dbt", "schema_test", "unique_campaign_info_campaign_noun"], "tags": ["schema"], "config": {"enabled": true, "materialized": "view", "severity": "ERROR", "tags": [], "pre-hook": [], "post-hook": [], "quoting": {}, "persist_docs": {}, "vars": {}, "column_types": {}}, "schema": "public", "database": "quasar_prod_warehouse", "alias": "unique_campaign_info_campaign_noun", "column_name": "campaign_noun", "columns": {}, "description": ""}, "test.ds_dbt.not_null_campaign_info_campaign_noun": {"name": "not_null_campaign_info_campaign_noun", "resource_type": "test", "package_name": "ds_dbt", "root_path": "/Users/mrich/projects/quasar/quasar/dbt", "path": "schema_test/not_null_campaign_info_campaign_noun.sql", "original_file_path": "models/campaign_info/schema.yml", "raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(model=ref('campaign_info'), column_name='campaign_noun') }}", "refs": [["campaign_info"]], "sources": [], "depends_on": {"nodes": ["model.ds_dbt.campaign_info"], "macros": []}, "unique_id": "test.ds_dbt.not_null_campaign_info_campaign_noun", "empty": false, "fqn": ["ds_dbt", "schema_test", "not_null_campaign_info_campaign_noun"], "tags": ["schema"], "config": {"enabled": true, "materialized": "view", "severity": "ERROR", "tags": [], "pre-hook": [], "post-hook": [], "quoting": {}, "persist_docs": {}, "vars": {}, "column_types": {}}, "schema": "public", "database": "quasar_prod_warehouse", "alias": "not_null_campaign_info_campaign_noun", "column_name": "campaign_noun", "columns": {}, "description": ""}, "test.ds_dbt.not_null_campaign_info_campaign_verb": {"name": "not_null_campaign_info_campaign_verb", "resource_type": "test", "package_name": "ds_dbt", "root_path": "/Users/mrich/projects/quasar/quasar/dbt", "path": "schema_test/not_null_campaign_info_campaign_verb.sql", "original_file_path": "models/campaign_info/schema.yml", "raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(model=ref('campaign_info'), column_name='campaign_verb') }}", "refs": [["campaign_info"]], "sources": [], "depends_on": {"nodes": ["model.ds_dbt.campaign_info"], "macros": []}, "unique_id": "test.ds_dbt.not_null_campaign_info_campaign_verb", "empty": false, "fqn": ["ds_dbt", "schema_test", "not_null_campaign_info_campaign_verb"], "tags": ["schema"], "config": {"enabled": true, "materialized": "view", "severity": "ERROR", "tags": [], "pre-hook": [], "post-hook": [], "quoting": {}, "persist_docs": {}, "vars": {}, "column_types": {}}, "schema": "public", "database": "quasar_prod_warehouse", "alias": "not_null_campaign_info_campaign_verb", "column_name": "campaign_verb", "columns": {}, "description": ""}, "test.ds_dbt.not_null_campaign_info_campaign_cta": {"name": "not_null_campaign_info_campaign_cta", "resource_type": "test", "package_name": "ds_dbt", "root_path": "/Users/mrich/projects/quasar/quasar/dbt", "path": "schema_test/not_null_campaign_info_campaign_cta.sql", "original_file_path": "models/campaign_info/schema.yml", "raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(model=ref('campaign_info'), column_name='campaign_cta') }}", "refs": [["campaign_info"]], "sources": [], "depends_on": {"nodes": ["model.ds_dbt.campaign_info"], "macros": []}, "unique_id": "test.ds_dbt.not_null_campaign_info_campaign_cta", "empty": false, "fqn": ["ds_dbt", "schema_test", "not_null_campaign_info_campaign_cta"], "tags": ["schema"], "config": {"enabled": true, "materialized": "view", "severity": "ERROR", "tags": [], "pre-hook": [], "post-hook": [], "quoting": {}, "persist_docs": {}, "vars": {}, "column_types": {}}, "schema": "public", "database": "quasar_prod_warehouse", "alias": "not_null_campaign_info_campaign_cta", "column_name": "campaign_cta", "columns": {}, "description": ""}, "test.ds_dbt.unique_campaign_info_international_campaign_id": {"name": "unique_campaign_info_international_campaign_id", "resource_type": "test", "package_name": "ds_dbt", "root_path": "/Users/mrich/projects/quasar/quasar/dbt", "path": "schema_test/unique_campaign_info_international_campaign_id.sql", "original_file_path": "models/campaign_info/schema.yml", "raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(model=ref('campaign_info_international'), column_name='campaign_id') }}", "refs": [["campaign_info_international"]], "sources": [], "depends_on": {"nodes": ["model.ds_dbt.campaign_info_international"], "macros": []}, "unique_id": "test.ds_dbt.unique_campaign_info_international_campaign_id", "empty": false, "fqn": ["ds_dbt", "schema_test", "unique_campaign_info_international_campaign_id"], "tags": ["schema"], "config": {"enabled": true, "materialized": "view", "severity": "ERROR", "tags": [], "pre-hook": [], "post-hook": [], "quoting": {}, "persist_docs": {}, "vars": {}, "column_types": {}}, "schema": "public", "database": "quasar_prod_warehouse", "alias": "unique_campaign_info_international_campaign_id", "column_name": "campaign_id", "columns": {}, "description": ""}, "test.ds_dbt.not_null_campaign_info_international_campaign_id": {"name": "not_null_campaign_info_international_campaign_id", "resource_type": "test", "package_name": "ds_dbt", "root_path": "/Users/mrich/projects/quasar/quasar/dbt", "path": "schema_test/not_null_campaign_info_international_campaign_id.sql", "original_file_path": "models/campaign_info/schema.yml", "raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(model=ref('campaign_info_international'), column_name='campaign_id') }}", "refs": [["campaign_info_international"]], "sources": [], "depends_on": {"nodes": ["model.ds_dbt.campaign_info_international"], "macros": []}, "unique_id": "test.ds_dbt.not_null_campaign_info_international_campaign_id", "empty": false, "fqn": ["ds_dbt", "schema_test", "not_null_campaign_info_international_campaign_id"], "tags": ["schema"], "config": {"enabled": true, "materialized": "view", "severity": "ERROR", "tags": [], "pre-hook": [], "post-hook": [], "quoting": {}, "persist_docs": {}, "vars": {}, "column_types": {}}, "schema": "public", "database": "quasar_prod_warehouse", "alias": "not_null_campaign_info_international_campaign_id", "column_name": "campaign_id", "columns": {}, "description": ""}, "test.ds_dbt.unique_campaign_info_international_campaign_node_id": {"name": "unique_campaign_info_international_campaign_node_id", "resource_type": "test", "package_name": "ds_dbt", "root_path": "/Users/mrich/projects/quasar/quasar/dbt", "path": "schema_test/unique_campaign_info_international_campaign_node_id.sql", "original_file_path": "models/campaign_info/schema.yml", "raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(model=ref('campaign_info_international'), column_name='campaign_node_id') }}", "refs": [["campaign_info_international"]], "sources": [], "depends_on": {"nodes": ["model.ds_dbt.campaign_info_international"], "macros": []}, "unique_id": "test.ds_dbt.unique_campaign_info_international_campaign_node_id", "empty": false, "fqn": ["ds_dbt", "schema_test", "unique_campaign_info_international_campaign_node_id"], "tags": ["schema"], "config": {"enabled": true, "materialized": "view", "severity": "ERROR", "tags": [], "pre-hook": [], "post-hook": [], "quoting": {}, "persist_docs": {}, "vars": {}, "column_types": {}}, "schema": "public", "database": "quasar_prod_warehouse", "alias": "unique_campaign_info_international_campaign_node_id", "column_name": "campaign_node_id", "columns": {}, "description": ""}, "test.ds_dbt.not_null_campaign_info_international_campaign_node_id": {"name": "not_null_campaign_info_international_campaign_node_id", "resource_type": "test", "package_name": "ds_dbt", "root_path": "/Users/mrich/projects/quasar/quasar/dbt", "path": "schema_test/not_null_campaign_info_international_campaign_node_id.sql", "original_file_path": "models/campaign_info/schema.yml", "raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(model=ref('campaign_info_international'), column_name='campaign_node_id') }}", "refs": [["campaign_info_international"]], "sources": [], "depends_on": {"nodes": ["model.ds_dbt.campaign_info_international"], "macros": []}, "unique_id": "test.ds_dbt.not_null_campaign_info_international_campaign_node_id", "empty": false, "fqn": ["ds_dbt", "schema_test", "not_null_campaign_info_international_campaign_node_id"], "tags": ["schema"], "config": {"enabled": true, "materialized": "view", "severity": "ERROR", "tags": [], "pre-hook": [], "post-hook": [], "quoting": {}, "persist_docs": {}, "vars": {}, "column_types": {}}, "schema": "public", "database": "quasar_prod_warehouse", "alias": "not_null_campaign_info_international_campaign_node_id", "column_name": "campaign_node_id", "columns": {}, "description": ""}, "test.ds_dbt.not_null_campaign_info_international_campaign_node_id_title": {"name": "not_null_campaign_info_international_campaign_node_id_title", "resource_type": "test", "package_name": "ds_dbt", "root_path": "/Users/mrich/projects/quasar/quasar/dbt", "path": "schema_test/not_null_campaign_info_international_campaign_node_id_title.sql", "original_file_path": "models/campaign_info/schema.yml", "raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(model=ref('campaign_info_international'), column_name='campaign_node_id_title') }}", "refs": [["campaign_info_international"]], "sources": [], "depends_on": {"nodes": ["model.ds_dbt.campaign_info_international"], "macros": []}, "unique_id": "test.ds_dbt.not_null_campaign_info_international_campaign_node_id_title", "empty": false, "fqn": ["ds_dbt", "schema_test", "not_null_campaign_info_international_campaign_node_id_title"], "tags": ["schema"], "config": {"enabled": true, "materialized": "view", "severity": "ERROR", "tags": [], "pre-hook": [], "post-hook": [], "quoting": {}, "persist_docs": {}, "vars": {}, "column_types": {}}, "schema": "public", "database": "quasar_prod_warehouse", "alias": "not_null_campaign_info_international_campaign_node_id_title", "column_name": "campaign_node_id_title", "columns": {}, "description": ""}, "test.ds_dbt.unique_campaign_info_international_campaign_run_id": {"name": "unique_campaign_info_international_campaign_run_id", "resource_type": "test", "package_name": "ds_dbt", "root_path": "/Users/mrich/projects/quasar/quasar/dbt", "path": "schema_test/unique_campaign_info_international_campaign_run_id.sql", "original_file_path": "models/campaign_info/schema.yml", "raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(model=ref('campaign_info_international'), column_name='campaign_run_id') }}", "refs": [["campaign_info_international"]], "sources": [], "depends_on": {"nodes": ["model.ds_dbt.campaign_info_international"], "macros": []}, "unique_id": "test.ds_dbt.unique_campaign_info_international_campaign_run_id", "empty": false, "fqn": ["ds_dbt", "schema_test", "unique_campaign_info_international_campaign_run_id"], "tags": ["schema"], "config": {"enabled": true, "materialized": "view", "severity": "ERROR", "tags": [], "pre-hook": [], "post-hook": [], "quoting": {}, "persist_docs": {}, "vars": {}, "column_types": {}}, "schema": "public", "database": "quasar_prod_warehouse", "alias": "unique_campaign_info_international_campaign_run_id", "column_name": "campaign_run_id", "columns": {}, "description": ""}, "test.ds_dbt.not_null_campaign_info_international_campaign_run_id": {"name": "not_null_campaign_info_international_campaign_run_id", "resource_type": "test", "package_name": "ds_dbt", "root_path": "/Users/mrich/projects/quasar/quasar/dbt", "path": "schema_test/not_null_campaign_info_international_campaign_run_id.sql", "original_file_path": "models/campaign_info/schema.yml", "raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(model=ref('campaign_info_international'), column_name='campaign_run_id') }}", "refs": [["campaign_info_international"]], "sources": [], "depends_on": {"nodes": ["model.ds_dbt.campaign_info_international"], "macros": []}, "unique_id": "test.ds_dbt.not_null_campaign_info_international_campaign_run_id", "empty": false, "fqn": ["ds_dbt", "schema_test", "not_null_campaign_info_international_campaign_run_id"], "tags": ["schema"], "config": {"enabled": true, "materialized": "view", "severity": "ERROR", "tags": [], "pre-hook": [], "post-hook": [], "quoting": {}, "persist_docs": {}, "vars": {}, "column_types": {}}, "schema": "public", "database": "quasar_prod_warehouse", "alias": "not_null_campaign_info_international_campaign_run_id", "column_name": "campaign_run_id", "columns": {}, "description": ""}, "test.ds_dbt.not_null_campaign_info_international_campaign_run_id_title": {"name": "not_null_campaign_info_international_campaign_run_id_title", "resource_type": "test", "package_name": "ds_dbt", "root_path": "/Users/mrich/projects/quasar/quasar/dbt", "path": "schema_test/not_null_campaign_info_international_campaign_run_id_title.sql", "original_file_path": "models/campaign_info/schema.yml", "raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(model=ref('campaign_info_international'), column_name='campaign_run_id_title') }}", "refs": [["campaign_info_international"]], "sources": [], "depends_on": {"nodes": ["model.ds_dbt.campaign_info_international"], "macros": []}, "unique_id": "test.ds_dbt.not_null_campaign_info_international_campaign_run_id_title", "empty": false, "fqn": ["ds_dbt", "schema_test", "not_null_campaign_info_international_campaign_run_id_title"], "tags": ["schema"], "config": {"enabled": true, "materialized": "view", "severity": "ERROR", "tags": [], "pre-hook": [], "post-hook": [], "quoting": {}, "persist_docs": {}, "vars": {}, "column_types": {}}, "schema": "public", "database": "quasar_prod_warehouse", "alias": "not_null_campaign_info_international_campaign_run_id_title", "column_name": "campaign_run_id_title", "columns": {}, "description": ""}, "test.ds_dbt.not_null_campaign_info_international_campaign_type": {"name": "not_null_campaign_info_international_campaign_type", "resource_type": "test", "package_name": "ds_dbt", "root_path": "/Users/mrich/projects/quasar/quasar/dbt", "path": "schema_test/not_null_campaign_info_international_campaign_type.sql", "original_file_path": "models/campaign_info/schema.yml", "raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(model=ref('campaign_info_international'), column_name='campaign_type') }}", "refs": [["campaign_info_international"]], "sources": [], "depends_on": {"nodes": ["model.ds_dbt.campaign_info_international"], "macros": []}, "unique_id": "test.ds_dbt.not_null_campaign_info_international_campaign_type", "empty": false, "fqn": ["ds_dbt", "schema_test", "not_null_campaign_info_international_campaign_type"], "tags": ["schema"], "config": {"enabled": true, "materialized": "view", "severity": "ERROR", "tags": [], "pre-hook": [], "post-hook": [], "quoting": {}, "persist_docs": {}, "vars": {}, "column_types": {}}, "schema": "public", "database": "quasar_prod_warehouse", "alias": "not_null_campaign_info_international_campaign_type", "column_name": "campaign_type", "columns": {}, "description": ""}, "test.ds_dbt.unique_campaign_info_international_campaign_run_start_date": {"name": "unique_campaign_info_international_campaign_run_start_date", "resource_type": "test", "package_name": "ds_dbt", "root_path": "/Users/mrich/projects/quasar/quasar/dbt", "path": "schema_test/unique_campaign_info_international_campaign_run_start_date.sql", "original_file_path": "models/campaign_info/schema.yml", "raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(model=ref('campaign_info_international'), column_name='campaign_run_start_date') }}", "refs": [["campaign_info_international"]], "sources": [], "depends_on": {"nodes": ["model.ds_dbt.campaign_info_international"], "macros": []}, "unique_id": "test.ds_dbt.unique_campaign_info_international_campaign_run_start_date", "empty": false, "fqn": ["ds_dbt", "schema_test", "unique_campaign_info_international_campaign_run_start_date"], "tags": ["schema"], "config": {"enabled": true, "materialized": "view", "severity": "ERROR", "tags": [], "pre-hook": [], "post-hook": [], "quoting": {}, "persist_docs": {}, "vars": {}, "column_types": {}}, "schema": "public", "database": "quasar_prod_warehouse", "alias": "unique_campaign_info_international_campaign_run_start_date", "column_name": "campaign_run_start_date", "columns": {}, "description": ""}, "test.ds_dbt.not_null_campaign_info_international_campaign_run_start_date": {"name": "not_null_campaign_info_international_campaign_run_start_date", "resource_type": "test", "package_name": "ds_dbt", "root_path": "/Users/mrich/projects/quasar/quasar/dbt", "path": "schema_test/not_null_campaign_info_international_campaign_run_start_date.sql", "original_file_path": "models/campaign_info/schema.yml", "raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(model=ref('campaign_info_international'), column_name='campaign_run_start_date') }}", "refs": [["campaign_info_international"]], "sources": [], "depends_on": {"nodes": ["model.ds_dbt.campaign_info_international"], "macros": []}, "unique_id": "test.ds_dbt.not_null_campaign_info_international_campaign_run_start_date", "empty": false, "fqn": ["ds_dbt", "schema_test", "not_null_campaign_info_international_campaign_run_start_date"], "tags": ["schema"], "config": {"enabled": true, "materialized": "view", "severity": "ERROR", "tags": [], "pre-hook": [], "post-hook": [], "quoting": {}, "persist_docs": {}, "vars": {}, "column_types": {}}, "schema": "public", "database": "quasar_prod_warehouse", "alias": "not_null_campaign_info_international_campaign_run_start_date", "column_name": "campaign_run_start_date", "columns": {}, "description": ""}, "test.ds_dbt.not_null_campaign_info_international_campaign_run_end_date": {"name": "not_null_campaign_info_international_campaign_run_end_date", "resource_type": "test", "package_name": "ds_dbt", "root_path": "/Users/mrich/projects/quasar/quasar/dbt", "path": "schema_test/not_null_campaign_info_international_campaign_run_end_date.sql", "original_file_path": "models/campaign_info/schema.yml", "raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(model=ref('campaign_info_international'), column_name='campaign_run_end_date') }}", "refs": [["campaign_info_international"]], "sources": [], "depends_on": {"nodes": ["model.ds_dbt.campaign_info_international"], "macros": []}, "unique_id": "test.ds_dbt.not_null_campaign_info_international_campaign_run_end_date", "empty": false, "fqn": ["ds_dbt", "schema_test", "not_null_campaign_info_international_campaign_run_end_date"], "tags": ["schema"], "config": {"enabled": true, "materialized": "view", "severity": "ERROR", "tags": [], "pre-hook": [], "post-hook": [], "quoting": {}, "persist_docs": {}, "vars": {}, "column_types": {}}, "schema": "public", "database": "quasar_prod_warehouse", "alias": "not_null_campaign_info_international_campaign_run_end_date", "column_name": "campaign_run_end_date", "columns": {}, "description": ""}, "test.ds_dbt.not_null_campaign_info_international_campaign_created_date": {"name": "not_null_campaign_info_international_campaign_created_date", "resource_type": "test", "package_name": "ds_dbt", "root_path": "/Users/mrich/projects/quasar/quasar/dbt", "path": "schema_test/not_null_campaign_info_international_campaign_created_date.sql", "original_file_path": "models/campaign_info/schema.yml", "raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(model=ref('campaign_info_international'), column_name='campaign_created_date') }}", "refs": [["campaign_info_international"]], "sources": [], "depends_on": {"nodes": ["model.ds_dbt.campaign_info_international"], "macros": []}, "unique_id": "test.ds_dbt.not_null_campaign_info_international_campaign_created_date", "empty": false, "fqn": ["ds_dbt", "schema_test", "not_null_campaign_info_international_campaign_created_date"], "tags": ["schema"], "config": {"enabled": true, "materialized": "view", "severity": "ERROR", "tags": [], "pre-hook": [], "post-hook": [], "quoting": {}, "persist_docs": {}, "vars": {}, "column_types": {}}, "schema": "public", "database": "quasar_prod_warehouse", "alias": "not_null_campaign_info_international_campaign_created_date", "column_name": "campaign_created_date", "columns": {}, "description": ""}, "test.ds_dbt.unique_campaign_info_international_campaign_noun": {"name": "unique_campaign_info_international_campaign_noun", "resource_type": "test", "package_name": "ds_dbt", "root_path": "/Users/mrich/projects/quasar/quasar/dbt", "path": "schema_test/unique_campaign_info_international_campaign_noun.sql", "original_file_path": "models/campaign_info/schema.yml", "raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(model=ref('campaign_info_international'), column_name='campaign_noun') }}", "refs": [["campaign_info_international"]], "sources": [], "depends_on": {"nodes": ["model.ds_dbt.campaign_info_international"], "macros": []}, "unique_id": "test.ds_dbt.unique_campaign_info_international_campaign_noun", "empty": false, "fqn": ["ds_dbt", "schema_test", "unique_campaign_info_international_campaign_noun"], "tags": ["schema"], "config": {"enabled": true, "materialized": "view", "severity": "ERROR", "tags": [], "pre-hook": [], "post-hook": [], "quoting": {}, "persist_docs": {}, "vars": {}, "column_types": {}}, "schema": "public", "database": "quasar_prod_warehouse", "alias": "unique_campaign_info_international_campaign_noun", "column_name": "campaign_noun", "columns": {}, "description": ""}, "test.ds_dbt.not_null_campaign_info_international_campaign_noun": {"name": "not_null_campaign_info_international_campaign_noun", "resource_type": "test", "package_name": "ds_dbt", "root_path": "/Users/mrich/projects/quasar/quasar/dbt", "path": "schema_test/not_null_campaign_info_international_campaign_noun.sql", "original_file_path": "models/campaign_info/schema.yml", "raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(model=ref('campaign_info_international'), column_name='campaign_noun') }}", "refs": [["campaign_info_international"]], "sources": [], "depends_on": {"nodes": ["model.ds_dbt.campaign_info_international"], "macros": []}, "unique_id": "test.ds_dbt.not_null_campaign_info_international_campaign_noun", "empty": false, "fqn": ["ds_dbt", "schema_test", "not_null_campaign_info_international_campaign_noun"], "tags": ["schema"], "config": {"enabled": true, "materialized": "view", "severity": "ERROR", "tags": [], "pre-hook": [], "post-hook": [], "quoting": {}, "persist_docs": {}, "vars": {}, "column_types": {}}, "schema": "public", "database": "quasar_prod_warehouse", "alias": "not_null_campaign_info_international_campaign_noun", "column_name": "campaign_noun", "columns": {}, "description": ""}, "test.ds_dbt.not_null_campaign_info_international_campaign_verb": {"name": "not_null_campaign_info_international_campaign_verb", "resource_type": "test", "package_name": "ds_dbt", "root_path": "/Users/mrich/projects/quasar/quasar/dbt", "path": "schema_test/not_null_campaign_info_international_campaign_verb.sql", "original_file_path": "models/campaign_info/schema.yml", "raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(model=ref('campaign_info_international'), column_name='campaign_verb') }}", "refs": [["campaign_info_international"]], "sources": [], "depends_on": {"nodes": ["model.ds_dbt.campaign_info_international"], "macros": []}, "unique_id": "test.ds_dbt.not_null_campaign_info_international_campaign_verb", "empty": false, "fqn": ["ds_dbt", "schema_test", "not_null_campaign_info_international_campaign_verb"], "tags": ["schema"], "config": {"enabled": true, "materialized": "view", "severity": "ERROR", "tags": [], "pre-hook": [], "post-hook": [], "quoting": {}, "persist_docs": {}, "vars": {}, "column_types": {}}, "schema": "public", "database": "quasar_prod_warehouse", "alias": "not_null_campaign_info_international_campaign_verb", "column_name": "campaign_verb", "columns": {}, "description": ""}, "test.ds_dbt.not_null_campaign_info_international_campaign_cause_type": {"name": "not_null_campaign_info_international_campaign_cause_type", "resource_type": "test", "package_name": "ds_dbt", "root_path": "/Users/mrich/projects/quasar/quasar/dbt", "path": "schema_test/not_null_campaign_info_international_campaign_cause_type.sql", "original_file_path": "models/campaign_info/schema.yml", "raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(model=ref('campaign_info_international'), column_name='campaign_cause_type') }}", "refs": [["campaign_info_international"]], "sources": [], "depends_on": {"nodes": ["model.ds_dbt.campaign_info_international"], "macros": []}, "unique_id": "test.ds_dbt.not_null_campaign_info_international_campaign_cause_type", "empty": false, "fqn": ["ds_dbt", "schema_test", "not_null_campaign_info_international_campaign_cause_type"], "tags": ["schema"], "config": {"enabled": true, "materialized": "view", "severity": "ERROR", "tags": [], "pre-hook": [], "post-hook": [], "quoting": {}, "persist_docs": {}, "vars": {}, "column_types": {}}, "schema": "public", "database": "quasar_prod_warehouse", "alias": "not_null_campaign_info_international_campaign_cause_type", "column_name": "campaign_cause_type", "columns": {}, "description": ""}, "test.ds_dbt.not_null_campaign_info_international_campaign_cta": {"name": "not_null_campaign_info_international_campaign_cta", "resource_type": "test", "package_name": "ds_dbt", "root_path": "/Users/mrich/projects/quasar/quasar/dbt", "path": "schema_test/not_null_campaign_info_international_campaign_cta.sql", "original_file_path": "models/campaign_info/schema.yml", "raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(model=ref('campaign_info_international'), column_name='campaign_cta') }}", "refs": [["campaign_info_international"]], "sources": [], "depends_on": {"nodes": ["model.ds_dbt.campaign_info_international"], "macros": []}, "unique_id": "test.ds_dbt.not_null_campaign_info_international_campaign_cta", "empty": false, "fqn": ["ds_dbt", "schema_test", "not_null_campaign_info_international_campaign_cta"], "tags": ["schema"], "config": {"enabled": true, "materialized": "view", "severity": "ERROR", "tags": [], "pre-hook": [], "post-hook": [], "quoting": {}, "persist_docs": {}, "vars": {}, "column_types": {}}, "schema": "public", "database": "quasar_prod_warehouse", "alias": "not_null_campaign_info_international_campaign_cta", "column_name": "campaign_cta", "columns": {}, "description": ""}, "test.ds_dbt.not_null_campaign_info_international_campaign_action_type": {"name": "not_null_campaign_info_international_campaign_action_type", "resource_type": "test", "package_name": "ds_dbt", "root_path": "/Users/mrich/projects/quasar/quasar/dbt", "path": "schema_test/not_null_campaign_info_international_campaign_action_type.sql", "original_file_path": "models/campaign_info/schema.yml", "raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(model=ref('campaign_info_international'), column_name='campaign_action_type') }}", "refs": [["campaign_info_international"]], "sources": [], "depends_on": {"nodes": ["model.ds_dbt.campaign_info_international"], "macros": []}, "unique_id": "test.ds_dbt.not_null_campaign_info_international_campaign_action_type", "empty": false, "fqn": ["ds_dbt", "schema_test", "not_null_campaign_info_international_campaign_action_type"], "tags": ["schema"], "config": {"enabled": true, "materialized": "view", "severity": "ERROR", "tags": [], "pre-hook": [], "post-hook": [], "quoting": {}, "persist_docs": {}, "vars": {}, "column_types": {}}, "schema": "public", "database": "quasar_prod_warehouse", "alias": "not_null_campaign_info_international_campaign_action_type", "column_name": "campaign_action_type", "columns": {}, "description": ""}, "test.ds_dbt.not_null_posts_northstar_id": {"name": "not_null_posts_northstar_id", "resource_type": "test", "package_name": "ds_dbt", "root_path": "/Users/mrich/projects/quasar/quasar/dbt", "path": "schema_test/not_null_posts_northstar_id.sql", "original_file_path": "models/campaign_activity/schema.yml", "raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(model=ref('posts'), column_name='northstar_id') }}", "refs": [["posts"]], "sources": [], "depends_on": {"nodes": ["model.ds_dbt.posts"], "macros": []}, "unique_id": "test.ds_dbt.not_null_posts_northstar_id", "empty": false, "fqn": ["ds_dbt", "schema_test", "not_null_posts_northstar_id"], "tags": ["schema"], "config": {"enabled": true, "materialized": "view", "severity": "ERROR", "tags": [], "pre-hook": [], "post-hook": [], "quoting": {}, "persist_docs": {}, "vars": {}, "column_types": {}}, "schema": "public", "database": "quasar_prod_warehouse", "alias": "not_null_posts_northstar_id", "column_name": "northstar_id", "columns": {}, "description": ""}, "test.ds_dbt.not_null_reportbacks_northstar_id": {"name": "not_null_reportbacks_northstar_id", "resource_type": "test", "package_name": "ds_dbt", "root_path": "/Users/mrich/projects/quasar/quasar/dbt", "path": "schema_test/not_null_reportbacks_northstar_id.sql", "original_file_path": "models/campaign_activity/schema.yml", "raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(model=ref('reportbacks'), column_name='northstar_id') }}", "refs": [["reportbacks"]], "sources": [], "depends_on": {"nodes": ["model.ds_dbt.reportbacks"], "macros": []}, "unique_id": "test.ds_dbt.not_null_reportbacks_northstar_id", "empty": false, "fqn": ["ds_dbt", "schema_test", "not_null_reportbacks_northstar_id"], "tags": ["schema"], "config": {"enabled": true, "materialized": "view", "severity": "ERROR", "tags": [], "pre-hook": [], "post-hook": [], "quoting": {}, "persist_docs": {}, "vars": {}, "column_types": {}}, "schema": "public", "database": "quasar_prod_warehouse", "alias": "not_null_reportbacks_northstar_id", "column_name": "northstar_id", "columns": {}, "description": ""}, "test.ds_dbt.not_null_signups_northstar_id": {"name": "not_null_signups_northstar_id", "resource_type": "test", "package_name": "ds_dbt", "root_path": "/Users/mrich/projects/quasar/quasar/dbt", "path": "schema_test/not_null_signups_northstar_id.sql", "original_file_path": "models/campaign_activity/schema.yml", "raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(model=ref('signups'), column_name='northstar_id') }}", "refs": [["signups"]], "sources": [], "depends_on": {"nodes": ["model.ds_dbt.signups"], "macros": []}, "unique_id": "test.ds_dbt.not_null_signups_northstar_id", "empty": false, "fqn": ["ds_dbt", "schema_test", "not_null_signups_northstar_id"], "tags": ["schema"], "config": {"enabled": true, "materialized": "view", "severity": "ERROR", "tags": [], "pre-hook": [], "post-hook": [], "quoting": {}, "persist_docs": {}, "vars": {}, "column_types": {}}, "schema": "public", "database": "quasar_prod_warehouse", "alias": "not_null_signups_northstar_id", "column_name": "northstar_id", "columns": {}, "description": ""}}, "macros": {"macro.dbt.statement": {"path": "macros/core.sql", "original_file_path": "macros/core.sql", "package_name": "dbt", "raw_sql": "{% macro statement(name=None, fetch_result=False, auto_begin=True) -%}\n  {%- if execute: -%}\n    {%- set sql = render(caller()) -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n      {{ write(sql) }}\n    {%- endif -%}\n\n    {%- set status, res = adapter.execute(sql, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- if name is not none -%}\n      {{ store_result(name, status=status, agate_table=res) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}\n\n{% macro noop_statement(name=None, status=None, res=None) -%}\n  {%- set sql = render(caller()) -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_result(name, status=status, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}", "root_path": "/Users/mrich/.local/share/virtualenvs/quasar-qaRV2YEO/lib/python3.7/site-packages/dbt/include/global_project", "name": "statement", "unique_id": "macro.dbt.statement", "tags": [], "resource_type": "macro", "depends_on": {"macros": []}}, "macro.dbt.noop_statement": {"path": "macros/core.sql", "original_file_path": "macros/core.sql", "package_name": "dbt", "raw_sql": "{% macro statement(name=None, fetch_result=False, auto_begin=True) -%}\n  {%- if execute: -%}\n    {%- set sql = render(caller()) -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n      {{ write(sql) }}\n    {%- endif -%}\n\n    {%- set status, res = adapter.execute(sql, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- if name is not none -%}\n      {{ store_result(name, status=status, agate_table=res) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}\n\n{% macro noop_statement(name=None, status=None, res=None) -%}\n  {%- set sql = render(caller()) -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_result(name, status=status, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}", "root_path": "/Users/mrich/.local/share/virtualenvs/quasar-qaRV2YEO/lib/python3.7/site-packages/dbt/include/global_project", "name": "noop_statement", "unique_id": "macro.dbt.noop_statement", "tags": [], "resource_type": "macro", "depends_on": {"macros": []}}, "macro.dbt.run_hooks": {"path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "package_name": "dbt", "raw_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% call statement(auto_begin=inside_transaction) %}\n      {{ hook.get('sql') }}\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}\n\n\n{% macro column_list(columns) %}\n  {%- for col in columns %}\n    {{ col.name }} {% if not loop.last %},{% endif %}\n  {% endfor -%}\n{% endmacro %}\n\n\n{% macro column_list_for_create_table(columns) %}\n  {%- for col in columns %}\n    {{ col.name }} {{ col.data_type }} {%- if not loop.last %},{% endif %}\n  {% endfor -%}\n{% endmacro %}\n\n\n{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}\n\n\n{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}\n\n\n{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}\n\n\n{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}\n\n{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "root_path": "/Users/mrich/.local/share/virtualenvs/quasar-qaRV2YEO/lib/python3.7/site-packages/dbt/include/global_project", "name": "run_hooks", "unique_id": "macro.dbt.run_hooks", "tags": [], "resource_type": "macro", "depends_on": {"macros": []}}, "macro.dbt.column_list": {"path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "package_name": "dbt", "raw_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% call statement(auto_begin=inside_transaction) %}\n      {{ hook.get('sql') }}\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}\n\n\n{% macro column_list(columns) %}\n  {%- for col in columns %}\n    {{ col.name }} {% if not loop.last %},{% endif %}\n  {% endfor -%}\n{% endmacro %}\n\n\n{% macro column_list_for_create_table(columns) %}\n  {%- for col in columns %}\n    {{ col.name }} {{ col.data_type }} {%- if not loop.last %},{% endif %}\n  {% endfor -%}\n{% endmacro %}\n\n\n{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}\n\n\n{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}\n\n\n{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}\n\n\n{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}\n\n{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "root_path": "/Users/mrich/.local/share/virtualenvs/quasar-qaRV2YEO/lib/python3.7/site-packages/dbt/include/global_project", "name": "column_list", "unique_id": "macro.dbt.column_list", "tags": [], "resource_type": "macro", "depends_on": {"macros": []}}, "macro.dbt.column_list_for_create_table": {"path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "package_name": "dbt", "raw_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% call statement(auto_begin=inside_transaction) %}\n      {{ hook.get('sql') }}\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}\n\n\n{% macro column_list(columns) %}\n  {%- for col in columns %}\n    {{ col.name }} {% if not loop.last %},{% endif %}\n  {% endfor -%}\n{% endmacro %}\n\n\n{% macro column_list_for_create_table(columns) %}\n  {%- for col in columns %}\n    {{ col.name }} {{ col.data_type }} {%- if not loop.last %},{% endif %}\n  {% endfor -%}\n{% endmacro %}\n\n\n{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}\n\n\n{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}\n\n\n{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}\n\n\n{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}\n\n{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "root_path": "/Users/mrich/.local/share/virtualenvs/quasar-qaRV2YEO/lib/python3.7/site-packages/dbt/include/global_project", "name": "column_list_for_create_table", "unique_id": "macro.dbt.column_list_for_create_table", "tags": [], "resource_type": "macro", "depends_on": {"macros": []}}, "macro.dbt.make_hook_config": {"path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "package_name": "dbt", "raw_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% call statement(auto_begin=inside_transaction) %}\n      {{ hook.get('sql') }}\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}\n\n\n{% macro column_list(columns) %}\n  {%- for col in columns %}\n    {{ col.name }} {% if not loop.last %},{% endif %}\n  {% endfor -%}\n{% endmacro %}\n\n\n{% macro column_list_for_create_table(columns) %}\n  {%- for col in columns %}\n    {{ col.name }} {{ col.data_type }} {%- if not loop.last %},{% endif %}\n  {% endfor -%}\n{% endmacro %}\n\n\n{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}\n\n\n{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}\n\n\n{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}\n\n\n{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}\n\n{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "root_path": "/Users/mrich/.local/share/virtualenvs/quasar-qaRV2YEO/lib/python3.7/site-packages/dbt/include/global_project", "name": "make_hook_config", "unique_id": "macro.dbt.make_hook_config", "tags": [], "resource_type": "macro", "depends_on": {"macros": []}}, "macro.dbt.before_begin": {"path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "package_name": "dbt", "raw_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% call statement(auto_begin=inside_transaction) %}\n      {{ hook.get('sql') }}\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}\n\n\n{% macro column_list(columns) %}\n  {%- for col in columns %}\n    {{ col.name }} {% if not loop.last %},{% endif %}\n  {% endfor -%}\n{% endmacro %}\n\n\n{% macro column_list_for_create_table(columns) %}\n  {%- for col in columns %}\n    {{ col.name }} {{ col.data_type }} {%- if not loop.last %},{% endif %}\n  {% endfor -%}\n{% endmacro %}\n\n\n{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}\n\n\n{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}\n\n\n{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}\n\n\n{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}\n\n{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "root_path": "/Users/mrich/.local/share/virtualenvs/quasar-qaRV2YEO/lib/python3.7/site-packages/dbt/include/global_project", "name": "before_begin", "unique_id": "macro.dbt.before_begin", "tags": [], "resource_type": "macro", "depends_on": {"macros": []}}, "macro.dbt.in_transaction": {"path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "package_name": "dbt", "raw_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% call statement(auto_begin=inside_transaction) %}\n      {{ hook.get('sql') }}\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}\n\n\n{% macro column_list(columns) %}\n  {%- for col in columns %}\n    {{ col.name }} {% if not loop.last %},{% endif %}\n  {% endfor -%}\n{% endmacro %}\n\n\n{% macro column_list_for_create_table(columns) %}\n  {%- for col in columns %}\n    {{ col.name }} {{ col.data_type }} {%- if not loop.last %},{% endif %}\n  {% endfor -%}\n{% endmacro %}\n\n\n{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}\n\n\n{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}\n\n\n{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}\n\n\n{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}\n\n{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "root_path": "/Users/mrich/.local/share/virtualenvs/quasar-qaRV2YEO/lib/python3.7/site-packages/dbt/include/global_project", "name": "in_transaction", "unique_id": "macro.dbt.in_transaction", "tags": [], "resource_type": "macro", "depends_on": {"macros": []}}, "macro.dbt.after_commit": {"path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "package_name": "dbt", "raw_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% call statement(auto_begin=inside_transaction) %}\n      {{ hook.get('sql') }}\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}\n\n\n{% macro column_list(columns) %}\n  {%- for col in columns %}\n    {{ col.name }} {% if not loop.last %},{% endif %}\n  {% endfor -%}\n{% endmacro %}\n\n\n{% macro column_list_for_create_table(columns) %}\n  {%- for col in columns %}\n    {{ col.name }} {{ col.data_type }} {%- if not loop.last %},{% endif %}\n  {% endfor -%}\n{% endmacro %}\n\n\n{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}\n\n\n{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}\n\n\n{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}\n\n\n{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}\n\n{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "root_path": "/Users/mrich/.local/share/virtualenvs/quasar-qaRV2YEO/lib/python3.7/site-packages/dbt/include/global_project", "name": "after_commit", "unique_id": "macro.dbt.after_commit", "tags": [], "resource_type": "macro", "depends_on": {"macros": []}}, "macro.dbt.drop_relation_if_exists": {"path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "package_name": "dbt", "raw_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% call statement(auto_begin=inside_transaction) %}\n      {{ hook.get('sql') }}\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}\n\n\n{% macro column_list(columns) %}\n  {%- for col in columns %}\n    {{ col.name }} {% if not loop.last %},{% endif %}\n  {% endfor -%}\n{% endmacro %}\n\n\n{% macro column_list_for_create_table(columns) %}\n  {%- for col in columns %}\n    {{ col.name }} {{ col.data_type }} {%- if not loop.last %},{% endif %}\n  {% endfor -%}\n{% endmacro %}\n\n\n{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}\n\n\n{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}\n\n\n{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}\n\n\n{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}\n\n{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "root_path": "/Users/mrich/.local/share/virtualenvs/quasar-qaRV2YEO/lib/python3.7/site-packages/dbt/include/global_project", "name": "drop_relation_if_exists", "unique_id": "macro.dbt.drop_relation_if_exists", "tags": [], "resource_type": "macro", "depends_on": {"macros": []}}, "macro.dbt.snapshot_merge_sql": {"path": "macros/materializations/snapshot/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshot/snapshot_merge.sql", "package_name": "dbt", "raw_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter_macro('snapshot_merge_sql', target, source, insert_cols) }}\n{%- endmacro %}\n\n\n{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.dbt_scd_id = DBT_INTERNAL_DEST.dbt_scd_id\n\n    when matched\n     and DBT_INTERNAL_DEST.dbt_valid_to is null\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'update'\n        then update\n        set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n    ;\n{% endmacro %}", "root_path": "/Users/mrich/.local/share/virtualenvs/quasar-qaRV2YEO/lib/python3.7/site-packages/dbt/include/global_project", "name": "snapshot_merge_sql", "unique_id": "macro.dbt.snapshot_merge_sql", "tags": [], "resource_type": "macro", "depends_on": {"macros": []}}, "macro.dbt.default__snapshot_merge_sql": {"path": "macros/materializations/snapshot/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshot/snapshot_merge.sql", "package_name": "dbt", "raw_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter_macro('snapshot_merge_sql', target, source, insert_cols) }}\n{%- endmacro %}\n\n\n{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.dbt_scd_id = DBT_INTERNAL_DEST.dbt_scd_id\n\n    when matched\n     and DBT_INTERNAL_DEST.dbt_valid_to is null\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'update'\n        then update\n        set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n    ;\n{% endmacro %}", "root_path": "/Users/mrich/.local/share/virtualenvs/quasar-qaRV2YEO/lib/python3.7/site-packages/dbt/include/global_project", "name": "default__snapshot_merge_sql", "unique_id": "macro.dbt.default__snapshot_merge_sql", "tags": [], "resource_type": "macro", "depends_on": {"macros": []}}, "macro.dbt.strategy_dispatch": {"path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "package_name": "dbt", "raw_sql": "{#\n    Dispatch strategies by name, optionally qualified to a package\n#}\n{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}\n\n\n{#\n    Create SCD Hash SQL fields cross-db\n#}\n{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter_macro('snapshot_hash_arguments', args) }}\n{%- endmacro %}\n\n\n{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}\n\n\n{#\n    Get the current time cross-db\n#}\n{% macro snapshot_get_time() -%}\n  {{ adapter_macro('snapshot_get_time') }}\n{%- endmacro %}\n\n{% macro default__snapshot_get_time() -%}\n  {{ current_timestamp() }}\n{%- endmacro %}\n\n\n{#\n    Core strategy definitions\n#}\n{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set primary_key = config['unique_key'] %}\n    {% set updated_at = config['updated_at'] %}\n\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.{{ updated_at }} < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr\n    }) %}\n{% endmacro %}\n\n\n{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set check_cols_config = config['check_cols'] %}\n    {% set primary_key = config['unique_key'] %}\n    {% set updated_at = snapshot_get_time() %}\n\n    {% if check_cols_config == 'all' %}\n        {% set check_cols = get_columns_in_query(node['injected_sql']) %}\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {% set check_cols = check_cols_config %}\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {% set row_changed_expr -%}\n        (\n        {% for col in check_cols %}\n            {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n            or\n            ({{ snapshotted_rel }}.{{ col }} is null) != ({{ current_rel }}.{{ col }} is null)\n            {%- if not loop.last %} or {% endif %}\n\n        {% endfor %}\n        )\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr\n    }) %}\n{% endmacro %}", "root_path": "/Users/mrich/.local/share/virtualenvs/quasar-qaRV2YEO/lib/python3.7/site-packages/dbt/include/global_project", "name": "strategy_dispatch", "unique_id": "macro.dbt.strategy_dispatch", "tags": [], "resource_type": "macro", "depends_on": {"macros": []}}, "macro.dbt.snapshot_hash_arguments": {"path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "package_name": "dbt", "raw_sql": "{#\n    Dispatch strategies by name, optionally qualified to a package\n#}\n{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}\n\n\n{#\n    Create SCD Hash SQL fields cross-db\n#}\n{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter_macro('snapshot_hash_arguments', args) }}\n{%- endmacro %}\n\n\n{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}\n\n\n{#\n    Get the current time cross-db\n#}\n{% macro snapshot_get_time() -%}\n  {{ adapter_macro('snapshot_get_time') }}\n{%- endmacro %}\n\n{% macro default__snapshot_get_time() -%}\n  {{ current_timestamp() }}\n{%- endmacro %}\n\n\n{#\n    Core strategy definitions\n#}\n{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set primary_key = config['unique_key'] %}\n    {% set updated_at = config['updated_at'] %}\n\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.{{ updated_at }} < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr\n    }) %}\n{% endmacro %}\n\n\n{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set check_cols_config = config['check_cols'] %}\n    {% set primary_key = config['unique_key'] %}\n    {% set updated_at = snapshot_get_time() %}\n\n    {% if check_cols_config == 'all' %}\n        {% set check_cols = get_columns_in_query(node['injected_sql']) %}\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {% set check_cols = check_cols_config %}\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {% set row_changed_expr -%}\n        (\n        {% for col in check_cols %}\n            {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n            or\n            ({{ snapshotted_rel }}.{{ col }} is null) != ({{ current_rel }}.{{ col }} is null)\n            {%- if not loop.last %} or {% endif %}\n\n        {% endfor %}\n        )\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr\n    }) %}\n{% endmacro %}", "root_path": "/Users/mrich/.local/share/virtualenvs/quasar-qaRV2YEO/lib/python3.7/site-packages/dbt/include/global_project", "name": "snapshot_hash_arguments", "unique_id": "macro.dbt.snapshot_hash_arguments", "tags": [], "resource_type": "macro", "depends_on": {"macros": []}}, "macro.dbt.default__snapshot_hash_arguments": {"path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "package_name": "dbt", "raw_sql": "{#\n    Dispatch strategies by name, optionally qualified to a package\n#}\n{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}\n\n\n{#\n    Create SCD Hash SQL fields cross-db\n#}\n{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter_macro('snapshot_hash_arguments', args) }}\n{%- endmacro %}\n\n\n{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}\n\n\n{#\n    Get the current time cross-db\n#}\n{% macro snapshot_get_time() -%}\n  {{ adapter_macro('snapshot_get_time') }}\n{%- endmacro %}\n\n{% macro default__snapshot_get_time() -%}\n  {{ current_timestamp() }}\n{%- endmacro %}\n\n\n{#\n    Core strategy definitions\n#}\n{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set primary_key = config['unique_key'] %}\n    {% set updated_at = config['updated_at'] %}\n\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.{{ updated_at }} < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr\n    }) %}\n{% endmacro %}\n\n\n{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set check_cols_config = config['check_cols'] %}\n    {% set primary_key = config['unique_key'] %}\n    {% set updated_at = snapshot_get_time() %}\n\n    {% if check_cols_config == 'all' %}\n        {% set check_cols = get_columns_in_query(node['injected_sql']) %}\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {% set check_cols = check_cols_config %}\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {% set row_changed_expr -%}\n        (\n        {% for col in check_cols %}\n            {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n            or\n            ({{ snapshotted_rel }}.{{ col }} is null) != ({{ current_rel }}.{{ col }} is null)\n            {%- if not loop.last %} or {% endif %}\n\n        {% endfor %}\n        )\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr\n    }) %}\n{% endmacro %}", "root_path": "/Users/mrich/.local/share/virtualenvs/quasar-qaRV2YEO/lib/python3.7/site-packages/dbt/include/global_project", "name": "default__snapshot_hash_arguments", "unique_id": "macro.dbt.default__snapshot_hash_arguments", "tags": [], "resource_type": "macro", "depends_on": {"macros": []}}, "macro.dbt.snapshot_get_time": {"path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "package_name": "dbt", "raw_sql": "{#\n    Dispatch strategies by name, optionally qualified to a package\n#}\n{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}\n\n\n{#\n    Create SCD Hash SQL fields cross-db\n#}\n{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter_macro('snapshot_hash_arguments', args) }}\n{%- endmacro %}\n\n\n{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}\n\n\n{#\n    Get the current time cross-db\n#}\n{% macro snapshot_get_time() -%}\n  {{ adapter_macro('snapshot_get_time') }}\n{%- endmacro %}\n\n{% macro default__snapshot_get_time() -%}\n  {{ current_timestamp() }}\n{%- endmacro %}\n\n\n{#\n    Core strategy definitions\n#}\n{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set primary_key = config['unique_key'] %}\n    {% set updated_at = config['updated_at'] %}\n\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.{{ updated_at }} < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr\n    }) %}\n{% endmacro %}\n\n\n{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set check_cols_config = config['check_cols'] %}\n    {% set primary_key = config['unique_key'] %}\n    {% set updated_at = snapshot_get_time() %}\n\n    {% if check_cols_config == 'all' %}\n        {% set check_cols = get_columns_in_query(node['injected_sql']) %}\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {% set check_cols = check_cols_config %}\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {% set row_changed_expr -%}\n        (\n        {% for col in check_cols %}\n            {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n            or\n            ({{ snapshotted_rel }}.{{ col }} is null) != ({{ current_rel }}.{{ col }} is null)\n            {%- if not loop.last %} or {% endif %}\n\n        {% endfor %}\n        )\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr\n    }) %}\n{% endmacro %}", "root_path": "/Users/mrich/.local/share/virtualenvs/quasar-qaRV2YEO/lib/python3.7/site-packages/dbt/include/global_project", "name": "snapshot_get_time", "unique_id": "macro.dbt.snapshot_get_time", "tags": [], "resource_type": "macro", "depends_on": {"macros": []}}, "macro.dbt.default__snapshot_get_time": {"path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "package_name": "dbt", "raw_sql": "{#\n    Dispatch strategies by name, optionally qualified to a package\n#}\n{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}\n\n\n{#\n    Create SCD Hash SQL fields cross-db\n#}\n{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter_macro('snapshot_hash_arguments', args) }}\n{%- endmacro %}\n\n\n{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}\n\n\n{#\n    Get the current time cross-db\n#}\n{% macro snapshot_get_time() -%}\n  {{ adapter_macro('snapshot_get_time') }}\n{%- endmacro %}\n\n{% macro default__snapshot_get_time() -%}\n  {{ current_timestamp() }}\n{%- endmacro %}\n\n\n{#\n    Core strategy definitions\n#}\n{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set primary_key = config['unique_key'] %}\n    {% set updated_at = config['updated_at'] %}\n\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.{{ updated_at }} < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr\n    }) %}\n{% endmacro %}\n\n\n{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set check_cols_config = config['check_cols'] %}\n    {% set primary_key = config['unique_key'] %}\n    {% set updated_at = snapshot_get_time() %}\n\n    {% if check_cols_config == 'all' %}\n        {% set check_cols = get_columns_in_query(node['injected_sql']) %}\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {% set check_cols = check_cols_config %}\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {% set row_changed_expr -%}\n        (\n        {% for col in check_cols %}\n            {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n            or\n            ({{ snapshotted_rel }}.{{ col }} is null) != ({{ current_rel }}.{{ col }} is null)\n            {%- if not loop.last %} or {% endif %}\n\n        {% endfor %}\n        )\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr\n    }) %}\n{% endmacro %}", "root_path": "/Users/mrich/.local/share/virtualenvs/quasar-qaRV2YEO/lib/python3.7/site-packages/dbt/include/global_project", "name": "default__snapshot_get_time", "unique_id": "macro.dbt.default__snapshot_get_time", "tags": [], "resource_type": "macro", "depends_on": {"macros": []}}, "macro.dbt.snapshot_timestamp_strategy": {"path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "package_name": "dbt", "raw_sql": "{#\n    Dispatch strategies by name, optionally qualified to a package\n#}\n{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}\n\n\n{#\n    Create SCD Hash SQL fields cross-db\n#}\n{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter_macro('snapshot_hash_arguments', args) }}\n{%- endmacro %}\n\n\n{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}\n\n\n{#\n    Get the current time cross-db\n#}\n{% macro snapshot_get_time() -%}\n  {{ adapter_macro('snapshot_get_time') }}\n{%- endmacro %}\n\n{% macro default__snapshot_get_time() -%}\n  {{ current_timestamp() }}\n{%- endmacro %}\n\n\n{#\n    Core strategy definitions\n#}\n{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set primary_key = config['unique_key'] %}\n    {% set updated_at = config['updated_at'] %}\n\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.{{ updated_at }} < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr\n    }) %}\n{% endmacro %}\n\n\n{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set check_cols_config = config['check_cols'] %}\n    {% set primary_key = config['unique_key'] %}\n    {% set updated_at = snapshot_get_time() %}\n\n    {% if check_cols_config == 'all' %}\n        {% set check_cols = get_columns_in_query(node['injected_sql']) %}\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {% set check_cols = check_cols_config %}\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {% set row_changed_expr -%}\n        (\n        {% for col in check_cols %}\n            {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n            or\n            ({{ snapshotted_rel }}.{{ col }} is null) != ({{ current_rel }}.{{ col }} is null)\n            {%- if not loop.last %} or {% endif %}\n\n        {% endfor %}\n        )\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr\n    }) %}\n{% endmacro %}", "root_path": "/Users/mrich/.local/share/virtualenvs/quasar-qaRV2YEO/lib/python3.7/site-packages/dbt/include/global_project", "name": "snapshot_timestamp_strategy", "unique_id": "macro.dbt.snapshot_timestamp_strategy", "tags": [], "resource_type": "macro", "depends_on": {"macros": []}}, "macro.dbt.snapshot_check_strategy": {"path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "package_name": "dbt", "raw_sql": "{#\n    Dispatch strategies by name, optionally qualified to a package\n#}\n{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}\n\n\n{#\n    Create SCD Hash SQL fields cross-db\n#}\n{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter_macro('snapshot_hash_arguments', args) }}\n{%- endmacro %}\n\n\n{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}\n\n\n{#\n    Get the current time cross-db\n#}\n{% macro snapshot_get_time() -%}\n  {{ adapter_macro('snapshot_get_time') }}\n{%- endmacro %}\n\n{% macro default__snapshot_get_time() -%}\n  {{ current_timestamp() }}\n{%- endmacro %}\n\n\n{#\n    Core strategy definitions\n#}\n{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set primary_key = config['unique_key'] %}\n    {% set updated_at = config['updated_at'] %}\n\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.{{ updated_at }} < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr\n    }) %}\n{% endmacro %}\n\n\n{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set check_cols_config = config['check_cols'] %}\n    {% set primary_key = config['unique_key'] %}\n    {% set updated_at = snapshot_get_time() %}\n\n    {% if check_cols_config == 'all' %}\n        {% set check_cols = get_columns_in_query(node['injected_sql']) %}\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {% set check_cols = check_cols_config %}\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {% set row_changed_expr -%}\n        (\n        {% for col in check_cols %}\n            {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n            or\n            ({{ snapshotted_rel }}.{{ col }} is null) != ({{ current_rel }}.{{ col }} is null)\n            {%- if not loop.last %} or {% endif %}\n\n        {% endfor %}\n        )\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr\n    }) %}\n{% endmacro %}", "root_path": "/Users/mrich/.local/share/virtualenvs/quasar-qaRV2YEO/lib/python3.7/site-packages/dbt/include/global_project", "name": "snapshot_check_strategy", "unique_id": "macro.dbt.snapshot_check_strategy", "tags": [], "resource_type": "macro", "depends_on": {"macros": []}}, "macro.dbt.create_columns": {"path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "package_name": "dbt", "raw_sql": "{#\n    Add new columns to the table if applicable\n#}\n{% macro create_columns(relation, columns) %}\n  {{ adapter_macro('create_columns', relation, columns) }}\n{% endmacro %}\n\n{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}\n\n\n{% macro post_snapshot(staging_relation) %}\n  {{ adapter_macro('post_snapshot', staging_relation) }}\n{% endmacro %}\n\n{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}\n\n\n{% macro snapshot_staging_table_inserts(strategy, source_sql, target_relation) -%}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n\n    ),\n\n    source_data as (\n\n        select *,\n            {{ strategy.scd_id }} as dbt_scd_id,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n\n        from snapshot_query\n    ),\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n\n        from source_data\n        left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_unique_key is null\n           or (\n                snapshotted_data.dbt_unique_key is not null\n            and snapshotted_data.dbt_valid_to is null\n            and (\n                {{ strategy.row_changed }}\n            )\n        )\n\n    )\n\n    select * from insertions\n\n{%- endmacro %}\n\n\n{% macro snapshot_staging_table_updates(strategy, source_sql, target_relation) -%}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n\n    ),\n\n    source_data as (\n\n        select\n            *,\n            {{ strategy.scd_id }} as dbt_scd_id,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from\n\n        from snapshot_query\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            snapshotted_data.dbt_scd_id,\n            source_data.dbt_valid_from as dbt_valid_to\n\n        from source_data\n        join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_valid_to is null\n        and (\n            {{ strategy.row_changed }}\n        )\n\n    )\n\n    select * from updates\n\n{%- endmacro %}\n\n\n{% macro build_snapshot_table(strategy, sql) %}\n\n    select *,\n        {{ strategy.scd_id }} as dbt_scd_id,\n        {{ strategy.updated_at }} as dbt_updated_at,\n        {{ strategy.updated_at }} as dbt_valid_from,\n        nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}\n\n\n{% macro get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}\n\n{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set tmp_relation = make_temp_relation(target_relation) %}\n\n    {% set inserts_select = snapshot_staging_table_inserts(strategy, sql, target_relation) %}\n    {% set updates_select = snapshot_staging_table_updates(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation_inserts') %}\n        {{ create_table_as(True, tmp_relation, inserts_select) }}\n    {% endcall %}\n\n    {% call statement('build_snapshot_staging_relation_updates') %}\n        insert into {{ tmp_relation }} (dbt_change_type, dbt_scd_id, dbt_valid_to)\n        select dbt_change_type, dbt_scd_id, dbt_valid_to from (\n            {{ updates_select }}\n        ) dbt_sbq;\n    {% endcall %}\n\n    {% do return(tmp_relation) %}\n{% endmacro %}\n\n\n{% materialization snapshot, default %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_database = config.get('target_database') -%}\n  {%- set target_schema = config.get('target_schema') -%}\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n\n  {% if not adapter.check_schema_exists(target_database, target_schema) %}\n    {% do create_schema(target_database, target_schema) %}\n  {% endif %}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=target_database,\n          schema=target_schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['injected_sql']) %}\n      {% call statement('main') -%}\n          {{ create_table_as(False, target_relation, build_sql) }}\n      {% endcall %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% call statement('main') %}\n          {{ snapshot_merge_sql(\n                target = target_relation,\n                source = staging_table,\n                insert_cols = quoted_source_columns\n             )\n          }}\n      {% endcall %}\n\n  {% endif %}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n{% endmaterialization %}", "root_path": "/Users/mrich/.local/share/virtualenvs/quasar-qaRV2YEO/lib/python3.7/site-packages/dbt/include/global_project", "name": "create_columns", "unique_id": "macro.dbt.create_columns", "tags": [], "resource_type": "macro", "depends_on": {"macros": []}}, "macro.dbt.default__create_columns": {"path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "package_name": "dbt", "raw_sql": "{#\n    Add new columns to the table if applicable\n#}\n{% macro create_columns(relation, columns) %}\n  {{ adapter_macro('create_columns', relation, columns) }}\n{% endmacro %}\n\n{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}\n\n\n{% macro post_snapshot(staging_relation) %}\n  {{ adapter_macro('post_snapshot', staging_relation) }}\n{% endmacro %}\n\n{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}\n\n\n{% macro snapshot_staging_table_inserts(strategy, source_sql, target_relation) -%}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n\n    ),\n\n    source_data as (\n\n        select *,\n            {{ strategy.scd_id }} as dbt_scd_id,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n\n        from snapshot_query\n    ),\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n\n        from source_data\n        left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_unique_key is null\n           or (\n                snapshotted_data.dbt_unique_key is not null\n            and snapshotted_data.dbt_valid_to is null\n            and (\n                {{ strategy.row_changed }}\n            )\n        )\n\n    )\n\n    select * from insertions\n\n{%- endmacro %}\n\n\n{% macro snapshot_staging_table_updates(strategy, source_sql, target_relation) -%}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n\n    ),\n\n    source_data as (\n\n        select\n            *,\n            {{ strategy.scd_id }} as dbt_scd_id,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from\n\n        from snapshot_query\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            snapshotted_data.dbt_scd_id,\n            source_data.dbt_valid_from as dbt_valid_to\n\n        from source_data\n        join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_valid_to is null\n        and (\n            {{ strategy.row_changed }}\n        )\n\n    )\n\n    select * from updates\n\n{%- endmacro %}\n\n\n{% macro build_snapshot_table(strategy, sql) %}\n\n    select *,\n        {{ strategy.scd_id }} as dbt_scd_id,\n        {{ strategy.updated_at }} as dbt_updated_at,\n        {{ strategy.updated_at }} as dbt_valid_from,\n        nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}\n\n\n{% macro get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}\n\n{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set tmp_relation = make_temp_relation(target_relation) %}\n\n    {% set inserts_select = snapshot_staging_table_inserts(strategy, sql, target_relation) %}\n    {% set updates_select = snapshot_staging_table_updates(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation_inserts') %}\n        {{ create_table_as(True, tmp_relation, inserts_select) }}\n    {% endcall %}\n\n    {% call statement('build_snapshot_staging_relation_updates') %}\n        insert into {{ tmp_relation }} (dbt_change_type, dbt_scd_id, dbt_valid_to)\n        select dbt_change_type, dbt_scd_id, dbt_valid_to from (\n            {{ updates_select }}\n        ) dbt_sbq;\n    {% endcall %}\n\n    {% do return(tmp_relation) %}\n{% endmacro %}\n\n\n{% materialization snapshot, default %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_database = config.get('target_database') -%}\n  {%- set target_schema = config.get('target_schema') -%}\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n\n  {% if not adapter.check_schema_exists(target_database, target_schema) %}\n    {% do create_schema(target_database, target_schema) %}\n  {% endif %}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=target_database,\n          schema=target_schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['injected_sql']) %}\n      {% call statement('main') -%}\n          {{ create_table_as(False, target_relation, build_sql) }}\n      {% endcall %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% call statement('main') %}\n          {{ snapshot_merge_sql(\n                target = target_relation,\n                source = staging_table,\n                insert_cols = quoted_source_columns\n             )\n          }}\n      {% endcall %}\n\n  {% endif %}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n{% endmaterialization %}", "root_path": "/Users/mrich/.local/share/virtualenvs/quasar-qaRV2YEO/lib/python3.7/site-packages/dbt/include/global_project", "name": "default__create_columns", "unique_id": "macro.dbt.default__create_columns", "tags": [], "resource_type": "macro", "depends_on": {"macros": []}}, "macro.dbt.post_snapshot": {"path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "package_name": "dbt", "raw_sql": "{#\n    Add new columns to the table if applicable\n#}\n{% macro create_columns(relation, columns) %}\n  {{ adapter_macro('create_columns', relation, columns) }}\n{% endmacro %}\n\n{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}\n\n\n{% macro post_snapshot(staging_relation) %}\n  {{ adapter_macro('post_snapshot', staging_relation) }}\n{% endmacro %}\n\n{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}\n\n\n{% macro snapshot_staging_table_inserts(strategy, source_sql, target_relation) -%}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n\n    ),\n\n    source_data as (\n\n        select *,\n            {{ strategy.scd_id }} as dbt_scd_id,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n\n        from snapshot_query\n    ),\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n\n        from source_data\n        left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_unique_key is null\n           or (\n                snapshotted_data.dbt_unique_key is not null\n            and snapshotted_data.dbt_valid_to is null\n            and (\n                {{ strategy.row_changed }}\n            )\n        )\n\n    )\n\n    select * from insertions\n\n{%- endmacro %}\n\n\n{% macro snapshot_staging_table_updates(strategy, source_sql, target_relation) -%}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n\n    ),\n\n    source_data as (\n\n        select\n            *,\n            {{ strategy.scd_id }} as dbt_scd_id,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from\n\n        from snapshot_query\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            snapshotted_data.dbt_scd_id,\n            source_data.dbt_valid_from as dbt_valid_to\n\n        from source_data\n        join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_valid_to is null\n        and (\n            {{ strategy.row_changed }}\n        )\n\n    )\n\n    select * from updates\n\n{%- endmacro %}\n\n\n{% macro build_snapshot_table(strategy, sql) %}\n\n    select *,\n        {{ strategy.scd_id }} as dbt_scd_id,\n        {{ strategy.updated_at }} as dbt_updated_at,\n        {{ strategy.updated_at }} as dbt_valid_from,\n        nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}\n\n\n{% macro get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}\n\n{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set tmp_relation = make_temp_relation(target_relation) %}\n\n    {% set inserts_select = snapshot_staging_table_inserts(strategy, sql, target_relation) %}\n    {% set updates_select = snapshot_staging_table_updates(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation_inserts') %}\n        {{ create_table_as(True, tmp_relation, inserts_select) }}\n    {% endcall %}\n\n    {% call statement('build_snapshot_staging_relation_updates') %}\n        insert into {{ tmp_relation }} (dbt_change_type, dbt_scd_id, dbt_valid_to)\n        select dbt_change_type, dbt_scd_id, dbt_valid_to from (\n            {{ updates_select }}\n        ) dbt_sbq;\n    {% endcall %}\n\n    {% do return(tmp_relation) %}\n{% endmacro %}\n\n\n{% materialization snapshot, default %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_database = config.get('target_database') -%}\n  {%- set target_schema = config.get('target_schema') -%}\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n\n  {% if not adapter.check_schema_exists(target_database, target_schema) %}\n    {% do create_schema(target_database, target_schema) %}\n  {% endif %}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=target_database,\n          schema=target_schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['injected_sql']) %}\n      {% call statement('main') -%}\n          {{ create_table_as(False, target_relation, build_sql) }}\n      {% endcall %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% call statement('main') %}\n          {{ snapshot_merge_sql(\n                target = target_relation,\n                source = staging_table,\n                insert_cols = quoted_source_columns\n             )\n          }}\n      {% endcall %}\n\n  {% endif %}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n{% endmaterialization %}", "root_path": "/Users/mrich/.local/share/virtualenvs/quasar-qaRV2YEO/lib/python3.7/site-packages/dbt/include/global_project", "name": "post_snapshot", "unique_id": "macro.dbt.post_snapshot", "tags": [], "resource_type": "macro", "depends_on": {"macros": []}}, "macro.dbt.default__post_snapshot": {"path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "package_name": "dbt", "raw_sql": "{#\n    Add new columns to the table if applicable\n#}\n{% macro create_columns(relation, columns) %}\n  {{ adapter_macro('create_columns', relation, columns) }}\n{% endmacro %}\n\n{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}\n\n\n{% macro post_snapshot(staging_relation) %}\n  {{ adapter_macro('post_snapshot', staging_relation) }}\n{% endmacro %}\n\n{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}\n\n\n{% macro snapshot_staging_table_inserts(strategy, source_sql, target_relation) -%}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n\n    ),\n\n    source_data as (\n\n        select *,\n            {{ strategy.scd_id }} as dbt_scd_id,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n\n        from snapshot_query\n    ),\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n\n        from source_data\n        left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_unique_key is null\n           or (\n                snapshotted_data.dbt_unique_key is not null\n            and snapshotted_data.dbt_valid_to is null\n            and (\n                {{ strategy.row_changed }}\n            )\n        )\n\n    )\n\n    select * from insertions\n\n{%- endmacro %}\n\n\n{% macro snapshot_staging_table_updates(strategy, source_sql, target_relation) -%}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n\n    ),\n\n    source_data as (\n\n        select\n            *,\n            {{ strategy.scd_id }} as dbt_scd_id,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from\n\n        from snapshot_query\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            snapshotted_data.dbt_scd_id,\n            source_data.dbt_valid_from as dbt_valid_to\n\n        from source_data\n        join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_valid_to is null\n        and (\n            {{ strategy.row_changed }}\n        )\n\n    )\n\n    select * from updates\n\n{%- endmacro %}\n\n\n{% macro build_snapshot_table(strategy, sql) %}\n\n    select *,\n        {{ strategy.scd_id }} as dbt_scd_id,\n        {{ strategy.updated_at }} as dbt_updated_at,\n        {{ strategy.updated_at }} as dbt_valid_from,\n        nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}\n\n\n{% macro get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}\n\n{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set tmp_relation = make_temp_relation(target_relation) %}\n\n    {% set inserts_select = snapshot_staging_table_inserts(strategy, sql, target_relation) %}\n    {% set updates_select = snapshot_staging_table_updates(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation_inserts') %}\n        {{ create_table_as(True, tmp_relation, inserts_select) }}\n    {% endcall %}\n\n    {% call statement('build_snapshot_staging_relation_updates') %}\n        insert into {{ tmp_relation }} (dbt_change_type, dbt_scd_id, dbt_valid_to)\n        select dbt_change_type, dbt_scd_id, dbt_valid_to from (\n            {{ updates_select }}\n        ) dbt_sbq;\n    {% endcall %}\n\n    {% do return(tmp_relation) %}\n{% endmacro %}\n\n\n{% materialization snapshot, default %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_database = config.get('target_database') -%}\n  {%- set target_schema = config.get('target_schema') -%}\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n\n  {% if not adapter.check_schema_exists(target_database, target_schema) %}\n    {% do create_schema(target_database, target_schema) %}\n  {% endif %}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=target_database,\n          schema=target_schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['injected_sql']) %}\n      {% call statement('main') -%}\n          {{ create_table_as(False, target_relation, build_sql) }}\n      {% endcall %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% call statement('main') %}\n          {{ snapshot_merge_sql(\n                target = target_relation,\n                source = staging_table,\n                insert_cols = quoted_source_columns\n             )\n          }}\n      {% endcall %}\n\n  {% endif %}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n{% endmaterialization %}", "root_path": "/Users/mrich/.local/share/virtualenvs/quasar-qaRV2YEO/lib/python3.7/site-packages/dbt/include/global_project", "name": "default__post_snapshot", "unique_id": "macro.dbt.default__post_snapshot", "tags": [], "resource_type": "macro", "depends_on": {"macros": []}}, "macro.dbt.snapshot_staging_table_inserts": {"path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "package_name": "dbt", "raw_sql": "{#\n    Add new columns to the table if applicable\n#}\n{% macro create_columns(relation, columns) %}\n  {{ adapter_macro('create_columns', relation, columns) }}\n{% endmacro %}\n\n{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}\n\n\n{% macro post_snapshot(staging_relation) %}\n  {{ adapter_macro('post_snapshot', staging_relation) }}\n{% endmacro %}\n\n{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}\n\n\n{% macro snapshot_staging_table_inserts(strategy, source_sql, target_relation) -%}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n\n    ),\n\n    source_data as (\n\n        select *,\n            {{ strategy.scd_id }} as dbt_scd_id,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n\n        from snapshot_query\n    ),\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n\n        from source_data\n        left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_unique_key is null\n           or (\n                snapshotted_data.dbt_unique_key is not null\n            and snapshotted_data.dbt_valid_to is null\n            and (\n                {{ strategy.row_changed }}\n            )\n        )\n\n    )\n\n    select * from insertions\n\n{%- endmacro %}\n\n\n{% macro snapshot_staging_table_updates(strategy, source_sql, target_relation) -%}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n\n    ),\n\n    source_data as (\n\n        select\n            *,\n            {{ strategy.scd_id }} as dbt_scd_id,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from\n\n        from snapshot_query\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            snapshotted_data.dbt_scd_id,\n            source_data.dbt_valid_from as dbt_valid_to\n\n        from source_data\n        join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_valid_to is null\n        and (\n            {{ strategy.row_changed }}\n        )\n\n    )\n\n    select * from updates\n\n{%- endmacro %}\n\n\n{% macro build_snapshot_table(strategy, sql) %}\n\n    select *,\n        {{ strategy.scd_id }} as dbt_scd_id,\n        {{ strategy.updated_at }} as dbt_updated_at,\n        {{ strategy.updated_at }} as dbt_valid_from,\n        nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}\n\n\n{% macro get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}\n\n{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set tmp_relation = make_temp_relation(target_relation) %}\n\n    {% set inserts_select = snapshot_staging_table_inserts(strategy, sql, target_relation) %}\n    {% set updates_select = snapshot_staging_table_updates(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation_inserts') %}\n        {{ create_table_as(True, tmp_relation, inserts_select) }}\n    {% endcall %}\n\n    {% call statement('build_snapshot_staging_relation_updates') %}\n        insert into {{ tmp_relation }} (dbt_change_type, dbt_scd_id, dbt_valid_to)\n        select dbt_change_type, dbt_scd_id, dbt_valid_to from (\n            {{ updates_select }}\n        ) dbt_sbq;\n    {% endcall %}\n\n    {% do return(tmp_relation) %}\n{% endmacro %}\n\n\n{% materialization snapshot, default %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_database = config.get('target_database') -%}\n  {%- set target_schema = config.get('target_schema') -%}\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n\n  {% if not adapter.check_schema_exists(target_database, target_schema) %}\n    {% do create_schema(target_database, target_schema) %}\n  {% endif %}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=target_database,\n          schema=target_schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['injected_sql']) %}\n      {% call statement('main') -%}\n          {{ create_table_as(False, target_relation, build_sql) }}\n      {% endcall %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% call statement('main') %}\n          {{ snapshot_merge_sql(\n                target = target_relation,\n                source = staging_table,\n                insert_cols = quoted_source_columns\n             )\n          }}\n      {% endcall %}\n\n  {% endif %}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n{% endmaterialization %}", "root_path": "/Users/mrich/.local/share/virtualenvs/quasar-qaRV2YEO/lib/python3.7/site-packages/dbt/include/global_project", "name": "snapshot_staging_table_inserts", "unique_id": "macro.dbt.snapshot_staging_table_inserts", "tags": [], "resource_type": "macro", "depends_on": {"macros": []}}, "macro.dbt.snapshot_staging_table_updates": {"path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "package_name": "dbt", "raw_sql": "{#\n    Add new columns to the table if applicable\n#}\n{% macro create_columns(relation, columns) %}\n  {{ adapter_macro('create_columns', relation, columns) }}\n{% endmacro %}\n\n{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}\n\n\n{% macro post_snapshot(staging_relation) %}\n  {{ adapter_macro('post_snapshot', staging_relation) }}\n{% endmacro %}\n\n{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}\n\n\n{% macro snapshot_staging_table_inserts(strategy, source_sql, target_relation) -%}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n\n    ),\n\n    source_data as (\n\n        select *,\n            {{ strategy.scd_id }} as dbt_scd_id,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n\n        from snapshot_query\n    ),\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n\n        from source_data\n        left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_unique_key is null\n           or (\n                snapshotted_data.dbt_unique_key is not null\n            and snapshotted_data.dbt_valid_to is null\n            and (\n                {{ strategy.row_changed }}\n            )\n        )\n\n    )\n\n    select * from insertions\n\n{%- endmacro %}\n\n\n{% macro snapshot_staging_table_updates(strategy, source_sql, target_relation) -%}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n\n    ),\n\n    source_data as (\n\n        select\n            *,\n            {{ strategy.scd_id }} as dbt_scd_id,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from\n\n        from snapshot_query\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            snapshotted_data.dbt_scd_id,\n            source_data.dbt_valid_from as dbt_valid_to\n\n        from source_data\n        join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_valid_to is null\n        and (\n            {{ strategy.row_changed }}\n        )\n\n    )\n\n    select * from updates\n\n{%- endmacro %}\n\n\n{% macro build_snapshot_table(strategy, sql) %}\n\n    select *,\n        {{ strategy.scd_id }} as dbt_scd_id,\n        {{ strategy.updated_at }} as dbt_updated_at,\n        {{ strategy.updated_at }} as dbt_valid_from,\n        nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}\n\n\n{% macro get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}\n\n{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set tmp_relation = make_temp_relation(target_relation) %}\n\n    {% set inserts_select = snapshot_staging_table_inserts(strategy, sql, target_relation) %}\n    {% set updates_select = snapshot_staging_table_updates(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation_inserts') %}\n        {{ create_table_as(True, tmp_relation, inserts_select) }}\n    {% endcall %}\n\n    {% call statement('build_snapshot_staging_relation_updates') %}\n        insert into {{ tmp_relation }} (dbt_change_type, dbt_scd_id, dbt_valid_to)\n        select dbt_change_type, dbt_scd_id, dbt_valid_to from (\n            {{ updates_select }}\n        ) dbt_sbq;\n    {% endcall %}\n\n    {% do return(tmp_relation) %}\n{% endmacro %}\n\n\n{% materialization snapshot, default %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_database = config.get('target_database') -%}\n  {%- set target_schema = config.get('target_schema') -%}\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n\n  {% if not adapter.check_schema_exists(target_database, target_schema) %}\n    {% do create_schema(target_database, target_schema) %}\n  {% endif %}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=target_database,\n          schema=target_schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['injected_sql']) %}\n      {% call statement('main') -%}\n          {{ create_table_as(False, target_relation, build_sql) }}\n      {% endcall %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% call statement('main') %}\n          {{ snapshot_merge_sql(\n                target = target_relation,\n                source = staging_table,\n                insert_cols = quoted_source_columns\n             )\n          }}\n      {% endcall %}\n\n  {% endif %}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n{% endmaterialization %}", "root_path": "/Users/mrich/.local/share/virtualenvs/quasar-qaRV2YEO/lib/python3.7/site-packages/dbt/include/global_project", "name": "snapshot_staging_table_updates", "unique_id": "macro.dbt.snapshot_staging_table_updates", "tags": [], "resource_type": "macro", "depends_on": {"macros": []}}, "macro.dbt.build_snapshot_table": {"path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "package_name": "dbt", "raw_sql": "{#\n    Add new columns to the table if applicable\n#}\n{% macro create_columns(relation, columns) %}\n  {{ adapter_macro('create_columns', relation, columns) }}\n{% endmacro %}\n\n{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}\n\n\n{% macro post_snapshot(staging_relation) %}\n  {{ adapter_macro('post_snapshot', staging_relation) }}\n{% endmacro %}\n\n{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}\n\n\n{% macro snapshot_staging_table_inserts(strategy, source_sql, target_relation) -%}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n\n    ),\n\n    source_data as (\n\n        select *,\n            {{ strategy.scd_id }} as dbt_scd_id,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n\n        from snapshot_query\n    ),\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n\n        from source_data\n        left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_unique_key is null\n           or (\n                snapshotted_data.dbt_unique_key is not null\n            and snapshotted_data.dbt_valid_to is null\n            and (\n                {{ strategy.row_changed }}\n            )\n        )\n\n    )\n\n    select * from insertions\n\n{%- endmacro %}\n\n\n{% macro snapshot_staging_table_updates(strategy, source_sql, target_relation) -%}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n\n    ),\n\n    source_data as (\n\n        select\n            *,\n            {{ strategy.scd_id }} as dbt_scd_id,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from\n\n        from snapshot_query\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            snapshotted_data.dbt_scd_id,\n            source_data.dbt_valid_from as dbt_valid_to\n\n        from source_data\n        join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_valid_to is null\n        and (\n            {{ strategy.row_changed }}\n        )\n\n    )\n\n    select * from updates\n\n{%- endmacro %}\n\n\n{% macro build_snapshot_table(strategy, sql) %}\n\n    select *,\n        {{ strategy.scd_id }} as dbt_scd_id,\n        {{ strategy.updated_at }} as dbt_updated_at,\n        {{ strategy.updated_at }} as dbt_valid_from,\n        nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}\n\n\n{% macro get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}\n\n{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set tmp_relation = make_temp_relation(target_relation) %}\n\n    {% set inserts_select = snapshot_staging_table_inserts(strategy, sql, target_relation) %}\n    {% set updates_select = snapshot_staging_table_updates(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation_inserts') %}\n        {{ create_table_as(True, tmp_relation, inserts_select) }}\n    {% endcall %}\n\n    {% call statement('build_snapshot_staging_relation_updates') %}\n        insert into {{ tmp_relation }} (dbt_change_type, dbt_scd_id, dbt_valid_to)\n        select dbt_change_type, dbt_scd_id, dbt_valid_to from (\n            {{ updates_select }}\n        ) dbt_sbq;\n    {% endcall %}\n\n    {% do return(tmp_relation) %}\n{% endmacro %}\n\n\n{% materialization snapshot, default %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_database = config.get('target_database') -%}\n  {%- set target_schema = config.get('target_schema') -%}\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n\n  {% if not adapter.check_schema_exists(target_database, target_schema) %}\n    {% do create_schema(target_database, target_schema) %}\n  {% endif %}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=target_database,\n          schema=target_schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['injected_sql']) %}\n      {% call statement('main') -%}\n          {{ create_table_as(False, target_relation, build_sql) }}\n      {% endcall %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% call statement('main') %}\n          {{ snapshot_merge_sql(\n                target = target_relation,\n                source = staging_table,\n                insert_cols = quoted_source_columns\n             )\n          }}\n      {% endcall %}\n\n  {% endif %}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n{% endmaterialization %}", "root_path": "/Users/mrich/.local/share/virtualenvs/quasar-qaRV2YEO/lib/python3.7/site-packages/dbt/include/global_project", "name": "build_snapshot_table", "unique_id": "macro.dbt.build_snapshot_table", "tags": [], "resource_type": "macro", "depends_on": {"macros": []}}, "macro.dbt.get_or_create_relation": {"path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "package_name": "dbt", "raw_sql": "{#\n    Add new columns to the table if applicable\n#}\n{% macro create_columns(relation, columns) %}\n  {{ adapter_macro('create_columns', relation, columns) }}\n{% endmacro %}\n\n{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}\n\n\n{% macro post_snapshot(staging_relation) %}\n  {{ adapter_macro('post_snapshot', staging_relation) }}\n{% endmacro %}\n\n{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}\n\n\n{% macro snapshot_staging_table_inserts(strategy, source_sql, target_relation) -%}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n\n    ),\n\n    source_data as (\n\n        select *,\n            {{ strategy.scd_id }} as dbt_scd_id,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n\n        from snapshot_query\n    ),\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n\n        from source_data\n        left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_unique_key is null\n           or (\n                snapshotted_data.dbt_unique_key is not null\n            and snapshotted_data.dbt_valid_to is null\n            and (\n                {{ strategy.row_changed }}\n            )\n        )\n\n    )\n\n    select * from insertions\n\n{%- endmacro %}\n\n\n{% macro snapshot_staging_table_updates(strategy, source_sql, target_relation) -%}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n\n    ),\n\n    source_data as (\n\n        select\n            *,\n            {{ strategy.scd_id }} as dbt_scd_id,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from\n\n        from snapshot_query\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            snapshotted_data.dbt_scd_id,\n            source_data.dbt_valid_from as dbt_valid_to\n\n        from source_data\n        join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_valid_to is null\n        and (\n            {{ strategy.row_changed }}\n        )\n\n    )\n\n    select * from updates\n\n{%- endmacro %}\n\n\n{% macro build_snapshot_table(strategy, sql) %}\n\n    select *,\n        {{ strategy.scd_id }} as dbt_scd_id,\n        {{ strategy.updated_at }} as dbt_updated_at,\n        {{ strategy.updated_at }} as dbt_valid_from,\n        nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}\n\n\n{% macro get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}\n\n{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set tmp_relation = make_temp_relation(target_relation) %}\n\n    {% set inserts_select = snapshot_staging_table_inserts(strategy, sql, target_relation) %}\n    {% set updates_select = snapshot_staging_table_updates(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation_inserts') %}\n        {{ create_table_as(True, tmp_relation, inserts_select) }}\n    {% endcall %}\n\n    {% call statement('build_snapshot_staging_relation_updates') %}\n        insert into {{ tmp_relation }} (dbt_change_type, dbt_scd_id, dbt_valid_to)\n        select dbt_change_type, dbt_scd_id, dbt_valid_to from (\n            {{ updates_select }}\n        ) dbt_sbq;\n    {% endcall %}\n\n    {% do return(tmp_relation) %}\n{% endmacro %}\n\n\n{% materialization snapshot, default %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_database = config.get('target_database') -%}\n  {%- set target_schema = config.get('target_schema') -%}\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n\n  {% if not adapter.check_schema_exists(target_database, target_schema) %}\n    {% do create_schema(target_database, target_schema) %}\n  {% endif %}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=target_database,\n          schema=target_schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['injected_sql']) %}\n      {% call statement('main') -%}\n          {{ create_table_as(False, target_relation, build_sql) }}\n      {% endcall %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% call statement('main') %}\n          {{ snapshot_merge_sql(\n                target = target_relation,\n                source = staging_table,\n                insert_cols = quoted_source_columns\n             )\n          }}\n      {% endcall %}\n\n  {% endif %}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n{% endmaterialization %}", "root_path": "/Users/mrich/.local/share/virtualenvs/quasar-qaRV2YEO/lib/python3.7/site-packages/dbt/include/global_project", "name": "get_or_create_relation", "unique_id": "macro.dbt.get_or_create_relation", "tags": [], "resource_type": "macro", "depends_on": {"macros": []}}, "macro.dbt.build_snapshot_staging_table": {"path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "package_name": "dbt", "raw_sql": "{#\n    Add new columns to the table if applicable\n#}\n{% macro create_columns(relation, columns) %}\n  {{ adapter_macro('create_columns', relation, columns) }}\n{% endmacro %}\n\n{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}\n\n\n{% macro post_snapshot(staging_relation) %}\n  {{ adapter_macro('post_snapshot', staging_relation) }}\n{% endmacro %}\n\n{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}\n\n\n{% macro snapshot_staging_table_inserts(strategy, source_sql, target_relation) -%}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n\n    ),\n\n    source_data as (\n\n        select *,\n            {{ strategy.scd_id }} as dbt_scd_id,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n\n        from snapshot_query\n    ),\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n\n        from source_data\n        left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_unique_key is null\n           or (\n                snapshotted_data.dbt_unique_key is not null\n            and snapshotted_data.dbt_valid_to is null\n            and (\n                {{ strategy.row_changed }}\n            )\n        )\n\n    )\n\n    select * from insertions\n\n{%- endmacro %}\n\n\n{% macro snapshot_staging_table_updates(strategy, source_sql, target_relation) -%}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n\n    ),\n\n    source_data as (\n\n        select\n            *,\n            {{ strategy.scd_id }} as dbt_scd_id,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from\n\n        from snapshot_query\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            snapshotted_data.dbt_scd_id,\n            source_data.dbt_valid_from as dbt_valid_to\n\n        from source_data\n        join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_valid_to is null\n        and (\n            {{ strategy.row_changed }}\n        )\n\n    )\n\n    select * from updates\n\n{%- endmacro %}\n\n\n{% macro build_snapshot_table(strategy, sql) %}\n\n    select *,\n        {{ strategy.scd_id }} as dbt_scd_id,\n        {{ strategy.updated_at }} as dbt_updated_at,\n        {{ strategy.updated_at }} as dbt_valid_from,\n        nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}\n\n\n{% macro get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}\n\n{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set tmp_relation = make_temp_relation(target_relation) %}\n\n    {% set inserts_select = snapshot_staging_table_inserts(strategy, sql, target_relation) %}\n    {% set updates_select = snapshot_staging_table_updates(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation_inserts') %}\n        {{ create_table_as(True, tmp_relation, inserts_select) }}\n    {% endcall %}\n\n    {% call statement('build_snapshot_staging_relation_updates') %}\n        insert into {{ tmp_relation }} (dbt_change_type, dbt_scd_id, dbt_valid_to)\n        select dbt_change_type, dbt_scd_id, dbt_valid_to from (\n            {{ updates_select }}\n        ) dbt_sbq;\n    {% endcall %}\n\n    {% do return(tmp_relation) %}\n{% endmacro %}\n\n\n{% materialization snapshot, default %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_database = config.get('target_database') -%}\n  {%- set target_schema = config.get('target_schema') -%}\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n\n  {% if not adapter.check_schema_exists(target_database, target_schema) %}\n    {% do create_schema(target_database, target_schema) %}\n  {% endif %}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=target_database,\n          schema=target_schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['injected_sql']) %}\n      {% call statement('main') -%}\n          {{ create_table_as(False, target_relation, build_sql) }}\n      {% endcall %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% call statement('main') %}\n          {{ snapshot_merge_sql(\n                target = target_relation,\n                source = staging_table,\n                insert_cols = quoted_source_columns\n             )\n          }}\n      {% endcall %}\n\n  {% endif %}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n{% endmaterialization %}", "root_path": "/Users/mrich/.local/share/virtualenvs/quasar-qaRV2YEO/lib/python3.7/site-packages/dbt/include/global_project", "name": "build_snapshot_staging_table", "unique_id": "macro.dbt.build_snapshot_staging_table", "tags": [], "resource_type": "macro", "depends_on": {"macros": []}}, "macro.dbt.materialization_snapshot_default": {"path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "package_name": "dbt", "raw_sql": "{#\n    Add new columns to the table if applicable\n#}\n{% macro create_columns(relation, columns) %}\n  {{ adapter_macro('create_columns', relation, columns) }}\n{% endmacro %}\n\n{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}\n\n\n{% macro post_snapshot(staging_relation) %}\n  {{ adapter_macro('post_snapshot', staging_relation) }}\n{% endmacro %}\n\n{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}\n\n\n{% macro snapshot_staging_table_inserts(strategy, source_sql, target_relation) -%}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n\n    ),\n\n    source_data as (\n\n        select *,\n            {{ strategy.scd_id }} as dbt_scd_id,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n\n        from snapshot_query\n    ),\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n\n        from source_data\n        left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_unique_key is null\n           or (\n                snapshotted_data.dbt_unique_key is not null\n            and snapshotted_data.dbt_valid_to is null\n            and (\n                {{ strategy.row_changed }}\n            )\n        )\n\n    )\n\n    select * from insertions\n\n{%- endmacro %}\n\n\n{% macro snapshot_staging_table_updates(strategy, source_sql, target_relation) -%}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n\n    ),\n\n    source_data as (\n\n        select\n            *,\n            {{ strategy.scd_id }} as dbt_scd_id,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from\n\n        from snapshot_query\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            snapshotted_data.dbt_scd_id,\n            source_data.dbt_valid_from as dbt_valid_to\n\n        from source_data\n        join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_valid_to is null\n        and (\n            {{ strategy.row_changed }}\n        )\n\n    )\n\n    select * from updates\n\n{%- endmacro %}\n\n\n{% macro build_snapshot_table(strategy, sql) %}\n\n    select *,\n        {{ strategy.scd_id }} as dbt_scd_id,\n        {{ strategy.updated_at }} as dbt_updated_at,\n        {{ strategy.updated_at }} as dbt_valid_from,\n        nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}\n\n\n{% macro get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}\n\n{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set tmp_relation = make_temp_relation(target_relation) %}\n\n    {% set inserts_select = snapshot_staging_table_inserts(strategy, sql, target_relation) %}\n    {% set updates_select = snapshot_staging_table_updates(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation_inserts') %}\n        {{ create_table_as(True, tmp_relation, inserts_select) }}\n    {% endcall %}\n\n    {% call statement('build_snapshot_staging_relation_updates') %}\n        insert into {{ tmp_relation }} (dbt_change_type, dbt_scd_id, dbt_valid_to)\n        select dbt_change_type, dbt_scd_id, dbt_valid_to from (\n            {{ updates_select }}\n        ) dbt_sbq;\n    {% endcall %}\n\n    {% do return(tmp_relation) %}\n{% endmacro %}\n\n\n{% materialization snapshot, default %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_database = config.get('target_database') -%}\n  {%- set target_schema = config.get('target_schema') -%}\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n\n  {% if not adapter.check_schema_exists(target_database, target_schema) %}\n    {% do create_schema(target_database, target_schema) %}\n  {% endif %}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=target_database,\n          schema=target_schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['injected_sql']) %}\n      {% call statement('main') -%}\n          {{ create_table_as(False, target_relation, build_sql) }}\n      {% endcall %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% call statement('main') %}\n          {{ snapshot_merge_sql(\n                target = target_relation,\n                source = staging_table,\n                insert_cols = quoted_source_columns\n             )\n          }}\n      {% endcall %}\n\n  {% endif %}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n{% endmaterialization %}", "root_path": "/Users/mrich/.local/share/virtualenvs/quasar-qaRV2YEO/lib/python3.7/site-packages/dbt/include/global_project", "name": "materialization_snapshot_default", "unique_id": "macro.dbt.materialization_snapshot_default", "tags": [], "resource_type": "macro", "depends_on": {"macros": []}}, "macro.dbt.create_csv_table": {"path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "package_name": "dbt", "raw_sql": "{% macro create_csv_table(model) -%}\n  {{ adapter_macro('create_csv_table', model) }}\n{%- endmacro %}\n\n{% macro reset_csv_table(model, full_refresh, old_relation) -%}\n  {{ adapter_macro('reset_csv_table', model, full_refresh, old_relation) }}\n{%- endmacro %}\n\n{% macro load_csv_rows(model) -%}\n  {{ adapter_macro('load_csv_rows', model) }}\n{%- endmacro %}\n\n{% macro default__create_csv_table(model) %}\n  {%- set agate_table = model['agate_table'] -%}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n\n  {% set sql %}\n    create table {{ this.render(False) }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {{ col_name | string }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}\n\n\n{% macro default__reset_csv_table(model, full_refresh, old_relation) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}\n\n\n{% macro basic_load_csv_rows(model, batch_size) %}\n    {% set agate_table = model['agate_table'] %}\n    {% set cols_sql = \", \".join(agate_table.column_names) %}\n    {% set bindings = [] %}\n\n    {% set statements = [] %}\n\n    {% for chunk in agate_table.rows | batch(batch_size) %}\n        {% set bindings = [] %}\n\n        {% for row in chunk %}\n            {% set _ = bindings.extend(row) %}\n        {% endfor %}\n\n        {% set sql %}\n            insert into {{ this.render(False) }} ({{ cols_sql }}) values\n            {% for row in chunk -%}\n                ({%- for column in agate_table.column_names -%}\n                    %s\n                    {%- if not loop.last%},{%- endif %}\n                {%- endfor -%})\n                {%- if not loop.last%},{%- endif %}\n            {%- endfor %}\n        {% endset %}\n\n        {% set _ = adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n        {% if loop.index0 == 0 %}\n            {% set _ = statements.append(sql) %}\n        {% endif %}\n    {% endfor %}\n\n    {# Return SQL so we can render it out into the compiled files #}\n    {{ return(statements[0]) }}\n{% endmacro %}\n\n\n{% macro default__load_csv_rows(model) %}\n  {{ return(basic_load_csv_rows(model, 10000) )}}\n{% endmacro %}\n\n\n{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (flags.FULL_REFRESH == True) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set csv_table = model[\"agate_table\"] -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation)) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model) %}\n  {% endif %}\n\n  {% set status = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set num_rows = (csv_table.rows | length) %}\n  {% set sql = load_csv_rows(model) %}\n\n  {% call noop_statement('main', status ~ ' ' ~ num_rows) %}\n    {{ create_table_sql }};\n    -- dbt seed --\n    {{ sql }}\n  {% endcall %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n{% endmaterialization %}", "root_path": "/Users/mrich/.local/share/virtualenvs/quasar-qaRV2YEO/lib/python3.7/site-packages/dbt/include/global_project", "name": "create_csv_table", "unique_id": "macro.dbt.create_csv_table", "tags": [], "resource_type": "macro", "depends_on": {"macros": []}}, "macro.dbt.reset_csv_table": {"path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "package_name": "dbt", "raw_sql": "{% macro create_csv_table(model) -%}\n  {{ adapter_macro('create_csv_table', model) }}\n{%- endmacro %}\n\n{% macro reset_csv_table(model, full_refresh, old_relation) -%}\n  {{ adapter_macro('reset_csv_table', model, full_refresh, old_relation) }}\n{%- endmacro %}\n\n{% macro load_csv_rows(model) -%}\n  {{ adapter_macro('load_csv_rows', model) }}\n{%- endmacro %}\n\n{% macro default__create_csv_table(model) %}\n  {%- set agate_table = model['agate_table'] -%}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n\n  {% set sql %}\n    create table {{ this.render(False) }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {{ col_name | string }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}\n\n\n{% macro default__reset_csv_table(model, full_refresh, old_relation) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}\n\n\n{% macro basic_load_csv_rows(model, batch_size) %}\n    {% set agate_table = model['agate_table'] %}\n    {% set cols_sql = \", \".join(agate_table.column_names) %}\n    {% set bindings = [] %}\n\n    {% set statements = [] %}\n\n    {% for chunk in agate_table.rows | batch(batch_size) %}\n        {% set bindings = [] %}\n\n        {% for row in chunk %}\n            {% set _ = bindings.extend(row) %}\n        {% endfor %}\n\n        {% set sql %}\n            insert into {{ this.render(False) }} ({{ cols_sql }}) values\n            {% for row in chunk -%}\n                ({%- for column in agate_table.column_names -%}\n                    %s\n                    {%- if not loop.last%},{%- endif %}\n                {%- endfor -%})\n                {%- if not loop.last%},{%- endif %}\n            {%- endfor %}\n        {% endset %}\n\n        {% set _ = adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n        {% if loop.index0 == 0 %}\n            {% set _ = statements.append(sql) %}\n        {% endif %}\n    {% endfor %}\n\n    {# Return SQL so we can render it out into the compiled files #}\n    {{ return(statements[0]) }}\n{% endmacro %}\n\n\n{% macro default__load_csv_rows(model) %}\n  {{ return(basic_load_csv_rows(model, 10000) )}}\n{% endmacro %}\n\n\n{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (flags.FULL_REFRESH == True) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set csv_table = model[\"agate_table\"] -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation)) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model) %}\n  {% endif %}\n\n  {% set status = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set num_rows = (csv_table.rows | length) %}\n  {% set sql = load_csv_rows(model) %}\n\n  {% call noop_statement('main', status ~ ' ' ~ num_rows) %}\n    {{ create_table_sql }};\n    -- dbt seed --\n    {{ sql }}\n  {% endcall %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n{% endmaterialization %}", "root_path": "/Users/mrich/.local/share/virtualenvs/quasar-qaRV2YEO/lib/python3.7/site-packages/dbt/include/global_project", "name": "reset_csv_table", "unique_id": "macro.dbt.reset_csv_table", "tags": [], "resource_type": "macro", "depends_on": {"macros": []}}, "macro.dbt.load_csv_rows": {"path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "package_name": "dbt", "raw_sql": "{% macro create_csv_table(model) -%}\n  {{ adapter_macro('create_csv_table', model) }}\n{%- endmacro %}\n\n{% macro reset_csv_table(model, full_refresh, old_relation) -%}\n  {{ adapter_macro('reset_csv_table', model, full_refresh, old_relation) }}\n{%- endmacro %}\n\n{% macro load_csv_rows(model) -%}\n  {{ adapter_macro('load_csv_rows', model) }}\n{%- endmacro %}\n\n{% macro default__create_csv_table(model) %}\n  {%- set agate_table = model['agate_table'] -%}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n\n  {% set sql %}\n    create table {{ this.render(False) }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {{ col_name | string }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}\n\n\n{% macro default__reset_csv_table(model, full_refresh, old_relation) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}\n\n\n{% macro basic_load_csv_rows(model, batch_size) %}\n    {% set agate_table = model['agate_table'] %}\n    {% set cols_sql = \", \".join(agate_table.column_names) %}\n    {% set bindings = [] %}\n\n    {% set statements = [] %}\n\n    {% for chunk in agate_table.rows | batch(batch_size) %}\n        {% set bindings = [] %}\n\n        {% for row in chunk %}\n            {% set _ = bindings.extend(row) %}\n        {% endfor %}\n\n        {% set sql %}\n            insert into {{ this.render(False) }} ({{ cols_sql }}) values\n            {% for row in chunk -%}\n                ({%- for column in agate_table.column_names -%}\n                    %s\n                    {%- if not loop.last%},{%- endif %}\n                {%- endfor -%})\n                {%- if not loop.last%},{%- endif %}\n            {%- endfor %}\n        {% endset %}\n\n        {% set _ = adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n        {% if loop.index0 == 0 %}\n            {% set _ = statements.append(sql) %}\n        {% endif %}\n    {% endfor %}\n\n    {# Return SQL so we can render it out into the compiled files #}\n    {{ return(statements[0]) }}\n{% endmacro %}\n\n\n{% macro default__load_csv_rows(model) %}\n  {{ return(basic_load_csv_rows(model, 10000) )}}\n{% endmacro %}\n\n\n{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (flags.FULL_REFRESH == True) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set csv_table = model[\"agate_table\"] -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation)) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model) %}\n  {% endif %}\n\n  {% set status = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set num_rows = (csv_table.rows | length) %}\n  {% set sql = load_csv_rows(model) %}\n\n  {% call noop_statement('main', status ~ ' ' ~ num_rows) %}\n    {{ create_table_sql }};\n    -- dbt seed --\n    {{ sql }}\n  {% endcall %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n{% endmaterialization %}", "root_path": "/Users/mrich/.local/share/virtualenvs/quasar-qaRV2YEO/lib/python3.7/site-packages/dbt/include/global_project", "name": "load_csv_rows", "unique_id": "macro.dbt.load_csv_rows", "tags": [], "resource_type": "macro", "depends_on": {"macros": []}}, "macro.dbt.default__create_csv_table": {"path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "package_name": "dbt", "raw_sql": "{% macro create_csv_table(model) -%}\n  {{ adapter_macro('create_csv_table', model) }}\n{%- endmacro %}\n\n{% macro reset_csv_table(model, full_refresh, old_relation) -%}\n  {{ adapter_macro('reset_csv_table', model, full_refresh, old_relation) }}\n{%- endmacro %}\n\n{% macro load_csv_rows(model) -%}\n  {{ adapter_macro('load_csv_rows', model) }}\n{%- endmacro %}\n\n{% macro default__create_csv_table(model) %}\n  {%- set agate_table = model['agate_table'] -%}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n\n  {% set sql %}\n    create table {{ this.render(False) }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {{ col_name | string }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}\n\n\n{% macro default__reset_csv_table(model, full_refresh, old_relation) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}\n\n\n{% macro basic_load_csv_rows(model, batch_size) %}\n    {% set agate_table = model['agate_table'] %}\n    {% set cols_sql = \", \".join(agate_table.column_names) %}\n    {% set bindings = [] %}\n\n    {% set statements = [] %}\n\n    {% for chunk in agate_table.rows | batch(batch_size) %}\n        {% set bindings = [] %}\n\n        {% for row in chunk %}\n            {% set _ = bindings.extend(row) %}\n        {% endfor %}\n\n        {% set sql %}\n            insert into {{ this.render(False) }} ({{ cols_sql }}) values\n            {% for row in chunk -%}\n                ({%- for column in agate_table.column_names -%}\n                    %s\n                    {%- if not loop.last%},{%- endif %}\n                {%- endfor -%})\n                {%- if not loop.last%},{%- endif %}\n            {%- endfor %}\n        {% endset %}\n\n        {% set _ = adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n        {% if loop.index0 == 0 %}\n            {% set _ = statements.append(sql) %}\n        {% endif %}\n    {% endfor %}\n\n    {# Return SQL so we can render it out into the compiled files #}\n    {{ return(statements[0]) }}\n{% endmacro %}\n\n\n{% macro default__load_csv_rows(model) %}\n  {{ return(basic_load_csv_rows(model, 10000) )}}\n{% endmacro %}\n\n\n{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (flags.FULL_REFRESH == True) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set csv_table = model[\"agate_table\"] -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation)) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model) %}\n  {% endif %}\n\n  {% set status = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set num_rows = (csv_table.rows | length) %}\n  {% set sql = load_csv_rows(model) %}\n\n  {% call noop_statement('main', status ~ ' ' ~ num_rows) %}\n    {{ create_table_sql }};\n    -- dbt seed --\n    {{ sql }}\n  {% endcall %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n{% endmaterialization %}", "root_path": "/Users/mrich/.local/share/virtualenvs/quasar-qaRV2YEO/lib/python3.7/site-packages/dbt/include/global_project", "name": "default__create_csv_table", "unique_id": "macro.dbt.default__create_csv_table", "tags": [], "resource_type": "macro", "depends_on": {"macros": []}}, "macro.dbt.default__reset_csv_table": {"path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "package_name": "dbt", "raw_sql": "{% macro create_csv_table(model) -%}\n  {{ adapter_macro('create_csv_table', model) }}\n{%- endmacro %}\n\n{% macro reset_csv_table(model, full_refresh, old_relation) -%}\n  {{ adapter_macro('reset_csv_table', model, full_refresh, old_relation) }}\n{%- endmacro %}\n\n{% macro load_csv_rows(model) -%}\n  {{ adapter_macro('load_csv_rows', model) }}\n{%- endmacro %}\n\n{% macro default__create_csv_table(model) %}\n  {%- set agate_table = model['agate_table'] -%}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n\n  {% set sql %}\n    create table {{ this.render(False) }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {{ col_name | string }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}\n\n\n{% macro default__reset_csv_table(model, full_refresh, old_relation) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}\n\n\n{% macro basic_load_csv_rows(model, batch_size) %}\n    {% set agate_table = model['agate_table'] %}\n    {% set cols_sql = \", \".join(agate_table.column_names) %}\n    {% set bindings = [] %}\n\n    {% set statements = [] %}\n\n    {% for chunk in agate_table.rows | batch(batch_size) %}\n        {% set bindings = [] %}\n\n        {% for row in chunk %}\n            {% set _ = bindings.extend(row) %}\n        {% endfor %}\n\n        {% set sql %}\n            insert into {{ this.render(False) }} ({{ cols_sql }}) values\n            {% for row in chunk -%}\n                ({%- for column in agate_table.column_names -%}\n                    %s\n                    {%- if not loop.last%},{%- endif %}\n                {%- endfor -%})\n                {%- if not loop.last%},{%- endif %}\n            {%- endfor %}\n        {% endset %}\n\n        {% set _ = adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n        {% if loop.index0 == 0 %}\n            {% set _ = statements.append(sql) %}\n        {% endif %}\n    {% endfor %}\n\n    {# Return SQL so we can render it out into the compiled files #}\n    {{ return(statements[0]) }}\n{% endmacro %}\n\n\n{% macro default__load_csv_rows(model) %}\n  {{ return(basic_load_csv_rows(model, 10000) )}}\n{% endmacro %}\n\n\n{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (flags.FULL_REFRESH == True) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set csv_table = model[\"agate_table\"] -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation)) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model) %}\n  {% endif %}\n\n  {% set status = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set num_rows = (csv_table.rows | length) %}\n  {% set sql = load_csv_rows(model) %}\n\n  {% call noop_statement('main', status ~ ' ' ~ num_rows) %}\n    {{ create_table_sql }};\n    -- dbt seed --\n    {{ sql }}\n  {% endcall %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n{% endmaterialization %}", "root_path": "/Users/mrich/.local/share/virtualenvs/quasar-qaRV2YEO/lib/python3.7/site-packages/dbt/include/global_project", "name": "default__reset_csv_table", "unique_id": "macro.dbt.default__reset_csv_table", "tags": [], "resource_type": "macro", "depends_on": {"macros": []}}, "macro.dbt.basic_load_csv_rows": {"path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "package_name": "dbt", "raw_sql": "{% macro create_csv_table(model) -%}\n  {{ adapter_macro('create_csv_table', model) }}\n{%- endmacro %}\n\n{% macro reset_csv_table(model, full_refresh, old_relation) -%}\n  {{ adapter_macro('reset_csv_table', model, full_refresh, old_relation) }}\n{%- endmacro %}\n\n{% macro load_csv_rows(model) -%}\n  {{ adapter_macro('load_csv_rows', model) }}\n{%- endmacro %}\n\n{% macro default__create_csv_table(model) %}\n  {%- set agate_table = model['agate_table'] -%}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n\n  {% set sql %}\n    create table {{ this.render(False) }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {{ col_name | string }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}\n\n\n{% macro default__reset_csv_table(model, full_refresh, old_relation) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}\n\n\n{% macro basic_load_csv_rows(model, batch_size) %}\n    {% set agate_table = model['agate_table'] %}\n    {% set cols_sql = \", \".join(agate_table.column_names) %}\n    {% set bindings = [] %}\n\n    {% set statements = [] %}\n\n    {% for chunk in agate_table.rows | batch(batch_size) %}\n        {% set bindings = [] %}\n\n        {% for row in chunk %}\n            {% set _ = bindings.extend(row) %}\n        {% endfor %}\n\n        {% set sql %}\n            insert into {{ this.render(False) }} ({{ cols_sql }}) values\n            {% for row in chunk -%}\n                ({%- for column in agate_table.column_names -%}\n                    %s\n                    {%- if not loop.last%},{%- endif %}\n                {%- endfor -%})\n                {%- if not loop.last%},{%- endif %}\n            {%- endfor %}\n        {% endset %}\n\n        {% set _ = adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n        {% if loop.index0 == 0 %}\n            {% set _ = statements.append(sql) %}\n        {% endif %}\n    {% endfor %}\n\n    {# Return SQL so we can render it out into the compiled files #}\n    {{ return(statements[0]) }}\n{% endmacro %}\n\n\n{% macro default__load_csv_rows(model) %}\n  {{ return(basic_load_csv_rows(model, 10000) )}}\n{% endmacro %}\n\n\n{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (flags.FULL_REFRESH == True) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set csv_table = model[\"agate_table\"] -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation)) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model) %}\n  {% endif %}\n\n  {% set status = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set num_rows = (csv_table.rows | length) %}\n  {% set sql = load_csv_rows(model) %}\n\n  {% call noop_statement('main', status ~ ' ' ~ num_rows) %}\n    {{ create_table_sql }};\n    -- dbt seed --\n    {{ sql }}\n  {% endcall %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n{% endmaterialization %}", "root_path": "/Users/mrich/.local/share/virtualenvs/quasar-qaRV2YEO/lib/python3.7/site-packages/dbt/include/global_project", "name": "basic_load_csv_rows", "unique_id": "macro.dbt.basic_load_csv_rows", "tags": [], "resource_type": "macro", "depends_on": {"macros": []}}, "macro.dbt.default__load_csv_rows": {"path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "package_name": "dbt", "raw_sql": "{% macro create_csv_table(model) -%}\n  {{ adapter_macro('create_csv_table', model) }}\n{%- endmacro %}\n\n{% macro reset_csv_table(model, full_refresh, old_relation) -%}\n  {{ adapter_macro('reset_csv_table', model, full_refresh, old_relation) }}\n{%- endmacro %}\n\n{% macro load_csv_rows(model) -%}\n  {{ adapter_macro('load_csv_rows', model) }}\n{%- endmacro %}\n\n{% macro default__create_csv_table(model) %}\n  {%- set agate_table = model['agate_table'] -%}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n\n  {% set sql %}\n    create table {{ this.render(False) }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {{ col_name | string }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}\n\n\n{% macro default__reset_csv_table(model, full_refresh, old_relation) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}\n\n\n{% macro basic_load_csv_rows(model, batch_size) %}\n    {% set agate_table = model['agate_table'] %}\n    {% set cols_sql = \", \".join(agate_table.column_names) %}\n    {% set bindings = [] %}\n\n    {% set statements = [] %}\n\n    {% for chunk in agate_table.rows | batch(batch_size) %}\n        {% set bindings = [] %}\n\n        {% for row in chunk %}\n            {% set _ = bindings.extend(row) %}\n        {% endfor %}\n\n        {% set sql %}\n            insert into {{ this.render(False) }} ({{ cols_sql }}) values\n            {% for row in chunk -%}\n                ({%- for column in agate_table.column_names -%}\n                    %s\n                    {%- if not loop.last%},{%- endif %}\n                {%- endfor -%})\n                {%- if not loop.last%},{%- endif %}\n            {%- endfor %}\n        {% endset %}\n\n        {% set _ = adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n        {% if loop.index0 == 0 %}\n            {% set _ = statements.append(sql) %}\n        {% endif %}\n    {% endfor %}\n\n    {# Return SQL so we can render it out into the compiled files #}\n    {{ return(statements[0]) }}\n{% endmacro %}\n\n\n{% macro default__load_csv_rows(model) %}\n  {{ return(basic_load_csv_rows(model, 10000) )}}\n{% endmacro %}\n\n\n{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (flags.FULL_REFRESH == True) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set csv_table = model[\"agate_table\"] -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation)) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model) %}\n  {% endif %}\n\n  {% set status = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set num_rows = (csv_table.rows | length) %}\n  {% set sql = load_csv_rows(model) %}\n\n  {% call noop_statement('main', status ~ ' ' ~ num_rows) %}\n    {{ create_table_sql }};\n    -- dbt seed --\n    {{ sql }}\n  {% endcall %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n{% endmaterialization %}", "root_path": "/Users/mrich/.local/share/virtualenvs/quasar-qaRV2YEO/lib/python3.7/site-packages/dbt/include/global_project", "name": "default__load_csv_rows", "unique_id": "macro.dbt.default__load_csv_rows", "tags": [], "resource_type": "macro", "depends_on": {"macros": []}}, "macro.dbt.materialization_seed_default": {"path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "package_name": "dbt", "raw_sql": "{% macro create_csv_table(model) -%}\n  {{ adapter_macro('create_csv_table', model) }}\n{%- endmacro %}\n\n{% macro reset_csv_table(model, full_refresh, old_relation) -%}\n  {{ adapter_macro('reset_csv_table', model, full_refresh, old_relation) }}\n{%- endmacro %}\n\n{% macro load_csv_rows(model) -%}\n  {{ adapter_macro('load_csv_rows', model) }}\n{%- endmacro %}\n\n{% macro default__create_csv_table(model) %}\n  {%- set agate_table = model['agate_table'] -%}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n\n  {% set sql %}\n    create table {{ this.render(False) }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {{ col_name | string }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}\n\n\n{% macro default__reset_csv_table(model, full_refresh, old_relation) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}\n\n\n{% macro basic_load_csv_rows(model, batch_size) %}\n    {% set agate_table = model['agate_table'] %}\n    {% set cols_sql = \", \".join(agate_table.column_names) %}\n    {% set bindings = [] %}\n\n    {% set statements = [] %}\n\n    {% for chunk in agate_table.rows | batch(batch_size) %}\n        {% set bindings = [] %}\n\n        {% for row in chunk %}\n            {% set _ = bindings.extend(row) %}\n        {% endfor %}\n\n        {% set sql %}\n            insert into {{ this.render(False) }} ({{ cols_sql }}) values\n            {% for row in chunk -%}\n                ({%- for column in agate_table.column_names -%}\n                    %s\n                    {%- if not loop.last%},{%- endif %}\n                {%- endfor -%})\n                {%- if not loop.last%},{%- endif %}\n            {%- endfor %}\n        {% endset %}\n\n        {% set _ = adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n        {% if loop.index0 == 0 %}\n            {% set _ = statements.append(sql) %}\n        {% endif %}\n    {% endfor %}\n\n    {# Return SQL so we can render it out into the compiled files #}\n    {{ return(statements[0]) }}\n{% endmacro %}\n\n\n{% macro default__load_csv_rows(model) %}\n  {{ return(basic_load_csv_rows(model, 10000) )}}\n{% endmacro %}\n\n\n{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (flags.FULL_REFRESH == True) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set csv_table = model[\"agate_table\"] -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation)) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model) %}\n  {% endif %}\n\n  {% set status = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set num_rows = (csv_table.rows | length) %}\n  {% set sql = load_csv_rows(model) %}\n\n  {% call noop_statement('main', status ~ ' ' ~ num_rows) %}\n    {{ create_table_sql }};\n    -- dbt seed --\n    {{ sql }}\n  {% endcall %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n{% endmaterialization %}", "root_path": "/Users/mrich/.local/share/virtualenvs/quasar-qaRV2YEO/lib/python3.7/site-packages/dbt/include/global_project", "name": "materialization_seed_default", "unique_id": "macro.dbt.materialization_seed_default", "tags": [], "resource_type": "macro", "depends_on": {"macros": []}}, "macro.dbt.dbt__incremental_delete": {"path": "macros/materializations/incremental/incremental.sql", "original_file_path": "macros/materializations/incremental/incremental.sql", "package_name": "dbt", "raw_sql": "{% macro dbt__incremental_delete(target_relation, tmp_relation) -%}\n\n  {%- set unique_key = config.require('unique_key') -%}\n\n  delete\n  from {{ target_relation }}\n  where ({{ unique_key }}) in (\n    select ({{ unique_key }})\n    from {{ tmp_relation.include(schema=False, database=False) }}\n  );\n\n{%- endmacro %}\n\n{% materialization incremental, default -%}\n  {%- set unique_key = config.get('unique_key') -%}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier, schema=schema, database=database,  type='table') -%}\n  {%- set tmp_relation = make_temp_relation(target_relation) %}\n\n  {%- set full_refresh_mode = (flags.FULL_REFRESH == True) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_not_as_table = (old_relation is not none and not old_relation.is_table) -%}\n\n  {%- set should_drop = (full_refresh_mode or exists_not_as_table) -%}\n\n  -- setup\n  {% if old_relation is none -%}\n    -- noop\n  {%- elif should_drop -%}\n    {{ adapter.drop_relation(old_relation) }}\n    {%- set old_relation = none -%}\n  {%- endif %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% if full_refresh_mode or old_relation is none -%}\n    {%- call statement('main') -%}\n      {{ create_table_as(False, target_relation, sql) }}\n    {%- endcall -%}\n  {%- else -%}\n     {%- call statement() -%}\n\n       {{ dbt.create_table_as(True, tmp_relation, sql) }}\n\n     {%- endcall -%}\n\n     {{ adapter.expand_target_column_types(from_relation=tmp_relation,\n                                           to_relation=target_relation) }}\n\n     {%- call statement('main') -%}\n       {% set dest_columns = adapter.get_columns_in_relation(target_relation) %}\n       {% set dest_cols_csv = dest_columns | map(attribute='quoted') | join(', ') %}\n\n       {% if unique_key is not none -%}\n\n         {{ dbt__incremental_delete(target_relation, tmp_relation) }}\n\n       {%- endif %}\n\n       insert into {{ target_relation }} ({{ dest_cols_csv }})\n       (\n         select {{ dest_cols_csv }}\n         from {{ tmp_relation }}\n       );\n     {% endcall %}\n  {%- endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n{%- endmaterialization %}", "root_path": "/Users/mrich/.local/share/virtualenvs/quasar-qaRV2YEO/lib/python3.7/site-packages/dbt/include/global_project", "name": "dbt__incremental_delete", "unique_id": "macro.dbt.dbt__incremental_delete", "tags": [], "resource_type": "macro", "depends_on": {"macros": []}}, "macro.dbt.materialization_incremental_default": {"path": "macros/materializations/incremental/incremental.sql", "original_file_path": "macros/materializations/incremental/incremental.sql", "package_name": "dbt", "raw_sql": "{% macro dbt__incremental_delete(target_relation, tmp_relation) -%}\n\n  {%- set unique_key = config.require('unique_key') -%}\n\n  delete\n  from {{ target_relation }}\n  where ({{ unique_key }}) in (\n    select ({{ unique_key }})\n    from {{ tmp_relation.include(schema=False, database=False) }}\n  );\n\n{%- endmacro %}\n\n{% materialization incremental, default -%}\n  {%- set unique_key = config.get('unique_key') -%}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier, schema=schema, database=database,  type='table') -%}\n  {%- set tmp_relation = make_temp_relation(target_relation) %}\n\n  {%- set full_refresh_mode = (flags.FULL_REFRESH == True) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_not_as_table = (old_relation is not none and not old_relation.is_table) -%}\n\n  {%- set should_drop = (full_refresh_mode or exists_not_as_table) -%}\n\n  -- setup\n  {% if old_relation is none -%}\n    -- noop\n  {%- elif should_drop -%}\n    {{ adapter.drop_relation(old_relation) }}\n    {%- set old_relation = none -%}\n  {%- endif %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% if full_refresh_mode or old_relation is none -%}\n    {%- call statement('main') -%}\n      {{ create_table_as(False, target_relation, sql) }}\n    {%- endcall -%}\n  {%- else -%}\n     {%- call statement() -%}\n\n       {{ dbt.create_table_as(True, tmp_relation, sql) }}\n\n     {%- endcall -%}\n\n     {{ adapter.expand_target_column_types(from_relation=tmp_relation,\n                                           to_relation=target_relation) }}\n\n     {%- call statement('main') -%}\n       {% set dest_columns = adapter.get_columns_in_relation(target_relation) %}\n       {% set dest_cols_csv = dest_columns | map(attribute='quoted') | join(', ') %}\n\n       {% if unique_key is not none -%}\n\n         {{ dbt__incremental_delete(target_relation, tmp_relation) }}\n\n       {%- endif %}\n\n       insert into {{ target_relation }} ({{ dest_cols_csv }})\n       (\n         select {{ dest_cols_csv }}\n         from {{ tmp_relation }}\n       );\n     {% endcall %}\n  {%- endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n{%- endmaterialization %}", "root_path": "/Users/mrich/.local/share/virtualenvs/quasar-qaRV2YEO/lib/python3.7/site-packages/dbt/include/global_project", "name": "materialization_incremental_default", "unique_id": "macro.dbt.materialization_incremental_default", "tags": [], "resource_type": "macro", "depends_on": {"macros": []}}, "macro.dbt.get_merge_sql": {"path": "macros/materializations/common/merge.sql", "original_file_path": "macros/materializations/common/merge.sql", "package_name": "dbt", "raw_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns) -%}\n  {{ adapter_macro('get_merge_sql', target, source, unique_key, dest_columns) }}\n{%- endmacro %}\n\n{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n  {{ adapter_macro('get_delete_insert_merge_sql', target, source, unique_key, dest_columns) }}\n{%- endmacro %}\n\n\n{% macro common_get_merge_sql(target, source, unique_key, dest_columns) -%}\n    {%- set dest_cols_csv = dest_columns | map(attribute=\"name\") | join(', ') -%}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n\n    {% if unique_key %}\n        on DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n    {% else %}\n        on FALSE\n    {% endif %}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column in dest_columns -%}\n            {{ column.name }} = DBT_INTERNAL_SOURCE.{{ column.name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{%- endmacro %}\n\n{% macro default__get_merge_sql(target, source, unique_key, dest_columns) -%}\n    {% set typename = adapter.type() %}\n\n    {{ exceptions.raise_compiler_error(\n        'get_merge_sql is not implemented for {}'.format(typename)\n       )\n    }}\n\n{% endmacro %}\n\n\n{% macro common_get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n    {%- set dest_cols_csv = dest_columns | map(attribute=\"name\") | join(', ') -%}\n\n    {% if unique_key is not none %}\n    delete from {{ target }}\n    where ({{ unique_key }}) in (\n        select ({{ unique_key }})\n        from {{ source }}\n    );\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    );\n\n{%- endmacro %}\n\n{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n    {{ common_get_delete_insert_merge_sql(target, source, unique_key, dest_columns) }}\n{% endmacro %}", "root_path": "/Users/mrich/.local/share/virtualenvs/quasar-qaRV2YEO/lib/python3.7/site-packages/dbt/include/global_project", "name": "get_merge_sql", "unique_id": "macro.dbt.get_merge_sql", "tags": [], "resource_type": "macro", "depends_on": {"macros": []}}, "macro.dbt.get_delete_insert_merge_sql": {"path": "macros/materializations/common/merge.sql", "original_file_path": "macros/materializations/common/merge.sql", "package_name": "dbt", "raw_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns) -%}\n  {{ adapter_macro('get_merge_sql', target, source, unique_key, dest_columns) }}\n{%- endmacro %}\n\n{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n  {{ adapter_macro('get_delete_insert_merge_sql', target, source, unique_key, dest_columns) }}\n{%- endmacro %}\n\n\n{% macro common_get_merge_sql(target, source, unique_key, dest_columns) -%}\n    {%- set dest_cols_csv = dest_columns | map(attribute=\"name\") | join(', ') -%}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n\n    {% if unique_key %}\n        on DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n    {% else %}\n        on FALSE\n    {% endif %}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column in dest_columns -%}\n            {{ column.name }} = DBT_INTERNAL_SOURCE.{{ column.name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{%- endmacro %}\n\n{% macro default__get_merge_sql(target, source, unique_key, dest_columns) -%}\n    {% set typename = adapter.type() %}\n\n    {{ exceptions.raise_compiler_error(\n        'get_merge_sql is not implemented for {}'.format(typename)\n       )\n    }}\n\n{% endmacro %}\n\n\n{% macro common_get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n    {%- set dest_cols_csv = dest_columns | map(attribute=\"name\") | join(', ') -%}\n\n    {% if unique_key is not none %}\n    delete from {{ target }}\n    where ({{ unique_key }}) in (\n        select ({{ unique_key }})\n        from {{ source }}\n    );\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    );\n\n{%- endmacro %}\n\n{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n    {{ common_get_delete_insert_merge_sql(target, source, unique_key, dest_columns) }}\n{% endmacro %}", "root_path": "/Users/mrich/.local/share/virtualenvs/quasar-qaRV2YEO/lib/python3.7/site-packages/dbt/include/global_project", "name": "get_delete_insert_merge_sql", "unique_id": "macro.dbt.get_delete_insert_merge_sql", "tags": [], "resource_type": "macro", "depends_on": {"macros": []}}, "macro.dbt.common_get_merge_sql": {"path": "macros/materializations/common/merge.sql", "original_file_path": "macros/materializations/common/merge.sql", "package_name": "dbt", "raw_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns) -%}\n  {{ adapter_macro('get_merge_sql', target, source, unique_key, dest_columns) }}\n{%- endmacro %}\n\n{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n  {{ adapter_macro('get_delete_insert_merge_sql', target, source, unique_key, dest_columns) }}\n{%- endmacro %}\n\n\n{% macro common_get_merge_sql(target, source, unique_key, dest_columns) -%}\n    {%- set dest_cols_csv = dest_columns | map(attribute=\"name\") | join(', ') -%}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n\n    {% if unique_key %}\n        on DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n    {% else %}\n        on FALSE\n    {% endif %}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column in dest_columns -%}\n            {{ column.name }} = DBT_INTERNAL_SOURCE.{{ column.name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{%- endmacro %}\n\n{% macro default__get_merge_sql(target, source, unique_key, dest_columns) -%}\n    {% set typename = adapter.type() %}\n\n    {{ exceptions.raise_compiler_error(\n        'get_merge_sql is not implemented for {}'.format(typename)\n       )\n    }}\n\n{% endmacro %}\n\n\n{% macro common_get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n    {%- set dest_cols_csv = dest_columns | map(attribute=\"name\") | join(', ') -%}\n\n    {% if unique_key is not none %}\n    delete from {{ target }}\n    where ({{ unique_key }}) in (\n        select ({{ unique_key }})\n        from {{ source }}\n    );\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    );\n\n{%- endmacro %}\n\n{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n    {{ common_get_delete_insert_merge_sql(target, source, unique_key, dest_columns) }}\n{% endmacro %}", "root_path": "/Users/mrich/.local/share/virtualenvs/quasar-qaRV2YEO/lib/python3.7/site-packages/dbt/include/global_project", "name": "common_get_merge_sql", "unique_id": "macro.dbt.common_get_merge_sql", "tags": [], "resource_type": "macro", "depends_on": {"macros": []}}, "macro.dbt.default__get_merge_sql": {"path": "macros/materializations/common/merge.sql", "original_file_path": "macros/materializations/common/merge.sql", "package_name": "dbt", "raw_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns) -%}\n  {{ adapter_macro('get_merge_sql', target, source, unique_key, dest_columns) }}\n{%- endmacro %}\n\n{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n  {{ adapter_macro('get_delete_insert_merge_sql', target, source, unique_key, dest_columns) }}\n{%- endmacro %}\n\n\n{% macro common_get_merge_sql(target, source, unique_key, dest_columns) -%}\n    {%- set dest_cols_csv = dest_columns | map(attribute=\"name\") | join(', ') -%}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n\n    {% if unique_key %}\n        on DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n    {% else %}\n        on FALSE\n    {% endif %}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column in dest_columns -%}\n            {{ column.name }} = DBT_INTERNAL_SOURCE.{{ column.name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{%- endmacro %}\n\n{% macro default__get_merge_sql(target, source, unique_key, dest_columns) -%}\n    {% set typename = adapter.type() %}\n\n    {{ exceptions.raise_compiler_error(\n        'get_merge_sql is not implemented for {}'.format(typename)\n       )\n    }}\n\n{% endmacro %}\n\n\n{% macro common_get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n    {%- set dest_cols_csv = dest_columns | map(attribute=\"name\") | join(', ') -%}\n\n    {% if unique_key is not none %}\n    delete from {{ target }}\n    where ({{ unique_key }}) in (\n        select ({{ unique_key }})\n        from {{ source }}\n    );\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    );\n\n{%- endmacro %}\n\n{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n    {{ common_get_delete_insert_merge_sql(target, source, unique_key, dest_columns) }}\n{% endmacro %}", "root_path": "/Users/mrich/.local/share/virtualenvs/quasar-qaRV2YEO/lib/python3.7/site-packages/dbt/include/global_project", "name": "default__get_merge_sql", "unique_id": "macro.dbt.default__get_merge_sql", "tags": [], "resource_type": "macro", "depends_on": {"macros": []}}, "macro.dbt.common_get_delete_insert_merge_sql": {"path": "macros/materializations/common/merge.sql", "original_file_path": "macros/materializations/common/merge.sql", "package_name": "dbt", "raw_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns) -%}\n  {{ adapter_macro('get_merge_sql', target, source, unique_key, dest_columns) }}\n{%- endmacro %}\n\n{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n  {{ adapter_macro('get_delete_insert_merge_sql', target, source, unique_key, dest_columns) }}\n{%- endmacro %}\n\n\n{% macro common_get_merge_sql(target, source, unique_key, dest_columns) -%}\n    {%- set dest_cols_csv = dest_columns | map(attribute=\"name\") | join(', ') -%}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n\n    {% if unique_key %}\n        on DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n    {% else %}\n        on FALSE\n    {% endif %}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column in dest_columns -%}\n            {{ column.name }} = DBT_INTERNAL_SOURCE.{{ column.name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{%- endmacro %}\n\n{% macro default__get_merge_sql(target, source, unique_key, dest_columns) -%}\n    {% set typename = adapter.type() %}\n\n    {{ exceptions.raise_compiler_error(\n        'get_merge_sql is not implemented for {}'.format(typename)\n       )\n    }}\n\n{% endmacro %}\n\n\n{% macro common_get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n    {%- set dest_cols_csv = dest_columns | map(attribute=\"name\") | join(', ') -%}\n\n    {% if unique_key is not none %}\n    delete from {{ target }}\n    where ({{ unique_key }}) in (\n        select ({{ unique_key }})\n        from {{ source }}\n    );\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    );\n\n{%- endmacro %}\n\n{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n    {{ common_get_delete_insert_merge_sql(target, source, unique_key, dest_columns) }}\n{% endmacro %}", "root_path": "/Users/mrich/.local/share/virtualenvs/quasar-qaRV2YEO/lib/python3.7/site-packages/dbt/include/global_project", "name": "common_get_delete_insert_merge_sql", "unique_id": "macro.dbt.common_get_delete_insert_merge_sql", "tags": [], "resource_type": "macro", "depends_on": {"macros": []}}, "macro.dbt.default__get_delete_insert_merge_sql": {"path": "macros/materializations/common/merge.sql", "original_file_path": "macros/materializations/common/merge.sql", "package_name": "dbt", "raw_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns) -%}\n  {{ adapter_macro('get_merge_sql', target, source, unique_key, dest_columns) }}\n{%- endmacro %}\n\n{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n  {{ adapter_macro('get_delete_insert_merge_sql', target, source, unique_key, dest_columns) }}\n{%- endmacro %}\n\n\n{% macro common_get_merge_sql(target, source, unique_key, dest_columns) -%}\n    {%- set dest_cols_csv = dest_columns | map(attribute=\"name\") | join(', ') -%}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n\n    {% if unique_key %}\n        on DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n    {% else %}\n        on FALSE\n    {% endif %}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column in dest_columns -%}\n            {{ column.name }} = DBT_INTERNAL_SOURCE.{{ column.name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{%- endmacro %}\n\n{% macro default__get_merge_sql(target, source, unique_key, dest_columns) -%}\n    {% set typename = adapter.type() %}\n\n    {{ exceptions.raise_compiler_error(\n        'get_merge_sql is not implemented for {}'.format(typename)\n       )\n    }}\n\n{% endmacro %}\n\n\n{% macro common_get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n    {%- set dest_cols_csv = dest_columns | map(attribute=\"name\") | join(', ') -%}\n\n    {% if unique_key is not none %}\n    delete from {{ target }}\n    where ({{ unique_key }}) in (\n        select ({{ unique_key }})\n        from {{ source }}\n    );\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    );\n\n{%- endmacro %}\n\n{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n    {{ common_get_delete_insert_merge_sql(target, source, unique_key, dest_columns) }}\n{% endmacro %}", "root_path": "/Users/mrich/.local/share/virtualenvs/quasar-qaRV2YEO/lib/python3.7/site-packages/dbt/include/global_project", "name": "default__get_delete_insert_merge_sql", "unique_id": "macro.dbt.default__get_delete_insert_merge_sql", "tags": [], "resource_type": "macro", "depends_on": {"macros": []}}, "macro.dbt.materialization_table_default": {"path": "macros/materializations/table/table.sql", "original_file_path": "macros/materializations/table/table.sql", "package_name": "dbt", "raw_sql": "{% materialization table, default %}\n  {%- set identifier = model['alias'] -%}\n  {%- set tmp_identifier = model['name'] + '__dbt_tmp' -%}\n  {%- set backup_identifier = model['name'] + '__dbt_backup' -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier,\n                                                schema=schema,\n                                                database=database,\n                                                type='table') -%}\n  {%- set intermediate_relation = api.Relation.create(identifier=tmp_identifier,\n                                                      schema=schema,\n                                                      database=database,\n                                                      type='table') -%}\n\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if old_relation is none else old_relation.type -%}\n  {%- set backup_relation = api.Relation.create(identifier=backup_identifier,\n                                                schema=schema,\n                                                database=database,\n                                                type=backup_relation_type) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n\n  -- drop the temp relations if they exists for some reason\n  {{ adapter.drop_relation(intermediate_relation) }}\n  {{ adapter.drop_relation(backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ create_table_as(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if old_relation is not none %}\n      {{ adapter.rename_relation(target_relation, backup_relation) }}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n{% endmaterialization %}", "root_path": "/Users/mrich/.local/share/virtualenvs/quasar-qaRV2YEO/lib/python3.7/site-packages/dbt/include/global_project", "name": "materialization_table_default", "unique_id": "macro.dbt.materialization_table_default", "tags": [], "resource_type": "macro", "depends_on": {"macros": []}}, "macro.dbt.materialization_view_default": {"path": "macros/materializations/view/view.sql", "original_file_path": "macros/materializations/view/view.sql", "package_name": "dbt", "raw_sql": "{%- materialization view, default -%}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set tmp_identifier = model['name'] + '__dbt_tmp' -%}\n  {%- set backup_identifier = model['name'] + '__dbt_backup' -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier, schema=schema, database=database,\n                                                type='view') -%}\n  {%- set intermediate_relation = api.Relation.create(identifier=tmp_identifier,\n                                                      schema=schema, database=database, type='view') -%}\n\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"old_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the old_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the old_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if old_relation is none else old_relation.type -%}\n  {%- set backup_relation = api.Relation.create(identifier=backup_identifier,\n                                                schema=schema, database=database,\n                                                type=backup_relation_type) -%}\n\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exists for some reason\n  {{ adapter.drop_relation(intermediate_relation) }}\n  {{ adapter.drop_relation(backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ create_view_as(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if old_relation is not none %}\n    {{ adapter.rename_relation(target_relation, backup_relation) }}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n{%- endmaterialization -%}", "root_path": "/Users/mrich/.local/share/virtualenvs/quasar-qaRV2YEO/lib/python3.7/site-packages/dbt/include/global_project", "name": "materialization_view_default", "unique_id": "macro.dbt.materialization_view_default", "tags": [], "resource_type": "macro", "depends_on": {"macros": []}}, "macro.dbt.handle_existing_table": {"path": "macros/materializations/view/create_or_replace_view.sql", "original_file_path": "macros/materializations/view/create_or_replace_view.sql", "package_name": "dbt", "raw_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter_macro(\"dbt.handle_existing_table\", full_refresh, old_relation) }}\n{% endmacro %}\n\n{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}\n\n{# /*\n       Core materialization implementation. BigQuery and Snowflake are similar\n       because both can use `create or replace view` where the resulting view schema\n       is not necessarily the same as the existing view. On Redshift, this would\n       result in: ERROR:  cannot change number of columns in view\n\n       This implementation is superior to the create_temp, swap_with_existing, drop_old\n       paradigm because transactions don't run DDL queries atomically on Snowflake. By using\n       `create or replace view`, the materialization becomes atomic in nature.\n    */\n#}\n\n{% macro create_or_replace_view(run_outside_transaction_hooks=True) %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n\n  {% if run_outside_transaction_hooks %}\n      -- no transactions on BigQuery\n      {{ run_hooks(pre_hooks, inside_transaction=False) }}\n  {% endif %}\n\n  -- `BEGIN` happens here on Snowflake\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(flags.FULL_REFRESH, old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ create_view_as(target_relation, sql) }}\n  {%- endcall %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if run_outside_transaction_hooks %}\n      -- No transactions on BigQuery\n      {{ run_hooks(post_hooks, inside_transaction=False) }}\n  {% endif %}\n{% endmacro %}", "root_path": "/Users/mrich/.local/share/virtualenvs/quasar-qaRV2YEO/lib/python3.7/site-packages/dbt/include/global_project", "name": "handle_existing_table", "unique_id": "macro.dbt.handle_existing_table", "tags": [], "resource_type": "macro", "depends_on": {"macros": []}}, "macro.dbt.default__handle_existing_table": {"path": "macros/materializations/view/create_or_replace_view.sql", "original_file_path": "macros/materializations/view/create_or_replace_view.sql", "package_name": "dbt", "raw_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter_macro(\"dbt.handle_existing_table\", full_refresh, old_relation) }}\n{% endmacro %}\n\n{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}\n\n{# /*\n       Core materialization implementation. BigQuery and Snowflake are similar\n       because both can use `create or replace view` where the resulting view schema\n       is not necessarily the same as the existing view. On Redshift, this would\n       result in: ERROR:  cannot change number of columns in view\n\n       This implementation is superior to the create_temp, swap_with_existing, drop_old\n       paradigm because transactions don't run DDL queries atomically on Snowflake. By using\n       `create or replace view`, the materialization becomes atomic in nature.\n    */\n#}\n\n{% macro create_or_replace_view(run_outside_transaction_hooks=True) %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n\n  {% if run_outside_transaction_hooks %}\n      -- no transactions on BigQuery\n      {{ run_hooks(pre_hooks, inside_transaction=False) }}\n  {% endif %}\n\n  -- `BEGIN` happens here on Snowflake\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(flags.FULL_REFRESH, old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ create_view_as(target_relation, sql) }}\n  {%- endcall %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if run_outside_transaction_hooks %}\n      -- No transactions on BigQuery\n      {{ run_hooks(post_hooks, inside_transaction=False) }}\n  {% endif %}\n{% endmacro %}", "root_path": "/Users/mrich/.local/share/virtualenvs/quasar-qaRV2YEO/lib/python3.7/site-packages/dbt/include/global_project", "name": "default__handle_existing_table", "unique_id": "macro.dbt.default__handle_existing_table", "tags": [], "resource_type": "macro", "depends_on": {"macros": []}}, "macro.dbt.create_or_replace_view": {"path": "macros/materializations/view/create_or_replace_view.sql", "original_file_path": "macros/materializations/view/create_or_replace_view.sql", "package_name": "dbt", "raw_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter_macro(\"dbt.handle_existing_table\", full_refresh, old_relation) }}\n{% endmacro %}\n\n{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}\n\n{# /*\n       Core materialization implementation. BigQuery and Snowflake are similar\n       because both can use `create or replace view` where the resulting view schema\n       is not necessarily the same as the existing view. On Redshift, this would\n       result in: ERROR:  cannot change number of columns in view\n\n       This implementation is superior to the create_temp, swap_with_existing, drop_old\n       paradigm because transactions don't run DDL queries atomically on Snowflake. By using\n       `create or replace view`, the materialization becomes atomic in nature.\n    */\n#}\n\n{% macro create_or_replace_view(run_outside_transaction_hooks=True) %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n\n  {% if run_outside_transaction_hooks %}\n      -- no transactions on BigQuery\n      {{ run_hooks(pre_hooks, inside_transaction=False) }}\n  {% endif %}\n\n  -- `BEGIN` happens here on Snowflake\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(flags.FULL_REFRESH, old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ create_view_as(target_relation, sql) }}\n  {%- endcall %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if run_outside_transaction_hooks %}\n      -- No transactions on BigQuery\n      {{ run_hooks(post_hooks, inside_transaction=False) }}\n  {% endif %}\n{% endmacro %}", "root_path": "/Users/mrich/.local/share/virtualenvs/quasar-qaRV2YEO/lib/python3.7/site-packages/dbt/include/global_project", "name": "create_or_replace_view", "unique_id": "macro.dbt.create_or_replace_view", "tags": [], "resource_type": "macro", "depends_on": {"macros": []}}, "macro.dbt.generate_alias_name": {"path": "macros/etc/get_custom_alias.sql", "original_file_path": "macros/etc/get_custom_alias.sql", "package_name": "dbt", "raw_sql": "{#\n    Renders a alias name given a custom alias name. If the custom\n    alias name is none, then the resulting alias is just the filename of the\n    model. If an alias override is specified, then that is used.\n\n    This macro can be overriden in projects to define different semantics\n    for rendering a alias name.\n\n    Arguments:\n    custom_alias_name: The custom alias name specified for a model, or none\n    node: The available node that an alias is being generated for, or none\n\n#}\n{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name is none -%}\n\n        {{ node.name }}\n\n    {%- else -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "root_path": "/Users/mrich/.local/share/virtualenvs/quasar-qaRV2YEO/lib/python3.7/site-packages/dbt/include/global_project", "name": "generate_alias_name", "unique_id": "macro.dbt.generate_alias_name", "tags": [], "resource_type": "macro", "depends_on": {"macros": []}}, "macro.dbt.run_query": {"path": "macros/etc/query.sql", "original_file_path": "macros/etc/query.sql", "package_name": "dbt", "raw_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}", "root_path": "/Users/mrich/.local/share/virtualenvs/quasar-qaRV2YEO/lib/python3.7/site-packages/dbt/include/global_project", "name": "run_query", "unique_id": "macro.dbt.run_query", "tags": [], "resource_type": "macro", "depends_on": {"macros": []}}, "macro.dbt.is_incremental": {"path": "macros/etc/is_incremental.sql", "original_file_path": "macros/etc/is_incremental.sql", "package_name": "dbt", "raw_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not flags.FULL_REFRESH) }}\n    {% endif %}\n{% endmacro %}", "root_path": "/Users/mrich/.local/share/virtualenvs/quasar-qaRV2YEO/lib/python3.7/site-packages/dbt/include/global_project", "name": "is_incremental", "unique_id": "macro.dbt.is_incremental", "tags": [], "resource_type": "macro", "depends_on": {"macros": []}}, "macro.dbt.table_options": {"path": "macros/etc/get_relation_comment.sql", "original_file_path": "macros/etc/get_relation_comment.sql", "package_name": "dbt", "raw_sql": "{% macro table_options() %}\n  {%- set raw_persist_docs = config.get('persist_docs', {}) -%}\n\n{%- endmacro -%}\n\n{% macro get_relation_comment(persist_docs, model) %}\n\n  {%- if persist_docs is not mapping -%}\n    {{ exceptions.raise_compiler_error(\"Invalid value provided for 'persist_docs'. Expected dict but got value: \" ~ raw_persist_docs) }}\n  {% endif %}\n\n  {% if persist_docs.get('relation', false) %}\n    {{ return((model.description | tojson)[1:-1]) }}\n  {%- else -%}\n    {{ return(none) }}\n  {% endif %}\n\n{% endmacro %}", "root_path": "/Users/mrich/.local/share/virtualenvs/quasar-qaRV2YEO/lib/python3.7/site-packages/dbt/include/global_project", "name": "table_options", "unique_id": "macro.dbt.table_options", "tags": [], "resource_type": "macro", "depends_on": {"macros": []}}, "macro.dbt.get_relation_comment": {"path": "macros/etc/get_relation_comment.sql", "original_file_path": "macros/etc/get_relation_comment.sql", "package_name": "dbt", "raw_sql": "{% macro table_options() %}\n  {%- set raw_persist_docs = config.get('persist_docs', {}) -%}\n\n{%- endmacro -%}\n\n{% macro get_relation_comment(persist_docs, model) %}\n\n  {%- if persist_docs is not mapping -%}\n    {{ exceptions.raise_compiler_error(\"Invalid value provided for 'persist_docs'. Expected dict but got value: \" ~ raw_persist_docs) }}\n  {% endif %}\n\n  {% if persist_docs.get('relation', false) %}\n    {{ return((model.description | tojson)[1:-1]) }}\n  {%- else -%}\n    {{ return(none) }}\n  {% endif %}\n\n{% endmacro %}", "root_path": "/Users/mrich/.local/share/virtualenvs/quasar-qaRV2YEO/lib/python3.7/site-packages/dbt/include/global_project", "name": "get_relation_comment", "unique_id": "macro.dbt.get_relation_comment", "tags": [], "resource_type": "macro", "depends_on": {"macros": []}}, "macro.dbt.convert_datetime": {"path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "package_name": "dbt", "raw_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}\n\n{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partiton start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}\n\n{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}\n\n{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}", "root_path": "/Users/mrich/.local/share/virtualenvs/quasar-qaRV2YEO/lib/python3.7/site-packages/dbt/include/global_project", "name": "convert_datetime", "unique_id": "macro.dbt.convert_datetime", "tags": [], "resource_type": "macro", "depends_on": {"macros": []}}, "macro.dbt.dates_in_range": {"path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "package_name": "dbt", "raw_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}\n\n{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partiton start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}\n\n{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}\n\n{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}", "root_path": "/Users/mrich/.local/share/virtualenvs/quasar-qaRV2YEO/lib/python3.7/site-packages/dbt/include/global_project", "name": "dates_in_range", "unique_id": "macro.dbt.dates_in_range", "tags": [], "resource_type": "macro", "depends_on": {"macros": []}}, "macro.dbt.partition_range": {"path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "package_name": "dbt", "raw_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}\n\n{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partiton start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}\n\n{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}\n\n{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}", "root_path": "/Users/mrich/.local/share/virtualenvs/quasar-qaRV2YEO/lib/python3.7/site-packages/dbt/include/global_project", "name": "partition_range", "unique_id": "macro.dbt.partition_range", "tags": [], "resource_type": "macro", "depends_on": {"macros": []}}, "macro.dbt.py_current_timestring": {"path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "package_name": "dbt", "raw_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}\n\n{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partiton start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}\n\n{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}\n\n{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}", "root_path": "/Users/mrich/.local/share/virtualenvs/quasar-qaRV2YEO/lib/python3.7/site-packages/dbt/include/global_project", "name": "py_current_timestring", "unique_id": "macro.dbt.py_current_timestring", "tags": [], "resource_type": "macro", "depends_on": {"macros": []}}, "macro.dbt.generate_schema_name": {"path": "macros/etc/get_custom_schema.sql", "original_file_path": "macros/etc/get_custom_schema.sql", "package_name": "dbt", "raw_sql": "{#\n    Renders a schema name given a custom schema name. If the custom\n    schema name is none, then the resulting schema is just the \"schema\"\n    value in the specified target. If a schema override is specified, then\n    the resulting schema is the default schema concatenated with the\n    custom schema.\n\n    This macro can be overriden in projects to define different semantics\n    for rendering a schema name.\n\n    Arguments:\n    custom_schema_name: The custom schema name specified for a model, or none\n    node: The node the schema is being generated for\n\n#}\n{% macro generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}\n\n\n{#\n    Renders a schema name given a custom schema name. In production, this macro\n    will render out the overriden schema name for a model. Otherwise, the default\n    schema specified in the active target is used.\n\n    Arguments:\n    custom_schema_name: The custom schema name specified for a model, or none\n    node: The node the schema is being generated for\n\n#}\n{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "root_path": "/Users/mrich/.local/share/virtualenvs/quasar-qaRV2YEO/lib/python3.7/site-packages/dbt/include/global_project", "name": "generate_schema_name", "unique_id": "macro.dbt.generate_schema_name", "tags": [], "resource_type": "macro", "depends_on": {"macros": []}}, "macro.dbt.generate_schema_name_for_env": {"path": "macros/etc/get_custom_schema.sql", "original_file_path": "macros/etc/get_custom_schema.sql", "package_name": "dbt", "raw_sql": "{#\n    Renders a schema name given a custom schema name. If the custom\n    schema name is none, then the resulting schema is just the \"schema\"\n    value in the specified target. If a schema override is specified, then\n    the resulting schema is the default schema concatenated with the\n    custom schema.\n\n    This macro can be overriden in projects to define different semantics\n    for rendering a schema name.\n\n    Arguments:\n    custom_schema_name: The custom schema name specified for a model, or none\n    node: The node the schema is being generated for\n\n#}\n{% macro generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}\n\n\n{#\n    Renders a schema name given a custom schema name. In production, this macro\n    will render out the overriden schema name for a model. Otherwise, the default\n    schema specified in the active target is used.\n\n    Arguments:\n    custom_schema_name: The custom schema name specified for a model, or none\n    node: The node the schema is being generated for\n\n#}\n{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "root_path": "/Users/mrich/.local/share/virtualenvs/quasar-qaRV2YEO/lib/python3.7/site-packages/dbt/include/global_project", "name": "generate_schema_name_for_env", "unique_id": "macro.dbt.generate_schema_name_for_env", "tags": [], "resource_type": "macro", "depends_on": {"macros": []}}, "macro.dbt.adapter_macro": {"path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "package_name": "dbt", "raw_sql": "{% macro adapter_macro(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        In adapter_macro: could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set separator = '__' -%}\n  {%- set search_name = adapter.type() + separator + name -%}\n  {%- set default_name = 'default' + separator + name -%}\n\n  {%- if package_context.get(search_name) is not none -%}\n    {{ return(package_context[search_name](*varargs, **kwargs)) }}\n  {%- else -%}\n    {{ return(package_context[default_name](*varargs, **kwargs)) }}\n  {%- endif -%}\n{%- endmacro %}\n\n{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter_macro('get_columns_in_query', select_sql)) }}\n{% endmacro %}\n\n{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        select * from (\n            {{ select_sql }}\n        ) as __dbt_sbq\n        where false\n        limit 0\n    {% endcall %}\n\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}\n\n{% macro create_schema(database_name, schema_name) -%}\n  {{ adapter_macro('create_schema', database_name, schema_name) }}\n{% endmacro %}\n\n{% macro default__create_schema(database_name, schema_name) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{database_name}}.{{schema_name}}\n  {% endcall %}\n{% endmacro %}\n\n{% macro drop_schema(database_name, schema_name) -%}\n  {{ adapter_macro('drop_schema', database_name, schema_name) }}\n{% endmacro %}\n\n{% macro default__drop_schema(database_name, schema_name) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{database_name}}.{{schema_name}} cascade\n  {% endcall %}\n{% endmacro %}\n\n{% macro create_table_as(temporary, relation, sql) -%}\n  {{ adapter_macro('create_table_as', temporary, relation, sql) }}\n{%- endmacro %}\n\n{% macro default__create_table_as(temporary, relation, sql) -%}\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  as (\n    {{ sql }}\n  );\n{% endmacro %}\n\n{% macro create_view_as(relation, sql) -%}\n  {{ adapter_macro('create_view_as', relation, sql) }}\n{%- endmacro %}\n\n{% macro default__create_view_as(relation, sql) -%}\n  create view {{ relation }} as (\n    {{ sql }}\n  );\n{% endmacro %}\n\n\n{% macro get_catalog(information_schemas) -%}\n  {{ return(adapter_macro('get_catalog', information_schemas)) }}\n{%- endmacro %}\n\n{% macro default__get_catalog(information_schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}\n\n\n{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter_macro('get_columns_in_relation', relation)) }}\n{% endmacro %}\n\n{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}\n\n{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}\n\n{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter_macro('alter_column_type', relation, column_name, new_column_type)) }}\n{% endmacro %}\n\n{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ tmp_column }} {{ new_column_type }};\n    update {{ relation }} set {{ tmp_column }} = {{ column_name }};\n    alter table {{ relation }} drop column {{ column_name }} cascade;\n    alter table {{ relation }} rename column {{ tmp_column }} to {{ column_name }}\n  {% endcall %}\n\n{% endmacro %}\n\n\n{% macro drop_relation(relation) -%}\n  {{ return(adapter_macro('drop_relation', relation)) }}\n{% endmacro %}\n\n\n{% macro default__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    drop {{ relation.type }} if exists {{ relation }} cascade\n  {%- endcall %}\n{% endmacro %}\n\n{% macro truncate_relation(relation) -%}\n  {{ return(adapter_macro('truncate_relation', relation)) }}\n{% endmacro %}\n\n\n{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}\n\n{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter_macro('rename_relation', from_relation, to_relation)) }}\n{% endmacro %}\n\n{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}\n\n\n{% macro information_schema_name(database) %}\n  {{ return(adapter_macro('information_schema_name', database)) }}\n{% endmacro %}\n\n{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ adapter.quote_as_configured(database, 'database') }}.information_schema\n  {%- else -%}\n    information_schema\n  {%- endif -%}\n{%- endmacro %}\n\n\n{% macro list_schemas(database) -%}\n  {{ return(adapter_macro('list_schemas', database)) }}\n{% endmacro %}\n\n{% macro default__list_schemas(database) -%}\n  {% call statement('list_schemas', fetch_result=True, auto_begin=False) %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.schemata\n    where catalog_name ilike '{{ database }}'\n  {% endcall %}\n  {{ return(load_result('list_schemas').table) }}\n{% endmacro %}\n\n\n{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter_macro('check_schema_exists', information_schema, schema)) }}\n{% endmacro %}\n\n{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% call statement('check_schema_exists', fetch_result=True, auto_begin=False) -%}\n        select count(*)\n        from {{ information_schema }}.schemata\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{% endmacro %}\n\n\n{% macro list_relations_without_caching(information_schema, schema) %}\n  {{ return(adapter_macro('list_relations_without_caching', information_schema, schema)) }}\n{% endmacro %}\n\n\n{% macro default__list_relations_without_caching(information_schema, schema) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}\n\n\n{% macro current_timestamp() -%}\n  {{ adapter_macro('current_timestamp') }}\n{%- endmacro %}\n\n\n{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter '+adapter.type()) }}\n{%- endmacro %}\n\n\n{% macro collect_freshness(source, loaded_at_field) %}\n  {{ return(adapter_macro('collect_freshness', source, loaded_at_field))}}\n{% endmacro %}\n\n\n{% macro default__collect_freshness(source, loaded_at_field) %}\n  {% call statement('check_schema_exists', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n  {% endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{% endmacro %}\n\n{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter_macro('make_temp_relation', base_relation, suffix))}}\n{% endmacro %}\n\n{% macro default__make_temp_relation(base_relation, suffix) %}\n    {% set tmp_identifier = base_relation.identifier ~ suffix %}\n    {% set tmp_relation = base_relation.incorporate(\n                                path={\"identifier\": tmp_identifier},\n                                table_name=tmp_identifier) -%}\n\n    {% do return(tmp_relation) %}\n{% endmacro %}", "root_path": "/Users/mrich/.local/share/virtualenvs/quasar-qaRV2YEO/lib/python3.7/site-packages/dbt/include/global_project", "name": "adapter_macro", "unique_id": "macro.dbt.adapter_macro", "tags": [], "resource_type": "macro", "depends_on": {"macros": []}}, "macro.dbt.get_columns_in_query": {"path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "package_name": "dbt", "raw_sql": "{% macro adapter_macro(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        In adapter_macro: could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set separator = '__' -%}\n  {%- set search_name = adapter.type() + separator + name -%}\n  {%- set default_name = 'default' + separator + name -%}\n\n  {%- if package_context.get(search_name) is not none -%}\n    {{ return(package_context[search_name](*varargs, **kwargs)) }}\n  {%- else -%}\n    {{ return(package_context[default_name](*varargs, **kwargs)) }}\n  {%- endif -%}\n{%- endmacro %}\n\n{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter_macro('get_columns_in_query', select_sql)) }}\n{% endmacro %}\n\n{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        select * from (\n            {{ select_sql }}\n        ) as __dbt_sbq\n        where false\n        limit 0\n    {% endcall %}\n\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}\n\n{% macro create_schema(database_name, schema_name) -%}\n  {{ adapter_macro('create_schema', database_name, schema_name) }}\n{% endmacro %}\n\n{% macro default__create_schema(database_name, schema_name) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{database_name}}.{{schema_name}}\n  {% endcall %}\n{% endmacro %}\n\n{% macro drop_schema(database_name, schema_name) -%}\n  {{ adapter_macro('drop_schema', database_name, schema_name) }}\n{% endmacro %}\n\n{% macro default__drop_schema(database_name, schema_name) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{database_name}}.{{schema_name}} cascade\n  {% endcall %}\n{% endmacro %}\n\n{% macro create_table_as(temporary, relation, sql) -%}\n  {{ adapter_macro('create_table_as', temporary, relation, sql) }}\n{%- endmacro %}\n\n{% macro default__create_table_as(temporary, relation, sql) -%}\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  as (\n    {{ sql }}\n  );\n{% endmacro %}\n\n{% macro create_view_as(relation, sql) -%}\n  {{ adapter_macro('create_view_as', relation, sql) }}\n{%- endmacro %}\n\n{% macro default__create_view_as(relation, sql) -%}\n  create view {{ relation }} as (\n    {{ sql }}\n  );\n{% endmacro %}\n\n\n{% macro get_catalog(information_schemas) -%}\n  {{ return(adapter_macro('get_catalog', information_schemas)) }}\n{%- endmacro %}\n\n{% macro default__get_catalog(information_schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}\n\n\n{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter_macro('get_columns_in_relation', relation)) }}\n{% endmacro %}\n\n{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}\n\n{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}\n\n{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter_macro('alter_column_type', relation, column_name, new_column_type)) }}\n{% endmacro %}\n\n{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ tmp_column }} {{ new_column_type }};\n    update {{ relation }} set {{ tmp_column }} = {{ column_name }};\n    alter table {{ relation }} drop column {{ column_name }} cascade;\n    alter table {{ relation }} rename column {{ tmp_column }} to {{ column_name }}\n  {% endcall %}\n\n{% endmacro %}\n\n\n{% macro drop_relation(relation) -%}\n  {{ return(adapter_macro('drop_relation', relation)) }}\n{% endmacro %}\n\n\n{% macro default__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    drop {{ relation.type }} if exists {{ relation }} cascade\n  {%- endcall %}\n{% endmacro %}\n\n{% macro truncate_relation(relation) -%}\n  {{ return(adapter_macro('truncate_relation', relation)) }}\n{% endmacro %}\n\n\n{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}\n\n{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter_macro('rename_relation', from_relation, to_relation)) }}\n{% endmacro %}\n\n{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}\n\n\n{% macro information_schema_name(database) %}\n  {{ return(adapter_macro('information_schema_name', database)) }}\n{% endmacro %}\n\n{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ adapter.quote_as_configured(database, 'database') }}.information_schema\n  {%- else -%}\n    information_schema\n  {%- endif -%}\n{%- endmacro %}\n\n\n{% macro list_schemas(database) -%}\n  {{ return(adapter_macro('list_schemas', database)) }}\n{% endmacro %}\n\n{% macro default__list_schemas(database) -%}\n  {% call statement('list_schemas', fetch_result=True, auto_begin=False) %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.schemata\n    where catalog_name ilike '{{ database }}'\n  {% endcall %}\n  {{ return(load_result('list_schemas').table) }}\n{% endmacro %}\n\n\n{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter_macro('check_schema_exists', information_schema, schema)) }}\n{% endmacro %}\n\n{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% call statement('check_schema_exists', fetch_result=True, auto_begin=False) -%}\n        select count(*)\n        from {{ information_schema }}.schemata\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{% endmacro %}\n\n\n{% macro list_relations_without_caching(information_schema, schema) %}\n  {{ return(adapter_macro('list_relations_without_caching', information_schema, schema)) }}\n{% endmacro %}\n\n\n{% macro default__list_relations_without_caching(information_schema, schema) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}\n\n\n{% macro current_timestamp() -%}\n  {{ adapter_macro('current_timestamp') }}\n{%- endmacro %}\n\n\n{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter '+adapter.type()) }}\n{%- endmacro %}\n\n\n{% macro collect_freshness(source, loaded_at_field) %}\n  {{ return(adapter_macro('collect_freshness', source, loaded_at_field))}}\n{% endmacro %}\n\n\n{% macro default__collect_freshness(source, loaded_at_field) %}\n  {% call statement('check_schema_exists', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n  {% endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{% endmacro %}\n\n{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter_macro('make_temp_relation', base_relation, suffix))}}\n{% endmacro %}\n\n{% macro default__make_temp_relation(base_relation, suffix) %}\n    {% set tmp_identifier = base_relation.identifier ~ suffix %}\n    {% set tmp_relation = base_relation.incorporate(\n                                path={\"identifier\": tmp_identifier},\n                                table_name=tmp_identifier) -%}\n\n    {% do return(tmp_relation) %}\n{% endmacro %}", "root_path": "/Users/mrich/.local/share/virtualenvs/quasar-qaRV2YEO/lib/python3.7/site-packages/dbt/include/global_project", "name": "get_columns_in_query", "unique_id": "macro.dbt.get_columns_in_query", "tags": [], "resource_type": "macro", "depends_on": {"macros": []}}, "macro.dbt.default__get_columns_in_query": {"path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "package_name": "dbt", "raw_sql": "{% macro adapter_macro(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        In adapter_macro: could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set separator = '__' -%}\n  {%- set search_name = adapter.type() + separator + name -%}\n  {%- set default_name = 'default' + separator + name -%}\n\n  {%- if package_context.get(search_name) is not none -%}\n    {{ return(package_context[search_name](*varargs, **kwargs)) }}\n  {%- else -%}\n    {{ return(package_context[default_name](*varargs, **kwargs)) }}\n  {%- endif -%}\n{%- endmacro %}\n\n{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter_macro('get_columns_in_query', select_sql)) }}\n{% endmacro %}\n\n{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        select * from (\n            {{ select_sql }}\n        ) as __dbt_sbq\n        where false\n        limit 0\n    {% endcall %}\n\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}\n\n{% macro create_schema(database_name, schema_name) -%}\n  {{ adapter_macro('create_schema', database_name, schema_name) }}\n{% endmacro %}\n\n{% macro default__create_schema(database_name, schema_name) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{database_name}}.{{schema_name}}\n  {% endcall %}\n{% endmacro %}\n\n{% macro drop_schema(database_name, schema_name) -%}\n  {{ adapter_macro('drop_schema', database_name, schema_name) }}\n{% endmacro %}\n\n{% macro default__drop_schema(database_name, schema_name) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{database_name}}.{{schema_name}} cascade\n  {% endcall %}\n{% endmacro %}\n\n{% macro create_table_as(temporary, relation, sql) -%}\n  {{ adapter_macro('create_table_as', temporary, relation, sql) }}\n{%- endmacro %}\n\n{% macro default__create_table_as(temporary, relation, sql) -%}\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  as (\n    {{ sql }}\n  );\n{% endmacro %}\n\n{% macro create_view_as(relation, sql) -%}\n  {{ adapter_macro('create_view_as', relation, sql) }}\n{%- endmacro %}\n\n{% macro default__create_view_as(relation, sql) -%}\n  create view {{ relation }} as (\n    {{ sql }}\n  );\n{% endmacro %}\n\n\n{% macro get_catalog(information_schemas) -%}\n  {{ return(adapter_macro('get_catalog', information_schemas)) }}\n{%- endmacro %}\n\n{% macro default__get_catalog(information_schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}\n\n\n{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter_macro('get_columns_in_relation', relation)) }}\n{% endmacro %}\n\n{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}\n\n{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}\n\n{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter_macro('alter_column_type', relation, column_name, new_column_type)) }}\n{% endmacro %}\n\n{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ tmp_column }} {{ new_column_type }};\n    update {{ relation }} set {{ tmp_column }} = {{ column_name }};\n    alter table {{ relation }} drop column {{ column_name }} cascade;\n    alter table {{ relation }} rename column {{ tmp_column }} to {{ column_name }}\n  {% endcall %}\n\n{% endmacro %}\n\n\n{% macro drop_relation(relation) -%}\n  {{ return(adapter_macro('drop_relation', relation)) }}\n{% endmacro %}\n\n\n{% macro default__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    drop {{ relation.type }} if exists {{ relation }} cascade\n  {%- endcall %}\n{% endmacro %}\n\n{% macro truncate_relation(relation) -%}\n  {{ return(adapter_macro('truncate_relation', relation)) }}\n{% endmacro %}\n\n\n{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}\n\n{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter_macro('rename_relation', from_relation, to_relation)) }}\n{% endmacro %}\n\n{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}\n\n\n{% macro information_schema_name(database) %}\n  {{ return(adapter_macro('information_schema_name', database)) }}\n{% endmacro %}\n\n{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ adapter.quote_as_configured(database, 'database') }}.information_schema\n  {%- else -%}\n    information_schema\n  {%- endif -%}\n{%- endmacro %}\n\n\n{% macro list_schemas(database) -%}\n  {{ return(adapter_macro('list_schemas', database)) }}\n{% endmacro %}\n\n{% macro default__list_schemas(database) -%}\n  {% call statement('list_schemas', fetch_result=True, auto_begin=False) %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.schemata\n    where catalog_name ilike '{{ database }}'\n  {% endcall %}\n  {{ return(load_result('list_schemas').table) }}\n{% endmacro %}\n\n\n{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter_macro('check_schema_exists', information_schema, schema)) }}\n{% endmacro %}\n\n{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% call statement('check_schema_exists', fetch_result=True, auto_begin=False) -%}\n        select count(*)\n        from {{ information_schema }}.schemata\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{% endmacro %}\n\n\n{% macro list_relations_without_caching(information_schema, schema) %}\n  {{ return(adapter_macro('list_relations_without_caching', information_schema, schema)) }}\n{% endmacro %}\n\n\n{% macro default__list_relations_without_caching(information_schema, schema) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}\n\n\n{% macro current_timestamp() -%}\n  {{ adapter_macro('current_timestamp') }}\n{%- endmacro %}\n\n\n{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter '+adapter.type()) }}\n{%- endmacro %}\n\n\n{% macro collect_freshness(source, loaded_at_field) %}\n  {{ return(adapter_macro('collect_freshness', source, loaded_at_field))}}\n{% endmacro %}\n\n\n{% macro default__collect_freshness(source, loaded_at_field) %}\n  {% call statement('check_schema_exists', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n  {% endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{% endmacro %}\n\n{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter_macro('make_temp_relation', base_relation, suffix))}}\n{% endmacro %}\n\n{% macro default__make_temp_relation(base_relation, suffix) %}\n    {% set tmp_identifier = base_relation.identifier ~ suffix %}\n    {% set tmp_relation = base_relation.incorporate(\n                                path={\"identifier\": tmp_identifier},\n                                table_name=tmp_identifier) -%}\n\n    {% do return(tmp_relation) %}\n{% endmacro %}", "root_path": "/Users/mrich/.local/share/virtualenvs/quasar-qaRV2YEO/lib/python3.7/site-packages/dbt/include/global_project", "name": "default__get_columns_in_query", "unique_id": "macro.dbt.default__get_columns_in_query", "tags": [], "resource_type": "macro", "depends_on": {"macros": []}}, "macro.dbt.create_schema": {"path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "package_name": "dbt", "raw_sql": "{% macro adapter_macro(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        In adapter_macro: could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set separator = '__' -%}\n  {%- set search_name = adapter.type() + separator + name -%}\n  {%- set default_name = 'default' + separator + name -%}\n\n  {%- if package_context.get(search_name) is not none -%}\n    {{ return(package_context[search_name](*varargs, **kwargs)) }}\n  {%- else -%}\n    {{ return(package_context[default_name](*varargs, **kwargs)) }}\n  {%- endif -%}\n{%- endmacro %}\n\n{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter_macro('get_columns_in_query', select_sql)) }}\n{% endmacro %}\n\n{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        select * from (\n            {{ select_sql }}\n        ) as __dbt_sbq\n        where false\n        limit 0\n    {% endcall %}\n\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}\n\n{% macro create_schema(database_name, schema_name) -%}\n  {{ adapter_macro('create_schema', database_name, schema_name) }}\n{% endmacro %}\n\n{% macro default__create_schema(database_name, schema_name) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{database_name}}.{{schema_name}}\n  {% endcall %}\n{% endmacro %}\n\n{% macro drop_schema(database_name, schema_name) -%}\n  {{ adapter_macro('drop_schema', database_name, schema_name) }}\n{% endmacro %}\n\n{% macro default__drop_schema(database_name, schema_name) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{database_name}}.{{schema_name}} cascade\n  {% endcall %}\n{% endmacro %}\n\n{% macro create_table_as(temporary, relation, sql) -%}\n  {{ adapter_macro('create_table_as', temporary, relation, sql) }}\n{%- endmacro %}\n\n{% macro default__create_table_as(temporary, relation, sql) -%}\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  as (\n    {{ sql }}\n  );\n{% endmacro %}\n\n{% macro create_view_as(relation, sql) -%}\n  {{ adapter_macro('create_view_as', relation, sql) }}\n{%- endmacro %}\n\n{% macro default__create_view_as(relation, sql) -%}\n  create view {{ relation }} as (\n    {{ sql }}\n  );\n{% endmacro %}\n\n\n{% macro get_catalog(information_schemas) -%}\n  {{ return(adapter_macro('get_catalog', information_schemas)) }}\n{%- endmacro %}\n\n{% macro default__get_catalog(information_schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}\n\n\n{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter_macro('get_columns_in_relation', relation)) }}\n{% endmacro %}\n\n{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}\n\n{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}\n\n{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter_macro('alter_column_type', relation, column_name, new_column_type)) }}\n{% endmacro %}\n\n{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ tmp_column }} {{ new_column_type }};\n    update {{ relation }} set {{ tmp_column }} = {{ column_name }};\n    alter table {{ relation }} drop column {{ column_name }} cascade;\n    alter table {{ relation }} rename column {{ tmp_column }} to {{ column_name }}\n  {% endcall %}\n\n{% endmacro %}\n\n\n{% macro drop_relation(relation) -%}\n  {{ return(adapter_macro('drop_relation', relation)) }}\n{% endmacro %}\n\n\n{% macro default__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    drop {{ relation.type }} if exists {{ relation }} cascade\n  {%- endcall %}\n{% endmacro %}\n\n{% macro truncate_relation(relation) -%}\n  {{ return(adapter_macro('truncate_relation', relation)) }}\n{% endmacro %}\n\n\n{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}\n\n{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter_macro('rename_relation', from_relation, to_relation)) }}\n{% endmacro %}\n\n{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}\n\n\n{% macro information_schema_name(database) %}\n  {{ return(adapter_macro('information_schema_name', database)) }}\n{% endmacro %}\n\n{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ adapter.quote_as_configured(database, 'database') }}.information_schema\n  {%- else -%}\n    information_schema\n  {%- endif -%}\n{%- endmacro %}\n\n\n{% macro list_schemas(database) -%}\n  {{ return(adapter_macro('list_schemas', database)) }}\n{% endmacro %}\n\n{% macro default__list_schemas(database) -%}\n  {% call statement('list_schemas', fetch_result=True, auto_begin=False) %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.schemata\n    where catalog_name ilike '{{ database }}'\n  {% endcall %}\n  {{ return(load_result('list_schemas').table) }}\n{% endmacro %}\n\n\n{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter_macro('check_schema_exists', information_schema, schema)) }}\n{% endmacro %}\n\n{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% call statement('check_schema_exists', fetch_result=True, auto_begin=False) -%}\n        select count(*)\n        from {{ information_schema }}.schemata\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{% endmacro %}\n\n\n{% macro list_relations_without_caching(information_schema, schema) %}\n  {{ return(adapter_macro('list_relations_without_caching', information_schema, schema)) }}\n{% endmacro %}\n\n\n{% macro default__list_relations_without_caching(information_schema, schema) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}\n\n\n{% macro current_timestamp() -%}\n  {{ adapter_macro('current_timestamp') }}\n{%- endmacro %}\n\n\n{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter '+adapter.type()) }}\n{%- endmacro %}\n\n\n{% macro collect_freshness(source, loaded_at_field) %}\n  {{ return(adapter_macro('collect_freshness', source, loaded_at_field))}}\n{% endmacro %}\n\n\n{% macro default__collect_freshness(source, loaded_at_field) %}\n  {% call statement('check_schema_exists', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n  {% endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{% endmacro %}\n\n{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter_macro('make_temp_relation', base_relation, suffix))}}\n{% endmacro %}\n\n{% macro default__make_temp_relation(base_relation, suffix) %}\n    {% set tmp_identifier = base_relation.identifier ~ suffix %}\n    {% set tmp_relation = base_relation.incorporate(\n                                path={\"identifier\": tmp_identifier},\n                                table_name=tmp_identifier) -%}\n\n    {% do return(tmp_relation) %}\n{% endmacro %}", "root_path": "/Users/mrich/.local/share/virtualenvs/quasar-qaRV2YEO/lib/python3.7/site-packages/dbt/include/global_project", "name": "create_schema", "unique_id": "macro.dbt.create_schema", "tags": [], "resource_type": "macro", "depends_on": {"macros": []}}, "macro.dbt.default__create_schema": {"path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "package_name": "dbt", "raw_sql": "{% macro adapter_macro(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        In adapter_macro: could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set separator = '__' -%}\n  {%- set search_name = adapter.type() + separator + name -%}\n  {%- set default_name = 'default' + separator + name -%}\n\n  {%- if package_context.get(search_name) is not none -%}\n    {{ return(package_context[search_name](*varargs, **kwargs)) }}\n  {%- else -%}\n    {{ return(package_context[default_name](*varargs, **kwargs)) }}\n  {%- endif -%}\n{%- endmacro %}\n\n{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter_macro('get_columns_in_query', select_sql)) }}\n{% endmacro %}\n\n{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        select * from (\n            {{ select_sql }}\n        ) as __dbt_sbq\n        where false\n        limit 0\n    {% endcall %}\n\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}\n\n{% macro create_schema(database_name, schema_name) -%}\n  {{ adapter_macro('create_schema', database_name, schema_name) }}\n{% endmacro %}\n\n{% macro default__create_schema(database_name, schema_name) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{database_name}}.{{schema_name}}\n  {% endcall %}\n{% endmacro %}\n\n{% macro drop_schema(database_name, schema_name) -%}\n  {{ adapter_macro('drop_schema', database_name, schema_name) }}\n{% endmacro %}\n\n{% macro default__drop_schema(database_name, schema_name) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{database_name}}.{{schema_name}} cascade\n  {% endcall %}\n{% endmacro %}\n\n{% macro create_table_as(temporary, relation, sql) -%}\n  {{ adapter_macro('create_table_as', temporary, relation, sql) }}\n{%- endmacro %}\n\n{% macro default__create_table_as(temporary, relation, sql) -%}\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  as (\n    {{ sql }}\n  );\n{% endmacro %}\n\n{% macro create_view_as(relation, sql) -%}\n  {{ adapter_macro('create_view_as', relation, sql) }}\n{%- endmacro %}\n\n{% macro default__create_view_as(relation, sql) -%}\n  create view {{ relation }} as (\n    {{ sql }}\n  );\n{% endmacro %}\n\n\n{% macro get_catalog(information_schemas) -%}\n  {{ return(adapter_macro('get_catalog', information_schemas)) }}\n{%- endmacro %}\n\n{% macro default__get_catalog(information_schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}\n\n\n{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter_macro('get_columns_in_relation', relation)) }}\n{% endmacro %}\n\n{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}\n\n{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}\n\n{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter_macro('alter_column_type', relation, column_name, new_column_type)) }}\n{% endmacro %}\n\n{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ tmp_column }} {{ new_column_type }};\n    update {{ relation }} set {{ tmp_column }} = {{ column_name }};\n    alter table {{ relation }} drop column {{ column_name }} cascade;\n    alter table {{ relation }} rename column {{ tmp_column }} to {{ column_name }}\n  {% endcall %}\n\n{% endmacro %}\n\n\n{% macro drop_relation(relation) -%}\n  {{ return(adapter_macro('drop_relation', relation)) }}\n{% endmacro %}\n\n\n{% macro default__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    drop {{ relation.type }} if exists {{ relation }} cascade\n  {%- endcall %}\n{% endmacro %}\n\n{% macro truncate_relation(relation) -%}\n  {{ return(adapter_macro('truncate_relation', relation)) }}\n{% endmacro %}\n\n\n{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}\n\n{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter_macro('rename_relation', from_relation, to_relation)) }}\n{% endmacro %}\n\n{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}\n\n\n{% macro information_schema_name(database) %}\n  {{ return(adapter_macro('information_schema_name', database)) }}\n{% endmacro %}\n\n{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ adapter.quote_as_configured(database, 'database') }}.information_schema\n  {%- else -%}\n    information_schema\n  {%- endif -%}\n{%- endmacro %}\n\n\n{% macro list_schemas(database) -%}\n  {{ return(adapter_macro('list_schemas', database)) }}\n{% endmacro %}\n\n{% macro default__list_schemas(database) -%}\n  {% call statement('list_schemas', fetch_result=True, auto_begin=False) %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.schemata\n    where catalog_name ilike '{{ database }}'\n  {% endcall %}\n  {{ return(load_result('list_schemas').table) }}\n{% endmacro %}\n\n\n{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter_macro('check_schema_exists', information_schema, schema)) }}\n{% endmacro %}\n\n{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% call statement('check_schema_exists', fetch_result=True, auto_begin=False) -%}\n        select count(*)\n        from {{ information_schema }}.schemata\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{% endmacro %}\n\n\n{% macro list_relations_without_caching(information_schema, schema) %}\n  {{ return(adapter_macro('list_relations_without_caching', information_schema, schema)) }}\n{% endmacro %}\n\n\n{% macro default__list_relations_without_caching(information_schema, schema) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}\n\n\n{% macro current_timestamp() -%}\n  {{ adapter_macro('current_timestamp') }}\n{%- endmacro %}\n\n\n{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter '+adapter.type()) }}\n{%- endmacro %}\n\n\n{% macro collect_freshness(source, loaded_at_field) %}\n  {{ return(adapter_macro('collect_freshness', source, loaded_at_field))}}\n{% endmacro %}\n\n\n{% macro default__collect_freshness(source, loaded_at_field) %}\n  {% call statement('check_schema_exists', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n  {% endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{% endmacro %}\n\n{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter_macro('make_temp_relation', base_relation, suffix))}}\n{% endmacro %}\n\n{% macro default__make_temp_relation(base_relation, suffix) %}\n    {% set tmp_identifier = base_relation.identifier ~ suffix %}\n    {% set tmp_relation = base_relation.incorporate(\n                                path={\"identifier\": tmp_identifier},\n                                table_name=tmp_identifier) -%}\n\n    {% do return(tmp_relation) %}\n{% endmacro %}", "root_path": "/Users/mrich/.local/share/virtualenvs/quasar-qaRV2YEO/lib/python3.7/site-packages/dbt/include/global_project", "name": "default__create_schema", "unique_id": "macro.dbt.default__create_schema", "tags": [], "resource_type": "macro", "depends_on": {"macros": []}}, "macro.dbt.drop_schema": {"path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "package_name": "dbt", "raw_sql": "{% macro adapter_macro(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        In adapter_macro: could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set separator = '__' -%}\n  {%- set search_name = adapter.type() + separator + name -%}\n  {%- set default_name = 'default' + separator + name -%}\n\n  {%- if package_context.get(search_name) is not none -%}\n    {{ return(package_context[search_name](*varargs, **kwargs)) }}\n  {%- else -%}\n    {{ return(package_context[default_name](*varargs, **kwargs)) }}\n  {%- endif -%}\n{%- endmacro %}\n\n{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter_macro('get_columns_in_query', select_sql)) }}\n{% endmacro %}\n\n{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        select * from (\n            {{ select_sql }}\n        ) as __dbt_sbq\n        where false\n        limit 0\n    {% endcall %}\n\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}\n\n{% macro create_schema(database_name, schema_name) -%}\n  {{ adapter_macro('create_schema', database_name, schema_name) }}\n{% endmacro %}\n\n{% macro default__create_schema(database_name, schema_name) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{database_name}}.{{schema_name}}\n  {% endcall %}\n{% endmacro %}\n\n{% macro drop_schema(database_name, schema_name) -%}\n  {{ adapter_macro('drop_schema', database_name, schema_name) }}\n{% endmacro %}\n\n{% macro default__drop_schema(database_name, schema_name) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{database_name}}.{{schema_name}} cascade\n  {% endcall %}\n{% endmacro %}\n\n{% macro create_table_as(temporary, relation, sql) -%}\n  {{ adapter_macro('create_table_as', temporary, relation, sql) }}\n{%- endmacro %}\n\n{% macro default__create_table_as(temporary, relation, sql) -%}\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  as (\n    {{ sql }}\n  );\n{% endmacro %}\n\n{% macro create_view_as(relation, sql) -%}\n  {{ adapter_macro('create_view_as', relation, sql) }}\n{%- endmacro %}\n\n{% macro default__create_view_as(relation, sql) -%}\n  create view {{ relation }} as (\n    {{ sql }}\n  );\n{% endmacro %}\n\n\n{% macro get_catalog(information_schemas) -%}\n  {{ return(adapter_macro('get_catalog', information_schemas)) }}\n{%- endmacro %}\n\n{% macro default__get_catalog(information_schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}\n\n\n{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter_macro('get_columns_in_relation', relation)) }}\n{% endmacro %}\n\n{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}\n\n{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}\n\n{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter_macro('alter_column_type', relation, column_name, new_column_type)) }}\n{% endmacro %}\n\n{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ tmp_column }} {{ new_column_type }};\n    update {{ relation }} set {{ tmp_column }} = {{ column_name }};\n    alter table {{ relation }} drop column {{ column_name }} cascade;\n    alter table {{ relation }} rename column {{ tmp_column }} to {{ column_name }}\n  {% endcall %}\n\n{% endmacro %}\n\n\n{% macro drop_relation(relation) -%}\n  {{ return(adapter_macro('drop_relation', relation)) }}\n{% endmacro %}\n\n\n{% macro default__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    drop {{ relation.type }} if exists {{ relation }} cascade\n  {%- endcall %}\n{% endmacro %}\n\n{% macro truncate_relation(relation) -%}\n  {{ return(adapter_macro('truncate_relation', relation)) }}\n{% endmacro %}\n\n\n{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}\n\n{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter_macro('rename_relation', from_relation, to_relation)) }}\n{% endmacro %}\n\n{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}\n\n\n{% macro information_schema_name(database) %}\n  {{ return(adapter_macro('information_schema_name', database)) }}\n{% endmacro %}\n\n{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ adapter.quote_as_configured(database, 'database') }}.information_schema\n  {%- else -%}\n    information_schema\n  {%- endif -%}\n{%- endmacro %}\n\n\n{% macro list_schemas(database) -%}\n  {{ return(adapter_macro('list_schemas', database)) }}\n{% endmacro %}\n\n{% macro default__list_schemas(database) -%}\n  {% call statement('list_schemas', fetch_result=True, auto_begin=False) %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.schemata\n    where catalog_name ilike '{{ database }}'\n  {% endcall %}\n  {{ return(load_result('list_schemas').table) }}\n{% endmacro %}\n\n\n{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter_macro('check_schema_exists', information_schema, schema)) }}\n{% endmacro %}\n\n{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% call statement('check_schema_exists', fetch_result=True, auto_begin=False) -%}\n        select count(*)\n        from {{ information_schema }}.schemata\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{% endmacro %}\n\n\n{% macro list_relations_without_caching(information_schema, schema) %}\n  {{ return(adapter_macro('list_relations_without_caching', information_schema, schema)) }}\n{% endmacro %}\n\n\n{% macro default__list_relations_without_caching(information_schema, schema) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}\n\n\n{% macro current_timestamp() -%}\n  {{ adapter_macro('current_timestamp') }}\n{%- endmacro %}\n\n\n{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter '+adapter.type()) }}\n{%- endmacro %}\n\n\n{% macro collect_freshness(source, loaded_at_field) %}\n  {{ return(adapter_macro('collect_freshness', source, loaded_at_field))}}\n{% endmacro %}\n\n\n{% macro default__collect_freshness(source, loaded_at_field) %}\n  {% call statement('check_schema_exists', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n  {% endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{% endmacro %}\n\n{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter_macro('make_temp_relation', base_relation, suffix))}}\n{% endmacro %}\n\n{% macro default__make_temp_relation(base_relation, suffix) %}\n    {% set tmp_identifier = base_relation.identifier ~ suffix %}\n    {% set tmp_relation = base_relation.incorporate(\n                                path={\"identifier\": tmp_identifier},\n                                table_name=tmp_identifier) -%}\n\n    {% do return(tmp_relation) %}\n{% endmacro %}", "root_path": "/Users/mrich/.local/share/virtualenvs/quasar-qaRV2YEO/lib/python3.7/site-packages/dbt/include/global_project", "name": "drop_schema", "unique_id": "macro.dbt.drop_schema", "tags": [], "resource_type": "macro", "depends_on": {"macros": []}}, "macro.dbt.default__drop_schema": {"path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "package_name": "dbt", "raw_sql": "{% macro adapter_macro(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        In adapter_macro: could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set separator = '__' -%}\n  {%- set search_name = adapter.type() + separator + name -%}\n  {%- set default_name = 'default' + separator + name -%}\n\n  {%- if package_context.get(search_name) is not none -%}\n    {{ return(package_context[search_name](*varargs, **kwargs)) }}\n  {%- else -%}\n    {{ return(package_context[default_name](*varargs, **kwargs)) }}\n  {%- endif -%}\n{%- endmacro %}\n\n{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter_macro('get_columns_in_query', select_sql)) }}\n{% endmacro %}\n\n{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        select * from (\n            {{ select_sql }}\n        ) as __dbt_sbq\n        where false\n        limit 0\n    {% endcall %}\n\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}\n\n{% macro create_schema(database_name, schema_name) -%}\n  {{ adapter_macro('create_schema', database_name, schema_name) }}\n{% endmacro %}\n\n{% macro default__create_schema(database_name, schema_name) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{database_name}}.{{schema_name}}\n  {% endcall %}\n{% endmacro %}\n\n{% macro drop_schema(database_name, schema_name) -%}\n  {{ adapter_macro('drop_schema', database_name, schema_name) }}\n{% endmacro %}\n\n{% macro default__drop_schema(database_name, schema_name) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{database_name}}.{{schema_name}} cascade\n  {% endcall %}\n{% endmacro %}\n\n{% macro create_table_as(temporary, relation, sql) -%}\n  {{ adapter_macro('create_table_as', temporary, relation, sql) }}\n{%- endmacro %}\n\n{% macro default__create_table_as(temporary, relation, sql) -%}\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  as (\n    {{ sql }}\n  );\n{% endmacro %}\n\n{% macro create_view_as(relation, sql) -%}\n  {{ adapter_macro('create_view_as', relation, sql) }}\n{%- endmacro %}\n\n{% macro default__create_view_as(relation, sql) -%}\n  create view {{ relation }} as (\n    {{ sql }}\n  );\n{% endmacro %}\n\n\n{% macro get_catalog(information_schemas) -%}\n  {{ return(adapter_macro('get_catalog', information_schemas)) }}\n{%- endmacro %}\n\n{% macro default__get_catalog(information_schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}\n\n\n{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter_macro('get_columns_in_relation', relation)) }}\n{% endmacro %}\n\n{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}\n\n{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}\n\n{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter_macro('alter_column_type', relation, column_name, new_column_type)) }}\n{% endmacro %}\n\n{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ tmp_column }} {{ new_column_type }};\n    update {{ relation }} set {{ tmp_column }} = {{ column_name }};\n    alter table {{ relation }} drop column {{ column_name }} cascade;\n    alter table {{ relation }} rename column {{ tmp_column }} to {{ column_name }}\n  {% endcall %}\n\n{% endmacro %}\n\n\n{% macro drop_relation(relation) -%}\n  {{ return(adapter_macro('drop_relation', relation)) }}\n{% endmacro %}\n\n\n{% macro default__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    drop {{ relation.type }} if exists {{ relation }} cascade\n  {%- endcall %}\n{% endmacro %}\n\n{% macro truncate_relation(relation) -%}\n  {{ return(adapter_macro('truncate_relation', relation)) }}\n{% endmacro %}\n\n\n{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}\n\n{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter_macro('rename_relation', from_relation, to_relation)) }}\n{% endmacro %}\n\n{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}\n\n\n{% macro information_schema_name(database) %}\n  {{ return(adapter_macro('information_schema_name', database)) }}\n{% endmacro %}\n\n{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ adapter.quote_as_configured(database, 'database') }}.information_schema\n  {%- else -%}\n    information_schema\n  {%- endif -%}\n{%- endmacro %}\n\n\n{% macro list_schemas(database) -%}\n  {{ return(adapter_macro('list_schemas', database)) }}\n{% endmacro %}\n\n{% macro default__list_schemas(database) -%}\n  {% call statement('list_schemas', fetch_result=True, auto_begin=False) %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.schemata\n    where catalog_name ilike '{{ database }}'\n  {% endcall %}\n  {{ return(load_result('list_schemas').table) }}\n{% endmacro %}\n\n\n{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter_macro('check_schema_exists', information_schema, schema)) }}\n{% endmacro %}\n\n{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% call statement('check_schema_exists', fetch_result=True, auto_begin=False) -%}\n        select count(*)\n        from {{ information_schema }}.schemata\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{% endmacro %}\n\n\n{% macro list_relations_without_caching(information_schema, schema) %}\n  {{ return(adapter_macro('list_relations_without_caching', information_schema, schema)) }}\n{% endmacro %}\n\n\n{% macro default__list_relations_without_caching(information_schema, schema) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}\n\n\n{% macro current_timestamp() -%}\n  {{ adapter_macro('current_timestamp') }}\n{%- endmacro %}\n\n\n{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter '+adapter.type()) }}\n{%- endmacro %}\n\n\n{% macro collect_freshness(source, loaded_at_field) %}\n  {{ return(adapter_macro('collect_freshness', source, loaded_at_field))}}\n{% endmacro %}\n\n\n{% macro default__collect_freshness(source, loaded_at_field) %}\n  {% call statement('check_schema_exists', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n  {% endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{% endmacro %}\n\n{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter_macro('make_temp_relation', base_relation, suffix))}}\n{% endmacro %}\n\n{% macro default__make_temp_relation(base_relation, suffix) %}\n    {% set tmp_identifier = base_relation.identifier ~ suffix %}\n    {% set tmp_relation = base_relation.incorporate(\n                                path={\"identifier\": tmp_identifier},\n                                table_name=tmp_identifier) -%}\n\n    {% do return(tmp_relation) %}\n{% endmacro %}", "root_path": "/Users/mrich/.local/share/virtualenvs/quasar-qaRV2YEO/lib/python3.7/site-packages/dbt/include/global_project", "name": "default__drop_schema", "unique_id": "macro.dbt.default__drop_schema", "tags": [], "resource_type": "macro", "depends_on": {"macros": []}}, "macro.dbt.create_table_as": {"path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "package_name": "dbt", "raw_sql": "{% macro adapter_macro(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        In adapter_macro: could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set separator = '__' -%}\n  {%- set search_name = adapter.type() + separator + name -%}\n  {%- set default_name = 'default' + separator + name -%}\n\n  {%- if package_context.get(search_name) is not none -%}\n    {{ return(package_context[search_name](*varargs, **kwargs)) }}\n  {%- else -%}\n    {{ return(package_context[default_name](*varargs, **kwargs)) }}\n  {%- endif -%}\n{%- endmacro %}\n\n{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter_macro('get_columns_in_query', select_sql)) }}\n{% endmacro %}\n\n{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        select * from (\n            {{ select_sql }}\n        ) as __dbt_sbq\n        where false\n        limit 0\n    {% endcall %}\n\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}\n\n{% macro create_schema(database_name, schema_name) -%}\n  {{ adapter_macro('create_schema', database_name, schema_name) }}\n{% endmacro %}\n\n{% macro default__create_schema(database_name, schema_name) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{database_name}}.{{schema_name}}\n  {% endcall %}\n{% endmacro %}\n\n{% macro drop_schema(database_name, schema_name) -%}\n  {{ adapter_macro('drop_schema', database_name, schema_name) }}\n{% endmacro %}\n\n{% macro default__drop_schema(database_name, schema_name) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{database_name}}.{{schema_name}} cascade\n  {% endcall %}\n{% endmacro %}\n\n{% macro create_table_as(temporary, relation, sql) -%}\n  {{ adapter_macro('create_table_as', temporary, relation, sql) }}\n{%- endmacro %}\n\n{% macro default__create_table_as(temporary, relation, sql) -%}\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  as (\n    {{ sql }}\n  );\n{% endmacro %}\n\n{% macro create_view_as(relation, sql) -%}\n  {{ adapter_macro('create_view_as', relation, sql) }}\n{%- endmacro %}\n\n{% macro default__create_view_as(relation, sql) -%}\n  create view {{ relation }} as (\n    {{ sql }}\n  );\n{% endmacro %}\n\n\n{% macro get_catalog(information_schemas) -%}\n  {{ return(adapter_macro('get_catalog', information_schemas)) }}\n{%- endmacro %}\n\n{% macro default__get_catalog(information_schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}\n\n\n{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter_macro('get_columns_in_relation', relation)) }}\n{% endmacro %}\n\n{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}\n\n{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}\n\n{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter_macro('alter_column_type', relation, column_name, new_column_type)) }}\n{% endmacro %}\n\n{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ tmp_column }} {{ new_column_type }};\n    update {{ relation }} set {{ tmp_column }} = {{ column_name }};\n    alter table {{ relation }} drop column {{ column_name }} cascade;\n    alter table {{ relation }} rename column {{ tmp_column }} to {{ column_name }}\n  {% endcall %}\n\n{% endmacro %}\n\n\n{% macro drop_relation(relation) -%}\n  {{ return(adapter_macro('drop_relation', relation)) }}\n{% endmacro %}\n\n\n{% macro default__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    drop {{ relation.type }} if exists {{ relation }} cascade\n  {%- endcall %}\n{% endmacro %}\n\n{% macro truncate_relation(relation) -%}\n  {{ return(adapter_macro('truncate_relation', relation)) }}\n{% endmacro %}\n\n\n{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}\n\n{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter_macro('rename_relation', from_relation, to_relation)) }}\n{% endmacro %}\n\n{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}\n\n\n{% macro information_schema_name(database) %}\n  {{ return(adapter_macro('information_schema_name', database)) }}\n{% endmacro %}\n\n{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ adapter.quote_as_configured(database, 'database') }}.information_schema\n  {%- else -%}\n    information_schema\n  {%- endif -%}\n{%- endmacro %}\n\n\n{% macro list_schemas(database) -%}\n  {{ return(adapter_macro('list_schemas', database)) }}\n{% endmacro %}\n\n{% macro default__list_schemas(database) -%}\n  {% call statement('list_schemas', fetch_result=True, auto_begin=False) %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.schemata\n    where catalog_name ilike '{{ database }}'\n  {% endcall %}\n  {{ return(load_result('list_schemas').table) }}\n{% endmacro %}\n\n\n{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter_macro('check_schema_exists', information_schema, schema)) }}\n{% endmacro %}\n\n{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% call statement('check_schema_exists', fetch_result=True, auto_begin=False) -%}\n        select count(*)\n        from {{ information_schema }}.schemata\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{% endmacro %}\n\n\n{% macro list_relations_without_caching(information_schema, schema) %}\n  {{ return(adapter_macro('list_relations_without_caching', information_schema, schema)) }}\n{% endmacro %}\n\n\n{% macro default__list_relations_without_caching(information_schema, schema) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}\n\n\n{% macro current_timestamp() -%}\n  {{ adapter_macro('current_timestamp') }}\n{%- endmacro %}\n\n\n{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter '+adapter.type()) }}\n{%- endmacro %}\n\n\n{% macro collect_freshness(source, loaded_at_field) %}\n  {{ return(adapter_macro('collect_freshness', source, loaded_at_field))}}\n{% endmacro %}\n\n\n{% macro default__collect_freshness(source, loaded_at_field) %}\n  {% call statement('check_schema_exists', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n  {% endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{% endmacro %}\n\n{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter_macro('make_temp_relation', base_relation, suffix))}}\n{% endmacro %}\n\n{% macro default__make_temp_relation(base_relation, suffix) %}\n    {% set tmp_identifier = base_relation.identifier ~ suffix %}\n    {% set tmp_relation = base_relation.incorporate(\n                                path={\"identifier\": tmp_identifier},\n                                table_name=tmp_identifier) -%}\n\n    {% do return(tmp_relation) %}\n{% endmacro %}", "root_path": "/Users/mrich/.local/share/virtualenvs/quasar-qaRV2YEO/lib/python3.7/site-packages/dbt/include/global_project", "name": "create_table_as", "unique_id": "macro.dbt.create_table_as", "tags": [], "resource_type": "macro", "depends_on": {"macros": []}}, "macro.dbt.default__create_table_as": {"path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "package_name": "dbt", "raw_sql": "{% macro adapter_macro(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        In adapter_macro: could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set separator = '__' -%}\n  {%- set search_name = adapter.type() + separator + name -%}\n  {%- set default_name = 'default' + separator + name -%}\n\n  {%- if package_context.get(search_name) is not none -%}\n    {{ return(package_context[search_name](*varargs, **kwargs)) }}\n  {%- else -%}\n    {{ return(package_context[default_name](*varargs, **kwargs)) }}\n  {%- endif -%}\n{%- endmacro %}\n\n{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter_macro('get_columns_in_query', select_sql)) }}\n{% endmacro %}\n\n{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        select * from (\n            {{ select_sql }}\n        ) as __dbt_sbq\n        where false\n        limit 0\n    {% endcall %}\n\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}\n\n{% macro create_schema(database_name, schema_name) -%}\n  {{ adapter_macro('create_schema', database_name, schema_name) }}\n{% endmacro %}\n\n{% macro default__create_schema(database_name, schema_name) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{database_name}}.{{schema_name}}\n  {% endcall %}\n{% endmacro %}\n\n{% macro drop_schema(database_name, schema_name) -%}\n  {{ adapter_macro('drop_schema', database_name, schema_name) }}\n{% endmacro %}\n\n{% macro default__drop_schema(database_name, schema_name) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{database_name}}.{{schema_name}} cascade\n  {% endcall %}\n{% endmacro %}\n\n{% macro create_table_as(temporary, relation, sql) -%}\n  {{ adapter_macro('create_table_as', temporary, relation, sql) }}\n{%- endmacro %}\n\n{% macro default__create_table_as(temporary, relation, sql) -%}\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  as (\n    {{ sql }}\n  );\n{% endmacro %}\n\n{% macro create_view_as(relation, sql) -%}\n  {{ adapter_macro('create_view_as', relation, sql) }}\n{%- endmacro %}\n\n{% macro default__create_view_as(relation, sql) -%}\n  create view {{ relation }} as (\n    {{ sql }}\n  );\n{% endmacro %}\n\n\n{% macro get_catalog(information_schemas) -%}\n  {{ return(adapter_macro('get_catalog', information_schemas)) }}\n{%- endmacro %}\n\n{% macro default__get_catalog(information_schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}\n\n\n{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter_macro('get_columns_in_relation', relation)) }}\n{% endmacro %}\n\n{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}\n\n{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}\n\n{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter_macro('alter_column_type', relation, column_name, new_column_type)) }}\n{% endmacro %}\n\n{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ tmp_column }} {{ new_column_type }};\n    update {{ relation }} set {{ tmp_column }} = {{ column_name }};\n    alter table {{ relation }} drop column {{ column_name }} cascade;\n    alter table {{ relation }} rename column {{ tmp_column }} to {{ column_name }}\n  {% endcall %}\n\n{% endmacro %}\n\n\n{% macro drop_relation(relation) -%}\n  {{ return(adapter_macro('drop_relation', relation)) }}\n{% endmacro %}\n\n\n{% macro default__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    drop {{ relation.type }} if exists {{ relation }} cascade\n  {%- endcall %}\n{% endmacro %}\n\n{% macro truncate_relation(relation) -%}\n  {{ return(adapter_macro('truncate_relation', relation)) }}\n{% endmacro %}\n\n\n{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}\n\n{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter_macro('rename_relation', from_relation, to_relation)) }}\n{% endmacro %}\n\n{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}\n\n\n{% macro information_schema_name(database) %}\n  {{ return(adapter_macro('information_schema_name', database)) }}\n{% endmacro %}\n\n{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ adapter.quote_as_configured(database, 'database') }}.information_schema\n  {%- else -%}\n    information_schema\n  {%- endif -%}\n{%- endmacro %}\n\n\n{% macro list_schemas(database) -%}\n  {{ return(adapter_macro('list_schemas', database)) }}\n{% endmacro %}\n\n{% macro default__list_schemas(database) -%}\n  {% call statement('list_schemas', fetch_result=True, auto_begin=False) %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.schemata\n    where catalog_name ilike '{{ database }}'\n  {% endcall %}\n  {{ return(load_result('list_schemas').table) }}\n{% endmacro %}\n\n\n{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter_macro('check_schema_exists', information_schema, schema)) }}\n{% endmacro %}\n\n{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% call statement('check_schema_exists', fetch_result=True, auto_begin=False) -%}\n        select count(*)\n        from {{ information_schema }}.schemata\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{% endmacro %}\n\n\n{% macro list_relations_without_caching(information_schema, schema) %}\n  {{ return(adapter_macro('list_relations_without_caching', information_schema, schema)) }}\n{% endmacro %}\n\n\n{% macro default__list_relations_without_caching(information_schema, schema) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}\n\n\n{% macro current_timestamp() -%}\n  {{ adapter_macro('current_timestamp') }}\n{%- endmacro %}\n\n\n{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter '+adapter.type()) }}\n{%- endmacro %}\n\n\n{% macro collect_freshness(source, loaded_at_field) %}\n  {{ return(adapter_macro('collect_freshness', source, loaded_at_field))}}\n{% endmacro %}\n\n\n{% macro default__collect_freshness(source, loaded_at_field) %}\n  {% call statement('check_schema_exists', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n  {% endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{% endmacro %}\n\n{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter_macro('make_temp_relation', base_relation, suffix))}}\n{% endmacro %}\n\n{% macro default__make_temp_relation(base_relation, suffix) %}\n    {% set tmp_identifier = base_relation.identifier ~ suffix %}\n    {% set tmp_relation = base_relation.incorporate(\n                                path={\"identifier\": tmp_identifier},\n                                table_name=tmp_identifier) -%}\n\n    {% do return(tmp_relation) %}\n{% endmacro %}", "root_path": "/Users/mrich/.local/share/virtualenvs/quasar-qaRV2YEO/lib/python3.7/site-packages/dbt/include/global_project", "name": "default__create_table_as", "unique_id": "macro.dbt.default__create_table_as", "tags": [], "resource_type": "macro", "depends_on": {"macros": []}}, "macro.dbt.create_view_as": {"path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "package_name": "dbt", "raw_sql": "{% macro adapter_macro(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        In adapter_macro: could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set separator = '__' -%}\n  {%- set search_name = adapter.type() + separator + name -%}\n  {%- set default_name = 'default' + separator + name -%}\n\n  {%- if package_context.get(search_name) is not none -%}\n    {{ return(package_context[search_name](*varargs, **kwargs)) }}\n  {%- else -%}\n    {{ return(package_context[default_name](*varargs, **kwargs)) }}\n  {%- endif -%}\n{%- endmacro %}\n\n{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter_macro('get_columns_in_query', select_sql)) }}\n{% endmacro %}\n\n{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        select * from (\n            {{ select_sql }}\n        ) as __dbt_sbq\n        where false\n        limit 0\n    {% endcall %}\n\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}\n\n{% macro create_schema(database_name, schema_name) -%}\n  {{ adapter_macro('create_schema', database_name, schema_name) }}\n{% endmacro %}\n\n{% macro default__create_schema(database_name, schema_name) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{database_name}}.{{schema_name}}\n  {% endcall %}\n{% endmacro %}\n\n{% macro drop_schema(database_name, schema_name) -%}\n  {{ adapter_macro('drop_schema', database_name, schema_name) }}\n{% endmacro %}\n\n{% macro default__drop_schema(database_name, schema_name) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{database_name}}.{{schema_name}} cascade\n  {% endcall %}\n{% endmacro %}\n\n{% macro create_table_as(temporary, relation, sql) -%}\n  {{ adapter_macro('create_table_as', temporary, relation, sql) }}\n{%- endmacro %}\n\n{% macro default__create_table_as(temporary, relation, sql) -%}\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  as (\n    {{ sql }}\n  );\n{% endmacro %}\n\n{% macro create_view_as(relation, sql) -%}\n  {{ adapter_macro('create_view_as', relation, sql) }}\n{%- endmacro %}\n\n{% macro default__create_view_as(relation, sql) -%}\n  create view {{ relation }} as (\n    {{ sql }}\n  );\n{% endmacro %}\n\n\n{% macro get_catalog(information_schemas) -%}\n  {{ return(adapter_macro('get_catalog', information_schemas)) }}\n{%- endmacro %}\n\n{% macro default__get_catalog(information_schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}\n\n\n{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter_macro('get_columns_in_relation', relation)) }}\n{% endmacro %}\n\n{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}\n\n{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}\n\n{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter_macro('alter_column_type', relation, column_name, new_column_type)) }}\n{% endmacro %}\n\n{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ tmp_column }} {{ new_column_type }};\n    update {{ relation }} set {{ tmp_column }} = {{ column_name }};\n    alter table {{ relation }} drop column {{ column_name }} cascade;\n    alter table {{ relation }} rename column {{ tmp_column }} to {{ column_name }}\n  {% endcall %}\n\n{% endmacro %}\n\n\n{% macro drop_relation(relation) -%}\n  {{ return(adapter_macro('drop_relation', relation)) }}\n{% endmacro %}\n\n\n{% macro default__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    drop {{ relation.type }} if exists {{ relation }} cascade\n  {%- endcall %}\n{% endmacro %}\n\n{% macro truncate_relation(relation) -%}\n  {{ return(adapter_macro('truncate_relation', relation)) }}\n{% endmacro %}\n\n\n{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}\n\n{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter_macro('rename_relation', from_relation, to_relation)) }}\n{% endmacro %}\n\n{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}\n\n\n{% macro information_schema_name(database) %}\n  {{ return(adapter_macro('information_schema_name', database)) }}\n{% endmacro %}\n\n{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ adapter.quote_as_configured(database, 'database') }}.information_schema\n  {%- else -%}\n    information_schema\n  {%- endif -%}\n{%- endmacro %}\n\n\n{% macro list_schemas(database) -%}\n  {{ return(adapter_macro('list_schemas', database)) }}\n{% endmacro %}\n\n{% macro default__list_schemas(database) -%}\n  {% call statement('list_schemas', fetch_result=True, auto_begin=False) %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.schemata\n    where catalog_name ilike '{{ database }}'\n  {% endcall %}\n  {{ return(load_result('list_schemas').table) }}\n{% endmacro %}\n\n\n{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter_macro('check_schema_exists', information_schema, schema)) }}\n{% endmacro %}\n\n{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% call statement('check_schema_exists', fetch_result=True, auto_begin=False) -%}\n        select count(*)\n        from {{ information_schema }}.schemata\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{% endmacro %}\n\n\n{% macro list_relations_without_caching(information_schema, schema) %}\n  {{ return(adapter_macro('list_relations_without_caching', information_schema, schema)) }}\n{% endmacro %}\n\n\n{% macro default__list_relations_without_caching(information_schema, schema) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}\n\n\n{% macro current_timestamp() -%}\n  {{ adapter_macro('current_timestamp') }}\n{%- endmacro %}\n\n\n{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter '+adapter.type()) }}\n{%- endmacro %}\n\n\n{% macro collect_freshness(source, loaded_at_field) %}\n  {{ return(adapter_macro('collect_freshness', source, loaded_at_field))}}\n{% endmacro %}\n\n\n{% macro default__collect_freshness(source, loaded_at_field) %}\n  {% call statement('check_schema_exists', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n  {% endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{% endmacro %}\n\n{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter_macro('make_temp_relation', base_relation, suffix))}}\n{% endmacro %}\n\n{% macro default__make_temp_relation(base_relation, suffix) %}\n    {% set tmp_identifier = base_relation.identifier ~ suffix %}\n    {% set tmp_relation = base_relation.incorporate(\n                                path={\"identifier\": tmp_identifier},\n                                table_name=tmp_identifier) -%}\n\n    {% do return(tmp_relation) %}\n{% endmacro %}", "root_path": "/Users/mrich/.local/share/virtualenvs/quasar-qaRV2YEO/lib/python3.7/site-packages/dbt/include/global_project", "name": "create_view_as", "unique_id": "macro.dbt.create_view_as", "tags": [], "resource_type": "macro", "depends_on": {"macros": []}}, "macro.dbt.default__create_view_as": {"path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "package_name": "dbt", "raw_sql": "{% macro adapter_macro(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        In adapter_macro: could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set separator = '__' -%}\n  {%- set search_name = adapter.type() + separator + name -%}\n  {%- set default_name = 'default' + separator + name -%}\n\n  {%- if package_context.get(search_name) is not none -%}\n    {{ return(package_context[search_name](*varargs, **kwargs)) }}\n  {%- else -%}\n    {{ return(package_context[default_name](*varargs, **kwargs)) }}\n  {%- endif -%}\n{%- endmacro %}\n\n{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter_macro('get_columns_in_query', select_sql)) }}\n{% endmacro %}\n\n{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        select * from (\n            {{ select_sql }}\n        ) as __dbt_sbq\n        where false\n        limit 0\n    {% endcall %}\n\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}\n\n{% macro create_schema(database_name, schema_name) -%}\n  {{ adapter_macro('create_schema', database_name, schema_name) }}\n{% endmacro %}\n\n{% macro default__create_schema(database_name, schema_name) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{database_name}}.{{schema_name}}\n  {% endcall %}\n{% endmacro %}\n\n{% macro drop_schema(database_name, schema_name) -%}\n  {{ adapter_macro('drop_schema', database_name, schema_name) }}\n{% endmacro %}\n\n{% macro default__drop_schema(database_name, schema_name) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{database_name}}.{{schema_name}} cascade\n  {% endcall %}\n{% endmacro %}\n\n{% macro create_table_as(temporary, relation, sql) -%}\n  {{ adapter_macro('create_table_as', temporary, relation, sql) }}\n{%- endmacro %}\n\n{% macro default__create_table_as(temporary, relation, sql) -%}\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  as (\n    {{ sql }}\n  );\n{% endmacro %}\n\n{% macro create_view_as(relation, sql) -%}\n  {{ adapter_macro('create_view_as', relation, sql) }}\n{%- endmacro %}\n\n{% macro default__create_view_as(relation, sql) -%}\n  create view {{ relation }} as (\n    {{ sql }}\n  );\n{% endmacro %}\n\n\n{% macro get_catalog(information_schemas) -%}\n  {{ return(adapter_macro('get_catalog', information_schemas)) }}\n{%- endmacro %}\n\n{% macro default__get_catalog(information_schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}\n\n\n{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter_macro('get_columns_in_relation', relation)) }}\n{% endmacro %}\n\n{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}\n\n{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}\n\n{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter_macro('alter_column_type', relation, column_name, new_column_type)) }}\n{% endmacro %}\n\n{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ tmp_column }} {{ new_column_type }};\n    update {{ relation }} set {{ tmp_column }} = {{ column_name }};\n    alter table {{ relation }} drop column {{ column_name }} cascade;\n    alter table {{ relation }} rename column {{ tmp_column }} to {{ column_name }}\n  {% endcall %}\n\n{% endmacro %}\n\n\n{% macro drop_relation(relation) -%}\n  {{ return(adapter_macro('drop_relation', relation)) }}\n{% endmacro %}\n\n\n{% macro default__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    drop {{ relation.type }} if exists {{ relation }} cascade\n  {%- endcall %}\n{% endmacro %}\n\n{% macro truncate_relation(relation) -%}\n  {{ return(adapter_macro('truncate_relation', relation)) }}\n{% endmacro %}\n\n\n{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}\n\n{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter_macro('rename_relation', from_relation, to_relation)) }}\n{% endmacro %}\n\n{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}\n\n\n{% macro information_schema_name(database) %}\n  {{ return(adapter_macro('information_schema_name', database)) }}\n{% endmacro %}\n\n{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ adapter.quote_as_configured(database, 'database') }}.information_schema\n  {%- else -%}\n    information_schema\n  {%- endif -%}\n{%- endmacro %}\n\n\n{% macro list_schemas(database) -%}\n  {{ return(adapter_macro('list_schemas', database)) }}\n{% endmacro %}\n\n{% macro default__list_schemas(database) -%}\n  {% call statement('list_schemas', fetch_result=True, auto_begin=False) %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.schemata\n    where catalog_name ilike '{{ database }}'\n  {% endcall %}\n  {{ return(load_result('list_schemas').table) }}\n{% endmacro %}\n\n\n{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter_macro('check_schema_exists', information_schema, schema)) }}\n{% endmacro %}\n\n{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% call statement('check_schema_exists', fetch_result=True, auto_begin=False) -%}\n        select count(*)\n        from {{ information_schema }}.schemata\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{% endmacro %}\n\n\n{% macro list_relations_without_caching(information_schema, schema) %}\n  {{ return(adapter_macro('list_relations_without_caching', information_schema, schema)) }}\n{% endmacro %}\n\n\n{% macro default__list_relations_without_caching(information_schema, schema) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}\n\n\n{% macro current_timestamp() -%}\n  {{ adapter_macro('current_timestamp') }}\n{%- endmacro %}\n\n\n{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter '+adapter.type()) }}\n{%- endmacro %}\n\n\n{% macro collect_freshness(source, loaded_at_field) %}\n  {{ return(adapter_macro('collect_freshness', source, loaded_at_field))}}\n{% endmacro %}\n\n\n{% macro default__collect_freshness(source, loaded_at_field) %}\n  {% call statement('check_schema_exists', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n  {% endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{% endmacro %}\n\n{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter_macro('make_temp_relation', base_relation, suffix))}}\n{% endmacro %}\n\n{% macro default__make_temp_relation(base_relation, suffix) %}\n    {% set tmp_identifier = base_relation.identifier ~ suffix %}\n    {% set tmp_relation = base_relation.incorporate(\n                                path={\"identifier\": tmp_identifier},\n                                table_name=tmp_identifier) -%}\n\n    {% do return(tmp_relation) %}\n{% endmacro %}", "root_path": "/Users/mrich/.local/share/virtualenvs/quasar-qaRV2YEO/lib/python3.7/site-packages/dbt/include/global_project", "name": "default__create_view_as", "unique_id": "macro.dbt.default__create_view_as", "tags": [], "resource_type": "macro", "depends_on": {"macros": []}}, "macro.dbt.get_catalog": {"path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "package_name": "dbt", "raw_sql": "{% macro adapter_macro(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        In adapter_macro: could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set separator = '__' -%}\n  {%- set search_name = adapter.type() + separator + name -%}\n  {%- set default_name = 'default' + separator + name -%}\n\n  {%- if package_context.get(search_name) is not none -%}\n    {{ return(package_context[search_name](*varargs, **kwargs)) }}\n  {%- else -%}\n    {{ return(package_context[default_name](*varargs, **kwargs)) }}\n  {%- endif -%}\n{%- endmacro %}\n\n{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter_macro('get_columns_in_query', select_sql)) }}\n{% endmacro %}\n\n{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        select * from (\n            {{ select_sql }}\n        ) as __dbt_sbq\n        where false\n        limit 0\n    {% endcall %}\n\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}\n\n{% macro create_schema(database_name, schema_name) -%}\n  {{ adapter_macro('create_schema', database_name, schema_name) }}\n{% endmacro %}\n\n{% macro default__create_schema(database_name, schema_name) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{database_name}}.{{schema_name}}\n  {% endcall %}\n{% endmacro %}\n\n{% macro drop_schema(database_name, schema_name) -%}\n  {{ adapter_macro('drop_schema', database_name, schema_name) }}\n{% endmacro %}\n\n{% macro default__drop_schema(database_name, schema_name) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{database_name}}.{{schema_name}} cascade\n  {% endcall %}\n{% endmacro %}\n\n{% macro create_table_as(temporary, relation, sql) -%}\n  {{ adapter_macro('create_table_as', temporary, relation, sql) }}\n{%- endmacro %}\n\n{% macro default__create_table_as(temporary, relation, sql) -%}\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  as (\n    {{ sql }}\n  );\n{% endmacro %}\n\n{% macro create_view_as(relation, sql) -%}\n  {{ adapter_macro('create_view_as', relation, sql) }}\n{%- endmacro %}\n\n{% macro default__create_view_as(relation, sql) -%}\n  create view {{ relation }} as (\n    {{ sql }}\n  );\n{% endmacro %}\n\n\n{% macro get_catalog(information_schemas) -%}\n  {{ return(adapter_macro('get_catalog', information_schemas)) }}\n{%- endmacro %}\n\n{% macro default__get_catalog(information_schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}\n\n\n{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter_macro('get_columns_in_relation', relation)) }}\n{% endmacro %}\n\n{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}\n\n{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}\n\n{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter_macro('alter_column_type', relation, column_name, new_column_type)) }}\n{% endmacro %}\n\n{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ tmp_column }} {{ new_column_type }};\n    update {{ relation }} set {{ tmp_column }} = {{ column_name }};\n    alter table {{ relation }} drop column {{ column_name }} cascade;\n    alter table {{ relation }} rename column {{ tmp_column }} to {{ column_name }}\n  {% endcall %}\n\n{% endmacro %}\n\n\n{% macro drop_relation(relation) -%}\n  {{ return(adapter_macro('drop_relation', relation)) }}\n{% endmacro %}\n\n\n{% macro default__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    drop {{ relation.type }} if exists {{ relation }} cascade\n  {%- endcall %}\n{% endmacro %}\n\n{% macro truncate_relation(relation) -%}\n  {{ return(adapter_macro('truncate_relation', relation)) }}\n{% endmacro %}\n\n\n{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}\n\n{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter_macro('rename_relation', from_relation, to_relation)) }}\n{% endmacro %}\n\n{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}\n\n\n{% macro information_schema_name(database) %}\n  {{ return(adapter_macro('information_schema_name', database)) }}\n{% endmacro %}\n\n{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ adapter.quote_as_configured(database, 'database') }}.information_schema\n  {%- else -%}\n    information_schema\n  {%- endif -%}\n{%- endmacro %}\n\n\n{% macro list_schemas(database) -%}\n  {{ return(adapter_macro('list_schemas', database)) }}\n{% endmacro %}\n\n{% macro default__list_schemas(database) -%}\n  {% call statement('list_schemas', fetch_result=True, auto_begin=False) %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.schemata\n    where catalog_name ilike '{{ database }}'\n  {% endcall %}\n  {{ return(load_result('list_schemas').table) }}\n{% endmacro %}\n\n\n{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter_macro('check_schema_exists', information_schema, schema)) }}\n{% endmacro %}\n\n{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% call statement('check_schema_exists', fetch_result=True, auto_begin=False) -%}\n        select count(*)\n        from {{ information_schema }}.schemata\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{% endmacro %}\n\n\n{% macro list_relations_without_caching(information_schema, schema) %}\n  {{ return(adapter_macro('list_relations_without_caching', information_schema, schema)) }}\n{% endmacro %}\n\n\n{% macro default__list_relations_without_caching(information_schema, schema) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}\n\n\n{% macro current_timestamp() -%}\n  {{ adapter_macro('current_timestamp') }}\n{%- endmacro %}\n\n\n{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter '+adapter.type()) }}\n{%- endmacro %}\n\n\n{% macro collect_freshness(source, loaded_at_field) %}\n  {{ return(adapter_macro('collect_freshness', source, loaded_at_field))}}\n{% endmacro %}\n\n\n{% macro default__collect_freshness(source, loaded_at_field) %}\n  {% call statement('check_schema_exists', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n  {% endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{% endmacro %}\n\n{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter_macro('make_temp_relation', base_relation, suffix))}}\n{% endmacro %}\n\n{% macro default__make_temp_relation(base_relation, suffix) %}\n    {% set tmp_identifier = base_relation.identifier ~ suffix %}\n    {% set tmp_relation = base_relation.incorporate(\n                                path={\"identifier\": tmp_identifier},\n                                table_name=tmp_identifier) -%}\n\n    {% do return(tmp_relation) %}\n{% endmacro %}", "root_path": "/Users/mrich/.local/share/virtualenvs/quasar-qaRV2YEO/lib/python3.7/site-packages/dbt/include/global_project", "name": "get_catalog", "unique_id": "macro.dbt.get_catalog", "tags": [], "resource_type": "macro", "depends_on": {"macros": []}}, "macro.dbt.default__get_catalog": {"path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "package_name": "dbt", "raw_sql": "{% macro adapter_macro(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        In adapter_macro: could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set separator = '__' -%}\n  {%- set search_name = adapter.type() + separator + name -%}\n  {%- set default_name = 'default' + separator + name -%}\n\n  {%- if package_context.get(search_name) is not none -%}\n    {{ return(package_context[search_name](*varargs, **kwargs)) }}\n  {%- else -%}\n    {{ return(package_context[default_name](*varargs, **kwargs)) }}\n  {%- endif -%}\n{%- endmacro %}\n\n{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter_macro('get_columns_in_query', select_sql)) }}\n{% endmacro %}\n\n{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        select * from (\n            {{ select_sql }}\n        ) as __dbt_sbq\n        where false\n        limit 0\n    {% endcall %}\n\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}\n\n{% macro create_schema(database_name, schema_name) -%}\n  {{ adapter_macro('create_schema', database_name, schema_name) }}\n{% endmacro %}\n\n{% macro default__create_schema(database_name, schema_name) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{database_name}}.{{schema_name}}\n  {% endcall %}\n{% endmacro %}\n\n{% macro drop_schema(database_name, schema_name) -%}\n  {{ adapter_macro('drop_schema', database_name, schema_name) }}\n{% endmacro %}\n\n{% macro default__drop_schema(database_name, schema_name) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{database_name}}.{{schema_name}} cascade\n  {% endcall %}\n{% endmacro %}\n\n{% macro create_table_as(temporary, relation, sql) -%}\n  {{ adapter_macro('create_table_as', temporary, relation, sql) }}\n{%- endmacro %}\n\n{% macro default__create_table_as(temporary, relation, sql) -%}\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  as (\n    {{ sql }}\n  );\n{% endmacro %}\n\n{% macro create_view_as(relation, sql) -%}\n  {{ adapter_macro('create_view_as', relation, sql) }}\n{%- endmacro %}\n\n{% macro default__create_view_as(relation, sql) -%}\n  create view {{ relation }} as (\n    {{ sql }}\n  );\n{% endmacro %}\n\n\n{% macro get_catalog(information_schemas) -%}\n  {{ return(adapter_macro('get_catalog', information_schemas)) }}\n{%- endmacro %}\n\n{% macro default__get_catalog(information_schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}\n\n\n{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter_macro('get_columns_in_relation', relation)) }}\n{% endmacro %}\n\n{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}\n\n{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}\n\n{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter_macro('alter_column_type', relation, column_name, new_column_type)) }}\n{% endmacro %}\n\n{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ tmp_column }} {{ new_column_type }};\n    update {{ relation }} set {{ tmp_column }} = {{ column_name }};\n    alter table {{ relation }} drop column {{ column_name }} cascade;\n    alter table {{ relation }} rename column {{ tmp_column }} to {{ column_name }}\n  {% endcall %}\n\n{% endmacro %}\n\n\n{% macro drop_relation(relation) -%}\n  {{ return(adapter_macro('drop_relation', relation)) }}\n{% endmacro %}\n\n\n{% macro default__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    drop {{ relation.type }} if exists {{ relation }} cascade\n  {%- endcall %}\n{% endmacro %}\n\n{% macro truncate_relation(relation) -%}\n  {{ return(adapter_macro('truncate_relation', relation)) }}\n{% endmacro %}\n\n\n{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}\n\n{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter_macro('rename_relation', from_relation, to_relation)) }}\n{% endmacro %}\n\n{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}\n\n\n{% macro information_schema_name(database) %}\n  {{ return(adapter_macro('information_schema_name', database)) }}\n{% endmacro %}\n\n{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ adapter.quote_as_configured(database, 'database') }}.information_schema\n  {%- else -%}\n    information_schema\n  {%- endif -%}\n{%- endmacro %}\n\n\n{% macro list_schemas(database) -%}\n  {{ return(adapter_macro('list_schemas', database)) }}\n{% endmacro %}\n\n{% macro default__list_schemas(database) -%}\n  {% call statement('list_schemas', fetch_result=True, auto_begin=False) %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.schemata\n    where catalog_name ilike '{{ database }}'\n  {% endcall %}\n  {{ return(load_result('list_schemas').table) }}\n{% endmacro %}\n\n\n{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter_macro('check_schema_exists', information_schema, schema)) }}\n{% endmacro %}\n\n{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% call statement('check_schema_exists', fetch_result=True, auto_begin=False) -%}\n        select count(*)\n        from {{ information_schema }}.schemata\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{% endmacro %}\n\n\n{% macro list_relations_without_caching(information_schema, schema) %}\n  {{ return(adapter_macro('list_relations_without_caching', information_schema, schema)) }}\n{% endmacro %}\n\n\n{% macro default__list_relations_without_caching(information_schema, schema) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}\n\n\n{% macro current_timestamp() -%}\n  {{ adapter_macro('current_timestamp') }}\n{%- endmacro %}\n\n\n{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter '+adapter.type()) }}\n{%- endmacro %}\n\n\n{% macro collect_freshness(source, loaded_at_field) %}\n  {{ return(adapter_macro('collect_freshness', source, loaded_at_field))}}\n{% endmacro %}\n\n\n{% macro default__collect_freshness(source, loaded_at_field) %}\n  {% call statement('check_schema_exists', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n  {% endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{% endmacro %}\n\n{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter_macro('make_temp_relation', base_relation, suffix))}}\n{% endmacro %}\n\n{% macro default__make_temp_relation(base_relation, suffix) %}\n    {% set tmp_identifier = base_relation.identifier ~ suffix %}\n    {% set tmp_relation = base_relation.incorporate(\n                                path={\"identifier\": tmp_identifier},\n                                table_name=tmp_identifier) -%}\n\n    {% do return(tmp_relation) %}\n{% endmacro %}", "root_path": "/Users/mrich/.local/share/virtualenvs/quasar-qaRV2YEO/lib/python3.7/site-packages/dbt/include/global_project", "name": "default__get_catalog", "unique_id": "macro.dbt.default__get_catalog", "tags": [], "resource_type": "macro", "depends_on": {"macros": []}}, "macro.dbt.get_columns_in_relation": {"path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "package_name": "dbt", "raw_sql": "{% macro adapter_macro(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        In adapter_macro: could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set separator = '__' -%}\n  {%- set search_name = adapter.type() + separator + name -%}\n  {%- set default_name = 'default' + separator + name -%}\n\n  {%- if package_context.get(search_name) is not none -%}\n    {{ return(package_context[search_name](*varargs, **kwargs)) }}\n  {%- else -%}\n    {{ return(package_context[default_name](*varargs, **kwargs)) }}\n  {%- endif -%}\n{%- endmacro %}\n\n{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter_macro('get_columns_in_query', select_sql)) }}\n{% endmacro %}\n\n{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        select * from (\n            {{ select_sql }}\n        ) as __dbt_sbq\n        where false\n        limit 0\n    {% endcall %}\n\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}\n\n{% macro create_schema(database_name, schema_name) -%}\n  {{ adapter_macro('create_schema', database_name, schema_name) }}\n{% endmacro %}\n\n{% macro default__create_schema(database_name, schema_name) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{database_name}}.{{schema_name}}\n  {% endcall %}\n{% endmacro %}\n\n{% macro drop_schema(database_name, schema_name) -%}\n  {{ adapter_macro('drop_schema', database_name, schema_name) }}\n{% endmacro %}\n\n{% macro default__drop_schema(database_name, schema_name) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{database_name}}.{{schema_name}} cascade\n  {% endcall %}\n{% endmacro %}\n\n{% macro create_table_as(temporary, relation, sql) -%}\n  {{ adapter_macro('create_table_as', temporary, relation, sql) }}\n{%- endmacro %}\n\n{% macro default__create_table_as(temporary, relation, sql) -%}\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  as (\n    {{ sql }}\n  );\n{% endmacro %}\n\n{% macro create_view_as(relation, sql) -%}\n  {{ adapter_macro('create_view_as', relation, sql) }}\n{%- endmacro %}\n\n{% macro default__create_view_as(relation, sql) -%}\n  create view {{ relation }} as (\n    {{ sql }}\n  );\n{% endmacro %}\n\n\n{% macro get_catalog(information_schemas) -%}\n  {{ return(adapter_macro('get_catalog', information_schemas)) }}\n{%- endmacro %}\n\n{% macro default__get_catalog(information_schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}\n\n\n{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter_macro('get_columns_in_relation', relation)) }}\n{% endmacro %}\n\n{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}\n\n{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}\n\n{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter_macro('alter_column_type', relation, column_name, new_column_type)) }}\n{% endmacro %}\n\n{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ tmp_column }} {{ new_column_type }};\n    update {{ relation }} set {{ tmp_column }} = {{ column_name }};\n    alter table {{ relation }} drop column {{ column_name }} cascade;\n    alter table {{ relation }} rename column {{ tmp_column }} to {{ column_name }}\n  {% endcall %}\n\n{% endmacro %}\n\n\n{% macro drop_relation(relation) -%}\n  {{ return(adapter_macro('drop_relation', relation)) }}\n{% endmacro %}\n\n\n{% macro default__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    drop {{ relation.type }} if exists {{ relation }} cascade\n  {%- endcall %}\n{% endmacro %}\n\n{% macro truncate_relation(relation) -%}\n  {{ return(adapter_macro('truncate_relation', relation)) }}\n{% endmacro %}\n\n\n{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}\n\n{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter_macro('rename_relation', from_relation, to_relation)) }}\n{% endmacro %}\n\n{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}\n\n\n{% macro information_schema_name(database) %}\n  {{ return(adapter_macro('information_schema_name', database)) }}\n{% endmacro %}\n\n{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ adapter.quote_as_configured(database, 'database') }}.information_schema\n  {%- else -%}\n    information_schema\n  {%- endif -%}\n{%- endmacro %}\n\n\n{% macro list_schemas(database) -%}\n  {{ return(adapter_macro('list_schemas', database)) }}\n{% endmacro %}\n\n{% macro default__list_schemas(database) -%}\n  {% call statement('list_schemas', fetch_result=True, auto_begin=False) %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.schemata\n    where catalog_name ilike '{{ database }}'\n  {% endcall %}\n  {{ return(load_result('list_schemas').table) }}\n{% endmacro %}\n\n\n{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter_macro('check_schema_exists', information_schema, schema)) }}\n{% endmacro %}\n\n{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% call statement('check_schema_exists', fetch_result=True, auto_begin=False) -%}\n        select count(*)\n        from {{ information_schema }}.schemata\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{% endmacro %}\n\n\n{% macro list_relations_without_caching(information_schema, schema) %}\n  {{ return(adapter_macro('list_relations_without_caching', information_schema, schema)) }}\n{% endmacro %}\n\n\n{% macro default__list_relations_without_caching(information_schema, schema) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}\n\n\n{% macro current_timestamp() -%}\n  {{ adapter_macro('current_timestamp') }}\n{%- endmacro %}\n\n\n{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter '+adapter.type()) }}\n{%- endmacro %}\n\n\n{% macro collect_freshness(source, loaded_at_field) %}\n  {{ return(adapter_macro('collect_freshness', source, loaded_at_field))}}\n{% endmacro %}\n\n\n{% macro default__collect_freshness(source, loaded_at_field) %}\n  {% call statement('check_schema_exists', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n  {% endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{% endmacro %}\n\n{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter_macro('make_temp_relation', base_relation, suffix))}}\n{% endmacro %}\n\n{% macro default__make_temp_relation(base_relation, suffix) %}\n    {% set tmp_identifier = base_relation.identifier ~ suffix %}\n    {% set tmp_relation = base_relation.incorporate(\n                                path={\"identifier\": tmp_identifier},\n                                table_name=tmp_identifier) -%}\n\n    {% do return(tmp_relation) %}\n{% endmacro %}", "root_path": "/Users/mrich/.local/share/virtualenvs/quasar-qaRV2YEO/lib/python3.7/site-packages/dbt/include/global_project", "name": "get_columns_in_relation", "unique_id": "macro.dbt.get_columns_in_relation", "tags": [], "resource_type": "macro", "depends_on": {"macros": []}}, "macro.dbt.sql_convert_columns_in_relation": {"path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "package_name": "dbt", "raw_sql": "{% macro adapter_macro(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        In adapter_macro: could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set separator = '__' -%}\n  {%- set search_name = adapter.type() + separator + name -%}\n  {%- set default_name = 'default' + separator + name -%}\n\n  {%- if package_context.get(search_name) is not none -%}\n    {{ return(package_context[search_name](*varargs, **kwargs)) }}\n  {%- else -%}\n    {{ return(package_context[default_name](*varargs, **kwargs)) }}\n  {%- endif -%}\n{%- endmacro %}\n\n{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter_macro('get_columns_in_query', select_sql)) }}\n{% endmacro %}\n\n{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        select * from (\n            {{ select_sql }}\n        ) as __dbt_sbq\n        where false\n        limit 0\n    {% endcall %}\n\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}\n\n{% macro create_schema(database_name, schema_name) -%}\n  {{ adapter_macro('create_schema', database_name, schema_name) }}\n{% endmacro %}\n\n{% macro default__create_schema(database_name, schema_name) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{database_name}}.{{schema_name}}\n  {% endcall %}\n{% endmacro %}\n\n{% macro drop_schema(database_name, schema_name) -%}\n  {{ adapter_macro('drop_schema', database_name, schema_name) }}\n{% endmacro %}\n\n{% macro default__drop_schema(database_name, schema_name) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{database_name}}.{{schema_name}} cascade\n  {% endcall %}\n{% endmacro %}\n\n{% macro create_table_as(temporary, relation, sql) -%}\n  {{ adapter_macro('create_table_as', temporary, relation, sql) }}\n{%- endmacro %}\n\n{% macro default__create_table_as(temporary, relation, sql) -%}\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  as (\n    {{ sql }}\n  );\n{% endmacro %}\n\n{% macro create_view_as(relation, sql) -%}\n  {{ adapter_macro('create_view_as', relation, sql) }}\n{%- endmacro %}\n\n{% macro default__create_view_as(relation, sql) -%}\n  create view {{ relation }} as (\n    {{ sql }}\n  );\n{% endmacro %}\n\n\n{% macro get_catalog(information_schemas) -%}\n  {{ return(adapter_macro('get_catalog', information_schemas)) }}\n{%- endmacro %}\n\n{% macro default__get_catalog(information_schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}\n\n\n{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter_macro('get_columns_in_relation', relation)) }}\n{% endmacro %}\n\n{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}\n\n{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}\n\n{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter_macro('alter_column_type', relation, column_name, new_column_type)) }}\n{% endmacro %}\n\n{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ tmp_column }} {{ new_column_type }};\n    update {{ relation }} set {{ tmp_column }} = {{ column_name }};\n    alter table {{ relation }} drop column {{ column_name }} cascade;\n    alter table {{ relation }} rename column {{ tmp_column }} to {{ column_name }}\n  {% endcall %}\n\n{% endmacro %}\n\n\n{% macro drop_relation(relation) -%}\n  {{ return(adapter_macro('drop_relation', relation)) }}\n{% endmacro %}\n\n\n{% macro default__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    drop {{ relation.type }} if exists {{ relation }} cascade\n  {%- endcall %}\n{% endmacro %}\n\n{% macro truncate_relation(relation) -%}\n  {{ return(adapter_macro('truncate_relation', relation)) }}\n{% endmacro %}\n\n\n{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}\n\n{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter_macro('rename_relation', from_relation, to_relation)) }}\n{% endmacro %}\n\n{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}\n\n\n{% macro information_schema_name(database) %}\n  {{ return(adapter_macro('information_schema_name', database)) }}\n{% endmacro %}\n\n{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ adapter.quote_as_configured(database, 'database') }}.information_schema\n  {%- else -%}\n    information_schema\n  {%- endif -%}\n{%- endmacro %}\n\n\n{% macro list_schemas(database) -%}\n  {{ return(adapter_macro('list_schemas', database)) }}\n{% endmacro %}\n\n{% macro default__list_schemas(database) -%}\n  {% call statement('list_schemas', fetch_result=True, auto_begin=False) %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.schemata\n    where catalog_name ilike '{{ database }}'\n  {% endcall %}\n  {{ return(load_result('list_schemas').table) }}\n{% endmacro %}\n\n\n{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter_macro('check_schema_exists', information_schema, schema)) }}\n{% endmacro %}\n\n{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% call statement('check_schema_exists', fetch_result=True, auto_begin=False) -%}\n        select count(*)\n        from {{ information_schema }}.schemata\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{% endmacro %}\n\n\n{% macro list_relations_without_caching(information_schema, schema) %}\n  {{ return(adapter_macro('list_relations_without_caching', information_schema, schema)) }}\n{% endmacro %}\n\n\n{% macro default__list_relations_without_caching(information_schema, schema) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}\n\n\n{% macro current_timestamp() -%}\n  {{ adapter_macro('current_timestamp') }}\n{%- endmacro %}\n\n\n{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter '+adapter.type()) }}\n{%- endmacro %}\n\n\n{% macro collect_freshness(source, loaded_at_field) %}\n  {{ return(adapter_macro('collect_freshness', source, loaded_at_field))}}\n{% endmacro %}\n\n\n{% macro default__collect_freshness(source, loaded_at_field) %}\n  {% call statement('check_schema_exists', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n  {% endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{% endmacro %}\n\n{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter_macro('make_temp_relation', base_relation, suffix))}}\n{% endmacro %}\n\n{% macro default__make_temp_relation(base_relation, suffix) %}\n    {% set tmp_identifier = base_relation.identifier ~ suffix %}\n    {% set tmp_relation = base_relation.incorporate(\n                                path={\"identifier\": tmp_identifier},\n                                table_name=tmp_identifier) -%}\n\n    {% do return(tmp_relation) %}\n{% endmacro %}", "root_path": "/Users/mrich/.local/share/virtualenvs/quasar-qaRV2YEO/lib/python3.7/site-packages/dbt/include/global_project", "name": "sql_convert_columns_in_relation", "unique_id": "macro.dbt.sql_convert_columns_in_relation", "tags": [], "resource_type": "macro", "depends_on": {"macros": []}}, "macro.dbt.default__get_columns_in_relation": {"path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "package_name": "dbt", "raw_sql": "{% macro adapter_macro(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        In adapter_macro: could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set separator = '__' -%}\n  {%- set search_name = adapter.type() + separator + name -%}\n  {%- set default_name = 'default' + separator + name -%}\n\n  {%- if package_context.get(search_name) is not none -%}\n    {{ return(package_context[search_name](*varargs, **kwargs)) }}\n  {%- else -%}\n    {{ return(package_context[default_name](*varargs, **kwargs)) }}\n  {%- endif -%}\n{%- endmacro %}\n\n{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter_macro('get_columns_in_query', select_sql)) }}\n{% endmacro %}\n\n{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        select * from (\n            {{ select_sql }}\n        ) as __dbt_sbq\n        where false\n        limit 0\n    {% endcall %}\n\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}\n\n{% macro create_schema(database_name, schema_name) -%}\n  {{ adapter_macro('create_schema', database_name, schema_name) }}\n{% endmacro %}\n\n{% macro default__create_schema(database_name, schema_name) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{database_name}}.{{schema_name}}\n  {% endcall %}\n{% endmacro %}\n\n{% macro drop_schema(database_name, schema_name) -%}\n  {{ adapter_macro('drop_schema', database_name, schema_name) }}\n{% endmacro %}\n\n{% macro default__drop_schema(database_name, schema_name) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{database_name}}.{{schema_name}} cascade\n  {% endcall %}\n{% endmacro %}\n\n{% macro create_table_as(temporary, relation, sql) -%}\n  {{ adapter_macro('create_table_as', temporary, relation, sql) }}\n{%- endmacro %}\n\n{% macro default__create_table_as(temporary, relation, sql) -%}\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  as (\n    {{ sql }}\n  );\n{% endmacro %}\n\n{% macro create_view_as(relation, sql) -%}\n  {{ adapter_macro('create_view_as', relation, sql) }}\n{%- endmacro %}\n\n{% macro default__create_view_as(relation, sql) -%}\n  create view {{ relation }} as (\n    {{ sql }}\n  );\n{% endmacro %}\n\n\n{% macro get_catalog(information_schemas) -%}\n  {{ return(adapter_macro('get_catalog', information_schemas)) }}\n{%- endmacro %}\n\n{% macro default__get_catalog(information_schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}\n\n\n{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter_macro('get_columns_in_relation', relation)) }}\n{% endmacro %}\n\n{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}\n\n{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}\n\n{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter_macro('alter_column_type', relation, column_name, new_column_type)) }}\n{% endmacro %}\n\n{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ tmp_column }} {{ new_column_type }};\n    update {{ relation }} set {{ tmp_column }} = {{ column_name }};\n    alter table {{ relation }} drop column {{ column_name }} cascade;\n    alter table {{ relation }} rename column {{ tmp_column }} to {{ column_name }}\n  {% endcall %}\n\n{% endmacro %}\n\n\n{% macro drop_relation(relation) -%}\n  {{ return(adapter_macro('drop_relation', relation)) }}\n{% endmacro %}\n\n\n{% macro default__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    drop {{ relation.type }} if exists {{ relation }} cascade\n  {%- endcall %}\n{% endmacro %}\n\n{% macro truncate_relation(relation) -%}\n  {{ return(adapter_macro('truncate_relation', relation)) }}\n{% endmacro %}\n\n\n{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}\n\n{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter_macro('rename_relation', from_relation, to_relation)) }}\n{% endmacro %}\n\n{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}\n\n\n{% macro information_schema_name(database) %}\n  {{ return(adapter_macro('information_schema_name', database)) }}\n{% endmacro %}\n\n{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ adapter.quote_as_configured(database, 'database') }}.information_schema\n  {%- else -%}\n    information_schema\n  {%- endif -%}\n{%- endmacro %}\n\n\n{% macro list_schemas(database) -%}\n  {{ return(adapter_macro('list_schemas', database)) }}\n{% endmacro %}\n\n{% macro default__list_schemas(database) -%}\n  {% call statement('list_schemas', fetch_result=True, auto_begin=False) %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.schemata\n    where catalog_name ilike '{{ database }}'\n  {% endcall %}\n  {{ return(load_result('list_schemas').table) }}\n{% endmacro %}\n\n\n{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter_macro('check_schema_exists', information_schema, schema)) }}\n{% endmacro %}\n\n{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% call statement('check_schema_exists', fetch_result=True, auto_begin=False) -%}\n        select count(*)\n        from {{ information_schema }}.schemata\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{% endmacro %}\n\n\n{% macro list_relations_without_caching(information_schema, schema) %}\n  {{ return(adapter_macro('list_relations_without_caching', information_schema, schema)) }}\n{% endmacro %}\n\n\n{% macro default__list_relations_without_caching(information_schema, schema) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}\n\n\n{% macro current_timestamp() -%}\n  {{ adapter_macro('current_timestamp') }}\n{%- endmacro %}\n\n\n{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter '+adapter.type()) }}\n{%- endmacro %}\n\n\n{% macro collect_freshness(source, loaded_at_field) %}\n  {{ return(adapter_macro('collect_freshness', source, loaded_at_field))}}\n{% endmacro %}\n\n\n{% macro default__collect_freshness(source, loaded_at_field) %}\n  {% call statement('check_schema_exists', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n  {% endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{% endmacro %}\n\n{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter_macro('make_temp_relation', base_relation, suffix))}}\n{% endmacro %}\n\n{% macro default__make_temp_relation(base_relation, suffix) %}\n    {% set tmp_identifier = base_relation.identifier ~ suffix %}\n    {% set tmp_relation = base_relation.incorporate(\n                                path={\"identifier\": tmp_identifier},\n                                table_name=tmp_identifier) -%}\n\n    {% do return(tmp_relation) %}\n{% endmacro %}", "root_path": "/Users/mrich/.local/share/virtualenvs/quasar-qaRV2YEO/lib/python3.7/site-packages/dbt/include/global_project", "name": "default__get_columns_in_relation", "unique_id": "macro.dbt.default__get_columns_in_relation", "tags": [], "resource_type": "macro", "depends_on": {"macros": []}}, "macro.dbt.alter_column_type": {"path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "package_name": "dbt", "raw_sql": "{% macro adapter_macro(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        In adapter_macro: could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set separator = '__' -%}\n  {%- set search_name = adapter.type() + separator + name -%}\n  {%- set default_name = 'default' + separator + name -%}\n\n  {%- if package_context.get(search_name) is not none -%}\n    {{ return(package_context[search_name](*varargs, **kwargs)) }}\n  {%- else -%}\n    {{ return(package_context[default_name](*varargs, **kwargs)) }}\n  {%- endif -%}\n{%- endmacro %}\n\n{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter_macro('get_columns_in_query', select_sql)) }}\n{% endmacro %}\n\n{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        select * from (\n            {{ select_sql }}\n        ) as __dbt_sbq\n        where false\n        limit 0\n    {% endcall %}\n\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}\n\n{% macro create_schema(database_name, schema_name) -%}\n  {{ adapter_macro('create_schema', database_name, schema_name) }}\n{% endmacro %}\n\n{% macro default__create_schema(database_name, schema_name) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{database_name}}.{{schema_name}}\n  {% endcall %}\n{% endmacro %}\n\n{% macro drop_schema(database_name, schema_name) -%}\n  {{ adapter_macro('drop_schema', database_name, schema_name) }}\n{% endmacro %}\n\n{% macro default__drop_schema(database_name, schema_name) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{database_name}}.{{schema_name}} cascade\n  {% endcall %}\n{% endmacro %}\n\n{% macro create_table_as(temporary, relation, sql) -%}\n  {{ adapter_macro('create_table_as', temporary, relation, sql) }}\n{%- endmacro %}\n\n{% macro default__create_table_as(temporary, relation, sql) -%}\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  as (\n    {{ sql }}\n  );\n{% endmacro %}\n\n{% macro create_view_as(relation, sql) -%}\n  {{ adapter_macro('create_view_as', relation, sql) }}\n{%- endmacro %}\n\n{% macro default__create_view_as(relation, sql) -%}\n  create view {{ relation }} as (\n    {{ sql }}\n  );\n{% endmacro %}\n\n\n{% macro get_catalog(information_schemas) -%}\n  {{ return(adapter_macro('get_catalog', information_schemas)) }}\n{%- endmacro %}\n\n{% macro default__get_catalog(information_schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}\n\n\n{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter_macro('get_columns_in_relation', relation)) }}\n{% endmacro %}\n\n{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}\n\n{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}\n\n{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter_macro('alter_column_type', relation, column_name, new_column_type)) }}\n{% endmacro %}\n\n{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ tmp_column }} {{ new_column_type }};\n    update {{ relation }} set {{ tmp_column }} = {{ column_name }};\n    alter table {{ relation }} drop column {{ column_name }} cascade;\n    alter table {{ relation }} rename column {{ tmp_column }} to {{ column_name }}\n  {% endcall %}\n\n{% endmacro %}\n\n\n{% macro drop_relation(relation) -%}\n  {{ return(adapter_macro('drop_relation', relation)) }}\n{% endmacro %}\n\n\n{% macro default__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    drop {{ relation.type }} if exists {{ relation }} cascade\n  {%- endcall %}\n{% endmacro %}\n\n{% macro truncate_relation(relation) -%}\n  {{ return(adapter_macro('truncate_relation', relation)) }}\n{% endmacro %}\n\n\n{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}\n\n{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter_macro('rename_relation', from_relation, to_relation)) }}\n{% endmacro %}\n\n{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}\n\n\n{% macro information_schema_name(database) %}\n  {{ return(adapter_macro('information_schema_name', database)) }}\n{% endmacro %}\n\n{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ adapter.quote_as_configured(database, 'database') }}.information_schema\n  {%- else -%}\n    information_schema\n  {%- endif -%}\n{%- endmacro %}\n\n\n{% macro list_schemas(database) -%}\n  {{ return(adapter_macro('list_schemas', database)) }}\n{% endmacro %}\n\n{% macro default__list_schemas(database) -%}\n  {% call statement('list_schemas', fetch_result=True, auto_begin=False) %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.schemata\n    where catalog_name ilike '{{ database }}'\n  {% endcall %}\n  {{ return(load_result('list_schemas').table) }}\n{% endmacro %}\n\n\n{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter_macro('check_schema_exists', information_schema, schema)) }}\n{% endmacro %}\n\n{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% call statement('check_schema_exists', fetch_result=True, auto_begin=False) -%}\n        select count(*)\n        from {{ information_schema }}.schemata\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{% endmacro %}\n\n\n{% macro list_relations_without_caching(information_schema, schema) %}\n  {{ return(adapter_macro('list_relations_without_caching', information_schema, schema)) }}\n{% endmacro %}\n\n\n{% macro default__list_relations_without_caching(information_schema, schema) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}\n\n\n{% macro current_timestamp() -%}\n  {{ adapter_macro('current_timestamp') }}\n{%- endmacro %}\n\n\n{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter '+adapter.type()) }}\n{%- endmacro %}\n\n\n{% macro collect_freshness(source, loaded_at_field) %}\n  {{ return(adapter_macro('collect_freshness', source, loaded_at_field))}}\n{% endmacro %}\n\n\n{% macro default__collect_freshness(source, loaded_at_field) %}\n  {% call statement('check_schema_exists', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n  {% endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{% endmacro %}\n\n{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter_macro('make_temp_relation', base_relation, suffix))}}\n{% endmacro %}\n\n{% macro default__make_temp_relation(base_relation, suffix) %}\n    {% set tmp_identifier = base_relation.identifier ~ suffix %}\n    {% set tmp_relation = base_relation.incorporate(\n                                path={\"identifier\": tmp_identifier},\n                                table_name=tmp_identifier) -%}\n\n    {% do return(tmp_relation) %}\n{% endmacro %}", "root_path": "/Users/mrich/.local/share/virtualenvs/quasar-qaRV2YEO/lib/python3.7/site-packages/dbt/include/global_project", "name": "alter_column_type", "unique_id": "macro.dbt.alter_column_type", "tags": [], "resource_type": "macro", "depends_on": {"macros": []}}, "macro.dbt.default__alter_column_type": {"path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "package_name": "dbt", "raw_sql": "{% macro adapter_macro(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        In adapter_macro: could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set separator = '__' -%}\n  {%- set search_name = adapter.type() + separator + name -%}\n  {%- set default_name = 'default' + separator + name -%}\n\n  {%- if package_context.get(search_name) is not none -%}\n    {{ return(package_context[search_name](*varargs, **kwargs)) }}\n  {%- else -%}\n    {{ return(package_context[default_name](*varargs, **kwargs)) }}\n  {%- endif -%}\n{%- endmacro %}\n\n{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter_macro('get_columns_in_query', select_sql)) }}\n{% endmacro %}\n\n{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        select * from (\n            {{ select_sql }}\n        ) as __dbt_sbq\n        where false\n        limit 0\n    {% endcall %}\n\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}\n\n{% macro create_schema(database_name, schema_name) -%}\n  {{ adapter_macro('create_schema', database_name, schema_name) }}\n{% endmacro %}\n\n{% macro default__create_schema(database_name, schema_name) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{database_name}}.{{schema_name}}\n  {% endcall %}\n{% endmacro %}\n\n{% macro drop_schema(database_name, schema_name) -%}\n  {{ adapter_macro('drop_schema', database_name, schema_name) }}\n{% endmacro %}\n\n{% macro default__drop_schema(database_name, schema_name) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{database_name}}.{{schema_name}} cascade\n  {% endcall %}\n{% endmacro %}\n\n{% macro create_table_as(temporary, relation, sql) -%}\n  {{ adapter_macro('create_table_as', temporary, relation, sql) }}\n{%- endmacro %}\n\n{% macro default__create_table_as(temporary, relation, sql) -%}\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  as (\n    {{ sql }}\n  );\n{% endmacro %}\n\n{% macro create_view_as(relation, sql) -%}\n  {{ adapter_macro('create_view_as', relation, sql) }}\n{%- endmacro %}\n\n{% macro default__create_view_as(relation, sql) -%}\n  create view {{ relation }} as (\n    {{ sql }}\n  );\n{% endmacro %}\n\n\n{% macro get_catalog(information_schemas) -%}\n  {{ return(adapter_macro('get_catalog', information_schemas)) }}\n{%- endmacro %}\n\n{% macro default__get_catalog(information_schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}\n\n\n{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter_macro('get_columns_in_relation', relation)) }}\n{% endmacro %}\n\n{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}\n\n{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}\n\n{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter_macro('alter_column_type', relation, column_name, new_column_type)) }}\n{% endmacro %}\n\n{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ tmp_column }} {{ new_column_type }};\n    update {{ relation }} set {{ tmp_column }} = {{ column_name }};\n    alter table {{ relation }} drop column {{ column_name }} cascade;\n    alter table {{ relation }} rename column {{ tmp_column }} to {{ column_name }}\n  {% endcall %}\n\n{% endmacro %}\n\n\n{% macro drop_relation(relation) -%}\n  {{ return(adapter_macro('drop_relation', relation)) }}\n{% endmacro %}\n\n\n{% macro default__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    drop {{ relation.type }} if exists {{ relation }} cascade\n  {%- endcall %}\n{% endmacro %}\n\n{% macro truncate_relation(relation) -%}\n  {{ return(adapter_macro('truncate_relation', relation)) }}\n{% endmacro %}\n\n\n{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}\n\n{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter_macro('rename_relation', from_relation, to_relation)) }}\n{% endmacro %}\n\n{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}\n\n\n{% macro information_schema_name(database) %}\n  {{ return(adapter_macro('information_schema_name', database)) }}\n{% endmacro %}\n\n{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ adapter.quote_as_configured(database, 'database') }}.information_schema\n  {%- else -%}\n    information_schema\n  {%- endif -%}\n{%- endmacro %}\n\n\n{% macro list_schemas(database) -%}\n  {{ return(adapter_macro('list_schemas', database)) }}\n{% endmacro %}\n\n{% macro default__list_schemas(database) -%}\n  {% call statement('list_schemas', fetch_result=True, auto_begin=False) %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.schemata\n    where catalog_name ilike '{{ database }}'\n  {% endcall %}\n  {{ return(load_result('list_schemas').table) }}\n{% endmacro %}\n\n\n{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter_macro('check_schema_exists', information_schema, schema)) }}\n{% endmacro %}\n\n{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% call statement('check_schema_exists', fetch_result=True, auto_begin=False) -%}\n        select count(*)\n        from {{ information_schema }}.schemata\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{% endmacro %}\n\n\n{% macro list_relations_without_caching(information_schema, schema) %}\n  {{ return(adapter_macro('list_relations_without_caching', information_schema, schema)) }}\n{% endmacro %}\n\n\n{% macro default__list_relations_without_caching(information_schema, schema) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}\n\n\n{% macro current_timestamp() -%}\n  {{ adapter_macro('current_timestamp') }}\n{%- endmacro %}\n\n\n{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter '+adapter.type()) }}\n{%- endmacro %}\n\n\n{% macro collect_freshness(source, loaded_at_field) %}\n  {{ return(adapter_macro('collect_freshness', source, loaded_at_field))}}\n{% endmacro %}\n\n\n{% macro default__collect_freshness(source, loaded_at_field) %}\n  {% call statement('check_schema_exists', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n  {% endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{% endmacro %}\n\n{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter_macro('make_temp_relation', base_relation, suffix))}}\n{% endmacro %}\n\n{% macro default__make_temp_relation(base_relation, suffix) %}\n    {% set tmp_identifier = base_relation.identifier ~ suffix %}\n    {% set tmp_relation = base_relation.incorporate(\n                                path={\"identifier\": tmp_identifier},\n                                table_name=tmp_identifier) -%}\n\n    {% do return(tmp_relation) %}\n{% endmacro %}", "root_path": "/Users/mrich/.local/share/virtualenvs/quasar-qaRV2YEO/lib/python3.7/site-packages/dbt/include/global_project", "name": "default__alter_column_type", "unique_id": "macro.dbt.default__alter_column_type", "tags": [], "resource_type": "macro", "depends_on": {"macros": []}}, "macro.dbt.drop_relation": {"path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "package_name": "dbt", "raw_sql": "{% macro adapter_macro(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        In adapter_macro: could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set separator = '__' -%}\n  {%- set search_name = adapter.type() + separator + name -%}\n  {%- set default_name = 'default' + separator + name -%}\n\n  {%- if package_context.get(search_name) is not none -%}\n    {{ return(package_context[search_name](*varargs, **kwargs)) }}\n  {%- else -%}\n    {{ return(package_context[default_name](*varargs, **kwargs)) }}\n  {%- endif -%}\n{%- endmacro %}\n\n{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter_macro('get_columns_in_query', select_sql)) }}\n{% endmacro %}\n\n{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        select * from (\n            {{ select_sql }}\n        ) as __dbt_sbq\n        where false\n        limit 0\n    {% endcall %}\n\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}\n\n{% macro create_schema(database_name, schema_name) -%}\n  {{ adapter_macro('create_schema', database_name, schema_name) }}\n{% endmacro %}\n\n{% macro default__create_schema(database_name, schema_name) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{database_name}}.{{schema_name}}\n  {% endcall %}\n{% endmacro %}\n\n{% macro drop_schema(database_name, schema_name) -%}\n  {{ adapter_macro('drop_schema', database_name, schema_name) }}\n{% endmacro %}\n\n{% macro default__drop_schema(database_name, schema_name) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{database_name}}.{{schema_name}} cascade\n  {% endcall %}\n{% endmacro %}\n\n{% macro create_table_as(temporary, relation, sql) -%}\n  {{ adapter_macro('create_table_as', temporary, relation, sql) }}\n{%- endmacro %}\n\n{% macro default__create_table_as(temporary, relation, sql) -%}\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  as (\n    {{ sql }}\n  );\n{% endmacro %}\n\n{% macro create_view_as(relation, sql) -%}\n  {{ adapter_macro('create_view_as', relation, sql) }}\n{%- endmacro %}\n\n{% macro default__create_view_as(relation, sql) -%}\n  create view {{ relation }} as (\n    {{ sql }}\n  );\n{% endmacro %}\n\n\n{% macro get_catalog(information_schemas) -%}\n  {{ return(adapter_macro('get_catalog', information_schemas)) }}\n{%- endmacro %}\n\n{% macro default__get_catalog(information_schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}\n\n\n{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter_macro('get_columns_in_relation', relation)) }}\n{% endmacro %}\n\n{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}\n\n{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}\n\n{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter_macro('alter_column_type', relation, column_name, new_column_type)) }}\n{% endmacro %}\n\n{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ tmp_column }} {{ new_column_type }};\n    update {{ relation }} set {{ tmp_column }} = {{ column_name }};\n    alter table {{ relation }} drop column {{ column_name }} cascade;\n    alter table {{ relation }} rename column {{ tmp_column }} to {{ column_name }}\n  {% endcall %}\n\n{% endmacro %}\n\n\n{% macro drop_relation(relation) -%}\n  {{ return(adapter_macro('drop_relation', relation)) }}\n{% endmacro %}\n\n\n{% macro default__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    drop {{ relation.type }} if exists {{ relation }} cascade\n  {%- endcall %}\n{% endmacro %}\n\n{% macro truncate_relation(relation) -%}\n  {{ return(adapter_macro('truncate_relation', relation)) }}\n{% endmacro %}\n\n\n{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}\n\n{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter_macro('rename_relation', from_relation, to_relation)) }}\n{% endmacro %}\n\n{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}\n\n\n{% macro information_schema_name(database) %}\n  {{ return(adapter_macro('information_schema_name', database)) }}\n{% endmacro %}\n\n{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ adapter.quote_as_configured(database, 'database') }}.information_schema\n  {%- else -%}\n    information_schema\n  {%- endif -%}\n{%- endmacro %}\n\n\n{% macro list_schemas(database) -%}\n  {{ return(adapter_macro('list_schemas', database)) }}\n{% endmacro %}\n\n{% macro default__list_schemas(database) -%}\n  {% call statement('list_schemas', fetch_result=True, auto_begin=False) %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.schemata\n    where catalog_name ilike '{{ database }}'\n  {% endcall %}\n  {{ return(load_result('list_schemas').table) }}\n{% endmacro %}\n\n\n{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter_macro('check_schema_exists', information_schema, schema)) }}\n{% endmacro %}\n\n{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% call statement('check_schema_exists', fetch_result=True, auto_begin=False) -%}\n        select count(*)\n        from {{ information_schema }}.schemata\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{% endmacro %}\n\n\n{% macro list_relations_without_caching(information_schema, schema) %}\n  {{ return(adapter_macro('list_relations_without_caching', information_schema, schema)) }}\n{% endmacro %}\n\n\n{% macro default__list_relations_without_caching(information_schema, schema) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}\n\n\n{% macro current_timestamp() -%}\n  {{ adapter_macro('current_timestamp') }}\n{%- endmacro %}\n\n\n{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter '+adapter.type()) }}\n{%- endmacro %}\n\n\n{% macro collect_freshness(source, loaded_at_field) %}\n  {{ return(adapter_macro('collect_freshness', source, loaded_at_field))}}\n{% endmacro %}\n\n\n{% macro default__collect_freshness(source, loaded_at_field) %}\n  {% call statement('check_schema_exists', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n  {% endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{% endmacro %}\n\n{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter_macro('make_temp_relation', base_relation, suffix))}}\n{% endmacro %}\n\n{% macro default__make_temp_relation(base_relation, suffix) %}\n    {% set tmp_identifier = base_relation.identifier ~ suffix %}\n    {% set tmp_relation = base_relation.incorporate(\n                                path={\"identifier\": tmp_identifier},\n                                table_name=tmp_identifier) -%}\n\n    {% do return(tmp_relation) %}\n{% endmacro %}", "root_path": "/Users/mrich/.local/share/virtualenvs/quasar-qaRV2YEO/lib/python3.7/site-packages/dbt/include/global_project", "name": "drop_relation", "unique_id": "macro.dbt.drop_relation", "tags": [], "resource_type": "macro", "depends_on": {"macros": []}}, "macro.dbt.default__drop_relation": {"path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "package_name": "dbt", "raw_sql": "{% macro adapter_macro(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        In adapter_macro: could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set separator = '__' -%}\n  {%- set search_name = adapter.type() + separator + name -%}\n  {%- set default_name = 'default' + separator + name -%}\n\n  {%- if package_context.get(search_name) is not none -%}\n    {{ return(package_context[search_name](*varargs, **kwargs)) }}\n  {%- else -%}\n    {{ return(package_context[default_name](*varargs, **kwargs)) }}\n  {%- endif -%}\n{%- endmacro %}\n\n{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter_macro('get_columns_in_query', select_sql)) }}\n{% endmacro %}\n\n{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        select * from (\n            {{ select_sql }}\n        ) as __dbt_sbq\n        where false\n        limit 0\n    {% endcall %}\n\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}\n\n{% macro create_schema(database_name, schema_name) -%}\n  {{ adapter_macro('create_schema', database_name, schema_name) }}\n{% endmacro %}\n\n{% macro default__create_schema(database_name, schema_name) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{database_name}}.{{schema_name}}\n  {% endcall %}\n{% endmacro %}\n\n{% macro drop_schema(database_name, schema_name) -%}\n  {{ adapter_macro('drop_schema', database_name, schema_name) }}\n{% endmacro %}\n\n{% macro default__drop_schema(database_name, schema_name) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{database_name}}.{{schema_name}} cascade\n  {% endcall %}\n{% endmacro %}\n\n{% macro create_table_as(temporary, relation, sql) -%}\n  {{ adapter_macro('create_table_as', temporary, relation, sql) }}\n{%- endmacro %}\n\n{% macro default__create_table_as(temporary, relation, sql) -%}\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  as (\n    {{ sql }}\n  );\n{% endmacro %}\n\n{% macro create_view_as(relation, sql) -%}\n  {{ adapter_macro('create_view_as', relation, sql) }}\n{%- endmacro %}\n\n{% macro default__create_view_as(relation, sql) -%}\n  create view {{ relation }} as (\n    {{ sql }}\n  );\n{% endmacro %}\n\n\n{% macro get_catalog(information_schemas) -%}\n  {{ return(adapter_macro('get_catalog', information_schemas)) }}\n{%- endmacro %}\n\n{% macro default__get_catalog(information_schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}\n\n\n{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter_macro('get_columns_in_relation', relation)) }}\n{% endmacro %}\n\n{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}\n\n{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}\n\n{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter_macro('alter_column_type', relation, column_name, new_column_type)) }}\n{% endmacro %}\n\n{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ tmp_column }} {{ new_column_type }};\n    update {{ relation }} set {{ tmp_column }} = {{ column_name }};\n    alter table {{ relation }} drop column {{ column_name }} cascade;\n    alter table {{ relation }} rename column {{ tmp_column }} to {{ column_name }}\n  {% endcall %}\n\n{% endmacro %}\n\n\n{% macro drop_relation(relation) -%}\n  {{ return(adapter_macro('drop_relation', relation)) }}\n{% endmacro %}\n\n\n{% macro default__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    drop {{ relation.type }} if exists {{ relation }} cascade\n  {%- endcall %}\n{% endmacro %}\n\n{% macro truncate_relation(relation) -%}\n  {{ return(adapter_macro('truncate_relation', relation)) }}\n{% endmacro %}\n\n\n{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}\n\n{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter_macro('rename_relation', from_relation, to_relation)) }}\n{% endmacro %}\n\n{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}\n\n\n{% macro information_schema_name(database) %}\n  {{ return(adapter_macro('information_schema_name', database)) }}\n{% endmacro %}\n\n{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ adapter.quote_as_configured(database, 'database') }}.information_schema\n  {%- else -%}\n    information_schema\n  {%- endif -%}\n{%- endmacro %}\n\n\n{% macro list_schemas(database) -%}\n  {{ return(adapter_macro('list_schemas', database)) }}\n{% endmacro %}\n\n{% macro default__list_schemas(database) -%}\n  {% call statement('list_schemas', fetch_result=True, auto_begin=False) %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.schemata\n    where catalog_name ilike '{{ database }}'\n  {% endcall %}\n  {{ return(load_result('list_schemas').table) }}\n{% endmacro %}\n\n\n{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter_macro('check_schema_exists', information_schema, schema)) }}\n{% endmacro %}\n\n{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% call statement('check_schema_exists', fetch_result=True, auto_begin=False) -%}\n        select count(*)\n        from {{ information_schema }}.schemata\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{% endmacro %}\n\n\n{% macro list_relations_without_caching(information_schema, schema) %}\n  {{ return(adapter_macro('list_relations_without_caching', information_schema, schema)) }}\n{% endmacro %}\n\n\n{% macro default__list_relations_without_caching(information_schema, schema) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}\n\n\n{% macro current_timestamp() -%}\n  {{ adapter_macro('current_timestamp') }}\n{%- endmacro %}\n\n\n{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter '+adapter.type()) }}\n{%- endmacro %}\n\n\n{% macro collect_freshness(source, loaded_at_field) %}\n  {{ return(adapter_macro('collect_freshness', source, loaded_at_field))}}\n{% endmacro %}\n\n\n{% macro default__collect_freshness(source, loaded_at_field) %}\n  {% call statement('check_schema_exists', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n  {% endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{% endmacro %}\n\n{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter_macro('make_temp_relation', base_relation, suffix))}}\n{% endmacro %}\n\n{% macro default__make_temp_relation(base_relation, suffix) %}\n    {% set tmp_identifier = base_relation.identifier ~ suffix %}\n    {% set tmp_relation = base_relation.incorporate(\n                                path={\"identifier\": tmp_identifier},\n                                table_name=tmp_identifier) -%}\n\n    {% do return(tmp_relation) %}\n{% endmacro %}", "root_path": "/Users/mrich/.local/share/virtualenvs/quasar-qaRV2YEO/lib/python3.7/site-packages/dbt/include/global_project", "name": "default__drop_relation", "unique_id": "macro.dbt.default__drop_relation", "tags": [], "resource_type": "macro", "depends_on": {"macros": []}}, "macro.dbt.truncate_relation": {"path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "package_name": "dbt", "raw_sql": "{% macro adapter_macro(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        In adapter_macro: could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set separator = '__' -%}\n  {%- set search_name = adapter.type() + separator + name -%}\n  {%- set default_name = 'default' + separator + name -%}\n\n  {%- if package_context.get(search_name) is not none -%}\n    {{ return(package_context[search_name](*varargs, **kwargs)) }}\n  {%- else -%}\n    {{ return(package_context[default_name](*varargs, **kwargs)) }}\n  {%- endif -%}\n{%- endmacro %}\n\n{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter_macro('get_columns_in_query', select_sql)) }}\n{% endmacro %}\n\n{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        select * from (\n            {{ select_sql }}\n        ) as __dbt_sbq\n        where false\n        limit 0\n    {% endcall %}\n\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}\n\n{% macro create_schema(database_name, schema_name) -%}\n  {{ adapter_macro('create_schema', database_name, schema_name) }}\n{% endmacro %}\n\n{% macro default__create_schema(database_name, schema_name) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{database_name}}.{{schema_name}}\n  {% endcall %}\n{% endmacro %}\n\n{% macro drop_schema(database_name, schema_name) -%}\n  {{ adapter_macro('drop_schema', database_name, schema_name) }}\n{% endmacro %}\n\n{% macro default__drop_schema(database_name, schema_name) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{database_name}}.{{schema_name}} cascade\n  {% endcall %}\n{% endmacro %}\n\n{% macro create_table_as(temporary, relation, sql) -%}\n  {{ adapter_macro('create_table_as', temporary, relation, sql) }}\n{%- endmacro %}\n\n{% macro default__create_table_as(temporary, relation, sql) -%}\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  as (\n    {{ sql }}\n  );\n{% endmacro %}\n\n{% macro create_view_as(relation, sql) -%}\n  {{ adapter_macro('create_view_as', relation, sql) }}\n{%- endmacro %}\n\n{% macro default__create_view_as(relation, sql) -%}\n  create view {{ relation }} as (\n    {{ sql }}\n  );\n{% endmacro %}\n\n\n{% macro get_catalog(information_schemas) -%}\n  {{ return(adapter_macro('get_catalog', information_schemas)) }}\n{%- endmacro %}\n\n{% macro default__get_catalog(information_schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}\n\n\n{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter_macro('get_columns_in_relation', relation)) }}\n{% endmacro %}\n\n{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}\n\n{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}\n\n{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter_macro('alter_column_type', relation, column_name, new_column_type)) }}\n{% endmacro %}\n\n{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ tmp_column }} {{ new_column_type }};\n    update {{ relation }} set {{ tmp_column }} = {{ column_name }};\n    alter table {{ relation }} drop column {{ column_name }} cascade;\n    alter table {{ relation }} rename column {{ tmp_column }} to {{ column_name }}\n  {% endcall %}\n\n{% endmacro %}\n\n\n{% macro drop_relation(relation) -%}\n  {{ return(adapter_macro('drop_relation', relation)) }}\n{% endmacro %}\n\n\n{% macro default__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    drop {{ relation.type }} if exists {{ relation }} cascade\n  {%- endcall %}\n{% endmacro %}\n\n{% macro truncate_relation(relation) -%}\n  {{ return(adapter_macro('truncate_relation', relation)) }}\n{% endmacro %}\n\n\n{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}\n\n{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter_macro('rename_relation', from_relation, to_relation)) }}\n{% endmacro %}\n\n{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}\n\n\n{% macro information_schema_name(database) %}\n  {{ return(adapter_macro('information_schema_name', database)) }}\n{% endmacro %}\n\n{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ adapter.quote_as_configured(database, 'database') }}.information_schema\n  {%- else -%}\n    information_schema\n  {%- endif -%}\n{%- endmacro %}\n\n\n{% macro list_schemas(database) -%}\n  {{ return(adapter_macro('list_schemas', database)) }}\n{% endmacro %}\n\n{% macro default__list_schemas(database) -%}\n  {% call statement('list_schemas', fetch_result=True, auto_begin=False) %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.schemata\n    where catalog_name ilike '{{ database }}'\n  {% endcall %}\n  {{ return(load_result('list_schemas').table) }}\n{% endmacro %}\n\n\n{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter_macro('check_schema_exists', information_schema, schema)) }}\n{% endmacro %}\n\n{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% call statement('check_schema_exists', fetch_result=True, auto_begin=False) -%}\n        select count(*)\n        from {{ information_schema }}.schemata\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{% endmacro %}\n\n\n{% macro list_relations_without_caching(information_schema, schema) %}\n  {{ return(adapter_macro('list_relations_without_caching', information_schema, schema)) }}\n{% endmacro %}\n\n\n{% macro default__list_relations_without_caching(information_schema, schema) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}\n\n\n{% macro current_timestamp() -%}\n  {{ adapter_macro('current_timestamp') }}\n{%- endmacro %}\n\n\n{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter '+adapter.type()) }}\n{%- endmacro %}\n\n\n{% macro collect_freshness(source, loaded_at_field) %}\n  {{ return(adapter_macro('collect_freshness', source, loaded_at_field))}}\n{% endmacro %}\n\n\n{% macro default__collect_freshness(source, loaded_at_field) %}\n  {% call statement('check_schema_exists', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n  {% endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{% endmacro %}\n\n{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter_macro('make_temp_relation', base_relation, suffix))}}\n{% endmacro %}\n\n{% macro default__make_temp_relation(base_relation, suffix) %}\n    {% set tmp_identifier = base_relation.identifier ~ suffix %}\n    {% set tmp_relation = base_relation.incorporate(\n                                path={\"identifier\": tmp_identifier},\n                                table_name=tmp_identifier) -%}\n\n    {% do return(tmp_relation) %}\n{% endmacro %}", "root_path": "/Users/mrich/.local/share/virtualenvs/quasar-qaRV2YEO/lib/python3.7/site-packages/dbt/include/global_project", "name": "truncate_relation", "unique_id": "macro.dbt.truncate_relation", "tags": [], "resource_type": "macro", "depends_on": {"macros": []}}, "macro.dbt.default__truncate_relation": {"path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "package_name": "dbt", "raw_sql": "{% macro adapter_macro(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        In adapter_macro: could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set separator = '__' -%}\n  {%- set search_name = adapter.type() + separator + name -%}\n  {%- set default_name = 'default' + separator + name -%}\n\n  {%- if package_context.get(search_name) is not none -%}\n    {{ return(package_context[search_name](*varargs, **kwargs)) }}\n  {%- else -%}\n    {{ return(package_context[default_name](*varargs, **kwargs)) }}\n  {%- endif -%}\n{%- endmacro %}\n\n{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter_macro('get_columns_in_query', select_sql)) }}\n{% endmacro %}\n\n{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        select * from (\n            {{ select_sql }}\n        ) as __dbt_sbq\n        where false\n        limit 0\n    {% endcall %}\n\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}\n\n{% macro create_schema(database_name, schema_name) -%}\n  {{ adapter_macro('create_schema', database_name, schema_name) }}\n{% endmacro %}\n\n{% macro default__create_schema(database_name, schema_name) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{database_name}}.{{schema_name}}\n  {% endcall %}\n{% endmacro %}\n\n{% macro drop_schema(database_name, schema_name) -%}\n  {{ adapter_macro('drop_schema', database_name, schema_name) }}\n{% endmacro %}\n\n{% macro default__drop_schema(database_name, schema_name) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{database_name}}.{{schema_name}} cascade\n  {% endcall %}\n{% endmacro %}\n\n{% macro create_table_as(temporary, relation, sql) -%}\n  {{ adapter_macro('create_table_as', temporary, relation, sql) }}\n{%- endmacro %}\n\n{% macro default__create_table_as(temporary, relation, sql) -%}\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  as (\n    {{ sql }}\n  );\n{% endmacro %}\n\n{% macro create_view_as(relation, sql) -%}\n  {{ adapter_macro('create_view_as', relation, sql) }}\n{%- endmacro %}\n\n{% macro default__create_view_as(relation, sql) -%}\n  create view {{ relation }} as (\n    {{ sql }}\n  );\n{% endmacro %}\n\n\n{% macro get_catalog(information_schemas) -%}\n  {{ return(adapter_macro('get_catalog', information_schemas)) }}\n{%- endmacro %}\n\n{% macro default__get_catalog(information_schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}\n\n\n{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter_macro('get_columns_in_relation', relation)) }}\n{% endmacro %}\n\n{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}\n\n{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}\n\n{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter_macro('alter_column_type', relation, column_name, new_column_type)) }}\n{% endmacro %}\n\n{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ tmp_column }} {{ new_column_type }};\n    update {{ relation }} set {{ tmp_column }} = {{ column_name }};\n    alter table {{ relation }} drop column {{ column_name }} cascade;\n    alter table {{ relation }} rename column {{ tmp_column }} to {{ column_name }}\n  {% endcall %}\n\n{% endmacro %}\n\n\n{% macro drop_relation(relation) -%}\n  {{ return(adapter_macro('drop_relation', relation)) }}\n{% endmacro %}\n\n\n{% macro default__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    drop {{ relation.type }} if exists {{ relation }} cascade\n  {%- endcall %}\n{% endmacro %}\n\n{% macro truncate_relation(relation) -%}\n  {{ return(adapter_macro('truncate_relation', relation)) }}\n{% endmacro %}\n\n\n{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}\n\n{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter_macro('rename_relation', from_relation, to_relation)) }}\n{% endmacro %}\n\n{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}\n\n\n{% macro information_schema_name(database) %}\n  {{ return(adapter_macro('information_schema_name', database)) }}\n{% endmacro %}\n\n{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ adapter.quote_as_configured(database, 'database') }}.information_schema\n  {%- else -%}\n    information_schema\n  {%- endif -%}\n{%- endmacro %}\n\n\n{% macro list_schemas(database) -%}\n  {{ return(adapter_macro('list_schemas', database)) }}\n{% endmacro %}\n\n{% macro default__list_schemas(database) -%}\n  {% call statement('list_schemas', fetch_result=True, auto_begin=False) %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.schemata\n    where catalog_name ilike '{{ database }}'\n  {% endcall %}\n  {{ return(load_result('list_schemas').table) }}\n{% endmacro %}\n\n\n{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter_macro('check_schema_exists', information_schema, schema)) }}\n{% endmacro %}\n\n{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% call statement('check_schema_exists', fetch_result=True, auto_begin=False) -%}\n        select count(*)\n        from {{ information_schema }}.schemata\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{% endmacro %}\n\n\n{% macro list_relations_without_caching(information_schema, schema) %}\n  {{ return(adapter_macro('list_relations_without_caching', information_schema, schema)) }}\n{% endmacro %}\n\n\n{% macro default__list_relations_without_caching(information_schema, schema) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}\n\n\n{% macro current_timestamp() -%}\n  {{ adapter_macro('current_timestamp') }}\n{%- endmacro %}\n\n\n{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter '+adapter.type()) }}\n{%- endmacro %}\n\n\n{% macro collect_freshness(source, loaded_at_field) %}\n  {{ return(adapter_macro('collect_freshness', source, loaded_at_field))}}\n{% endmacro %}\n\n\n{% macro default__collect_freshness(source, loaded_at_field) %}\n  {% call statement('check_schema_exists', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n  {% endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{% endmacro %}\n\n{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter_macro('make_temp_relation', base_relation, suffix))}}\n{% endmacro %}\n\n{% macro default__make_temp_relation(base_relation, suffix) %}\n    {% set tmp_identifier = base_relation.identifier ~ suffix %}\n    {% set tmp_relation = base_relation.incorporate(\n                                path={\"identifier\": tmp_identifier},\n                                table_name=tmp_identifier) -%}\n\n    {% do return(tmp_relation) %}\n{% endmacro %}", "root_path": "/Users/mrich/.local/share/virtualenvs/quasar-qaRV2YEO/lib/python3.7/site-packages/dbt/include/global_project", "name": "default__truncate_relation", "unique_id": "macro.dbt.default__truncate_relation", "tags": [], "resource_type": "macro", "depends_on": {"macros": []}}, "macro.dbt.rename_relation": {"path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "package_name": "dbt", "raw_sql": "{% macro adapter_macro(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        In adapter_macro: could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set separator = '__' -%}\n  {%- set search_name = adapter.type() + separator + name -%}\n  {%- set default_name = 'default' + separator + name -%}\n\n  {%- if package_context.get(search_name) is not none -%}\n    {{ return(package_context[search_name](*varargs, **kwargs)) }}\n  {%- else -%}\n    {{ return(package_context[default_name](*varargs, **kwargs)) }}\n  {%- endif -%}\n{%- endmacro %}\n\n{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter_macro('get_columns_in_query', select_sql)) }}\n{% endmacro %}\n\n{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        select * from (\n            {{ select_sql }}\n        ) as __dbt_sbq\n        where false\n        limit 0\n    {% endcall %}\n\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}\n\n{% macro create_schema(database_name, schema_name) -%}\n  {{ adapter_macro('create_schema', database_name, schema_name) }}\n{% endmacro %}\n\n{% macro default__create_schema(database_name, schema_name) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{database_name}}.{{schema_name}}\n  {% endcall %}\n{% endmacro %}\n\n{% macro drop_schema(database_name, schema_name) -%}\n  {{ adapter_macro('drop_schema', database_name, schema_name) }}\n{% endmacro %}\n\n{% macro default__drop_schema(database_name, schema_name) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{database_name}}.{{schema_name}} cascade\n  {% endcall %}\n{% endmacro %}\n\n{% macro create_table_as(temporary, relation, sql) -%}\n  {{ adapter_macro('create_table_as', temporary, relation, sql) }}\n{%- endmacro %}\n\n{% macro default__create_table_as(temporary, relation, sql) -%}\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  as (\n    {{ sql }}\n  );\n{% endmacro %}\n\n{% macro create_view_as(relation, sql) -%}\n  {{ adapter_macro('create_view_as', relation, sql) }}\n{%- endmacro %}\n\n{% macro default__create_view_as(relation, sql) -%}\n  create view {{ relation }} as (\n    {{ sql }}\n  );\n{% endmacro %}\n\n\n{% macro get_catalog(information_schemas) -%}\n  {{ return(adapter_macro('get_catalog', information_schemas)) }}\n{%- endmacro %}\n\n{% macro default__get_catalog(information_schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}\n\n\n{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter_macro('get_columns_in_relation', relation)) }}\n{% endmacro %}\n\n{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}\n\n{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}\n\n{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter_macro('alter_column_type', relation, column_name, new_column_type)) }}\n{% endmacro %}\n\n{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ tmp_column }} {{ new_column_type }};\n    update {{ relation }} set {{ tmp_column }} = {{ column_name }};\n    alter table {{ relation }} drop column {{ column_name }} cascade;\n    alter table {{ relation }} rename column {{ tmp_column }} to {{ column_name }}\n  {% endcall %}\n\n{% endmacro %}\n\n\n{% macro drop_relation(relation) -%}\n  {{ return(adapter_macro('drop_relation', relation)) }}\n{% endmacro %}\n\n\n{% macro default__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    drop {{ relation.type }} if exists {{ relation }} cascade\n  {%- endcall %}\n{% endmacro %}\n\n{% macro truncate_relation(relation) -%}\n  {{ return(adapter_macro('truncate_relation', relation)) }}\n{% endmacro %}\n\n\n{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}\n\n{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter_macro('rename_relation', from_relation, to_relation)) }}\n{% endmacro %}\n\n{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}\n\n\n{% macro information_schema_name(database) %}\n  {{ return(adapter_macro('information_schema_name', database)) }}\n{% endmacro %}\n\n{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ adapter.quote_as_configured(database, 'database') }}.information_schema\n  {%- else -%}\n    information_schema\n  {%- endif -%}\n{%- endmacro %}\n\n\n{% macro list_schemas(database) -%}\n  {{ return(adapter_macro('list_schemas', database)) }}\n{% endmacro %}\n\n{% macro default__list_schemas(database) -%}\n  {% call statement('list_schemas', fetch_result=True, auto_begin=False) %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.schemata\n    where catalog_name ilike '{{ database }}'\n  {% endcall %}\n  {{ return(load_result('list_schemas').table) }}\n{% endmacro %}\n\n\n{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter_macro('check_schema_exists', information_schema, schema)) }}\n{% endmacro %}\n\n{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% call statement('check_schema_exists', fetch_result=True, auto_begin=False) -%}\n        select count(*)\n        from {{ information_schema }}.schemata\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{% endmacro %}\n\n\n{% macro list_relations_without_caching(information_schema, schema) %}\n  {{ return(adapter_macro('list_relations_without_caching', information_schema, schema)) }}\n{% endmacro %}\n\n\n{% macro default__list_relations_without_caching(information_schema, schema) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}\n\n\n{% macro current_timestamp() -%}\n  {{ adapter_macro('current_timestamp') }}\n{%- endmacro %}\n\n\n{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter '+adapter.type()) }}\n{%- endmacro %}\n\n\n{% macro collect_freshness(source, loaded_at_field) %}\n  {{ return(adapter_macro('collect_freshness', source, loaded_at_field))}}\n{% endmacro %}\n\n\n{% macro default__collect_freshness(source, loaded_at_field) %}\n  {% call statement('check_schema_exists', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n  {% endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{% endmacro %}\n\n{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter_macro('make_temp_relation', base_relation, suffix))}}\n{% endmacro %}\n\n{% macro default__make_temp_relation(base_relation, suffix) %}\n    {% set tmp_identifier = base_relation.identifier ~ suffix %}\n    {% set tmp_relation = base_relation.incorporate(\n                                path={\"identifier\": tmp_identifier},\n                                table_name=tmp_identifier) -%}\n\n    {% do return(tmp_relation) %}\n{% endmacro %}", "root_path": "/Users/mrich/.local/share/virtualenvs/quasar-qaRV2YEO/lib/python3.7/site-packages/dbt/include/global_project", "name": "rename_relation", "unique_id": "macro.dbt.rename_relation", "tags": [], "resource_type": "macro", "depends_on": {"macros": []}}, "macro.dbt.default__rename_relation": {"path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "package_name": "dbt", "raw_sql": "{% macro adapter_macro(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        In adapter_macro: could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set separator = '__' -%}\n  {%- set search_name = adapter.type() + separator + name -%}\n  {%- set default_name = 'default' + separator + name -%}\n\n  {%- if package_context.get(search_name) is not none -%}\n    {{ return(package_context[search_name](*varargs, **kwargs)) }}\n  {%- else -%}\n    {{ return(package_context[default_name](*varargs, **kwargs)) }}\n  {%- endif -%}\n{%- endmacro %}\n\n{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter_macro('get_columns_in_query', select_sql)) }}\n{% endmacro %}\n\n{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        select * from (\n            {{ select_sql }}\n        ) as __dbt_sbq\n        where false\n        limit 0\n    {% endcall %}\n\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}\n\n{% macro create_schema(database_name, schema_name) -%}\n  {{ adapter_macro('create_schema', database_name, schema_name) }}\n{% endmacro %}\n\n{% macro default__create_schema(database_name, schema_name) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{database_name}}.{{schema_name}}\n  {% endcall %}\n{% endmacro %}\n\n{% macro drop_schema(database_name, schema_name) -%}\n  {{ adapter_macro('drop_schema', database_name, schema_name) }}\n{% endmacro %}\n\n{% macro default__drop_schema(database_name, schema_name) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{database_name}}.{{schema_name}} cascade\n  {% endcall %}\n{% endmacro %}\n\n{% macro create_table_as(temporary, relation, sql) -%}\n  {{ adapter_macro('create_table_as', temporary, relation, sql) }}\n{%- endmacro %}\n\n{% macro default__create_table_as(temporary, relation, sql) -%}\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  as (\n    {{ sql }}\n  );\n{% endmacro %}\n\n{% macro create_view_as(relation, sql) -%}\n  {{ adapter_macro('create_view_as', relation, sql) }}\n{%- endmacro %}\n\n{% macro default__create_view_as(relation, sql) -%}\n  create view {{ relation }} as (\n    {{ sql }}\n  );\n{% endmacro %}\n\n\n{% macro get_catalog(information_schemas) -%}\n  {{ return(adapter_macro('get_catalog', information_schemas)) }}\n{%- endmacro %}\n\n{% macro default__get_catalog(information_schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}\n\n\n{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter_macro('get_columns_in_relation', relation)) }}\n{% endmacro %}\n\n{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}\n\n{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}\n\n{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter_macro('alter_column_type', relation, column_name, new_column_type)) }}\n{% endmacro %}\n\n{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ tmp_column }} {{ new_column_type }};\n    update {{ relation }} set {{ tmp_column }} = {{ column_name }};\n    alter table {{ relation }} drop column {{ column_name }} cascade;\n    alter table {{ relation }} rename column {{ tmp_column }} to {{ column_name }}\n  {% endcall %}\n\n{% endmacro %}\n\n\n{% macro drop_relation(relation) -%}\n  {{ return(adapter_macro('drop_relation', relation)) }}\n{% endmacro %}\n\n\n{% macro default__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    drop {{ relation.type }} if exists {{ relation }} cascade\n  {%- endcall %}\n{% endmacro %}\n\n{% macro truncate_relation(relation) -%}\n  {{ return(adapter_macro('truncate_relation', relation)) }}\n{% endmacro %}\n\n\n{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}\n\n{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter_macro('rename_relation', from_relation, to_relation)) }}\n{% endmacro %}\n\n{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}\n\n\n{% macro information_schema_name(database) %}\n  {{ return(adapter_macro('information_schema_name', database)) }}\n{% endmacro %}\n\n{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ adapter.quote_as_configured(database, 'database') }}.information_schema\n  {%- else -%}\n    information_schema\n  {%- endif -%}\n{%- endmacro %}\n\n\n{% macro list_schemas(database) -%}\n  {{ return(adapter_macro('list_schemas', database)) }}\n{% endmacro %}\n\n{% macro default__list_schemas(database) -%}\n  {% call statement('list_schemas', fetch_result=True, auto_begin=False) %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.schemata\n    where catalog_name ilike '{{ database }}'\n  {% endcall %}\n  {{ return(load_result('list_schemas').table) }}\n{% endmacro %}\n\n\n{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter_macro('check_schema_exists', information_schema, schema)) }}\n{% endmacro %}\n\n{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% call statement('check_schema_exists', fetch_result=True, auto_begin=False) -%}\n        select count(*)\n        from {{ information_schema }}.schemata\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{% endmacro %}\n\n\n{% macro list_relations_without_caching(information_schema, schema) %}\n  {{ return(adapter_macro('list_relations_without_caching', information_schema, schema)) }}\n{% endmacro %}\n\n\n{% macro default__list_relations_without_caching(information_schema, schema) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}\n\n\n{% macro current_timestamp() -%}\n  {{ adapter_macro('current_timestamp') }}\n{%- endmacro %}\n\n\n{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter '+adapter.type()) }}\n{%- endmacro %}\n\n\n{% macro collect_freshness(source, loaded_at_field) %}\n  {{ return(adapter_macro('collect_freshness', source, loaded_at_field))}}\n{% endmacro %}\n\n\n{% macro default__collect_freshness(source, loaded_at_field) %}\n  {% call statement('check_schema_exists', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n  {% endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{% endmacro %}\n\n{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter_macro('make_temp_relation', base_relation, suffix))}}\n{% endmacro %}\n\n{% macro default__make_temp_relation(base_relation, suffix) %}\n    {% set tmp_identifier = base_relation.identifier ~ suffix %}\n    {% set tmp_relation = base_relation.incorporate(\n                                path={\"identifier\": tmp_identifier},\n                                table_name=tmp_identifier) -%}\n\n    {% do return(tmp_relation) %}\n{% endmacro %}", "root_path": "/Users/mrich/.local/share/virtualenvs/quasar-qaRV2YEO/lib/python3.7/site-packages/dbt/include/global_project", "name": "default__rename_relation", "unique_id": "macro.dbt.default__rename_relation", "tags": [], "resource_type": "macro", "depends_on": {"macros": []}}, "macro.dbt.information_schema_name": {"path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "package_name": "dbt", "raw_sql": "{% macro adapter_macro(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        In adapter_macro: could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set separator = '__' -%}\n  {%- set search_name = adapter.type() + separator + name -%}\n  {%- set default_name = 'default' + separator + name -%}\n\n  {%- if package_context.get(search_name) is not none -%}\n    {{ return(package_context[search_name](*varargs, **kwargs)) }}\n  {%- else -%}\n    {{ return(package_context[default_name](*varargs, **kwargs)) }}\n  {%- endif -%}\n{%- endmacro %}\n\n{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter_macro('get_columns_in_query', select_sql)) }}\n{% endmacro %}\n\n{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        select * from (\n            {{ select_sql }}\n        ) as __dbt_sbq\n        where false\n        limit 0\n    {% endcall %}\n\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}\n\n{% macro create_schema(database_name, schema_name) -%}\n  {{ adapter_macro('create_schema', database_name, schema_name) }}\n{% endmacro %}\n\n{% macro default__create_schema(database_name, schema_name) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{database_name}}.{{schema_name}}\n  {% endcall %}\n{% endmacro %}\n\n{% macro drop_schema(database_name, schema_name) -%}\n  {{ adapter_macro('drop_schema', database_name, schema_name) }}\n{% endmacro %}\n\n{% macro default__drop_schema(database_name, schema_name) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{database_name}}.{{schema_name}} cascade\n  {% endcall %}\n{% endmacro %}\n\n{% macro create_table_as(temporary, relation, sql) -%}\n  {{ adapter_macro('create_table_as', temporary, relation, sql) }}\n{%- endmacro %}\n\n{% macro default__create_table_as(temporary, relation, sql) -%}\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  as (\n    {{ sql }}\n  );\n{% endmacro %}\n\n{% macro create_view_as(relation, sql) -%}\n  {{ adapter_macro('create_view_as', relation, sql) }}\n{%- endmacro %}\n\n{% macro default__create_view_as(relation, sql) -%}\n  create view {{ relation }} as (\n    {{ sql }}\n  );\n{% endmacro %}\n\n\n{% macro get_catalog(information_schemas) -%}\n  {{ return(adapter_macro('get_catalog', information_schemas)) }}\n{%- endmacro %}\n\n{% macro default__get_catalog(information_schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}\n\n\n{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter_macro('get_columns_in_relation', relation)) }}\n{% endmacro %}\n\n{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}\n\n{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}\n\n{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter_macro('alter_column_type', relation, column_name, new_column_type)) }}\n{% endmacro %}\n\n{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ tmp_column }} {{ new_column_type }};\n    update {{ relation }} set {{ tmp_column }} = {{ column_name }};\n    alter table {{ relation }} drop column {{ column_name }} cascade;\n    alter table {{ relation }} rename column {{ tmp_column }} to {{ column_name }}\n  {% endcall %}\n\n{% endmacro %}\n\n\n{% macro drop_relation(relation) -%}\n  {{ return(adapter_macro('drop_relation', relation)) }}\n{% endmacro %}\n\n\n{% macro default__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    drop {{ relation.type }} if exists {{ relation }} cascade\n  {%- endcall %}\n{% endmacro %}\n\n{% macro truncate_relation(relation) -%}\n  {{ return(adapter_macro('truncate_relation', relation)) }}\n{% endmacro %}\n\n\n{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}\n\n{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter_macro('rename_relation', from_relation, to_relation)) }}\n{% endmacro %}\n\n{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}\n\n\n{% macro information_schema_name(database) %}\n  {{ return(adapter_macro('information_schema_name', database)) }}\n{% endmacro %}\n\n{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ adapter.quote_as_configured(database, 'database') }}.information_schema\n  {%- else -%}\n    information_schema\n  {%- endif -%}\n{%- endmacro %}\n\n\n{% macro list_schemas(database) -%}\n  {{ return(adapter_macro('list_schemas', database)) }}\n{% endmacro %}\n\n{% macro default__list_schemas(database) -%}\n  {% call statement('list_schemas', fetch_result=True, auto_begin=False) %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.schemata\n    where catalog_name ilike '{{ database }}'\n  {% endcall %}\n  {{ return(load_result('list_schemas').table) }}\n{% endmacro %}\n\n\n{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter_macro('check_schema_exists', information_schema, schema)) }}\n{% endmacro %}\n\n{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% call statement('check_schema_exists', fetch_result=True, auto_begin=False) -%}\n        select count(*)\n        from {{ information_schema }}.schemata\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{% endmacro %}\n\n\n{% macro list_relations_without_caching(information_schema, schema) %}\n  {{ return(adapter_macro('list_relations_without_caching', information_schema, schema)) }}\n{% endmacro %}\n\n\n{% macro default__list_relations_without_caching(information_schema, schema) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}\n\n\n{% macro current_timestamp() -%}\n  {{ adapter_macro('current_timestamp') }}\n{%- endmacro %}\n\n\n{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter '+adapter.type()) }}\n{%- endmacro %}\n\n\n{% macro collect_freshness(source, loaded_at_field) %}\n  {{ return(adapter_macro('collect_freshness', source, loaded_at_field))}}\n{% endmacro %}\n\n\n{% macro default__collect_freshness(source, loaded_at_field) %}\n  {% call statement('check_schema_exists', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n  {% endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{% endmacro %}\n\n{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter_macro('make_temp_relation', base_relation, suffix))}}\n{% endmacro %}\n\n{% macro default__make_temp_relation(base_relation, suffix) %}\n    {% set tmp_identifier = base_relation.identifier ~ suffix %}\n    {% set tmp_relation = base_relation.incorporate(\n                                path={\"identifier\": tmp_identifier},\n                                table_name=tmp_identifier) -%}\n\n    {% do return(tmp_relation) %}\n{% endmacro %}", "root_path": "/Users/mrich/.local/share/virtualenvs/quasar-qaRV2YEO/lib/python3.7/site-packages/dbt/include/global_project", "name": "information_schema_name", "unique_id": "macro.dbt.information_schema_name", "tags": [], "resource_type": "macro", "depends_on": {"macros": []}}, "macro.dbt.default__information_schema_name": {"path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "package_name": "dbt", "raw_sql": "{% macro adapter_macro(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        In adapter_macro: could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set separator = '__' -%}\n  {%- set search_name = adapter.type() + separator + name -%}\n  {%- set default_name = 'default' + separator + name -%}\n\n  {%- if package_context.get(search_name) is not none -%}\n    {{ return(package_context[search_name](*varargs, **kwargs)) }}\n  {%- else -%}\n    {{ return(package_context[default_name](*varargs, **kwargs)) }}\n  {%- endif -%}\n{%- endmacro %}\n\n{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter_macro('get_columns_in_query', select_sql)) }}\n{% endmacro %}\n\n{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        select * from (\n            {{ select_sql }}\n        ) as __dbt_sbq\n        where false\n        limit 0\n    {% endcall %}\n\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}\n\n{% macro create_schema(database_name, schema_name) -%}\n  {{ adapter_macro('create_schema', database_name, schema_name) }}\n{% endmacro %}\n\n{% macro default__create_schema(database_name, schema_name) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{database_name}}.{{schema_name}}\n  {% endcall %}\n{% endmacro %}\n\n{% macro drop_schema(database_name, schema_name) -%}\n  {{ adapter_macro('drop_schema', database_name, schema_name) }}\n{% endmacro %}\n\n{% macro default__drop_schema(database_name, schema_name) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{database_name}}.{{schema_name}} cascade\n  {% endcall %}\n{% endmacro %}\n\n{% macro create_table_as(temporary, relation, sql) -%}\n  {{ adapter_macro('create_table_as', temporary, relation, sql) }}\n{%- endmacro %}\n\n{% macro default__create_table_as(temporary, relation, sql) -%}\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  as (\n    {{ sql }}\n  );\n{% endmacro %}\n\n{% macro create_view_as(relation, sql) -%}\n  {{ adapter_macro('create_view_as', relation, sql) }}\n{%- endmacro %}\n\n{% macro default__create_view_as(relation, sql) -%}\n  create view {{ relation }} as (\n    {{ sql }}\n  );\n{% endmacro %}\n\n\n{% macro get_catalog(information_schemas) -%}\n  {{ return(adapter_macro('get_catalog', information_schemas)) }}\n{%- endmacro %}\n\n{% macro default__get_catalog(information_schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}\n\n\n{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter_macro('get_columns_in_relation', relation)) }}\n{% endmacro %}\n\n{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}\n\n{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}\n\n{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter_macro('alter_column_type', relation, column_name, new_column_type)) }}\n{% endmacro %}\n\n{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ tmp_column }} {{ new_column_type }};\n    update {{ relation }} set {{ tmp_column }} = {{ column_name }};\n    alter table {{ relation }} drop column {{ column_name }} cascade;\n    alter table {{ relation }} rename column {{ tmp_column }} to {{ column_name }}\n  {% endcall %}\n\n{% endmacro %}\n\n\n{% macro drop_relation(relation) -%}\n  {{ return(adapter_macro('drop_relation', relation)) }}\n{% endmacro %}\n\n\n{% macro default__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    drop {{ relation.type }} if exists {{ relation }} cascade\n  {%- endcall %}\n{% endmacro %}\n\n{% macro truncate_relation(relation) -%}\n  {{ return(adapter_macro('truncate_relation', relation)) }}\n{% endmacro %}\n\n\n{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}\n\n{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter_macro('rename_relation', from_relation, to_relation)) }}\n{% endmacro %}\n\n{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}\n\n\n{% macro information_schema_name(database) %}\n  {{ return(adapter_macro('information_schema_name', database)) }}\n{% endmacro %}\n\n{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ adapter.quote_as_configured(database, 'database') }}.information_schema\n  {%- else -%}\n    information_schema\n  {%- endif -%}\n{%- endmacro %}\n\n\n{% macro list_schemas(database) -%}\n  {{ return(adapter_macro('list_schemas', database)) }}\n{% endmacro %}\n\n{% macro default__list_schemas(database) -%}\n  {% call statement('list_schemas', fetch_result=True, auto_begin=False) %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.schemata\n    where catalog_name ilike '{{ database }}'\n  {% endcall %}\n  {{ return(load_result('list_schemas').table) }}\n{% endmacro %}\n\n\n{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter_macro('check_schema_exists', information_schema, schema)) }}\n{% endmacro %}\n\n{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% call statement('check_schema_exists', fetch_result=True, auto_begin=False) -%}\n        select count(*)\n        from {{ information_schema }}.schemata\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{% endmacro %}\n\n\n{% macro list_relations_without_caching(information_schema, schema) %}\n  {{ return(adapter_macro('list_relations_without_caching', information_schema, schema)) }}\n{% endmacro %}\n\n\n{% macro default__list_relations_without_caching(information_schema, schema) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}\n\n\n{% macro current_timestamp() -%}\n  {{ adapter_macro('current_timestamp') }}\n{%- endmacro %}\n\n\n{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter '+adapter.type()) }}\n{%- endmacro %}\n\n\n{% macro collect_freshness(source, loaded_at_field) %}\n  {{ return(adapter_macro('collect_freshness', source, loaded_at_field))}}\n{% endmacro %}\n\n\n{% macro default__collect_freshness(source, loaded_at_field) %}\n  {% call statement('check_schema_exists', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n  {% endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{% endmacro %}\n\n{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter_macro('make_temp_relation', base_relation, suffix))}}\n{% endmacro %}\n\n{% macro default__make_temp_relation(base_relation, suffix) %}\n    {% set tmp_identifier = base_relation.identifier ~ suffix %}\n    {% set tmp_relation = base_relation.incorporate(\n                                path={\"identifier\": tmp_identifier},\n                                table_name=tmp_identifier) -%}\n\n    {% do return(tmp_relation) %}\n{% endmacro %}", "root_path": "/Users/mrich/.local/share/virtualenvs/quasar-qaRV2YEO/lib/python3.7/site-packages/dbt/include/global_project", "name": "default__information_schema_name", "unique_id": "macro.dbt.default__information_schema_name", "tags": [], "resource_type": "macro", "depends_on": {"macros": []}}, "macro.dbt.list_schemas": {"path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "package_name": "dbt", "raw_sql": "{% macro adapter_macro(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        In adapter_macro: could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set separator = '__' -%}\n  {%- set search_name = adapter.type() + separator + name -%}\n  {%- set default_name = 'default' + separator + name -%}\n\n  {%- if package_context.get(search_name) is not none -%}\n    {{ return(package_context[search_name](*varargs, **kwargs)) }}\n  {%- else -%}\n    {{ return(package_context[default_name](*varargs, **kwargs)) }}\n  {%- endif -%}\n{%- endmacro %}\n\n{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter_macro('get_columns_in_query', select_sql)) }}\n{% endmacro %}\n\n{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        select * from (\n            {{ select_sql }}\n        ) as __dbt_sbq\n        where false\n        limit 0\n    {% endcall %}\n\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}\n\n{% macro create_schema(database_name, schema_name) -%}\n  {{ adapter_macro('create_schema', database_name, schema_name) }}\n{% endmacro %}\n\n{% macro default__create_schema(database_name, schema_name) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{database_name}}.{{schema_name}}\n  {% endcall %}\n{% endmacro %}\n\n{% macro drop_schema(database_name, schema_name) -%}\n  {{ adapter_macro('drop_schema', database_name, schema_name) }}\n{% endmacro %}\n\n{% macro default__drop_schema(database_name, schema_name) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{database_name}}.{{schema_name}} cascade\n  {% endcall %}\n{% endmacro %}\n\n{% macro create_table_as(temporary, relation, sql) -%}\n  {{ adapter_macro('create_table_as', temporary, relation, sql) }}\n{%- endmacro %}\n\n{% macro default__create_table_as(temporary, relation, sql) -%}\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  as (\n    {{ sql }}\n  );\n{% endmacro %}\n\n{% macro create_view_as(relation, sql) -%}\n  {{ adapter_macro('create_view_as', relation, sql) }}\n{%- endmacro %}\n\n{% macro default__create_view_as(relation, sql) -%}\n  create view {{ relation }} as (\n    {{ sql }}\n  );\n{% endmacro %}\n\n\n{% macro get_catalog(information_schemas) -%}\n  {{ return(adapter_macro('get_catalog', information_schemas)) }}\n{%- endmacro %}\n\n{% macro default__get_catalog(information_schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}\n\n\n{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter_macro('get_columns_in_relation', relation)) }}\n{% endmacro %}\n\n{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}\n\n{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}\n\n{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter_macro('alter_column_type', relation, column_name, new_column_type)) }}\n{% endmacro %}\n\n{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ tmp_column }} {{ new_column_type }};\n    update {{ relation }} set {{ tmp_column }} = {{ column_name }};\n    alter table {{ relation }} drop column {{ column_name }} cascade;\n    alter table {{ relation }} rename column {{ tmp_column }} to {{ column_name }}\n  {% endcall %}\n\n{% endmacro %}\n\n\n{% macro drop_relation(relation) -%}\n  {{ return(adapter_macro('drop_relation', relation)) }}\n{% endmacro %}\n\n\n{% macro default__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    drop {{ relation.type }} if exists {{ relation }} cascade\n  {%- endcall %}\n{% endmacro %}\n\n{% macro truncate_relation(relation) -%}\n  {{ return(adapter_macro('truncate_relation', relation)) }}\n{% endmacro %}\n\n\n{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}\n\n{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter_macro('rename_relation', from_relation, to_relation)) }}\n{% endmacro %}\n\n{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}\n\n\n{% macro information_schema_name(database) %}\n  {{ return(adapter_macro('information_schema_name', database)) }}\n{% endmacro %}\n\n{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ adapter.quote_as_configured(database, 'database') }}.information_schema\n  {%- else -%}\n    information_schema\n  {%- endif -%}\n{%- endmacro %}\n\n\n{% macro list_schemas(database) -%}\n  {{ return(adapter_macro('list_schemas', database)) }}\n{% endmacro %}\n\n{% macro default__list_schemas(database) -%}\n  {% call statement('list_schemas', fetch_result=True, auto_begin=False) %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.schemata\n    where catalog_name ilike '{{ database }}'\n  {% endcall %}\n  {{ return(load_result('list_schemas').table) }}\n{% endmacro %}\n\n\n{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter_macro('check_schema_exists', information_schema, schema)) }}\n{% endmacro %}\n\n{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% call statement('check_schema_exists', fetch_result=True, auto_begin=False) -%}\n        select count(*)\n        from {{ information_schema }}.schemata\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{% endmacro %}\n\n\n{% macro list_relations_without_caching(information_schema, schema) %}\n  {{ return(adapter_macro('list_relations_without_caching', information_schema, schema)) }}\n{% endmacro %}\n\n\n{% macro default__list_relations_without_caching(information_schema, schema) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}\n\n\n{% macro current_timestamp() -%}\n  {{ adapter_macro('current_timestamp') }}\n{%- endmacro %}\n\n\n{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter '+adapter.type()) }}\n{%- endmacro %}\n\n\n{% macro collect_freshness(source, loaded_at_field) %}\n  {{ return(adapter_macro('collect_freshness', source, loaded_at_field))}}\n{% endmacro %}\n\n\n{% macro default__collect_freshness(source, loaded_at_field) %}\n  {% call statement('check_schema_exists', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n  {% endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{% endmacro %}\n\n{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter_macro('make_temp_relation', base_relation, suffix))}}\n{% endmacro %}\n\n{% macro default__make_temp_relation(base_relation, suffix) %}\n    {% set tmp_identifier = base_relation.identifier ~ suffix %}\n    {% set tmp_relation = base_relation.incorporate(\n                                path={\"identifier\": tmp_identifier},\n                                table_name=tmp_identifier) -%}\n\n    {% do return(tmp_relation) %}\n{% endmacro %}", "root_path": "/Users/mrich/.local/share/virtualenvs/quasar-qaRV2YEO/lib/python3.7/site-packages/dbt/include/global_project", "name": "list_schemas", "unique_id": "macro.dbt.list_schemas", "tags": [], "resource_type": "macro", "depends_on": {"macros": []}}, "macro.dbt.default__list_schemas": {"path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "package_name": "dbt", "raw_sql": "{% macro adapter_macro(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        In adapter_macro: could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set separator = '__' -%}\n  {%- set search_name = adapter.type() + separator + name -%}\n  {%- set default_name = 'default' + separator + name -%}\n\n  {%- if package_context.get(search_name) is not none -%}\n    {{ return(package_context[search_name](*varargs, **kwargs)) }}\n  {%- else -%}\n    {{ return(package_context[default_name](*varargs, **kwargs)) }}\n  {%- endif -%}\n{%- endmacro %}\n\n{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter_macro('get_columns_in_query', select_sql)) }}\n{% endmacro %}\n\n{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        select * from (\n            {{ select_sql }}\n        ) as __dbt_sbq\n        where false\n        limit 0\n    {% endcall %}\n\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}\n\n{% macro create_schema(database_name, schema_name) -%}\n  {{ adapter_macro('create_schema', database_name, schema_name) }}\n{% endmacro %}\n\n{% macro default__create_schema(database_name, schema_name) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{database_name}}.{{schema_name}}\n  {% endcall %}\n{% endmacro %}\n\n{% macro drop_schema(database_name, schema_name) -%}\n  {{ adapter_macro('drop_schema', database_name, schema_name) }}\n{% endmacro %}\n\n{% macro default__drop_schema(database_name, schema_name) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{database_name}}.{{schema_name}} cascade\n  {% endcall %}\n{% endmacro %}\n\n{% macro create_table_as(temporary, relation, sql) -%}\n  {{ adapter_macro('create_table_as', temporary, relation, sql) }}\n{%- endmacro %}\n\n{% macro default__create_table_as(temporary, relation, sql) -%}\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  as (\n    {{ sql }}\n  );\n{% endmacro %}\n\n{% macro create_view_as(relation, sql) -%}\n  {{ adapter_macro('create_view_as', relation, sql) }}\n{%- endmacro %}\n\n{% macro default__create_view_as(relation, sql) -%}\n  create view {{ relation }} as (\n    {{ sql }}\n  );\n{% endmacro %}\n\n\n{% macro get_catalog(information_schemas) -%}\n  {{ return(adapter_macro('get_catalog', information_schemas)) }}\n{%- endmacro %}\n\n{% macro default__get_catalog(information_schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}\n\n\n{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter_macro('get_columns_in_relation', relation)) }}\n{% endmacro %}\n\n{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}\n\n{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}\n\n{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter_macro('alter_column_type', relation, column_name, new_column_type)) }}\n{% endmacro %}\n\n{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ tmp_column }} {{ new_column_type }};\n    update {{ relation }} set {{ tmp_column }} = {{ column_name }};\n    alter table {{ relation }} drop column {{ column_name }} cascade;\n    alter table {{ relation }} rename column {{ tmp_column }} to {{ column_name }}\n  {% endcall %}\n\n{% endmacro %}\n\n\n{% macro drop_relation(relation) -%}\n  {{ return(adapter_macro('drop_relation', relation)) }}\n{% endmacro %}\n\n\n{% macro default__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    drop {{ relation.type }} if exists {{ relation }} cascade\n  {%- endcall %}\n{% endmacro %}\n\n{% macro truncate_relation(relation) -%}\n  {{ return(adapter_macro('truncate_relation', relation)) }}\n{% endmacro %}\n\n\n{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}\n\n{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter_macro('rename_relation', from_relation, to_relation)) }}\n{% endmacro %}\n\n{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}\n\n\n{% macro information_schema_name(database) %}\n  {{ return(adapter_macro('information_schema_name', database)) }}\n{% endmacro %}\n\n{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ adapter.quote_as_configured(database, 'database') }}.information_schema\n  {%- else -%}\n    information_schema\n  {%- endif -%}\n{%- endmacro %}\n\n\n{% macro list_schemas(database) -%}\n  {{ return(adapter_macro('list_schemas', database)) }}\n{% endmacro %}\n\n{% macro default__list_schemas(database) -%}\n  {% call statement('list_schemas', fetch_result=True, auto_begin=False) %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.schemata\n    where catalog_name ilike '{{ database }}'\n  {% endcall %}\n  {{ return(load_result('list_schemas').table) }}\n{% endmacro %}\n\n\n{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter_macro('check_schema_exists', information_schema, schema)) }}\n{% endmacro %}\n\n{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% call statement('check_schema_exists', fetch_result=True, auto_begin=False) -%}\n        select count(*)\n        from {{ information_schema }}.schemata\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{% endmacro %}\n\n\n{% macro list_relations_without_caching(information_schema, schema) %}\n  {{ return(adapter_macro('list_relations_without_caching', information_schema, schema)) }}\n{% endmacro %}\n\n\n{% macro default__list_relations_without_caching(information_schema, schema) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}\n\n\n{% macro current_timestamp() -%}\n  {{ adapter_macro('current_timestamp') }}\n{%- endmacro %}\n\n\n{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter '+adapter.type()) }}\n{%- endmacro %}\n\n\n{% macro collect_freshness(source, loaded_at_field) %}\n  {{ return(adapter_macro('collect_freshness', source, loaded_at_field))}}\n{% endmacro %}\n\n\n{% macro default__collect_freshness(source, loaded_at_field) %}\n  {% call statement('check_schema_exists', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n  {% endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{% endmacro %}\n\n{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter_macro('make_temp_relation', base_relation, suffix))}}\n{% endmacro %}\n\n{% macro default__make_temp_relation(base_relation, suffix) %}\n    {% set tmp_identifier = base_relation.identifier ~ suffix %}\n    {% set tmp_relation = base_relation.incorporate(\n                                path={\"identifier\": tmp_identifier},\n                                table_name=tmp_identifier) -%}\n\n    {% do return(tmp_relation) %}\n{% endmacro %}", "root_path": "/Users/mrich/.local/share/virtualenvs/quasar-qaRV2YEO/lib/python3.7/site-packages/dbt/include/global_project", "name": "default__list_schemas", "unique_id": "macro.dbt.default__list_schemas", "tags": [], "resource_type": "macro", "depends_on": {"macros": []}}, "macro.dbt.check_schema_exists": {"path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "package_name": "dbt", "raw_sql": "{% macro adapter_macro(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        In adapter_macro: could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set separator = '__' -%}\n  {%- set search_name = adapter.type() + separator + name -%}\n  {%- set default_name = 'default' + separator + name -%}\n\n  {%- if package_context.get(search_name) is not none -%}\n    {{ return(package_context[search_name](*varargs, **kwargs)) }}\n  {%- else -%}\n    {{ return(package_context[default_name](*varargs, **kwargs)) }}\n  {%- endif -%}\n{%- endmacro %}\n\n{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter_macro('get_columns_in_query', select_sql)) }}\n{% endmacro %}\n\n{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        select * from (\n            {{ select_sql }}\n        ) as __dbt_sbq\n        where false\n        limit 0\n    {% endcall %}\n\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}\n\n{% macro create_schema(database_name, schema_name) -%}\n  {{ adapter_macro('create_schema', database_name, schema_name) }}\n{% endmacro %}\n\n{% macro default__create_schema(database_name, schema_name) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{database_name}}.{{schema_name}}\n  {% endcall %}\n{% endmacro %}\n\n{% macro drop_schema(database_name, schema_name) -%}\n  {{ adapter_macro('drop_schema', database_name, schema_name) }}\n{% endmacro %}\n\n{% macro default__drop_schema(database_name, schema_name) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{database_name}}.{{schema_name}} cascade\n  {% endcall %}\n{% endmacro %}\n\n{% macro create_table_as(temporary, relation, sql) -%}\n  {{ adapter_macro('create_table_as', temporary, relation, sql) }}\n{%- endmacro %}\n\n{% macro default__create_table_as(temporary, relation, sql) -%}\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  as (\n    {{ sql }}\n  );\n{% endmacro %}\n\n{% macro create_view_as(relation, sql) -%}\n  {{ adapter_macro('create_view_as', relation, sql) }}\n{%- endmacro %}\n\n{% macro default__create_view_as(relation, sql) -%}\n  create view {{ relation }} as (\n    {{ sql }}\n  );\n{% endmacro %}\n\n\n{% macro get_catalog(information_schemas) -%}\n  {{ return(adapter_macro('get_catalog', information_schemas)) }}\n{%- endmacro %}\n\n{% macro default__get_catalog(information_schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}\n\n\n{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter_macro('get_columns_in_relation', relation)) }}\n{% endmacro %}\n\n{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}\n\n{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}\n\n{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter_macro('alter_column_type', relation, column_name, new_column_type)) }}\n{% endmacro %}\n\n{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ tmp_column }} {{ new_column_type }};\n    update {{ relation }} set {{ tmp_column }} = {{ column_name }};\n    alter table {{ relation }} drop column {{ column_name }} cascade;\n    alter table {{ relation }} rename column {{ tmp_column }} to {{ column_name }}\n  {% endcall %}\n\n{% endmacro %}\n\n\n{% macro drop_relation(relation) -%}\n  {{ return(adapter_macro('drop_relation', relation)) }}\n{% endmacro %}\n\n\n{% macro default__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    drop {{ relation.type }} if exists {{ relation }} cascade\n  {%- endcall %}\n{% endmacro %}\n\n{% macro truncate_relation(relation) -%}\n  {{ return(adapter_macro('truncate_relation', relation)) }}\n{% endmacro %}\n\n\n{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}\n\n{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter_macro('rename_relation', from_relation, to_relation)) }}\n{% endmacro %}\n\n{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}\n\n\n{% macro information_schema_name(database) %}\n  {{ return(adapter_macro('information_schema_name', database)) }}\n{% endmacro %}\n\n{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ adapter.quote_as_configured(database, 'database') }}.information_schema\n  {%- else -%}\n    information_schema\n  {%- endif -%}\n{%- endmacro %}\n\n\n{% macro list_schemas(database) -%}\n  {{ return(adapter_macro('list_schemas', database)) }}\n{% endmacro %}\n\n{% macro default__list_schemas(database) -%}\n  {% call statement('list_schemas', fetch_result=True, auto_begin=False) %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.schemata\n    where catalog_name ilike '{{ database }}'\n  {% endcall %}\n  {{ return(load_result('list_schemas').table) }}\n{% endmacro %}\n\n\n{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter_macro('check_schema_exists', information_schema, schema)) }}\n{% endmacro %}\n\n{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% call statement('check_schema_exists', fetch_result=True, auto_begin=False) -%}\n        select count(*)\n        from {{ information_schema }}.schemata\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{% endmacro %}\n\n\n{% macro list_relations_without_caching(information_schema, schema) %}\n  {{ return(adapter_macro('list_relations_without_caching', information_schema, schema)) }}\n{% endmacro %}\n\n\n{% macro default__list_relations_without_caching(information_schema, schema) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}\n\n\n{% macro current_timestamp() -%}\n  {{ adapter_macro('current_timestamp') }}\n{%- endmacro %}\n\n\n{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter '+adapter.type()) }}\n{%- endmacro %}\n\n\n{% macro collect_freshness(source, loaded_at_field) %}\n  {{ return(adapter_macro('collect_freshness', source, loaded_at_field))}}\n{% endmacro %}\n\n\n{% macro default__collect_freshness(source, loaded_at_field) %}\n  {% call statement('check_schema_exists', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n  {% endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{% endmacro %}\n\n{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter_macro('make_temp_relation', base_relation, suffix))}}\n{% endmacro %}\n\n{% macro default__make_temp_relation(base_relation, suffix) %}\n    {% set tmp_identifier = base_relation.identifier ~ suffix %}\n    {% set tmp_relation = base_relation.incorporate(\n                                path={\"identifier\": tmp_identifier},\n                                table_name=tmp_identifier) -%}\n\n    {% do return(tmp_relation) %}\n{% endmacro %}", "root_path": "/Users/mrich/.local/share/virtualenvs/quasar-qaRV2YEO/lib/python3.7/site-packages/dbt/include/global_project", "name": "check_schema_exists", "unique_id": "macro.dbt.check_schema_exists", "tags": [], "resource_type": "macro", "depends_on": {"macros": []}}, "macro.dbt.default__check_schema_exists": {"path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "package_name": "dbt", "raw_sql": "{% macro adapter_macro(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        In adapter_macro: could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set separator = '__' -%}\n  {%- set search_name = adapter.type() + separator + name -%}\n  {%- set default_name = 'default' + separator + name -%}\n\n  {%- if package_context.get(search_name) is not none -%}\n    {{ return(package_context[search_name](*varargs, **kwargs)) }}\n  {%- else -%}\n    {{ return(package_context[default_name](*varargs, **kwargs)) }}\n  {%- endif -%}\n{%- endmacro %}\n\n{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter_macro('get_columns_in_query', select_sql)) }}\n{% endmacro %}\n\n{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        select * from (\n            {{ select_sql }}\n        ) as __dbt_sbq\n        where false\n        limit 0\n    {% endcall %}\n\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}\n\n{% macro create_schema(database_name, schema_name) -%}\n  {{ adapter_macro('create_schema', database_name, schema_name) }}\n{% endmacro %}\n\n{% macro default__create_schema(database_name, schema_name) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{database_name}}.{{schema_name}}\n  {% endcall %}\n{% endmacro %}\n\n{% macro drop_schema(database_name, schema_name) -%}\n  {{ adapter_macro('drop_schema', database_name, schema_name) }}\n{% endmacro %}\n\n{% macro default__drop_schema(database_name, schema_name) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{database_name}}.{{schema_name}} cascade\n  {% endcall %}\n{% endmacro %}\n\n{% macro create_table_as(temporary, relation, sql) -%}\n  {{ adapter_macro('create_table_as', temporary, relation, sql) }}\n{%- endmacro %}\n\n{% macro default__create_table_as(temporary, relation, sql) -%}\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  as (\n    {{ sql }}\n  );\n{% endmacro %}\n\n{% macro create_view_as(relation, sql) -%}\n  {{ adapter_macro('create_view_as', relation, sql) }}\n{%- endmacro %}\n\n{% macro default__create_view_as(relation, sql) -%}\n  create view {{ relation }} as (\n    {{ sql }}\n  );\n{% endmacro %}\n\n\n{% macro get_catalog(information_schemas) -%}\n  {{ return(adapter_macro('get_catalog', information_schemas)) }}\n{%- endmacro %}\n\n{% macro default__get_catalog(information_schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}\n\n\n{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter_macro('get_columns_in_relation', relation)) }}\n{% endmacro %}\n\n{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}\n\n{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}\n\n{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter_macro('alter_column_type', relation, column_name, new_column_type)) }}\n{% endmacro %}\n\n{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ tmp_column }} {{ new_column_type }};\n    update {{ relation }} set {{ tmp_column }} = {{ column_name }};\n    alter table {{ relation }} drop column {{ column_name }} cascade;\n    alter table {{ relation }} rename column {{ tmp_column }} to {{ column_name }}\n  {% endcall %}\n\n{% endmacro %}\n\n\n{% macro drop_relation(relation) -%}\n  {{ return(adapter_macro('drop_relation', relation)) }}\n{% endmacro %}\n\n\n{% macro default__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    drop {{ relation.type }} if exists {{ relation }} cascade\n  {%- endcall %}\n{% endmacro %}\n\n{% macro truncate_relation(relation) -%}\n  {{ return(adapter_macro('truncate_relation', relation)) }}\n{% endmacro %}\n\n\n{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}\n\n{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter_macro('rename_relation', from_relation, to_relation)) }}\n{% endmacro %}\n\n{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}\n\n\n{% macro information_schema_name(database) %}\n  {{ return(adapter_macro('information_schema_name', database)) }}\n{% endmacro %}\n\n{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ adapter.quote_as_configured(database, 'database') }}.information_schema\n  {%- else -%}\n    information_schema\n  {%- endif -%}\n{%- endmacro %}\n\n\n{% macro list_schemas(database) -%}\n  {{ return(adapter_macro('list_schemas', database)) }}\n{% endmacro %}\n\n{% macro default__list_schemas(database) -%}\n  {% call statement('list_schemas', fetch_result=True, auto_begin=False) %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.schemata\n    where catalog_name ilike '{{ database }}'\n  {% endcall %}\n  {{ return(load_result('list_schemas').table) }}\n{% endmacro %}\n\n\n{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter_macro('check_schema_exists', information_schema, schema)) }}\n{% endmacro %}\n\n{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% call statement('check_schema_exists', fetch_result=True, auto_begin=False) -%}\n        select count(*)\n        from {{ information_schema }}.schemata\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{% endmacro %}\n\n\n{% macro list_relations_without_caching(information_schema, schema) %}\n  {{ return(adapter_macro('list_relations_without_caching', information_schema, schema)) }}\n{% endmacro %}\n\n\n{% macro default__list_relations_without_caching(information_schema, schema) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}\n\n\n{% macro current_timestamp() -%}\n  {{ adapter_macro('current_timestamp') }}\n{%- endmacro %}\n\n\n{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter '+adapter.type()) }}\n{%- endmacro %}\n\n\n{% macro collect_freshness(source, loaded_at_field) %}\n  {{ return(adapter_macro('collect_freshness', source, loaded_at_field))}}\n{% endmacro %}\n\n\n{% macro default__collect_freshness(source, loaded_at_field) %}\n  {% call statement('check_schema_exists', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n  {% endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{% endmacro %}\n\n{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter_macro('make_temp_relation', base_relation, suffix))}}\n{% endmacro %}\n\n{% macro default__make_temp_relation(base_relation, suffix) %}\n    {% set tmp_identifier = base_relation.identifier ~ suffix %}\n    {% set tmp_relation = base_relation.incorporate(\n                                path={\"identifier\": tmp_identifier},\n                                table_name=tmp_identifier) -%}\n\n    {% do return(tmp_relation) %}\n{% endmacro %}", "root_path": "/Users/mrich/.local/share/virtualenvs/quasar-qaRV2YEO/lib/python3.7/site-packages/dbt/include/global_project", "name": "default__check_schema_exists", "unique_id": "macro.dbt.default__check_schema_exists", "tags": [], "resource_type": "macro", "depends_on": {"macros": []}}, "macro.dbt.list_relations_without_caching": {"path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "package_name": "dbt", "raw_sql": "{% macro adapter_macro(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        In adapter_macro: could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set separator = '__' -%}\n  {%- set search_name = adapter.type() + separator + name -%}\n  {%- set default_name = 'default' + separator + name -%}\n\n  {%- if package_context.get(search_name) is not none -%}\n    {{ return(package_context[search_name](*varargs, **kwargs)) }}\n  {%- else -%}\n    {{ return(package_context[default_name](*varargs, **kwargs)) }}\n  {%- endif -%}\n{%- endmacro %}\n\n{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter_macro('get_columns_in_query', select_sql)) }}\n{% endmacro %}\n\n{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        select * from (\n            {{ select_sql }}\n        ) as __dbt_sbq\n        where false\n        limit 0\n    {% endcall %}\n\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}\n\n{% macro create_schema(database_name, schema_name) -%}\n  {{ adapter_macro('create_schema', database_name, schema_name) }}\n{% endmacro %}\n\n{% macro default__create_schema(database_name, schema_name) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{database_name}}.{{schema_name}}\n  {% endcall %}\n{% endmacro %}\n\n{% macro drop_schema(database_name, schema_name) -%}\n  {{ adapter_macro('drop_schema', database_name, schema_name) }}\n{% endmacro %}\n\n{% macro default__drop_schema(database_name, schema_name) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{database_name}}.{{schema_name}} cascade\n  {% endcall %}\n{% endmacro %}\n\n{% macro create_table_as(temporary, relation, sql) -%}\n  {{ adapter_macro('create_table_as', temporary, relation, sql) }}\n{%- endmacro %}\n\n{% macro default__create_table_as(temporary, relation, sql) -%}\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  as (\n    {{ sql }}\n  );\n{% endmacro %}\n\n{% macro create_view_as(relation, sql) -%}\n  {{ adapter_macro('create_view_as', relation, sql) }}\n{%- endmacro %}\n\n{% macro default__create_view_as(relation, sql) -%}\n  create view {{ relation }} as (\n    {{ sql }}\n  );\n{% endmacro %}\n\n\n{% macro get_catalog(information_schemas) -%}\n  {{ return(adapter_macro('get_catalog', information_schemas)) }}\n{%- endmacro %}\n\n{% macro default__get_catalog(information_schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}\n\n\n{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter_macro('get_columns_in_relation', relation)) }}\n{% endmacro %}\n\n{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}\n\n{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}\n\n{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter_macro('alter_column_type', relation, column_name, new_column_type)) }}\n{% endmacro %}\n\n{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ tmp_column }} {{ new_column_type }};\n    update {{ relation }} set {{ tmp_column }} = {{ column_name }};\n    alter table {{ relation }} drop column {{ column_name }} cascade;\n    alter table {{ relation }} rename column {{ tmp_column }} to {{ column_name }}\n  {% endcall %}\n\n{% endmacro %}\n\n\n{% macro drop_relation(relation) -%}\n  {{ return(adapter_macro('drop_relation', relation)) }}\n{% endmacro %}\n\n\n{% macro default__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    drop {{ relation.type }} if exists {{ relation }} cascade\n  {%- endcall %}\n{% endmacro %}\n\n{% macro truncate_relation(relation) -%}\n  {{ return(adapter_macro('truncate_relation', relation)) }}\n{% endmacro %}\n\n\n{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}\n\n{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter_macro('rename_relation', from_relation, to_relation)) }}\n{% endmacro %}\n\n{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}\n\n\n{% macro information_schema_name(database) %}\n  {{ return(adapter_macro('information_schema_name', database)) }}\n{% endmacro %}\n\n{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ adapter.quote_as_configured(database, 'database') }}.information_schema\n  {%- else -%}\n    information_schema\n  {%- endif -%}\n{%- endmacro %}\n\n\n{% macro list_schemas(database) -%}\n  {{ return(adapter_macro('list_schemas', database)) }}\n{% endmacro %}\n\n{% macro default__list_schemas(database) -%}\n  {% call statement('list_schemas', fetch_result=True, auto_begin=False) %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.schemata\n    where catalog_name ilike '{{ database }}'\n  {% endcall %}\n  {{ return(load_result('list_schemas').table) }}\n{% endmacro %}\n\n\n{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter_macro('check_schema_exists', information_schema, schema)) }}\n{% endmacro %}\n\n{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% call statement('check_schema_exists', fetch_result=True, auto_begin=False) -%}\n        select count(*)\n        from {{ information_schema }}.schemata\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{% endmacro %}\n\n\n{% macro list_relations_without_caching(information_schema, schema) %}\n  {{ return(adapter_macro('list_relations_without_caching', information_schema, schema)) }}\n{% endmacro %}\n\n\n{% macro default__list_relations_without_caching(information_schema, schema) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}\n\n\n{% macro current_timestamp() -%}\n  {{ adapter_macro('current_timestamp') }}\n{%- endmacro %}\n\n\n{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter '+adapter.type()) }}\n{%- endmacro %}\n\n\n{% macro collect_freshness(source, loaded_at_field) %}\n  {{ return(adapter_macro('collect_freshness', source, loaded_at_field))}}\n{% endmacro %}\n\n\n{% macro default__collect_freshness(source, loaded_at_field) %}\n  {% call statement('check_schema_exists', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n  {% endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{% endmacro %}\n\n{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter_macro('make_temp_relation', base_relation, suffix))}}\n{% endmacro %}\n\n{% macro default__make_temp_relation(base_relation, suffix) %}\n    {% set tmp_identifier = base_relation.identifier ~ suffix %}\n    {% set tmp_relation = base_relation.incorporate(\n                                path={\"identifier\": tmp_identifier},\n                                table_name=tmp_identifier) -%}\n\n    {% do return(tmp_relation) %}\n{% endmacro %}", "root_path": "/Users/mrich/.local/share/virtualenvs/quasar-qaRV2YEO/lib/python3.7/site-packages/dbt/include/global_project", "name": "list_relations_without_caching", "unique_id": "macro.dbt.list_relations_without_caching", "tags": [], "resource_type": "macro", "depends_on": {"macros": []}}, "macro.dbt.default__list_relations_without_caching": {"path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "package_name": "dbt", "raw_sql": "{% macro adapter_macro(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        In adapter_macro: could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set separator = '__' -%}\n  {%- set search_name = adapter.type() + separator + name -%}\n  {%- set default_name = 'default' + separator + name -%}\n\n  {%- if package_context.get(search_name) is not none -%}\n    {{ return(package_context[search_name](*varargs, **kwargs)) }}\n  {%- else -%}\n    {{ return(package_context[default_name](*varargs, **kwargs)) }}\n  {%- endif -%}\n{%- endmacro %}\n\n{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter_macro('get_columns_in_query', select_sql)) }}\n{% endmacro %}\n\n{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        select * from (\n            {{ select_sql }}\n        ) as __dbt_sbq\n        where false\n        limit 0\n    {% endcall %}\n\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}\n\n{% macro create_schema(database_name, schema_name) -%}\n  {{ adapter_macro('create_schema', database_name, schema_name) }}\n{% endmacro %}\n\n{% macro default__create_schema(database_name, schema_name) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{database_name}}.{{schema_name}}\n  {% endcall %}\n{% endmacro %}\n\n{% macro drop_schema(database_name, schema_name) -%}\n  {{ adapter_macro('drop_schema', database_name, schema_name) }}\n{% endmacro %}\n\n{% macro default__drop_schema(database_name, schema_name) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{database_name}}.{{schema_name}} cascade\n  {% endcall %}\n{% endmacro %}\n\n{% macro create_table_as(temporary, relation, sql) -%}\n  {{ adapter_macro('create_table_as', temporary, relation, sql) }}\n{%- endmacro %}\n\n{% macro default__create_table_as(temporary, relation, sql) -%}\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  as (\n    {{ sql }}\n  );\n{% endmacro %}\n\n{% macro create_view_as(relation, sql) -%}\n  {{ adapter_macro('create_view_as', relation, sql) }}\n{%- endmacro %}\n\n{% macro default__create_view_as(relation, sql) -%}\n  create view {{ relation }} as (\n    {{ sql }}\n  );\n{% endmacro %}\n\n\n{% macro get_catalog(information_schemas) -%}\n  {{ return(adapter_macro('get_catalog', information_schemas)) }}\n{%- endmacro %}\n\n{% macro default__get_catalog(information_schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}\n\n\n{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter_macro('get_columns_in_relation', relation)) }}\n{% endmacro %}\n\n{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}\n\n{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}\n\n{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter_macro('alter_column_type', relation, column_name, new_column_type)) }}\n{% endmacro %}\n\n{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ tmp_column }} {{ new_column_type }};\n    update {{ relation }} set {{ tmp_column }} = {{ column_name }};\n    alter table {{ relation }} drop column {{ column_name }} cascade;\n    alter table {{ relation }} rename column {{ tmp_column }} to {{ column_name }}\n  {% endcall %}\n\n{% endmacro %}\n\n\n{% macro drop_relation(relation) -%}\n  {{ return(adapter_macro('drop_relation', relation)) }}\n{% endmacro %}\n\n\n{% macro default__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    drop {{ relation.type }} if exists {{ relation }} cascade\n  {%- endcall %}\n{% endmacro %}\n\n{% macro truncate_relation(relation) -%}\n  {{ return(adapter_macro('truncate_relation', relation)) }}\n{% endmacro %}\n\n\n{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}\n\n{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter_macro('rename_relation', from_relation, to_relation)) }}\n{% endmacro %}\n\n{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}\n\n\n{% macro information_schema_name(database) %}\n  {{ return(adapter_macro('information_schema_name', database)) }}\n{% endmacro %}\n\n{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ adapter.quote_as_configured(database, 'database') }}.information_schema\n  {%- else -%}\n    information_schema\n  {%- endif -%}\n{%- endmacro %}\n\n\n{% macro list_schemas(database) -%}\n  {{ return(adapter_macro('list_schemas', database)) }}\n{% endmacro %}\n\n{% macro default__list_schemas(database) -%}\n  {% call statement('list_schemas', fetch_result=True, auto_begin=False) %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.schemata\n    where catalog_name ilike '{{ database }}'\n  {% endcall %}\n  {{ return(load_result('list_schemas').table) }}\n{% endmacro %}\n\n\n{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter_macro('check_schema_exists', information_schema, schema)) }}\n{% endmacro %}\n\n{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% call statement('check_schema_exists', fetch_result=True, auto_begin=False) -%}\n        select count(*)\n        from {{ information_schema }}.schemata\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{% endmacro %}\n\n\n{% macro list_relations_without_caching(information_schema, schema) %}\n  {{ return(adapter_macro('list_relations_without_caching', information_schema, schema)) }}\n{% endmacro %}\n\n\n{% macro default__list_relations_without_caching(information_schema, schema) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}\n\n\n{% macro current_timestamp() -%}\n  {{ adapter_macro('current_timestamp') }}\n{%- endmacro %}\n\n\n{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter '+adapter.type()) }}\n{%- endmacro %}\n\n\n{% macro collect_freshness(source, loaded_at_field) %}\n  {{ return(adapter_macro('collect_freshness', source, loaded_at_field))}}\n{% endmacro %}\n\n\n{% macro default__collect_freshness(source, loaded_at_field) %}\n  {% call statement('check_schema_exists', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n  {% endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{% endmacro %}\n\n{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter_macro('make_temp_relation', base_relation, suffix))}}\n{% endmacro %}\n\n{% macro default__make_temp_relation(base_relation, suffix) %}\n    {% set tmp_identifier = base_relation.identifier ~ suffix %}\n    {% set tmp_relation = base_relation.incorporate(\n                                path={\"identifier\": tmp_identifier},\n                                table_name=tmp_identifier) -%}\n\n    {% do return(tmp_relation) %}\n{% endmacro %}", "root_path": "/Users/mrich/.local/share/virtualenvs/quasar-qaRV2YEO/lib/python3.7/site-packages/dbt/include/global_project", "name": "default__list_relations_without_caching", "unique_id": "macro.dbt.default__list_relations_without_caching", "tags": [], "resource_type": "macro", "depends_on": {"macros": []}}, "macro.dbt.current_timestamp": {"path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "package_name": "dbt", "raw_sql": "{% macro adapter_macro(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        In adapter_macro: could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set separator = '__' -%}\n  {%- set search_name = adapter.type() + separator + name -%}\n  {%- set default_name = 'default' + separator + name -%}\n\n  {%- if package_context.get(search_name) is not none -%}\n    {{ return(package_context[search_name](*varargs, **kwargs)) }}\n  {%- else -%}\n    {{ return(package_context[default_name](*varargs, **kwargs)) }}\n  {%- endif -%}\n{%- endmacro %}\n\n{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter_macro('get_columns_in_query', select_sql)) }}\n{% endmacro %}\n\n{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        select * from (\n            {{ select_sql }}\n        ) as __dbt_sbq\n        where false\n        limit 0\n    {% endcall %}\n\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}\n\n{% macro create_schema(database_name, schema_name) -%}\n  {{ adapter_macro('create_schema', database_name, schema_name) }}\n{% endmacro %}\n\n{% macro default__create_schema(database_name, schema_name) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{database_name}}.{{schema_name}}\n  {% endcall %}\n{% endmacro %}\n\n{% macro drop_schema(database_name, schema_name) -%}\n  {{ adapter_macro('drop_schema', database_name, schema_name) }}\n{% endmacro %}\n\n{% macro default__drop_schema(database_name, schema_name) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{database_name}}.{{schema_name}} cascade\n  {% endcall %}\n{% endmacro %}\n\n{% macro create_table_as(temporary, relation, sql) -%}\n  {{ adapter_macro('create_table_as', temporary, relation, sql) }}\n{%- endmacro %}\n\n{% macro default__create_table_as(temporary, relation, sql) -%}\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  as (\n    {{ sql }}\n  );\n{% endmacro %}\n\n{% macro create_view_as(relation, sql) -%}\n  {{ adapter_macro('create_view_as', relation, sql) }}\n{%- endmacro %}\n\n{% macro default__create_view_as(relation, sql) -%}\n  create view {{ relation }} as (\n    {{ sql }}\n  );\n{% endmacro %}\n\n\n{% macro get_catalog(information_schemas) -%}\n  {{ return(adapter_macro('get_catalog', information_schemas)) }}\n{%- endmacro %}\n\n{% macro default__get_catalog(information_schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}\n\n\n{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter_macro('get_columns_in_relation', relation)) }}\n{% endmacro %}\n\n{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}\n\n{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}\n\n{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter_macro('alter_column_type', relation, column_name, new_column_type)) }}\n{% endmacro %}\n\n{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ tmp_column }} {{ new_column_type }};\n    update {{ relation }} set {{ tmp_column }} = {{ column_name }};\n    alter table {{ relation }} drop column {{ column_name }} cascade;\n    alter table {{ relation }} rename column {{ tmp_column }} to {{ column_name }}\n  {% endcall %}\n\n{% endmacro %}\n\n\n{% macro drop_relation(relation) -%}\n  {{ return(adapter_macro('drop_relation', relation)) }}\n{% endmacro %}\n\n\n{% macro default__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    drop {{ relation.type }} if exists {{ relation }} cascade\n  {%- endcall %}\n{% endmacro %}\n\n{% macro truncate_relation(relation) -%}\n  {{ return(adapter_macro('truncate_relation', relation)) }}\n{% endmacro %}\n\n\n{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}\n\n{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter_macro('rename_relation', from_relation, to_relation)) }}\n{% endmacro %}\n\n{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}\n\n\n{% macro information_schema_name(database) %}\n  {{ return(adapter_macro('information_schema_name', database)) }}\n{% endmacro %}\n\n{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ adapter.quote_as_configured(database, 'database') }}.information_schema\n  {%- else -%}\n    information_schema\n  {%- endif -%}\n{%- endmacro %}\n\n\n{% macro list_schemas(database) -%}\n  {{ return(adapter_macro('list_schemas', database)) }}\n{% endmacro %}\n\n{% macro default__list_schemas(database) -%}\n  {% call statement('list_schemas', fetch_result=True, auto_begin=False) %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.schemata\n    where catalog_name ilike '{{ database }}'\n  {% endcall %}\n  {{ return(load_result('list_schemas').table) }}\n{% endmacro %}\n\n\n{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter_macro('check_schema_exists', information_schema, schema)) }}\n{% endmacro %}\n\n{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% call statement('check_schema_exists', fetch_result=True, auto_begin=False) -%}\n        select count(*)\n        from {{ information_schema }}.schemata\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{% endmacro %}\n\n\n{% macro list_relations_without_caching(information_schema, schema) %}\n  {{ return(adapter_macro('list_relations_without_caching', information_schema, schema)) }}\n{% endmacro %}\n\n\n{% macro default__list_relations_without_caching(information_schema, schema) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}\n\n\n{% macro current_timestamp() -%}\n  {{ adapter_macro('current_timestamp') }}\n{%- endmacro %}\n\n\n{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter '+adapter.type()) }}\n{%- endmacro %}\n\n\n{% macro collect_freshness(source, loaded_at_field) %}\n  {{ return(adapter_macro('collect_freshness', source, loaded_at_field))}}\n{% endmacro %}\n\n\n{% macro default__collect_freshness(source, loaded_at_field) %}\n  {% call statement('check_schema_exists', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n  {% endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{% endmacro %}\n\n{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter_macro('make_temp_relation', base_relation, suffix))}}\n{% endmacro %}\n\n{% macro default__make_temp_relation(base_relation, suffix) %}\n    {% set tmp_identifier = base_relation.identifier ~ suffix %}\n    {% set tmp_relation = base_relation.incorporate(\n                                path={\"identifier\": tmp_identifier},\n                                table_name=tmp_identifier) -%}\n\n    {% do return(tmp_relation) %}\n{% endmacro %}", "root_path": "/Users/mrich/.local/share/virtualenvs/quasar-qaRV2YEO/lib/python3.7/site-packages/dbt/include/global_project", "name": "current_timestamp", "unique_id": "macro.dbt.current_timestamp", "tags": [], "resource_type": "macro", "depends_on": {"macros": []}}, "macro.dbt.default__current_timestamp": {"path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "package_name": "dbt", "raw_sql": "{% macro adapter_macro(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        In adapter_macro: could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set separator = '__' -%}\n  {%- set search_name = adapter.type() + separator + name -%}\n  {%- set default_name = 'default' + separator + name -%}\n\n  {%- if package_context.get(search_name) is not none -%}\n    {{ return(package_context[search_name](*varargs, **kwargs)) }}\n  {%- else -%}\n    {{ return(package_context[default_name](*varargs, **kwargs)) }}\n  {%- endif -%}\n{%- endmacro %}\n\n{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter_macro('get_columns_in_query', select_sql)) }}\n{% endmacro %}\n\n{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        select * from (\n            {{ select_sql }}\n        ) as __dbt_sbq\n        where false\n        limit 0\n    {% endcall %}\n\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}\n\n{% macro create_schema(database_name, schema_name) -%}\n  {{ adapter_macro('create_schema', database_name, schema_name) }}\n{% endmacro %}\n\n{% macro default__create_schema(database_name, schema_name) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{database_name}}.{{schema_name}}\n  {% endcall %}\n{% endmacro %}\n\n{% macro drop_schema(database_name, schema_name) -%}\n  {{ adapter_macro('drop_schema', database_name, schema_name) }}\n{% endmacro %}\n\n{% macro default__drop_schema(database_name, schema_name) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{database_name}}.{{schema_name}} cascade\n  {% endcall %}\n{% endmacro %}\n\n{% macro create_table_as(temporary, relation, sql) -%}\n  {{ adapter_macro('create_table_as', temporary, relation, sql) }}\n{%- endmacro %}\n\n{% macro default__create_table_as(temporary, relation, sql) -%}\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  as (\n    {{ sql }}\n  );\n{% endmacro %}\n\n{% macro create_view_as(relation, sql) -%}\n  {{ adapter_macro('create_view_as', relation, sql) }}\n{%- endmacro %}\n\n{% macro default__create_view_as(relation, sql) -%}\n  create view {{ relation }} as (\n    {{ sql }}\n  );\n{% endmacro %}\n\n\n{% macro get_catalog(information_schemas) -%}\n  {{ return(adapter_macro('get_catalog', information_schemas)) }}\n{%- endmacro %}\n\n{% macro default__get_catalog(information_schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}\n\n\n{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter_macro('get_columns_in_relation', relation)) }}\n{% endmacro %}\n\n{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}\n\n{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}\n\n{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter_macro('alter_column_type', relation, column_name, new_column_type)) }}\n{% endmacro %}\n\n{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ tmp_column }} {{ new_column_type }};\n    update {{ relation }} set {{ tmp_column }} = {{ column_name }};\n    alter table {{ relation }} drop column {{ column_name }} cascade;\n    alter table {{ relation }} rename column {{ tmp_column }} to {{ column_name }}\n  {% endcall %}\n\n{% endmacro %}\n\n\n{% macro drop_relation(relation) -%}\n  {{ return(adapter_macro('drop_relation', relation)) }}\n{% endmacro %}\n\n\n{% macro default__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    drop {{ relation.type }} if exists {{ relation }} cascade\n  {%- endcall %}\n{% endmacro %}\n\n{% macro truncate_relation(relation) -%}\n  {{ return(adapter_macro('truncate_relation', relation)) }}\n{% endmacro %}\n\n\n{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}\n\n{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter_macro('rename_relation', from_relation, to_relation)) }}\n{% endmacro %}\n\n{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}\n\n\n{% macro information_schema_name(database) %}\n  {{ return(adapter_macro('information_schema_name', database)) }}\n{% endmacro %}\n\n{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ adapter.quote_as_configured(database, 'database') }}.information_schema\n  {%- else -%}\n    information_schema\n  {%- endif -%}\n{%- endmacro %}\n\n\n{% macro list_schemas(database) -%}\n  {{ return(adapter_macro('list_schemas', database)) }}\n{% endmacro %}\n\n{% macro default__list_schemas(database) -%}\n  {% call statement('list_schemas', fetch_result=True, auto_begin=False) %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.schemata\n    where catalog_name ilike '{{ database }}'\n  {% endcall %}\n  {{ return(load_result('list_schemas').table) }}\n{% endmacro %}\n\n\n{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter_macro('check_schema_exists', information_schema, schema)) }}\n{% endmacro %}\n\n{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% call statement('check_schema_exists', fetch_result=True, auto_begin=False) -%}\n        select count(*)\n        from {{ information_schema }}.schemata\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{% endmacro %}\n\n\n{% macro list_relations_without_caching(information_schema, schema) %}\n  {{ return(adapter_macro('list_relations_without_caching', information_schema, schema)) }}\n{% endmacro %}\n\n\n{% macro default__list_relations_without_caching(information_schema, schema) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}\n\n\n{% macro current_timestamp() -%}\n  {{ adapter_macro('current_timestamp') }}\n{%- endmacro %}\n\n\n{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter '+adapter.type()) }}\n{%- endmacro %}\n\n\n{% macro collect_freshness(source, loaded_at_field) %}\n  {{ return(adapter_macro('collect_freshness', source, loaded_at_field))}}\n{% endmacro %}\n\n\n{% macro default__collect_freshness(source, loaded_at_field) %}\n  {% call statement('check_schema_exists', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n  {% endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{% endmacro %}\n\n{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter_macro('make_temp_relation', base_relation, suffix))}}\n{% endmacro %}\n\n{% macro default__make_temp_relation(base_relation, suffix) %}\n    {% set tmp_identifier = base_relation.identifier ~ suffix %}\n    {% set tmp_relation = base_relation.incorporate(\n                                path={\"identifier\": tmp_identifier},\n                                table_name=tmp_identifier) -%}\n\n    {% do return(tmp_relation) %}\n{% endmacro %}", "root_path": "/Users/mrich/.local/share/virtualenvs/quasar-qaRV2YEO/lib/python3.7/site-packages/dbt/include/global_project", "name": "default__current_timestamp", "unique_id": "macro.dbt.default__current_timestamp", "tags": [], "resource_type": "macro", "depends_on": {"macros": []}}, "macro.dbt.collect_freshness": {"path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "package_name": "dbt", "raw_sql": "{% macro adapter_macro(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        In adapter_macro: could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set separator = '__' -%}\n  {%- set search_name = adapter.type() + separator + name -%}\n  {%- set default_name = 'default' + separator + name -%}\n\n  {%- if package_context.get(search_name) is not none -%}\n    {{ return(package_context[search_name](*varargs, **kwargs)) }}\n  {%- else -%}\n    {{ return(package_context[default_name](*varargs, **kwargs)) }}\n  {%- endif -%}\n{%- endmacro %}\n\n{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter_macro('get_columns_in_query', select_sql)) }}\n{% endmacro %}\n\n{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        select * from (\n            {{ select_sql }}\n        ) as __dbt_sbq\n        where false\n        limit 0\n    {% endcall %}\n\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}\n\n{% macro create_schema(database_name, schema_name) -%}\n  {{ adapter_macro('create_schema', database_name, schema_name) }}\n{% endmacro %}\n\n{% macro default__create_schema(database_name, schema_name) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{database_name}}.{{schema_name}}\n  {% endcall %}\n{% endmacro %}\n\n{% macro drop_schema(database_name, schema_name) -%}\n  {{ adapter_macro('drop_schema', database_name, schema_name) }}\n{% endmacro %}\n\n{% macro default__drop_schema(database_name, schema_name) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{database_name}}.{{schema_name}} cascade\n  {% endcall %}\n{% endmacro %}\n\n{% macro create_table_as(temporary, relation, sql) -%}\n  {{ adapter_macro('create_table_as', temporary, relation, sql) }}\n{%- endmacro %}\n\n{% macro default__create_table_as(temporary, relation, sql) -%}\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  as (\n    {{ sql }}\n  );\n{% endmacro %}\n\n{% macro create_view_as(relation, sql) -%}\n  {{ adapter_macro('create_view_as', relation, sql) }}\n{%- endmacro %}\n\n{% macro default__create_view_as(relation, sql) -%}\n  create view {{ relation }} as (\n    {{ sql }}\n  );\n{% endmacro %}\n\n\n{% macro get_catalog(information_schemas) -%}\n  {{ return(adapter_macro('get_catalog', information_schemas)) }}\n{%- endmacro %}\n\n{% macro default__get_catalog(information_schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}\n\n\n{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter_macro('get_columns_in_relation', relation)) }}\n{% endmacro %}\n\n{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}\n\n{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}\n\n{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter_macro('alter_column_type', relation, column_name, new_column_type)) }}\n{% endmacro %}\n\n{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ tmp_column }} {{ new_column_type }};\n    update {{ relation }} set {{ tmp_column }} = {{ column_name }};\n    alter table {{ relation }} drop column {{ column_name }} cascade;\n    alter table {{ relation }} rename column {{ tmp_column }} to {{ column_name }}\n  {% endcall %}\n\n{% endmacro %}\n\n\n{% macro drop_relation(relation) -%}\n  {{ return(adapter_macro('drop_relation', relation)) }}\n{% endmacro %}\n\n\n{% macro default__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    drop {{ relation.type }} if exists {{ relation }} cascade\n  {%- endcall %}\n{% endmacro %}\n\n{% macro truncate_relation(relation) -%}\n  {{ return(adapter_macro('truncate_relation', relation)) }}\n{% endmacro %}\n\n\n{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}\n\n{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter_macro('rename_relation', from_relation, to_relation)) }}\n{% endmacro %}\n\n{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}\n\n\n{% macro information_schema_name(database) %}\n  {{ return(adapter_macro('information_schema_name', database)) }}\n{% endmacro %}\n\n{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ adapter.quote_as_configured(database, 'database') }}.information_schema\n  {%- else -%}\n    information_schema\n  {%- endif -%}\n{%- endmacro %}\n\n\n{% macro list_schemas(database) -%}\n  {{ return(adapter_macro('list_schemas', database)) }}\n{% endmacro %}\n\n{% macro default__list_schemas(database) -%}\n  {% call statement('list_schemas', fetch_result=True, auto_begin=False) %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.schemata\n    where catalog_name ilike '{{ database }}'\n  {% endcall %}\n  {{ return(load_result('list_schemas').table) }}\n{% endmacro %}\n\n\n{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter_macro('check_schema_exists', information_schema, schema)) }}\n{% endmacro %}\n\n{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% call statement('check_schema_exists', fetch_result=True, auto_begin=False) -%}\n        select count(*)\n        from {{ information_schema }}.schemata\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{% endmacro %}\n\n\n{% macro list_relations_without_caching(information_schema, schema) %}\n  {{ return(adapter_macro('list_relations_without_caching', information_schema, schema)) }}\n{% endmacro %}\n\n\n{% macro default__list_relations_without_caching(information_schema, schema) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}\n\n\n{% macro current_timestamp() -%}\n  {{ adapter_macro('current_timestamp') }}\n{%- endmacro %}\n\n\n{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter '+adapter.type()) }}\n{%- endmacro %}\n\n\n{% macro collect_freshness(source, loaded_at_field) %}\n  {{ return(adapter_macro('collect_freshness', source, loaded_at_field))}}\n{% endmacro %}\n\n\n{% macro default__collect_freshness(source, loaded_at_field) %}\n  {% call statement('check_schema_exists', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n  {% endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{% endmacro %}\n\n{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter_macro('make_temp_relation', base_relation, suffix))}}\n{% endmacro %}\n\n{% macro default__make_temp_relation(base_relation, suffix) %}\n    {% set tmp_identifier = base_relation.identifier ~ suffix %}\n    {% set tmp_relation = base_relation.incorporate(\n                                path={\"identifier\": tmp_identifier},\n                                table_name=tmp_identifier) -%}\n\n    {% do return(tmp_relation) %}\n{% endmacro %}", "root_path": "/Users/mrich/.local/share/virtualenvs/quasar-qaRV2YEO/lib/python3.7/site-packages/dbt/include/global_project", "name": "collect_freshness", "unique_id": "macro.dbt.collect_freshness", "tags": [], "resource_type": "macro", "depends_on": {"macros": []}}, "macro.dbt.default__collect_freshness": {"path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "package_name": "dbt", "raw_sql": "{% macro adapter_macro(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        In adapter_macro: could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set separator = '__' -%}\n  {%- set search_name = adapter.type() + separator + name -%}\n  {%- set default_name = 'default' + separator + name -%}\n\n  {%- if package_context.get(search_name) is not none -%}\n    {{ return(package_context[search_name](*varargs, **kwargs)) }}\n  {%- else -%}\n    {{ return(package_context[default_name](*varargs, **kwargs)) }}\n  {%- endif -%}\n{%- endmacro %}\n\n{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter_macro('get_columns_in_query', select_sql)) }}\n{% endmacro %}\n\n{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        select * from (\n            {{ select_sql }}\n        ) as __dbt_sbq\n        where false\n        limit 0\n    {% endcall %}\n\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}\n\n{% macro create_schema(database_name, schema_name) -%}\n  {{ adapter_macro('create_schema', database_name, schema_name) }}\n{% endmacro %}\n\n{% macro default__create_schema(database_name, schema_name) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{database_name}}.{{schema_name}}\n  {% endcall %}\n{% endmacro %}\n\n{% macro drop_schema(database_name, schema_name) -%}\n  {{ adapter_macro('drop_schema', database_name, schema_name) }}\n{% endmacro %}\n\n{% macro default__drop_schema(database_name, schema_name) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{database_name}}.{{schema_name}} cascade\n  {% endcall %}\n{% endmacro %}\n\n{% macro create_table_as(temporary, relation, sql) -%}\n  {{ adapter_macro('create_table_as', temporary, relation, sql) }}\n{%- endmacro %}\n\n{% macro default__create_table_as(temporary, relation, sql) -%}\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  as (\n    {{ sql }}\n  );\n{% endmacro %}\n\n{% macro create_view_as(relation, sql) -%}\n  {{ adapter_macro('create_view_as', relation, sql) }}\n{%- endmacro %}\n\n{% macro default__create_view_as(relation, sql) -%}\n  create view {{ relation }} as (\n    {{ sql }}\n  );\n{% endmacro %}\n\n\n{% macro get_catalog(information_schemas) -%}\n  {{ return(adapter_macro('get_catalog', information_schemas)) }}\n{%- endmacro %}\n\n{% macro default__get_catalog(information_schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}\n\n\n{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter_macro('get_columns_in_relation', relation)) }}\n{% endmacro %}\n\n{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}\n\n{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}\n\n{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter_macro('alter_column_type', relation, column_name, new_column_type)) }}\n{% endmacro %}\n\n{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ tmp_column }} {{ new_column_type }};\n    update {{ relation }} set {{ tmp_column }} = {{ column_name }};\n    alter table {{ relation }} drop column {{ column_name }} cascade;\n    alter table {{ relation }} rename column {{ tmp_column }} to {{ column_name }}\n  {% endcall %}\n\n{% endmacro %}\n\n\n{% macro drop_relation(relation) -%}\n  {{ return(adapter_macro('drop_relation', relation)) }}\n{% endmacro %}\n\n\n{% macro default__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    drop {{ relation.type }} if exists {{ relation }} cascade\n  {%- endcall %}\n{% endmacro %}\n\n{% macro truncate_relation(relation) -%}\n  {{ return(adapter_macro('truncate_relation', relation)) }}\n{% endmacro %}\n\n\n{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}\n\n{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter_macro('rename_relation', from_relation, to_relation)) }}\n{% endmacro %}\n\n{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}\n\n\n{% macro information_schema_name(database) %}\n  {{ return(adapter_macro('information_schema_name', database)) }}\n{% endmacro %}\n\n{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ adapter.quote_as_configured(database, 'database') }}.information_schema\n  {%- else -%}\n    information_schema\n  {%- endif -%}\n{%- endmacro %}\n\n\n{% macro list_schemas(database) -%}\n  {{ return(adapter_macro('list_schemas', database)) }}\n{% endmacro %}\n\n{% macro default__list_schemas(database) -%}\n  {% call statement('list_schemas', fetch_result=True, auto_begin=False) %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.schemata\n    where catalog_name ilike '{{ database }}'\n  {% endcall %}\n  {{ return(load_result('list_schemas').table) }}\n{% endmacro %}\n\n\n{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter_macro('check_schema_exists', information_schema, schema)) }}\n{% endmacro %}\n\n{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% call statement('check_schema_exists', fetch_result=True, auto_begin=False) -%}\n        select count(*)\n        from {{ information_schema }}.schemata\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{% endmacro %}\n\n\n{% macro list_relations_without_caching(information_schema, schema) %}\n  {{ return(adapter_macro('list_relations_without_caching', information_schema, schema)) }}\n{% endmacro %}\n\n\n{% macro default__list_relations_without_caching(information_schema, schema) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}\n\n\n{% macro current_timestamp() -%}\n  {{ adapter_macro('current_timestamp') }}\n{%- endmacro %}\n\n\n{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter '+adapter.type()) }}\n{%- endmacro %}\n\n\n{% macro collect_freshness(source, loaded_at_field) %}\n  {{ return(adapter_macro('collect_freshness', source, loaded_at_field))}}\n{% endmacro %}\n\n\n{% macro default__collect_freshness(source, loaded_at_field) %}\n  {% call statement('check_schema_exists', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n  {% endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{% endmacro %}\n\n{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter_macro('make_temp_relation', base_relation, suffix))}}\n{% endmacro %}\n\n{% macro default__make_temp_relation(base_relation, suffix) %}\n    {% set tmp_identifier = base_relation.identifier ~ suffix %}\n    {% set tmp_relation = base_relation.incorporate(\n                                path={\"identifier\": tmp_identifier},\n                                table_name=tmp_identifier) -%}\n\n    {% do return(tmp_relation) %}\n{% endmacro %}", "root_path": "/Users/mrich/.local/share/virtualenvs/quasar-qaRV2YEO/lib/python3.7/site-packages/dbt/include/global_project", "name": "default__collect_freshness", "unique_id": "macro.dbt.default__collect_freshness", "tags": [], "resource_type": "macro", "depends_on": {"macros": []}}, "macro.dbt.make_temp_relation": {"path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "package_name": "dbt", "raw_sql": "{% macro adapter_macro(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        In adapter_macro: could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set separator = '__' -%}\n  {%- set search_name = adapter.type() + separator + name -%}\n  {%- set default_name = 'default' + separator + name -%}\n\n  {%- if package_context.get(search_name) is not none -%}\n    {{ return(package_context[search_name](*varargs, **kwargs)) }}\n  {%- else -%}\n    {{ return(package_context[default_name](*varargs, **kwargs)) }}\n  {%- endif -%}\n{%- endmacro %}\n\n{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter_macro('get_columns_in_query', select_sql)) }}\n{% endmacro %}\n\n{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        select * from (\n            {{ select_sql }}\n        ) as __dbt_sbq\n        where false\n        limit 0\n    {% endcall %}\n\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}\n\n{% macro create_schema(database_name, schema_name) -%}\n  {{ adapter_macro('create_schema', database_name, schema_name) }}\n{% endmacro %}\n\n{% macro default__create_schema(database_name, schema_name) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{database_name}}.{{schema_name}}\n  {% endcall %}\n{% endmacro %}\n\n{% macro drop_schema(database_name, schema_name) -%}\n  {{ adapter_macro('drop_schema', database_name, schema_name) }}\n{% endmacro %}\n\n{% macro default__drop_schema(database_name, schema_name) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{database_name}}.{{schema_name}} cascade\n  {% endcall %}\n{% endmacro %}\n\n{% macro create_table_as(temporary, relation, sql) -%}\n  {{ adapter_macro('create_table_as', temporary, relation, sql) }}\n{%- endmacro %}\n\n{% macro default__create_table_as(temporary, relation, sql) -%}\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  as (\n    {{ sql }}\n  );\n{% endmacro %}\n\n{% macro create_view_as(relation, sql) -%}\n  {{ adapter_macro('create_view_as', relation, sql) }}\n{%- endmacro %}\n\n{% macro default__create_view_as(relation, sql) -%}\n  create view {{ relation }} as (\n    {{ sql }}\n  );\n{% endmacro %}\n\n\n{% macro get_catalog(information_schemas) -%}\n  {{ return(adapter_macro('get_catalog', information_schemas)) }}\n{%- endmacro %}\n\n{% macro default__get_catalog(information_schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}\n\n\n{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter_macro('get_columns_in_relation', relation)) }}\n{% endmacro %}\n\n{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}\n\n{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}\n\n{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter_macro('alter_column_type', relation, column_name, new_column_type)) }}\n{% endmacro %}\n\n{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ tmp_column }} {{ new_column_type }};\n    update {{ relation }} set {{ tmp_column }} = {{ column_name }};\n    alter table {{ relation }} drop column {{ column_name }} cascade;\n    alter table {{ relation }} rename column {{ tmp_column }} to {{ column_name }}\n  {% endcall %}\n\n{% endmacro %}\n\n\n{% macro drop_relation(relation) -%}\n  {{ return(adapter_macro('drop_relation', relation)) }}\n{% endmacro %}\n\n\n{% macro default__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    drop {{ relation.type }} if exists {{ relation }} cascade\n  {%- endcall %}\n{% endmacro %}\n\n{% macro truncate_relation(relation) -%}\n  {{ return(adapter_macro('truncate_relation', relation)) }}\n{% endmacro %}\n\n\n{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}\n\n{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter_macro('rename_relation', from_relation, to_relation)) }}\n{% endmacro %}\n\n{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}\n\n\n{% macro information_schema_name(database) %}\n  {{ return(adapter_macro('information_schema_name', database)) }}\n{% endmacro %}\n\n{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ adapter.quote_as_configured(database, 'database') }}.information_schema\n  {%- else -%}\n    information_schema\n  {%- endif -%}\n{%- endmacro %}\n\n\n{% macro list_schemas(database) -%}\n  {{ return(adapter_macro('list_schemas', database)) }}\n{% endmacro %}\n\n{% macro default__list_schemas(database) -%}\n  {% call statement('list_schemas', fetch_result=True, auto_begin=False) %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.schemata\n    where catalog_name ilike '{{ database }}'\n  {% endcall %}\n  {{ return(load_result('list_schemas').table) }}\n{% endmacro %}\n\n\n{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter_macro('check_schema_exists', information_schema, schema)) }}\n{% endmacro %}\n\n{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% call statement('check_schema_exists', fetch_result=True, auto_begin=False) -%}\n        select count(*)\n        from {{ information_schema }}.schemata\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{% endmacro %}\n\n\n{% macro list_relations_without_caching(information_schema, schema) %}\n  {{ return(adapter_macro('list_relations_without_caching', information_schema, schema)) }}\n{% endmacro %}\n\n\n{% macro default__list_relations_without_caching(information_schema, schema) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}\n\n\n{% macro current_timestamp() -%}\n  {{ adapter_macro('current_timestamp') }}\n{%- endmacro %}\n\n\n{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter '+adapter.type()) }}\n{%- endmacro %}\n\n\n{% macro collect_freshness(source, loaded_at_field) %}\n  {{ return(adapter_macro('collect_freshness', source, loaded_at_field))}}\n{% endmacro %}\n\n\n{% macro default__collect_freshness(source, loaded_at_field) %}\n  {% call statement('check_schema_exists', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n  {% endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{% endmacro %}\n\n{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter_macro('make_temp_relation', base_relation, suffix))}}\n{% endmacro %}\n\n{% macro default__make_temp_relation(base_relation, suffix) %}\n    {% set tmp_identifier = base_relation.identifier ~ suffix %}\n    {% set tmp_relation = base_relation.incorporate(\n                                path={\"identifier\": tmp_identifier},\n                                table_name=tmp_identifier) -%}\n\n    {% do return(tmp_relation) %}\n{% endmacro %}", "root_path": "/Users/mrich/.local/share/virtualenvs/quasar-qaRV2YEO/lib/python3.7/site-packages/dbt/include/global_project", "name": "make_temp_relation", "unique_id": "macro.dbt.make_temp_relation", "tags": [], "resource_type": "macro", "depends_on": {"macros": []}}, "macro.dbt.default__make_temp_relation": {"path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "package_name": "dbt", "raw_sql": "{% macro adapter_macro(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        In adapter_macro: could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set separator = '__' -%}\n  {%- set search_name = adapter.type() + separator + name -%}\n  {%- set default_name = 'default' + separator + name -%}\n\n  {%- if package_context.get(search_name) is not none -%}\n    {{ return(package_context[search_name](*varargs, **kwargs)) }}\n  {%- else -%}\n    {{ return(package_context[default_name](*varargs, **kwargs)) }}\n  {%- endif -%}\n{%- endmacro %}\n\n{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter_macro('get_columns_in_query', select_sql)) }}\n{% endmacro %}\n\n{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        select * from (\n            {{ select_sql }}\n        ) as __dbt_sbq\n        where false\n        limit 0\n    {% endcall %}\n\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}\n\n{% macro create_schema(database_name, schema_name) -%}\n  {{ adapter_macro('create_schema', database_name, schema_name) }}\n{% endmacro %}\n\n{% macro default__create_schema(database_name, schema_name) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{database_name}}.{{schema_name}}\n  {% endcall %}\n{% endmacro %}\n\n{% macro drop_schema(database_name, schema_name) -%}\n  {{ adapter_macro('drop_schema', database_name, schema_name) }}\n{% endmacro %}\n\n{% macro default__drop_schema(database_name, schema_name) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{database_name}}.{{schema_name}} cascade\n  {% endcall %}\n{% endmacro %}\n\n{% macro create_table_as(temporary, relation, sql) -%}\n  {{ adapter_macro('create_table_as', temporary, relation, sql) }}\n{%- endmacro %}\n\n{% macro default__create_table_as(temporary, relation, sql) -%}\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  as (\n    {{ sql }}\n  );\n{% endmacro %}\n\n{% macro create_view_as(relation, sql) -%}\n  {{ adapter_macro('create_view_as', relation, sql) }}\n{%- endmacro %}\n\n{% macro default__create_view_as(relation, sql) -%}\n  create view {{ relation }} as (\n    {{ sql }}\n  );\n{% endmacro %}\n\n\n{% macro get_catalog(information_schemas) -%}\n  {{ return(adapter_macro('get_catalog', information_schemas)) }}\n{%- endmacro %}\n\n{% macro default__get_catalog(information_schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}\n\n\n{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter_macro('get_columns_in_relation', relation)) }}\n{% endmacro %}\n\n{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}\n\n{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}\n\n{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter_macro('alter_column_type', relation, column_name, new_column_type)) }}\n{% endmacro %}\n\n{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ tmp_column }} {{ new_column_type }};\n    update {{ relation }} set {{ tmp_column }} = {{ column_name }};\n    alter table {{ relation }} drop column {{ column_name }} cascade;\n    alter table {{ relation }} rename column {{ tmp_column }} to {{ column_name }}\n  {% endcall %}\n\n{% endmacro %}\n\n\n{% macro drop_relation(relation) -%}\n  {{ return(adapter_macro('drop_relation', relation)) }}\n{% endmacro %}\n\n\n{% macro default__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    drop {{ relation.type }} if exists {{ relation }} cascade\n  {%- endcall %}\n{% endmacro %}\n\n{% macro truncate_relation(relation) -%}\n  {{ return(adapter_macro('truncate_relation', relation)) }}\n{% endmacro %}\n\n\n{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}\n\n{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter_macro('rename_relation', from_relation, to_relation)) }}\n{% endmacro %}\n\n{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}\n\n\n{% macro information_schema_name(database) %}\n  {{ return(adapter_macro('information_schema_name', database)) }}\n{% endmacro %}\n\n{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ adapter.quote_as_configured(database, 'database') }}.information_schema\n  {%- else -%}\n    information_schema\n  {%- endif -%}\n{%- endmacro %}\n\n\n{% macro list_schemas(database) -%}\n  {{ return(adapter_macro('list_schemas', database)) }}\n{% endmacro %}\n\n{% macro default__list_schemas(database) -%}\n  {% call statement('list_schemas', fetch_result=True, auto_begin=False) %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.schemata\n    where catalog_name ilike '{{ database }}'\n  {% endcall %}\n  {{ return(load_result('list_schemas').table) }}\n{% endmacro %}\n\n\n{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter_macro('check_schema_exists', information_schema, schema)) }}\n{% endmacro %}\n\n{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% call statement('check_schema_exists', fetch_result=True, auto_begin=False) -%}\n        select count(*)\n        from {{ information_schema }}.schemata\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{% endmacro %}\n\n\n{% macro list_relations_without_caching(information_schema, schema) %}\n  {{ return(adapter_macro('list_relations_without_caching', information_schema, schema)) }}\n{% endmacro %}\n\n\n{% macro default__list_relations_without_caching(information_schema, schema) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}\n\n\n{% macro current_timestamp() -%}\n  {{ adapter_macro('current_timestamp') }}\n{%- endmacro %}\n\n\n{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter '+adapter.type()) }}\n{%- endmacro %}\n\n\n{% macro collect_freshness(source, loaded_at_field) %}\n  {{ return(adapter_macro('collect_freshness', source, loaded_at_field))}}\n{% endmacro %}\n\n\n{% macro default__collect_freshness(source, loaded_at_field) %}\n  {% call statement('check_schema_exists', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n  {% endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{% endmacro %}\n\n{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter_macro('make_temp_relation', base_relation, suffix))}}\n{% endmacro %}\n\n{% macro default__make_temp_relation(base_relation, suffix) %}\n    {% set tmp_identifier = base_relation.identifier ~ suffix %}\n    {% set tmp_relation = base_relation.incorporate(\n                                path={\"identifier\": tmp_identifier},\n                                table_name=tmp_identifier) -%}\n\n    {% do return(tmp_relation) %}\n{% endmacro %}", "root_path": "/Users/mrich/.local/share/virtualenvs/quasar-qaRV2YEO/lib/python3.7/site-packages/dbt/include/global_project", "name": "default__make_temp_relation", "unique_id": "macro.dbt.default__make_temp_relation", "tags": [], "resource_type": "macro", "depends_on": {"macros": []}}, "macro.dbt.test_relationships": {"path": "macros/schema_tests/relationships.sql", "original_file_path": "macros/schema_tests/relationships.sql", "package_name": "dbt", "raw_sql": "{% macro test_relationships(model, to, field) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('from')) %}\n\n\nselect count(*)\nfrom (\n    select {{ column_name }} as id from {{ model }}\n) as child\nleft join (\n    select {{ field }} as id from {{ to }}\n) as parent on parent.id = child.id\nwhere child.id is not null\n  and parent.id is null\n\n{% endmacro %}", "root_path": "/Users/mrich/.local/share/virtualenvs/quasar-qaRV2YEO/lib/python3.7/site-packages/dbt/include/global_project", "name": "test_relationships", "unique_id": "macro.dbt.test_relationships", "tags": [], "resource_type": "macro", "depends_on": {"macros": []}}, "macro.dbt.test_not_null": {"path": "macros/schema_tests/not_null.sql", "original_file_path": "macros/schema_tests/not_null.sql", "package_name": "dbt", "raw_sql": "{% macro test_not_null(model) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\n\nselect count(*)\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}", "root_path": "/Users/mrich/.local/share/virtualenvs/quasar-qaRV2YEO/lib/python3.7/site-packages/dbt/include/global_project", "name": "test_not_null", "unique_id": "macro.dbt.test_not_null", "tags": [], "resource_type": "macro", "depends_on": {"macros": []}}, "macro.dbt.test_unique": {"path": "macros/schema_tests/unique.sql", "original_file_path": "macros/schema_tests/unique.sql", "package_name": "dbt", "raw_sql": "{% macro test_unique(model) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\n\nselect count(*)\nfrom (\n\n    select\n        {{ column_name }}\n\n    from {{ model }}\n    where {{ column_name }} is not null\n    group by {{ column_name }}\n    having count(*) > 1\n\n) validation_errors\n\n{% endmacro %}", "root_path": "/Users/mrich/.local/share/virtualenvs/quasar-qaRV2YEO/lib/python3.7/site-packages/dbt/include/global_project", "name": "test_unique", "unique_id": "macro.dbt.test_unique", "tags": [], "resource_type": "macro", "depends_on": {"macros": []}}, "macro.dbt.test_accepted_values": {"path": "macros/schema_tests/accepted_values.sql", "original_file_path": "macros/schema_tests/accepted_values.sql", "package_name": "dbt", "raw_sql": "{% macro test_accepted_values(model, values) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('field')) %}\n\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n\n),\n\nvalidation_errors as (\n\n    select\n        value_field\n\n    from all_values\n    where value_field not in (\n        {% for value in values -%}\n\n            '{{ value }}' {% if not loop.last -%} , {%- endif %}\n\n        {%- endfor %}\n    )\n)\n\nselect count(*)\nfrom validation_errors\n\n{% endmacro %}", "root_path": "/Users/mrich/.local/share/virtualenvs/quasar-qaRV2YEO/lib/python3.7/site-packages/dbt/include/global_project", "name": "test_accepted_values", "unique_id": "macro.dbt.test_accepted_values", "tags": [], "resource_type": "macro", "depends_on": {"macros": []}}, "macro.dbt_postgres.postgres__get_catalog": {"path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "package_name": "dbt_postgres", "raw_sql": "{% macro postgres__get_catalog(information_schemas) -%}\n\n  {%- call statement('catalog', fetch_result=True) -%}\n    {% if (information_schemas | length) != 1 %}\n        {{ exceptions.raise_compiler_error('postgres get_catalog requires exactly one database') }}\n    {% endif %}\n    {% set database = information_schemas[0].database %}\n    {{ adapter.verify_database(database) }}\n\n    select\n        '{{ database }}' as table_database,\n        sch.nspname as table_schema,\n        tbl.relname as table_name,\n        case tbl.relkind\n            when 'v' then 'VIEW'\n            else 'BASE TABLE'\n        end as table_type,\n        null::text as table_comment,\n        col.attname as column_name,\n        col.attnum as column_index,\n        pg_catalog.format_type(col.atttypid, col.atttypmod) as column_type,\n        null::text as column_comment,\n        pg_get_userbyid(tbl.relowner) as table_owner\n\n    from pg_catalog.pg_namespace sch\n    join pg_catalog.pg_class tbl on tbl.relnamespace = sch.oid\n    join pg_catalog.pg_attribute col on col.attrelid = tbl.oid\n\n    where sch.nspname != 'information_schema'\n      and sch.nspname not like 'pg_%' -- avoid postgres system schemas\n      and not pg_is_other_temp_schema(sch.oid) -- not a temporary schema belonging to another session\n      and tbl.relpersistence = 'p' -- [p]ermanent table. Other values are [u]nlogged table, [t]emporary table\n      and tbl.relkind in ('r', 'v', 'f', 'p') -- o[r]dinary table, [v]iew, [f]oreign table, [p]artitioned table. Other values are [i]ndex, [S]equence, [c]omposite type, [t]OAST table, [m]aterialized view\n      and col.attnum > 0 -- negative numbers are used for system columns such as oid\n      and not col.attisdropped -- column as not been dropped\n\n    order by\n        sch.nspname,\n        tbl.relname,\n        col.attnum\n\n  {%- endcall -%}\n\n  {{ return(load_result('catalog').table) }}\n\n{%- endmacro %}", "root_path": "/Users/mrich/.local/share/virtualenvs/quasar-qaRV2YEO/lib/python3.7/site-packages/dbt/include/postgres", "name": "postgres__get_catalog", "unique_id": "macro.dbt_postgres.postgres__get_catalog", "tags": [], "resource_type": "macro", "depends_on": {"macros": []}}, "macro.dbt_postgres.postgres_get_relations": {"path": "macros/relations.sql", "original_file_path": "macros/relations.sql", "package_name": "dbt_postgres", "raw_sql": "{% macro postgres_get_relations () -%}\n\n  {#\n      -- in pg_depend, objid is the dependent, refobjid is the referenced object\n      --  > a pg_depend entry indicates that the referenced object cannot be\n      --  > dropped without also dropping the dependent object.\n  #}\n\n  {%- call statement('relations', fetch_result=True) -%}\n    with relation as (\n        select\n            pg_rewrite.ev_class as class,\n            pg_rewrite.oid as id\n        from pg_rewrite\n    ),\n    class as (\n        select\n            oid as id,\n            relname as name,\n            relnamespace as schema,\n            relkind as kind\n        from pg_class\n    ),\n    dependency as (\n        select\n            pg_depend.objid as id,\n            pg_depend.refobjid as ref\n        from pg_depend\n    ),\n    schema as (\n        select\n            pg_namespace.oid as id,\n            pg_namespace.nspname as name\n        from pg_namespace\n        where nspname != 'information_schema' and nspname not like 'pg_%'\n    ),\n    referenced as (\n        select\n            relation.id AS id,\n            referenced_class.name ,\n            referenced_class.schema ,\n            referenced_class.kind\n        from relation\n        join class as referenced_class on relation.class=referenced_class.id\n        where referenced_class.kind in ('r', 'v')\n    ),\n    relationships as (\n        select\n            referenced.name as referenced_name,\n            referenced.schema as referenced_schema_id,\n            dependent_class.name as dependent_name,\n            dependent_class.schema as dependent_schema_id,\n            referenced.kind as kind\n        from referenced\n        join dependency on referenced.id=dependency.id\n        join class as dependent_class on dependency.ref=dependent_class.id\n        where\n            (referenced.name != dependent_class.name or\n             referenced.schema != dependent_class.schema)\n    )\n\n    select\n        referenced_schema.name as referenced_schema,\n        relationships.referenced_name as referenced_name,\n        dependent_schema.name as dependent_schema,\n        relationships.dependent_name as dependent_name\n    from relationships\n    join schema as dependent_schema on relationships.dependent_schema_id=dependent_schema.id\n    join schema as referenced_schema on relationships.referenced_schema_id=referenced_schema.id\n    group by referenced_schema, referenced_name, dependent_schema, dependent_name\n    order by referenced_schema, referenced_name, dependent_schema, dependent_name;\n\n  {%- endcall -%}\n\n  {{ return(load_result('relations').table) }}\n{% endmacro %}", "root_path": "/Users/mrich/.local/share/virtualenvs/quasar-qaRV2YEO/lib/python3.7/site-packages/dbt/include/postgres", "name": "postgres_get_relations", "unique_id": "macro.dbt_postgres.postgres_get_relations", "tags": [], "resource_type": "macro", "depends_on": {"macros": []}}, "macro.dbt_postgres.postgres__create_table_as": {"path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "package_name": "dbt_postgres", "raw_sql": "{% macro postgres__create_table_as(temporary, relation, sql) -%}\n  {%- set unlogged = config.get('unlogged', default=false) -%}\n\n  create {% if temporary -%}\n    temporary\n  {%- elif unlogged -%}\n    unlogged\n  {%- endif %} table {{ relation }}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}\n\n{% macro postgres__create_schema(database_name, schema_name) -%}\n  {% if database_name -%}\n    {{ adapter.verify_database(database_name) }}\n  {%- endif -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ schema_name }}\n  {%- endcall -%}\n{% endmacro %}\n\n{% macro postgres__drop_schema(database_name, schema_name) -%}\n  {% if database_name -%}\n    {{ adapter.verify_database(database_name) }}\n  {%- endif -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ schema_name }} cascade\n  {%- endcall -%}\n{% endmacro %}\n\n{% macro postgres__get_columns_in_relation(relation) -%}\n  {% call statement('get_columns_in_relation', fetch_result=True) %}\n      select\n          column_name,\n          data_type,\n          character_maximum_length,\n          numeric_precision,\n          numeric_scale\n\n      from {{ relation.information_schema('columns') }}\n      where table_name = '{{ relation.identifier }}'\n        {% if relation.schema %}\n        and table_schema = '{{ relation.schema }}'\n        {% endif %}\n      order by ordinal_position\n\n  {% endcall %}\n  {% set table = load_result('get_columns_in_relation').table %}\n  {{ return(sql_convert_columns_in_relation(table)) }}\n{% endmacro %}\n\n\n{% macro postgres__list_relations_without_caching(information_schema, schema) %}\n  {% call statement('list_relations_without_caching', fetch_result=True) -%}\n    select\n      '{{ information_schema.database.lower() }}' as database,\n      tablename as name,\n      schemaname as schema,\n      'table' as type\n    from pg_tables\n    where schemaname ilike '{{ schema }}'\n    union all\n    select\n      '{{ information_schema.database.lower() }}' as database,\n      viewname as name,\n      schemaname as schema,\n      'view' as type\n    from pg_views\n    where schemaname ilike '{{ schema }}'\n  {% endcall %}\n  {{ return(load_result('list_relations_without_caching').table) }}\n{% endmacro %}\n\n{% macro postgres__information_schema_name(database) -%}\n  {% if database_name -%}\n    {{ adapter.verify_database(database_name) }}\n  {%- endif -%}\n  information_schema\n{%- endmacro %}\n\n{% macro postgres__list_schemas(database) %}\n  {% if database -%}\n    {{ adapter.verify_database(database) }}\n  {%- endif -%}\n  {% call statement('list_schemas', fetch_result=True, auto_begin=False) %}\n    select distinct nspname from pg_namespace\n  {% endcall %}\n  {{ return(load_result('list_schemas').table) }}\n{% endmacro %}\n\n{% macro postgres__check_schema_exists(information_schema, schema) -%}\n  {% if database -%}\n    {{ adapter.verify_database(information_schema.database) }}\n  {%- endif -%}\n  {% call statement('check_schema_exists', fetch_result=True, auto_begin=False) %}\n    select count(*) from pg_namespace where nspname = '{{ schema }}'\n  {% endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{% endmacro %}\n\n\n{% macro postgres__current_timestamp() -%}\n  now()\n{%- endmacro %}\n\n{% macro postgres__snapshot_get_time() -%}\n  {{ current_timestamp() }}::timestamp without time zone\n{%- endmacro %}\n\n{% macro postgres__make_temp_relation(base_relation, suffix) %}\n    {% set tmp_identifier = base_relation.identifier ~ suffix ~ py_current_timestring() %}\n    {% do return(base_relation.incorporate(\n                                  table_name=tmp_identifier,\n                                  path={\n                                    \"identifier\": tmp_identifier,\n                                    \"schema\": none,\n                                    \"database\": none\n                                  })) -%}\n{% endmacro %}", "root_path": "/Users/mrich/.local/share/virtualenvs/quasar-qaRV2YEO/lib/python3.7/site-packages/dbt/include/postgres", "name": "postgres__create_table_as", "unique_id": "macro.dbt_postgres.postgres__create_table_as", "tags": [], "resource_type": "macro", "depends_on": {"macros": []}}, "macro.dbt_postgres.postgres__create_schema": {"path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "package_name": "dbt_postgres", "raw_sql": "{% macro postgres__create_table_as(temporary, relation, sql) -%}\n  {%- set unlogged = config.get('unlogged', default=false) -%}\n\n  create {% if temporary -%}\n    temporary\n  {%- elif unlogged -%}\n    unlogged\n  {%- endif %} table {{ relation }}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}\n\n{% macro postgres__create_schema(database_name, schema_name) -%}\n  {% if database_name -%}\n    {{ adapter.verify_database(database_name) }}\n  {%- endif -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ schema_name }}\n  {%- endcall -%}\n{% endmacro %}\n\n{% macro postgres__drop_schema(database_name, schema_name) -%}\n  {% if database_name -%}\n    {{ adapter.verify_database(database_name) }}\n  {%- endif -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ schema_name }} cascade\n  {%- endcall -%}\n{% endmacro %}\n\n{% macro postgres__get_columns_in_relation(relation) -%}\n  {% call statement('get_columns_in_relation', fetch_result=True) %}\n      select\n          column_name,\n          data_type,\n          character_maximum_length,\n          numeric_precision,\n          numeric_scale\n\n      from {{ relation.information_schema('columns') }}\n      where table_name = '{{ relation.identifier }}'\n        {% if relation.schema %}\n        and table_schema = '{{ relation.schema }}'\n        {% endif %}\n      order by ordinal_position\n\n  {% endcall %}\n  {% set table = load_result('get_columns_in_relation').table %}\n  {{ return(sql_convert_columns_in_relation(table)) }}\n{% endmacro %}\n\n\n{% macro postgres__list_relations_without_caching(information_schema, schema) %}\n  {% call statement('list_relations_without_caching', fetch_result=True) -%}\n    select\n      '{{ information_schema.database.lower() }}' as database,\n      tablename as name,\n      schemaname as schema,\n      'table' as type\n    from pg_tables\n    where schemaname ilike '{{ schema }}'\n    union all\n    select\n      '{{ information_schema.database.lower() }}' as database,\n      viewname as name,\n      schemaname as schema,\n      'view' as type\n    from pg_views\n    where schemaname ilike '{{ schema }}'\n  {% endcall %}\n  {{ return(load_result('list_relations_without_caching').table) }}\n{% endmacro %}\n\n{% macro postgres__information_schema_name(database) -%}\n  {% if database_name -%}\n    {{ adapter.verify_database(database_name) }}\n  {%- endif -%}\n  information_schema\n{%- endmacro %}\n\n{% macro postgres__list_schemas(database) %}\n  {% if database -%}\n    {{ adapter.verify_database(database) }}\n  {%- endif -%}\n  {% call statement('list_schemas', fetch_result=True, auto_begin=False) %}\n    select distinct nspname from pg_namespace\n  {% endcall %}\n  {{ return(load_result('list_schemas').table) }}\n{% endmacro %}\n\n{% macro postgres__check_schema_exists(information_schema, schema) -%}\n  {% if database -%}\n    {{ adapter.verify_database(information_schema.database) }}\n  {%- endif -%}\n  {% call statement('check_schema_exists', fetch_result=True, auto_begin=False) %}\n    select count(*) from pg_namespace where nspname = '{{ schema }}'\n  {% endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{% endmacro %}\n\n\n{% macro postgres__current_timestamp() -%}\n  now()\n{%- endmacro %}\n\n{% macro postgres__snapshot_get_time() -%}\n  {{ current_timestamp() }}::timestamp without time zone\n{%- endmacro %}\n\n{% macro postgres__make_temp_relation(base_relation, suffix) %}\n    {% set tmp_identifier = base_relation.identifier ~ suffix ~ py_current_timestring() %}\n    {% do return(base_relation.incorporate(\n                                  table_name=tmp_identifier,\n                                  path={\n                                    \"identifier\": tmp_identifier,\n                                    \"schema\": none,\n                                    \"database\": none\n                                  })) -%}\n{% endmacro %}", "root_path": "/Users/mrich/.local/share/virtualenvs/quasar-qaRV2YEO/lib/python3.7/site-packages/dbt/include/postgres", "name": "postgres__create_schema", "unique_id": "macro.dbt_postgres.postgres__create_schema", "tags": [], "resource_type": "macro", "depends_on": {"macros": []}}, "macro.dbt_postgres.postgres__drop_schema": {"path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "package_name": "dbt_postgres", "raw_sql": "{% macro postgres__create_table_as(temporary, relation, sql) -%}\n  {%- set unlogged = config.get('unlogged', default=false) -%}\n\n  create {% if temporary -%}\n    temporary\n  {%- elif unlogged -%}\n    unlogged\n  {%- endif %} table {{ relation }}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}\n\n{% macro postgres__create_schema(database_name, schema_name) -%}\n  {% if database_name -%}\n    {{ adapter.verify_database(database_name) }}\n  {%- endif -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ schema_name }}\n  {%- endcall -%}\n{% endmacro %}\n\n{% macro postgres__drop_schema(database_name, schema_name) -%}\n  {% if database_name -%}\n    {{ adapter.verify_database(database_name) }}\n  {%- endif -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ schema_name }} cascade\n  {%- endcall -%}\n{% endmacro %}\n\n{% macro postgres__get_columns_in_relation(relation) -%}\n  {% call statement('get_columns_in_relation', fetch_result=True) %}\n      select\n          column_name,\n          data_type,\n          character_maximum_length,\n          numeric_precision,\n          numeric_scale\n\n      from {{ relation.information_schema('columns') }}\n      where table_name = '{{ relation.identifier }}'\n        {% if relation.schema %}\n        and table_schema = '{{ relation.schema }}'\n        {% endif %}\n      order by ordinal_position\n\n  {% endcall %}\n  {% set table = load_result('get_columns_in_relation').table %}\n  {{ return(sql_convert_columns_in_relation(table)) }}\n{% endmacro %}\n\n\n{% macro postgres__list_relations_without_caching(information_schema, schema) %}\n  {% call statement('list_relations_without_caching', fetch_result=True) -%}\n    select\n      '{{ information_schema.database.lower() }}' as database,\n      tablename as name,\n      schemaname as schema,\n      'table' as type\n    from pg_tables\n    where schemaname ilike '{{ schema }}'\n    union all\n    select\n      '{{ information_schema.database.lower() }}' as database,\n      viewname as name,\n      schemaname as schema,\n      'view' as type\n    from pg_views\n    where schemaname ilike '{{ schema }}'\n  {% endcall %}\n  {{ return(load_result('list_relations_without_caching').table) }}\n{% endmacro %}\n\n{% macro postgres__information_schema_name(database) -%}\n  {% if database_name -%}\n    {{ adapter.verify_database(database_name) }}\n  {%- endif -%}\n  information_schema\n{%- endmacro %}\n\n{% macro postgres__list_schemas(database) %}\n  {% if database -%}\n    {{ adapter.verify_database(database) }}\n  {%- endif -%}\n  {% call statement('list_schemas', fetch_result=True, auto_begin=False) %}\n    select distinct nspname from pg_namespace\n  {% endcall %}\n  {{ return(load_result('list_schemas').table) }}\n{% endmacro %}\n\n{% macro postgres__check_schema_exists(information_schema, schema) -%}\n  {% if database -%}\n    {{ adapter.verify_database(information_schema.database) }}\n  {%- endif -%}\n  {% call statement('check_schema_exists', fetch_result=True, auto_begin=False) %}\n    select count(*) from pg_namespace where nspname = '{{ schema }}'\n  {% endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{% endmacro %}\n\n\n{% macro postgres__current_timestamp() -%}\n  now()\n{%- endmacro %}\n\n{% macro postgres__snapshot_get_time() -%}\n  {{ current_timestamp() }}::timestamp without time zone\n{%- endmacro %}\n\n{% macro postgres__make_temp_relation(base_relation, suffix) %}\n    {% set tmp_identifier = base_relation.identifier ~ suffix ~ py_current_timestring() %}\n    {% do return(base_relation.incorporate(\n                                  table_name=tmp_identifier,\n                                  path={\n                                    \"identifier\": tmp_identifier,\n                                    \"schema\": none,\n                                    \"database\": none\n                                  })) -%}\n{% endmacro %}", "root_path": "/Users/mrich/.local/share/virtualenvs/quasar-qaRV2YEO/lib/python3.7/site-packages/dbt/include/postgres", "name": "postgres__drop_schema", "unique_id": "macro.dbt_postgres.postgres__drop_schema", "tags": [], "resource_type": "macro", "depends_on": {"macros": []}}, "macro.dbt_postgres.postgres__get_columns_in_relation": {"path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "package_name": "dbt_postgres", "raw_sql": "{% macro postgres__create_table_as(temporary, relation, sql) -%}\n  {%- set unlogged = config.get('unlogged', default=false) -%}\n\n  create {% if temporary -%}\n    temporary\n  {%- elif unlogged -%}\n    unlogged\n  {%- endif %} table {{ relation }}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}\n\n{% macro postgres__create_schema(database_name, schema_name) -%}\n  {% if database_name -%}\n    {{ adapter.verify_database(database_name) }}\n  {%- endif -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ schema_name }}\n  {%- endcall -%}\n{% endmacro %}\n\n{% macro postgres__drop_schema(database_name, schema_name) -%}\n  {% if database_name -%}\n    {{ adapter.verify_database(database_name) }}\n  {%- endif -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ schema_name }} cascade\n  {%- endcall -%}\n{% endmacro %}\n\n{% macro postgres__get_columns_in_relation(relation) -%}\n  {% call statement('get_columns_in_relation', fetch_result=True) %}\n      select\n          column_name,\n          data_type,\n          character_maximum_length,\n          numeric_precision,\n          numeric_scale\n\n      from {{ relation.information_schema('columns') }}\n      where table_name = '{{ relation.identifier }}'\n        {% if relation.schema %}\n        and table_schema = '{{ relation.schema }}'\n        {% endif %}\n      order by ordinal_position\n\n  {% endcall %}\n  {% set table = load_result('get_columns_in_relation').table %}\n  {{ return(sql_convert_columns_in_relation(table)) }}\n{% endmacro %}\n\n\n{% macro postgres__list_relations_without_caching(information_schema, schema) %}\n  {% call statement('list_relations_without_caching', fetch_result=True) -%}\n    select\n      '{{ information_schema.database.lower() }}' as database,\n      tablename as name,\n      schemaname as schema,\n      'table' as type\n    from pg_tables\n    where schemaname ilike '{{ schema }}'\n    union all\n    select\n      '{{ information_schema.database.lower() }}' as database,\n      viewname as name,\n      schemaname as schema,\n      'view' as type\n    from pg_views\n    where schemaname ilike '{{ schema }}'\n  {% endcall %}\n  {{ return(load_result('list_relations_without_caching').table) }}\n{% endmacro %}\n\n{% macro postgres__information_schema_name(database) -%}\n  {% if database_name -%}\n    {{ adapter.verify_database(database_name) }}\n  {%- endif -%}\n  information_schema\n{%- endmacro %}\n\n{% macro postgres__list_schemas(database) %}\n  {% if database -%}\n    {{ adapter.verify_database(database) }}\n  {%- endif -%}\n  {% call statement('list_schemas', fetch_result=True, auto_begin=False) %}\n    select distinct nspname from pg_namespace\n  {% endcall %}\n  {{ return(load_result('list_schemas').table) }}\n{% endmacro %}\n\n{% macro postgres__check_schema_exists(information_schema, schema) -%}\n  {% if database -%}\n    {{ adapter.verify_database(information_schema.database) }}\n  {%- endif -%}\n  {% call statement('check_schema_exists', fetch_result=True, auto_begin=False) %}\n    select count(*) from pg_namespace where nspname = '{{ schema }}'\n  {% endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{% endmacro %}\n\n\n{% macro postgres__current_timestamp() -%}\n  now()\n{%- endmacro %}\n\n{% macro postgres__snapshot_get_time() -%}\n  {{ current_timestamp() }}::timestamp without time zone\n{%- endmacro %}\n\n{% macro postgres__make_temp_relation(base_relation, suffix) %}\n    {% set tmp_identifier = base_relation.identifier ~ suffix ~ py_current_timestring() %}\n    {% do return(base_relation.incorporate(\n                                  table_name=tmp_identifier,\n                                  path={\n                                    \"identifier\": tmp_identifier,\n                                    \"schema\": none,\n                                    \"database\": none\n                                  })) -%}\n{% endmacro %}", "root_path": "/Users/mrich/.local/share/virtualenvs/quasar-qaRV2YEO/lib/python3.7/site-packages/dbt/include/postgres", "name": "postgres__get_columns_in_relation", "unique_id": "macro.dbt_postgres.postgres__get_columns_in_relation", "tags": [], "resource_type": "macro", "depends_on": {"macros": []}}, "macro.dbt_postgres.postgres__list_relations_without_caching": {"path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "package_name": "dbt_postgres", "raw_sql": "{% macro postgres__create_table_as(temporary, relation, sql) -%}\n  {%- set unlogged = config.get('unlogged', default=false) -%}\n\n  create {% if temporary -%}\n    temporary\n  {%- elif unlogged -%}\n    unlogged\n  {%- endif %} table {{ relation }}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}\n\n{% macro postgres__create_schema(database_name, schema_name) -%}\n  {% if database_name -%}\n    {{ adapter.verify_database(database_name) }}\n  {%- endif -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ schema_name }}\n  {%- endcall -%}\n{% endmacro %}\n\n{% macro postgres__drop_schema(database_name, schema_name) -%}\n  {% if database_name -%}\n    {{ adapter.verify_database(database_name) }}\n  {%- endif -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ schema_name }} cascade\n  {%- endcall -%}\n{% endmacro %}\n\n{% macro postgres__get_columns_in_relation(relation) -%}\n  {% call statement('get_columns_in_relation', fetch_result=True) %}\n      select\n          column_name,\n          data_type,\n          character_maximum_length,\n          numeric_precision,\n          numeric_scale\n\n      from {{ relation.information_schema('columns') }}\n      where table_name = '{{ relation.identifier }}'\n        {% if relation.schema %}\n        and table_schema = '{{ relation.schema }}'\n        {% endif %}\n      order by ordinal_position\n\n  {% endcall %}\n  {% set table = load_result('get_columns_in_relation').table %}\n  {{ return(sql_convert_columns_in_relation(table)) }}\n{% endmacro %}\n\n\n{% macro postgres__list_relations_without_caching(information_schema, schema) %}\n  {% call statement('list_relations_without_caching', fetch_result=True) -%}\n    select\n      '{{ information_schema.database.lower() }}' as database,\n      tablename as name,\n      schemaname as schema,\n      'table' as type\n    from pg_tables\n    where schemaname ilike '{{ schema }}'\n    union all\n    select\n      '{{ information_schema.database.lower() }}' as database,\n      viewname as name,\n      schemaname as schema,\n      'view' as type\n    from pg_views\n    where schemaname ilike '{{ schema }}'\n  {% endcall %}\n  {{ return(load_result('list_relations_without_caching').table) }}\n{% endmacro %}\n\n{% macro postgres__information_schema_name(database) -%}\n  {% if database_name -%}\n    {{ adapter.verify_database(database_name) }}\n  {%- endif -%}\n  information_schema\n{%- endmacro %}\n\n{% macro postgres__list_schemas(database) %}\n  {% if database -%}\n    {{ adapter.verify_database(database) }}\n  {%- endif -%}\n  {% call statement('list_schemas', fetch_result=True, auto_begin=False) %}\n    select distinct nspname from pg_namespace\n  {% endcall %}\n  {{ return(load_result('list_schemas').table) }}\n{% endmacro %}\n\n{% macro postgres__check_schema_exists(information_schema, schema) -%}\n  {% if database -%}\n    {{ adapter.verify_database(information_schema.database) }}\n  {%- endif -%}\n  {% call statement('check_schema_exists', fetch_result=True, auto_begin=False) %}\n    select count(*) from pg_namespace where nspname = '{{ schema }}'\n  {% endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{% endmacro %}\n\n\n{% macro postgres__current_timestamp() -%}\n  now()\n{%- endmacro %}\n\n{% macro postgres__snapshot_get_time() -%}\n  {{ current_timestamp() }}::timestamp without time zone\n{%- endmacro %}\n\n{% macro postgres__make_temp_relation(base_relation, suffix) %}\n    {% set tmp_identifier = base_relation.identifier ~ suffix ~ py_current_timestring() %}\n    {% do return(base_relation.incorporate(\n                                  table_name=tmp_identifier,\n                                  path={\n                                    \"identifier\": tmp_identifier,\n                                    \"schema\": none,\n                                    \"database\": none\n                                  })) -%}\n{% endmacro %}", "root_path": "/Users/mrich/.local/share/virtualenvs/quasar-qaRV2YEO/lib/python3.7/site-packages/dbt/include/postgres", "name": "postgres__list_relations_without_caching", "unique_id": "macro.dbt_postgres.postgres__list_relations_without_caching", "tags": [], "resource_type": "macro", "depends_on": {"macros": []}}, "macro.dbt_postgres.postgres__information_schema_name": {"path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "package_name": "dbt_postgres", "raw_sql": "{% macro postgres__create_table_as(temporary, relation, sql) -%}\n  {%- set unlogged = config.get('unlogged', default=false) -%}\n\n  create {% if temporary -%}\n    temporary\n  {%- elif unlogged -%}\n    unlogged\n  {%- endif %} table {{ relation }}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}\n\n{% macro postgres__create_schema(database_name, schema_name) -%}\n  {% if database_name -%}\n    {{ adapter.verify_database(database_name) }}\n  {%- endif -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ schema_name }}\n  {%- endcall -%}\n{% endmacro %}\n\n{% macro postgres__drop_schema(database_name, schema_name) -%}\n  {% if database_name -%}\n    {{ adapter.verify_database(database_name) }}\n  {%- endif -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ schema_name }} cascade\n  {%- endcall -%}\n{% endmacro %}\n\n{% macro postgres__get_columns_in_relation(relation) -%}\n  {% call statement('get_columns_in_relation', fetch_result=True) %}\n      select\n          column_name,\n          data_type,\n          character_maximum_length,\n          numeric_precision,\n          numeric_scale\n\n      from {{ relation.information_schema('columns') }}\n      where table_name = '{{ relation.identifier }}'\n        {% if relation.schema %}\n        and table_schema = '{{ relation.schema }}'\n        {% endif %}\n      order by ordinal_position\n\n  {% endcall %}\n  {% set table = load_result('get_columns_in_relation').table %}\n  {{ return(sql_convert_columns_in_relation(table)) }}\n{% endmacro %}\n\n\n{% macro postgres__list_relations_without_caching(information_schema, schema) %}\n  {% call statement('list_relations_without_caching', fetch_result=True) -%}\n    select\n      '{{ information_schema.database.lower() }}' as database,\n      tablename as name,\n      schemaname as schema,\n      'table' as type\n    from pg_tables\n    where schemaname ilike '{{ schema }}'\n    union all\n    select\n      '{{ information_schema.database.lower() }}' as database,\n      viewname as name,\n      schemaname as schema,\n      'view' as type\n    from pg_views\n    where schemaname ilike '{{ schema }}'\n  {% endcall %}\n  {{ return(load_result('list_relations_without_caching').table) }}\n{% endmacro %}\n\n{% macro postgres__information_schema_name(database) -%}\n  {% if database_name -%}\n    {{ adapter.verify_database(database_name) }}\n  {%- endif -%}\n  information_schema\n{%- endmacro %}\n\n{% macro postgres__list_schemas(database) %}\n  {% if database -%}\n    {{ adapter.verify_database(database) }}\n  {%- endif -%}\n  {% call statement('list_schemas', fetch_result=True, auto_begin=False) %}\n    select distinct nspname from pg_namespace\n  {% endcall %}\n  {{ return(load_result('list_schemas').table) }}\n{% endmacro %}\n\n{% macro postgres__check_schema_exists(information_schema, schema) -%}\n  {% if database -%}\n    {{ adapter.verify_database(information_schema.database) }}\n  {%- endif -%}\n  {% call statement('check_schema_exists', fetch_result=True, auto_begin=False) %}\n    select count(*) from pg_namespace where nspname = '{{ schema }}'\n  {% endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{% endmacro %}\n\n\n{% macro postgres__current_timestamp() -%}\n  now()\n{%- endmacro %}\n\n{% macro postgres__snapshot_get_time() -%}\n  {{ current_timestamp() }}::timestamp without time zone\n{%- endmacro %}\n\n{% macro postgres__make_temp_relation(base_relation, suffix) %}\n    {% set tmp_identifier = base_relation.identifier ~ suffix ~ py_current_timestring() %}\n    {% do return(base_relation.incorporate(\n                                  table_name=tmp_identifier,\n                                  path={\n                                    \"identifier\": tmp_identifier,\n                                    \"schema\": none,\n                                    \"database\": none\n                                  })) -%}\n{% endmacro %}", "root_path": "/Users/mrich/.local/share/virtualenvs/quasar-qaRV2YEO/lib/python3.7/site-packages/dbt/include/postgres", "name": "postgres__information_schema_name", "unique_id": "macro.dbt_postgres.postgres__information_schema_name", "tags": [], "resource_type": "macro", "depends_on": {"macros": []}}, "macro.dbt_postgres.postgres__list_schemas": {"path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "package_name": "dbt_postgres", "raw_sql": "{% macro postgres__create_table_as(temporary, relation, sql) -%}\n  {%- set unlogged = config.get('unlogged', default=false) -%}\n\n  create {% if temporary -%}\n    temporary\n  {%- elif unlogged -%}\n    unlogged\n  {%- endif %} table {{ relation }}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}\n\n{% macro postgres__create_schema(database_name, schema_name) -%}\n  {% if database_name -%}\n    {{ adapter.verify_database(database_name) }}\n  {%- endif -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ schema_name }}\n  {%- endcall -%}\n{% endmacro %}\n\n{% macro postgres__drop_schema(database_name, schema_name) -%}\n  {% if database_name -%}\n    {{ adapter.verify_database(database_name) }}\n  {%- endif -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ schema_name }} cascade\n  {%- endcall -%}\n{% endmacro %}\n\n{% macro postgres__get_columns_in_relation(relation) -%}\n  {% call statement('get_columns_in_relation', fetch_result=True) %}\n      select\n          column_name,\n          data_type,\n          character_maximum_length,\n          numeric_precision,\n          numeric_scale\n\n      from {{ relation.information_schema('columns') }}\n      where table_name = '{{ relation.identifier }}'\n        {% if relation.schema %}\n        and table_schema = '{{ relation.schema }}'\n        {% endif %}\n      order by ordinal_position\n\n  {% endcall %}\n  {% set table = load_result('get_columns_in_relation').table %}\n  {{ return(sql_convert_columns_in_relation(table)) }}\n{% endmacro %}\n\n\n{% macro postgres__list_relations_without_caching(information_schema, schema) %}\n  {% call statement('list_relations_without_caching', fetch_result=True) -%}\n    select\n      '{{ information_schema.database.lower() }}' as database,\n      tablename as name,\n      schemaname as schema,\n      'table' as type\n    from pg_tables\n    where schemaname ilike '{{ schema }}'\n    union all\n    select\n      '{{ information_schema.database.lower() }}' as database,\n      viewname as name,\n      schemaname as schema,\n      'view' as type\n    from pg_views\n    where schemaname ilike '{{ schema }}'\n  {% endcall %}\n  {{ return(load_result('list_relations_without_caching').table) }}\n{% endmacro %}\n\n{% macro postgres__information_schema_name(database) -%}\n  {% if database_name -%}\n    {{ adapter.verify_database(database_name) }}\n  {%- endif -%}\n  information_schema\n{%- endmacro %}\n\n{% macro postgres__list_schemas(database) %}\n  {% if database -%}\n    {{ adapter.verify_database(database) }}\n  {%- endif -%}\n  {% call statement('list_schemas', fetch_result=True, auto_begin=False) %}\n    select distinct nspname from pg_namespace\n  {% endcall %}\n  {{ return(load_result('list_schemas').table) }}\n{% endmacro %}\n\n{% macro postgres__check_schema_exists(information_schema, schema) -%}\n  {% if database -%}\n    {{ adapter.verify_database(information_schema.database) }}\n  {%- endif -%}\n  {% call statement('check_schema_exists', fetch_result=True, auto_begin=False) %}\n    select count(*) from pg_namespace where nspname = '{{ schema }}'\n  {% endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{% endmacro %}\n\n\n{% macro postgres__current_timestamp() -%}\n  now()\n{%- endmacro %}\n\n{% macro postgres__snapshot_get_time() -%}\n  {{ current_timestamp() }}::timestamp without time zone\n{%- endmacro %}\n\n{% macro postgres__make_temp_relation(base_relation, suffix) %}\n    {% set tmp_identifier = base_relation.identifier ~ suffix ~ py_current_timestring() %}\n    {% do return(base_relation.incorporate(\n                                  table_name=tmp_identifier,\n                                  path={\n                                    \"identifier\": tmp_identifier,\n                                    \"schema\": none,\n                                    \"database\": none\n                                  })) -%}\n{% endmacro %}", "root_path": "/Users/mrich/.local/share/virtualenvs/quasar-qaRV2YEO/lib/python3.7/site-packages/dbt/include/postgres", "name": "postgres__list_schemas", "unique_id": "macro.dbt_postgres.postgres__list_schemas", "tags": [], "resource_type": "macro", "depends_on": {"macros": []}}, "macro.dbt_postgres.postgres__check_schema_exists": {"path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "package_name": "dbt_postgres", "raw_sql": "{% macro postgres__create_table_as(temporary, relation, sql) -%}\n  {%- set unlogged = config.get('unlogged', default=false) -%}\n\n  create {% if temporary -%}\n    temporary\n  {%- elif unlogged -%}\n    unlogged\n  {%- endif %} table {{ relation }}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}\n\n{% macro postgres__create_schema(database_name, schema_name) -%}\n  {% if database_name -%}\n    {{ adapter.verify_database(database_name) }}\n  {%- endif -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ schema_name }}\n  {%- endcall -%}\n{% endmacro %}\n\n{% macro postgres__drop_schema(database_name, schema_name) -%}\n  {% if database_name -%}\n    {{ adapter.verify_database(database_name) }}\n  {%- endif -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ schema_name }} cascade\n  {%- endcall -%}\n{% endmacro %}\n\n{% macro postgres__get_columns_in_relation(relation) -%}\n  {% call statement('get_columns_in_relation', fetch_result=True) %}\n      select\n          column_name,\n          data_type,\n          character_maximum_length,\n          numeric_precision,\n          numeric_scale\n\n      from {{ relation.information_schema('columns') }}\n      where table_name = '{{ relation.identifier }}'\n        {% if relation.schema %}\n        and table_schema = '{{ relation.schema }}'\n        {% endif %}\n      order by ordinal_position\n\n  {% endcall %}\n  {% set table = load_result('get_columns_in_relation').table %}\n  {{ return(sql_convert_columns_in_relation(table)) }}\n{% endmacro %}\n\n\n{% macro postgres__list_relations_without_caching(information_schema, schema) %}\n  {% call statement('list_relations_without_caching', fetch_result=True) -%}\n    select\n      '{{ information_schema.database.lower() }}' as database,\n      tablename as name,\n      schemaname as schema,\n      'table' as type\n    from pg_tables\n    where schemaname ilike '{{ schema }}'\n    union all\n    select\n      '{{ information_schema.database.lower() }}' as database,\n      viewname as name,\n      schemaname as schema,\n      'view' as type\n    from pg_views\n    where schemaname ilike '{{ schema }}'\n  {% endcall %}\n  {{ return(load_result('list_relations_without_caching').table) }}\n{% endmacro %}\n\n{% macro postgres__information_schema_name(database) -%}\n  {% if database_name -%}\n    {{ adapter.verify_database(database_name) }}\n  {%- endif -%}\n  information_schema\n{%- endmacro %}\n\n{% macro postgres__list_schemas(database) %}\n  {% if database -%}\n    {{ adapter.verify_database(database) }}\n  {%- endif -%}\n  {% call statement('list_schemas', fetch_result=True, auto_begin=False) %}\n    select distinct nspname from pg_namespace\n  {% endcall %}\n  {{ return(load_result('list_schemas').table) }}\n{% endmacro %}\n\n{% macro postgres__check_schema_exists(information_schema, schema) -%}\n  {% if database -%}\n    {{ adapter.verify_database(information_schema.database) }}\n  {%- endif -%}\n  {% call statement('check_schema_exists', fetch_result=True, auto_begin=False) %}\n    select count(*) from pg_namespace where nspname = '{{ schema }}'\n  {% endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{% endmacro %}\n\n\n{% macro postgres__current_timestamp() -%}\n  now()\n{%- endmacro %}\n\n{% macro postgres__snapshot_get_time() -%}\n  {{ current_timestamp() }}::timestamp without time zone\n{%- endmacro %}\n\n{% macro postgres__make_temp_relation(base_relation, suffix) %}\n    {% set tmp_identifier = base_relation.identifier ~ suffix ~ py_current_timestring() %}\n    {% do return(base_relation.incorporate(\n                                  table_name=tmp_identifier,\n                                  path={\n                                    \"identifier\": tmp_identifier,\n                                    \"schema\": none,\n                                    \"database\": none\n                                  })) -%}\n{% endmacro %}", "root_path": "/Users/mrich/.local/share/virtualenvs/quasar-qaRV2YEO/lib/python3.7/site-packages/dbt/include/postgres", "name": "postgres__check_schema_exists", "unique_id": "macro.dbt_postgres.postgres__check_schema_exists", "tags": [], "resource_type": "macro", "depends_on": {"macros": []}}, "macro.dbt_postgres.postgres__current_timestamp": {"path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "package_name": "dbt_postgres", "raw_sql": "{% macro postgres__create_table_as(temporary, relation, sql) -%}\n  {%- set unlogged = config.get('unlogged', default=false) -%}\n\n  create {% if temporary -%}\n    temporary\n  {%- elif unlogged -%}\n    unlogged\n  {%- endif %} table {{ relation }}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}\n\n{% macro postgres__create_schema(database_name, schema_name) -%}\n  {% if database_name -%}\n    {{ adapter.verify_database(database_name) }}\n  {%- endif -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ schema_name }}\n  {%- endcall -%}\n{% endmacro %}\n\n{% macro postgres__drop_schema(database_name, schema_name) -%}\n  {% if database_name -%}\n    {{ adapter.verify_database(database_name) }}\n  {%- endif -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ schema_name }} cascade\n  {%- endcall -%}\n{% endmacro %}\n\n{% macro postgres__get_columns_in_relation(relation) -%}\n  {% call statement('get_columns_in_relation', fetch_result=True) %}\n      select\n          column_name,\n          data_type,\n          character_maximum_length,\n          numeric_precision,\n          numeric_scale\n\n      from {{ relation.information_schema('columns') }}\n      where table_name = '{{ relation.identifier }}'\n        {% if relation.schema %}\n        and table_schema = '{{ relation.schema }}'\n        {% endif %}\n      order by ordinal_position\n\n  {% endcall %}\n  {% set table = load_result('get_columns_in_relation').table %}\n  {{ return(sql_convert_columns_in_relation(table)) }}\n{% endmacro %}\n\n\n{% macro postgres__list_relations_without_caching(information_schema, schema) %}\n  {% call statement('list_relations_without_caching', fetch_result=True) -%}\n    select\n      '{{ information_schema.database.lower() }}' as database,\n      tablename as name,\n      schemaname as schema,\n      'table' as type\n    from pg_tables\n    where schemaname ilike '{{ schema }}'\n    union all\n    select\n      '{{ information_schema.database.lower() }}' as database,\n      viewname as name,\n      schemaname as schema,\n      'view' as type\n    from pg_views\n    where schemaname ilike '{{ schema }}'\n  {% endcall %}\n  {{ return(load_result('list_relations_without_caching').table) }}\n{% endmacro %}\n\n{% macro postgres__information_schema_name(database) -%}\n  {% if database_name -%}\n    {{ adapter.verify_database(database_name) }}\n  {%- endif -%}\n  information_schema\n{%- endmacro %}\n\n{% macro postgres__list_schemas(database) %}\n  {% if database -%}\n    {{ adapter.verify_database(database) }}\n  {%- endif -%}\n  {% call statement('list_schemas', fetch_result=True, auto_begin=False) %}\n    select distinct nspname from pg_namespace\n  {% endcall %}\n  {{ return(load_result('list_schemas').table) }}\n{% endmacro %}\n\n{% macro postgres__check_schema_exists(information_schema, schema) -%}\n  {% if database -%}\n    {{ adapter.verify_database(information_schema.database) }}\n  {%- endif -%}\n  {% call statement('check_schema_exists', fetch_result=True, auto_begin=False) %}\n    select count(*) from pg_namespace where nspname = '{{ schema }}'\n  {% endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{% endmacro %}\n\n\n{% macro postgres__current_timestamp() -%}\n  now()\n{%- endmacro %}\n\n{% macro postgres__snapshot_get_time() -%}\n  {{ current_timestamp() }}::timestamp without time zone\n{%- endmacro %}\n\n{% macro postgres__make_temp_relation(base_relation, suffix) %}\n    {% set tmp_identifier = base_relation.identifier ~ suffix ~ py_current_timestring() %}\n    {% do return(base_relation.incorporate(\n                                  table_name=tmp_identifier,\n                                  path={\n                                    \"identifier\": tmp_identifier,\n                                    \"schema\": none,\n                                    \"database\": none\n                                  })) -%}\n{% endmacro %}", "root_path": "/Users/mrich/.local/share/virtualenvs/quasar-qaRV2YEO/lib/python3.7/site-packages/dbt/include/postgres", "name": "postgres__current_timestamp", "unique_id": "macro.dbt_postgres.postgres__current_timestamp", "tags": [], "resource_type": "macro", "depends_on": {"macros": []}}, "macro.dbt_postgres.postgres__snapshot_get_time": {"path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "package_name": "dbt_postgres", "raw_sql": "{% macro postgres__create_table_as(temporary, relation, sql) -%}\n  {%- set unlogged = config.get('unlogged', default=false) -%}\n\n  create {% if temporary -%}\n    temporary\n  {%- elif unlogged -%}\n    unlogged\n  {%- endif %} table {{ relation }}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}\n\n{% macro postgres__create_schema(database_name, schema_name) -%}\n  {% if database_name -%}\n    {{ adapter.verify_database(database_name) }}\n  {%- endif -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ schema_name }}\n  {%- endcall -%}\n{% endmacro %}\n\n{% macro postgres__drop_schema(database_name, schema_name) -%}\n  {% if database_name -%}\n    {{ adapter.verify_database(database_name) }}\n  {%- endif -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ schema_name }} cascade\n  {%- endcall -%}\n{% endmacro %}\n\n{% macro postgres__get_columns_in_relation(relation) -%}\n  {% call statement('get_columns_in_relation', fetch_result=True) %}\n      select\n          column_name,\n          data_type,\n          character_maximum_length,\n          numeric_precision,\n          numeric_scale\n\n      from {{ relation.information_schema('columns') }}\n      where table_name = '{{ relation.identifier }}'\n        {% if relation.schema %}\n        and table_schema = '{{ relation.schema }}'\n        {% endif %}\n      order by ordinal_position\n\n  {% endcall %}\n  {% set table = load_result('get_columns_in_relation').table %}\n  {{ return(sql_convert_columns_in_relation(table)) }}\n{% endmacro %}\n\n\n{% macro postgres__list_relations_without_caching(information_schema, schema) %}\n  {% call statement('list_relations_without_caching', fetch_result=True) -%}\n    select\n      '{{ information_schema.database.lower() }}' as database,\n      tablename as name,\n      schemaname as schema,\n      'table' as type\n    from pg_tables\n    where schemaname ilike '{{ schema }}'\n    union all\n    select\n      '{{ information_schema.database.lower() }}' as database,\n      viewname as name,\n      schemaname as schema,\n      'view' as type\n    from pg_views\n    where schemaname ilike '{{ schema }}'\n  {% endcall %}\n  {{ return(load_result('list_relations_without_caching').table) }}\n{% endmacro %}\n\n{% macro postgres__information_schema_name(database) -%}\n  {% if database_name -%}\n    {{ adapter.verify_database(database_name) }}\n  {%- endif -%}\n  information_schema\n{%- endmacro %}\n\n{% macro postgres__list_schemas(database) %}\n  {% if database -%}\n    {{ adapter.verify_database(database) }}\n  {%- endif -%}\n  {% call statement('list_schemas', fetch_result=True, auto_begin=False) %}\n    select distinct nspname from pg_namespace\n  {% endcall %}\n  {{ return(load_result('list_schemas').table) }}\n{% endmacro %}\n\n{% macro postgres__check_schema_exists(information_schema, schema) -%}\n  {% if database -%}\n    {{ adapter.verify_database(information_schema.database) }}\n  {%- endif -%}\n  {% call statement('check_schema_exists', fetch_result=True, auto_begin=False) %}\n    select count(*) from pg_namespace where nspname = '{{ schema }}'\n  {% endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{% endmacro %}\n\n\n{% macro postgres__current_timestamp() -%}\n  now()\n{%- endmacro %}\n\n{% macro postgres__snapshot_get_time() -%}\n  {{ current_timestamp() }}::timestamp without time zone\n{%- endmacro %}\n\n{% macro postgres__make_temp_relation(base_relation, suffix) %}\n    {% set tmp_identifier = base_relation.identifier ~ suffix ~ py_current_timestring() %}\n    {% do return(base_relation.incorporate(\n                                  table_name=tmp_identifier,\n                                  path={\n                                    \"identifier\": tmp_identifier,\n                                    \"schema\": none,\n                                    \"database\": none\n                                  })) -%}\n{% endmacro %}", "root_path": "/Users/mrich/.local/share/virtualenvs/quasar-qaRV2YEO/lib/python3.7/site-packages/dbt/include/postgres", "name": "postgres__snapshot_get_time", "unique_id": "macro.dbt_postgres.postgres__snapshot_get_time", "tags": [], "resource_type": "macro", "depends_on": {"macros": []}}, "macro.dbt_postgres.postgres__make_temp_relation": {"path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "package_name": "dbt_postgres", "raw_sql": "{% macro postgres__create_table_as(temporary, relation, sql) -%}\n  {%- set unlogged = config.get('unlogged', default=false) -%}\n\n  create {% if temporary -%}\n    temporary\n  {%- elif unlogged -%}\n    unlogged\n  {%- endif %} table {{ relation }}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}\n\n{% macro postgres__create_schema(database_name, schema_name) -%}\n  {% if database_name -%}\n    {{ adapter.verify_database(database_name) }}\n  {%- endif -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ schema_name }}\n  {%- endcall -%}\n{% endmacro %}\n\n{% macro postgres__drop_schema(database_name, schema_name) -%}\n  {% if database_name -%}\n    {{ adapter.verify_database(database_name) }}\n  {%- endif -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ schema_name }} cascade\n  {%- endcall -%}\n{% endmacro %}\n\n{% macro postgres__get_columns_in_relation(relation) -%}\n  {% call statement('get_columns_in_relation', fetch_result=True) %}\n      select\n          column_name,\n          data_type,\n          character_maximum_length,\n          numeric_precision,\n          numeric_scale\n\n      from {{ relation.information_schema('columns') }}\n      where table_name = '{{ relation.identifier }}'\n        {% if relation.schema %}\n        and table_schema = '{{ relation.schema }}'\n        {% endif %}\n      order by ordinal_position\n\n  {% endcall %}\n  {% set table = load_result('get_columns_in_relation').table %}\n  {{ return(sql_convert_columns_in_relation(table)) }}\n{% endmacro %}\n\n\n{% macro postgres__list_relations_without_caching(information_schema, schema) %}\n  {% call statement('list_relations_without_caching', fetch_result=True) -%}\n    select\n      '{{ information_schema.database.lower() }}' as database,\n      tablename as name,\n      schemaname as schema,\n      'table' as type\n    from pg_tables\n    where schemaname ilike '{{ schema }}'\n    union all\n    select\n      '{{ information_schema.database.lower() }}' as database,\n      viewname as name,\n      schemaname as schema,\n      'view' as type\n    from pg_views\n    where schemaname ilike '{{ schema }}'\n  {% endcall %}\n  {{ return(load_result('list_relations_without_caching').table) }}\n{% endmacro %}\n\n{% macro postgres__information_schema_name(database) -%}\n  {% if database_name -%}\n    {{ adapter.verify_database(database_name) }}\n  {%- endif -%}\n  information_schema\n{%- endmacro %}\n\n{% macro postgres__list_schemas(database) %}\n  {% if database -%}\n    {{ adapter.verify_database(database) }}\n  {%- endif -%}\n  {% call statement('list_schemas', fetch_result=True, auto_begin=False) %}\n    select distinct nspname from pg_namespace\n  {% endcall %}\n  {{ return(load_result('list_schemas').table) }}\n{% endmacro %}\n\n{% macro postgres__check_schema_exists(information_schema, schema) -%}\n  {% if database -%}\n    {{ adapter.verify_database(information_schema.database) }}\n  {%- endif -%}\n  {% call statement('check_schema_exists', fetch_result=True, auto_begin=False) %}\n    select count(*) from pg_namespace where nspname = '{{ schema }}'\n  {% endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{% endmacro %}\n\n\n{% macro postgres__current_timestamp() -%}\n  now()\n{%- endmacro %}\n\n{% macro postgres__snapshot_get_time() -%}\n  {{ current_timestamp() }}::timestamp without time zone\n{%- endmacro %}\n\n{% macro postgres__make_temp_relation(base_relation, suffix) %}\n    {% set tmp_identifier = base_relation.identifier ~ suffix ~ py_current_timestring() %}\n    {% do return(base_relation.incorporate(\n                                  table_name=tmp_identifier,\n                                  path={\n                                    \"identifier\": tmp_identifier,\n                                    \"schema\": none,\n                                    \"database\": none\n                                  })) -%}\n{% endmacro %}", "root_path": "/Users/mrich/.local/share/virtualenvs/quasar-qaRV2YEO/lib/python3.7/site-packages/dbt/include/postgres", "name": "postgres__make_temp_relation", "unique_id": "macro.dbt_postgres.postgres__make_temp_relation", "tags": [], "resource_type": "macro", "depends_on": {"macros": []}}, "macro.dbt_postgres.postgres__snapshot_merge_sql": {"path": "macros/materializations/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshot_merge.sql", "package_name": "dbt_postgres", "raw_sql": "{% macro postgres__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    update {{ target }}\n    set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n    from {{ source }} as DBT_INTERNAL_SOURCE\n    where DBT_INTERNAL_SOURCE.dbt_scd_id::text = {{ target }}.dbt_scd_id::text\n      and DBT_INTERNAL_SOURCE.dbt_change_type::text = 'update'::text\n      and {{ target }}.dbt_valid_to is null;\n\n    insert into {{ target }} ({{ insert_cols_csv }})\n    select {% for column in insert_cols -%}\n        DBT_INTERNAL_SOURCE.{{ column }} {%- if not loop.last %}, {%- endif %}\n    {%- endfor %}\n    from {{ source }} as DBT_INTERNAL_SOURCE\n    where DBT_INTERNAL_SOURCE.dbt_change_type::text = 'insert'::text;\n{% endmacro %}", "root_path": "/Users/mrich/.local/share/virtualenvs/quasar-qaRV2YEO/lib/python3.7/site-packages/dbt/include/postgres", "name": "postgres__snapshot_merge_sql", "unique_id": "macro.dbt_postgres.postgres__snapshot_merge_sql", "tags": [], "resource_type": "macro", "depends_on": {"macros": []}}}, "docs": {"ds_dbt.click_id": {"root_path": "/Users/mrich/projects/quasar/quasar/dbt", "resource_type": "docs", "path": "schema.md", "original_file_path": "models/schema.md", "package_name": "ds_dbt", "file_contents": "\n{% docs click_id %}\nThis is a unique identifier for each click\n{% enddocs %}\n\n{% docs click_time %}\nTimestamp when user clicked.\n{% enddocs %}\n\n{% docs shortened %}\nShortened URL\n{% enddocs %}\n\n{% docs target_url %}\nURL where the user will be directed\n{% enddocs %}\n\n{% docs broadcast_id %}\nID of the broadcast that generated the shortened URL\n{% enddocs %}\n\n{% docs source %}\nSource of the URL (e.g. SMS, web), origin of the post (e.g. phoenix-web, phoenix-ashes, sms), or source where user was acquired. (e.g. sms, phoenix-next)\n{% enddocs %}\n\n{% docs interaction_type %}\nHow the user interacted with the link (e.g. preview, click)\n{% enddocs %}\n\n{% docs id %}\nUnique identifier for the post\n{% enddocs %}\n\n{% docs type %}\nType of post (e.g. photo)\n{% enddocs %}\n\n{% docs action %}\nPost action (e.g. DefendDreamers_Nov9_CongressCalls, GunViolence2018_Feb15_ParklandResponse)\n{% enddocs %}\n\n{% docs status %}\nPost status (e.g. accepted, rejected)\n{% enddocs %}\n\n{% docs quantity %}\nNumerical quantity of items specified in the call to action (e.g. 10, 200)\n{% enddocs %}\n\n{% docs source_bucket %}\nGrouping bucket for origin of the post (e.g. web, sms) \n{% enddocs %}\n\n{% docs created_at %}\nWhen the item was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs updated_at %}\nWhen the item was updated in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs text %}\nText of the post (e.g. \"Zoo animals and a super hero trying to help too!\") \n{% enddocs %}\n\n{% docs signup_id %}\nUnique identifier for the signup \n{% enddocs %}\n\n{% docs post_class %}\nClass of the signup (e.g. \"photo - default\", \"phone-call - DefendDreamers_Jan16_BothBodies\")\n{% enddocs %}\n\n{% docs is_accepted %}\nWhether the post has been accepted to be displayed to the public on the website\n{% enddocs %}\n\n{% docs action_id %}\nInternal identifier of the action \n{% enddocs %}\n\n{% docs location %}\nLocation where the action takes place (e.g. US-NY)\n{% enddocs %}\n\n{% docs postal_code %}\nPostal code where the action takes place\n{% enddocs %}\n\n{% docs is_reportback %}\nWhether the post is a reportback. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs civic_action %}\nWhether the post is a Civic Action. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs scholarship_entry %}\nWhether the post is a Scholarship Entry. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs why_participated %}\nWhy the user participated in this action. Entered by the user.\n{% enddocs %}\n\n{% docs details %}\nDetails about the post. Contains contentfulId and other information (e.g. {\"campaignContentfulId\":\"6ATBgGEQEeJoIcxs1qbwaC\"})\n{% enddocs %}\n\n{% docs email %}\nEmail address of the user.\n{% enddocs %}\n\n{% docs source_details %}\nDetails about the source of the item. This is sometimes represented as a JSON object, and for other tables like Turbovote its represented as a string. (e.g. \"{\"contentful_id\":\"3CTLlXfbwtz1FOMpl31SKV\",\"utm_source\":\"scholarship_listing\",\"utm_medium\":\"referral\",\"utm_campaign\":\"fastweb_2019_08\"}\", newsletter_456)\n{% enddocs %}\n\n{% docs campaign_id %}\nThis is a unique identifier for the campaign\n{% enddocs %}\n\n{% docs campaign_run_id %}\nUnique identifier for the campaign run\n{% enddocs %}\n\n{% docs campaign_name %}\nName of the campaign\n{% enddocs %}\n\n{% docs campaign_cause %}\nCampaign cause (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_run_start_date %}\nStart date of the campaign run\n{% enddocs %}\n\n{% docs campaign_run_end_date %}\nEnd date of the campaign run\n{% enddocs %}\n\n{% docs campaign_created_date %}\nWhen the campaign was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs campaign_node_id %}\nInternal unique node id for the campaign\n{% enddocs %}\n\n{% docs campaign_node_id_title %}\nCampaign title\n{% enddocs %}\n\n{% docs campaign_run_id_title %}\nTitle of the campaign run\n{% enddocs %}\n\n{% docs campaign_action_type %}\nCampaign action type (eg. Make Something, Share Something)\n{% enddocs %}\n\n{% docs campaign_cause_type %}\nCampaign cause type (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_noun %}\nNoun applicable to the user's action\n{% enddocs %}\n\n{% docs campaign_verb %}\nVerb describing the action the user should take\n{% enddocs %}\n\n{% docs campaign_cta %}\nCampaign's call to action\n{% enddocs %}\n\n{% docs campaign_language %}\n\"Language in which the campaign is available\"\n{% enddocs %}\n\n{% docs agent_id %}\nIf set, the content type of the picture the member is sending us. Exp. image/png.\n{% enddocs %}\n\n{% docs attachment_content_type %}\nIf set, the handle of the Front agent this outbound support message is from.\n{% enddocs %}\n\n{% docs topic %}\nHolds a reference to the **last** campaign topic the member's conversation was in. This is useful to allow members to talk to Gambit and get quick responses (through Rivescript), without Gambit completely forgetting what state the member's interaction with a campaign topic was in.\n{% enddocs %}\n\n{% docs action_serial_id %}\nSerial id for the user's action. Depends on the source of the action. May be the bertly click id, sms message id, etc.\n{% enddocs %}\n\n{% docs channel %}\nChannel for the user's action. Depends on the source of the action. (e.g. web, sms)\n{% enddocs %}\n\n{% docs first_action_month %}\nMonth during which the user took their first action. \n{% enddocs %}\n\n{% docs event_id %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs event_source %}\nApplication source for event (eg. Phoenix, Northstar)\n{% enddocs %}\n\n{% docs event_datetime %}\nWhen the event occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs event_name %}\nName of the event (eg. northstar_submitted_register, https://docs.google.com/spreadsheets/d/1lm-fGrIm85nUTxSojqyCt_Ehmm1zEbViFhKpxcJiz1A/edit#gid=406441516)\n{% enddocs %}\n\n{% docs event_type %}\nType of event (pv = 'Page View', se = 'Structured Event')\n{% enddocs %}\n\n{% docs host %}\nURL host where event occurred (eg. www.dosomething.org or identity.dosomething.org)\n{% enddocs %}\n\n{% docs path %}\nURL path event occurred at (eg. /login or /us/campaigns/huddle-for-heroes)\n{% enddocs %}\n\n{% docs query_parameters %}\nOptional query parameters for the request (eg. query=huddle)\n{% enddocs %}\n\n{% docs se_category %}\nCategory of event (eg. focused_field, authentication) - Custom structured event\n{% enddocs %}\n\n{% docs se_action %}\nAction performed / event name (eg. form_submitted, action_failed) - Custom structured event\n{% enddocs %}\n\n{% docs se_label %}\nThe object of the action (eg. first_name, register, voter_reg_status) - Custom structured event\n{% enddocs %}\n\n{% docs session_id %}\nUnique identifier of the user's session\n{% enddocs %}\n\n{% docs session_counter %}\nHow many sessions a user has started\n{% enddocs %}\n\n{% docs browser_size %}\nWhich type of browser a user is using (eg. Mobile, Desktop)\n{% enddocs %}\n\n{% docs northstar_id %}\nThe Northstar ID of the user who generated the event\n{% enddocs %}\n\n{% docs device_id %}\nID of the device used\n{% enddocs %}\n\n{% docs referrer_host %}\nURL host of the referring site (eg. google.com)\n{% enddocs %}\n\n{% docs referrer_path %}\nURL path from referring site (eg. /10-stats-on-teen-drug-and-alcohol-use/)\n{% enddocs %}\n\n{% docs referrer_source %}\nReferrer source name (eg. Google, Facebook)\n{% enddocs %}\n\n{% docs utm_source %}\nTracks where the traffic is coming from. (eg. scholarship_listing, Facebook)\n{% enddocs %}\n\n{% docs utm_medium %}\nHow the traffic got to the platform (eg. referral, CPC)\n{% enddocs %}\n\n{% docs utm_campaign %}\nTracks which campaign the traffic was generated by. Shows up in Google Analytics as Campaign Name (eg. editorial_newsletter)\n{% enddocs %}\n\n{% docs url %}\nURL of campaign (eg. https://dosome.click/nyn5m7)\n{% enddocs %}\n\n{% docs modal_type %}\nNULL or SURVEY_MODAL\n{% enddocs %}\n\n{% docs landing_datetime %}\nWhen the session started in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs ending_datetime %}\nWhen the session ended in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs session_duration_seconds %}\nSession duration in seconds\n{% enddocs %}\n\n{% docs num_pages_views %}\nNumber of pages viewed in session\n{% enddocs %}\n\n{% docs landing_page %}\nFirst page the user viewed in the session (eg. /us/facts/11-facts-about-bp-oil-spill)\n{% enddocs %}\n\n{% docs exit_page %}\n\"Which page the user ended or exited their session from (eg. /us/campaigns/green-your-getaway)\"\n{% enddocs %}\n\n{% docs days_since_last_session %}\n\"Days since their last session.\"\n{% enddocs %}\n\n{% docs post_type %}\nType of post, (e.g. photo, voter-reg)\n{% enddocs %}\n\n{% docs noun %}\nNoun that corresponds to the item in the call to action that was delivered. (e.g. drawings, tweets)\n{% enddocs %}\n\n{% docs verb %}\nVerb corresponding to the action the user took. (e.g. shared, sent, taken)\n{% enddocs %}\n\n{% docs deleted_at %}\nDate time in UTC when a user deleted their post.\n{% enddocs %}\n\n{% docs _fivetran_deleted %}\nMarks rows that were deleted in the source table\n{% enddocs %}\n\n{% docs _fivetran_synced %}\n(UTC timestamp) keeps track of when each row was last successfully synced\n{% enddocs %}\n\n{% docs reportback %}\nWhether the post is a reportback \n{% enddocs %}\n\n{% docs active %}\nWhether the user is active \n{% enddocs %}\n\n{% docs anonymous %}\nWhether the user is anonymous when making the post \n{% enddocs %}\n\n{% docs callpower_campaign_id %}\nUnique ID corresponding to the Callpower campaign. Callpower allows users to record messages for their representatives.\n{% enddocs %}\n\n{% docs quiz %}\nWhether the post is a quiz \n{% enddocs %}\n\n{% docs action_type %}\nType of action the user took. (e.g. share-something, donate-something)\n{% enddocs %}\n\n{% docs online %}\nWhether the action is a online as opposed to IRL.\n{% enddocs %}\n\n{% docs time_commitment %}\nEstimated time required to do the action (e.g. 3.0+, <0.5)\n{% enddocs %}\n\n{% docs num_signups %}\nQuantity of campaign signups\n{% enddocs %}\n\n{% docs most_recent_signup %}\nTimestamp of the most recent signup in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs num_rbs %}\nQuantity of reportbacks for the user\n{% enddocs %}\n\n{% docs total_quantity %}\nTotal quantity of items in reportbacks\n{% enddocs %}\n\n{% docs most_recent_rb %}\nWhen the most recent reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs first_rb %}\nWhen the first reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs avg_time_betw_rbs %}\nCalculated average time between reportbacks.\n{% enddocs %}\n\n{% docs avg_days_next_action_after_rb %}\nCalculated average days until next action after reportback\n{% enddocs %}\n\n{% docs days_to_next_action_after_last_rb %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs most_recent_mam_action %}\nMost recent monthly active member qualifying action in UTC (eg. 2018-01-01 12:00:00).\n{% enddocs %}\n\n{% docs most_recent_email_open %}\nMost recent email open in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs most_recent_all_actions %}\nMost recent timestamp of any action in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs last_action_is_rb %}\nWhether the last action the user took was a reportback\n{% enddocs %}\n\n{% docs days_since_last_action %}\nDays since the user's last action\n{% enddocs %}\n\n{% docs time_to_first_rb %}\nHow much time after registering until the user's first reportback\n{% enddocs %}\n\n{% docs sms_unsubscribed_at %}\nTimestamp of when user unsubscribed from SMS messaging\n{% enddocs %}\n\n{% docs user_unsubscribed_at %}\nTimestamp of when user unsubscribed from email or sms\n{% enddocs %}\n\n{% docs voter_reg_acquisition %}\nWhether the user was an acquisition through voter registration efforts. \n{% enddocs %}\n\n{% docs last_logged_in %}\nDate time in UTC when user last logged in to Northstar\n{% enddocs %}\n\n{% docs last_accessed %}\nDate time in UTC when user last access the website\n{% enddocs %}\n\n{% docs last_messaged_at %}\nDate time in UTC when user was last sent a message via SMS or email\n{% enddocs %}\n\n{% docs facebook_id %}\nUser's facebook id\n{% enddocs %}\n\n{% docs mobile %}\nUsers's mobile phone number\n{% enddocs %}\n\n{% docs birthdate %}\nUser's birthdate\n{% enddocs %}\n\n{% docs first_name %}\nUser's first name\n{% enddocs %}\n\n{% docs last_name %}\nUser's last name\n{% enddocs %}\n\n{% docs voter_registration_status %}\nUser's registration status. (e.g. registration_complete, confirmed, uncertain) \n{% enddocs %}\n\n{% docs finish_with_state %}\nIf the registrant was eligible to use and passed through to complete their registration with their state\u2019s OVR system, it will be indicated in this field (direct quote from Rock-The-Vote documentation). Yes/No value in field.\n{% enddocs %}\n\n{% docs reportback_volume %}\nThis field returns 1 if non voter-reg action, since campaigns team only counts those a 1 reportback. If voter-reg action, we want to count quantity of post as number of registered voters.\n{% enddocs %}\n\n{% docs address_street_1 %}\nFirst line of user's street address\n{% enddocs %}\n\n{% docs address_street_2 %}\nSecond line of user's street address\n{% enddocs %}\n\n{% docs city %}\nUser's city\n{% enddocs %}\n\n{% docs state %}\nUser's state\n{% enddocs %}\n\n{% docs country %}\nUser's country\n{% enddocs %}\n\n{% docs language %}\nUser's language\n{% enddocs %}\n\n{% docs cio_status %}\nStatus of user from CIO. (e.g. customer_subscribed, customer_unsubscribed)\n{% enddocs %}\n\n{% docs cio_status_timestamp %}\nTimestamp when users's status was updated.\n{% enddocs %}\n\n{% docs sms_status %}\nCurrent SMS status. (e.g. undeliverable, unknown)\n{% enddocs %}\n\n{% docs source_detail %}\nDetails of the origin of the user. (e.g. tell_a_friend, other, opt_in_path/197981)\n{% enddocs %}\n\n{% docs badges %}\nWhether the user has any badges. \n{% enddocs %}\n\n{% docs refer_friends %}\nWhether the user is a part of the refer a friend campaign. \n{% enddocs %}\n\n{% docs subscribed_member %}\nWhether the user is subscribed. \n{% enddocs %}\n\n{% docs last_updated_at %}\nTimestamp when users's was updated.\n{% enddocs %}\n\n{% docs school_id %}\nUnique identifier for the user's school. This info comes from the school finder.\n{% enddocs %}\n\n{% docs newsletter_topic %}\nNewsletter topic. (e.g. community, lifestyle)\n{% enddocs %}\n\n{% docs user_agent %}\nFull user agent string for a user's browser (e.g. \"Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:24.0) Gecko/20100101 Firefox/24.0\")\n{% enddocs %}\n\n{% docs drupal_id %}\nOld Drupal user ID\n{% enddocs %}\n\n{% docs campaigns %}\nCampaigns a user is signed up for.\n{% enddocs %}\n\n{% docs audit %}\nA very useful field with data containing information about changes to a user, e.g. timestamps when the user subscribed and unsubscribed.\n{% enddocs %}\n\n{% docs voting_plan_status %}\nThe indication of the user's plan to vote, e.g. voting, not_voting, cant_vote\n{% enddocs %}\n\n{% docs voting_plan_time_of_day %}\nThe time of day when the user plans to vote, e.g morning, afternoon, evening\n{% enddocs %}\n\n{% docs voting_plan_method_of_transport %}\nHow the user plans to get to their polling place. e.g. walk, drive\n{% enddocs %}\n\n{% docs voting_plan_attending_with %}\nWith Whom the user plans to go voting, e.g. family, friends, alone\n{% enddocs %}\n\n{% docs feature_flags %}\nJSON containing info on features like badges and refer-a-friend.\n{% enddocs %}\n\n{% docs dbt_updated_at %}\nDBT snapshot table data. The updated_at timestamp of the source record when this snapshot row was inserted.\n{% enddocs %}\n\n{% docs dbt_scd_id %}\nDBT snapshot table data. A unique key generated for each snapshotted record.\n{% enddocs %}\n\n{% docs dbt_valid_from %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this snapshot row was first inserted\n{% enddocs %}\n\n{% docs dbt_valid_to %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this row row became invalidated.\n{% enddocs %}\n\n{% docs google_id %}\nUser's Google ID obtained from login.\n{% enddocs %}\n\n{% docs causes %}\nCauses in which a user is interested. e.g. animal welfare, education, mental_health\n{% enddocs %}\n\n{% docs email_subscription_status %}\nEmail subscription status of the user\n{% enddocs %}\n\n{% docs role %}\nUser's role, e.g. user, staff\n{% enddocs %}\n\n{% docs cio_backfilled %}\nWhether this user's data was backfilled from CIO\n{% enddocs %}\n\n{% docs addr_source %}\nWhere the user submitted their address, e.g. sms, GDPR\n{% enddocs %}\n\n{% docs email_subscription_topics %}\nEmail subscription topics correspond to categories in CIO in which the user is interested. e.g. lifestyle, community, scholarship\n{% enddocs %}\n\n{% docs sms_paused %}\nWhether we've paused sending sms messages to the user.\n{% enddocs %}\n\n\n\n\n", "name": "click_id", "unique_id": "ds_dbt.click_id", "block_contents": "This is a unique identifier for each click"}, "ds_dbt.click_time": {"root_path": "/Users/mrich/projects/quasar/quasar/dbt", "resource_type": "docs", "path": "schema.md", "original_file_path": "models/schema.md", "package_name": "ds_dbt", "file_contents": "\n{% docs click_id %}\nThis is a unique identifier for each click\n{% enddocs %}\n\n{% docs click_time %}\nTimestamp when user clicked.\n{% enddocs %}\n\n{% docs shortened %}\nShortened URL\n{% enddocs %}\n\n{% docs target_url %}\nURL where the user will be directed\n{% enddocs %}\n\n{% docs broadcast_id %}\nID of the broadcast that generated the shortened URL\n{% enddocs %}\n\n{% docs source %}\nSource of the URL (e.g. SMS, web), origin of the post (e.g. phoenix-web, phoenix-ashes, sms), or source where user was acquired. (e.g. sms, phoenix-next)\n{% enddocs %}\n\n{% docs interaction_type %}\nHow the user interacted with the link (e.g. preview, click)\n{% enddocs %}\n\n{% docs id %}\nUnique identifier for the post\n{% enddocs %}\n\n{% docs type %}\nType of post (e.g. photo)\n{% enddocs %}\n\n{% docs action %}\nPost action (e.g. DefendDreamers_Nov9_CongressCalls, GunViolence2018_Feb15_ParklandResponse)\n{% enddocs %}\n\n{% docs status %}\nPost status (e.g. accepted, rejected)\n{% enddocs %}\n\n{% docs quantity %}\nNumerical quantity of items specified in the call to action (e.g. 10, 200)\n{% enddocs %}\n\n{% docs source_bucket %}\nGrouping bucket for origin of the post (e.g. web, sms) \n{% enddocs %}\n\n{% docs created_at %}\nWhen the item was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs updated_at %}\nWhen the item was updated in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs text %}\nText of the post (e.g. \"Zoo animals and a super hero trying to help too!\") \n{% enddocs %}\n\n{% docs signup_id %}\nUnique identifier for the signup \n{% enddocs %}\n\n{% docs post_class %}\nClass of the signup (e.g. \"photo - default\", \"phone-call - DefendDreamers_Jan16_BothBodies\")\n{% enddocs %}\n\n{% docs is_accepted %}\nWhether the post has been accepted to be displayed to the public on the website\n{% enddocs %}\n\n{% docs action_id %}\nInternal identifier of the action \n{% enddocs %}\n\n{% docs location %}\nLocation where the action takes place (e.g. US-NY)\n{% enddocs %}\n\n{% docs postal_code %}\nPostal code where the action takes place\n{% enddocs %}\n\n{% docs is_reportback %}\nWhether the post is a reportback. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs civic_action %}\nWhether the post is a Civic Action. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs scholarship_entry %}\nWhether the post is a Scholarship Entry. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs why_participated %}\nWhy the user participated in this action. Entered by the user.\n{% enddocs %}\n\n{% docs details %}\nDetails about the post. Contains contentfulId and other information (e.g. {\"campaignContentfulId\":\"6ATBgGEQEeJoIcxs1qbwaC\"})\n{% enddocs %}\n\n{% docs email %}\nEmail address of the user.\n{% enddocs %}\n\n{% docs source_details %}\nDetails about the source of the item. This is sometimes represented as a JSON object, and for other tables like Turbovote its represented as a string. (e.g. \"{\"contentful_id\":\"3CTLlXfbwtz1FOMpl31SKV\",\"utm_source\":\"scholarship_listing\",\"utm_medium\":\"referral\",\"utm_campaign\":\"fastweb_2019_08\"}\", newsletter_456)\n{% enddocs %}\n\n{% docs campaign_id %}\nThis is a unique identifier for the campaign\n{% enddocs %}\n\n{% docs campaign_run_id %}\nUnique identifier for the campaign run\n{% enddocs %}\n\n{% docs campaign_name %}\nName of the campaign\n{% enddocs %}\n\n{% docs campaign_cause %}\nCampaign cause (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_run_start_date %}\nStart date of the campaign run\n{% enddocs %}\n\n{% docs campaign_run_end_date %}\nEnd date of the campaign run\n{% enddocs %}\n\n{% docs campaign_created_date %}\nWhen the campaign was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs campaign_node_id %}\nInternal unique node id for the campaign\n{% enddocs %}\n\n{% docs campaign_node_id_title %}\nCampaign title\n{% enddocs %}\n\n{% docs campaign_run_id_title %}\nTitle of the campaign run\n{% enddocs %}\n\n{% docs campaign_action_type %}\nCampaign action type (eg. Make Something, Share Something)\n{% enddocs %}\n\n{% docs campaign_cause_type %}\nCampaign cause type (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_noun %}\nNoun applicable to the user's action\n{% enddocs %}\n\n{% docs campaign_verb %}\nVerb describing the action the user should take\n{% enddocs %}\n\n{% docs campaign_cta %}\nCampaign's call to action\n{% enddocs %}\n\n{% docs campaign_language %}\n\"Language in which the campaign is available\"\n{% enddocs %}\n\n{% docs agent_id %}\nIf set, the content type of the picture the member is sending us. Exp. image/png.\n{% enddocs %}\n\n{% docs attachment_content_type %}\nIf set, the handle of the Front agent this outbound support message is from.\n{% enddocs %}\n\n{% docs topic %}\nHolds a reference to the **last** campaign topic the member's conversation was in. This is useful to allow members to talk to Gambit and get quick responses (through Rivescript), without Gambit completely forgetting what state the member's interaction with a campaign topic was in.\n{% enddocs %}\n\n{% docs action_serial_id %}\nSerial id for the user's action. Depends on the source of the action. May be the bertly click id, sms message id, etc.\n{% enddocs %}\n\n{% docs channel %}\nChannel for the user's action. Depends on the source of the action. (e.g. web, sms)\n{% enddocs %}\n\n{% docs first_action_month %}\nMonth during which the user took their first action. \n{% enddocs %}\n\n{% docs event_id %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs event_source %}\nApplication source for event (eg. Phoenix, Northstar)\n{% enddocs %}\n\n{% docs event_datetime %}\nWhen the event occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs event_name %}\nName of the event (eg. northstar_submitted_register, https://docs.google.com/spreadsheets/d/1lm-fGrIm85nUTxSojqyCt_Ehmm1zEbViFhKpxcJiz1A/edit#gid=406441516)\n{% enddocs %}\n\n{% docs event_type %}\nType of event (pv = 'Page View', se = 'Structured Event')\n{% enddocs %}\n\n{% docs host %}\nURL host where event occurred (eg. www.dosomething.org or identity.dosomething.org)\n{% enddocs %}\n\n{% docs path %}\nURL path event occurred at (eg. /login or /us/campaigns/huddle-for-heroes)\n{% enddocs %}\n\n{% docs query_parameters %}\nOptional query parameters for the request (eg. query=huddle)\n{% enddocs %}\n\n{% docs se_category %}\nCategory of event (eg. focused_field, authentication) - Custom structured event\n{% enddocs %}\n\n{% docs se_action %}\nAction performed / event name (eg. form_submitted, action_failed) - Custom structured event\n{% enddocs %}\n\n{% docs se_label %}\nThe object of the action (eg. first_name, register, voter_reg_status) - Custom structured event\n{% enddocs %}\n\n{% docs session_id %}\nUnique identifier of the user's session\n{% enddocs %}\n\n{% docs session_counter %}\nHow many sessions a user has started\n{% enddocs %}\n\n{% docs browser_size %}\nWhich type of browser a user is using (eg. Mobile, Desktop)\n{% enddocs %}\n\n{% docs northstar_id %}\nThe Northstar ID of the user who generated the event\n{% enddocs %}\n\n{% docs device_id %}\nID of the device used\n{% enddocs %}\n\n{% docs referrer_host %}\nURL host of the referring site (eg. google.com)\n{% enddocs %}\n\n{% docs referrer_path %}\nURL path from referring site (eg. /10-stats-on-teen-drug-and-alcohol-use/)\n{% enddocs %}\n\n{% docs referrer_source %}\nReferrer source name (eg. Google, Facebook)\n{% enddocs %}\n\n{% docs utm_source %}\nTracks where the traffic is coming from. (eg. scholarship_listing, Facebook)\n{% enddocs %}\n\n{% docs utm_medium %}\nHow the traffic got to the platform (eg. referral, CPC)\n{% enddocs %}\n\n{% docs utm_campaign %}\nTracks which campaign the traffic was generated by. Shows up in Google Analytics as Campaign Name (eg. editorial_newsletter)\n{% enddocs %}\n\n{% docs url %}\nURL of campaign (eg. https://dosome.click/nyn5m7)\n{% enddocs %}\n\n{% docs modal_type %}\nNULL or SURVEY_MODAL\n{% enddocs %}\n\n{% docs landing_datetime %}\nWhen the session started in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs ending_datetime %}\nWhen the session ended in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs session_duration_seconds %}\nSession duration in seconds\n{% enddocs %}\n\n{% docs num_pages_views %}\nNumber of pages viewed in session\n{% enddocs %}\n\n{% docs landing_page %}\nFirst page the user viewed in the session (eg. /us/facts/11-facts-about-bp-oil-spill)\n{% enddocs %}\n\n{% docs exit_page %}\n\"Which page the user ended or exited their session from (eg. /us/campaigns/green-your-getaway)\"\n{% enddocs %}\n\n{% docs days_since_last_session %}\n\"Days since their last session.\"\n{% enddocs %}\n\n{% docs post_type %}\nType of post, (e.g. photo, voter-reg)\n{% enddocs %}\n\n{% docs noun %}\nNoun that corresponds to the item in the call to action that was delivered. (e.g. drawings, tweets)\n{% enddocs %}\n\n{% docs verb %}\nVerb corresponding to the action the user took. (e.g. shared, sent, taken)\n{% enddocs %}\n\n{% docs deleted_at %}\nDate time in UTC when a user deleted their post.\n{% enddocs %}\n\n{% docs _fivetran_deleted %}\nMarks rows that were deleted in the source table\n{% enddocs %}\n\n{% docs _fivetran_synced %}\n(UTC timestamp) keeps track of when each row was last successfully synced\n{% enddocs %}\n\n{% docs reportback %}\nWhether the post is a reportback \n{% enddocs %}\n\n{% docs active %}\nWhether the user is active \n{% enddocs %}\n\n{% docs anonymous %}\nWhether the user is anonymous when making the post \n{% enddocs %}\n\n{% docs callpower_campaign_id %}\nUnique ID corresponding to the Callpower campaign. Callpower allows users to record messages for their representatives.\n{% enddocs %}\n\n{% docs quiz %}\nWhether the post is a quiz \n{% enddocs %}\n\n{% docs action_type %}\nType of action the user took. (e.g. share-something, donate-something)\n{% enddocs %}\n\n{% docs online %}\nWhether the action is a online as opposed to IRL.\n{% enddocs %}\n\n{% docs time_commitment %}\nEstimated time required to do the action (e.g. 3.0+, <0.5)\n{% enddocs %}\n\n{% docs num_signups %}\nQuantity of campaign signups\n{% enddocs %}\n\n{% docs most_recent_signup %}\nTimestamp of the most recent signup in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs num_rbs %}\nQuantity of reportbacks for the user\n{% enddocs %}\n\n{% docs total_quantity %}\nTotal quantity of items in reportbacks\n{% enddocs %}\n\n{% docs most_recent_rb %}\nWhen the most recent reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs first_rb %}\nWhen the first reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs avg_time_betw_rbs %}\nCalculated average time between reportbacks.\n{% enddocs %}\n\n{% docs avg_days_next_action_after_rb %}\nCalculated average days until next action after reportback\n{% enddocs %}\n\n{% docs days_to_next_action_after_last_rb %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs most_recent_mam_action %}\nMost recent monthly active member qualifying action in UTC (eg. 2018-01-01 12:00:00).\n{% enddocs %}\n\n{% docs most_recent_email_open %}\nMost recent email open in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs most_recent_all_actions %}\nMost recent timestamp of any action in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs last_action_is_rb %}\nWhether the last action the user took was a reportback\n{% enddocs %}\n\n{% docs days_since_last_action %}\nDays since the user's last action\n{% enddocs %}\n\n{% docs time_to_first_rb %}\nHow much time after registering until the user's first reportback\n{% enddocs %}\n\n{% docs sms_unsubscribed_at %}\nTimestamp of when user unsubscribed from SMS messaging\n{% enddocs %}\n\n{% docs user_unsubscribed_at %}\nTimestamp of when user unsubscribed from email or sms\n{% enddocs %}\n\n{% docs voter_reg_acquisition %}\nWhether the user was an acquisition through voter registration efforts. \n{% enddocs %}\n\n{% docs last_logged_in %}\nDate time in UTC when user last logged in to Northstar\n{% enddocs %}\n\n{% docs last_accessed %}\nDate time in UTC when user last access the website\n{% enddocs %}\n\n{% docs last_messaged_at %}\nDate time in UTC when user was last sent a message via SMS or email\n{% enddocs %}\n\n{% docs facebook_id %}\nUser's facebook id\n{% enddocs %}\n\n{% docs mobile %}\nUsers's mobile phone number\n{% enddocs %}\n\n{% docs birthdate %}\nUser's birthdate\n{% enddocs %}\n\n{% docs first_name %}\nUser's first name\n{% enddocs %}\n\n{% docs last_name %}\nUser's last name\n{% enddocs %}\n\n{% docs voter_registration_status %}\nUser's registration status. (e.g. registration_complete, confirmed, uncertain) \n{% enddocs %}\n\n{% docs finish_with_state %}\nIf the registrant was eligible to use and passed through to complete their registration with their state\u2019s OVR system, it will be indicated in this field (direct quote from Rock-The-Vote documentation). Yes/No value in field.\n{% enddocs %}\n\n{% docs reportback_volume %}\nThis field returns 1 if non voter-reg action, since campaigns team only counts those a 1 reportback. If voter-reg action, we want to count quantity of post as number of registered voters.\n{% enddocs %}\n\n{% docs address_street_1 %}\nFirst line of user's street address\n{% enddocs %}\n\n{% docs address_street_2 %}\nSecond line of user's street address\n{% enddocs %}\n\n{% docs city %}\nUser's city\n{% enddocs %}\n\n{% docs state %}\nUser's state\n{% enddocs %}\n\n{% docs country %}\nUser's country\n{% enddocs %}\n\n{% docs language %}\nUser's language\n{% enddocs %}\n\n{% docs cio_status %}\nStatus of user from CIO. (e.g. customer_subscribed, customer_unsubscribed)\n{% enddocs %}\n\n{% docs cio_status_timestamp %}\nTimestamp when users's status was updated.\n{% enddocs %}\n\n{% docs sms_status %}\nCurrent SMS status. (e.g. undeliverable, unknown)\n{% enddocs %}\n\n{% docs source_detail %}\nDetails of the origin of the user. (e.g. tell_a_friend, other, opt_in_path/197981)\n{% enddocs %}\n\n{% docs badges %}\nWhether the user has any badges. \n{% enddocs %}\n\n{% docs refer_friends %}\nWhether the user is a part of the refer a friend campaign. \n{% enddocs %}\n\n{% docs subscribed_member %}\nWhether the user is subscribed. \n{% enddocs %}\n\n{% docs last_updated_at %}\nTimestamp when users's was updated.\n{% enddocs %}\n\n{% docs school_id %}\nUnique identifier for the user's school. This info comes from the school finder.\n{% enddocs %}\n\n{% docs newsletter_topic %}\nNewsletter topic. (e.g. community, lifestyle)\n{% enddocs %}\n\n{% docs user_agent %}\nFull user agent string for a user's browser (e.g. \"Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:24.0) Gecko/20100101 Firefox/24.0\")\n{% enddocs %}\n\n{% docs drupal_id %}\nOld Drupal user ID\n{% enddocs %}\n\n{% docs campaigns %}\nCampaigns a user is signed up for.\n{% enddocs %}\n\n{% docs audit %}\nA very useful field with data containing information about changes to a user, e.g. timestamps when the user subscribed and unsubscribed.\n{% enddocs %}\n\n{% docs voting_plan_status %}\nThe indication of the user's plan to vote, e.g. voting, not_voting, cant_vote\n{% enddocs %}\n\n{% docs voting_plan_time_of_day %}\nThe time of day when the user plans to vote, e.g morning, afternoon, evening\n{% enddocs %}\n\n{% docs voting_plan_method_of_transport %}\nHow the user plans to get to their polling place. e.g. walk, drive\n{% enddocs %}\n\n{% docs voting_plan_attending_with %}\nWith Whom the user plans to go voting, e.g. family, friends, alone\n{% enddocs %}\n\n{% docs feature_flags %}\nJSON containing info on features like badges and refer-a-friend.\n{% enddocs %}\n\n{% docs dbt_updated_at %}\nDBT snapshot table data. The updated_at timestamp of the source record when this snapshot row was inserted.\n{% enddocs %}\n\n{% docs dbt_scd_id %}\nDBT snapshot table data. A unique key generated for each snapshotted record.\n{% enddocs %}\n\n{% docs dbt_valid_from %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this snapshot row was first inserted\n{% enddocs %}\n\n{% docs dbt_valid_to %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this row row became invalidated.\n{% enddocs %}\n\n{% docs google_id %}\nUser's Google ID obtained from login.\n{% enddocs %}\n\n{% docs causes %}\nCauses in which a user is interested. e.g. animal welfare, education, mental_health\n{% enddocs %}\n\n{% docs email_subscription_status %}\nEmail subscription status of the user\n{% enddocs %}\n\n{% docs role %}\nUser's role, e.g. user, staff\n{% enddocs %}\n\n{% docs cio_backfilled %}\nWhether this user's data was backfilled from CIO\n{% enddocs %}\n\n{% docs addr_source %}\nWhere the user submitted their address, e.g. sms, GDPR\n{% enddocs %}\n\n{% docs email_subscription_topics %}\nEmail subscription topics correspond to categories in CIO in which the user is interested. e.g. lifestyle, community, scholarship\n{% enddocs %}\n\n{% docs sms_paused %}\nWhether we've paused sending sms messages to the user.\n{% enddocs %}\n\n\n\n\n", "name": "click_time", "unique_id": "ds_dbt.click_time", "block_contents": "Timestamp when user clicked."}, "ds_dbt.shortened": {"root_path": "/Users/mrich/projects/quasar/quasar/dbt", "resource_type": "docs", "path": "schema.md", "original_file_path": "models/schema.md", "package_name": "ds_dbt", "file_contents": "\n{% docs click_id %}\nThis is a unique identifier for each click\n{% enddocs %}\n\n{% docs click_time %}\nTimestamp when user clicked.\n{% enddocs %}\n\n{% docs shortened %}\nShortened URL\n{% enddocs %}\n\n{% docs target_url %}\nURL where the user will be directed\n{% enddocs %}\n\n{% docs broadcast_id %}\nID of the broadcast that generated the shortened URL\n{% enddocs %}\n\n{% docs source %}\nSource of the URL (e.g. SMS, web), origin of the post (e.g. phoenix-web, phoenix-ashes, sms), or source where user was acquired. (e.g. sms, phoenix-next)\n{% enddocs %}\n\n{% docs interaction_type %}\nHow the user interacted with the link (e.g. preview, click)\n{% enddocs %}\n\n{% docs id %}\nUnique identifier for the post\n{% enddocs %}\n\n{% docs type %}\nType of post (e.g. photo)\n{% enddocs %}\n\n{% docs action %}\nPost action (e.g. DefendDreamers_Nov9_CongressCalls, GunViolence2018_Feb15_ParklandResponse)\n{% enddocs %}\n\n{% docs status %}\nPost status (e.g. accepted, rejected)\n{% enddocs %}\n\n{% docs quantity %}\nNumerical quantity of items specified in the call to action (e.g. 10, 200)\n{% enddocs %}\n\n{% docs source_bucket %}\nGrouping bucket for origin of the post (e.g. web, sms) \n{% enddocs %}\n\n{% docs created_at %}\nWhen the item was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs updated_at %}\nWhen the item was updated in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs text %}\nText of the post (e.g. \"Zoo animals and a super hero trying to help too!\") \n{% enddocs %}\n\n{% docs signup_id %}\nUnique identifier for the signup \n{% enddocs %}\n\n{% docs post_class %}\nClass of the signup (e.g. \"photo - default\", \"phone-call - DefendDreamers_Jan16_BothBodies\")\n{% enddocs %}\n\n{% docs is_accepted %}\nWhether the post has been accepted to be displayed to the public on the website\n{% enddocs %}\n\n{% docs action_id %}\nInternal identifier of the action \n{% enddocs %}\n\n{% docs location %}\nLocation where the action takes place (e.g. US-NY)\n{% enddocs %}\n\n{% docs postal_code %}\nPostal code where the action takes place\n{% enddocs %}\n\n{% docs is_reportback %}\nWhether the post is a reportback. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs civic_action %}\nWhether the post is a Civic Action. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs scholarship_entry %}\nWhether the post is a Scholarship Entry. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs why_participated %}\nWhy the user participated in this action. Entered by the user.\n{% enddocs %}\n\n{% docs details %}\nDetails about the post. Contains contentfulId and other information (e.g. {\"campaignContentfulId\":\"6ATBgGEQEeJoIcxs1qbwaC\"})\n{% enddocs %}\n\n{% docs email %}\nEmail address of the user.\n{% enddocs %}\n\n{% docs source_details %}\nDetails about the source of the item. This is sometimes represented as a JSON object, and for other tables like Turbovote its represented as a string. (e.g. \"{\"contentful_id\":\"3CTLlXfbwtz1FOMpl31SKV\",\"utm_source\":\"scholarship_listing\",\"utm_medium\":\"referral\",\"utm_campaign\":\"fastweb_2019_08\"}\", newsletter_456)\n{% enddocs %}\n\n{% docs campaign_id %}\nThis is a unique identifier for the campaign\n{% enddocs %}\n\n{% docs campaign_run_id %}\nUnique identifier for the campaign run\n{% enddocs %}\n\n{% docs campaign_name %}\nName of the campaign\n{% enddocs %}\n\n{% docs campaign_cause %}\nCampaign cause (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_run_start_date %}\nStart date of the campaign run\n{% enddocs %}\n\n{% docs campaign_run_end_date %}\nEnd date of the campaign run\n{% enddocs %}\n\n{% docs campaign_created_date %}\nWhen the campaign was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs campaign_node_id %}\nInternal unique node id for the campaign\n{% enddocs %}\n\n{% docs campaign_node_id_title %}\nCampaign title\n{% enddocs %}\n\n{% docs campaign_run_id_title %}\nTitle of the campaign run\n{% enddocs %}\n\n{% docs campaign_action_type %}\nCampaign action type (eg. Make Something, Share Something)\n{% enddocs %}\n\n{% docs campaign_cause_type %}\nCampaign cause type (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_noun %}\nNoun applicable to the user's action\n{% enddocs %}\n\n{% docs campaign_verb %}\nVerb describing the action the user should take\n{% enddocs %}\n\n{% docs campaign_cta %}\nCampaign's call to action\n{% enddocs %}\n\n{% docs campaign_language %}\n\"Language in which the campaign is available\"\n{% enddocs %}\n\n{% docs agent_id %}\nIf set, the content type of the picture the member is sending us. Exp. image/png.\n{% enddocs %}\n\n{% docs attachment_content_type %}\nIf set, the handle of the Front agent this outbound support message is from.\n{% enddocs %}\n\n{% docs topic %}\nHolds a reference to the **last** campaign topic the member's conversation was in. This is useful to allow members to talk to Gambit and get quick responses (through Rivescript), without Gambit completely forgetting what state the member's interaction with a campaign topic was in.\n{% enddocs %}\n\n{% docs action_serial_id %}\nSerial id for the user's action. Depends on the source of the action. May be the bertly click id, sms message id, etc.\n{% enddocs %}\n\n{% docs channel %}\nChannel for the user's action. Depends on the source of the action. (e.g. web, sms)\n{% enddocs %}\n\n{% docs first_action_month %}\nMonth during which the user took their first action. \n{% enddocs %}\n\n{% docs event_id %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs event_source %}\nApplication source for event (eg. Phoenix, Northstar)\n{% enddocs %}\n\n{% docs event_datetime %}\nWhen the event occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs event_name %}\nName of the event (eg. northstar_submitted_register, https://docs.google.com/spreadsheets/d/1lm-fGrIm85nUTxSojqyCt_Ehmm1zEbViFhKpxcJiz1A/edit#gid=406441516)\n{% enddocs %}\n\n{% docs event_type %}\nType of event (pv = 'Page View', se = 'Structured Event')\n{% enddocs %}\n\n{% docs host %}\nURL host where event occurred (eg. www.dosomething.org or identity.dosomething.org)\n{% enddocs %}\n\n{% docs path %}\nURL path event occurred at (eg. /login or /us/campaigns/huddle-for-heroes)\n{% enddocs %}\n\n{% docs query_parameters %}\nOptional query parameters for the request (eg. query=huddle)\n{% enddocs %}\n\n{% docs se_category %}\nCategory of event (eg. focused_field, authentication) - Custom structured event\n{% enddocs %}\n\n{% docs se_action %}\nAction performed / event name (eg. form_submitted, action_failed) - Custom structured event\n{% enddocs %}\n\n{% docs se_label %}\nThe object of the action (eg. first_name, register, voter_reg_status) - Custom structured event\n{% enddocs %}\n\n{% docs session_id %}\nUnique identifier of the user's session\n{% enddocs %}\n\n{% docs session_counter %}\nHow many sessions a user has started\n{% enddocs %}\n\n{% docs browser_size %}\nWhich type of browser a user is using (eg. Mobile, Desktop)\n{% enddocs %}\n\n{% docs northstar_id %}\nThe Northstar ID of the user who generated the event\n{% enddocs %}\n\n{% docs device_id %}\nID of the device used\n{% enddocs %}\n\n{% docs referrer_host %}\nURL host of the referring site (eg. google.com)\n{% enddocs %}\n\n{% docs referrer_path %}\nURL path from referring site (eg. /10-stats-on-teen-drug-and-alcohol-use/)\n{% enddocs %}\n\n{% docs referrer_source %}\nReferrer source name (eg. Google, Facebook)\n{% enddocs %}\n\n{% docs utm_source %}\nTracks where the traffic is coming from. (eg. scholarship_listing, Facebook)\n{% enddocs %}\n\n{% docs utm_medium %}\nHow the traffic got to the platform (eg. referral, CPC)\n{% enddocs %}\n\n{% docs utm_campaign %}\nTracks which campaign the traffic was generated by. Shows up in Google Analytics as Campaign Name (eg. editorial_newsletter)\n{% enddocs %}\n\n{% docs url %}\nURL of campaign (eg. https://dosome.click/nyn5m7)\n{% enddocs %}\n\n{% docs modal_type %}\nNULL or SURVEY_MODAL\n{% enddocs %}\n\n{% docs landing_datetime %}\nWhen the session started in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs ending_datetime %}\nWhen the session ended in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs session_duration_seconds %}\nSession duration in seconds\n{% enddocs %}\n\n{% docs num_pages_views %}\nNumber of pages viewed in session\n{% enddocs %}\n\n{% docs landing_page %}\nFirst page the user viewed in the session (eg. /us/facts/11-facts-about-bp-oil-spill)\n{% enddocs %}\n\n{% docs exit_page %}\n\"Which page the user ended or exited their session from (eg. /us/campaigns/green-your-getaway)\"\n{% enddocs %}\n\n{% docs days_since_last_session %}\n\"Days since their last session.\"\n{% enddocs %}\n\n{% docs post_type %}\nType of post, (e.g. photo, voter-reg)\n{% enddocs %}\n\n{% docs noun %}\nNoun that corresponds to the item in the call to action that was delivered. (e.g. drawings, tweets)\n{% enddocs %}\n\n{% docs verb %}\nVerb corresponding to the action the user took. (e.g. shared, sent, taken)\n{% enddocs %}\n\n{% docs deleted_at %}\nDate time in UTC when a user deleted their post.\n{% enddocs %}\n\n{% docs _fivetran_deleted %}\nMarks rows that were deleted in the source table\n{% enddocs %}\n\n{% docs _fivetran_synced %}\n(UTC timestamp) keeps track of when each row was last successfully synced\n{% enddocs %}\n\n{% docs reportback %}\nWhether the post is a reportback \n{% enddocs %}\n\n{% docs active %}\nWhether the user is active \n{% enddocs %}\n\n{% docs anonymous %}\nWhether the user is anonymous when making the post \n{% enddocs %}\n\n{% docs callpower_campaign_id %}\nUnique ID corresponding to the Callpower campaign. Callpower allows users to record messages for their representatives.\n{% enddocs %}\n\n{% docs quiz %}\nWhether the post is a quiz \n{% enddocs %}\n\n{% docs action_type %}\nType of action the user took. (e.g. share-something, donate-something)\n{% enddocs %}\n\n{% docs online %}\nWhether the action is a online as opposed to IRL.\n{% enddocs %}\n\n{% docs time_commitment %}\nEstimated time required to do the action (e.g. 3.0+, <0.5)\n{% enddocs %}\n\n{% docs num_signups %}\nQuantity of campaign signups\n{% enddocs %}\n\n{% docs most_recent_signup %}\nTimestamp of the most recent signup in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs num_rbs %}\nQuantity of reportbacks for the user\n{% enddocs %}\n\n{% docs total_quantity %}\nTotal quantity of items in reportbacks\n{% enddocs %}\n\n{% docs most_recent_rb %}\nWhen the most recent reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs first_rb %}\nWhen the first reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs avg_time_betw_rbs %}\nCalculated average time between reportbacks.\n{% enddocs %}\n\n{% docs avg_days_next_action_after_rb %}\nCalculated average days until next action after reportback\n{% enddocs %}\n\n{% docs days_to_next_action_after_last_rb %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs most_recent_mam_action %}\nMost recent monthly active member qualifying action in UTC (eg. 2018-01-01 12:00:00).\n{% enddocs %}\n\n{% docs most_recent_email_open %}\nMost recent email open in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs most_recent_all_actions %}\nMost recent timestamp of any action in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs last_action_is_rb %}\nWhether the last action the user took was a reportback\n{% enddocs %}\n\n{% docs days_since_last_action %}\nDays since the user's last action\n{% enddocs %}\n\n{% docs time_to_first_rb %}\nHow much time after registering until the user's first reportback\n{% enddocs %}\n\n{% docs sms_unsubscribed_at %}\nTimestamp of when user unsubscribed from SMS messaging\n{% enddocs %}\n\n{% docs user_unsubscribed_at %}\nTimestamp of when user unsubscribed from email or sms\n{% enddocs %}\n\n{% docs voter_reg_acquisition %}\nWhether the user was an acquisition through voter registration efforts. \n{% enddocs %}\n\n{% docs last_logged_in %}\nDate time in UTC when user last logged in to Northstar\n{% enddocs %}\n\n{% docs last_accessed %}\nDate time in UTC when user last access the website\n{% enddocs %}\n\n{% docs last_messaged_at %}\nDate time in UTC when user was last sent a message via SMS or email\n{% enddocs %}\n\n{% docs facebook_id %}\nUser's facebook id\n{% enddocs %}\n\n{% docs mobile %}\nUsers's mobile phone number\n{% enddocs %}\n\n{% docs birthdate %}\nUser's birthdate\n{% enddocs %}\n\n{% docs first_name %}\nUser's first name\n{% enddocs %}\n\n{% docs last_name %}\nUser's last name\n{% enddocs %}\n\n{% docs voter_registration_status %}\nUser's registration status. (e.g. registration_complete, confirmed, uncertain) \n{% enddocs %}\n\n{% docs finish_with_state %}\nIf the registrant was eligible to use and passed through to complete their registration with their state\u2019s OVR system, it will be indicated in this field (direct quote from Rock-The-Vote documentation). Yes/No value in field.\n{% enddocs %}\n\n{% docs reportback_volume %}\nThis field returns 1 if non voter-reg action, since campaigns team only counts those a 1 reportback. If voter-reg action, we want to count quantity of post as number of registered voters.\n{% enddocs %}\n\n{% docs address_street_1 %}\nFirst line of user's street address\n{% enddocs %}\n\n{% docs address_street_2 %}\nSecond line of user's street address\n{% enddocs %}\n\n{% docs city %}\nUser's city\n{% enddocs %}\n\n{% docs state %}\nUser's state\n{% enddocs %}\n\n{% docs country %}\nUser's country\n{% enddocs %}\n\n{% docs language %}\nUser's language\n{% enddocs %}\n\n{% docs cio_status %}\nStatus of user from CIO. (e.g. customer_subscribed, customer_unsubscribed)\n{% enddocs %}\n\n{% docs cio_status_timestamp %}\nTimestamp when users's status was updated.\n{% enddocs %}\n\n{% docs sms_status %}\nCurrent SMS status. (e.g. undeliverable, unknown)\n{% enddocs %}\n\n{% docs source_detail %}\nDetails of the origin of the user. (e.g. tell_a_friend, other, opt_in_path/197981)\n{% enddocs %}\n\n{% docs badges %}\nWhether the user has any badges. \n{% enddocs %}\n\n{% docs refer_friends %}\nWhether the user is a part of the refer a friend campaign. \n{% enddocs %}\n\n{% docs subscribed_member %}\nWhether the user is subscribed. \n{% enddocs %}\n\n{% docs last_updated_at %}\nTimestamp when users's was updated.\n{% enddocs %}\n\n{% docs school_id %}\nUnique identifier for the user's school. This info comes from the school finder.\n{% enddocs %}\n\n{% docs newsletter_topic %}\nNewsletter topic. (e.g. community, lifestyle)\n{% enddocs %}\n\n{% docs user_agent %}\nFull user agent string for a user's browser (e.g. \"Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:24.0) Gecko/20100101 Firefox/24.0\")\n{% enddocs %}\n\n{% docs drupal_id %}\nOld Drupal user ID\n{% enddocs %}\n\n{% docs campaigns %}\nCampaigns a user is signed up for.\n{% enddocs %}\n\n{% docs audit %}\nA very useful field with data containing information about changes to a user, e.g. timestamps when the user subscribed and unsubscribed.\n{% enddocs %}\n\n{% docs voting_plan_status %}\nThe indication of the user's plan to vote, e.g. voting, not_voting, cant_vote\n{% enddocs %}\n\n{% docs voting_plan_time_of_day %}\nThe time of day when the user plans to vote, e.g morning, afternoon, evening\n{% enddocs %}\n\n{% docs voting_plan_method_of_transport %}\nHow the user plans to get to their polling place. e.g. walk, drive\n{% enddocs %}\n\n{% docs voting_plan_attending_with %}\nWith Whom the user plans to go voting, e.g. family, friends, alone\n{% enddocs %}\n\n{% docs feature_flags %}\nJSON containing info on features like badges and refer-a-friend.\n{% enddocs %}\n\n{% docs dbt_updated_at %}\nDBT snapshot table data. The updated_at timestamp of the source record when this snapshot row was inserted.\n{% enddocs %}\n\n{% docs dbt_scd_id %}\nDBT snapshot table data. A unique key generated for each snapshotted record.\n{% enddocs %}\n\n{% docs dbt_valid_from %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this snapshot row was first inserted\n{% enddocs %}\n\n{% docs dbt_valid_to %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this row row became invalidated.\n{% enddocs %}\n\n{% docs google_id %}\nUser's Google ID obtained from login.\n{% enddocs %}\n\n{% docs causes %}\nCauses in which a user is interested. e.g. animal welfare, education, mental_health\n{% enddocs %}\n\n{% docs email_subscription_status %}\nEmail subscription status of the user\n{% enddocs %}\n\n{% docs role %}\nUser's role, e.g. user, staff\n{% enddocs %}\n\n{% docs cio_backfilled %}\nWhether this user's data was backfilled from CIO\n{% enddocs %}\n\n{% docs addr_source %}\nWhere the user submitted their address, e.g. sms, GDPR\n{% enddocs %}\n\n{% docs email_subscription_topics %}\nEmail subscription topics correspond to categories in CIO in which the user is interested. e.g. lifestyle, community, scholarship\n{% enddocs %}\n\n{% docs sms_paused %}\nWhether we've paused sending sms messages to the user.\n{% enddocs %}\n\n\n\n\n", "name": "shortened", "unique_id": "ds_dbt.shortened", "block_contents": "Shortened URL"}, "ds_dbt.target_url": {"root_path": "/Users/mrich/projects/quasar/quasar/dbt", "resource_type": "docs", "path": "schema.md", "original_file_path": "models/schema.md", "package_name": "ds_dbt", "file_contents": "\n{% docs click_id %}\nThis is a unique identifier for each click\n{% enddocs %}\n\n{% docs click_time %}\nTimestamp when user clicked.\n{% enddocs %}\n\n{% docs shortened %}\nShortened URL\n{% enddocs %}\n\n{% docs target_url %}\nURL where the user will be directed\n{% enddocs %}\n\n{% docs broadcast_id %}\nID of the broadcast that generated the shortened URL\n{% enddocs %}\n\n{% docs source %}\nSource of the URL (e.g. SMS, web), origin of the post (e.g. phoenix-web, phoenix-ashes, sms), or source where user was acquired. (e.g. sms, phoenix-next)\n{% enddocs %}\n\n{% docs interaction_type %}\nHow the user interacted with the link (e.g. preview, click)\n{% enddocs %}\n\n{% docs id %}\nUnique identifier for the post\n{% enddocs %}\n\n{% docs type %}\nType of post (e.g. photo)\n{% enddocs %}\n\n{% docs action %}\nPost action (e.g. DefendDreamers_Nov9_CongressCalls, GunViolence2018_Feb15_ParklandResponse)\n{% enddocs %}\n\n{% docs status %}\nPost status (e.g. accepted, rejected)\n{% enddocs %}\n\n{% docs quantity %}\nNumerical quantity of items specified in the call to action (e.g. 10, 200)\n{% enddocs %}\n\n{% docs source_bucket %}\nGrouping bucket for origin of the post (e.g. web, sms) \n{% enddocs %}\n\n{% docs created_at %}\nWhen the item was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs updated_at %}\nWhen the item was updated in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs text %}\nText of the post (e.g. \"Zoo animals and a super hero trying to help too!\") \n{% enddocs %}\n\n{% docs signup_id %}\nUnique identifier for the signup \n{% enddocs %}\n\n{% docs post_class %}\nClass of the signup (e.g. \"photo - default\", \"phone-call - DefendDreamers_Jan16_BothBodies\")\n{% enddocs %}\n\n{% docs is_accepted %}\nWhether the post has been accepted to be displayed to the public on the website\n{% enddocs %}\n\n{% docs action_id %}\nInternal identifier of the action \n{% enddocs %}\n\n{% docs location %}\nLocation where the action takes place (e.g. US-NY)\n{% enddocs %}\n\n{% docs postal_code %}\nPostal code where the action takes place\n{% enddocs %}\n\n{% docs is_reportback %}\nWhether the post is a reportback. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs civic_action %}\nWhether the post is a Civic Action. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs scholarship_entry %}\nWhether the post is a Scholarship Entry. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs why_participated %}\nWhy the user participated in this action. Entered by the user.\n{% enddocs %}\n\n{% docs details %}\nDetails about the post. Contains contentfulId and other information (e.g. {\"campaignContentfulId\":\"6ATBgGEQEeJoIcxs1qbwaC\"})\n{% enddocs %}\n\n{% docs email %}\nEmail address of the user.\n{% enddocs %}\n\n{% docs source_details %}\nDetails about the source of the item. This is sometimes represented as a JSON object, and for other tables like Turbovote its represented as a string. (e.g. \"{\"contentful_id\":\"3CTLlXfbwtz1FOMpl31SKV\",\"utm_source\":\"scholarship_listing\",\"utm_medium\":\"referral\",\"utm_campaign\":\"fastweb_2019_08\"}\", newsletter_456)\n{% enddocs %}\n\n{% docs campaign_id %}\nThis is a unique identifier for the campaign\n{% enddocs %}\n\n{% docs campaign_run_id %}\nUnique identifier for the campaign run\n{% enddocs %}\n\n{% docs campaign_name %}\nName of the campaign\n{% enddocs %}\n\n{% docs campaign_cause %}\nCampaign cause (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_run_start_date %}\nStart date of the campaign run\n{% enddocs %}\n\n{% docs campaign_run_end_date %}\nEnd date of the campaign run\n{% enddocs %}\n\n{% docs campaign_created_date %}\nWhen the campaign was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs campaign_node_id %}\nInternal unique node id for the campaign\n{% enddocs %}\n\n{% docs campaign_node_id_title %}\nCampaign title\n{% enddocs %}\n\n{% docs campaign_run_id_title %}\nTitle of the campaign run\n{% enddocs %}\n\n{% docs campaign_action_type %}\nCampaign action type (eg. Make Something, Share Something)\n{% enddocs %}\n\n{% docs campaign_cause_type %}\nCampaign cause type (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_noun %}\nNoun applicable to the user's action\n{% enddocs %}\n\n{% docs campaign_verb %}\nVerb describing the action the user should take\n{% enddocs %}\n\n{% docs campaign_cta %}\nCampaign's call to action\n{% enddocs %}\n\n{% docs campaign_language %}\n\"Language in which the campaign is available\"\n{% enddocs %}\n\n{% docs agent_id %}\nIf set, the content type of the picture the member is sending us. Exp. image/png.\n{% enddocs %}\n\n{% docs attachment_content_type %}\nIf set, the handle of the Front agent this outbound support message is from.\n{% enddocs %}\n\n{% docs topic %}\nHolds a reference to the **last** campaign topic the member's conversation was in. This is useful to allow members to talk to Gambit and get quick responses (through Rivescript), without Gambit completely forgetting what state the member's interaction with a campaign topic was in.\n{% enddocs %}\n\n{% docs action_serial_id %}\nSerial id for the user's action. Depends on the source of the action. May be the bertly click id, sms message id, etc.\n{% enddocs %}\n\n{% docs channel %}\nChannel for the user's action. Depends on the source of the action. (e.g. web, sms)\n{% enddocs %}\n\n{% docs first_action_month %}\nMonth during which the user took their first action. \n{% enddocs %}\n\n{% docs event_id %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs event_source %}\nApplication source for event (eg. Phoenix, Northstar)\n{% enddocs %}\n\n{% docs event_datetime %}\nWhen the event occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs event_name %}\nName of the event (eg. northstar_submitted_register, https://docs.google.com/spreadsheets/d/1lm-fGrIm85nUTxSojqyCt_Ehmm1zEbViFhKpxcJiz1A/edit#gid=406441516)\n{% enddocs %}\n\n{% docs event_type %}\nType of event (pv = 'Page View', se = 'Structured Event')\n{% enddocs %}\n\n{% docs host %}\nURL host where event occurred (eg. www.dosomething.org or identity.dosomething.org)\n{% enddocs %}\n\n{% docs path %}\nURL path event occurred at (eg. /login or /us/campaigns/huddle-for-heroes)\n{% enddocs %}\n\n{% docs query_parameters %}\nOptional query parameters for the request (eg. query=huddle)\n{% enddocs %}\n\n{% docs se_category %}\nCategory of event (eg. focused_field, authentication) - Custom structured event\n{% enddocs %}\n\n{% docs se_action %}\nAction performed / event name (eg. form_submitted, action_failed) - Custom structured event\n{% enddocs %}\n\n{% docs se_label %}\nThe object of the action (eg. first_name, register, voter_reg_status) - Custom structured event\n{% enddocs %}\n\n{% docs session_id %}\nUnique identifier of the user's session\n{% enddocs %}\n\n{% docs session_counter %}\nHow many sessions a user has started\n{% enddocs %}\n\n{% docs browser_size %}\nWhich type of browser a user is using (eg. Mobile, Desktop)\n{% enddocs %}\n\n{% docs northstar_id %}\nThe Northstar ID of the user who generated the event\n{% enddocs %}\n\n{% docs device_id %}\nID of the device used\n{% enddocs %}\n\n{% docs referrer_host %}\nURL host of the referring site (eg. google.com)\n{% enddocs %}\n\n{% docs referrer_path %}\nURL path from referring site (eg. /10-stats-on-teen-drug-and-alcohol-use/)\n{% enddocs %}\n\n{% docs referrer_source %}\nReferrer source name (eg. Google, Facebook)\n{% enddocs %}\n\n{% docs utm_source %}\nTracks where the traffic is coming from. (eg. scholarship_listing, Facebook)\n{% enddocs %}\n\n{% docs utm_medium %}\nHow the traffic got to the platform (eg. referral, CPC)\n{% enddocs %}\n\n{% docs utm_campaign %}\nTracks which campaign the traffic was generated by. Shows up in Google Analytics as Campaign Name (eg. editorial_newsletter)\n{% enddocs %}\n\n{% docs url %}\nURL of campaign (eg. https://dosome.click/nyn5m7)\n{% enddocs %}\n\n{% docs modal_type %}\nNULL or SURVEY_MODAL\n{% enddocs %}\n\n{% docs landing_datetime %}\nWhen the session started in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs ending_datetime %}\nWhen the session ended in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs session_duration_seconds %}\nSession duration in seconds\n{% enddocs %}\n\n{% docs num_pages_views %}\nNumber of pages viewed in session\n{% enddocs %}\n\n{% docs landing_page %}\nFirst page the user viewed in the session (eg. /us/facts/11-facts-about-bp-oil-spill)\n{% enddocs %}\n\n{% docs exit_page %}\n\"Which page the user ended or exited their session from (eg. /us/campaigns/green-your-getaway)\"\n{% enddocs %}\n\n{% docs days_since_last_session %}\n\"Days since their last session.\"\n{% enddocs %}\n\n{% docs post_type %}\nType of post, (e.g. photo, voter-reg)\n{% enddocs %}\n\n{% docs noun %}\nNoun that corresponds to the item in the call to action that was delivered. (e.g. drawings, tweets)\n{% enddocs %}\n\n{% docs verb %}\nVerb corresponding to the action the user took. (e.g. shared, sent, taken)\n{% enddocs %}\n\n{% docs deleted_at %}\nDate time in UTC when a user deleted their post.\n{% enddocs %}\n\n{% docs _fivetran_deleted %}\nMarks rows that were deleted in the source table\n{% enddocs %}\n\n{% docs _fivetran_synced %}\n(UTC timestamp) keeps track of when each row was last successfully synced\n{% enddocs %}\n\n{% docs reportback %}\nWhether the post is a reportback \n{% enddocs %}\n\n{% docs active %}\nWhether the user is active \n{% enddocs %}\n\n{% docs anonymous %}\nWhether the user is anonymous when making the post \n{% enddocs %}\n\n{% docs callpower_campaign_id %}\nUnique ID corresponding to the Callpower campaign. Callpower allows users to record messages for their representatives.\n{% enddocs %}\n\n{% docs quiz %}\nWhether the post is a quiz \n{% enddocs %}\n\n{% docs action_type %}\nType of action the user took. (e.g. share-something, donate-something)\n{% enddocs %}\n\n{% docs online %}\nWhether the action is a online as opposed to IRL.\n{% enddocs %}\n\n{% docs time_commitment %}\nEstimated time required to do the action (e.g. 3.0+, <0.5)\n{% enddocs %}\n\n{% docs num_signups %}\nQuantity of campaign signups\n{% enddocs %}\n\n{% docs most_recent_signup %}\nTimestamp of the most recent signup in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs num_rbs %}\nQuantity of reportbacks for the user\n{% enddocs %}\n\n{% docs total_quantity %}\nTotal quantity of items in reportbacks\n{% enddocs %}\n\n{% docs most_recent_rb %}\nWhen the most recent reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs first_rb %}\nWhen the first reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs avg_time_betw_rbs %}\nCalculated average time between reportbacks.\n{% enddocs %}\n\n{% docs avg_days_next_action_after_rb %}\nCalculated average days until next action after reportback\n{% enddocs %}\n\n{% docs days_to_next_action_after_last_rb %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs most_recent_mam_action %}\nMost recent monthly active member qualifying action in UTC (eg. 2018-01-01 12:00:00).\n{% enddocs %}\n\n{% docs most_recent_email_open %}\nMost recent email open in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs most_recent_all_actions %}\nMost recent timestamp of any action in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs last_action_is_rb %}\nWhether the last action the user took was a reportback\n{% enddocs %}\n\n{% docs days_since_last_action %}\nDays since the user's last action\n{% enddocs %}\n\n{% docs time_to_first_rb %}\nHow much time after registering until the user's first reportback\n{% enddocs %}\n\n{% docs sms_unsubscribed_at %}\nTimestamp of when user unsubscribed from SMS messaging\n{% enddocs %}\n\n{% docs user_unsubscribed_at %}\nTimestamp of when user unsubscribed from email or sms\n{% enddocs %}\n\n{% docs voter_reg_acquisition %}\nWhether the user was an acquisition through voter registration efforts. \n{% enddocs %}\n\n{% docs last_logged_in %}\nDate time in UTC when user last logged in to Northstar\n{% enddocs %}\n\n{% docs last_accessed %}\nDate time in UTC when user last access the website\n{% enddocs %}\n\n{% docs last_messaged_at %}\nDate time in UTC when user was last sent a message via SMS or email\n{% enddocs %}\n\n{% docs facebook_id %}\nUser's facebook id\n{% enddocs %}\n\n{% docs mobile %}\nUsers's mobile phone number\n{% enddocs %}\n\n{% docs birthdate %}\nUser's birthdate\n{% enddocs %}\n\n{% docs first_name %}\nUser's first name\n{% enddocs %}\n\n{% docs last_name %}\nUser's last name\n{% enddocs %}\n\n{% docs voter_registration_status %}\nUser's registration status. (e.g. registration_complete, confirmed, uncertain) \n{% enddocs %}\n\n{% docs finish_with_state %}\nIf the registrant was eligible to use and passed through to complete their registration with their state\u2019s OVR system, it will be indicated in this field (direct quote from Rock-The-Vote documentation). Yes/No value in field.\n{% enddocs %}\n\n{% docs reportback_volume %}\nThis field returns 1 if non voter-reg action, since campaigns team only counts those a 1 reportback. If voter-reg action, we want to count quantity of post as number of registered voters.\n{% enddocs %}\n\n{% docs address_street_1 %}\nFirst line of user's street address\n{% enddocs %}\n\n{% docs address_street_2 %}\nSecond line of user's street address\n{% enddocs %}\n\n{% docs city %}\nUser's city\n{% enddocs %}\n\n{% docs state %}\nUser's state\n{% enddocs %}\n\n{% docs country %}\nUser's country\n{% enddocs %}\n\n{% docs language %}\nUser's language\n{% enddocs %}\n\n{% docs cio_status %}\nStatus of user from CIO. (e.g. customer_subscribed, customer_unsubscribed)\n{% enddocs %}\n\n{% docs cio_status_timestamp %}\nTimestamp when users's status was updated.\n{% enddocs %}\n\n{% docs sms_status %}\nCurrent SMS status. (e.g. undeliverable, unknown)\n{% enddocs %}\n\n{% docs source_detail %}\nDetails of the origin of the user. (e.g. tell_a_friend, other, opt_in_path/197981)\n{% enddocs %}\n\n{% docs badges %}\nWhether the user has any badges. \n{% enddocs %}\n\n{% docs refer_friends %}\nWhether the user is a part of the refer a friend campaign. \n{% enddocs %}\n\n{% docs subscribed_member %}\nWhether the user is subscribed. \n{% enddocs %}\n\n{% docs last_updated_at %}\nTimestamp when users's was updated.\n{% enddocs %}\n\n{% docs school_id %}\nUnique identifier for the user's school. This info comes from the school finder.\n{% enddocs %}\n\n{% docs newsletter_topic %}\nNewsletter topic. (e.g. community, lifestyle)\n{% enddocs %}\n\n{% docs user_agent %}\nFull user agent string for a user's browser (e.g. \"Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:24.0) Gecko/20100101 Firefox/24.0\")\n{% enddocs %}\n\n{% docs drupal_id %}\nOld Drupal user ID\n{% enddocs %}\n\n{% docs campaigns %}\nCampaigns a user is signed up for.\n{% enddocs %}\n\n{% docs audit %}\nA very useful field with data containing information about changes to a user, e.g. timestamps when the user subscribed and unsubscribed.\n{% enddocs %}\n\n{% docs voting_plan_status %}\nThe indication of the user's plan to vote, e.g. voting, not_voting, cant_vote\n{% enddocs %}\n\n{% docs voting_plan_time_of_day %}\nThe time of day when the user plans to vote, e.g morning, afternoon, evening\n{% enddocs %}\n\n{% docs voting_plan_method_of_transport %}\nHow the user plans to get to their polling place. e.g. walk, drive\n{% enddocs %}\n\n{% docs voting_plan_attending_with %}\nWith Whom the user plans to go voting, e.g. family, friends, alone\n{% enddocs %}\n\n{% docs feature_flags %}\nJSON containing info on features like badges and refer-a-friend.\n{% enddocs %}\n\n{% docs dbt_updated_at %}\nDBT snapshot table data. The updated_at timestamp of the source record when this snapshot row was inserted.\n{% enddocs %}\n\n{% docs dbt_scd_id %}\nDBT snapshot table data. A unique key generated for each snapshotted record.\n{% enddocs %}\n\n{% docs dbt_valid_from %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this snapshot row was first inserted\n{% enddocs %}\n\n{% docs dbt_valid_to %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this row row became invalidated.\n{% enddocs %}\n\n{% docs google_id %}\nUser's Google ID obtained from login.\n{% enddocs %}\n\n{% docs causes %}\nCauses in which a user is interested. e.g. animal welfare, education, mental_health\n{% enddocs %}\n\n{% docs email_subscription_status %}\nEmail subscription status of the user\n{% enddocs %}\n\n{% docs role %}\nUser's role, e.g. user, staff\n{% enddocs %}\n\n{% docs cio_backfilled %}\nWhether this user's data was backfilled from CIO\n{% enddocs %}\n\n{% docs addr_source %}\nWhere the user submitted their address, e.g. sms, GDPR\n{% enddocs %}\n\n{% docs email_subscription_topics %}\nEmail subscription topics correspond to categories in CIO in which the user is interested. e.g. lifestyle, community, scholarship\n{% enddocs %}\n\n{% docs sms_paused %}\nWhether we've paused sending sms messages to the user.\n{% enddocs %}\n\n\n\n\n", "name": "target_url", "unique_id": "ds_dbt.target_url", "block_contents": "URL where the user will be directed"}, "ds_dbt.broadcast_id": {"root_path": "/Users/mrich/projects/quasar/quasar/dbt", "resource_type": "docs", "path": "schema.md", "original_file_path": "models/schema.md", "package_name": "ds_dbt", "file_contents": "\n{% docs click_id %}\nThis is a unique identifier for each click\n{% enddocs %}\n\n{% docs click_time %}\nTimestamp when user clicked.\n{% enddocs %}\n\n{% docs shortened %}\nShortened URL\n{% enddocs %}\n\n{% docs target_url %}\nURL where the user will be directed\n{% enddocs %}\n\n{% docs broadcast_id %}\nID of the broadcast that generated the shortened URL\n{% enddocs %}\n\n{% docs source %}\nSource of the URL (e.g. SMS, web), origin of the post (e.g. phoenix-web, phoenix-ashes, sms), or source where user was acquired. (e.g. sms, phoenix-next)\n{% enddocs %}\n\n{% docs interaction_type %}\nHow the user interacted with the link (e.g. preview, click)\n{% enddocs %}\n\n{% docs id %}\nUnique identifier for the post\n{% enddocs %}\n\n{% docs type %}\nType of post (e.g. photo)\n{% enddocs %}\n\n{% docs action %}\nPost action (e.g. DefendDreamers_Nov9_CongressCalls, GunViolence2018_Feb15_ParklandResponse)\n{% enddocs %}\n\n{% docs status %}\nPost status (e.g. accepted, rejected)\n{% enddocs %}\n\n{% docs quantity %}\nNumerical quantity of items specified in the call to action (e.g. 10, 200)\n{% enddocs %}\n\n{% docs source_bucket %}\nGrouping bucket for origin of the post (e.g. web, sms) \n{% enddocs %}\n\n{% docs created_at %}\nWhen the item was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs updated_at %}\nWhen the item was updated in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs text %}\nText of the post (e.g. \"Zoo animals and a super hero trying to help too!\") \n{% enddocs %}\n\n{% docs signup_id %}\nUnique identifier for the signup \n{% enddocs %}\n\n{% docs post_class %}\nClass of the signup (e.g. \"photo - default\", \"phone-call - DefendDreamers_Jan16_BothBodies\")\n{% enddocs %}\n\n{% docs is_accepted %}\nWhether the post has been accepted to be displayed to the public on the website\n{% enddocs %}\n\n{% docs action_id %}\nInternal identifier of the action \n{% enddocs %}\n\n{% docs location %}\nLocation where the action takes place (e.g. US-NY)\n{% enddocs %}\n\n{% docs postal_code %}\nPostal code where the action takes place\n{% enddocs %}\n\n{% docs is_reportback %}\nWhether the post is a reportback. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs civic_action %}\nWhether the post is a Civic Action. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs scholarship_entry %}\nWhether the post is a Scholarship Entry. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs why_participated %}\nWhy the user participated in this action. Entered by the user.\n{% enddocs %}\n\n{% docs details %}\nDetails about the post. Contains contentfulId and other information (e.g. {\"campaignContentfulId\":\"6ATBgGEQEeJoIcxs1qbwaC\"})\n{% enddocs %}\n\n{% docs email %}\nEmail address of the user.\n{% enddocs %}\n\n{% docs source_details %}\nDetails about the source of the item. This is sometimes represented as a JSON object, and for other tables like Turbovote its represented as a string. (e.g. \"{\"contentful_id\":\"3CTLlXfbwtz1FOMpl31SKV\",\"utm_source\":\"scholarship_listing\",\"utm_medium\":\"referral\",\"utm_campaign\":\"fastweb_2019_08\"}\", newsletter_456)\n{% enddocs %}\n\n{% docs campaign_id %}\nThis is a unique identifier for the campaign\n{% enddocs %}\n\n{% docs campaign_run_id %}\nUnique identifier for the campaign run\n{% enddocs %}\n\n{% docs campaign_name %}\nName of the campaign\n{% enddocs %}\n\n{% docs campaign_cause %}\nCampaign cause (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_run_start_date %}\nStart date of the campaign run\n{% enddocs %}\n\n{% docs campaign_run_end_date %}\nEnd date of the campaign run\n{% enddocs %}\n\n{% docs campaign_created_date %}\nWhen the campaign was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs campaign_node_id %}\nInternal unique node id for the campaign\n{% enddocs %}\n\n{% docs campaign_node_id_title %}\nCampaign title\n{% enddocs %}\n\n{% docs campaign_run_id_title %}\nTitle of the campaign run\n{% enddocs %}\n\n{% docs campaign_action_type %}\nCampaign action type (eg. Make Something, Share Something)\n{% enddocs %}\n\n{% docs campaign_cause_type %}\nCampaign cause type (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_noun %}\nNoun applicable to the user's action\n{% enddocs %}\n\n{% docs campaign_verb %}\nVerb describing the action the user should take\n{% enddocs %}\n\n{% docs campaign_cta %}\nCampaign's call to action\n{% enddocs %}\n\n{% docs campaign_language %}\n\"Language in which the campaign is available\"\n{% enddocs %}\n\n{% docs agent_id %}\nIf set, the content type of the picture the member is sending us. Exp. image/png.\n{% enddocs %}\n\n{% docs attachment_content_type %}\nIf set, the handle of the Front agent this outbound support message is from.\n{% enddocs %}\n\n{% docs topic %}\nHolds a reference to the **last** campaign topic the member's conversation was in. This is useful to allow members to talk to Gambit and get quick responses (through Rivescript), without Gambit completely forgetting what state the member's interaction with a campaign topic was in.\n{% enddocs %}\n\n{% docs action_serial_id %}\nSerial id for the user's action. Depends on the source of the action. May be the bertly click id, sms message id, etc.\n{% enddocs %}\n\n{% docs channel %}\nChannel for the user's action. Depends on the source of the action. (e.g. web, sms)\n{% enddocs %}\n\n{% docs first_action_month %}\nMonth during which the user took their first action. \n{% enddocs %}\n\n{% docs event_id %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs event_source %}\nApplication source for event (eg. Phoenix, Northstar)\n{% enddocs %}\n\n{% docs event_datetime %}\nWhen the event occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs event_name %}\nName of the event (eg. northstar_submitted_register, https://docs.google.com/spreadsheets/d/1lm-fGrIm85nUTxSojqyCt_Ehmm1zEbViFhKpxcJiz1A/edit#gid=406441516)\n{% enddocs %}\n\n{% docs event_type %}\nType of event (pv = 'Page View', se = 'Structured Event')\n{% enddocs %}\n\n{% docs host %}\nURL host where event occurred (eg. www.dosomething.org or identity.dosomething.org)\n{% enddocs %}\n\n{% docs path %}\nURL path event occurred at (eg. /login or /us/campaigns/huddle-for-heroes)\n{% enddocs %}\n\n{% docs query_parameters %}\nOptional query parameters for the request (eg. query=huddle)\n{% enddocs %}\n\n{% docs se_category %}\nCategory of event (eg. focused_field, authentication) - Custom structured event\n{% enddocs %}\n\n{% docs se_action %}\nAction performed / event name (eg. form_submitted, action_failed) - Custom structured event\n{% enddocs %}\n\n{% docs se_label %}\nThe object of the action (eg. first_name, register, voter_reg_status) - Custom structured event\n{% enddocs %}\n\n{% docs session_id %}\nUnique identifier of the user's session\n{% enddocs %}\n\n{% docs session_counter %}\nHow many sessions a user has started\n{% enddocs %}\n\n{% docs browser_size %}\nWhich type of browser a user is using (eg. Mobile, Desktop)\n{% enddocs %}\n\n{% docs northstar_id %}\nThe Northstar ID of the user who generated the event\n{% enddocs %}\n\n{% docs device_id %}\nID of the device used\n{% enddocs %}\n\n{% docs referrer_host %}\nURL host of the referring site (eg. google.com)\n{% enddocs %}\n\n{% docs referrer_path %}\nURL path from referring site (eg. /10-stats-on-teen-drug-and-alcohol-use/)\n{% enddocs %}\n\n{% docs referrer_source %}\nReferrer source name (eg. Google, Facebook)\n{% enddocs %}\n\n{% docs utm_source %}\nTracks where the traffic is coming from. (eg. scholarship_listing, Facebook)\n{% enddocs %}\n\n{% docs utm_medium %}\nHow the traffic got to the platform (eg. referral, CPC)\n{% enddocs %}\n\n{% docs utm_campaign %}\nTracks which campaign the traffic was generated by. Shows up in Google Analytics as Campaign Name (eg. editorial_newsletter)\n{% enddocs %}\n\n{% docs url %}\nURL of campaign (eg. https://dosome.click/nyn5m7)\n{% enddocs %}\n\n{% docs modal_type %}\nNULL or SURVEY_MODAL\n{% enddocs %}\n\n{% docs landing_datetime %}\nWhen the session started in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs ending_datetime %}\nWhen the session ended in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs session_duration_seconds %}\nSession duration in seconds\n{% enddocs %}\n\n{% docs num_pages_views %}\nNumber of pages viewed in session\n{% enddocs %}\n\n{% docs landing_page %}\nFirst page the user viewed in the session (eg. /us/facts/11-facts-about-bp-oil-spill)\n{% enddocs %}\n\n{% docs exit_page %}\n\"Which page the user ended or exited their session from (eg. /us/campaigns/green-your-getaway)\"\n{% enddocs %}\n\n{% docs days_since_last_session %}\n\"Days since their last session.\"\n{% enddocs %}\n\n{% docs post_type %}\nType of post, (e.g. photo, voter-reg)\n{% enddocs %}\n\n{% docs noun %}\nNoun that corresponds to the item in the call to action that was delivered. (e.g. drawings, tweets)\n{% enddocs %}\n\n{% docs verb %}\nVerb corresponding to the action the user took. (e.g. shared, sent, taken)\n{% enddocs %}\n\n{% docs deleted_at %}\nDate time in UTC when a user deleted their post.\n{% enddocs %}\n\n{% docs _fivetran_deleted %}\nMarks rows that were deleted in the source table\n{% enddocs %}\n\n{% docs _fivetran_synced %}\n(UTC timestamp) keeps track of when each row was last successfully synced\n{% enddocs %}\n\n{% docs reportback %}\nWhether the post is a reportback \n{% enddocs %}\n\n{% docs active %}\nWhether the user is active \n{% enddocs %}\n\n{% docs anonymous %}\nWhether the user is anonymous when making the post \n{% enddocs %}\n\n{% docs callpower_campaign_id %}\nUnique ID corresponding to the Callpower campaign. Callpower allows users to record messages for their representatives.\n{% enddocs %}\n\n{% docs quiz %}\nWhether the post is a quiz \n{% enddocs %}\n\n{% docs action_type %}\nType of action the user took. (e.g. share-something, donate-something)\n{% enddocs %}\n\n{% docs online %}\nWhether the action is a online as opposed to IRL.\n{% enddocs %}\n\n{% docs time_commitment %}\nEstimated time required to do the action (e.g. 3.0+, <0.5)\n{% enddocs %}\n\n{% docs num_signups %}\nQuantity of campaign signups\n{% enddocs %}\n\n{% docs most_recent_signup %}\nTimestamp of the most recent signup in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs num_rbs %}\nQuantity of reportbacks for the user\n{% enddocs %}\n\n{% docs total_quantity %}\nTotal quantity of items in reportbacks\n{% enddocs %}\n\n{% docs most_recent_rb %}\nWhen the most recent reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs first_rb %}\nWhen the first reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs avg_time_betw_rbs %}\nCalculated average time between reportbacks.\n{% enddocs %}\n\n{% docs avg_days_next_action_after_rb %}\nCalculated average days until next action after reportback\n{% enddocs %}\n\n{% docs days_to_next_action_after_last_rb %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs most_recent_mam_action %}\nMost recent monthly active member qualifying action in UTC (eg. 2018-01-01 12:00:00).\n{% enddocs %}\n\n{% docs most_recent_email_open %}\nMost recent email open in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs most_recent_all_actions %}\nMost recent timestamp of any action in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs last_action_is_rb %}\nWhether the last action the user took was a reportback\n{% enddocs %}\n\n{% docs days_since_last_action %}\nDays since the user's last action\n{% enddocs %}\n\n{% docs time_to_first_rb %}\nHow much time after registering until the user's first reportback\n{% enddocs %}\n\n{% docs sms_unsubscribed_at %}\nTimestamp of when user unsubscribed from SMS messaging\n{% enddocs %}\n\n{% docs user_unsubscribed_at %}\nTimestamp of when user unsubscribed from email or sms\n{% enddocs %}\n\n{% docs voter_reg_acquisition %}\nWhether the user was an acquisition through voter registration efforts. \n{% enddocs %}\n\n{% docs last_logged_in %}\nDate time in UTC when user last logged in to Northstar\n{% enddocs %}\n\n{% docs last_accessed %}\nDate time in UTC when user last access the website\n{% enddocs %}\n\n{% docs last_messaged_at %}\nDate time in UTC when user was last sent a message via SMS or email\n{% enddocs %}\n\n{% docs facebook_id %}\nUser's facebook id\n{% enddocs %}\n\n{% docs mobile %}\nUsers's mobile phone number\n{% enddocs %}\n\n{% docs birthdate %}\nUser's birthdate\n{% enddocs %}\n\n{% docs first_name %}\nUser's first name\n{% enddocs %}\n\n{% docs last_name %}\nUser's last name\n{% enddocs %}\n\n{% docs voter_registration_status %}\nUser's registration status. (e.g. registration_complete, confirmed, uncertain) \n{% enddocs %}\n\n{% docs finish_with_state %}\nIf the registrant was eligible to use and passed through to complete their registration with their state\u2019s OVR system, it will be indicated in this field (direct quote from Rock-The-Vote documentation). Yes/No value in field.\n{% enddocs %}\n\n{% docs reportback_volume %}\nThis field returns 1 if non voter-reg action, since campaigns team only counts those a 1 reportback. If voter-reg action, we want to count quantity of post as number of registered voters.\n{% enddocs %}\n\n{% docs address_street_1 %}\nFirst line of user's street address\n{% enddocs %}\n\n{% docs address_street_2 %}\nSecond line of user's street address\n{% enddocs %}\n\n{% docs city %}\nUser's city\n{% enddocs %}\n\n{% docs state %}\nUser's state\n{% enddocs %}\n\n{% docs country %}\nUser's country\n{% enddocs %}\n\n{% docs language %}\nUser's language\n{% enddocs %}\n\n{% docs cio_status %}\nStatus of user from CIO. (e.g. customer_subscribed, customer_unsubscribed)\n{% enddocs %}\n\n{% docs cio_status_timestamp %}\nTimestamp when users's status was updated.\n{% enddocs %}\n\n{% docs sms_status %}\nCurrent SMS status. (e.g. undeliverable, unknown)\n{% enddocs %}\n\n{% docs source_detail %}\nDetails of the origin of the user. (e.g. tell_a_friend, other, opt_in_path/197981)\n{% enddocs %}\n\n{% docs badges %}\nWhether the user has any badges. \n{% enddocs %}\n\n{% docs refer_friends %}\nWhether the user is a part of the refer a friend campaign. \n{% enddocs %}\n\n{% docs subscribed_member %}\nWhether the user is subscribed. \n{% enddocs %}\n\n{% docs last_updated_at %}\nTimestamp when users's was updated.\n{% enddocs %}\n\n{% docs school_id %}\nUnique identifier for the user's school. This info comes from the school finder.\n{% enddocs %}\n\n{% docs newsletter_topic %}\nNewsletter topic. (e.g. community, lifestyle)\n{% enddocs %}\n\n{% docs user_agent %}\nFull user agent string for a user's browser (e.g. \"Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:24.0) Gecko/20100101 Firefox/24.0\")\n{% enddocs %}\n\n{% docs drupal_id %}\nOld Drupal user ID\n{% enddocs %}\n\n{% docs campaigns %}\nCampaigns a user is signed up for.\n{% enddocs %}\n\n{% docs audit %}\nA very useful field with data containing information about changes to a user, e.g. timestamps when the user subscribed and unsubscribed.\n{% enddocs %}\n\n{% docs voting_plan_status %}\nThe indication of the user's plan to vote, e.g. voting, not_voting, cant_vote\n{% enddocs %}\n\n{% docs voting_plan_time_of_day %}\nThe time of day when the user plans to vote, e.g morning, afternoon, evening\n{% enddocs %}\n\n{% docs voting_plan_method_of_transport %}\nHow the user plans to get to their polling place. e.g. walk, drive\n{% enddocs %}\n\n{% docs voting_plan_attending_with %}\nWith Whom the user plans to go voting, e.g. family, friends, alone\n{% enddocs %}\n\n{% docs feature_flags %}\nJSON containing info on features like badges and refer-a-friend.\n{% enddocs %}\n\n{% docs dbt_updated_at %}\nDBT snapshot table data. The updated_at timestamp of the source record when this snapshot row was inserted.\n{% enddocs %}\n\n{% docs dbt_scd_id %}\nDBT snapshot table data. A unique key generated for each snapshotted record.\n{% enddocs %}\n\n{% docs dbt_valid_from %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this snapshot row was first inserted\n{% enddocs %}\n\n{% docs dbt_valid_to %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this row row became invalidated.\n{% enddocs %}\n\n{% docs google_id %}\nUser's Google ID obtained from login.\n{% enddocs %}\n\n{% docs causes %}\nCauses in which a user is interested. e.g. animal welfare, education, mental_health\n{% enddocs %}\n\n{% docs email_subscription_status %}\nEmail subscription status of the user\n{% enddocs %}\n\n{% docs role %}\nUser's role, e.g. user, staff\n{% enddocs %}\n\n{% docs cio_backfilled %}\nWhether this user's data was backfilled from CIO\n{% enddocs %}\n\n{% docs addr_source %}\nWhere the user submitted their address, e.g. sms, GDPR\n{% enddocs %}\n\n{% docs email_subscription_topics %}\nEmail subscription topics correspond to categories in CIO in which the user is interested. e.g. lifestyle, community, scholarship\n{% enddocs %}\n\n{% docs sms_paused %}\nWhether we've paused sending sms messages to the user.\n{% enddocs %}\n\n\n\n\n", "name": "broadcast_id", "unique_id": "ds_dbt.broadcast_id", "block_contents": "ID of the broadcast that generated the shortened URL"}, "ds_dbt.source": {"root_path": "/Users/mrich/projects/quasar/quasar/dbt", "resource_type": "docs", "path": "schema.md", "original_file_path": "models/schema.md", "package_name": "ds_dbt", "file_contents": "\n{% docs click_id %}\nThis is a unique identifier for each click\n{% enddocs %}\n\n{% docs click_time %}\nTimestamp when user clicked.\n{% enddocs %}\n\n{% docs shortened %}\nShortened URL\n{% enddocs %}\n\n{% docs target_url %}\nURL where the user will be directed\n{% enddocs %}\n\n{% docs broadcast_id %}\nID of the broadcast that generated the shortened URL\n{% enddocs %}\n\n{% docs source %}\nSource of the URL (e.g. SMS, web), origin of the post (e.g. phoenix-web, phoenix-ashes, sms), or source where user was acquired. (e.g. sms, phoenix-next)\n{% enddocs %}\n\n{% docs interaction_type %}\nHow the user interacted with the link (e.g. preview, click)\n{% enddocs %}\n\n{% docs id %}\nUnique identifier for the post\n{% enddocs %}\n\n{% docs type %}\nType of post (e.g. photo)\n{% enddocs %}\n\n{% docs action %}\nPost action (e.g. DefendDreamers_Nov9_CongressCalls, GunViolence2018_Feb15_ParklandResponse)\n{% enddocs %}\n\n{% docs status %}\nPost status (e.g. accepted, rejected)\n{% enddocs %}\n\n{% docs quantity %}\nNumerical quantity of items specified in the call to action (e.g. 10, 200)\n{% enddocs %}\n\n{% docs source_bucket %}\nGrouping bucket for origin of the post (e.g. web, sms) \n{% enddocs %}\n\n{% docs created_at %}\nWhen the item was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs updated_at %}\nWhen the item was updated in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs text %}\nText of the post (e.g. \"Zoo animals and a super hero trying to help too!\") \n{% enddocs %}\n\n{% docs signup_id %}\nUnique identifier for the signup \n{% enddocs %}\n\n{% docs post_class %}\nClass of the signup (e.g. \"photo - default\", \"phone-call - DefendDreamers_Jan16_BothBodies\")\n{% enddocs %}\n\n{% docs is_accepted %}\nWhether the post has been accepted to be displayed to the public on the website\n{% enddocs %}\n\n{% docs action_id %}\nInternal identifier of the action \n{% enddocs %}\n\n{% docs location %}\nLocation where the action takes place (e.g. US-NY)\n{% enddocs %}\n\n{% docs postal_code %}\nPostal code where the action takes place\n{% enddocs %}\n\n{% docs is_reportback %}\nWhether the post is a reportback. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs civic_action %}\nWhether the post is a Civic Action. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs scholarship_entry %}\nWhether the post is a Scholarship Entry. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs why_participated %}\nWhy the user participated in this action. Entered by the user.\n{% enddocs %}\n\n{% docs details %}\nDetails about the post. Contains contentfulId and other information (e.g. {\"campaignContentfulId\":\"6ATBgGEQEeJoIcxs1qbwaC\"})\n{% enddocs %}\n\n{% docs email %}\nEmail address of the user.\n{% enddocs %}\n\n{% docs source_details %}\nDetails about the source of the item. This is sometimes represented as a JSON object, and for other tables like Turbovote its represented as a string. (e.g. \"{\"contentful_id\":\"3CTLlXfbwtz1FOMpl31SKV\",\"utm_source\":\"scholarship_listing\",\"utm_medium\":\"referral\",\"utm_campaign\":\"fastweb_2019_08\"}\", newsletter_456)\n{% enddocs %}\n\n{% docs campaign_id %}\nThis is a unique identifier for the campaign\n{% enddocs %}\n\n{% docs campaign_run_id %}\nUnique identifier for the campaign run\n{% enddocs %}\n\n{% docs campaign_name %}\nName of the campaign\n{% enddocs %}\n\n{% docs campaign_cause %}\nCampaign cause (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_run_start_date %}\nStart date of the campaign run\n{% enddocs %}\n\n{% docs campaign_run_end_date %}\nEnd date of the campaign run\n{% enddocs %}\n\n{% docs campaign_created_date %}\nWhen the campaign was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs campaign_node_id %}\nInternal unique node id for the campaign\n{% enddocs %}\n\n{% docs campaign_node_id_title %}\nCampaign title\n{% enddocs %}\n\n{% docs campaign_run_id_title %}\nTitle of the campaign run\n{% enddocs %}\n\n{% docs campaign_action_type %}\nCampaign action type (eg. Make Something, Share Something)\n{% enddocs %}\n\n{% docs campaign_cause_type %}\nCampaign cause type (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_noun %}\nNoun applicable to the user's action\n{% enddocs %}\n\n{% docs campaign_verb %}\nVerb describing the action the user should take\n{% enddocs %}\n\n{% docs campaign_cta %}\nCampaign's call to action\n{% enddocs %}\n\n{% docs campaign_language %}\n\"Language in which the campaign is available\"\n{% enddocs %}\n\n{% docs agent_id %}\nIf set, the content type of the picture the member is sending us. Exp. image/png.\n{% enddocs %}\n\n{% docs attachment_content_type %}\nIf set, the handle of the Front agent this outbound support message is from.\n{% enddocs %}\n\n{% docs topic %}\nHolds a reference to the **last** campaign topic the member's conversation was in. This is useful to allow members to talk to Gambit and get quick responses (through Rivescript), without Gambit completely forgetting what state the member's interaction with a campaign topic was in.\n{% enddocs %}\n\n{% docs action_serial_id %}\nSerial id for the user's action. Depends on the source of the action. May be the bertly click id, sms message id, etc.\n{% enddocs %}\n\n{% docs channel %}\nChannel for the user's action. Depends on the source of the action. (e.g. web, sms)\n{% enddocs %}\n\n{% docs first_action_month %}\nMonth during which the user took their first action. \n{% enddocs %}\n\n{% docs event_id %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs event_source %}\nApplication source for event (eg. Phoenix, Northstar)\n{% enddocs %}\n\n{% docs event_datetime %}\nWhen the event occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs event_name %}\nName of the event (eg. northstar_submitted_register, https://docs.google.com/spreadsheets/d/1lm-fGrIm85nUTxSojqyCt_Ehmm1zEbViFhKpxcJiz1A/edit#gid=406441516)\n{% enddocs %}\n\n{% docs event_type %}\nType of event (pv = 'Page View', se = 'Structured Event')\n{% enddocs %}\n\n{% docs host %}\nURL host where event occurred (eg. www.dosomething.org or identity.dosomething.org)\n{% enddocs %}\n\n{% docs path %}\nURL path event occurred at (eg. /login or /us/campaigns/huddle-for-heroes)\n{% enddocs %}\n\n{% docs query_parameters %}\nOptional query parameters for the request (eg. query=huddle)\n{% enddocs %}\n\n{% docs se_category %}\nCategory of event (eg. focused_field, authentication) - Custom structured event\n{% enddocs %}\n\n{% docs se_action %}\nAction performed / event name (eg. form_submitted, action_failed) - Custom structured event\n{% enddocs %}\n\n{% docs se_label %}\nThe object of the action (eg. first_name, register, voter_reg_status) - Custom structured event\n{% enddocs %}\n\n{% docs session_id %}\nUnique identifier of the user's session\n{% enddocs %}\n\n{% docs session_counter %}\nHow many sessions a user has started\n{% enddocs %}\n\n{% docs browser_size %}\nWhich type of browser a user is using (eg. Mobile, Desktop)\n{% enddocs %}\n\n{% docs northstar_id %}\nThe Northstar ID of the user who generated the event\n{% enddocs %}\n\n{% docs device_id %}\nID of the device used\n{% enddocs %}\n\n{% docs referrer_host %}\nURL host of the referring site (eg. google.com)\n{% enddocs %}\n\n{% docs referrer_path %}\nURL path from referring site (eg. /10-stats-on-teen-drug-and-alcohol-use/)\n{% enddocs %}\n\n{% docs referrer_source %}\nReferrer source name (eg. Google, Facebook)\n{% enddocs %}\n\n{% docs utm_source %}\nTracks where the traffic is coming from. (eg. scholarship_listing, Facebook)\n{% enddocs %}\n\n{% docs utm_medium %}\nHow the traffic got to the platform (eg. referral, CPC)\n{% enddocs %}\n\n{% docs utm_campaign %}\nTracks which campaign the traffic was generated by. Shows up in Google Analytics as Campaign Name (eg. editorial_newsletter)\n{% enddocs %}\n\n{% docs url %}\nURL of campaign (eg. https://dosome.click/nyn5m7)\n{% enddocs %}\n\n{% docs modal_type %}\nNULL or SURVEY_MODAL\n{% enddocs %}\n\n{% docs landing_datetime %}\nWhen the session started in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs ending_datetime %}\nWhen the session ended in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs session_duration_seconds %}\nSession duration in seconds\n{% enddocs %}\n\n{% docs num_pages_views %}\nNumber of pages viewed in session\n{% enddocs %}\n\n{% docs landing_page %}\nFirst page the user viewed in the session (eg. /us/facts/11-facts-about-bp-oil-spill)\n{% enddocs %}\n\n{% docs exit_page %}\n\"Which page the user ended or exited their session from (eg. /us/campaigns/green-your-getaway)\"\n{% enddocs %}\n\n{% docs days_since_last_session %}\n\"Days since their last session.\"\n{% enddocs %}\n\n{% docs post_type %}\nType of post, (e.g. photo, voter-reg)\n{% enddocs %}\n\n{% docs noun %}\nNoun that corresponds to the item in the call to action that was delivered. (e.g. drawings, tweets)\n{% enddocs %}\n\n{% docs verb %}\nVerb corresponding to the action the user took. (e.g. shared, sent, taken)\n{% enddocs %}\n\n{% docs deleted_at %}\nDate time in UTC when a user deleted their post.\n{% enddocs %}\n\n{% docs _fivetran_deleted %}\nMarks rows that were deleted in the source table\n{% enddocs %}\n\n{% docs _fivetran_synced %}\n(UTC timestamp) keeps track of when each row was last successfully synced\n{% enddocs %}\n\n{% docs reportback %}\nWhether the post is a reportback \n{% enddocs %}\n\n{% docs active %}\nWhether the user is active \n{% enddocs %}\n\n{% docs anonymous %}\nWhether the user is anonymous when making the post \n{% enddocs %}\n\n{% docs callpower_campaign_id %}\nUnique ID corresponding to the Callpower campaign. Callpower allows users to record messages for their representatives.\n{% enddocs %}\n\n{% docs quiz %}\nWhether the post is a quiz \n{% enddocs %}\n\n{% docs action_type %}\nType of action the user took. (e.g. share-something, donate-something)\n{% enddocs %}\n\n{% docs online %}\nWhether the action is a online as opposed to IRL.\n{% enddocs %}\n\n{% docs time_commitment %}\nEstimated time required to do the action (e.g. 3.0+, <0.5)\n{% enddocs %}\n\n{% docs num_signups %}\nQuantity of campaign signups\n{% enddocs %}\n\n{% docs most_recent_signup %}\nTimestamp of the most recent signup in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs num_rbs %}\nQuantity of reportbacks for the user\n{% enddocs %}\n\n{% docs total_quantity %}\nTotal quantity of items in reportbacks\n{% enddocs %}\n\n{% docs most_recent_rb %}\nWhen the most recent reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs first_rb %}\nWhen the first reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs avg_time_betw_rbs %}\nCalculated average time between reportbacks.\n{% enddocs %}\n\n{% docs avg_days_next_action_after_rb %}\nCalculated average days until next action after reportback\n{% enddocs %}\n\n{% docs days_to_next_action_after_last_rb %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs most_recent_mam_action %}\nMost recent monthly active member qualifying action in UTC (eg. 2018-01-01 12:00:00).\n{% enddocs %}\n\n{% docs most_recent_email_open %}\nMost recent email open in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs most_recent_all_actions %}\nMost recent timestamp of any action in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs last_action_is_rb %}\nWhether the last action the user took was a reportback\n{% enddocs %}\n\n{% docs days_since_last_action %}\nDays since the user's last action\n{% enddocs %}\n\n{% docs time_to_first_rb %}\nHow much time after registering until the user's first reportback\n{% enddocs %}\n\n{% docs sms_unsubscribed_at %}\nTimestamp of when user unsubscribed from SMS messaging\n{% enddocs %}\n\n{% docs user_unsubscribed_at %}\nTimestamp of when user unsubscribed from email or sms\n{% enddocs %}\n\n{% docs voter_reg_acquisition %}\nWhether the user was an acquisition through voter registration efforts. \n{% enddocs %}\n\n{% docs last_logged_in %}\nDate time in UTC when user last logged in to Northstar\n{% enddocs %}\n\n{% docs last_accessed %}\nDate time in UTC when user last access the website\n{% enddocs %}\n\n{% docs last_messaged_at %}\nDate time in UTC when user was last sent a message via SMS or email\n{% enddocs %}\n\n{% docs facebook_id %}\nUser's facebook id\n{% enddocs %}\n\n{% docs mobile %}\nUsers's mobile phone number\n{% enddocs %}\n\n{% docs birthdate %}\nUser's birthdate\n{% enddocs %}\n\n{% docs first_name %}\nUser's first name\n{% enddocs %}\n\n{% docs last_name %}\nUser's last name\n{% enddocs %}\n\n{% docs voter_registration_status %}\nUser's registration status. (e.g. registration_complete, confirmed, uncertain) \n{% enddocs %}\n\n{% docs finish_with_state %}\nIf the registrant was eligible to use and passed through to complete their registration with their state\u2019s OVR system, it will be indicated in this field (direct quote from Rock-The-Vote documentation). Yes/No value in field.\n{% enddocs %}\n\n{% docs reportback_volume %}\nThis field returns 1 if non voter-reg action, since campaigns team only counts those a 1 reportback. If voter-reg action, we want to count quantity of post as number of registered voters.\n{% enddocs %}\n\n{% docs address_street_1 %}\nFirst line of user's street address\n{% enddocs %}\n\n{% docs address_street_2 %}\nSecond line of user's street address\n{% enddocs %}\n\n{% docs city %}\nUser's city\n{% enddocs %}\n\n{% docs state %}\nUser's state\n{% enddocs %}\n\n{% docs country %}\nUser's country\n{% enddocs %}\n\n{% docs language %}\nUser's language\n{% enddocs %}\n\n{% docs cio_status %}\nStatus of user from CIO. (e.g. customer_subscribed, customer_unsubscribed)\n{% enddocs %}\n\n{% docs cio_status_timestamp %}\nTimestamp when users's status was updated.\n{% enddocs %}\n\n{% docs sms_status %}\nCurrent SMS status. (e.g. undeliverable, unknown)\n{% enddocs %}\n\n{% docs source_detail %}\nDetails of the origin of the user. (e.g. tell_a_friend, other, opt_in_path/197981)\n{% enddocs %}\n\n{% docs badges %}\nWhether the user has any badges. \n{% enddocs %}\n\n{% docs refer_friends %}\nWhether the user is a part of the refer a friend campaign. \n{% enddocs %}\n\n{% docs subscribed_member %}\nWhether the user is subscribed. \n{% enddocs %}\n\n{% docs last_updated_at %}\nTimestamp when users's was updated.\n{% enddocs %}\n\n{% docs school_id %}\nUnique identifier for the user's school. This info comes from the school finder.\n{% enddocs %}\n\n{% docs newsletter_topic %}\nNewsletter topic. (e.g. community, lifestyle)\n{% enddocs %}\n\n{% docs user_agent %}\nFull user agent string for a user's browser (e.g. \"Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:24.0) Gecko/20100101 Firefox/24.0\")\n{% enddocs %}\n\n{% docs drupal_id %}\nOld Drupal user ID\n{% enddocs %}\n\n{% docs campaigns %}\nCampaigns a user is signed up for.\n{% enddocs %}\n\n{% docs audit %}\nA very useful field with data containing information about changes to a user, e.g. timestamps when the user subscribed and unsubscribed.\n{% enddocs %}\n\n{% docs voting_plan_status %}\nThe indication of the user's plan to vote, e.g. voting, not_voting, cant_vote\n{% enddocs %}\n\n{% docs voting_plan_time_of_day %}\nThe time of day when the user plans to vote, e.g morning, afternoon, evening\n{% enddocs %}\n\n{% docs voting_plan_method_of_transport %}\nHow the user plans to get to their polling place. e.g. walk, drive\n{% enddocs %}\n\n{% docs voting_plan_attending_with %}\nWith Whom the user plans to go voting, e.g. family, friends, alone\n{% enddocs %}\n\n{% docs feature_flags %}\nJSON containing info on features like badges and refer-a-friend.\n{% enddocs %}\n\n{% docs dbt_updated_at %}\nDBT snapshot table data. The updated_at timestamp of the source record when this snapshot row was inserted.\n{% enddocs %}\n\n{% docs dbt_scd_id %}\nDBT snapshot table data. A unique key generated for each snapshotted record.\n{% enddocs %}\n\n{% docs dbt_valid_from %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this snapshot row was first inserted\n{% enddocs %}\n\n{% docs dbt_valid_to %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this row row became invalidated.\n{% enddocs %}\n\n{% docs google_id %}\nUser's Google ID obtained from login.\n{% enddocs %}\n\n{% docs causes %}\nCauses in which a user is interested. e.g. animal welfare, education, mental_health\n{% enddocs %}\n\n{% docs email_subscription_status %}\nEmail subscription status of the user\n{% enddocs %}\n\n{% docs role %}\nUser's role, e.g. user, staff\n{% enddocs %}\n\n{% docs cio_backfilled %}\nWhether this user's data was backfilled from CIO\n{% enddocs %}\n\n{% docs addr_source %}\nWhere the user submitted their address, e.g. sms, GDPR\n{% enddocs %}\n\n{% docs email_subscription_topics %}\nEmail subscription topics correspond to categories in CIO in which the user is interested. e.g. lifestyle, community, scholarship\n{% enddocs %}\n\n{% docs sms_paused %}\nWhether we've paused sending sms messages to the user.\n{% enddocs %}\n\n\n\n\n", "name": "source", "unique_id": "ds_dbt.source", "block_contents": "Source of the URL (e.g. SMS, web), origin of the post (e.g. phoenix-web, phoenix-ashes, sms), or source where user was acquired. (e.g. sms, phoenix-next)"}, "ds_dbt.interaction_type": {"root_path": "/Users/mrich/projects/quasar/quasar/dbt", "resource_type": "docs", "path": "schema.md", "original_file_path": "models/schema.md", "package_name": "ds_dbt", "file_contents": "\n{% docs click_id %}\nThis is a unique identifier for each click\n{% enddocs %}\n\n{% docs click_time %}\nTimestamp when user clicked.\n{% enddocs %}\n\n{% docs shortened %}\nShortened URL\n{% enddocs %}\n\n{% docs target_url %}\nURL where the user will be directed\n{% enddocs %}\n\n{% docs broadcast_id %}\nID of the broadcast that generated the shortened URL\n{% enddocs %}\n\n{% docs source %}\nSource of the URL (e.g. SMS, web), origin of the post (e.g. phoenix-web, phoenix-ashes, sms), or source where user was acquired. (e.g. sms, phoenix-next)\n{% enddocs %}\n\n{% docs interaction_type %}\nHow the user interacted with the link (e.g. preview, click)\n{% enddocs %}\n\n{% docs id %}\nUnique identifier for the post\n{% enddocs %}\n\n{% docs type %}\nType of post (e.g. photo)\n{% enddocs %}\n\n{% docs action %}\nPost action (e.g. DefendDreamers_Nov9_CongressCalls, GunViolence2018_Feb15_ParklandResponse)\n{% enddocs %}\n\n{% docs status %}\nPost status (e.g. accepted, rejected)\n{% enddocs %}\n\n{% docs quantity %}\nNumerical quantity of items specified in the call to action (e.g. 10, 200)\n{% enddocs %}\n\n{% docs source_bucket %}\nGrouping bucket for origin of the post (e.g. web, sms) \n{% enddocs %}\n\n{% docs created_at %}\nWhen the item was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs updated_at %}\nWhen the item was updated in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs text %}\nText of the post (e.g. \"Zoo animals and a super hero trying to help too!\") \n{% enddocs %}\n\n{% docs signup_id %}\nUnique identifier for the signup \n{% enddocs %}\n\n{% docs post_class %}\nClass of the signup (e.g. \"photo - default\", \"phone-call - DefendDreamers_Jan16_BothBodies\")\n{% enddocs %}\n\n{% docs is_accepted %}\nWhether the post has been accepted to be displayed to the public on the website\n{% enddocs %}\n\n{% docs action_id %}\nInternal identifier of the action \n{% enddocs %}\n\n{% docs location %}\nLocation where the action takes place (e.g. US-NY)\n{% enddocs %}\n\n{% docs postal_code %}\nPostal code where the action takes place\n{% enddocs %}\n\n{% docs is_reportback %}\nWhether the post is a reportback. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs civic_action %}\nWhether the post is a Civic Action. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs scholarship_entry %}\nWhether the post is a Scholarship Entry. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs why_participated %}\nWhy the user participated in this action. Entered by the user.\n{% enddocs %}\n\n{% docs details %}\nDetails about the post. Contains contentfulId and other information (e.g. {\"campaignContentfulId\":\"6ATBgGEQEeJoIcxs1qbwaC\"})\n{% enddocs %}\n\n{% docs email %}\nEmail address of the user.\n{% enddocs %}\n\n{% docs source_details %}\nDetails about the source of the item. This is sometimes represented as a JSON object, and for other tables like Turbovote its represented as a string. (e.g. \"{\"contentful_id\":\"3CTLlXfbwtz1FOMpl31SKV\",\"utm_source\":\"scholarship_listing\",\"utm_medium\":\"referral\",\"utm_campaign\":\"fastweb_2019_08\"}\", newsletter_456)\n{% enddocs %}\n\n{% docs campaign_id %}\nThis is a unique identifier for the campaign\n{% enddocs %}\n\n{% docs campaign_run_id %}\nUnique identifier for the campaign run\n{% enddocs %}\n\n{% docs campaign_name %}\nName of the campaign\n{% enddocs %}\n\n{% docs campaign_cause %}\nCampaign cause (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_run_start_date %}\nStart date of the campaign run\n{% enddocs %}\n\n{% docs campaign_run_end_date %}\nEnd date of the campaign run\n{% enddocs %}\n\n{% docs campaign_created_date %}\nWhen the campaign was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs campaign_node_id %}\nInternal unique node id for the campaign\n{% enddocs %}\n\n{% docs campaign_node_id_title %}\nCampaign title\n{% enddocs %}\n\n{% docs campaign_run_id_title %}\nTitle of the campaign run\n{% enddocs %}\n\n{% docs campaign_action_type %}\nCampaign action type (eg. Make Something, Share Something)\n{% enddocs %}\n\n{% docs campaign_cause_type %}\nCampaign cause type (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_noun %}\nNoun applicable to the user's action\n{% enddocs %}\n\n{% docs campaign_verb %}\nVerb describing the action the user should take\n{% enddocs %}\n\n{% docs campaign_cta %}\nCampaign's call to action\n{% enddocs %}\n\n{% docs campaign_language %}\n\"Language in which the campaign is available\"\n{% enddocs %}\n\n{% docs agent_id %}\nIf set, the content type of the picture the member is sending us. Exp. image/png.\n{% enddocs %}\n\n{% docs attachment_content_type %}\nIf set, the handle of the Front agent this outbound support message is from.\n{% enddocs %}\n\n{% docs topic %}\nHolds a reference to the **last** campaign topic the member's conversation was in. This is useful to allow members to talk to Gambit and get quick responses (through Rivescript), without Gambit completely forgetting what state the member's interaction with a campaign topic was in.\n{% enddocs %}\n\n{% docs action_serial_id %}\nSerial id for the user's action. Depends on the source of the action. May be the bertly click id, sms message id, etc.\n{% enddocs %}\n\n{% docs channel %}\nChannel for the user's action. Depends on the source of the action. (e.g. web, sms)\n{% enddocs %}\n\n{% docs first_action_month %}\nMonth during which the user took their first action. \n{% enddocs %}\n\n{% docs event_id %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs event_source %}\nApplication source for event (eg. Phoenix, Northstar)\n{% enddocs %}\n\n{% docs event_datetime %}\nWhen the event occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs event_name %}\nName of the event (eg. northstar_submitted_register, https://docs.google.com/spreadsheets/d/1lm-fGrIm85nUTxSojqyCt_Ehmm1zEbViFhKpxcJiz1A/edit#gid=406441516)\n{% enddocs %}\n\n{% docs event_type %}\nType of event (pv = 'Page View', se = 'Structured Event')\n{% enddocs %}\n\n{% docs host %}\nURL host where event occurred (eg. www.dosomething.org or identity.dosomething.org)\n{% enddocs %}\n\n{% docs path %}\nURL path event occurred at (eg. /login or /us/campaigns/huddle-for-heroes)\n{% enddocs %}\n\n{% docs query_parameters %}\nOptional query parameters for the request (eg. query=huddle)\n{% enddocs %}\n\n{% docs se_category %}\nCategory of event (eg. focused_field, authentication) - Custom structured event\n{% enddocs %}\n\n{% docs se_action %}\nAction performed / event name (eg. form_submitted, action_failed) - Custom structured event\n{% enddocs %}\n\n{% docs se_label %}\nThe object of the action (eg. first_name, register, voter_reg_status) - Custom structured event\n{% enddocs %}\n\n{% docs session_id %}\nUnique identifier of the user's session\n{% enddocs %}\n\n{% docs session_counter %}\nHow many sessions a user has started\n{% enddocs %}\n\n{% docs browser_size %}\nWhich type of browser a user is using (eg. Mobile, Desktop)\n{% enddocs %}\n\n{% docs northstar_id %}\nThe Northstar ID of the user who generated the event\n{% enddocs %}\n\n{% docs device_id %}\nID of the device used\n{% enddocs %}\n\n{% docs referrer_host %}\nURL host of the referring site (eg. google.com)\n{% enddocs %}\n\n{% docs referrer_path %}\nURL path from referring site (eg. /10-stats-on-teen-drug-and-alcohol-use/)\n{% enddocs %}\n\n{% docs referrer_source %}\nReferrer source name (eg. Google, Facebook)\n{% enddocs %}\n\n{% docs utm_source %}\nTracks where the traffic is coming from. (eg. scholarship_listing, Facebook)\n{% enddocs %}\n\n{% docs utm_medium %}\nHow the traffic got to the platform (eg. referral, CPC)\n{% enddocs %}\n\n{% docs utm_campaign %}\nTracks which campaign the traffic was generated by. Shows up in Google Analytics as Campaign Name (eg. editorial_newsletter)\n{% enddocs %}\n\n{% docs url %}\nURL of campaign (eg. https://dosome.click/nyn5m7)\n{% enddocs %}\n\n{% docs modal_type %}\nNULL or SURVEY_MODAL\n{% enddocs %}\n\n{% docs landing_datetime %}\nWhen the session started in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs ending_datetime %}\nWhen the session ended in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs session_duration_seconds %}\nSession duration in seconds\n{% enddocs %}\n\n{% docs num_pages_views %}\nNumber of pages viewed in session\n{% enddocs %}\n\n{% docs landing_page %}\nFirst page the user viewed in the session (eg. /us/facts/11-facts-about-bp-oil-spill)\n{% enddocs %}\n\n{% docs exit_page %}\n\"Which page the user ended or exited their session from (eg. /us/campaigns/green-your-getaway)\"\n{% enddocs %}\n\n{% docs days_since_last_session %}\n\"Days since their last session.\"\n{% enddocs %}\n\n{% docs post_type %}\nType of post, (e.g. photo, voter-reg)\n{% enddocs %}\n\n{% docs noun %}\nNoun that corresponds to the item in the call to action that was delivered. (e.g. drawings, tweets)\n{% enddocs %}\n\n{% docs verb %}\nVerb corresponding to the action the user took. (e.g. shared, sent, taken)\n{% enddocs %}\n\n{% docs deleted_at %}\nDate time in UTC when a user deleted their post.\n{% enddocs %}\n\n{% docs _fivetran_deleted %}\nMarks rows that were deleted in the source table\n{% enddocs %}\n\n{% docs _fivetran_synced %}\n(UTC timestamp) keeps track of when each row was last successfully synced\n{% enddocs %}\n\n{% docs reportback %}\nWhether the post is a reportback \n{% enddocs %}\n\n{% docs active %}\nWhether the user is active \n{% enddocs %}\n\n{% docs anonymous %}\nWhether the user is anonymous when making the post \n{% enddocs %}\n\n{% docs callpower_campaign_id %}\nUnique ID corresponding to the Callpower campaign. Callpower allows users to record messages for their representatives.\n{% enddocs %}\n\n{% docs quiz %}\nWhether the post is a quiz \n{% enddocs %}\n\n{% docs action_type %}\nType of action the user took. (e.g. share-something, donate-something)\n{% enddocs %}\n\n{% docs online %}\nWhether the action is a online as opposed to IRL.\n{% enddocs %}\n\n{% docs time_commitment %}\nEstimated time required to do the action (e.g. 3.0+, <0.5)\n{% enddocs %}\n\n{% docs num_signups %}\nQuantity of campaign signups\n{% enddocs %}\n\n{% docs most_recent_signup %}\nTimestamp of the most recent signup in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs num_rbs %}\nQuantity of reportbacks for the user\n{% enddocs %}\n\n{% docs total_quantity %}\nTotal quantity of items in reportbacks\n{% enddocs %}\n\n{% docs most_recent_rb %}\nWhen the most recent reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs first_rb %}\nWhen the first reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs avg_time_betw_rbs %}\nCalculated average time between reportbacks.\n{% enddocs %}\n\n{% docs avg_days_next_action_after_rb %}\nCalculated average days until next action after reportback\n{% enddocs %}\n\n{% docs days_to_next_action_after_last_rb %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs most_recent_mam_action %}\nMost recent monthly active member qualifying action in UTC (eg. 2018-01-01 12:00:00).\n{% enddocs %}\n\n{% docs most_recent_email_open %}\nMost recent email open in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs most_recent_all_actions %}\nMost recent timestamp of any action in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs last_action_is_rb %}\nWhether the last action the user took was a reportback\n{% enddocs %}\n\n{% docs days_since_last_action %}\nDays since the user's last action\n{% enddocs %}\n\n{% docs time_to_first_rb %}\nHow much time after registering until the user's first reportback\n{% enddocs %}\n\n{% docs sms_unsubscribed_at %}\nTimestamp of when user unsubscribed from SMS messaging\n{% enddocs %}\n\n{% docs user_unsubscribed_at %}\nTimestamp of when user unsubscribed from email or sms\n{% enddocs %}\n\n{% docs voter_reg_acquisition %}\nWhether the user was an acquisition through voter registration efforts. \n{% enddocs %}\n\n{% docs last_logged_in %}\nDate time in UTC when user last logged in to Northstar\n{% enddocs %}\n\n{% docs last_accessed %}\nDate time in UTC when user last access the website\n{% enddocs %}\n\n{% docs last_messaged_at %}\nDate time in UTC when user was last sent a message via SMS or email\n{% enddocs %}\n\n{% docs facebook_id %}\nUser's facebook id\n{% enddocs %}\n\n{% docs mobile %}\nUsers's mobile phone number\n{% enddocs %}\n\n{% docs birthdate %}\nUser's birthdate\n{% enddocs %}\n\n{% docs first_name %}\nUser's first name\n{% enddocs %}\n\n{% docs last_name %}\nUser's last name\n{% enddocs %}\n\n{% docs voter_registration_status %}\nUser's registration status. (e.g. registration_complete, confirmed, uncertain) \n{% enddocs %}\n\n{% docs finish_with_state %}\nIf the registrant was eligible to use and passed through to complete their registration with their state\u2019s OVR system, it will be indicated in this field (direct quote from Rock-The-Vote documentation). Yes/No value in field.\n{% enddocs %}\n\n{% docs reportback_volume %}\nThis field returns 1 if non voter-reg action, since campaigns team only counts those a 1 reportback. If voter-reg action, we want to count quantity of post as number of registered voters.\n{% enddocs %}\n\n{% docs address_street_1 %}\nFirst line of user's street address\n{% enddocs %}\n\n{% docs address_street_2 %}\nSecond line of user's street address\n{% enddocs %}\n\n{% docs city %}\nUser's city\n{% enddocs %}\n\n{% docs state %}\nUser's state\n{% enddocs %}\n\n{% docs country %}\nUser's country\n{% enddocs %}\n\n{% docs language %}\nUser's language\n{% enddocs %}\n\n{% docs cio_status %}\nStatus of user from CIO. (e.g. customer_subscribed, customer_unsubscribed)\n{% enddocs %}\n\n{% docs cio_status_timestamp %}\nTimestamp when users's status was updated.\n{% enddocs %}\n\n{% docs sms_status %}\nCurrent SMS status. (e.g. undeliverable, unknown)\n{% enddocs %}\n\n{% docs source_detail %}\nDetails of the origin of the user. (e.g. tell_a_friend, other, opt_in_path/197981)\n{% enddocs %}\n\n{% docs badges %}\nWhether the user has any badges. \n{% enddocs %}\n\n{% docs refer_friends %}\nWhether the user is a part of the refer a friend campaign. \n{% enddocs %}\n\n{% docs subscribed_member %}\nWhether the user is subscribed. \n{% enddocs %}\n\n{% docs last_updated_at %}\nTimestamp when users's was updated.\n{% enddocs %}\n\n{% docs school_id %}\nUnique identifier for the user's school. This info comes from the school finder.\n{% enddocs %}\n\n{% docs newsletter_topic %}\nNewsletter topic. (e.g. community, lifestyle)\n{% enddocs %}\n\n{% docs user_agent %}\nFull user agent string for a user's browser (e.g. \"Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:24.0) Gecko/20100101 Firefox/24.0\")\n{% enddocs %}\n\n{% docs drupal_id %}\nOld Drupal user ID\n{% enddocs %}\n\n{% docs campaigns %}\nCampaigns a user is signed up for.\n{% enddocs %}\n\n{% docs audit %}\nA very useful field with data containing information about changes to a user, e.g. timestamps when the user subscribed and unsubscribed.\n{% enddocs %}\n\n{% docs voting_plan_status %}\nThe indication of the user's plan to vote, e.g. voting, not_voting, cant_vote\n{% enddocs %}\n\n{% docs voting_plan_time_of_day %}\nThe time of day when the user plans to vote, e.g morning, afternoon, evening\n{% enddocs %}\n\n{% docs voting_plan_method_of_transport %}\nHow the user plans to get to their polling place. e.g. walk, drive\n{% enddocs %}\n\n{% docs voting_plan_attending_with %}\nWith Whom the user plans to go voting, e.g. family, friends, alone\n{% enddocs %}\n\n{% docs feature_flags %}\nJSON containing info on features like badges and refer-a-friend.\n{% enddocs %}\n\n{% docs dbt_updated_at %}\nDBT snapshot table data. The updated_at timestamp of the source record when this snapshot row was inserted.\n{% enddocs %}\n\n{% docs dbt_scd_id %}\nDBT snapshot table data. A unique key generated for each snapshotted record.\n{% enddocs %}\n\n{% docs dbt_valid_from %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this snapshot row was first inserted\n{% enddocs %}\n\n{% docs dbt_valid_to %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this row row became invalidated.\n{% enddocs %}\n\n{% docs google_id %}\nUser's Google ID obtained from login.\n{% enddocs %}\n\n{% docs causes %}\nCauses in which a user is interested. e.g. animal welfare, education, mental_health\n{% enddocs %}\n\n{% docs email_subscription_status %}\nEmail subscription status of the user\n{% enddocs %}\n\n{% docs role %}\nUser's role, e.g. user, staff\n{% enddocs %}\n\n{% docs cio_backfilled %}\nWhether this user's data was backfilled from CIO\n{% enddocs %}\n\n{% docs addr_source %}\nWhere the user submitted their address, e.g. sms, GDPR\n{% enddocs %}\n\n{% docs email_subscription_topics %}\nEmail subscription topics correspond to categories in CIO in which the user is interested. e.g. lifestyle, community, scholarship\n{% enddocs %}\n\n{% docs sms_paused %}\nWhether we've paused sending sms messages to the user.\n{% enddocs %}\n\n\n\n\n", "name": "interaction_type", "unique_id": "ds_dbt.interaction_type", "block_contents": "How the user interacted with the link (e.g. preview, click)"}, "ds_dbt.id": {"root_path": "/Users/mrich/projects/quasar/quasar/dbt", "resource_type": "docs", "path": "schema.md", "original_file_path": "models/schema.md", "package_name": "ds_dbt", "file_contents": "\n{% docs click_id %}\nThis is a unique identifier for each click\n{% enddocs %}\n\n{% docs click_time %}\nTimestamp when user clicked.\n{% enddocs %}\n\n{% docs shortened %}\nShortened URL\n{% enddocs %}\n\n{% docs target_url %}\nURL where the user will be directed\n{% enddocs %}\n\n{% docs broadcast_id %}\nID of the broadcast that generated the shortened URL\n{% enddocs %}\n\n{% docs source %}\nSource of the URL (e.g. SMS, web), origin of the post (e.g. phoenix-web, phoenix-ashes, sms), or source where user was acquired. (e.g. sms, phoenix-next)\n{% enddocs %}\n\n{% docs interaction_type %}\nHow the user interacted with the link (e.g. preview, click)\n{% enddocs %}\n\n{% docs id %}\nUnique identifier for the post\n{% enddocs %}\n\n{% docs type %}\nType of post (e.g. photo)\n{% enddocs %}\n\n{% docs action %}\nPost action (e.g. DefendDreamers_Nov9_CongressCalls, GunViolence2018_Feb15_ParklandResponse)\n{% enddocs %}\n\n{% docs status %}\nPost status (e.g. accepted, rejected)\n{% enddocs %}\n\n{% docs quantity %}\nNumerical quantity of items specified in the call to action (e.g. 10, 200)\n{% enddocs %}\n\n{% docs source_bucket %}\nGrouping bucket for origin of the post (e.g. web, sms) \n{% enddocs %}\n\n{% docs created_at %}\nWhen the item was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs updated_at %}\nWhen the item was updated in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs text %}\nText of the post (e.g. \"Zoo animals and a super hero trying to help too!\") \n{% enddocs %}\n\n{% docs signup_id %}\nUnique identifier for the signup \n{% enddocs %}\n\n{% docs post_class %}\nClass of the signup (e.g. \"photo - default\", \"phone-call - DefendDreamers_Jan16_BothBodies\")\n{% enddocs %}\n\n{% docs is_accepted %}\nWhether the post has been accepted to be displayed to the public on the website\n{% enddocs %}\n\n{% docs action_id %}\nInternal identifier of the action \n{% enddocs %}\n\n{% docs location %}\nLocation where the action takes place (e.g. US-NY)\n{% enddocs %}\n\n{% docs postal_code %}\nPostal code where the action takes place\n{% enddocs %}\n\n{% docs is_reportback %}\nWhether the post is a reportback. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs civic_action %}\nWhether the post is a Civic Action. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs scholarship_entry %}\nWhether the post is a Scholarship Entry. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs why_participated %}\nWhy the user participated in this action. Entered by the user.\n{% enddocs %}\n\n{% docs details %}\nDetails about the post. Contains contentfulId and other information (e.g. {\"campaignContentfulId\":\"6ATBgGEQEeJoIcxs1qbwaC\"})\n{% enddocs %}\n\n{% docs email %}\nEmail address of the user.\n{% enddocs %}\n\n{% docs source_details %}\nDetails about the source of the item. This is sometimes represented as a JSON object, and for other tables like Turbovote its represented as a string. (e.g. \"{\"contentful_id\":\"3CTLlXfbwtz1FOMpl31SKV\",\"utm_source\":\"scholarship_listing\",\"utm_medium\":\"referral\",\"utm_campaign\":\"fastweb_2019_08\"}\", newsletter_456)\n{% enddocs %}\n\n{% docs campaign_id %}\nThis is a unique identifier for the campaign\n{% enddocs %}\n\n{% docs campaign_run_id %}\nUnique identifier for the campaign run\n{% enddocs %}\n\n{% docs campaign_name %}\nName of the campaign\n{% enddocs %}\n\n{% docs campaign_cause %}\nCampaign cause (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_run_start_date %}\nStart date of the campaign run\n{% enddocs %}\n\n{% docs campaign_run_end_date %}\nEnd date of the campaign run\n{% enddocs %}\n\n{% docs campaign_created_date %}\nWhen the campaign was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs campaign_node_id %}\nInternal unique node id for the campaign\n{% enddocs %}\n\n{% docs campaign_node_id_title %}\nCampaign title\n{% enddocs %}\n\n{% docs campaign_run_id_title %}\nTitle of the campaign run\n{% enddocs %}\n\n{% docs campaign_action_type %}\nCampaign action type (eg. Make Something, Share Something)\n{% enddocs %}\n\n{% docs campaign_cause_type %}\nCampaign cause type (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_noun %}\nNoun applicable to the user's action\n{% enddocs %}\n\n{% docs campaign_verb %}\nVerb describing the action the user should take\n{% enddocs %}\n\n{% docs campaign_cta %}\nCampaign's call to action\n{% enddocs %}\n\n{% docs campaign_language %}\n\"Language in which the campaign is available\"\n{% enddocs %}\n\n{% docs agent_id %}\nIf set, the content type of the picture the member is sending us. Exp. image/png.\n{% enddocs %}\n\n{% docs attachment_content_type %}\nIf set, the handle of the Front agent this outbound support message is from.\n{% enddocs %}\n\n{% docs topic %}\nHolds a reference to the **last** campaign topic the member's conversation was in. This is useful to allow members to talk to Gambit and get quick responses (through Rivescript), without Gambit completely forgetting what state the member's interaction with a campaign topic was in.\n{% enddocs %}\n\n{% docs action_serial_id %}\nSerial id for the user's action. Depends on the source of the action. May be the bertly click id, sms message id, etc.\n{% enddocs %}\n\n{% docs channel %}\nChannel for the user's action. Depends on the source of the action. (e.g. web, sms)\n{% enddocs %}\n\n{% docs first_action_month %}\nMonth during which the user took their first action. \n{% enddocs %}\n\n{% docs event_id %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs event_source %}\nApplication source for event (eg. Phoenix, Northstar)\n{% enddocs %}\n\n{% docs event_datetime %}\nWhen the event occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs event_name %}\nName of the event (eg. northstar_submitted_register, https://docs.google.com/spreadsheets/d/1lm-fGrIm85nUTxSojqyCt_Ehmm1zEbViFhKpxcJiz1A/edit#gid=406441516)\n{% enddocs %}\n\n{% docs event_type %}\nType of event (pv = 'Page View', se = 'Structured Event')\n{% enddocs %}\n\n{% docs host %}\nURL host where event occurred (eg. www.dosomething.org or identity.dosomething.org)\n{% enddocs %}\n\n{% docs path %}\nURL path event occurred at (eg. /login or /us/campaigns/huddle-for-heroes)\n{% enddocs %}\n\n{% docs query_parameters %}\nOptional query parameters for the request (eg. query=huddle)\n{% enddocs %}\n\n{% docs se_category %}\nCategory of event (eg. focused_field, authentication) - Custom structured event\n{% enddocs %}\n\n{% docs se_action %}\nAction performed / event name (eg. form_submitted, action_failed) - Custom structured event\n{% enddocs %}\n\n{% docs se_label %}\nThe object of the action (eg. first_name, register, voter_reg_status) - Custom structured event\n{% enddocs %}\n\n{% docs session_id %}\nUnique identifier of the user's session\n{% enddocs %}\n\n{% docs session_counter %}\nHow many sessions a user has started\n{% enddocs %}\n\n{% docs browser_size %}\nWhich type of browser a user is using (eg. Mobile, Desktop)\n{% enddocs %}\n\n{% docs northstar_id %}\nThe Northstar ID of the user who generated the event\n{% enddocs %}\n\n{% docs device_id %}\nID of the device used\n{% enddocs %}\n\n{% docs referrer_host %}\nURL host of the referring site (eg. google.com)\n{% enddocs %}\n\n{% docs referrer_path %}\nURL path from referring site (eg. /10-stats-on-teen-drug-and-alcohol-use/)\n{% enddocs %}\n\n{% docs referrer_source %}\nReferrer source name (eg. Google, Facebook)\n{% enddocs %}\n\n{% docs utm_source %}\nTracks where the traffic is coming from. (eg. scholarship_listing, Facebook)\n{% enddocs %}\n\n{% docs utm_medium %}\nHow the traffic got to the platform (eg. referral, CPC)\n{% enddocs %}\n\n{% docs utm_campaign %}\nTracks which campaign the traffic was generated by. Shows up in Google Analytics as Campaign Name (eg. editorial_newsletter)\n{% enddocs %}\n\n{% docs url %}\nURL of campaign (eg. https://dosome.click/nyn5m7)\n{% enddocs %}\n\n{% docs modal_type %}\nNULL or SURVEY_MODAL\n{% enddocs %}\n\n{% docs landing_datetime %}\nWhen the session started in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs ending_datetime %}\nWhen the session ended in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs session_duration_seconds %}\nSession duration in seconds\n{% enddocs %}\n\n{% docs num_pages_views %}\nNumber of pages viewed in session\n{% enddocs %}\n\n{% docs landing_page %}\nFirst page the user viewed in the session (eg. /us/facts/11-facts-about-bp-oil-spill)\n{% enddocs %}\n\n{% docs exit_page %}\n\"Which page the user ended or exited their session from (eg. /us/campaigns/green-your-getaway)\"\n{% enddocs %}\n\n{% docs days_since_last_session %}\n\"Days since their last session.\"\n{% enddocs %}\n\n{% docs post_type %}\nType of post, (e.g. photo, voter-reg)\n{% enddocs %}\n\n{% docs noun %}\nNoun that corresponds to the item in the call to action that was delivered. (e.g. drawings, tweets)\n{% enddocs %}\n\n{% docs verb %}\nVerb corresponding to the action the user took. (e.g. shared, sent, taken)\n{% enddocs %}\n\n{% docs deleted_at %}\nDate time in UTC when a user deleted their post.\n{% enddocs %}\n\n{% docs _fivetran_deleted %}\nMarks rows that were deleted in the source table\n{% enddocs %}\n\n{% docs _fivetran_synced %}\n(UTC timestamp) keeps track of when each row was last successfully synced\n{% enddocs %}\n\n{% docs reportback %}\nWhether the post is a reportback \n{% enddocs %}\n\n{% docs active %}\nWhether the user is active \n{% enddocs %}\n\n{% docs anonymous %}\nWhether the user is anonymous when making the post \n{% enddocs %}\n\n{% docs callpower_campaign_id %}\nUnique ID corresponding to the Callpower campaign. Callpower allows users to record messages for their representatives.\n{% enddocs %}\n\n{% docs quiz %}\nWhether the post is a quiz \n{% enddocs %}\n\n{% docs action_type %}\nType of action the user took. (e.g. share-something, donate-something)\n{% enddocs %}\n\n{% docs online %}\nWhether the action is a online as opposed to IRL.\n{% enddocs %}\n\n{% docs time_commitment %}\nEstimated time required to do the action (e.g. 3.0+, <0.5)\n{% enddocs %}\n\n{% docs num_signups %}\nQuantity of campaign signups\n{% enddocs %}\n\n{% docs most_recent_signup %}\nTimestamp of the most recent signup in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs num_rbs %}\nQuantity of reportbacks for the user\n{% enddocs %}\n\n{% docs total_quantity %}\nTotal quantity of items in reportbacks\n{% enddocs %}\n\n{% docs most_recent_rb %}\nWhen the most recent reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs first_rb %}\nWhen the first reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs avg_time_betw_rbs %}\nCalculated average time between reportbacks.\n{% enddocs %}\n\n{% docs avg_days_next_action_after_rb %}\nCalculated average days until next action after reportback\n{% enddocs %}\n\n{% docs days_to_next_action_after_last_rb %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs most_recent_mam_action %}\nMost recent monthly active member qualifying action in UTC (eg. 2018-01-01 12:00:00).\n{% enddocs %}\n\n{% docs most_recent_email_open %}\nMost recent email open in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs most_recent_all_actions %}\nMost recent timestamp of any action in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs last_action_is_rb %}\nWhether the last action the user took was a reportback\n{% enddocs %}\n\n{% docs days_since_last_action %}\nDays since the user's last action\n{% enddocs %}\n\n{% docs time_to_first_rb %}\nHow much time after registering until the user's first reportback\n{% enddocs %}\n\n{% docs sms_unsubscribed_at %}\nTimestamp of when user unsubscribed from SMS messaging\n{% enddocs %}\n\n{% docs user_unsubscribed_at %}\nTimestamp of when user unsubscribed from email or sms\n{% enddocs %}\n\n{% docs voter_reg_acquisition %}\nWhether the user was an acquisition through voter registration efforts. \n{% enddocs %}\n\n{% docs last_logged_in %}\nDate time in UTC when user last logged in to Northstar\n{% enddocs %}\n\n{% docs last_accessed %}\nDate time in UTC when user last access the website\n{% enddocs %}\n\n{% docs last_messaged_at %}\nDate time in UTC when user was last sent a message via SMS or email\n{% enddocs %}\n\n{% docs facebook_id %}\nUser's facebook id\n{% enddocs %}\n\n{% docs mobile %}\nUsers's mobile phone number\n{% enddocs %}\n\n{% docs birthdate %}\nUser's birthdate\n{% enddocs %}\n\n{% docs first_name %}\nUser's first name\n{% enddocs %}\n\n{% docs last_name %}\nUser's last name\n{% enddocs %}\n\n{% docs voter_registration_status %}\nUser's registration status. (e.g. registration_complete, confirmed, uncertain) \n{% enddocs %}\n\n{% docs finish_with_state %}\nIf the registrant was eligible to use and passed through to complete their registration with their state\u2019s OVR system, it will be indicated in this field (direct quote from Rock-The-Vote documentation). Yes/No value in field.\n{% enddocs %}\n\n{% docs reportback_volume %}\nThis field returns 1 if non voter-reg action, since campaigns team only counts those a 1 reportback. If voter-reg action, we want to count quantity of post as number of registered voters.\n{% enddocs %}\n\n{% docs address_street_1 %}\nFirst line of user's street address\n{% enddocs %}\n\n{% docs address_street_2 %}\nSecond line of user's street address\n{% enddocs %}\n\n{% docs city %}\nUser's city\n{% enddocs %}\n\n{% docs state %}\nUser's state\n{% enddocs %}\n\n{% docs country %}\nUser's country\n{% enddocs %}\n\n{% docs language %}\nUser's language\n{% enddocs %}\n\n{% docs cio_status %}\nStatus of user from CIO. (e.g. customer_subscribed, customer_unsubscribed)\n{% enddocs %}\n\n{% docs cio_status_timestamp %}\nTimestamp when users's status was updated.\n{% enddocs %}\n\n{% docs sms_status %}\nCurrent SMS status. (e.g. undeliverable, unknown)\n{% enddocs %}\n\n{% docs source_detail %}\nDetails of the origin of the user. (e.g. tell_a_friend, other, opt_in_path/197981)\n{% enddocs %}\n\n{% docs badges %}\nWhether the user has any badges. \n{% enddocs %}\n\n{% docs refer_friends %}\nWhether the user is a part of the refer a friend campaign. \n{% enddocs %}\n\n{% docs subscribed_member %}\nWhether the user is subscribed. \n{% enddocs %}\n\n{% docs last_updated_at %}\nTimestamp when users's was updated.\n{% enddocs %}\n\n{% docs school_id %}\nUnique identifier for the user's school. This info comes from the school finder.\n{% enddocs %}\n\n{% docs newsletter_topic %}\nNewsletter topic. (e.g. community, lifestyle)\n{% enddocs %}\n\n{% docs user_agent %}\nFull user agent string for a user's browser (e.g. \"Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:24.0) Gecko/20100101 Firefox/24.0\")\n{% enddocs %}\n\n{% docs drupal_id %}\nOld Drupal user ID\n{% enddocs %}\n\n{% docs campaigns %}\nCampaigns a user is signed up for.\n{% enddocs %}\n\n{% docs audit %}\nA very useful field with data containing information about changes to a user, e.g. timestamps when the user subscribed and unsubscribed.\n{% enddocs %}\n\n{% docs voting_plan_status %}\nThe indication of the user's plan to vote, e.g. voting, not_voting, cant_vote\n{% enddocs %}\n\n{% docs voting_plan_time_of_day %}\nThe time of day when the user plans to vote, e.g morning, afternoon, evening\n{% enddocs %}\n\n{% docs voting_plan_method_of_transport %}\nHow the user plans to get to their polling place. e.g. walk, drive\n{% enddocs %}\n\n{% docs voting_plan_attending_with %}\nWith Whom the user plans to go voting, e.g. family, friends, alone\n{% enddocs %}\n\n{% docs feature_flags %}\nJSON containing info on features like badges and refer-a-friend.\n{% enddocs %}\n\n{% docs dbt_updated_at %}\nDBT snapshot table data. The updated_at timestamp of the source record when this snapshot row was inserted.\n{% enddocs %}\n\n{% docs dbt_scd_id %}\nDBT snapshot table data. A unique key generated for each snapshotted record.\n{% enddocs %}\n\n{% docs dbt_valid_from %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this snapshot row was first inserted\n{% enddocs %}\n\n{% docs dbt_valid_to %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this row row became invalidated.\n{% enddocs %}\n\n{% docs google_id %}\nUser's Google ID obtained from login.\n{% enddocs %}\n\n{% docs causes %}\nCauses in which a user is interested. e.g. animal welfare, education, mental_health\n{% enddocs %}\n\n{% docs email_subscription_status %}\nEmail subscription status of the user\n{% enddocs %}\n\n{% docs role %}\nUser's role, e.g. user, staff\n{% enddocs %}\n\n{% docs cio_backfilled %}\nWhether this user's data was backfilled from CIO\n{% enddocs %}\n\n{% docs addr_source %}\nWhere the user submitted their address, e.g. sms, GDPR\n{% enddocs %}\n\n{% docs email_subscription_topics %}\nEmail subscription topics correspond to categories in CIO in which the user is interested. e.g. lifestyle, community, scholarship\n{% enddocs %}\n\n{% docs sms_paused %}\nWhether we've paused sending sms messages to the user.\n{% enddocs %}\n\n\n\n\n", "name": "id", "unique_id": "ds_dbt.id", "block_contents": "Unique identifier for the post"}, "ds_dbt.type": {"root_path": "/Users/mrich/projects/quasar/quasar/dbt", "resource_type": "docs", "path": "schema.md", "original_file_path": "models/schema.md", "package_name": "ds_dbt", "file_contents": "\n{% docs click_id %}\nThis is a unique identifier for each click\n{% enddocs %}\n\n{% docs click_time %}\nTimestamp when user clicked.\n{% enddocs %}\n\n{% docs shortened %}\nShortened URL\n{% enddocs %}\n\n{% docs target_url %}\nURL where the user will be directed\n{% enddocs %}\n\n{% docs broadcast_id %}\nID of the broadcast that generated the shortened URL\n{% enddocs %}\n\n{% docs source %}\nSource of the URL (e.g. SMS, web), origin of the post (e.g. phoenix-web, phoenix-ashes, sms), or source where user was acquired. (e.g. sms, phoenix-next)\n{% enddocs %}\n\n{% docs interaction_type %}\nHow the user interacted with the link (e.g. preview, click)\n{% enddocs %}\n\n{% docs id %}\nUnique identifier for the post\n{% enddocs %}\n\n{% docs type %}\nType of post (e.g. photo)\n{% enddocs %}\n\n{% docs action %}\nPost action (e.g. DefendDreamers_Nov9_CongressCalls, GunViolence2018_Feb15_ParklandResponse)\n{% enddocs %}\n\n{% docs status %}\nPost status (e.g. accepted, rejected)\n{% enddocs %}\n\n{% docs quantity %}\nNumerical quantity of items specified in the call to action (e.g. 10, 200)\n{% enddocs %}\n\n{% docs source_bucket %}\nGrouping bucket for origin of the post (e.g. web, sms) \n{% enddocs %}\n\n{% docs created_at %}\nWhen the item was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs updated_at %}\nWhen the item was updated in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs text %}\nText of the post (e.g. \"Zoo animals and a super hero trying to help too!\") \n{% enddocs %}\n\n{% docs signup_id %}\nUnique identifier for the signup \n{% enddocs %}\n\n{% docs post_class %}\nClass of the signup (e.g. \"photo - default\", \"phone-call - DefendDreamers_Jan16_BothBodies\")\n{% enddocs %}\n\n{% docs is_accepted %}\nWhether the post has been accepted to be displayed to the public on the website\n{% enddocs %}\n\n{% docs action_id %}\nInternal identifier of the action \n{% enddocs %}\n\n{% docs location %}\nLocation where the action takes place (e.g. US-NY)\n{% enddocs %}\n\n{% docs postal_code %}\nPostal code where the action takes place\n{% enddocs %}\n\n{% docs is_reportback %}\nWhether the post is a reportback. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs civic_action %}\nWhether the post is a Civic Action. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs scholarship_entry %}\nWhether the post is a Scholarship Entry. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs why_participated %}\nWhy the user participated in this action. Entered by the user.\n{% enddocs %}\n\n{% docs details %}\nDetails about the post. Contains contentfulId and other information (e.g. {\"campaignContentfulId\":\"6ATBgGEQEeJoIcxs1qbwaC\"})\n{% enddocs %}\n\n{% docs email %}\nEmail address of the user.\n{% enddocs %}\n\n{% docs source_details %}\nDetails about the source of the item. This is sometimes represented as a JSON object, and for other tables like Turbovote its represented as a string. (e.g. \"{\"contentful_id\":\"3CTLlXfbwtz1FOMpl31SKV\",\"utm_source\":\"scholarship_listing\",\"utm_medium\":\"referral\",\"utm_campaign\":\"fastweb_2019_08\"}\", newsletter_456)\n{% enddocs %}\n\n{% docs campaign_id %}\nThis is a unique identifier for the campaign\n{% enddocs %}\n\n{% docs campaign_run_id %}\nUnique identifier for the campaign run\n{% enddocs %}\n\n{% docs campaign_name %}\nName of the campaign\n{% enddocs %}\n\n{% docs campaign_cause %}\nCampaign cause (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_run_start_date %}\nStart date of the campaign run\n{% enddocs %}\n\n{% docs campaign_run_end_date %}\nEnd date of the campaign run\n{% enddocs %}\n\n{% docs campaign_created_date %}\nWhen the campaign was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs campaign_node_id %}\nInternal unique node id for the campaign\n{% enddocs %}\n\n{% docs campaign_node_id_title %}\nCampaign title\n{% enddocs %}\n\n{% docs campaign_run_id_title %}\nTitle of the campaign run\n{% enddocs %}\n\n{% docs campaign_action_type %}\nCampaign action type (eg. Make Something, Share Something)\n{% enddocs %}\n\n{% docs campaign_cause_type %}\nCampaign cause type (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_noun %}\nNoun applicable to the user's action\n{% enddocs %}\n\n{% docs campaign_verb %}\nVerb describing the action the user should take\n{% enddocs %}\n\n{% docs campaign_cta %}\nCampaign's call to action\n{% enddocs %}\n\n{% docs campaign_language %}\n\"Language in which the campaign is available\"\n{% enddocs %}\n\n{% docs agent_id %}\nIf set, the content type of the picture the member is sending us. Exp. image/png.\n{% enddocs %}\n\n{% docs attachment_content_type %}\nIf set, the handle of the Front agent this outbound support message is from.\n{% enddocs %}\n\n{% docs topic %}\nHolds a reference to the **last** campaign topic the member's conversation was in. This is useful to allow members to talk to Gambit and get quick responses (through Rivescript), without Gambit completely forgetting what state the member's interaction with a campaign topic was in.\n{% enddocs %}\n\n{% docs action_serial_id %}\nSerial id for the user's action. Depends on the source of the action. May be the bertly click id, sms message id, etc.\n{% enddocs %}\n\n{% docs channel %}\nChannel for the user's action. Depends on the source of the action. (e.g. web, sms)\n{% enddocs %}\n\n{% docs first_action_month %}\nMonth during which the user took their first action. \n{% enddocs %}\n\n{% docs event_id %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs event_source %}\nApplication source for event (eg. Phoenix, Northstar)\n{% enddocs %}\n\n{% docs event_datetime %}\nWhen the event occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs event_name %}\nName of the event (eg. northstar_submitted_register, https://docs.google.com/spreadsheets/d/1lm-fGrIm85nUTxSojqyCt_Ehmm1zEbViFhKpxcJiz1A/edit#gid=406441516)\n{% enddocs %}\n\n{% docs event_type %}\nType of event (pv = 'Page View', se = 'Structured Event')\n{% enddocs %}\n\n{% docs host %}\nURL host where event occurred (eg. www.dosomething.org or identity.dosomething.org)\n{% enddocs %}\n\n{% docs path %}\nURL path event occurred at (eg. /login or /us/campaigns/huddle-for-heroes)\n{% enddocs %}\n\n{% docs query_parameters %}\nOptional query parameters for the request (eg. query=huddle)\n{% enddocs %}\n\n{% docs se_category %}\nCategory of event (eg. focused_field, authentication) - Custom structured event\n{% enddocs %}\n\n{% docs se_action %}\nAction performed / event name (eg. form_submitted, action_failed) - Custom structured event\n{% enddocs %}\n\n{% docs se_label %}\nThe object of the action (eg. first_name, register, voter_reg_status) - Custom structured event\n{% enddocs %}\n\n{% docs session_id %}\nUnique identifier of the user's session\n{% enddocs %}\n\n{% docs session_counter %}\nHow many sessions a user has started\n{% enddocs %}\n\n{% docs browser_size %}\nWhich type of browser a user is using (eg. Mobile, Desktop)\n{% enddocs %}\n\n{% docs northstar_id %}\nThe Northstar ID of the user who generated the event\n{% enddocs %}\n\n{% docs device_id %}\nID of the device used\n{% enddocs %}\n\n{% docs referrer_host %}\nURL host of the referring site (eg. google.com)\n{% enddocs %}\n\n{% docs referrer_path %}\nURL path from referring site (eg. /10-stats-on-teen-drug-and-alcohol-use/)\n{% enddocs %}\n\n{% docs referrer_source %}\nReferrer source name (eg. Google, Facebook)\n{% enddocs %}\n\n{% docs utm_source %}\nTracks where the traffic is coming from. (eg. scholarship_listing, Facebook)\n{% enddocs %}\n\n{% docs utm_medium %}\nHow the traffic got to the platform (eg. referral, CPC)\n{% enddocs %}\n\n{% docs utm_campaign %}\nTracks which campaign the traffic was generated by. Shows up in Google Analytics as Campaign Name (eg. editorial_newsletter)\n{% enddocs %}\n\n{% docs url %}\nURL of campaign (eg. https://dosome.click/nyn5m7)\n{% enddocs %}\n\n{% docs modal_type %}\nNULL or SURVEY_MODAL\n{% enddocs %}\n\n{% docs landing_datetime %}\nWhen the session started in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs ending_datetime %}\nWhen the session ended in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs session_duration_seconds %}\nSession duration in seconds\n{% enddocs %}\n\n{% docs num_pages_views %}\nNumber of pages viewed in session\n{% enddocs %}\n\n{% docs landing_page %}\nFirst page the user viewed in the session (eg. /us/facts/11-facts-about-bp-oil-spill)\n{% enddocs %}\n\n{% docs exit_page %}\n\"Which page the user ended or exited their session from (eg. /us/campaigns/green-your-getaway)\"\n{% enddocs %}\n\n{% docs days_since_last_session %}\n\"Days since their last session.\"\n{% enddocs %}\n\n{% docs post_type %}\nType of post, (e.g. photo, voter-reg)\n{% enddocs %}\n\n{% docs noun %}\nNoun that corresponds to the item in the call to action that was delivered. (e.g. drawings, tweets)\n{% enddocs %}\n\n{% docs verb %}\nVerb corresponding to the action the user took. (e.g. shared, sent, taken)\n{% enddocs %}\n\n{% docs deleted_at %}\nDate time in UTC when a user deleted their post.\n{% enddocs %}\n\n{% docs _fivetran_deleted %}\nMarks rows that were deleted in the source table\n{% enddocs %}\n\n{% docs _fivetran_synced %}\n(UTC timestamp) keeps track of when each row was last successfully synced\n{% enddocs %}\n\n{% docs reportback %}\nWhether the post is a reportback \n{% enddocs %}\n\n{% docs active %}\nWhether the user is active \n{% enddocs %}\n\n{% docs anonymous %}\nWhether the user is anonymous when making the post \n{% enddocs %}\n\n{% docs callpower_campaign_id %}\nUnique ID corresponding to the Callpower campaign. Callpower allows users to record messages for their representatives.\n{% enddocs %}\n\n{% docs quiz %}\nWhether the post is a quiz \n{% enddocs %}\n\n{% docs action_type %}\nType of action the user took. (e.g. share-something, donate-something)\n{% enddocs %}\n\n{% docs online %}\nWhether the action is a online as opposed to IRL.\n{% enddocs %}\n\n{% docs time_commitment %}\nEstimated time required to do the action (e.g. 3.0+, <0.5)\n{% enddocs %}\n\n{% docs num_signups %}\nQuantity of campaign signups\n{% enddocs %}\n\n{% docs most_recent_signup %}\nTimestamp of the most recent signup in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs num_rbs %}\nQuantity of reportbacks for the user\n{% enddocs %}\n\n{% docs total_quantity %}\nTotal quantity of items in reportbacks\n{% enddocs %}\n\n{% docs most_recent_rb %}\nWhen the most recent reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs first_rb %}\nWhen the first reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs avg_time_betw_rbs %}\nCalculated average time between reportbacks.\n{% enddocs %}\n\n{% docs avg_days_next_action_after_rb %}\nCalculated average days until next action after reportback\n{% enddocs %}\n\n{% docs days_to_next_action_after_last_rb %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs most_recent_mam_action %}\nMost recent monthly active member qualifying action in UTC (eg. 2018-01-01 12:00:00).\n{% enddocs %}\n\n{% docs most_recent_email_open %}\nMost recent email open in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs most_recent_all_actions %}\nMost recent timestamp of any action in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs last_action_is_rb %}\nWhether the last action the user took was a reportback\n{% enddocs %}\n\n{% docs days_since_last_action %}\nDays since the user's last action\n{% enddocs %}\n\n{% docs time_to_first_rb %}\nHow much time after registering until the user's first reportback\n{% enddocs %}\n\n{% docs sms_unsubscribed_at %}\nTimestamp of when user unsubscribed from SMS messaging\n{% enddocs %}\n\n{% docs user_unsubscribed_at %}\nTimestamp of when user unsubscribed from email or sms\n{% enddocs %}\n\n{% docs voter_reg_acquisition %}\nWhether the user was an acquisition through voter registration efforts. \n{% enddocs %}\n\n{% docs last_logged_in %}\nDate time in UTC when user last logged in to Northstar\n{% enddocs %}\n\n{% docs last_accessed %}\nDate time in UTC when user last access the website\n{% enddocs %}\n\n{% docs last_messaged_at %}\nDate time in UTC when user was last sent a message via SMS or email\n{% enddocs %}\n\n{% docs facebook_id %}\nUser's facebook id\n{% enddocs %}\n\n{% docs mobile %}\nUsers's mobile phone number\n{% enddocs %}\n\n{% docs birthdate %}\nUser's birthdate\n{% enddocs %}\n\n{% docs first_name %}\nUser's first name\n{% enddocs %}\n\n{% docs last_name %}\nUser's last name\n{% enddocs %}\n\n{% docs voter_registration_status %}\nUser's registration status. (e.g. registration_complete, confirmed, uncertain) \n{% enddocs %}\n\n{% docs finish_with_state %}\nIf the registrant was eligible to use and passed through to complete their registration with their state\u2019s OVR system, it will be indicated in this field (direct quote from Rock-The-Vote documentation). Yes/No value in field.\n{% enddocs %}\n\n{% docs reportback_volume %}\nThis field returns 1 if non voter-reg action, since campaigns team only counts those a 1 reportback. If voter-reg action, we want to count quantity of post as number of registered voters.\n{% enddocs %}\n\n{% docs address_street_1 %}\nFirst line of user's street address\n{% enddocs %}\n\n{% docs address_street_2 %}\nSecond line of user's street address\n{% enddocs %}\n\n{% docs city %}\nUser's city\n{% enddocs %}\n\n{% docs state %}\nUser's state\n{% enddocs %}\n\n{% docs country %}\nUser's country\n{% enddocs %}\n\n{% docs language %}\nUser's language\n{% enddocs %}\n\n{% docs cio_status %}\nStatus of user from CIO. (e.g. customer_subscribed, customer_unsubscribed)\n{% enddocs %}\n\n{% docs cio_status_timestamp %}\nTimestamp when users's status was updated.\n{% enddocs %}\n\n{% docs sms_status %}\nCurrent SMS status. (e.g. undeliverable, unknown)\n{% enddocs %}\n\n{% docs source_detail %}\nDetails of the origin of the user. (e.g. tell_a_friend, other, opt_in_path/197981)\n{% enddocs %}\n\n{% docs badges %}\nWhether the user has any badges. \n{% enddocs %}\n\n{% docs refer_friends %}\nWhether the user is a part of the refer a friend campaign. \n{% enddocs %}\n\n{% docs subscribed_member %}\nWhether the user is subscribed. \n{% enddocs %}\n\n{% docs last_updated_at %}\nTimestamp when users's was updated.\n{% enddocs %}\n\n{% docs school_id %}\nUnique identifier for the user's school. This info comes from the school finder.\n{% enddocs %}\n\n{% docs newsletter_topic %}\nNewsletter topic. (e.g. community, lifestyle)\n{% enddocs %}\n\n{% docs user_agent %}\nFull user agent string for a user's browser (e.g. \"Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:24.0) Gecko/20100101 Firefox/24.0\")\n{% enddocs %}\n\n{% docs drupal_id %}\nOld Drupal user ID\n{% enddocs %}\n\n{% docs campaigns %}\nCampaigns a user is signed up for.\n{% enddocs %}\n\n{% docs audit %}\nA very useful field with data containing information about changes to a user, e.g. timestamps when the user subscribed and unsubscribed.\n{% enddocs %}\n\n{% docs voting_plan_status %}\nThe indication of the user's plan to vote, e.g. voting, not_voting, cant_vote\n{% enddocs %}\n\n{% docs voting_plan_time_of_day %}\nThe time of day when the user plans to vote, e.g morning, afternoon, evening\n{% enddocs %}\n\n{% docs voting_plan_method_of_transport %}\nHow the user plans to get to their polling place. e.g. walk, drive\n{% enddocs %}\n\n{% docs voting_plan_attending_with %}\nWith Whom the user plans to go voting, e.g. family, friends, alone\n{% enddocs %}\n\n{% docs feature_flags %}\nJSON containing info on features like badges and refer-a-friend.\n{% enddocs %}\n\n{% docs dbt_updated_at %}\nDBT snapshot table data. The updated_at timestamp of the source record when this snapshot row was inserted.\n{% enddocs %}\n\n{% docs dbt_scd_id %}\nDBT snapshot table data. A unique key generated for each snapshotted record.\n{% enddocs %}\n\n{% docs dbt_valid_from %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this snapshot row was first inserted\n{% enddocs %}\n\n{% docs dbt_valid_to %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this row row became invalidated.\n{% enddocs %}\n\n{% docs google_id %}\nUser's Google ID obtained from login.\n{% enddocs %}\n\n{% docs causes %}\nCauses in which a user is interested. e.g. animal welfare, education, mental_health\n{% enddocs %}\n\n{% docs email_subscription_status %}\nEmail subscription status of the user\n{% enddocs %}\n\n{% docs role %}\nUser's role, e.g. user, staff\n{% enddocs %}\n\n{% docs cio_backfilled %}\nWhether this user's data was backfilled from CIO\n{% enddocs %}\n\n{% docs addr_source %}\nWhere the user submitted their address, e.g. sms, GDPR\n{% enddocs %}\n\n{% docs email_subscription_topics %}\nEmail subscription topics correspond to categories in CIO in which the user is interested. e.g. lifestyle, community, scholarship\n{% enddocs %}\n\n{% docs sms_paused %}\nWhether we've paused sending sms messages to the user.\n{% enddocs %}\n\n\n\n\n", "name": "type", "unique_id": "ds_dbt.type", "block_contents": "Type of post (e.g. photo)"}, "ds_dbt.action": {"root_path": "/Users/mrich/projects/quasar/quasar/dbt", "resource_type": "docs", "path": "schema.md", "original_file_path": "models/schema.md", "package_name": "ds_dbt", "file_contents": "\n{% docs click_id %}\nThis is a unique identifier for each click\n{% enddocs %}\n\n{% docs click_time %}\nTimestamp when user clicked.\n{% enddocs %}\n\n{% docs shortened %}\nShortened URL\n{% enddocs %}\n\n{% docs target_url %}\nURL where the user will be directed\n{% enddocs %}\n\n{% docs broadcast_id %}\nID of the broadcast that generated the shortened URL\n{% enddocs %}\n\n{% docs source %}\nSource of the URL (e.g. SMS, web), origin of the post (e.g. phoenix-web, phoenix-ashes, sms), or source where user was acquired. (e.g. sms, phoenix-next)\n{% enddocs %}\n\n{% docs interaction_type %}\nHow the user interacted with the link (e.g. preview, click)\n{% enddocs %}\n\n{% docs id %}\nUnique identifier for the post\n{% enddocs %}\n\n{% docs type %}\nType of post (e.g. photo)\n{% enddocs %}\n\n{% docs action %}\nPost action (e.g. DefendDreamers_Nov9_CongressCalls, GunViolence2018_Feb15_ParklandResponse)\n{% enddocs %}\n\n{% docs status %}\nPost status (e.g. accepted, rejected)\n{% enddocs %}\n\n{% docs quantity %}\nNumerical quantity of items specified in the call to action (e.g. 10, 200)\n{% enddocs %}\n\n{% docs source_bucket %}\nGrouping bucket for origin of the post (e.g. web, sms) \n{% enddocs %}\n\n{% docs created_at %}\nWhen the item was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs updated_at %}\nWhen the item was updated in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs text %}\nText of the post (e.g. \"Zoo animals and a super hero trying to help too!\") \n{% enddocs %}\n\n{% docs signup_id %}\nUnique identifier for the signup \n{% enddocs %}\n\n{% docs post_class %}\nClass of the signup (e.g. \"photo - default\", \"phone-call - DefendDreamers_Jan16_BothBodies\")\n{% enddocs %}\n\n{% docs is_accepted %}\nWhether the post has been accepted to be displayed to the public on the website\n{% enddocs %}\n\n{% docs action_id %}\nInternal identifier of the action \n{% enddocs %}\n\n{% docs location %}\nLocation where the action takes place (e.g. US-NY)\n{% enddocs %}\n\n{% docs postal_code %}\nPostal code where the action takes place\n{% enddocs %}\n\n{% docs is_reportback %}\nWhether the post is a reportback. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs civic_action %}\nWhether the post is a Civic Action. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs scholarship_entry %}\nWhether the post is a Scholarship Entry. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs why_participated %}\nWhy the user participated in this action. Entered by the user.\n{% enddocs %}\n\n{% docs details %}\nDetails about the post. Contains contentfulId and other information (e.g. {\"campaignContentfulId\":\"6ATBgGEQEeJoIcxs1qbwaC\"})\n{% enddocs %}\n\n{% docs email %}\nEmail address of the user.\n{% enddocs %}\n\n{% docs source_details %}\nDetails about the source of the item. This is sometimes represented as a JSON object, and for other tables like Turbovote its represented as a string. (e.g. \"{\"contentful_id\":\"3CTLlXfbwtz1FOMpl31SKV\",\"utm_source\":\"scholarship_listing\",\"utm_medium\":\"referral\",\"utm_campaign\":\"fastweb_2019_08\"}\", newsletter_456)\n{% enddocs %}\n\n{% docs campaign_id %}\nThis is a unique identifier for the campaign\n{% enddocs %}\n\n{% docs campaign_run_id %}\nUnique identifier for the campaign run\n{% enddocs %}\n\n{% docs campaign_name %}\nName of the campaign\n{% enddocs %}\n\n{% docs campaign_cause %}\nCampaign cause (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_run_start_date %}\nStart date of the campaign run\n{% enddocs %}\n\n{% docs campaign_run_end_date %}\nEnd date of the campaign run\n{% enddocs %}\n\n{% docs campaign_created_date %}\nWhen the campaign was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs campaign_node_id %}\nInternal unique node id for the campaign\n{% enddocs %}\n\n{% docs campaign_node_id_title %}\nCampaign title\n{% enddocs %}\n\n{% docs campaign_run_id_title %}\nTitle of the campaign run\n{% enddocs %}\n\n{% docs campaign_action_type %}\nCampaign action type (eg. Make Something, Share Something)\n{% enddocs %}\n\n{% docs campaign_cause_type %}\nCampaign cause type (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_noun %}\nNoun applicable to the user's action\n{% enddocs %}\n\n{% docs campaign_verb %}\nVerb describing the action the user should take\n{% enddocs %}\n\n{% docs campaign_cta %}\nCampaign's call to action\n{% enddocs %}\n\n{% docs campaign_language %}\n\"Language in which the campaign is available\"\n{% enddocs %}\n\n{% docs agent_id %}\nIf set, the content type of the picture the member is sending us. Exp. image/png.\n{% enddocs %}\n\n{% docs attachment_content_type %}\nIf set, the handle of the Front agent this outbound support message is from.\n{% enddocs %}\n\n{% docs topic %}\nHolds a reference to the **last** campaign topic the member's conversation was in. This is useful to allow members to talk to Gambit and get quick responses (through Rivescript), without Gambit completely forgetting what state the member's interaction with a campaign topic was in.\n{% enddocs %}\n\n{% docs action_serial_id %}\nSerial id for the user's action. Depends on the source of the action. May be the bertly click id, sms message id, etc.\n{% enddocs %}\n\n{% docs channel %}\nChannel for the user's action. Depends on the source of the action. (e.g. web, sms)\n{% enddocs %}\n\n{% docs first_action_month %}\nMonth during which the user took their first action. \n{% enddocs %}\n\n{% docs event_id %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs event_source %}\nApplication source for event (eg. Phoenix, Northstar)\n{% enddocs %}\n\n{% docs event_datetime %}\nWhen the event occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs event_name %}\nName of the event (eg. northstar_submitted_register, https://docs.google.com/spreadsheets/d/1lm-fGrIm85nUTxSojqyCt_Ehmm1zEbViFhKpxcJiz1A/edit#gid=406441516)\n{% enddocs %}\n\n{% docs event_type %}\nType of event (pv = 'Page View', se = 'Structured Event')\n{% enddocs %}\n\n{% docs host %}\nURL host where event occurred (eg. www.dosomething.org or identity.dosomething.org)\n{% enddocs %}\n\n{% docs path %}\nURL path event occurred at (eg. /login or /us/campaigns/huddle-for-heroes)\n{% enddocs %}\n\n{% docs query_parameters %}\nOptional query parameters for the request (eg. query=huddle)\n{% enddocs %}\n\n{% docs se_category %}\nCategory of event (eg. focused_field, authentication) - Custom structured event\n{% enddocs %}\n\n{% docs se_action %}\nAction performed / event name (eg. form_submitted, action_failed) - Custom structured event\n{% enddocs %}\n\n{% docs se_label %}\nThe object of the action (eg. first_name, register, voter_reg_status) - Custom structured event\n{% enddocs %}\n\n{% docs session_id %}\nUnique identifier of the user's session\n{% enddocs %}\n\n{% docs session_counter %}\nHow many sessions a user has started\n{% enddocs %}\n\n{% docs browser_size %}\nWhich type of browser a user is using (eg. Mobile, Desktop)\n{% enddocs %}\n\n{% docs northstar_id %}\nThe Northstar ID of the user who generated the event\n{% enddocs %}\n\n{% docs device_id %}\nID of the device used\n{% enddocs %}\n\n{% docs referrer_host %}\nURL host of the referring site (eg. google.com)\n{% enddocs %}\n\n{% docs referrer_path %}\nURL path from referring site (eg. /10-stats-on-teen-drug-and-alcohol-use/)\n{% enddocs %}\n\n{% docs referrer_source %}\nReferrer source name (eg. Google, Facebook)\n{% enddocs %}\n\n{% docs utm_source %}\nTracks where the traffic is coming from. (eg. scholarship_listing, Facebook)\n{% enddocs %}\n\n{% docs utm_medium %}\nHow the traffic got to the platform (eg. referral, CPC)\n{% enddocs %}\n\n{% docs utm_campaign %}\nTracks which campaign the traffic was generated by. Shows up in Google Analytics as Campaign Name (eg. editorial_newsletter)\n{% enddocs %}\n\n{% docs url %}\nURL of campaign (eg. https://dosome.click/nyn5m7)\n{% enddocs %}\n\n{% docs modal_type %}\nNULL or SURVEY_MODAL\n{% enddocs %}\n\n{% docs landing_datetime %}\nWhen the session started in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs ending_datetime %}\nWhen the session ended in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs session_duration_seconds %}\nSession duration in seconds\n{% enddocs %}\n\n{% docs num_pages_views %}\nNumber of pages viewed in session\n{% enddocs %}\n\n{% docs landing_page %}\nFirst page the user viewed in the session (eg. /us/facts/11-facts-about-bp-oil-spill)\n{% enddocs %}\n\n{% docs exit_page %}\n\"Which page the user ended or exited their session from (eg. /us/campaigns/green-your-getaway)\"\n{% enddocs %}\n\n{% docs days_since_last_session %}\n\"Days since their last session.\"\n{% enddocs %}\n\n{% docs post_type %}\nType of post, (e.g. photo, voter-reg)\n{% enddocs %}\n\n{% docs noun %}\nNoun that corresponds to the item in the call to action that was delivered. (e.g. drawings, tweets)\n{% enddocs %}\n\n{% docs verb %}\nVerb corresponding to the action the user took. (e.g. shared, sent, taken)\n{% enddocs %}\n\n{% docs deleted_at %}\nDate time in UTC when a user deleted their post.\n{% enddocs %}\n\n{% docs _fivetran_deleted %}\nMarks rows that were deleted in the source table\n{% enddocs %}\n\n{% docs _fivetran_synced %}\n(UTC timestamp) keeps track of when each row was last successfully synced\n{% enddocs %}\n\n{% docs reportback %}\nWhether the post is a reportback \n{% enddocs %}\n\n{% docs active %}\nWhether the user is active \n{% enddocs %}\n\n{% docs anonymous %}\nWhether the user is anonymous when making the post \n{% enddocs %}\n\n{% docs callpower_campaign_id %}\nUnique ID corresponding to the Callpower campaign. Callpower allows users to record messages for their representatives.\n{% enddocs %}\n\n{% docs quiz %}\nWhether the post is a quiz \n{% enddocs %}\n\n{% docs action_type %}\nType of action the user took. (e.g. share-something, donate-something)\n{% enddocs %}\n\n{% docs online %}\nWhether the action is a online as opposed to IRL.\n{% enddocs %}\n\n{% docs time_commitment %}\nEstimated time required to do the action (e.g. 3.0+, <0.5)\n{% enddocs %}\n\n{% docs num_signups %}\nQuantity of campaign signups\n{% enddocs %}\n\n{% docs most_recent_signup %}\nTimestamp of the most recent signup in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs num_rbs %}\nQuantity of reportbacks for the user\n{% enddocs %}\n\n{% docs total_quantity %}\nTotal quantity of items in reportbacks\n{% enddocs %}\n\n{% docs most_recent_rb %}\nWhen the most recent reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs first_rb %}\nWhen the first reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs avg_time_betw_rbs %}\nCalculated average time between reportbacks.\n{% enddocs %}\n\n{% docs avg_days_next_action_after_rb %}\nCalculated average days until next action after reportback\n{% enddocs %}\n\n{% docs days_to_next_action_after_last_rb %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs most_recent_mam_action %}\nMost recent monthly active member qualifying action in UTC (eg. 2018-01-01 12:00:00).\n{% enddocs %}\n\n{% docs most_recent_email_open %}\nMost recent email open in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs most_recent_all_actions %}\nMost recent timestamp of any action in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs last_action_is_rb %}\nWhether the last action the user took was a reportback\n{% enddocs %}\n\n{% docs days_since_last_action %}\nDays since the user's last action\n{% enddocs %}\n\n{% docs time_to_first_rb %}\nHow much time after registering until the user's first reportback\n{% enddocs %}\n\n{% docs sms_unsubscribed_at %}\nTimestamp of when user unsubscribed from SMS messaging\n{% enddocs %}\n\n{% docs user_unsubscribed_at %}\nTimestamp of when user unsubscribed from email or sms\n{% enddocs %}\n\n{% docs voter_reg_acquisition %}\nWhether the user was an acquisition through voter registration efforts. \n{% enddocs %}\n\n{% docs last_logged_in %}\nDate time in UTC when user last logged in to Northstar\n{% enddocs %}\n\n{% docs last_accessed %}\nDate time in UTC when user last access the website\n{% enddocs %}\n\n{% docs last_messaged_at %}\nDate time in UTC when user was last sent a message via SMS or email\n{% enddocs %}\n\n{% docs facebook_id %}\nUser's facebook id\n{% enddocs %}\n\n{% docs mobile %}\nUsers's mobile phone number\n{% enddocs %}\n\n{% docs birthdate %}\nUser's birthdate\n{% enddocs %}\n\n{% docs first_name %}\nUser's first name\n{% enddocs %}\n\n{% docs last_name %}\nUser's last name\n{% enddocs %}\n\n{% docs voter_registration_status %}\nUser's registration status. (e.g. registration_complete, confirmed, uncertain) \n{% enddocs %}\n\n{% docs finish_with_state %}\nIf the registrant was eligible to use and passed through to complete their registration with their state\u2019s OVR system, it will be indicated in this field (direct quote from Rock-The-Vote documentation). Yes/No value in field.\n{% enddocs %}\n\n{% docs reportback_volume %}\nThis field returns 1 if non voter-reg action, since campaigns team only counts those a 1 reportback. If voter-reg action, we want to count quantity of post as number of registered voters.\n{% enddocs %}\n\n{% docs address_street_1 %}\nFirst line of user's street address\n{% enddocs %}\n\n{% docs address_street_2 %}\nSecond line of user's street address\n{% enddocs %}\n\n{% docs city %}\nUser's city\n{% enddocs %}\n\n{% docs state %}\nUser's state\n{% enddocs %}\n\n{% docs country %}\nUser's country\n{% enddocs %}\n\n{% docs language %}\nUser's language\n{% enddocs %}\n\n{% docs cio_status %}\nStatus of user from CIO. (e.g. customer_subscribed, customer_unsubscribed)\n{% enddocs %}\n\n{% docs cio_status_timestamp %}\nTimestamp when users's status was updated.\n{% enddocs %}\n\n{% docs sms_status %}\nCurrent SMS status. (e.g. undeliverable, unknown)\n{% enddocs %}\n\n{% docs source_detail %}\nDetails of the origin of the user. (e.g. tell_a_friend, other, opt_in_path/197981)\n{% enddocs %}\n\n{% docs badges %}\nWhether the user has any badges. \n{% enddocs %}\n\n{% docs refer_friends %}\nWhether the user is a part of the refer a friend campaign. \n{% enddocs %}\n\n{% docs subscribed_member %}\nWhether the user is subscribed. \n{% enddocs %}\n\n{% docs last_updated_at %}\nTimestamp when users's was updated.\n{% enddocs %}\n\n{% docs school_id %}\nUnique identifier for the user's school. This info comes from the school finder.\n{% enddocs %}\n\n{% docs newsletter_topic %}\nNewsletter topic. (e.g. community, lifestyle)\n{% enddocs %}\n\n{% docs user_agent %}\nFull user agent string for a user's browser (e.g. \"Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:24.0) Gecko/20100101 Firefox/24.0\")\n{% enddocs %}\n\n{% docs drupal_id %}\nOld Drupal user ID\n{% enddocs %}\n\n{% docs campaigns %}\nCampaigns a user is signed up for.\n{% enddocs %}\n\n{% docs audit %}\nA very useful field with data containing information about changes to a user, e.g. timestamps when the user subscribed and unsubscribed.\n{% enddocs %}\n\n{% docs voting_plan_status %}\nThe indication of the user's plan to vote, e.g. voting, not_voting, cant_vote\n{% enddocs %}\n\n{% docs voting_plan_time_of_day %}\nThe time of day when the user plans to vote, e.g morning, afternoon, evening\n{% enddocs %}\n\n{% docs voting_plan_method_of_transport %}\nHow the user plans to get to their polling place. e.g. walk, drive\n{% enddocs %}\n\n{% docs voting_plan_attending_with %}\nWith Whom the user plans to go voting, e.g. family, friends, alone\n{% enddocs %}\n\n{% docs feature_flags %}\nJSON containing info on features like badges and refer-a-friend.\n{% enddocs %}\n\n{% docs dbt_updated_at %}\nDBT snapshot table data. The updated_at timestamp of the source record when this snapshot row was inserted.\n{% enddocs %}\n\n{% docs dbt_scd_id %}\nDBT snapshot table data. A unique key generated for each snapshotted record.\n{% enddocs %}\n\n{% docs dbt_valid_from %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this snapshot row was first inserted\n{% enddocs %}\n\n{% docs dbt_valid_to %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this row row became invalidated.\n{% enddocs %}\n\n{% docs google_id %}\nUser's Google ID obtained from login.\n{% enddocs %}\n\n{% docs causes %}\nCauses in which a user is interested. e.g. animal welfare, education, mental_health\n{% enddocs %}\n\n{% docs email_subscription_status %}\nEmail subscription status of the user\n{% enddocs %}\n\n{% docs role %}\nUser's role, e.g. user, staff\n{% enddocs %}\n\n{% docs cio_backfilled %}\nWhether this user's data was backfilled from CIO\n{% enddocs %}\n\n{% docs addr_source %}\nWhere the user submitted their address, e.g. sms, GDPR\n{% enddocs %}\n\n{% docs email_subscription_topics %}\nEmail subscription topics correspond to categories in CIO in which the user is interested. e.g. lifestyle, community, scholarship\n{% enddocs %}\n\n{% docs sms_paused %}\nWhether we've paused sending sms messages to the user.\n{% enddocs %}\n\n\n\n\n", "name": "action", "unique_id": "ds_dbt.action", "block_contents": "Post action (e.g. DefendDreamers_Nov9_CongressCalls, GunViolence2018_Feb15_ParklandResponse)"}, "ds_dbt.status": {"root_path": "/Users/mrich/projects/quasar/quasar/dbt", "resource_type": "docs", "path": "schema.md", "original_file_path": "models/schema.md", "package_name": "ds_dbt", "file_contents": "\n{% docs click_id %}\nThis is a unique identifier for each click\n{% enddocs %}\n\n{% docs click_time %}\nTimestamp when user clicked.\n{% enddocs %}\n\n{% docs shortened %}\nShortened URL\n{% enddocs %}\n\n{% docs target_url %}\nURL where the user will be directed\n{% enddocs %}\n\n{% docs broadcast_id %}\nID of the broadcast that generated the shortened URL\n{% enddocs %}\n\n{% docs source %}\nSource of the URL (e.g. SMS, web), origin of the post (e.g. phoenix-web, phoenix-ashes, sms), or source where user was acquired. (e.g. sms, phoenix-next)\n{% enddocs %}\n\n{% docs interaction_type %}\nHow the user interacted with the link (e.g. preview, click)\n{% enddocs %}\n\n{% docs id %}\nUnique identifier for the post\n{% enddocs %}\n\n{% docs type %}\nType of post (e.g. photo)\n{% enddocs %}\n\n{% docs action %}\nPost action (e.g. DefendDreamers_Nov9_CongressCalls, GunViolence2018_Feb15_ParklandResponse)\n{% enddocs %}\n\n{% docs status %}\nPost status (e.g. accepted, rejected)\n{% enddocs %}\n\n{% docs quantity %}\nNumerical quantity of items specified in the call to action (e.g. 10, 200)\n{% enddocs %}\n\n{% docs source_bucket %}\nGrouping bucket for origin of the post (e.g. web, sms) \n{% enddocs %}\n\n{% docs created_at %}\nWhen the item was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs updated_at %}\nWhen the item was updated in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs text %}\nText of the post (e.g. \"Zoo animals and a super hero trying to help too!\") \n{% enddocs %}\n\n{% docs signup_id %}\nUnique identifier for the signup \n{% enddocs %}\n\n{% docs post_class %}\nClass of the signup (e.g. \"photo - default\", \"phone-call - DefendDreamers_Jan16_BothBodies\")\n{% enddocs %}\n\n{% docs is_accepted %}\nWhether the post has been accepted to be displayed to the public on the website\n{% enddocs %}\n\n{% docs action_id %}\nInternal identifier of the action \n{% enddocs %}\n\n{% docs location %}\nLocation where the action takes place (e.g. US-NY)\n{% enddocs %}\n\n{% docs postal_code %}\nPostal code where the action takes place\n{% enddocs %}\n\n{% docs is_reportback %}\nWhether the post is a reportback. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs civic_action %}\nWhether the post is a Civic Action. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs scholarship_entry %}\nWhether the post is a Scholarship Entry. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs why_participated %}\nWhy the user participated in this action. Entered by the user.\n{% enddocs %}\n\n{% docs details %}\nDetails about the post. Contains contentfulId and other information (e.g. {\"campaignContentfulId\":\"6ATBgGEQEeJoIcxs1qbwaC\"})\n{% enddocs %}\n\n{% docs email %}\nEmail address of the user.\n{% enddocs %}\n\n{% docs source_details %}\nDetails about the source of the item. This is sometimes represented as a JSON object, and for other tables like Turbovote its represented as a string. (e.g. \"{\"contentful_id\":\"3CTLlXfbwtz1FOMpl31SKV\",\"utm_source\":\"scholarship_listing\",\"utm_medium\":\"referral\",\"utm_campaign\":\"fastweb_2019_08\"}\", newsletter_456)\n{% enddocs %}\n\n{% docs campaign_id %}\nThis is a unique identifier for the campaign\n{% enddocs %}\n\n{% docs campaign_run_id %}\nUnique identifier for the campaign run\n{% enddocs %}\n\n{% docs campaign_name %}\nName of the campaign\n{% enddocs %}\n\n{% docs campaign_cause %}\nCampaign cause (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_run_start_date %}\nStart date of the campaign run\n{% enddocs %}\n\n{% docs campaign_run_end_date %}\nEnd date of the campaign run\n{% enddocs %}\n\n{% docs campaign_created_date %}\nWhen the campaign was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs campaign_node_id %}\nInternal unique node id for the campaign\n{% enddocs %}\n\n{% docs campaign_node_id_title %}\nCampaign title\n{% enddocs %}\n\n{% docs campaign_run_id_title %}\nTitle of the campaign run\n{% enddocs %}\n\n{% docs campaign_action_type %}\nCampaign action type (eg. Make Something, Share Something)\n{% enddocs %}\n\n{% docs campaign_cause_type %}\nCampaign cause type (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_noun %}\nNoun applicable to the user's action\n{% enddocs %}\n\n{% docs campaign_verb %}\nVerb describing the action the user should take\n{% enddocs %}\n\n{% docs campaign_cta %}\nCampaign's call to action\n{% enddocs %}\n\n{% docs campaign_language %}\n\"Language in which the campaign is available\"\n{% enddocs %}\n\n{% docs agent_id %}\nIf set, the content type of the picture the member is sending us. Exp. image/png.\n{% enddocs %}\n\n{% docs attachment_content_type %}\nIf set, the handle of the Front agent this outbound support message is from.\n{% enddocs %}\n\n{% docs topic %}\nHolds a reference to the **last** campaign topic the member's conversation was in. This is useful to allow members to talk to Gambit and get quick responses (through Rivescript), without Gambit completely forgetting what state the member's interaction with a campaign topic was in.\n{% enddocs %}\n\n{% docs action_serial_id %}\nSerial id for the user's action. Depends on the source of the action. May be the bertly click id, sms message id, etc.\n{% enddocs %}\n\n{% docs channel %}\nChannel for the user's action. Depends on the source of the action. (e.g. web, sms)\n{% enddocs %}\n\n{% docs first_action_month %}\nMonth during which the user took their first action. \n{% enddocs %}\n\n{% docs event_id %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs event_source %}\nApplication source for event (eg. Phoenix, Northstar)\n{% enddocs %}\n\n{% docs event_datetime %}\nWhen the event occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs event_name %}\nName of the event (eg. northstar_submitted_register, https://docs.google.com/spreadsheets/d/1lm-fGrIm85nUTxSojqyCt_Ehmm1zEbViFhKpxcJiz1A/edit#gid=406441516)\n{% enddocs %}\n\n{% docs event_type %}\nType of event (pv = 'Page View', se = 'Structured Event')\n{% enddocs %}\n\n{% docs host %}\nURL host where event occurred (eg. www.dosomething.org or identity.dosomething.org)\n{% enddocs %}\n\n{% docs path %}\nURL path event occurred at (eg. /login or /us/campaigns/huddle-for-heroes)\n{% enddocs %}\n\n{% docs query_parameters %}\nOptional query parameters for the request (eg. query=huddle)\n{% enddocs %}\n\n{% docs se_category %}\nCategory of event (eg. focused_field, authentication) - Custom structured event\n{% enddocs %}\n\n{% docs se_action %}\nAction performed / event name (eg. form_submitted, action_failed) - Custom structured event\n{% enddocs %}\n\n{% docs se_label %}\nThe object of the action (eg. first_name, register, voter_reg_status) - Custom structured event\n{% enddocs %}\n\n{% docs session_id %}\nUnique identifier of the user's session\n{% enddocs %}\n\n{% docs session_counter %}\nHow many sessions a user has started\n{% enddocs %}\n\n{% docs browser_size %}\nWhich type of browser a user is using (eg. Mobile, Desktop)\n{% enddocs %}\n\n{% docs northstar_id %}\nThe Northstar ID of the user who generated the event\n{% enddocs %}\n\n{% docs device_id %}\nID of the device used\n{% enddocs %}\n\n{% docs referrer_host %}\nURL host of the referring site (eg. google.com)\n{% enddocs %}\n\n{% docs referrer_path %}\nURL path from referring site (eg. /10-stats-on-teen-drug-and-alcohol-use/)\n{% enddocs %}\n\n{% docs referrer_source %}\nReferrer source name (eg. Google, Facebook)\n{% enddocs %}\n\n{% docs utm_source %}\nTracks where the traffic is coming from. (eg. scholarship_listing, Facebook)\n{% enddocs %}\n\n{% docs utm_medium %}\nHow the traffic got to the platform (eg. referral, CPC)\n{% enddocs %}\n\n{% docs utm_campaign %}\nTracks which campaign the traffic was generated by. Shows up in Google Analytics as Campaign Name (eg. editorial_newsletter)\n{% enddocs %}\n\n{% docs url %}\nURL of campaign (eg. https://dosome.click/nyn5m7)\n{% enddocs %}\n\n{% docs modal_type %}\nNULL or SURVEY_MODAL\n{% enddocs %}\n\n{% docs landing_datetime %}\nWhen the session started in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs ending_datetime %}\nWhen the session ended in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs session_duration_seconds %}\nSession duration in seconds\n{% enddocs %}\n\n{% docs num_pages_views %}\nNumber of pages viewed in session\n{% enddocs %}\n\n{% docs landing_page %}\nFirst page the user viewed in the session (eg. /us/facts/11-facts-about-bp-oil-spill)\n{% enddocs %}\n\n{% docs exit_page %}\n\"Which page the user ended or exited their session from (eg. /us/campaigns/green-your-getaway)\"\n{% enddocs %}\n\n{% docs days_since_last_session %}\n\"Days since their last session.\"\n{% enddocs %}\n\n{% docs post_type %}\nType of post, (e.g. photo, voter-reg)\n{% enddocs %}\n\n{% docs noun %}\nNoun that corresponds to the item in the call to action that was delivered. (e.g. drawings, tweets)\n{% enddocs %}\n\n{% docs verb %}\nVerb corresponding to the action the user took. (e.g. shared, sent, taken)\n{% enddocs %}\n\n{% docs deleted_at %}\nDate time in UTC when a user deleted their post.\n{% enddocs %}\n\n{% docs _fivetran_deleted %}\nMarks rows that were deleted in the source table\n{% enddocs %}\n\n{% docs _fivetran_synced %}\n(UTC timestamp) keeps track of when each row was last successfully synced\n{% enddocs %}\n\n{% docs reportback %}\nWhether the post is a reportback \n{% enddocs %}\n\n{% docs active %}\nWhether the user is active \n{% enddocs %}\n\n{% docs anonymous %}\nWhether the user is anonymous when making the post \n{% enddocs %}\n\n{% docs callpower_campaign_id %}\nUnique ID corresponding to the Callpower campaign. Callpower allows users to record messages for their representatives.\n{% enddocs %}\n\n{% docs quiz %}\nWhether the post is a quiz \n{% enddocs %}\n\n{% docs action_type %}\nType of action the user took. (e.g. share-something, donate-something)\n{% enddocs %}\n\n{% docs online %}\nWhether the action is a online as opposed to IRL.\n{% enddocs %}\n\n{% docs time_commitment %}\nEstimated time required to do the action (e.g. 3.0+, <0.5)\n{% enddocs %}\n\n{% docs num_signups %}\nQuantity of campaign signups\n{% enddocs %}\n\n{% docs most_recent_signup %}\nTimestamp of the most recent signup in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs num_rbs %}\nQuantity of reportbacks for the user\n{% enddocs %}\n\n{% docs total_quantity %}\nTotal quantity of items in reportbacks\n{% enddocs %}\n\n{% docs most_recent_rb %}\nWhen the most recent reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs first_rb %}\nWhen the first reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs avg_time_betw_rbs %}\nCalculated average time between reportbacks.\n{% enddocs %}\n\n{% docs avg_days_next_action_after_rb %}\nCalculated average days until next action after reportback\n{% enddocs %}\n\n{% docs days_to_next_action_after_last_rb %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs most_recent_mam_action %}\nMost recent monthly active member qualifying action in UTC (eg. 2018-01-01 12:00:00).\n{% enddocs %}\n\n{% docs most_recent_email_open %}\nMost recent email open in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs most_recent_all_actions %}\nMost recent timestamp of any action in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs last_action_is_rb %}\nWhether the last action the user took was a reportback\n{% enddocs %}\n\n{% docs days_since_last_action %}\nDays since the user's last action\n{% enddocs %}\n\n{% docs time_to_first_rb %}\nHow much time after registering until the user's first reportback\n{% enddocs %}\n\n{% docs sms_unsubscribed_at %}\nTimestamp of when user unsubscribed from SMS messaging\n{% enddocs %}\n\n{% docs user_unsubscribed_at %}\nTimestamp of when user unsubscribed from email or sms\n{% enddocs %}\n\n{% docs voter_reg_acquisition %}\nWhether the user was an acquisition through voter registration efforts. \n{% enddocs %}\n\n{% docs last_logged_in %}\nDate time in UTC when user last logged in to Northstar\n{% enddocs %}\n\n{% docs last_accessed %}\nDate time in UTC when user last access the website\n{% enddocs %}\n\n{% docs last_messaged_at %}\nDate time in UTC when user was last sent a message via SMS or email\n{% enddocs %}\n\n{% docs facebook_id %}\nUser's facebook id\n{% enddocs %}\n\n{% docs mobile %}\nUsers's mobile phone number\n{% enddocs %}\n\n{% docs birthdate %}\nUser's birthdate\n{% enddocs %}\n\n{% docs first_name %}\nUser's first name\n{% enddocs %}\n\n{% docs last_name %}\nUser's last name\n{% enddocs %}\n\n{% docs voter_registration_status %}\nUser's registration status. (e.g. registration_complete, confirmed, uncertain) \n{% enddocs %}\n\n{% docs finish_with_state %}\nIf the registrant was eligible to use and passed through to complete their registration with their state\u2019s OVR system, it will be indicated in this field (direct quote from Rock-The-Vote documentation). Yes/No value in field.\n{% enddocs %}\n\n{% docs reportback_volume %}\nThis field returns 1 if non voter-reg action, since campaigns team only counts those a 1 reportback. If voter-reg action, we want to count quantity of post as number of registered voters.\n{% enddocs %}\n\n{% docs address_street_1 %}\nFirst line of user's street address\n{% enddocs %}\n\n{% docs address_street_2 %}\nSecond line of user's street address\n{% enddocs %}\n\n{% docs city %}\nUser's city\n{% enddocs %}\n\n{% docs state %}\nUser's state\n{% enddocs %}\n\n{% docs country %}\nUser's country\n{% enddocs %}\n\n{% docs language %}\nUser's language\n{% enddocs %}\n\n{% docs cio_status %}\nStatus of user from CIO. (e.g. customer_subscribed, customer_unsubscribed)\n{% enddocs %}\n\n{% docs cio_status_timestamp %}\nTimestamp when users's status was updated.\n{% enddocs %}\n\n{% docs sms_status %}\nCurrent SMS status. (e.g. undeliverable, unknown)\n{% enddocs %}\n\n{% docs source_detail %}\nDetails of the origin of the user. (e.g. tell_a_friend, other, opt_in_path/197981)\n{% enddocs %}\n\n{% docs badges %}\nWhether the user has any badges. \n{% enddocs %}\n\n{% docs refer_friends %}\nWhether the user is a part of the refer a friend campaign. \n{% enddocs %}\n\n{% docs subscribed_member %}\nWhether the user is subscribed. \n{% enddocs %}\n\n{% docs last_updated_at %}\nTimestamp when users's was updated.\n{% enddocs %}\n\n{% docs school_id %}\nUnique identifier for the user's school. This info comes from the school finder.\n{% enddocs %}\n\n{% docs newsletter_topic %}\nNewsletter topic. (e.g. community, lifestyle)\n{% enddocs %}\n\n{% docs user_agent %}\nFull user agent string for a user's browser (e.g. \"Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:24.0) Gecko/20100101 Firefox/24.0\")\n{% enddocs %}\n\n{% docs drupal_id %}\nOld Drupal user ID\n{% enddocs %}\n\n{% docs campaigns %}\nCampaigns a user is signed up for.\n{% enddocs %}\n\n{% docs audit %}\nA very useful field with data containing information about changes to a user, e.g. timestamps when the user subscribed and unsubscribed.\n{% enddocs %}\n\n{% docs voting_plan_status %}\nThe indication of the user's plan to vote, e.g. voting, not_voting, cant_vote\n{% enddocs %}\n\n{% docs voting_plan_time_of_day %}\nThe time of day when the user plans to vote, e.g morning, afternoon, evening\n{% enddocs %}\n\n{% docs voting_plan_method_of_transport %}\nHow the user plans to get to their polling place. e.g. walk, drive\n{% enddocs %}\n\n{% docs voting_plan_attending_with %}\nWith Whom the user plans to go voting, e.g. family, friends, alone\n{% enddocs %}\n\n{% docs feature_flags %}\nJSON containing info on features like badges and refer-a-friend.\n{% enddocs %}\n\n{% docs dbt_updated_at %}\nDBT snapshot table data. The updated_at timestamp of the source record when this snapshot row was inserted.\n{% enddocs %}\n\n{% docs dbt_scd_id %}\nDBT snapshot table data. A unique key generated for each snapshotted record.\n{% enddocs %}\n\n{% docs dbt_valid_from %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this snapshot row was first inserted\n{% enddocs %}\n\n{% docs dbt_valid_to %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this row row became invalidated.\n{% enddocs %}\n\n{% docs google_id %}\nUser's Google ID obtained from login.\n{% enddocs %}\n\n{% docs causes %}\nCauses in which a user is interested. e.g. animal welfare, education, mental_health\n{% enddocs %}\n\n{% docs email_subscription_status %}\nEmail subscription status of the user\n{% enddocs %}\n\n{% docs role %}\nUser's role, e.g. user, staff\n{% enddocs %}\n\n{% docs cio_backfilled %}\nWhether this user's data was backfilled from CIO\n{% enddocs %}\n\n{% docs addr_source %}\nWhere the user submitted their address, e.g. sms, GDPR\n{% enddocs %}\n\n{% docs email_subscription_topics %}\nEmail subscription topics correspond to categories in CIO in which the user is interested. e.g. lifestyle, community, scholarship\n{% enddocs %}\n\n{% docs sms_paused %}\nWhether we've paused sending sms messages to the user.\n{% enddocs %}\n\n\n\n\n", "name": "status", "unique_id": "ds_dbt.status", "block_contents": "Post status (e.g. accepted, rejected)"}, "ds_dbt.quantity": {"root_path": "/Users/mrich/projects/quasar/quasar/dbt", "resource_type": "docs", "path": "schema.md", "original_file_path": "models/schema.md", "package_name": "ds_dbt", "file_contents": "\n{% docs click_id %}\nThis is a unique identifier for each click\n{% enddocs %}\n\n{% docs click_time %}\nTimestamp when user clicked.\n{% enddocs %}\n\n{% docs shortened %}\nShortened URL\n{% enddocs %}\n\n{% docs target_url %}\nURL where the user will be directed\n{% enddocs %}\n\n{% docs broadcast_id %}\nID of the broadcast that generated the shortened URL\n{% enddocs %}\n\n{% docs source %}\nSource of the URL (e.g. SMS, web), origin of the post (e.g. phoenix-web, phoenix-ashes, sms), or source where user was acquired. (e.g. sms, phoenix-next)\n{% enddocs %}\n\n{% docs interaction_type %}\nHow the user interacted with the link (e.g. preview, click)\n{% enddocs %}\n\n{% docs id %}\nUnique identifier for the post\n{% enddocs %}\n\n{% docs type %}\nType of post (e.g. photo)\n{% enddocs %}\n\n{% docs action %}\nPost action (e.g. DefendDreamers_Nov9_CongressCalls, GunViolence2018_Feb15_ParklandResponse)\n{% enddocs %}\n\n{% docs status %}\nPost status (e.g. accepted, rejected)\n{% enddocs %}\n\n{% docs quantity %}\nNumerical quantity of items specified in the call to action (e.g. 10, 200)\n{% enddocs %}\n\n{% docs source_bucket %}\nGrouping bucket for origin of the post (e.g. web, sms) \n{% enddocs %}\n\n{% docs created_at %}\nWhen the item was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs updated_at %}\nWhen the item was updated in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs text %}\nText of the post (e.g. \"Zoo animals and a super hero trying to help too!\") \n{% enddocs %}\n\n{% docs signup_id %}\nUnique identifier for the signup \n{% enddocs %}\n\n{% docs post_class %}\nClass of the signup (e.g. \"photo - default\", \"phone-call - DefendDreamers_Jan16_BothBodies\")\n{% enddocs %}\n\n{% docs is_accepted %}\nWhether the post has been accepted to be displayed to the public on the website\n{% enddocs %}\n\n{% docs action_id %}\nInternal identifier of the action \n{% enddocs %}\n\n{% docs location %}\nLocation where the action takes place (e.g. US-NY)\n{% enddocs %}\n\n{% docs postal_code %}\nPostal code where the action takes place\n{% enddocs %}\n\n{% docs is_reportback %}\nWhether the post is a reportback. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs civic_action %}\nWhether the post is a Civic Action. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs scholarship_entry %}\nWhether the post is a Scholarship Entry. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs why_participated %}\nWhy the user participated in this action. Entered by the user.\n{% enddocs %}\n\n{% docs details %}\nDetails about the post. Contains contentfulId and other information (e.g. {\"campaignContentfulId\":\"6ATBgGEQEeJoIcxs1qbwaC\"})\n{% enddocs %}\n\n{% docs email %}\nEmail address of the user.\n{% enddocs %}\n\n{% docs source_details %}\nDetails about the source of the item. This is sometimes represented as a JSON object, and for other tables like Turbovote its represented as a string. (e.g. \"{\"contentful_id\":\"3CTLlXfbwtz1FOMpl31SKV\",\"utm_source\":\"scholarship_listing\",\"utm_medium\":\"referral\",\"utm_campaign\":\"fastweb_2019_08\"}\", newsletter_456)\n{% enddocs %}\n\n{% docs campaign_id %}\nThis is a unique identifier for the campaign\n{% enddocs %}\n\n{% docs campaign_run_id %}\nUnique identifier for the campaign run\n{% enddocs %}\n\n{% docs campaign_name %}\nName of the campaign\n{% enddocs %}\n\n{% docs campaign_cause %}\nCampaign cause (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_run_start_date %}\nStart date of the campaign run\n{% enddocs %}\n\n{% docs campaign_run_end_date %}\nEnd date of the campaign run\n{% enddocs %}\n\n{% docs campaign_created_date %}\nWhen the campaign was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs campaign_node_id %}\nInternal unique node id for the campaign\n{% enddocs %}\n\n{% docs campaign_node_id_title %}\nCampaign title\n{% enddocs %}\n\n{% docs campaign_run_id_title %}\nTitle of the campaign run\n{% enddocs %}\n\n{% docs campaign_action_type %}\nCampaign action type (eg. Make Something, Share Something)\n{% enddocs %}\n\n{% docs campaign_cause_type %}\nCampaign cause type (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_noun %}\nNoun applicable to the user's action\n{% enddocs %}\n\n{% docs campaign_verb %}\nVerb describing the action the user should take\n{% enddocs %}\n\n{% docs campaign_cta %}\nCampaign's call to action\n{% enddocs %}\n\n{% docs campaign_language %}\n\"Language in which the campaign is available\"\n{% enddocs %}\n\n{% docs agent_id %}\nIf set, the content type of the picture the member is sending us. Exp. image/png.\n{% enddocs %}\n\n{% docs attachment_content_type %}\nIf set, the handle of the Front agent this outbound support message is from.\n{% enddocs %}\n\n{% docs topic %}\nHolds a reference to the **last** campaign topic the member's conversation was in. This is useful to allow members to talk to Gambit and get quick responses (through Rivescript), without Gambit completely forgetting what state the member's interaction with a campaign topic was in.\n{% enddocs %}\n\n{% docs action_serial_id %}\nSerial id for the user's action. Depends on the source of the action. May be the bertly click id, sms message id, etc.\n{% enddocs %}\n\n{% docs channel %}\nChannel for the user's action. Depends on the source of the action. (e.g. web, sms)\n{% enddocs %}\n\n{% docs first_action_month %}\nMonth during which the user took their first action. \n{% enddocs %}\n\n{% docs event_id %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs event_source %}\nApplication source for event (eg. Phoenix, Northstar)\n{% enddocs %}\n\n{% docs event_datetime %}\nWhen the event occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs event_name %}\nName of the event (eg. northstar_submitted_register, https://docs.google.com/spreadsheets/d/1lm-fGrIm85nUTxSojqyCt_Ehmm1zEbViFhKpxcJiz1A/edit#gid=406441516)\n{% enddocs %}\n\n{% docs event_type %}\nType of event (pv = 'Page View', se = 'Structured Event')\n{% enddocs %}\n\n{% docs host %}\nURL host where event occurred (eg. www.dosomething.org or identity.dosomething.org)\n{% enddocs %}\n\n{% docs path %}\nURL path event occurred at (eg. /login or /us/campaigns/huddle-for-heroes)\n{% enddocs %}\n\n{% docs query_parameters %}\nOptional query parameters for the request (eg. query=huddle)\n{% enddocs %}\n\n{% docs se_category %}\nCategory of event (eg. focused_field, authentication) - Custom structured event\n{% enddocs %}\n\n{% docs se_action %}\nAction performed / event name (eg. form_submitted, action_failed) - Custom structured event\n{% enddocs %}\n\n{% docs se_label %}\nThe object of the action (eg. first_name, register, voter_reg_status) - Custom structured event\n{% enddocs %}\n\n{% docs session_id %}\nUnique identifier of the user's session\n{% enddocs %}\n\n{% docs session_counter %}\nHow many sessions a user has started\n{% enddocs %}\n\n{% docs browser_size %}\nWhich type of browser a user is using (eg. Mobile, Desktop)\n{% enddocs %}\n\n{% docs northstar_id %}\nThe Northstar ID of the user who generated the event\n{% enddocs %}\n\n{% docs device_id %}\nID of the device used\n{% enddocs %}\n\n{% docs referrer_host %}\nURL host of the referring site (eg. google.com)\n{% enddocs %}\n\n{% docs referrer_path %}\nURL path from referring site (eg. /10-stats-on-teen-drug-and-alcohol-use/)\n{% enddocs %}\n\n{% docs referrer_source %}\nReferrer source name (eg. Google, Facebook)\n{% enddocs %}\n\n{% docs utm_source %}\nTracks where the traffic is coming from. (eg. scholarship_listing, Facebook)\n{% enddocs %}\n\n{% docs utm_medium %}\nHow the traffic got to the platform (eg. referral, CPC)\n{% enddocs %}\n\n{% docs utm_campaign %}\nTracks which campaign the traffic was generated by. Shows up in Google Analytics as Campaign Name (eg. editorial_newsletter)\n{% enddocs %}\n\n{% docs url %}\nURL of campaign (eg. https://dosome.click/nyn5m7)\n{% enddocs %}\n\n{% docs modal_type %}\nNULL or SURVEY_MODAL\n{% enddocs %}\n\n{% docs landing_datetime %}\nWhen the session started in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs ending_datetime %}\nWhen the session ended in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs session_duration_seconds %}\nSession duration in seconds\n{% enddocs %}\n\n{% docs num_pages_views %}\nNumber of pages viewed in session\n{% enddocs %}\n\n{% docs landing_page %}\nFirst page the user viewed in the session (eg. /us/facts/11-facts-about-bp-oil-spill)\n{% enddocs %}\n\n{% docs exit_page %}\n\"Which page the user ended or exited their session from (eg. /us/campaigns/green-your-getaway)\"\n{% enddocs %}\n\n{% docs days_since_last_session %}\n\"Days since their last session.\"\n{% enddocs %}\n\n{% docs post_type %}\nType of post, (e.g. photo, voter-reg)\n{% enddocs %}\n\n{% docs noun %}\nNoun that corresponds to the item in the call to action that was delivered. (e.g. drawings, tweets)\n{% enddocs %}\n\n{% docs verb %}\nVerb corresponding to the action the user took. (e.g. shared, sent, taken)\n{% enddocs %}\n\n{% docs deleted_at %}\nDate time in UTC when a user deleted their post.\n{% enddocs %}\n\n{% docs _fivetran_deleted %}\nMarks rows that were deleted in the source table\n{% enddocs %}\n\n{% docs _fivetran_synced %}\n(UTC timestamp) keeps track of when each row was last successfully synced\n{% enddocs %}\n\n{% docs reportback %}\nWhether the post is a reportback \n{% enddocs %}\n\n{% docs active %}\nWhether the user is active \n{% enddocs %}\n\n{% docs anonymous %}\nWhether the user is anonymous when making the post \n{% enddocs %}\n\n{% docs callpower_campaign_id %}\nUnique ID corresponding to the Callpower campaign. Callpower allows users to record messages for their representatives.\n{% enddocs %}\n\n{% docs quiz %}\nWhether the post is a quiz \n{% enddocs %}\n\n{% docs action_type %}\nType of action the user took. (e.g. share-something, donate-something)\n{% enddocs %}\n\n{% docs online %}\nWhether the action is a online as opposed to IRL.\n{% enddocs %}\n\n{% docs time_commitment %}\nEstimated time required to do the action (e.g. 3.0+, <0.5)\n{% enddocs %}\n\n{% docs num_signups %}\nQuantity of campaign signups\n{% enddocs %}\n\n{% docs most_recent_signup %}\nTimestamp of the most recent signup in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs num_rbs %}\nQuantity of reportbacks for the user\n{% enddocs %}\n\n{% docs total_quantity %}\nTotal quantity of items in reportbacks\n{% enddocs %}\n\n{% docs most_recent_rb %}\nWhen the most recent reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs first_rb %}\nWhen the first reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs avg_time_betw_rbs %}\nCalculated average time between reportbacks.\n{% enddocs %}\n\n{% docs avg_days_next_action_after_rb %}\nCalculated average days until next action after reportback\n{% enddocs %}\n\n{% docs days_to_next_action_after_last_rb %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs most_recent_mam_action %}\nMost recent monthly active member qualifying action in UTC (eg. 2018-01-01 12:00:00).\n{% enddocs %}\n\n{% docs most_recent_email_open %}\nMost recent email open in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs most_recent_all_actions %}\nMost recent timestamp of any action in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs last_action_is_rb %}\nWhether the last action the user took was a reportback\n{% enddocs %}\n\n{% docs days_since_last_action %}\nDays since the user's last action\n{% enddocs %}\n\n{% docs time_to_first_rb %}\nHow much time after registering until the user's first reportback\n{% enddocs %}\n\n{% docs sms_unsubscribed_at %}\nTimestamp of when user unsubscribed from SMS messaging\n{% enddocs %}\n\n{% docs user_unsubscribed_at %}\nTimestamp of when user unsubscribed from email or sms\n{% enddocs %}\n\n{% docs voter_reg_acquisition %}\nWhether the user was an acquisition through voter registration efforts. \n{% enddocs %}\n\n{% docs last_logged_in %}\nDate time in UTC when user last logged in to Northstar\n{% enddocs %}\n\n{% docs last_accessed %}\nDate time in UTC when user last access the website\n{% enddocs %}\n\n{% docs last_messaged_at %}\nDate time in UTC when user was last sent a message via SMS or email\n{% enddocs %}\n\n{% docs facebook_id %}\nUser's facebook id\n{% enddocs %}\n\n{% docs mobile %}\nUsers's mobile phone number\n{% enddocs %}\n\n{% docs birthdate %}\nUser's birthdate\n{% enddocs %}\n\n{% docs first_name %}\nUser's first name\n{% enddocs %}\n\n{% docs last_name %}\nUser's last name\n{% enddocs %}\n\n{% docs voter_registration_status %}\nUser's registration status. (e.g. registration_complete, confirmed, uncertain) \n{% enddocs %}\n\n{% docs finish_with_state %}\nIf the registrant was eligible to use and passed through to complete their registration with their state\u2019s OVR system, it will be indicated in this field (direct quote from Rock-The-Vote documentation). Yes/No value in field.\n{% enddocs %}\n\n{% docs reportback_volume %}\nThis field returns 1 if non voter-reg action, since campaigns team only counts those a 1 reportback. If voter-reg action, we want to count quantity of post as number of registered voters.\n{% enddocs %}\n\n{% docs address_street_1 %}\nFirst line of user's street address\n{% enddocs %}\n\n{% docs address_street_2 %}\nSecond line of user's street address\n{% enddocs %}\n\n{% docs city %}\nUser's city\n{% enddocs %}\n\n{% docs state %}\nUser's state\n{% enddocs %}\n\n{% docs country %}\nUser's country\n{% enddocs %}\n\n{% docs language %}\nUser's language\n{% enddocs %}\n\n{% docs cio_status %}\nStatus of user from CIO. (e.g. customer_subscribed, customer_unsubscribed)\n{% enddocs %}\n\n{% docs cio_status_timestamp %}\nTimestamp when users's status was updated.\n{% enddocs %}\n\n{% docs sms_status %}\nCurrent SMS status. (e.g. undeliverable, unknown)\n{% enddocs %}\n\n{% docs source_detail %}\nDetails of the origin of the user. (e.g. tell_a_friend, other, opt_in_path/197981)\n{% enddocs %}\n\n{% docs badges %}\nWhether the user has any badges. \n{% enddocs %}\n\n{% docs refer_friends %}\nWhether the user is a part of the refer a friend campaign. \n{% enddocs %}\n\n{% docs subscribed_member %}\nWhether the user is subscribed. \n{% enddocs %}\n\n{% docs last_updated_at %}\nTimestamp when users's was updated.\n{% enddocs %}\n\n{% docs school_id %}\nUnique identifier for the user's school. This info comes from the school finder.\n{% enddocs %}\n\n{% docs newsletter_topic %}\nNewsletter topic. (e.g. community, lifestyle)\n{% enddocs %}\n\n{% docs user_agent %}\nFull user agent string for a user's browser (e.g. \"Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:24.0) Gecko/20100101 Firefox/24.0\")\n{% enddocs %}\n\n{% docs drupal_id %}\nOld Drupal user ID\n{% enddocs %}\n\n{% docs campaigns %}\nCampaigns a user is signed up for.\n{% enddocs %}\n\n{% docs audit %}\nA very useful field with data containing information about changes to a user, e.g. timestamps when the user subscribed and unsubscribed.\n{% enddocs %}\n\n{% docs voting_plan_status %}\nThe indication of the user's plan to vote, e.g. voting, not_voting, cant_vote\n{% enddocs %}\n\n{% docs voting_plan_time_of_day %}\nThe time of day when the user plans to vote, e.g morning, afternoon, evening\n{% enddocs %}\n\n{% docs voting_plan_method_of_transport %}\nHow the user plans to get to their polling place. e.g. walk, drive\n{% enddocs %}\n\n{% docs voting_plan_attending_with %}\nWith Whom the user plans to go voting, e.g. family, friends, alone\n{% enddocs %}\n\n{% docs feature_flags %}\nJSON containing info on features like badges and refer-a-friend.\n{% enddocs %}\n\n{% docs dbt_updated_at %}\nDBT snapshot table data. The updated_at timestamp of the source record when this snapshot row was inserted.\n{% enddocs %}\n\n{% docs dbt_scd_id %}\nDBT snapshot table data. A unique key generated for each snapshotted record.\n{% enddocs %}\n\n{% docs dbt_valid_from %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this snapshot row was first inserted\n{% enddocs %}\n\n{% docs dbt_valid_to %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this row row became invalidated.\n{% enddocs %}\n\n{% docs google_id %}\nUser's Google ID obtained from login.\n{% enddocs %}\n\n{% docs causes %}\nCauses in which a user is interested. e.g. animal welfare, education, mental_health\n{% enddocs %}\n\n{% docs email_subscription_status %}\nEmail subscription status of the user\n{% enddocs %}\n\n{% docs role %}\nUser's role, e.g. user, staff\n{% enddocs %}\n\n{% docs cio_backfilled %}\nWhether this user's data was backfilled from CIO\n{% enddocs %}\n\n{% docs addr_source %}\nWhere the user submitted their address, e.g. sms, GDPR\n{% enddocs %}\n\n{% docs email_subscription_topics %}\nEmail subscription topics correspond to categories in CIO in which the user is interested. e.g. lifestyle, community, scholarship\n{% enddocs %}\n\n{% docs sms_paused %}\nWhether we've paused sending sms messages to the user.\n{% enddocs %}\n\n\n\n\n", "name": "quantity", "unique_id": "ds_dbt.quantity", "block_contents": "Numerical quantity of items specified in the call to action (e.g. 10, 200)"}, "ds_dbt.source_bucket": {"root_path": "/Users/mrich/projects/quasar/quasar/dbt", "resource_type": "docs", "path": "schema.md", "original_file_path": "models/schema.md", "package_name": "ds_dbt", "file_contents": "\n{% docs click_id %}\nThis is a unique identifier for each click\n{% enddocs %}\n\n{% docs click_time %}\nTimestamp when user clicked.\n{% enddocs %}\n\n{% docs shortened %}\nShortened URL\n{% enddocs %}\n\n{% docs target_url %}\nURL where the user will be directed\n{% enddocs %}\n\n{% docs broadcast_id %}\nID of the broadcast that generated the shortened URL\n{% enddocs %}\n\n{% docs source %}\nSource of the URL (e.g. SMS, web), origin of the post (e.g. phoenix-web, phoenix-ashes, sms), or source where user was acquired. (e.g. sms, phoenix-next)\n{% enddocs %}\n\n{% docs interaction_type %}\nHow the user interacted with the link (e.g. preview, click)\n{% enddocs %}\n\n{% docs id %}\nUnique identifier for the post\n{% enddocs %}\n\n{% docs type %}\nType of post (e.g. photo)\n{% enddocs %}\n\n{% docs action %}\nPost action (e.g. DefendDreamers_Nov9_CongressCalls, GunViolence2018_Feb15_ParklandResponse)\n{% enddocs %}\n\n{% docs status %}\nPost status (e.g. accepted, rejected)\n{% enddocs %}\n\n{% docs quantity %}\nNumerical quantity of items specified in the call to action (e.g. 10, 200)\n{% enddocs %}\n\n{% docs source_bucket %}\nGrouping bucket for origin of the post (e.g. web, sms) \n{% enddocs %}\n\n{% docs created_at %}\nWhen the item was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs updated_at %}\nWhen the item was updated in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs text %}\nText of the post (e.g. \"Zoo animals and a super hero trying to help too!\") \n{% enddocs %}\n\n{% docs signup_id %}\nUnique identifier for the signup \n{% enddocs %}\n\n{% docs post_class %}\nClass of the signup (e.g. \"photo - default\", \"phone-call - DefendDreamers_Jan16_BothBodies\")\n{% enddocs %}\n\n{% docs is_accepted %}\nWhether the post has been accepted to be displayed to the public on the website\n{% enddocs %}\n\n{% docs action_id %}\nInternal identifier of the action \n{% enddocs %}\n\n{% docs location %}\nLocation where the action takes place (e.g. US-NY)\n{% enddocs %}\n\n{% docs postal_code %}\nPostal code where the action takes place\n{% enddocs %}\n\n{% docs is_reportback %}\nWhether the post is a reportback. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs civic_action %}\nWhether the post is a Civic Action. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs scholarship_entry %}\nWhether the post is a Scholarship Entry. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs why_participated %}\nWhy the user participated in this action. Entered by the user.\n{% enddocs %}\n\n{% docs details %}\nDetails about the post. Contains contentfulId and other information (e.g. {\"campaignContentfulId\":\"6ATBgGEQEeJoIcxs1qbwaC\"})\n{% enddocs %}\n\n{% docs email %}\nEmail address of the user.\n{% enddocs %}\n\n{% docs source_details %}\nDetails about the source of the item. This is sometimes represented as a JSON object, and for other tables like Turbovote its represented as a string. (e.g. \"{\"contentful_id\":\"3CTLlXfbwtz1FOMpl31SKV\",\"utm_source\":\"scholarship_listing\",\"utm_medium\":\"referral\",\"utm_campaign\":\"fastweb_2019_08\"}\", newsletter_456)\n{% enddocs %}\n\n{% docs campaign_id %}\nThis is a unique identifier for the campaign\n{% enddocs %}\n\n{% docs campaign_run_id %}\nUnique identifier for the campaign run\n{% enddocs %}\n\n{% docs campaign_name %}\nName of the campaign\n{% enddocs %}\n\n{% docs campaign_cause %}\nCampaign cause (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_run_start_date %}\nStart date of the campaign run\n{% enddocs %}\n\n{% docs campaign_run_end_date %}\nEnd date of the campaign run\n{% enddocs %}\n\n{% docs campaign_created_date %}\nWhen the campaign was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs campaign_node_id %}\nInternal unique node id for the campaign\n{% enddocs %}\n\n{% docs campaign_node_id_title %}\nCampaign title\n{% enddocs %}\n\n{% docs campaign_run_id_title %}\nTitle of the campaign run\n{% enddocs %}\n\n{% docs campaign_action_type %}\nCampaign action type (eg. Make Something, Share Something)\n{% enddocs %}\n\n{% docs campaign_cause_type %}\nCampaign cause type (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_noun %}\nNoun applicable to the user's action\n{% enddocs %}\n\n{% docs campaign_verb %}\nVerb describing the action the user should take\n{% enddocs %}\n\n{% docs campaign_cta %}\nCampaign's call to action\n{% enddocs %}\n\n{% docs campaign_language %}\n\"Language in which the campaign is available\"\n{% enddocs %}\n\n{% docs agent_id %}\nIf set, the content type of the picture the member is sending us. Exp. image/png.\n{% enddocs %}\n\n{% docs attachment_content_type %}\nIf set, the handle of the Front agent this outbound support message is from.\n{% enddocs %}\n\n{% docs topic %}\nHolds a reference to the **last** campaign topic the member's conversation was in. This is useful to allow members to talk to Gambit and get quick responses (through Rivescript), without Gambit completely forgetting what state the member's interaction with a campaign topic was in.\n{% enddocs %}\n\n{% docs action_serial_id %}\nSerial id for the user's action. Depends on the source of the action. May be the bertly click id, sms message id, etc.\n{% enddocs %}\n\n{% docs channel %}\nChannel for the user's action. Depends on the source of the action. (e.g. web, sms)\n{% enddocs %}\n\n{% docs first_action_month %}\nMonth during which the user took their first action. \n{% enddocs %}\n\n{% docs event_id %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs event_source %}\nApplication source for event (eg. Phoenix, Northstar)\n{% enddocs %}\n\n{% docs event_datetime %}\nWhen the event occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs event_name %}\nName of the event (eg. northstar_submitted_register, https://docs.google.com/spreadsheets/d/1lm-fGrIm85nUTxSojqyCt_Ehmm1zEbViFhKpxcJiz1A/edit#gid=406441516)\n{% enddocs %}\n\n{% docs event_type %}\nType of event (pv = 'Page View', se = 'Structured Event')\n{% enddocs %}\n\n{% docs host %}\nURL host where event occurred (eg. www.dosomething.org or identity.dosomething.org)\n{% enddocs %}\n\n{% docs path %}\nURL path event occurred at (eg. /login or /us/campaigns/huddle-for-heroes)\n{% enddocs %}\n\n{% docs query_parameters %}\nOptional query parameters for the request (eg. query=huddle)\n{% enddocs %}\n\n{% docs se_category %}\nCategory of event (eg. focused_field, authentication) - Custom structured event\n{% enddocs %}\n\n{% docs se_action %}\nAction performed / event name (eg. form_submitted, action_failed) - Custom structured event\n{% enddocs %}\n\n{% docs se_label %}\nThe object of the action (eg. first_name, register, voter_reg_status) - Custom structured event\n{% enddocs %}\n\n{% docs session_id %}\nUnique identifier of the user's session\n{% enddocs %}\n\n{% docs session_counter %}\nHow many sessions a user has started\n{% enddocs %}\n\n{% docs browser_size %}\nWhich type of browser a user is using (eg. Mobile, Desktop)\n{% enddocs %}\n\n{% docs northstar_id %}\nThe Northstar ID of the user who generated the event\n{% enddocs %}\n\n{% docs device_id %}\nID of the device used\n{% enddocs %}\n\n{% docs referrer_host %}\nURL host of the referring site (eg. google.com)\n{% enddocs %}\n\n{% docs referrer_path %}\nURL path from referring site (eg. /10-stats-on-teen-drug-and-alcohol-use/)\n{% enddocs %}\n\n{% docs referrer_source %}\nReferrer source name (eg. Google, Facebook)\n{% enddocs %}\n\n{% docs utm_source %}\nTracks where the traffic is coming from. (eg. scholarship_listing, Facebook)\n{% enddocs %}\n\n{% docs utm_medium %}\nHow the traffic got to the platform (eg. referral, CPC)\n{% enddocs %}\n\n{% docs utm_campaign %}\nTracks which campaign the traffic was generated by. Shows up in Google Analytics as Campaign Name (eg. editorial_newsletter)\n{% enddocs %}\n\n{% docs url %}\nURL of campaign (eg. https://dosome.click/nyn5m7)\n{% enddocs %}\n\n{% docs modal_type %}\nNULL or SURVEY_MODAL\n{% enddocs %}\n\n{% docs landing_datetime %}\nWhen the session started in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs ending_datetime %}\nWhen the session ended in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs session_duration_seconds %}\nSession duration in seconds\n{% enddocs %}\n\n{% docs num_pages_views %}\nNumber of pages viewed in session\n{% enddocs %}\n\n{% docs landing_page %}\nFirst page the user viewed in the session (eg. /us/facts/11-facts-about-bp-oil-spill)\n{% enddocs %}\n\n{% docs exit_page %}\n\"Which page the user ended or exited their session from (eg. /us/campaigns/green-your-getaway)\"\n{% enddocs %}\n\n{% docs days_since_last_session %}\n\"Days since their last session.\"\n{% enddocs %}\n\n{% docs post_type %}\nType of post, (e.g. photo, voter-reg)\n{% enddocs %}\n\n{% docs noun %}\nNoun that corresponds to the item in the call to action that was delivered. (e.g. drawings, tweets)\n{% enddocs %}\n\n{% docs verb %}\nVerb corresponding to the action the user took. (e.g. shared, sent, taken)\n{% enddocs %}\n\n{% docs deleted_at %}\nDate time in UTC when a user deleted their post.\n{% enddocs %}\n\n{% docs _fivetran_deleted %}\nMarks rows that were deleted in the source table\n{% enddocs %}\n\n{% docs _fivetran_synced %}\n(UTC timestamp) keeps track of when each row was last successfully synced\n{% enddocs %}\n\n{% docs reportback %}\nWhether the post is a reportback \n{% enddocs %}\n\n{% docs active %}\nWhether the user is active \n{% enddocs %}\n\n{% docs anonymous %}\nWhether the user is anonymous when making the post \n{% enddocs %}\n\n{% docs callpower_campaign_id %}\nUnique ID corresponding to the Callpower campaign. Callpower allows users to record messages for their representatives.\n{% enddocs %}\n\n{% docs quiz %}\nWhether the post is a quiz \n{% enddocs %}\n\n{% docs action_type %}\nType of action the user took. (e.g. share-something, donate-something)\n{% enddocs %}\n\n{% docs online %}\nWhether the action is a online as opposed to IRL.\n{% enddocs %}\n\n{% docs time_commitment %}\nEstimated time required to do the action (e.g. 3.0+, <0.5)\n{% enddocs %}\n\n{% docs num_signups %}\nQuantity of campaign signups\n{% enddocs %}\n\n{% docs most_recent_signup %}\nTimestamp of the most recent signup in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs num_rbs %}\nQuantity of reportbacks for the user\n{% enddocs %}\n\n{% docs total_quantity %}\nTotal quantity of items in reportbacks\n{% enddocs %}\n\n{% docs most_recent_rb %}\nWhen the most recent reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs first_rb %}\nWhen the first reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs avg_time_betw_rbs %}\nCalculated average time between reportbacks.\n{% enddocs %}\n\n{% docs avg_days_next_action_after_rb %}\nCalculated average days until next action after reportback\n{% enddocs %}\n\n{% docs days_to_next_action_after_last_rb %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs most_recent_mam_action %}\nMost recent monthly active member qualifying action in UTC (eg. 2018-01-01 12:00:00).\n{% enddocs %}\n\n{% docs most_recent_email_open %}\nMost recent email open in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs most_recent_all_actions %}\nMost recent timestamp of any action in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs last_action_is_rb %}\nWhether the last action the user took was a reportback\n{% enddocs %}\n\n{% docs days_since_last_action %}\nDays since the user's last action\n{% enddocs %}\n\n{% docs time_to_first_rb %}\nHow much time after registering until the user's first reportback\n{% enddocs %}\n\n{% docs sms_unsubscribed_at %}\nTimestamp of when user unsubscribed from SMS messaging\n{% enddocs %}\n\n{% docs user_unsubscribed_at %}\nTimestamp of when user unsubscribed from email or sms\n{% enddocs %}\n\n{% docs voter_reg_acquisition %}\nWhether the user was an acquisition through voter registration efforts. \n{% enddocs %}\n\n{% docs last_logged_in %}\nDate time in UTC when user last logged in to Northstar\n{% enddocs %}\n\n{% docs last_accessed %}\nDate time in UTC when user last access the website\n{% enddocs %}\n\n{% docs last_messaged_at %}\nDate time in UTC when user was last sent a message via SMS or email\n{% enddocs %}\n\n{% docs facebook_id %}\nUser's facebook id\n{% enddocs %}\n\n{% docs mobile %}\nUsers's mobile phone number\n{% enddocs %}\n\n{% docs birthdate %}\nUser's birthdate\n{% enddocs %}\n\n{% docs first_name %}\nUser's first name\n{% enddocs %}\n\n{% docs last_name %}\nUser's last name\n{% enddocs %}\n\n{% docs voter_registration_status %}\nUser's registration status. (e.g. registration_complete, confirmed, uncertain) \n{% enddocs %}\n\n{% docs finish_with_state %}\nIf the registrant was eligible to use and passed through to complete their registration with their state\u2019s OVR system, it will be indicated in this field (direct quote from Rock-The-Vote documentation). Yes/No value in field.\n{% enddocs %}\n\n{% docs reportback_volume %}\nThis field returns 1 if non voter-reg action, since campaigns team only counts those a 1 reportback. If voter-reg action, we want to count quantity of post as number of registered voters.\n{% enddocs %}\n\n{% docs address_street_1 %}\nFirst line of user's street address\n{% enddocs %}\n\n{% docs address_street_2 %}\nSecond line of user's street address\n{% enddocs %}\n\n{% docs city %}\nUser's city\n{% enddocs %}\n\n{% docs state %}\nUser's state\n{% enddocs %}\n\n{% docs country %}\nUser's country\n{% enddocs %}\n\n{% docs language %}\nUser's language\n{% enddocs %}\n\n{% docs cio_status %}\nStatus of user from CIO. (e.g. customer_subscribed, customer_unsubscribed)\n{% enddocs %}\n\n{% docs cio_status_timestamp %}\nTimestamp when users's status was updated.\n{% enddocs %}\n\n{% docs sms_status %}\nCurrent SMS status. (e.g. undeliverable, unknown)\n{% enddocs %}\n\n{% docs source_detail %}\nDetails of the origin of the user. (e.g. tell_a_friend, other, opt_in_path/197981)\n{% enddocs %}\n\n{% docs badges %}\nWhether the user has any badges. \n{% enddocs %}\n\n{% docs refer_friends %}\nWhether the user is a part of the refer a friend campaign. \n{% enddocs %}\n\n{% docs subscribed_member %}\nWhether the user is subscribed. \n{% enddocs %}\n\n{% docs last_updated_at %}\nTimestamp when users's was updated.\n{% enddocs %}\n\n{% docs school_id %}\nUnique identifier for the user's school. This info comes from the school finder.\n{% enddocs %}\n\n{% docs newsletter_topic %}\nNewsletter topic. (e.g. community, lifestyle)\n{% enddocs %}\n\n{% docs user_agent %}\nFull user agent string for a user's browser (e.g. \"Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:24.0) Gecko/20100101 Firefox/24.0\")\n{% enddocs %}\n\n{% docs drupal_id %}\nOld Drupal user ID\n{% enddocs %}\n\n{% docs campaigns %}\nCampaigns a user is signed up for.\n{% enddocs %}\n\n{% docs audit %}\nA very useful field with data containing information about changes to a user, e.g. timestamps when the user subscribed and unsubscribed.\n{% enddocs %}\n\n{% docs voting_plan_status %}\nThe indication of the user's plan to vote, e.g. voting, not_voting, cant_vote\n{% enddocs %}\n\n{% docs voting_plan_time_of_day %}\nThe time of day when the user plans to vote, e.g morning, afternoon, evening\n{% enddocs %}\n\n{% docs voting_plan_method_of_transport %}\nHow the user plans to get to their polling place. e.g. walk, drive\n{% enddocs %}\n\n{% docs voting_plan_attending_with %}\nWith Whom the user plans to go voting, e.g. family, friends, alone\n{% enddocs %}\n\n{% docs feature_flags %}\nJSON containing info on features like badges and refer-a-friend.\n{% enddocs %}\n\n{% docs dbt_updated_at %}\nDBT snapshot table data. The updated_at timestamp of the source record when this snapshot row was inserted.\n{% enddocs %}\n\n{% docs dbt_scd_id %}\nDBT snapshot table data. A unique key generated for each snapshotted record.\n{% enddocs %}\n\n{% docs dbt_valid_from %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this snapshot row was first inserted\n{% enddocs %}\n\n{% docs dbt_valid_to %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this row row became invalidated.\n{% enddocs %}\n\n{% docs google_id %}\nUser's Google ID obtained from login.\n{% enddocs %}\n\n{% docs causes %}\nCauses in which a user is interested. e.g. animal welfare, education, mental_health\n{% enddocs %}\n\n{% docs email_subscription_status %}\nEmail subscription status of the user\n{% enddocs %}\n\n{% docs role %}\nUser's role, e.g. user, staff\n{% enddocs %}\n\n{% docs cio_backfilled %}\nWhether this user's data was backfilled from CIO\n{% enddocs %}\n\n{% docs addr_source %}\nWhere the user submitted their address, e.g. sms, GDPR\n{% enddocs %}\n\n{% docs email_subscription_topics %}\nEmail subscription topics correspond to categories in CIO in which the user is interested. e.g. lifestyle, community, scholarship\n{% enddocs %}\n\n{% docs sms_paused %}\nWhether we've paused sending sms messages to the user.\n{% enddocs %}\n\n\n\n\n", "name": "source_bucket", "unique_id": "ds_dbt.source_bucket", "block_contents": "Grouping bucket for origin of the post (e.g. web, sms)"}, "ds_dbt.created_at": {"root_path": "/Users/mrich/projects/quasar/quasar/dbt", "resource_type": "docs", "path": "schema.md", "original_file_path": "models/schema.md", "package_name": "ds_dbt", "file_contents": "\n{% docs click_id %}\nThis is a unique identifier for each click\n{% enddocs %}\n\n{% docs click_time %}\nTimestamp when user clicked.\n{% enddocs %}\n\n{% docs shortened %}\nShortened URL\n{% enddocs %}\n\n{% docs target_url %}\nURL where the user will be directed\n{% enddocs %}\n\n{% docs broadcast_id %}\nID of the broadcast that generated the shortened URL\n{% enddocs %}\n\n{% docs source %}\nSource of the URL (e.g. SMS, web), origin of the post (e.g. phoenix-web, phoenix-ashes, sms), or source where user was acquired. (e.g. sms, phoenix-next)\n{% enddocs %}\n\n{% docs interaction_type %}\nHow the user interacted with the link (e.g. preview, click)\n{% enddocs %}\n\n{% docs id %}\nUnique identifier for the post\n{% enddocs %}\n\n{% docs type %}\nType of post (e.g. photo)\n{% enddocs %}\n\n{% docs action %}\nPost action (e.g. DefendDreamers_Nov9_CongressCalls, GunViolence2018_Feb15_ParklandResponse)\n{% enddocs %}\n\n{% docs status %}\nPost status (e.g. accepted, rejected)\n{% enddocs %}\n\n{% docs quantity %}\nNumerical quantity of items specified in the call to action (e.g. 10, 200)\n{% enddocs %}\n\n{% docs source_bucket %}\nGrouping bucket for origin of the post (e.g. web, sms) \n{% enddocs %}\n\n{% docs created_at %}\nWhen the item was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs updated_at %}\nWhen the item was updated in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs text %}\nText of the post (e.g. \"Zoo animals and a super hero trying to help too!\") \n{% enddocs %}\n\n{% docs signup_id %}\nUnique identifier for the signup \n{% enddocs %}\n\n{% docs post_class %}\nClass of the signup (e.g. \"photo - default\", \"phone-call - DefendDreamers_Jan16_BothBodies\")\n{% enddocs %}\n\n{% docs is_accepted %}\nWhether the post has been accepted to be displayed to the public on the website\n{% enddocs %}\n\n{% docs action_id %}\nInternal identifier of the action \n{% enddocs %}\n\n{% docs location %}\nLocation where the action takes place (e.g. US-NY)\n{% enddocs %}\n\n{% docs postal_code %}\nPostal code where the action takes place\n{% enddocs %}\n\n{% docs is_reportback %}\nWhether the post is a reportback. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs civic_action %}\nWhether the post is a Civic Action. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs scholarship_entry %}\nWhether the post is a Scholarship Entry. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs why_participated %}\nWhy the user participated in this action. Entered by the user.\n{% enddocs %}\n\n{% docs details %}\nDetails about the post. Contains contentfulId and other information (e.g. {\"campaignContentfulId\":\"6ATBgGEQEeJoIcxs1qbwaC\"})\n{% enddocs %}\n\n{% docs email %}\nEmail address of the user.\n{% enddocs %}\n\n{% docs source_details %}\nDetails about the source of the item. This is sometimes represented as a JSON object, and for other tables like Turbovote its represented as a string. (e.g. \"{\"contentful_id\":\"3CTLlXfbwtz1FOMpl31SKV\",\"utm_source\":\"scholarship_listing\",\"utm_medium\":\"referral\",\"utm_campaign\":\"fastweb_2019_08\"}\", newsletter_456)\n{% enddocs %}\n\n{% docs campaign_id %}\nThis is a unique identifier for the campaign\n{% enddocs %}\n\n{% docs campaign_run_id %}\nUnique identifier for the campaign run\n{% enddocs %}\n\n{% docs campaign_name %}\nName of the campaign\n{% enddocs %}\n\n{% docs campaign_cause %}\nCampaign cause (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_run_start_date %}\nStart date of the campaign run\n{% enddocs %}\n\n{% docs campaign_run_end_date %}\nEnd date of the campaign run\n{% enddocs %}\n\n{% docs campaign_created_date %}\nWhen the campaign was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs campaign_node_id %}\nInternal unique node id for the campaign\n{% enddocs %}\n\n{% docs campaign_node_id_title %}\nCampaign title\n{% enddocs %}\n\n{% docs campaign_run_id_title %}\nTitle of the campaign run\n{% enddocs %}\n\n{% docs campaign_action_type %}\nCampaign action type (eg. Make Something, Share Something)\n{% enddocs %}\n\n{% docs campaign_cause_type %}\nCampaign cause type (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_noun %}\nNoun applicable to the user's action\n{% enddocs %}\n\n{% docs campaign_verb %}\nVerb describing the action the user should take\n{% enddocs %}\n\n{% docs campaign_cta %}\nCampaign's call to action\n{% enddocs %}\n\n{% docs campaign_language %}\n\"Language in which the campaign is available\"\n{% enddocs %}\n\n{% docs agent_id %}\nIf set, the content type of the picture the member is sending us. Exp. image/png.\n{% enddocs %}\n\n{% docs attachment_content_type %}\nIf set, the handle of the Front agent this outbound support message is from.\n{% enddocs %}\n\n{% docs topic %}\nHolds a reference to the **last** campaign topic the member's conversation was in. This is useful to allow members to talk to Gambit and get quick responses (through Rivescript), without Gambit completely forgetting what state the member's interaction with a campaign topic was in.\n{% enddocs %}\n\n{% docs action_serial_id %}\nSerial id for the user's action. Depends on the source of the action. May be the bertly click id, sms message id, etc.\n{% enddocs %}\n\n{% docs channel %}\nChannel for the user's action. Depends on the source of the action. (e.g. web, sms)\n{% enddocs %}\n\n{% docs first_action_month %}\nMonth during which the user took their first action. \n{% enddocs %}\n\n{% docs event_id %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs event_source %}\nApplication source for event (eg. Phoenix, Northstar)\n{% enddocs %}\n\n{% docs event_datetime %}\nWhen the event occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs event_name %}\nName of the event (eg. northstar_submitted_register, https://docs.google.com/spreadsheets/d/1lm-fGrIm85nUTxSojqyCt_Ehmm1zEbViFhKpxcJiz1A/edit#gid=406441516)\n{% enddocs %}\n\n{% docs event_type %}\nType of event (pv = 'Page View', se = 'Structured Event')\n{% enddocs %}\n\n{% docs host %}\nURL host where event occurred (eg. www.dosomething.org or identity.dosomething.org)\n{% enddocs %}\n\n{% docs path %}\nURL path event occurred at (eg. /login or /us/campaigns/huddle-for-heroes)\n{% enddocs %}\n\n{% docs query_parameters %}\nOptional query parameters for the request (eg. query=huddle)\n{% enddocs %}\n\n{% docs se_category %}\nCategory of event (eg. focused_field, authentication) - Custom structured event\n{% enddocs %}\n\n{% docs se_action %}\nAction performed / event name (eg. form_submitted, action_failed) - Custom structured event\n{% enddocs %}\n\n{% docs se_label %}\nThe object of the action (eg. first_name, register, voter_reg_status) - Custom structured event\n{% enddocs %}\n\n{% docs session_id %}\nUnique identifier of the user's session\n{% enddocs %}\n\n{% docs session_counter %}\nHow many sessions a user has started\n{% enddocs %}\n\n{% docs browser_size %}\nWhich type of browser a user is using (eg. Mobile, Desktop)\n{% enddocs %}\n\n{% docs northstar_id %}\nThe Northstar ID of the user who generated the event\n{% enddocs %}\n\n{% docs device_id %}\nID of the device used\n{% enddocs %}\n\n{% docs referrer_host %}\nURL host of the referring site (eg. google.com)\n{% enddocs %}\n\n{% docs referrer_path %}\nURL path from referring site (eg. /10-stats-on-teen-drug-and-alcohol-use/)\n{% enddocs %}\n\n{% docs referrer_source %}\nReferrer source name (eg. Google, Facebook)\n{% enddocs %}\n\n{% docs utm_source %}\nTracks where the traffic is coming from. (eg. scholarship_listing, Facebook)\n{% enddocs %}\n\n{% docs utm_medium %}\nHow the traffic got to the platform (eg. referral, CPC)\n{% enddocs %}\n\n{% docs utm_campaign %}\nTracks which campaign the traffic was generated by. Shows up in Google Analytics as Campaign Name (eg. editorial_newsletter)\n{% enddocs %}\n\n{% docs url %}\nURL of campaign (eg. https://dosome.click/nyn5m7)\n{% enddocs %}\n\n{% docs modal_type %}\nNULL or SURVEY_MODAL\n{% enddocs %}\n\n{% docs landing_datetime %}\nWhen the session started in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs ending_datetime %}\nWhen the session ended in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs session_duration_seconds %}\nSession duration in seconds\n{% enddocs %}\n\n{% docs num_pages_views %}\nNumber of pages viewed in session\n{% enddocs %}\n\n{% docs landing_page %}\nFirst page the user viewed in the session (eg. /us/facts/11-facts-about-bp-oil-spill)\n{% enddocs %}\n\n{% docs exit_page %}\n\"Which page the user ended or exited their session from (eg. /us/campaigns/green-your-getaway)\"\n{% enddocs %}\n\n{% docs days_since_last_session %}\n\"Days since their last session.\"\n{% enddocs %}\n\n{% docs post_type %}\nType of post, (e.g. photo, voter-reg)\n{% enddocs %}\n\n{% docs noun %}\nNoun that corresponds to the item in the call to action that was delivered. (e.g. drawings, tweets)\n{% enddocs %}\n\n{% docs verb %}\nVerb corresponding to the action the user took. (e.g. shared, sent, taken)\n{% enddocs %}\n\n{% docs deleted_at %}\nDate time in UTC when a user deleted their post.\n{% enddocs %}\n\n{% docs _fivetran_deleted %}\nMarks rows that were deleted in the source table\n{% enddocs %}\n\n{% docs _fivetran_synced %}\n(UTC timestamp) keeps track of when each row was last successfully synced\n{% enddocs %}\n\n{% docs reportback %}\nWhether the post is a reportback \n{% enddocs %}\n\n{% docs active %}\nWhether the user is active \n{% enddocs %}\n\n{% docs anonymous %}\nWhether the user is anonymous when making the post \n{% enddocs %}\n\n{% docs callpower_campaign_id %}\nUnique ID corresponding to the Callpower campaign. Callpower allows users to record messages for their representatives.\n{% enddocs %}\n\n{% docs quiz %}\nWhether the post is a quiz \n{% enddocs %}\n\n{% docs action_type %}\nType of action the user took. (e.g. share-something, donate-something)\n{% enddocs %}\n\n{% docs online %}\nWhether the action is a online as opposed to IRL.\n{% enddocs %}\n\n{% docs time_commitment %}\nEstimated time required to do the action (e.g. 3.0+, <0.5)\n{% enddocs %}\n\n{% docs num_signups %}\nQuantity of campaign signups\n{% enddocs %}\n\n{% docs most_recent_signup %}\nTimestamp of the most recent signup in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs num_rbs %}\nQuantity of reportbacks for the user\n{% enddocs %}\n\n{% docs total_quantity %}\nTotal quantity of items in reportbacks\n{% enddocs %}\n\n{% docs most_recent_rb %}\nWhen the most recent reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs first_rb %}\nWhen the first reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs avg_time_betw_rbs %}\nCalculated average time between reportbacks.\n{% enddocs %}\n\n{% docs avg_days_next_action_after_rb %}\nCalculated average days until next action after reportback\n{% enddocs %}\n\n{% docs days_to_next_action_after_last_rb %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs most_recent_mam_action %}\nMost recent monthly active member qualifying action in UTC (eg. 2018-01-01 12:00:00).\n{% enddocs %}\n\n{% docs most_recent_email_open %}\nMost recent email open in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs most_recent_all_actions %}\nMost recent timestamp of any action in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs last_action_is_rb %}\nWhether the last action the user took was a reportback\n{% enddocs %}\n\n{% docs days_since_last_action %}\nDays since the user's last action\n{% enddocs %}\n\n{% docs time_to_first_rb %}\nHow much time after registering until the user's first reportback\n{% enddocs %}\n\n{% docs sms_unsubscribed_at %}\nTimestamp of when user unsubscribed from SMS messaging\n{% enddocs %}\n\n{% docs user_unsubscribed_at %}\nTimestamp of when user unsubscribed from email or sms\n{% enddocs %}\n\n{% docs voter_reg_acquisition %}\nWhether the user was an acquisition through voter registration efforts. \n{% enddocs %}\n\n{% docs last_logged_in %}\nDate time in UTC when user last logged in to Northstar\n{% enddocs %}\n\n{% docs last_accessed %}\nDate time in UTC when user last access the website\n{% enddocs %}\n\n{% docs last_messaged_at %}\nDate time in UTC when user was last sent a message via SMS or email\n{% enddocs %}\n\n{% docs facebook_id %}\nUser's facebook id\n{% enddocs %}\n\n{% docs mobile %}\nUsers's mobile phone number\n{% enddocs %}\n\n{% docs birthdate %}\nUser's birthdate\n{% enddocs %}\n\n{% docs first_name %}\nUser's first name\n{% enddocs %}\n\n{% docs last_name %}\nUser's last name\n{% enddocs %}\n\n{% docs voter_registration_status %}\nUser's registration status. (e.g. registration_complete, confirmed, uncertain) \n{% enddocs %}\n\n{% docs finish_with_state %}\nIf the registrant was eligible to use and passed through to complete their registration with their state\u2019s OVR system, it will be indicated in this field (direct quote from Rock-The-Vote documentation). Yes/No value in field.\n{% enddocs %}\n\n{% docs reportback_volume %}\nThis field returns 1 if non voter-reg action, since campaigns team only counts those a 1 reportback. If voter-reg action, we want to count quantity of post as number of registered voters.\n{% enddocs %}\n\n{% docs address_street_1 %}\nFirst line of user's street address\n{% enddocs %}\n\n{% docs address_street_2 %}\nSecond line of user's street address\n{% enddocs %}\n\n{% docs city %}\nUser's city\n{% enddocs %}\n\n{% docs state %}\nUser's state\n{% enddocs %}\n\n{% docs country %}\nUser's country\n{% enddocs %}\n\n{% docs language %}\nUser's language\n{% enddocs %}\n\n{% docs cio_status %}\nStatus of user from CIO. (e.g. customer_subscribed, customer_unsubscribed)\n{% enddocs %}\n\n{% docs cio_status_timestamp %}\nTimestamp when users's status was updated.\n{% enddocs %}\n\n{% docs sms_status %}\nCurrent SMS status. (e.g. undeliverable, unknown)\n{% enddocs %}\n\n{% docs source_detail %}\nDetails of the origin of the user. (e.g. tell_a_friend, other, opt_in_path/197981)\n{% enddocs %}\n\n{% docs badges %}\nWhether the user has any badges. \n{% enddocs %}\n\n{% docs refer_friends %}\nWhether the user is a part of the refer a friend campaign. \n{% enddocs %}\n\n{% docs subscribed_member %}\nWhether the user is subscribed. \n{% enddocs %}\n\n{% docs last_updated_at %}\nTimestamp when users's was updated.\n{% enddocs %}\n\n{% docs school_id %}\nUnique identifier for the user's school. This info comes from the school finder.\n{% enddocs %}\n\n{% docs newsletter_topic %}\nNewsletter topic. (e.g. community, lifestyle)\n{% enddocs %}\n\n{% docs user_agent %}\nFull user agent string for a user's browser (e.g. \"Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:24.0) Gecko/20100101 Firefox/24.0\")\n{% enddocs %}\n\n{% docs drupal_id %}\nOld Drupal user ID\n{% enddocs %}\n\n{% docs campaigns %}\nCampaigns a user is signed up for.\n{% enddocs %}\n\n{% docs audit %}\nA very useful field with data containing information about changes to a user, e.g. timestamps when the user subscribed and unsubscribed.\n{% enddocs %}\n\n{% docs voting_plan_status %}\nThe indication of the user's plan to vote, e.g. voting, not_voting, cant_vote\n{% enddocs %}\n\n{% docs voting_plan_time_of_day %}\nThe time of day when the user plans to vote, e.g morning, afternoon, evening\n{% enddocs %}\n\n{% docs voting_plan_method_of_transport %}\nHow the user plans to get to their polling place. e.g. walk, drive\n{% enddocs %}\n\n{% docs voting_plan_attending_with %}\nWith Whom the user plans to go voting, e.g. family, friends, alone\n{% enddocs %}\n\n{% docs feature_flags %}\nJSON containing info on features like badges and refer-a-friend.\n{% enddocs %}\n\n{% docs dbt_updated_at %}\nDBT snapshot table data. The updated_at timestamp of the source record when this snapshot row was inserted.\n{% enddocs %}\n\n{% docs dbt_scd_id %}\nDBT snapshot table data. A unique key generated for each snapshotted record.\n{% enddocs %}\n\n{% docs dbt_valid_from %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this snapshot row was first inserted\n{% enddocs %}\n\n{% docs dbt_valid_to %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this row row became invalidated.\n{% enddocs %}\n\n{% docs google_id %}\nUser's Google ID obtained from login.\n{% enddocs %}\n\n{% docs causes %}\nCauses in which a user is interested. e.g. animal welfare, education, mental_health\n{% enddocs %}\n\n{% docs email_subscription_status %}\nEmail subscription status of the user\n{% enddocs %}\n\n{% docs role %}\nUser's role, e.g. user, staff\n{% enddocs %}\n\n{% docs cio_backfilled %}\nWhether this user's data was backfilled from CIO\n{% enddocs %}\n\n{% docs addr_source %}\nWhere the user submitted their address, e.g. sms, GDPR\n{% enddocs %}\n\n{% docs email_subscription_topics %}\nEmail subscription topics correspond to categories in CIO in which the user is interested. e.g. lifestyle, community, scholarship\n{% enddocs %}\n\n{% docs sms_paused %}\nWhether we've paused sending sms messages to the user.\n{% enddocs %}\n\n\n\n\n", "name": "created_at", "unique_id": "ds_dbt.created_at", "block_contents": "When the item was created in UTC (eg. 2018-01-01 12:00:00)"}, "ds_dbt.updated_at": {"root_path": "/Users/mrich/projects/quasar/quasar/dbt", "resource_type": "docs", "path": "schema.md", "original_file_path": "models/schema.md", "package_name": "ds_dbt", "file_contents": "\n{% docs click_id %}\nThis is a unique identifier for each click\n{% enddocs %}\n\n{% docs click_time %}\nTimestamp when user clicked.\n{% enddocs %}\n\n{% docs shortened %}\nShortened URL\n{% enddocs %}\n\n{% docs target_url %}\nURL where the user will be directed\n{% enddocs %}\n\n{% docs broadcast_id %}\nID of the broadcast that generated the shortened URL\n{% enddocs %}\n\n{% docs source %}\nSource of the URL (e.g. SMS, web), origin of the post (e.g. phoenix-web, phoenix-ashes, sms), or source where user was acquired. (e.g. sms, phoenix-next)\n{% enddocs %}\n\n{% docs interaction_type %}\nHow the user interacted with the link (e.g. preview, click)\n{% enddocs %}\n\n{% docs id %}\nUnique identifier for the post\n{% enddocs %}\n\n{% docs type %}\nType of post (e.g. photo)\n{% enddocs %}\n\n{% docs action %}\nPost action (e.g. DefendDreamers_Nov9_CongressCalls, GunViolence2018_Feb15_ParklandResponse)\n{% enddocs %}\n\n{% docs status %}\nPost status (e.g. accepted, rejected)\n{% enddocs %}\n\n{% docs quantity %}\nNumerical quantity of items specified in the call to action (e.g. 10, 200)\n{% enddocs %}\n\n{% docs source_bucket %}\nGrouping bucket for origin of the post (e.g. web, sms) \n{% enddocs %}\n\n{% docs created_at %}\nWhen the item was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs updated_at %}\nWhen the item was updated in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs text %}\nText of the post (e.g. \"Zoo animals and a super hero trying to help too!\") \n{% enddocs %}\n\n{% docs signup_id %}\nUnique identifier for the signup \n{% enddocs %}\n\n{% docs post_class %}\nClass of the signup (e.g. \"photo - default\", \"phone-call - DefendDreamers_Jan16_BothBodies\")\n{% enddocs %}\n\n{% docs is_accepted %}\nWhether the post has been accepted to be displayed to the public on the website\n{% enddocs %}\n\n{% docs action_id %}\nInternal identifier of the action \n{% enddocs %}\n\n{% docs location %}\nLocation where the action takes place (e.g. US-NY)\n{% enddocs %}\n\n{% docs postal_code %}\nPostal code where the action takes place\n{% enddocs %}\n\n{% docs is_reportback %}\nWhether the post is a reportback. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs civic_action %}\nWhether the post is a Civic Action. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs scholarship_entry %}\nWhether the post is a Scholarship Entry. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs why_participated %}\nWhy the user participated in this action. Entered by the user.\n{% enddocs %}\n\n{% docs details %}\nDetails about the post. Contains contentfulId and other information (e.g. {\"campaignContentfulId\":\"6ATBgGEQEeJoIcxs1qbwaC\"})\n{% enddocs %}\n\n{% docs email %}\nEmail address of the user.\n{% enddocs %}\n\n{% docs source_details %}\nDetails about the source of the item. This is sometimes represented as a JSON object, and for other tables like Turbovote its represented as a string. (e.g. \"{\"contentful_id\":\"3CTLlXfbwtz1FOMpl31SKV\",\"utm_source\":\"scholarship_listing\",\"utm_medium\":\"referral\",\"utm_campaign\":\"fastweb_2019_08\"}\", newsletter_456)\n{% enddocs %}\n\n{% docs campaign_id %}\nThis is a unique identifier for the campaign\n{% enddocs %}\n\n{% docs campaign_run_id %}\nUnique identifier for the campaign run\n{% enddocs %}\n\n{% docs campaign_name %}\nName of the campaign\n{% enddocs %}\n\n{% docs campaign_cause %}\nCampaign cause (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_run_start_date %}\nStart date of the campaign run\n{% enddocs %}\n\n{% docs campaign_run_end_date %}\nEnd date of the campaign run\n{% enddocs %}\n\n{% docs campaign_created_date %}\nWhen the campaign was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs campaign_node_id %}\nInternal unique node id for the campaign\n{% enddocs %}\n\n{% docs campaign_node_id_title %}\nCampaign title\n{% enddocs %}\n\n{% docs campaign_run_id_title %}\nTitle of the campaign run\n{% enddocs %}\n\n{% docs campaign_action_type %}\nCampaign action type (eg. Make Something, Share Something)\n{% enddocs %}\n\n{% docs campaign_cause_type %}\nCampaign cause type (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_noun %}\nNoun applicable to the user's action\n{% enddocs %}\n\n{% docs campaign_verb %}\nVerb describing the action the user should take\n{% enddocs %}\n\n{% docs campaign_cta %}\nCampaign's call to action\n{% enddocs %}\n\n{% docs campaign_language %}\n\"Language in which the campaign is available\"\n{% enddocs %}\n\n{% docs agent_id %}\nIf set, the content type of the picture the member is sending us. Exp. image/png.\n{% enddocs %}\n\n{% docs attachment_content_type %}\nIf set, the handle of the Front agent this outbound support message is from.\n{% enddocs %}\n\n{% docs topic %}\nHolds a reference to the **last** campaign topic the member's conversation was in. This is useful to allow members to talk to Gambit and get quick responses (through Rivescript), without Gambit completely forgetting what state the member's interaction with a campaign topic was in.\n{% enddocs %}\n\n{% docs action_serial_id %}\nSerial id for the user's action. Depends on the source of the action. May be the bertly click id, sms message id, etc.\n{% enddocs %}\n\n{% docs channel %}\nChannel for the user's action. Depends on the source of the action. (e.g. web, sms)\n{% enddocs %}\n\n{% docs first_action_month %}\nMonth during which the user took their first action. \n{% enddocs %}\n\n{% docs event_id %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs event_source %}\nApplication source for event (eg. Phoenix, Northstar)\n{% enddocs %}\n\n{% docs event_datetime %}\nWhen the event occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs event_name %}\nName of the event (eg. northstar_submitted_register, https://docs.google.com/spreadsheets/d/1lm-fGrIm85nUTxSojqyCt_Ehmm1zEbViFhKpxcJiz1A/edit#gid=406441516)\n{% enddocs %}\n\n{% docs event_type %}\nType of event (pv = 'Page View', se = 'Structured Event')\n{% enddocs %}\n\n{% docs host %}\nURL host where event occurred (eg. www.dosomething.org or identity.dosomething.org)\n{% enddocs %}\n\n{% docs path %}\nURL path event occurred at (eg. /login or /us/campaigns/huddle-for-heroes)\n{% enddocs %}\n\n{% docs query_parameters %}\nOptional query parameters for the request (eg. query=huddle)\n{% enddocs %}\n\n{% docs se_category %}\nCategory of event (eg. focused_field, authentication) - Custom structured event\n{% enddocs %}\n\n{% docs se_action %}\nAction performed / event name (eg. form_submitted, action_failed) - Custom structured event\n{% enddocs %}\n\n{% docs se_label %}\nThe object of the action (eg. first_name, register, voter_reg_status) - Custom structured event\n{% enddocs %}\n\n{% docs session_id %}\nUnique identifier of the user's session\n{% enddocs %}\n\n{% docs session_counter %}\nHow many sessions a user has started\n{% enddocs %}\n\n{% docs browser_size %}\nWhich type of browser a user is using (eg. Mobile, Desktop)\n{% enddocs %}\n\n{% docs northstar_id %}\nThe Northstar ID of the user who generated the event\n{% enddocs %}\n\n{% docs device_id %}\nID of the device used\n{% enddocs %}\n\n{% docs referrer_host %}\nURL host of the referring site (eg. google.com)\n{% enddocs %}\n\n{% docs referrer_path %}\nURL path from referring site (eg. /10-stats-on-teen-drug-and-alcohol-use/)\n{% enddocs %}\n\n{% docs referrer_source %}\nReferrer source name (eg. Google, Facebook)\n{% enddocs %}\n\n{% docs utm_source %}\nTracks where the traffic is coming from. (eg. scholarship_listing, Facebook)\n{% enddocs %}\n\n{% docs utm_medium %}\nHow the traffic got to the platform (eg. referral, CPC)\n{% enddocs %}\n\n{% docs utm_campaign %}\nTracks which campaign the traffic was generated by. Shows up in Google Analytics as Campaign Name (eg. editorial_newsletter)\n{% enddocs %}\n\n{% docs url %}\nURL of campaign (eg. https://dosome.click/nyn5m7)\n{% enddocs %}\n\n{% docs modal_type %}\nNULL or SURVEY_MODAL\n{% enddocs %}\n\n{% docs landing_datetime %}\nWhen the session started in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs ending_datetime %}\nWhen the session ended in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs session_duration_seconds %}\nSession duration in seconds\n{% enddocs %}\n\n{% docs num_pages_views %}\nNumber of pages viewed in session\n{% enddocs %}\n\n{% docs landing_page %}\nFirst page the user viewed in the session (eg. /us/facts/11-facts-about-bp-oil-spill)\n{% enddocs %}\n\n{% docs exit_page %}\n\"Which page the user ended or exited their session from (eg. /us/campaigns/green-your-getaway)\"\n{% enddocs %}\n\n{% docs days_since_last_session %}\n\"Days since their last session.\"\n{% enddocs %}\n\n{% docs post_type %}\nType of post, (e.g. photo, voter-reg)\n{% enddocs %}\n\n{% docs noun %}\nNoun that corresponds to the item in the call to action that was delivered. (e.g. drawings, tweets)\n{% enddocs %}\n\n{% docs verb %}\nVerb corresponding to the action the user took. (e.g. shared, sent, taken)\n{% enddocs %}\n\n{% docs deleted_at %}\nDate time in UTC when a user deleted their post.\n{% enddocs %}\n\n{% docs _fivetran_deleted %}\nMarks rows that were deleted in the source table\n{% enddocs %}\n\n{% docs _fivetran_synced %}\n(UTC timestamp) keeps track of when each row was last successfully synced\n{% enddocs %}\n\n{% docs reportback %}\nWhether the post is a reportback \n{% enddocs %}\n\n{% docs active %}\nWhether the user is active \n{% enddocs %}\n\n{% docs anonymous %}\nWhether the user is anonymous when making the post \n{% enddocs %}\n\n{% docs callpower_campaign_id %}\nUnique ID corresponding to the Callpower campaign. Callpower allows users to record messages for their representatives.\n{% enddocs %}\n\n{% docs quiz %}\nWhether the post is a quiz \n{% enddocs %}\n\n{% docs action_type %}\nType of action the user took. (e.g. share-something, donate-something)\n{% enddocs %}\n\n{% docs online %}\nWhether the action is a online as opposed to IRL.\n{% enddocs %}\n\n{% docs time_commitment %}\nEstimated time required to do the action (e.g. 3.0+, <0.5)\n{% enddocs %}\n\n{% docs num_signups %}\nQuantity of campaign signups\n{% enddocs %}\n\n{% docs most_recent_signup %}\nTimestamp of the most recent signup in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs num_rbs %}\nQuantity of reportbacks for the user\n{% enddocs %}\n\n{% docs total_quantity %}\nTotal quantity of items in reportbacks\n{% enddocs %}\n\n{% docs most_recent_rb %}\nWhen the most recent reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs first_rb %}\nWhen the first reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs avg_time_betw_rbs %}\nCalculated average time between reportbacks.\n{% enddocs %}\n\n{% docs avg_days_next_action_after_rb %}\nCalculated average days until next action after reportback\n{% enddocs %}\n\n{% docs days_to_next_action_after_last_rb %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs most_recent_mam_action %}\nMost recent monthly active member qualifying action in UTC (eg. 2018-01-01 12:00:00).\n{% enddocs %}\n\n{% docs most_recent_email_open %}\nMost recent email open in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs most_recent_all_actions %}\nMost recent timestamp of any action in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs last_action_is_rb %}\nWhether the last action the user took was a reportback\n{% enddocs %}\n\n{% docs days_since_last_action %}\nDays since the user's last action\n{% enddocs %}\n\n{% docs time_to_first_rb %}\nHow much time after registering until the user's first reportback\n{% enddocs %}\n\n{% docs sms_unsubscribed_at %}\nTimestamp of when user unsubscribed from SMS messaging\n{% enddocs %}\n\n{% docs user_unsubscribed_at %}\nTimestamp of when user unsubscribed from email or sms\n{% enddocs %}\n\n{% docs voter_reg_acquisition %}\nWhether the user was an acquisition through voter registration efforts. \n{% enddocs %}\n\n{% docs last_logged_in %}\nDate time in UTC when user last logged in to Northstar\n{% enddocs %}\n\n{% docs last_accessed %}\nDate time in UTC when user last access the website\n{% enddocs %}\n\n{% docs last_messaged_at %}\nDate time in UTC when user was last sent a message via SMS or email\n{% enddocs %}\n\n{% docs facebook_id %}\nUser's facebook id\n{% enddocs %}\n\n{% docs mobile %}\nUsers's mobile phone number\n{% enddocs %}\n\n{% docs birthdate %}\nUser's birthdate\n{% enddocs %}\n\n{% docs first_name %}\nUser's first name\n{% enddocs %}\n\n{% docs last_name %}\nUser's last name\n{% enddocs %}\n\n{% docs voter_registration_status %}\nUser's registration status. (e.g. registration_complete, confirmed, uncertain) \n{% enddocs %}\n\n{% docs finish_with_state %}\nIf the registrant was eligible to use and passed through to complete their registration with their state\u2019s OVR system, it will be indicated in this field (direct quote from Rock-The-Vote documentation). Yes/No value in field.\n{% enddocs %}\n\n{% docs reportback_volume %}\nThis field returns 1 if non voter-reg action, since campaigns team only counts those a 1 reportback. If voter-reg action, we want to count quantity of post as number of registered voters.\n{% enddocs %}\n\n{% docs address_street_1 %}\nFirst line of user's street address\n{% enddocs %}\n\n{% docs address_street_2 %}\nSecond line of user's street address\n{% enddocs %}\n\n{% docs city %}\nUser's city\n{% enddocs %}\n\n{% docs state %}\nUser's state\n{% enddocs %}\n\n{% docs country %}\nUser's country\n{% enddocs %}\n\n{% docs language %}\nUser's language\n{% enddocs %}\n\n{% docs cio_status %}\nStatus of user from CIO. (e.g. customer_subscribed, customer_unsubscribed)\n{% enddocs %}\n\n{% docs cio_status_timestamp %}\nTimestamp when users's status was updated.\n{% enddocs %}\n\n{% docs sms_status %}\nCurrent SMS status. (e.g. undeliverable, unknown)\n{% enddocs %}\n\n{% docs source_detail %}\nDetails of the origin of the user. (e.g. tell_a_friend, other, opt_in_path/197981)\n{% enddocs %}\n\n{% docs badges %}\nWhether the user has any badges. \n{% enddocs %}\n\n{% docs refer_friends %}\nWhether the user is a part of the refer a friend campaign. \n{% enddocs %}\n\n{% docs subscribed_member %}\nWhether the user is subscribed. \n{% enddocs %}\n\n{% docs last_updated_at %}\nTimestamp when users's was updated.\n{% enddocs %}\n\n{% docs school_id %}\nUnique identifier for the user's school. This info comes from the school finder.\n{% enddocs %}\n\n{% docs newsletter_topic %}\nNewsletter topic. (e.g. community, lifestyle)\n{% enddocs %}\n\n{% docs user_agent %}\nFull user agent string for a user's browser (e.g. \"Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:24.0) Gecko/20100101 Firefox/24.0\")\n{% enddocs %}\n\n{% docs drupal_id %}\nOld Drupal user ID\n{% enddocs %}\n\n{% docs campaigns %}\nCampaigns a user is signed up for.\n{% enddocs %}\n\n{% docs audit %}\nA very useful field with data containing information about changes to a user, e.g. timestamps when the user subscribed and unsubscribed.\n{% enddocs %}\n\n{% docs voting_plan_status %}\nThe indication of the user's plan to vote, e.g. voting, not_voting, cant_vote\n{% enddocs %}\n\n{% docs voting_plan_time_of_day %}\nThe time of day when the user plans to vote, e.g morning, afternoon, evening\n{% enddocs %}\n\n{% docs voting_plan_method_of_transport %}\nHow the user plans to get to their polling place. e.g. walk, drive\n{% enddocs %}\n\n{% docs voting_plan_attending_with %}\nWith Whom the user plans to go voting, e.g. family, friends, alone\n{% enddocs %}\n\n{% docs feature_flags %}\nJSON containing info on features like badges and refer-a-friend.\n{% enddocs %}\n\n{% docs dbt_updated_at %}\nDBT snapshot table data. The updated_at timestamp of the source record when this snapshot row was inserted.\n{% enddocs %}\n\n{% docs dbt_scd_id %}\nDBT snapshot table data. A unique key generated for each snapshotted record.\n{% enddocs %}\n\n{% docs dbt_valid_from %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this snapshot row was first inserted\n{% enddocs %}\n\n{% docs dbt_valid_to %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this row row became invalidated.\n{% enddocs %}\n\n{% docs google_id %}\nUser's Google ID obtained from login.\n{% enddocs %}\n\n{% docs causes %}\nCauses in which a user is interested. e.g. animal welfare, education, mental_health\n{% enddocs %}\n\n{% docs email_subscription_status %}\nEmail subscription status of the user\n{% enddocs %}\n\n{% docs role %}\nUser's role, e.g. user, staff\n{% enddocs %}\n\n{% docs cio_backfilled %}\nWhether this user's data was backfilled from CIO\n{% enddocs %}\n\n{% docs addr_source %}\nWhere the user submitted their address, e.g. sms, GDPR\n{% enddocs %}\n\n{% docs email_subscription_topics %}\nEmail subscription topics correspond to categories in CIO in which the user is interested. e.g. lifestyle, community, scholarship\n{% enddocs %}\n\n{% docs sms_paused %}\nWhether we've paused sending sms messages to the user.\n{% enddocs %}\n\n\n\n\n", "name": "updated_at", "unique_id": "ds_dbt.updated_at", "block_contents": "When the item was updated in UTC (eg. 2018-01-01 12:00:00)"}, "ds_dbt.text": {"root_path": "/Users/mrich/projects/quasar/quasar/dbt", "resource_type": "docs", "path": "schema.md", "original_file_path": "models/schema.md", "package_name": "ds_dbt", "file_contents": "\n{% docs click_id %}\nThis is a unique identifier for each click\n{% enddocs %}\n\n{% docs click_time %}\nTimestamp when user clicked.\n{% enddocs %}\n\n{% docs shortened %}\nShortened URL\n{% enddocs %}\n\n{% docs target_url %}\nURL where the user will be directed\n{% enddocs %}\n\n{% docs broadcast_id %}\nID of the broadcast that generated the shortened URL\n{% enddocs %}\n\n{% docs source %}\nSource of the URL (e.g. SMS, web), origin of the post (e.g. phoenix-web, phoenix-ashes, sms), or source where user was acquired. (e.g. sms, phoenix-next)\n{% enddocs %}\n\n{% docs interaction_type %}\nHow the user interacted with the link (e.g. preview, click)\n{% enddocs %}\n\n{% docs id %}\nUnique identifier for the post\n{% enddocs %}\n\n{% docs type %}\nType of post (e.g. photo)\n{% enddocs %}\n\n{% docs action %}\nPost action (e.g. DefendDreamers_Nov9_CongressCalls, GunViolence2018_Feb15_ParklandResponse)\n{% enddocs %}\n\n{% docs status %}\nPost status (e.g. accepted, rejected)\n{% enddocs %}\n\n{% docs quantity %}\nNumerical quantity of items specified in the call to action (e.g. 10, 200)\n{% enddocs %}\n\n{% docs source_bucket %}\nGrouping bucket for origin of the post (e.g. web, sms) \n{% enddocs %}\n\n{% docs created_at %}\nWhen the item was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs updated_at %}\nWhen the item was updated in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs text %}\nText of the post (e.g. \"Zoo animals and a super hero trying to help too!\") \n{% enddocs %}\n\n{% docs signup_id %}\nUnique identifier for the signup \n{% enddocs %}\n\n{% docs post_class %}\nClass of the signup (e.g. \"photo - default\", \"phone-call - DefendDreamers_Jan16_BothBodies\")\n{% enddocs %}\n\n{% docs is_accepted %}\nWhether the post has been accepted to be displayed to the public on the website\n{% enddocs %}\n\n{% docs action_id %}\nInternal identifier of the action \n{% enddocs %}\n\n{% docs location %}\nLocation where the action takes place (e.g. US-NY)\n{% enddocs %}\n\n{% docs postal_code %}\nPostal code where the action takes place\n{% enddocs %}\n\n{% docs is_reportback %}\nWhether the post is a reportback. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs civic_action %}\nWhether the post is a Civic Action. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs scholarship_entry %}\nWhether the post is a Scholarship Entry. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs why_participated %}\nWhy the user participated in this action. Entered by the user.\n{% enddocs %}\n\n{% docs details %}\nDetails about the post. Contains contentfulId and other information (e.g. {\"campaignContentfulId\":\"6ATBgGEQEeJoIcxs1qbwaC\"})\n{% enddocs %}\n\n{% docs email %}\nEmail address of the user.\n{% enddocs %}\n\n{% docs source_details %}\nDetails about the source of the item. This is sometimes represented as a JSON object, and for other tables like Turbovote its represented as a string. (e.g. \"{\"contentful_id\":\"3CTLlXfbwtz1FOMpl31SKV\",\"utm_source\":\"scholarship_listing\",\"utm_medium\":\"referral\",\"utm_campaign\":\"fastweb_2019_08\"}\", newsletter_456)\n{% enddocs %}\n\n{% docs campaign_id %}\nThis is a unique identifier for the campaign\n{% enddocs %}\n\n{% docs campaign_run_id %}\nUnique identifier for the campaign run\n{% enddocs %}\n\n{% docs campaign_name %}\nName of the campaign\n{% enddocs %}\n\n{% docs campaign_cause %}\nCampaign cause (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_run_start_date %}\nStart date of the campaign run\n{% enddocs %}\n\n{% docs campaign_run_end_date %}\nEnd date of the campaign run\n{% enddocs %}\n\n{% docs campaign_created_date %}\nWhen the campaign was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs campaign_node_id %}\nInternal unique node id for the campaign\n{% enddocs %}\n\n{% docs campaign_node_id_title %}\nCampaign title\n{% enddocs %}\n\n{% docs campaign_run_id_title %}\nTitle of the campaign run\n{% enddocs %}\n\n{% docs campaign_action_type %}\nCampaign action type (eg. Make Something, Share Something)\n{% enddocs %}\n\n{% docs campaign_cause_type %}\nCampaign cause type (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_noun %}\nNoun applicable to the user's action\n{% enddocs %}\n\n{% docs campaign_verb %}\nVerb describing the action the user should take\n{% enddocs %}\n\n{% docs campaign_cta %}\nCampaign's call to action\n{% enddocs %}\n\n{% docs campaign_language %}\n\"Language in which the campaign is available\"\n{% enddocs %}\n\n{% docs agent_id %}\nIf set, the content type of the picture the member is sending us. Exp. image/png.\n{% enddocs %}\n\n{% docs attachment_content_type %}\nIf set, the handle of the Front agent this outbound support message is from.\n{% enddocs %}\n\n{% docs topic %}\nHolds a reference to the **last** campaign topic the member's conversation was in. This is useful to allow members to talk to Gambit and get quick responses (through Rivescript), without Gambit completely forgetting what state the member's interaction with a campaign topic was in.\n{% enddocs %}\n\n{% docs action_serial_id %}\nSerial id for the user's action. Depends on the source of the action. May be the bertly click id, sms message id, etc.\n{% enddocs %}\n\n{% docs channel %}\nChannel for the user's action. Depends on the source of the action. (e.g. web, sms)\n{% enddocs %}\n\n{% docs first_action_month %}\nMonth during which the user took their first action. \n{% enddocs %}\n\n{% docs event_id %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs event_source %}\nApplication source for event (eg. Phoenix, Northstar)\n{% enddocs %}\n\n{% docs event_datetime %}\nWhen the event occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs event_name %}\nName of the event (eg. northstar_submitted_register, https://docs.google.com/spreadsheets/d/1lm-fGrIm85nUTxSojqyCt_Ehmm1zEbViFhKpxcJiz1A/edit#gid=406441516)\n{% enddocs %}\n\n{% docs event_type %}\nType of event (pv = 'Page View', se = 'Structured Event')\n{% enddocs %}\n\n{% docs host %}\nURL host where event occurred (eg. www.dosomething.org or identity.dosomething.org)\n{% enddocs %}\n\n{% docs path %}\nURL path event occurred at (eg. /login or /us/campaigns/huddle-for-heroes)\n{% enddocs %}\n\n{% docs query_parameters %}\nOptional query parameters for the request (eg. query=huddle)\n{% enddocs %}\n\n{% docs se_category %}\nCategory of event (eg. focused_field, authentication) - Custom structured event\n{% enddocs %}\n\n{% docs se_action %}\nAction performed / event name (eg. form_submitted, action_failed) - Custom structured event\n{% enddocs %}\n\n{% docs se_label %}\nThe object of the action (eg. first_name, register, voter_reg_status) - Custom structured event\n{% enddocs %}\n\n{% docs session_id %}\nUnique identifier of the user's session\n{% enddocs %}\n\n{% docs session_counter %}\nHow many sessions a user has started\n{% enddocs %}\n\n{% docs browser_size %}\nWhich type of browser a user is using (eg. Mobile, Desktop)\n{% enddocs %}\n\n{% docs northstar_id %}\nThe Northstar ID of the user who generated the event\n{% enddocs %}\n\n{% docs device_id %}\nID of the device used\n{% enddocs %}\n\n{% docs referrer_host %}\nURL host of the referring site (eg. google.com)\n{% enddocs %}\n\n{% docs referrer_path %}\nURL path from referring site (eg. /10-stats-on-teen-drug-and-alcohol-use/)\n{% enddocs %}\n\n{% docs referrer_source %}\nReferrer source name (eg. Google, Facebook)\n{% enddocs %}\n\n{% docs utm_source %}\nTracks where the traffic is coming from. (eg. scholarship_listing, Facebook)\n{% enddocs %}\n\n{% docs utm_medium %}\nHow the traffic got to the platform (eg. referral, CPC)\n{% enddocs %}\n\n{% docs utm_campaign %}\nTracks which campaign the traffic was generated by. Shows up in Google Analytics as Campaign Name (eg. editorial_newsletter)\n{% enddocs %}\n\n{% docs url %}\nURL of campaign (eg. https://dosome.click/nyn5m7)\n{% enddocs %}\n\n{% docs modal_type %}\nNULL or SURVEY_MODAL\n{% enddocs %}\n\n{% docs landing_datetime %}\nWhen the session started in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs ending_datetime %}\nWhen the session ended in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs session_duration_seconds %}\nSession duration in seconds\n{% enddocs %}\n\n{% docs num_pages_views %}\nNumber of pages viewed in session\n{% enddocs %}\n\n{% docs landing_page %}\nFirst page the user viewed in the session (eg. /us/facts/11-facts-about-bp-oil-spill)\n{% enddocs %}\n\n{% docs exit_page %}\n\"Which page the user ended or exited their session from (eg. /us/campaigns/green-your-getaway)\"\n{% enddocs %}\n\n{% docs days_since_last_session %}\n\"Days since their last session.\"\n{% enddocs %}\n\n{% docs post_type %}\nType of post, (e.g. photo, voter-reg)\n{% enddocs %}\n\n{% docs noun %}\nNoun that corresponds to the item in the call to action that was delivered. (e.g. drawings, tweets)\n{% enddocs %}\n\n{% docs verb %}\nVerb corresponding to the action the user took. (e.g. shared, sent, taken)\n{% enddocs %}\n\n{% docs deleted_at %}\nDate time in UTC when a user deleted their post.\n{% enddocs %}\n\n{% docs _fivetran_deleted %}\nMarks rows that were deleted in the source table\n{% enddocs %}\n\n{% docs _fivetran_synced %}\n(UTC timestamp) keeps track of when each row was last successfully synced\n{% enddocs %}\n\n{% docs reportback %}\nWhether the post is a reportback \n{% enddocs %}\n\n{% docs active %}\nWhether the user is active \n{% enddocs %}\n\n{% docs anonymous %}\nWhether the user is anonymous when making the post \n{% enddocs %}\n\n{% docs callpower_campaign_id %}\nUnique ID corresponding to the Callpower campaign. Callpower allows users to record messages for their representatives.\n{% enddocs %}\n\n{% docs quiz %}\nWhether the post is a quiz \n{% enddocs %}\n\n{% docs action_type %}\nType of action the user took. (e.g. share-something, donate-something)\n{% enddocs %}\n\n{% docs online %}\nWhether the action is a online as opposed to IRL.\n{% enddocs %}\n\n{% docs time_commitment %}\nEstimated time required to do the action (e.g. 3.0+, <0.5)\n{% enddocs %}\n\n{% docs num_signups %}\nQuantity of campaign signups\n{% enddocs %}\n\n{% docs most_recent_signup %}\nTimestamp of the most recent signup in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs num_rbs %}\nQuantity of reportbacks for the user\n{% enddocs %}\n\n{% docs total_quantity %}\nTotal quantity of items in reportbacks\n{% enddocs %}\n\n{% docs most_recent_rb %}\nWhen the most recent reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs first_rb %}\nWhen the first reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs avg_time_betw_rbs %}\nCalculated average time between reportbacks.\n{% enddocs %}\n\n{% docs avg_days_next_action_after_rb %}\nCalculated average days until next action after reportback\n{% enddocs %}\n\n{% docs days_to_next_action_after_last_rb %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs most_recent_mam_action %}\nMost recent monthly active member qualifying action in UTC (eg. 2018-01-01 12:00:00).\n{% enddocs %}\n\n{% docs most_recent_email_open %}\nMost recent email open in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs most_recent_all_actions %}\nMost recent timestamp of any action in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs last_action_is_rb %}\nWhether the last action the user took was a reportback\n{% enddocs %}\n\n{% docs days_since_last_action %}\nDays since the user's last action\n{% enddocs %}\n\n{% docs time_to_first_rb %}\nHow much time after registering until the user's first reportback\n{% enddocs %}\n\n{% docs sms_unsubscribed_at %}\nTimestamp of when user unsubscribed from SMS messaging\n{% enddocs %}\n\n{% docs user_unsubscribed_at %}\nTimestamp of when user unsubscribed from email or sms\n{% enddocs %}\n\n{% docs voter_reg_acquisition %}\nWhether the user was an acquisition through voter registration efforts. \n{% enddocs %}\n\n{% docs last_logged_in %}\nDate time in UTC when user last logged in to Northstar\n{% enddocs %}\n\n{% docs last_accessed %}\nDate time in UTC when user last access the website\n{% enddocs %}\n\n{% docs last_messaged_at %}\nDate time in UTC when user was last sent a message via SMS or email\n{% enddocs %}\n\n{% docs facebook_id %}\nUser's facebook id\n{% enddocs %}\n\n{% docs mobile %}\nUsers's mobile phone number\n{% enddocs %}\n\n{% docs birthdate %}\nUser's birthdate\n{% enddocs %}\n\n{% docs first_name %}\nUser's first name\n{% enddocs %}\n\n{% docs last_name %}\nUser's last name\n{% enddocs %}\n\n{% docs voter_registration_status %}\nUser's registration status. (e.g. registration_complete, confirmed, uncertain) \n{% enddocs %}\n\n{% docs finish_with_state %}\nIf the registrant was eligible to use and passed through to complete their registration with their state\u2019s OVR system, it will be indicated in this field (direct quote from Rock-The-Vote documentation). Yes/No value in field.\n{% enddocs %}\n\n{% docs reportback_volume %}\nThis field returns 1 if non voter-reg action, since campaigns team only counts those a 1 reportback. If voter-reg action, we want to count quantity of post as number of registered voters.\n{% enddocs %}\n\n{% docs address_street_1 %}\nFirst line of user's street address\n{% enddocs %}\n\n{% docs address_street_2 %}\nSecond line of user's street address\n{% enddocs %}\n\n{% docs city %}\nUser's city\n{% enddocs %}\n\n{% docs state %}\nUser's state\n{% enddocs %}\n\n{% docs country %}\nUser's country\n{% enddocs %}\n\n{% docs language %}\nUser's language\n{% enddocs %}\n\n{% docs cio_status %}\nStatus of user from CIO. (e.g. customer_subscribed, customer_unsubscribed)\n{% enddocs %}\n\n{% docs cio_status_timestamp %}\nTimestamp when users's status was updated.\n{% enddocs %}\n\n{% docs sms_status %}\nCurrent SMS status. (e.g. undeliverable, unknown)\n{% enddocs %}\n\n{% docs source_detail %}\nDetails of the origin of the user. (e.g. tell_a_friend, other, opt_in_path/197981)\n{% enddocs %}\n\n{% docs badges %}\nWhether the user has any badges. \n{% enddocs %}\n\n{% docs refer_friends %}\nWhether the user is a part of the refer a friend campaign. \n{% enddocs %}\n\n{% docs subscribed_member %}\nWhether the user is subscribed. \n{% enddocs %}\n\n{% docs last_updated_at %}\nTimestamp when users's was updated.\n{% enddocs %}\n\n{% docs school_id %}\nUnique identifier for the user's school. This info comes from the school finder.\n{% enddocs %}\n\n{% docs newsletter_topic %}\nNewsletter topic. (e.g. community, lifestyle)\n{% enddocs %}\n\n{% docs user_agent %}\nFull user agent string for a user's browser (e.g. \"Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:24.0) Gecko/20100101 Firefox/24.0\")\n{% enddocs %}\n\n{% docs drupal_id %}\nOld Drupal user ID\n{% enddocs %}\n\n{% docs campaigns %}\nCampaigns a user is signed up for.\n{% enddocs %}\n\n{% docs audit %}\nA very useful field with data containing information about changes to a user, e.g. timestamps when the user subscribed and unsubscribed.\n{% enddocs %}\n\n{% docs voting_plan_status %}\nThe indication of the user's plan to vote, e.g. voting, not_voting, cant_vote\n{% enddocs %}\n\n{% docs voting_plan_time_of_day %}\nThe time of day when the user plans to vote, e.g morning, afternoon, evening\n{% enddocs %}\n\n{% docs voting_plan_method_of_transport %}\nHow the user plans to get to their polling place. e.g. walk, drive\n{% enddocs %}\n\n{% docs voting_plan_attending_with %}\nWith Whom the user plans to go voting, e.g. family, friends, alone\n{% enddocs %}\n\n{% docs feature_flags %}\nJSON containing info on features like badges and refer-a-friend.\n{% enddocs %}\n\n{% docs dbt_updated_at %}\nDBT snapshot table data. The updated_at timestamp of the source record when this snapshot row was inserted.\n{% enddocs %}\n\n{% docs dbt_scd_id %}\nDBT snapshot table data. A unique key generated for each snapshotted record.\n{% enddocs %}\n\n{% docs dbt_valid_from %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this snapshot row was first inserted\n{% enddocs %}\n\n{% docs dbt_valid_to %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this row row became invalidated.\n{% enddocs %}\n\n{% docs google_id %}\nUser's Google ID obtained from login.\n{% enddocs %}\n\n{% docs causes %}\nCauses in which a user is interested. e.g. animal welfare, education, mental_health\n{% enddocs %}\n\n{% docs email_subscription_status %}\nEmail subscription status of the user\n{% enddocs %}\n\n{% docs role %}\nUser's role, e.g. user, staff\n{% enddocs %}\n\n{% docs cio_backfilled %}\nWhether this user's data was backfilled from CIO\n{% enddocs %}\n\n{% docs addr_source %}\nWhere the user submitted their address, e.g. sms, GDPR\n{% enddocs %}\n\n{% docs email_subscription_topics %}\nEmail subscription topics correspond to categories in CIO in which the user is interested. e.g. lifestyle, community, scholarship\n{% enddocs %}\n\n{% docs sms_paused %}\nWhether we've paused sending sms messages to the user.\n{% enddocs %}\n\n\n\n\n", "name": "text", "unique_id": "ds_dbt.text", "block_contents": "Text of the post (e.g. \"Zoo animals and a super hero trying to help too!\")"}, "ds_dbt.signup_id": {"root_path": "/Users/mrich/projects/quasar/quasar/dbt", "resource_type": "docs", "path": "schema.md", "original_file_path": "models/schema.md", "package_name": "ds_dbt", "file_contents": "\n{% docs click_id %}\nThis is a unique identifier for each click\n{% enddocs %}\n\n{% docs click_time %}\nTimestamp when user clicked.\n{% enddocs %}\n\n{% docs shortened %}\nShortened URL\n{% enddocs %}\n\n{% docs target_url %}\nURL where the user will be directed\n{% enddocs %}\n\n{% docs broadcast_id %}\nID of the broadcast that generated the shortened URL\n{% enddocs %}\n\n{% docs source %}\nSource of the URL (e.g. SMS, web), origin of the post (e.g. phoenix-web, phoenix-ashes, sms), or source where user was acquired. (e.g. sms, phoenix-next)\n{% enddocs %}\n\n{% docs interaction_type %}\nHow the user interacted with the link (e.g. preview, click)\n{% enddocs %}\n\n{% docs id %}\nUnique identifier for the post\n{% enddocs %}\n\n{% docs type %}\nType of post (e.g. photo)\n{% enddocs %}\n\n{% docs action %}\nPost action (e.g. DefendDreamers_Nov9_CongressCalls, GunViolence2018_Feb15_ParklandResponse)\n{% enddocs %}\n\n{% docs status %}\nPost status (e.g. accepted, rejected)\n{% enddocs %}\n\n{% docs quantity %}\nNumerical quantity of items specified in the call to action (e.g. 10, 200)\n{% enddocs %}\n\n{% docs source_bucket %}\nGrouping bucket for origin of the post (e.g. web, sms) \n{% enddocs %}\n\n{% docs created_at %}\nWhen the item was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs updated_at %}\nWhen the item was updated in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs text %}\nText of the post (e.g. \"Zoo animals and a super hero trying to help too!\") \n{% enddocs %}\n\n{% docs signup_id %}\nUnique identifier for the signup \n{% enddocs %}\n\n{% docs post_class %}\nClass of the signup (e.g. \"photo - default\", \"phone-call - DefendDreamers_Jan16_BothBodies\")\n{% enddocs %}\n\n{% docs is_accepted %}\nWhether the post has been accepted to be displayed to the public on the website\n{% enddocs %}\n\n{% docs action_id %}\nInternal identifier of the action \n{% enddocs %}\n\n{% docs location %}\nLocation where the action takes place (e.g. US-NY)\n{% enddocs %}\n\n{% docs postal_code %}\nPostal code where the action takes place\n{% enddocs %}\n\n{% docs is_reportback %}\nWhether the post is a reportback. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs civic_action %}\nWhether the post is a Civic Action. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs scholarship_entry %}\nWhether the post is a Scholarship Entry. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs why_participated %}\nWhy the user participated in this action. Entered by the user.\n{% enddocs %}\n\n{% docs details %}\nDetails about the post. Contains contentfulId and other information (e.g. {\"campaignContentfulId\":\"6ATBgGEQEeJoIcxs1qbwaC\"})\n{% enddocs %}\n\n{% docs email %}\nEmail address of the user.\n{% enddocs %}\n\n{% docs source_details %}\nDetails about the source of the item. This is sometimes represented as a JSON object, and for other tables like Turbovote its represented as a string. (e.g. \"{\"contentful_id\":\"3CTLlXfbwtz1FOMpl31SKV\",\"utm_source\":\"scholarship_listing\",\"utm_medium\":\"referral\",\"utm_campaign\":\"fastweb_2019_08\"}\", newsletter_456)\n{% enddocs %}\n\n{% docs campaign_id %}\nThis is a unique identifier for the campaign\n{% enddocs %}\n\n{% docs campaign_run_id %}\nUnique identifier for the campaign run\n{% enddocs %}\n\n{% docs campaign_name %}\nName of the campaign\n{% enddocs %}\n\n{% docs campaign_cause %}\nCampaign cause (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_run_start_date %}\nStart date of the campaign run\n{% enddocs %}\n\n{% docs campaign_run_end_date %}\nEnd date of the campaign run\n{% enddocs %}\n\n{% docs campaign_created_date %}\nWhen the campaign was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs campaign_node_id %}\nInternal unique node id for the campaign\n{% enddocs %}\n\n{% docs campaign_node_id_title %}\nCampaign title\n{% enddocs %}\n\n{% docs campaign_run_id_title %}\nTitle of the campaign run\n{% enddocs %}\n\n{% docs campaign_action_type %}\nCampaign action type (eg. Make Something, Share Something)\n{% enddocs %}\n\n{% docs campaign_cause_type %}\nCampaign cause type (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_noun %}\nNoun applicable to the user's action\n{% enddocs %}\n\n{% docs campaign_verb %}\nVerb describing the action the user should take\n{% enddocs %}\n\n{% docs campaign_cta %}\nCampaign's call to action\n{% enddocs %}\n\n{% docs campaign_language %}\n\"Language in which the campaign is available\"\n{% enddocs %}\n\n{% docs agent_id %}\nIf set, the content type of the picture the member is sending us. Exp. image/png.\n{% enddocs %}\n\n{% docs attachment_content_type %}\nIf set, the handle of the Front agent this outbound support message is from.\n{% enddocs %}\n\n{% docs topic %}\nHolds a reference to the **last** campaign topic the member's conversation was in. This is useful to allow members to talk to Gambit and get quick responses (through Rivescript), without Gambit completely forgetting what state the member's interaction with a campaign topic was in.\n{% enddocs %}\n\n{% docs action_serial_id %}\nSerial id for the user's action. Depends on the source of the action. May be the bertly click id, sms message id, etc.\n{% enddocs %}\n\n{% docs channel %}\nChannel for the user's action. Depends on the source of the action. (e.g. web, sms)\n{% enddocs %}\n\n{% docs first_action_month %}\nMonth during which the user took their first action. \n{% enddocs %}\n\n{% docs event_id %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs event_source %}\nApplication source for event (eg. Phoenix, Northstar)\n{% enddocs %}\n\n{% docs event_datetime %}\nWhen the event occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs event_name %}\nName of the event (eg. northstar_submitted_register, https://docs.google.com/spreadsheets/d/1lm-fGrIm85nUTxSojqyCt_Ehmm1zEbViFhKpxcJiz1A/edit#gid=406441516)\n{% enddocs %}\n\n{% docs event_type %}\nType of event (pv = 'Page View', se = 'Structured Event')\n{% enddocs %}\n\n{% docs host %}\nURL host where event occurred (eg. www.dosomething.org or identity.dosomething.org)\n{% enddocs %}\n\n{% docs path %}\nURL path event occurred at (eg. /login or /us/campaigns/huddle-for-heroes)\n{% enddocs %}\n\n{% docs query_parameters %}\nOptional query parameters for the request (eg. query=huddle)\n{% enddocs %}\n\n{% docs se_category %}\nCategory of event (eg. focused_field, authentication) - Custom structured event\n{% enddocs %}\n\n{% docs se_action %}\nAction performed / event name (eg. form_submitted, action_failed) - Custom structured event\n{% enddocs %}\n\n{% docs se_label %}\nThe object of the action (eg. first_name, register, voter_reg_status) - Custom structured event\n{% enddocs %}\n\n{% docs session_id %}\nUnique identifier of the user's session\n{% enddocs %}\n\n{% docs session_counter %}\nHow many sessions a user has started\n{% enddocs %}\n\n{% docs browser_size %}\nWhich type of browser a user is using (eg. Mobile, Desktop)\n{% enddocs %}\n\n{% docs northstar_id %}\nThe Northstar ID of the user who generated the event\n{% enddocs %}\n\n{% docs device_id %}\nID of the device used\n{% enddocs %}\n\n{% docs referrer_host %}\nURL host of the referring site (eg. google.com)\n{% enddocs %}\n\n{% docs referrer_path %}\nURL path from referring site (eg. /10-stats-on-teen-drug-and-alcohol-use/)\n{% enddocs %}\n\n{% docs referrer_source %}\nReferrer source name (eg. Google, Facebook)\n{% enddocs %}\n\n{% docs utm_source %}\nTracks where the traffic is coming from. (eg. scholarship_listing, Facebook)\n{% enddocs %}\n\n{% docs utm_medium %}\nHow the traffic got to the platform (eg. referral, CPC)\n{% enddocs %}\n\n{% docs utm_campaign %}\nTracks which campaign the traffic was generated by. Shows up in Google Analytics as Campaign Name (eg. editorial_newsletter)\n{% enddocs %}\n\n{% docs url %}\nURL of campaign (eg. https://dosome.click/nyn5m7)\n{% enddocs %}\n\n{% docs modal_type %}\nNULL or SURVEY_MODAL\n{% enddocs %}\n\n{% docs landing_datetime %}\nWhen the session started in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs ending_datetime %}\nWhen the session ended in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs session_duration_seconds %}\nSession duration in seconds\n{% enddocs %}\n\n{% docs num_pages_views %}\nNumber of pages viewed in session\n{% enddocs %}\n\n{% docs landing_page %}\nFirst page the user viewed in the session (eg. /us/facts/11-facts-about-bp-oil-spill)\n{% enddocs %}\n\n{% docs exit_page %}\n\"Which page the user ended or exited their session from (eg. /us/campaigns/green-your-getaway)\"\n{% enddocs %}\n\n{% docs days_since_last_session %}\n\"Days since their last session.\"\n{% enddocs %}\n\n{% docs post_type %}\nType of post, (e.g. photo, voter-reg)\n{% enddocs %}\n\n{% docs noun %}\nNoun that corresponds to the item in the call to action that was delivered. (e.g. drawings, tweets)\n{% enddocs %}\n\n{% docs verb %}\nVerb corresponding to the action the user took. (e.g. shared, sent, taken)\n{% enddocs %}\n\n{% docs deleted_at %}\nDate time in UTC when a user deleted their post.\n{% enddocs %}\n\n{% docs _fivetran_deleted %}\nMarks rows that were deleted in the source table\n{% enddocs %}\n\n{% docs _fivetran_synced %}\n(UTC timestamp) keeps track of when each row was last successfully synced\n{% enddocs %}\n\n{% docs reportback %}\nWhether the post is a reportback \n{% enddocs %}\n\n{% docs active %}\nWhether the user is active \n{% enddocs %}\n\n{% docs anonymous %}\nWhether the user is anonymous when making the post \n{% enddocs %}\n\n{% docs callpower_campaign_id %}\nUnique ID corresponding to the Callpower campaign. Callpower allows users to record messages for their representatives.\n{% enddocs %}\n\n{% docs quiz %}\nWhether the post is a quiz \n{% enddocs %}\n\n{% docs action_type %}\nType of action the user took. (e.g. share-something, donate-something)\n{% enddocs %}\n\n{% docs online %}\nWhether the action is a online as opposed to IRL.\n{% enddocs %}\n\n{% docs time_commitment %}\nEstimated time required to do the action (e.g. 3.0+, <0.5)\n{% enddocs %}\n\n{% docs num_signups %}\nQuantity of campaign signups\n{% enddocs %}\n\n{% docs most_recent_signup %}\nTimestamp of the most recent signup in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs num_rbs %}\nQuantity of reportbacks for the user\n{% enddocs %}\n\n{% docs total_quantity %}\nTotal quantity of items in reportbacks\n{% enddocs %}\n\n{% docs most_recent_rb %}\nWhen the most recent reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs first_rb %}\nWhen the first reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs avg_time_betw_rbs %}\nCalculated average time between reportbacks.\n{% enddocs %}\n\n{% docs avg_days_next_action_after_rb %}\nCalculated average days until next action after reportback\n{% enddocs %}\n\n{% docs days_to_next_action_after_last_rb %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs most_recent_mam_action %}\nMost recent monthly active member qualifying action in UTC (eg. 2018-01-01 12:00:00).\n{% enddocs %}\n\n{% docs most_recent_email_open %}\nMost recent email open in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs most_recent_all_actions %}\nMost recent timestamp of any action in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs last_action_is_rb %}\nWhether the last action the user took was a reportback\n{% enddocs %}\n\n{% docs days_since_last_action %}\nDays since the user's last action\n{% enddocs %}\n\n{% docs time_to_first_rb %}\nHow much time after registering until the user's first reportback\n{% enddocs %}\n\n{% docs sms_unsubscribed_at %}\nTimestamp of when user unsubscribed from SMS messaging\n{% enddocs %}\n\n{% docs user_unsubscribed_at %}\nTimestamp of when user unsubscribed from email or sms\n{% enddocs %}\n\n{% docs voter_reg_acquisition %}\nWhether the user was an acquisition through voter registration efforts. \n{% enddocs %}\n\n{% docs last_logged_in %}\nDate time in UTC when user last logged in to Northstar\n{% enddocs %}\n\n{% docs last_accessed %}\nDate time in UTC when user last access the website\n{% enddocs %}\n\n{% docs last_messaged_at %}\nDate time in UTC when user was last sent a message via SMS or email\n{% enddocs %}\n\n{% docs facebook_id %}\nUser's facebook id\n{% enddocs %}\n\n{% docs mobile %}\nUsers's mobile phone number\n{% enddocs %}\n\n{% docs birthdate %}\nUser's birthdate\n{% enddocs %}\n\n{% docs first_name %}\nUser's first name\n{% enddocs %}\n\n{% docs last_name %}\nUser's last name\n{% enddocs %}\n\n{% docs voter_registration_status %}\nUser's registration status. (e.g. registration_complete, confirmed, uncertain) \n{% enddocs %}\n\n{% docs finish_with_state %}\nIf the registrant was eligible to use and passed through to complete their registration with their state\u2019s OVR system, it will be indicated in this field (direct quote from Rock-The-Vote documentation). Yes/No value in field.\n{% enddocs %}\n\n{% docs reportback_volume %}\nThis field returns 1 if non voter-reg action, since campaigns team only counts those a 1 reportback. If voter-reg action, we want to count quantity of post as number of registered voters.\n{% enddocs %}\n\n{% docs address_street_1 %}\nFirst line of user's street address\n{% enddocs %}\n\n{% docs address_street_2 %}\nSecond line of user's street address\n{% enddocs %}\n\n{% docs city %}\nUser's city\n{% enddocs %}\n\n{% docs state %}\nUser's state\n{% enddocs %}\n\n{% docs country %}\nUser's country\n{% enddocs %}\n\n{% docs language %}\nUser's language\n{% enddocs %}\n\n{% docs cio_status %}\nStatus of user from CIO. (e.g. customer_subscribed, customer_unsubscribed)\n{% enddocs %}\n\n{% docs cio_status_timestamp %}\nTimestamp when users's status was updated.\n{% enddocs %}\n\n{% docs sms_status %}\nCurrent SMS status. (e.g. undeliverable, unknown)\n{% enddocs %}\n\n{% docs source_detail %}\nDetails of the origin of the user. (e.g. tell_a_friend, other, opt_in_path/197981)\n{% enddocs %}\n\n{% docs badges %}\nWhether the user has any badges. \n{% enddocs %}\n\n{% docs refer_friends %}\nWhether the user is a part of the refer a friend campaign. \n{% enddocs %}\n\n{% docs subscribed_member %}\nWhether the user is subscribed. \n{% enddocs %}\n\n{% docs last_updated_at %}\nTimestamp when users's was updated.\n{% enddocs %}\n\n{% docs school_id %}\nUnique identifier for the user's school. This info comes from the school finder.\n{% enddocs %}\n\n{% docs newsletter_topic %}\nNewsletter topic. (e.g. community, lifestyle)\n{% enddocs %}\n\n{% docs user_agent %}\nFull user agent string for a user's browser (e.g. \"Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:24.0) Gecko/20100101 Firefox/24.0\")\n{% enddocs %}\n\n{% docs drupal_id %}\nOld Drupal user ID\n{% enddocs %}\n\n{% docs campaigns %}\nCampaigns a user is signed up for.\n{% enddocs %}\n\n{% docs audit %}\nA very useful field with data containing information about changes to a user, e.g. timestamps when the user subscribed and unsubscribed.\n{% enddocs %}\n\n{% docs voting_plan_status %}\nThe indication of the user's plan to vote, e.g. voting, not_voting, cant_vote\n{% enddocs %}\n\n{% docs voting_plan_time_of_day %}\nThe time of day when the user plans to vote, e.g morning, afternoon, evening\n{% enddocs %}\n\n{% docs voting_plan_method_of_transport %}\nHow the user plans to get to their polling place. e.g. walk, drive\n{% enddocs %}\n\n{% docs voting_plan_attending_with %}\nWith Whom the user plans to go voting, e.g. family, friends, alone\n{% enddocs %}\n\n{% docs feature_flags %}\nJSON containing info on features like badges and refer-a-friend.\n{% enddocs %}\n\n{% docs dbt_updated_at %}\nDBT snapshot table data. The updated_at timestamp of the source record when this snapshot row was inserted.\n{% enddocs %}\n\n{% docs dbt_scd_id %}\nDBT snapshot table data. A unique key generated for each snapshotted record.\n{% enddocs %}\n\n{% docs dbt_valid_from %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this snapshot row was first inserted\n{% enddocs %}\n\n{% docs dbt_valid_to %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this row row became invalidated.\n{% enddocs %}\n\n{% docs google_id %}\nUser's Google ID obtained from login.\n{% enddocs %}\n\n{% docs causes %}\nCauses in which a user is interested. e.g. animal welfare, education, mental_health\n{% enddocs %}\n\n{% docs email_subscription_status %}\nEmail subscription status of the user\n{% enddocs %}\n\n{% docs role %}\nUser's role, e.g. user, staff\n{% enddocs %}\n\n{% docs cio_backfilled %}\nWhether this user's data was backfilled from CIO\n{% enddocs %}\n\n{% docs addr_source %}\nWhere the user submitted their address, e.g. sms, GDPR\n{% enddocs %}\n\n{% docs email_subscription_topics %}\nEmail subscription topics correspond to categories in CIO in which the user is interested. e.g. lifestyle, community, scholarship\n{% enddocs %}\n\n{% docs sms_paused %}\nWhether we've paused sending sms messages to the user.\n{% enddocs %}\n\n\n\n\n", "name": "signup_id", "unique_id": "ds_dbt.signup_id", "block_contents": "Unique identifier for the signup"}, "ds_dbt.post_class": {"root_path": "/Users/mrich/projects/quasar/quasar/dbt", "resource_type": "docs", "path": "schema.md", "original_file_path": "models/schema.md", "package_name": "ds_dbt", "file_contents": "\n{% docs click_id %}\nThis is a unique identifier for each click\n{% enddocs %}\n\n{% docs click_time %}\nTimestamp when user clicked.\n{% enddocs %}\n\n{% docs shortened %}\nShortened URL\n{% enddocs %}\n\n{% docs target_url %}\nURL where the user will be directed\n{% enddocs %}\n\n{% docs broadcast_id %}\nID of the broadcast that generated the shortened URL\n{% enddocs %}\n\n{% docs source %}\nSource of the URL (e.g. SMS, web), origin of the post (e.g. phoenix-web, phoenix-ashes, sms), or source where user was acquired. (e.g. sms, phoenix-next)\n{% enddocs %}\n\n{% docs interaction_type %}\nHow the user interacted with the link (e.g. preview, click)\n{% enddocs %}\n\n{% docs id %}\nUnique identifier for the post\n{% enddocs %}\n\n{% docs type %}\nType of post (e.g. photo)\n{% enddocs %}\n\n{% docs action %}\nPost action (e.g. DefendDreamers_Nov9_CongressCalls, GunViolence2018_Feb15_ParklandResponse)\n{% enddocs %}\n\n{% docs status %}\nPost status (e.g. accepted, rejected)\n{% enddocs %}\n\n{% docs quantity %}\nNumerical quantity of items specified in the call to action (e.g. 10, 200)\n{% enddocs %}\n\n{% docs source_bucket %}\nGrouping bucket for origin of the post (e.g. web, sms) \n{% enddocs %}\n\n{% docs created_at %}\nWhen the item was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs updated_at %}\nWhen the item was updated in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs text %}\nText of the post (e.g. \"Zoo animals and a super hero trying to help too!\") \n{% enddocs %}\n\n{% docs signup_id %}\nUnique identifier for the signup \n{% enddocs %}\n\n{% docs post_class %}\nClass of the signup (e.g. \"photo - default\", \"phone-call - DefendDreamers_Jan16_BothBodies\")\n{% enddocs %}\n\n{% docs is_accepted %}\nWhether the post has been accepted to be displayed to the public on the website\n{% enddocs %}\n\n{% docs action_id %}\nInternal identifier of the action \n{% enddocs %}\n\n{% docs location %}\nLocation where the action takes place (e.g. US-NY)\n{% enddocs %}\n\n{% docs postal_code %}\nPostal code where the action takes place\n{% enddocs %}\n\n{% docs is_reportback %}\nWhether the post is a reportback. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs civic_action %}\nWhether the post is a Civic Action. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs scholarship_entry %}\nWhether the post is a Scholarship Entry. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs why_participated %}\nWhy the user participated in this action. Entered by the user.\n{% enddocs %}\n\n{% docs details %}\nDetails about the post. Contains contentfulId and other information (e.g. {\"campaignContentfulId\":\"6ATBgGEQEeJoIcxs1qbwaC\"})\n{% enddocs %}\n\n{% docs email %}\nEmail address of the user.\n{% enddocs %}\n\n{% docs source_details %}\nDetails about the source of the item. This is sometimes represented as a JSON object, and for other tables like Turbovote its represented as a string. (e.g. \"{\"contentful_id\":\"3CTLlXfbwtz1FOMpl31SKV\",\"utm_source\":\"scholarship_listing\",\"utm_medium\":\"referral\",\"utm_campaign\":\"fastweb_2019_08\"}\", newsletter_456)\n{% enddocs %}\n\n{% docs campaign_id %}\nThis is a unique identifier for the campaign\n{% enddocs %}\n\n{% docs campaign_run_id %}\nUnique identifier for the campaign run\n{% enddocs %}\n\n{% docs campaign_name %}\nName of the campaign\n{% enddocs %}\n\n{% docs campaign_cause %}\nCampaign cause (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_run_start_date %}\nStart date of the campaign run\n{% enddocs %}\n\n{% docs campaign_run_end_date %}\nEnd date of the campaign run\n{% enddocs %}\n\n{% docs campaign_created_date %}\nWhen the campaign was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs campaign_node_id %}\nInternal unique node id for the campaign\n{% enddocs %}\n\n{% docs campaign_node_id_title %}\nCampaign title\n{% enddocs %}\n\n{% docs campaign_run_id_title %}\nTitle of the campaign run\n{% enddocs %}\n\n{% docs campaign_action_type %}\nCampaign action type (eg. Make Something, Share Something)\n{% enddocs %}\n\n{% docs campaign_cause_type %}\nCampaign cause type (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_noun %}\nNoun applicable to the user's action\n{% enddocs %}\n\n{% docs campaign_verb %}\nVerb describing the action the user should take\n{% enddocs %}\n\n{% docs campaign_cta %}\nCampaign's call to action\n{% enddocs %}\n\n{% docs campaign_language %}\n\"Language in which the campaign is available\"\n{% enddocs %}\n\n{% docs agent_id %}\nIf set, the content type of the picture the member is sending us. Exp. image/png.\n{% enddocs %}\n\n{% docs attachment_content_type %}\nIf set, the handle of the Front agent this outbound support message is from.\n{% enddocs %}\n\n{% docs topic %}\nHolds a reference to the **last** campaign topic the member's conversation was in. This is useful to allow members to talk to Gambit and get quick responses (through Rivescript), without Gambit completely forgetting what state the member's interaction with a campaign topic was in.\n{% enddocs %}\n\n{% docs action_serial_id %}\nSerial id for the user's action. Depends on the source of the action. May be the bertly click id, sms message id, etc.\n{% enddocs %}\n\n{% docs channel %}\nChannel for the user's action. Depends on the source of the action. (e.g. web, sms)\n{% enddocs %}\n\n{% docs first_action_month %}\nMonth during which the user took their first action. \n{% enddocs %}\n\n{% docs event_id %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs event_source %}\nApplication source for event (eg. Phoenix, Northstar)\n{% enddocs %}\n\n{% docs event_datetime %}\nWhen the event occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs event_name %}\nName of the event (eg. northstar_submitted_register, https://docs.google.com/spreadsheets/d/1lm-fGrIm85nUTxSojqyCt_Ehmm1zEbViFhKpxcJiz1A/edit#gid=406441516)\n{% enddocs %}\n\n{% docs event_type %}\nType of event (pv = 'Page View', se = 'Structured Event')\n{% enddocs %}\n\n{% docs host %}\nURL host where event occurred (eg. www.dosomething.org or identity.dosomething.org)\n{% enddocs %}\n\n{% docs path %}\nURL path event occurred at (eg. /login or /us/campaigns/huddle-for-heroes)\n{% enddocs %}\n\n{% docs query_parameters %}\nOptional query parameters for the request (eg. query=huddle)\n{% enddocs %}\n\n{% docs se_category %}\nCategory of event (eg. focused_field, authentication) - Custom structured event\n{% enddocs %}\n\n{% docs se_action %}\nAction performed / event name (eg. form_submitted, action_failed) - Custom structured event\n{% enddocs %}\n\n{% docs se_label %}\nThe object of the action (eg. first_name, register, voter_reg_status) - Custom structured event\n{% enddocs %}\n\n{% docs session_id %}\nUnique identifier of the user's session\n{% enddocs %}\n\n{% docs session_counter %}\nHow many sessions a user has started\n{% enddocs %}\n\n{% docs browser_size %}\nWhich type of browser a user is using (eg. Mobile, Desktop)\n{% enddocs %}\n\n{% docs northstar_id %}\nThe Northstar ID of the user who generated the event\n{% enddocs %}\n\n{% docs device_id %}\nID of the device used\n{% enddocs %}\n\n{% docs referrer_host %}\nURL host of the referring site (eg. google.com)\n{% enddocs %}\n\n{% docs referrer_path %}\nURL path from referring site (eg. /10-stats-on-teen-drug-and-alcohol-use/)\n{% enddocs %}\n\n{% docs referrer_source %}\nReferrer source name (eg. Google, Facebook)\n{% enddocs %}\n\n{% docs utm_source %}\nTracks where the traffic is coming from. (eg. scholarship_listing, Facebook)\n{% enddocs %}\n\n{% docs utm_medium %}\nHow the traffic got to the platform (eg. referral, CPC)\n{% enddocs %}\n\n{% docs utm_campaign %}\nTracks which campaign the traffic was generated by. Shows up in Google Analytics as Campaign Name (eg. editorial_newsletter)\n{% enddocs %}\n\n{% docs url %}\nURL of campaign (eg. https://dosome.click/nyn5m7)\n{% enddocs %}\n\n{% docs modal_type %}\nNULL or SURVEY_MODAL\n{% enddocs %}\n\n{% docs landing_datetime %}\nWhen the session started in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs ending_datetime %}\nWhen the session ended in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs session_duration_seconds %}\nSession duration in seconds\n{% enddocs %}\n\n{% docs num_pages_views %}\nNumber of pages viewed in session\n{% enddocs %}\n\n{% docs landing_page %}\nFirst page the user viewed in the session (eg. /us/facts/11-facts-about-bp-oil-spill)\n{% enddocs %}\n\n{% docs exit_page %}\n\"Which page the user ended or exited their session from (eg. /us/campaigns/green-your-getaway)\"\n{% enddocs %}\n\n{% docs days_since_last_session %}\n\"Days since their last session.\"\n{% enddocs %}\n\n{% docs post_type %}\nType of post, (e.g. photo, voter-reg)\n{% enddocs %}\n\n{% docs noun %}\nNoun that corresponds to the item in the call to action that was delivered. (e.g. drawings, tweets)\n{% enddocs %}\n\n{% docs verb %}\nVerb corresponding to the action the user took. (e.g. shared, sent, taken)\n{% enddocs %}\n\n{% docs deleted_at %}\nDate time in UTC when a user deleted their post.\n{% enddocs %}\n\n{% docs _fivetran_deleted %}\nMarks rows that were deleted in the source table\n{% enddocs %}\n\n{% docs _fivetran_synced %}\n(UTC timestamp) keeps track of when each row was last successfully synced\n{% enddocs %}\n\n{% docs reportback %}\nWhether the post is a reportback \n{% enddocs %}\n\n{% docs active %}\nWhether the user is active \n{% enddocs %}\n\n{% docs anonymous %}\nWhether the user is anonymous when making the post \n{% enddocs %}\n\n{% docs callpower_campaign_id %}\nUnique ID corresponding to the Callpower campaign. Callpower allows users to record messages for their representatives.\n{% enddocs %}\n\n{% docs quiz %}\nWhether the post is a quiz \n{% enddocs %}\n\n{% docs action_type %}\nType of action the user took. (e.g. share-something, donate-something)\n{% enddocs %}\n\n{% docs online %}\nWhether the action is a online as opposed to IRL.\n{% enddocs %}\n\n{% docs time_commitment %}\nEstimated time required to do the action (e.g. 3.0+, <0.5)\n{% enddocs %}\n\n{% docs num_signups %}\nQuantity of campaign signups\n{% enddocs %}\n\n{% docs most_recent_signup %}\nTimestamp of the most recent signup in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs num_rbs %}\nQuantity of reportbacks for the user\n{% enddocs %}\n\n{% docs total_quantity %}\nTotal quantity of items in reportbacks\n{% enddocs %}\n\n{% docs most_recent_rb %}\nWhen the most recent reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs first_rb %}\nWhen the first reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs avg_time_betw_rbs %}\nCalculated average time between reportbacks.\n{% enddocs %}\n\n{% docs avg_days_next_action_after_rb %}\nCalculated average days until next action after reportback\n{% enddocs %}\n\n{% docs days_to_next_action_after_last_rb %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs most_recent_mam_action %}\nMost recent monthly active member qualifying action in UTC (eg. 2018-01-01 12:00:00).\n{% enddocs %}\n\n{% docs most_recent_email_open %}\nMost recent email open in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs most_recent_all_actions %}\nMost recent timestamp of any action in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs last_action_is_rb %}\nWhether the last action the user took was a reportback\n{% enddocs %}\n\n{% docs days_since_last_action %}\nDays since the user's last action\n{% enddocs %}\n\n{% docs time_to_first_rb %}\nHow much time after registering until the user's first reportback\n{% enddocs %}\n\n{% docs sms_unsubscribed_at %}\nTimestamp of when user unsubscribed from SMS messaging\n{% enddocs %}\n\n{% docs user_unsubscribed_at %}\nTimestamp of when user unsubscribed from email or sms\n{% enddocs %}\n\n{% docs voter_reg_acquisition %}\nWhether the user was an acquisition through voter registration efforts. \n{% enddocs %}\n\n{% docs last_logged_in %}\nDate time in UTC when user last logged in to Northstar\n{% enddocs %}\n\n{% docs last_accessed %}\nDate time in UTC when user last access the website\n{% enddocs %}\n\n{% docs last_messaged_at %}\nDate time in UTC when user was last sent a message via SMS or email\n{% enddocs %}\n\n{% docs facebook_id %}\nUser's facebook id\n{% enddocs %}\n\n{% docs mobile %}\nUsers's mobile phone number\n{% enddocs %}\n\n{% docs birthdate %}\nUser's birthdate\n{% enddocs %}\n\n{% docs first_name %}\nUser's first name\n{% enddocs %}\n\n{% docs last_name %}\nUser's last name\n{% enddocs %}\n\n{% docs voter_registration_status %}\nUser's registration status. (e.g. registration_complete, confirmed, uncertain) \n{% enddocs %}\n\n{% docs finish_with_state %}\nIf the registrant was eligible to use and passed through to complete their registration with their state\u2019s OVR system, it will be indicated in this field (direct quote from Rock-The-Vote documentation). Yes/No value in field.\n{% enddocs %}\n\n{% docs reportback_volume %}\nThis field returns 1 if non voter-reg action, since campaigns team only counts those a 1 reportback. If voter-reg action, we want to count quantity of post as number of registered voters.\n{% enddocs %}\n\n{% docs address_street_1 %}\nFirst line of user's street address\n{% enddocs %}\n\n{% docs address_street_2 %}\nSecond line of user's street address\n{% enddocs %}\n\n{% docs city %}\nUser's city\n{% enddocs %}\n\n{% docs state %}\nUser's state\n{% enddocs %}\n\n{% docs country %}\nUser's country\n{% enddocs %}\n\n{% docs language %}\nUser's language\n{% enddocs %}\n\n{% docs cio_status %}\nStatus of user from CIO. (e.g. customer_subscribed, customer_unsubscribed)\n{% enddocs %}\n\n{% docs cio_status_timestamp %}\nTimestamp when users's status was updated.\n{% enddocs %}\n\n{% docs sms_status %}\nCurrent SMS status. (e.g. undeliverable, unknown)\n{% enddocs %}\n\n{% docs source_detail %}\nDetails of the origin of the user. (e.g. tell_a_friend, other, opt_in_path/197981)\n{% enddocs %}\n\n{% docs badges %}\nWhether the user has any badges. \n{% enddocs %}\n\n{% docs refer_friends %}\nWhether the user is a part of the refer a friend campaign. \n{% enddocs %}\n\n{% docs subscribed_member %}\nWhether the user is subscribed. \n{% enddocs %}\n\n{% docs last_updated_at %}\nTimestamp when users's was updated.\n{% enddocs %}\n\n{% docs school_id %}\nUnique identifier for the user's school. This info comes from the school finder.\n{% enddocs %}\n\n{% docs newsletter_topic %}\nNewsletter topic. (e.g. community, lifestyle)\n{% enddocs %}\n\n{% docs user_agent %}\nFull user agent string for a user's browser (e.g. \"Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:24.0) Gecko/20100101 Firefox/24.0\")\n{% enddocs %}\n\n{% docs drupal_id %}\nOld Drupal user ID\n{% enddocs %}\n\n{% docs campaigns %}\nCampaigns a user is signed up for.\n{% enddocs %}\n\n{% docs audit %}\nA very useful field with data containing information about changes to a user, e.g. timestamps when the user subscribed and unsubscribed.\n{% enddocs %}\n\n{% docs voting_plan_status %}\nThe indication of the user's plan to vote, e.g. voting, not_voting, cant_vote\n{% enddocs %}\n\n{% docs voting_plan_time_of_day %}\nThe time of day when the user plans to vote, e.g morning, afternoon, evening\n{% enddocs %}\n\n{% docs voting_plan_method_of_transport %}\nHow the user plans to get to their polling place. e.g. walk, drive\n{% enddocs %}\n\n{% docs voting_plan_attending_with %}\nWith Whom the user plans to go voting, e.g. family, friends, alone\n{% enddocs %}\n\n{% docs feature_flags %}\nJSON containing info on features like badges and refer-a-friend.\n{% enddocs %}\n\n{% docs dbt_updated_at %}\nDBT snapshot table data. The updated_at timestamp of the source record when this snapshot row was inserted.\n{% enddocs %}\n\n{% docs dbt_scd_id %}\nDBT snapshot table data. A unique key generated for each snapshotted record.\n{% enddocs %}\n\n{% docs dbt_valid_from %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this snapshot row was first inserted\n{% enddocs %}\n\n{% docs dbt_valid_to %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this row row became invalidated.\n{% enddocs %}\n\n{% docs google_id %}\nUser's Google ID obtained from login.\n{% enddocs %}\n\n{% docs causes %}\nCauses in which a user is interested. e.g. animal welfare, education, mental_health\n{% enddocs %}\n\n{% docs email_subscription_status %}\nEmail subscription status of the user\n{% enddocs %}\n\n{% docs role %}\nUser's role, e.g. user, staff\n{% enddocs %}\n\n{% docs cio_backfilled %}\nWhether this user's data was backfilled from CIO\n{% enddocs %}\n\n{% docs addr_source %}\nWhere the user submitted their address, e.g. sms, GDPR\n{% enddocs %}\n\n{% docs email_subscription_topics %}\nEmail subscription topics correspond to categories in CIO in which the user is interested. e.g. lifestyle, community, scholarship\n{% enddocs %}\n\n{% docs sms_paused %}\nWhether we've paused sending sms messages to the user.\n{% enddocs %}\n\n\n\n\n", "name": "post_class", "unique_id": "ds_dbt.post_class", "block_contents": "Class of the signup (e.g. \"photo - default\", \"phone-call - DefendDreamers_Jan16_BothBodies\")"}, "ds_dbt.is_accepted": {"root_path": "/Users/mrich/projects/quasar/quasar/dbt", "resource_type": "docs", "path": "schema.md", "original_file_path": "models/schema.md", "package_name": "ds_dbt", "file_contents": "\n{% docs click_id %}\nThis is a unique identifier for each click\n{% enddocs %}\n\n{% docs click_time %}\nTimestamp when user clicked.\n{% enddocs %}\n\n{% docs shortened %}\nShortened URL\n{% enddocs %}\n\n{% docs target_url %}\nURL where the user will be directed\n{% enddocs %}\n\n{% docs broadcast_id %}\nID of the broadcast that generated the shortened URL\n{% enddocs %}\n\n{% docs source %}\nSource of the URL (e.g. SMS, web), origin of the post (e.g. phoenix-web, phoenix-ashes, sms), or source where user was acquired. (e.g. sms, phoenix-next)\n{% enddocs %}\n\n{% docs interaction_type %}\nHow the user interacted with the link (e.g. preview, click)\n{% enddocs %}\n\n{% docs id %}\nUnique identifier for the post\n{% enddocs %}\n\n{% docs type %}\nType of post (e.g. photo)\n{% enddocs %}\n\n{% docs action %}\nPost action (e.g. DefendDreamers_Nov9_CongressCalls, GunViolence2018_Feb15_ParklandResponse)\n{% enddocs %}\n\n{% docs status %}\nPost status (e.g. accepted, rejected)\n{% enddocs %}\n\n{% docs quantity %}\nNumerical quantity of items specified in the call to action (e.g. 10, 200)\n{% enddocs %}\n\n{% docs source_bucket %}\nGrouping bucket for origin of the post (e.g. web, sms) \n{% enddocs %}\n\n{% docs created_at %}\nWhen the item was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs updated_at %}\nWhen the item was updated in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs text %}\nText of the post (e.g. \"Zoo animals and a super hero trying to help too!\") \n{% enddocs %}\n\n{% docs signup_id %}\nUnique identifier for the signup \n{% enddocs %}\n\n{% docs post_class %}\nClass of the signup (e.g. \"photo - default\", \"phone-call - DefendDreamers_Jan16_BothBodies\")\n{% enddocs %}\n\n{% docs is_accepted %}\nWhether the post has been accepted to be displayed to the public on the website\n{% enddocs %}\n\n{% docs action_id %}\nInternal identifier of the action \n{% enddocs %}\n\n{% docs location %}\nLocation where the action takes place (e.g. US-NY)\n{% enddocs %}\n\n{% docs postal_code %}\nPostal code where the action takes place\n{% enddocs %}\n\n{% docs is_reportback %}\nWhether the post is a reportback. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs civic_action %}\nWhether the post is a Civic Action. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs scholarship_entry %}\nWhether the post is a Scholarship Entry. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs why_participated %}\nWhy the user participated in this action. Entered by the user.\n{% enddocs %}\n\n{% docs details %}\nDetails about the post. Contains contentfulId and other information (e.g. {\"campaignContentfulId\":\"6ATBgGEQEeJoIcxs1qbwaC\"})\n{% enddocs %}\n\n{% docs email %}\nEmail address of the user.\n{% enddocs %}\n\n{% docs source_details %}\nDetails about the source of the item. This is sometimes represented as a JSON object, and for other tables like Turbovote its represented as a string. (e.g. \"{\"contentful_id\":\"3CTLlXfbwtz1FOMpl31SKV\",\"utm_source\":\"scholarship_listing\",\"utm_medium\":\"referral\",\"utm_campaign\":\"fastweb_2019_08\"}\", newsletter_456)\n{% enddocs %}\n\n{% docs campaign_id %}\nThis is a unique identifier for the campaign\n{% enddocs %}\n\n{% docs campaign_run_id %}\nUnique identifier for the campaign run\n{% enddocs %}\n\n{% docs campaign_name %}\nName of the campaign\n{% enddocs %}\n\n{% docs campaign_cause %}\nCampaign cause (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_run_start_date %}\nStart date of the campaign run\n{% enddocs %}\n\n{% docs campaign_run_end_date %}\nEnd date of the campaign run\n{% enddocs %}\n\n{% docs campaign_created_date %}\nWhen the campaign was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs campaign_node_id %}\nInternal unique node id for the campaign\n{% enddocs %}\n\n{% docs campaign_node_id_title %}\nCampaign title\n{% enddocs %}\n\n{% docs campaign_run_id_title %}\nTitle of the campaign run\n{% enddocs %}\n\n{% docs campaign_action_type %}\nCampaign action type (eg. Make Something, Share Something)\n{% enddocs %}\n\n{% docs campaign_cause_type %}\nCampaign cause type (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_noun %}\nNoun applicable to the user's action\n{% enddocs %}\n\n{% docs campaign_verb %}\nVerb describing the action the user should take\n{% enddocs %}\n\n{% docs campaign_cta %}\nCampaign's call to action\n{% enddocs %}\n\n{% docs campaign_language %}\n\"Language in which the campaign is available\"\n{% enddocs %}\n\n{% docs agent_id %}\nIf set, the content type of the picture the member is sending us. Exp. image/png.\n{% enddocs %}\n\n{% docs attachment_content_type %}\nIf set, the handle of the Front agent this outbound support message is from.\n{% enddocs %}\n\n{% docs topic %}\nHolds a reference to the **last** campaign topic the member's conversation was in. This is useful to allow members to talk to Gambit and get quick responses (through Rivescript), without Gambit completely forgetting what state the member's interaction with a campaign topic was in.\n{% enddocs %}\n\n{% docs action_serial_id %}\nSerial id for the user's action. Depends on the source of the action. May be the bertly click id, sms message id, etc.\n{% enddocs %}\n\n{% docs channel %}\nChannel for the user's action. Depends on the source of the action. (e.g. web, sms)\n{% enddocs %}\n\n{% docs first_action_month %}\nMonth during which the user took their first action. \n{% enddocs %}\n\n{% docs event_id %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs event_source %}\nApplication source for event (eg. Phoenix, Northstar)\n{% enddocs %}\n\n{% docs event_datetime %}\nWhen the event occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs event_name %}\nName of the event (eg. northstar_submitted_register, https://docs.google.com/spreadsheets/d/1lm-fGrIm85nUTxSojqyCt_Ehmm1zEbViFhKpxcJiz1A/edit#gid=406441516)\n{% enddocs %}\n\n{% docs event_type %}\nType of event (pv = 'Page View', se = 'Structured Event')\n{% enddocs %}\n\n{% docs host %}\nURL host where event occurred (eg. www.dosomething.org or identity.dosomething.org)\n{% enddocs %}\n\n{% docs path %}\nURL path event occurred at (eg. /login or /us/campaigns/huddle-for-heroes)\n{% enddocs %}\n\n{% docs query_parameters %}\nOptional query parameters for the request (eg. query=huddle)\n{% enddocs %}\n\n{% docs se_category %}\nCategory of event (eg. focused_field, authentication) - Custom structured event\n{% enddocs %}\n\n{% docs se_action %}\nAction performed / event name (eg. form_submitted, action_failed) - Custom structured event\n{% enddocs %}\n\n{% docs se_label %}\nThe object of the action (eg. first_name, register, voter_reg_status) - Custom structured event\n{% enddocs %}\n\n{% docs session_id %}\nUnique identifier of the user's session\n{% enddocs %}\n\n{% docs session_counter %}\nHow many sessions a user has started\n{% enddocs %}\n\n{% docs browser_size %}\nWhich type of browser a user is using (eg. Mobile, Desktop)\n{% enddocs %}\n\n{% docs northstar_id %}\nThe Northstar ID of the user who generated the event\n{% enddocs %}\n\n{% docs device_id %}\nID of the device used\n{% enddocs %}\n\n{% docs referrer_host %}\nURL host of the referring site (eg. google.com)\n{% enddocs %}\n\n{% docs referrer_path %}\nURL path from referring site (eg. /10-stats-on-teen-drug-and-alcohol-use/)\n{% enddocs %}\n\n{% docs referrer_source %}\nReferrer source name (eg. Google, Facebook)\n{% enddocs %}\n\n{% docs utm_source %}\nTracks where the traffic is coming from. (eg. scholarship_listing, Facebook)\n{% enddocs %}\n\n{% docs utm_medium %}\nHow the traffic got to the platform (eg. referral, CPC)\n{% enddocs %}\n\n{% docs utm_campaign %}\nTracks which campaign the traffic was generated by. Shows up in Google Analytics as Campaign Name (eg. editorial_newsletter)\n{% enddocs %}\n\n{% docs url %}\nURL of campaign (eg. https://dosome.click/nyn5m7)\n{% enddocs %}\n\n{% docs modal_type %}\nNULL or SURVEY_MODAL\n{% enddocs %}\n\n{% docs landing_datetime %}\nWhen the session started in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs ending_datetime %}\nWhen the session ended in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs session_duration_seconds %}\nSession duration in seconds\n{% enddocs %}\n\n{% docs num_pages_views %}\nNumber of pages viewed in session\n{% enddocs %}\n\n{% docs landing_page %}\nFirst page the user viewed in the session (eg. /us/facts/11-facts-about-bp-oil-spill)\n{% enddocs %}\n\n{% docs exit_page %}\n\"Which page the user ended or exited their session from (eg. /us/campaigns/green-your-getaway)\"\n{% enddocs %}\n\n{% docs days_since_last_session %}\n\"Days since their last session.\"\n{% enddocs %}\n\n{% docs post_type %}\nType of post, (e.g. photo, voter-reg)\n{% enddocs %}\n\n{% docs noun %}\nNoun that corresponds to the item in the call to action that was delivered. (e.g. drawings, tweets)\n{% enddocs %}\n\n{% docs verb %}\nVerb corresponding to the action the user took. (e.g. shared, sent, taken)\n{% enddocs %}\n\n{% docs deleted_at %}\nDate time in UTC when a user deleted their post.\n{% enddocs %}\n\n{% docs _fivetran_deleted %}\nMarks rows that were deleted in the source table\n{% enddocs %}\n\n{% docs _fivetran_synced %}\n(UTC timestamp) keeps track of when each row was last successfully synced\n{% enddocs %}\n\n{% docs reportback %}\nWhether the post is a reportback \n{% enddocs %}\n\n{% docs active %}\nWhether the user is active \n{% enddocs %}\n\n{% docs anonymous %}\nWhether the user is anonymous when making the post \n{% enddocs %}\n\n{% docs callpower_campaign_id %}\nUnique ID corresponding to the Callpower campaign. Callpower allows users to record messages for their representatives.\n{% enddocs %}\n\n{% docs quiz %}\nWhether the post is a quiz \n{% enddocs %}\n\n{% docs action_type %}\nType of action the user took. (e.g. share-something, donate-something)\n{% enddocs %}\n\n{% docs online %}\nWhether the action is a online as opposed to IRL.\n{% enddocs %}\n\n{% docs time_commitment %}\nEstimated time required to do the action (e.g. 3.0+, <0.5)\n{% enddocs %}\n\n{% docs num_signups %}\nQuantity of campaign signups\n{% enddocs %}\n\n{% docs most_recent_signup %}\nTimestamp of the most recent signup in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs num_rbs %}\nQuantity of reportbacks for the user\n{% enddocs %}\n\n{% docs total_quantity %}\nTotal quantity of items in reportbacks\n{% enddocs %}\n\n{% docs most_recent_rb %}\nWhen the most recent reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs first_rb %}\nWhen the first reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs avg_time_betw_rbs %}\nCalculated average time between reportbacks.\n{% enddocs %}\n\n{% docs avg_days_next_action_after_rb %}\nCalculated average days until next action after reportback\n{% enddocs %}\n\n{% docs days_to_next_action_after_last_rb %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs most_recent_mam_action %}\nMost recent monthly active member qualifying action in UTC (eg. 2018-01-01 12:00:00).\n{% enddocs %}\n\n{% docs most_recent_email_open %}\nMost recent email open in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs most_recent_all_actions %}\nMost recent timestamp of any action in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs last_action_is_rb %}\nWhether the last action the user took was a reportback\n{% enddocs %}\n\n{% docs days_since_last_action %}\nDays since the user's last action\n{% enddocs %}\n\n{% docs time_to_first_rb %}\nHow much time after registering until the user's first reportback\n{% enddocs %}\n\n{% docs sms_unsubscribed_at %}\nTimestamp of when user unsubscribed from SMS messaging\n{% enddocs %}\n\n{% docs user_unsubscribed_at %}\nTimestamp of when user unsubscribed from email or sms\n{% enddocs %}\n\n{% docs voter_reg_acquisition %}\nWhether the user was an acquisition through voter registration efforts. \n{% enddocs %}\n\n{% docs last_logged_in %}\nDate time in UTC when user last logged in to Northstar\n{% enddocs %}\n\n{% docs last_accessed %}\nDate time in UTC when user last access the website\n{% enddocs %}\n\n{% docs last_messaged_at %}\nDate time in UTC when user was last sent a message via SMS or email\n{% enddocs %}\n\n{% docs facebook_id %}\nUser's facebook id\n{% enddocs %}\n\n{% docs mobile %}\nUsers's mobile phone number\n{% enddocs %}\n\n{% docs birthdate %}\nUser's birthdate\n{% enddocs %}\n\n{% docs first_name %}\nUser's first name\n{% enddocs %}\n\n{% docs last_name %}\nUser's last name\n{% enddocs %}\n\n{% docs voter_registration_status %}\nUser's registration status. (e.g. registration_complete, confirmed, uncertain) \n{% enddocs %}\n\n{% docs finish_with_state %}\nIf the registrant was eligible to use and passed through to complete their registration with their state\u2019s OVR system, it will be indicated in this field (direct quote from Rock-The-Vote documentation). Yes/No value in field.\n{% enddocs %}\n\n{% docs reportback_volume %}\nThis field returns 1 if non voter-reg action, since campaigns team only counts those a 1 reportback. If voter-reg action, we want to count quantity of post as number of registered voters.\n{% enddocs %}\n\n{% docs address_street_1 %}\nFirst line of user's street address\n{% enddocs %}\n\n{% docs address_street_2 %}\nSecond line of user's street address\n{% enddocs %}\n\n{% docs city %}\nUser's city\n{% enddocs %}\n\n{% docs state %}\nUser's state\n{% enddocs %}\n\n{% docs country %}\nUser's country\n{% enddocs %}\n\n{% docs language %}\nUser's language\n{% enddocs %}\n\n{% docs cio_status %}\nStatus of user from CIO. (e.g. customer_subscribed, customer_unsubscribed)\n{% enddocs %}\n\n{% docs cio_status_timestamp %}\nTimestamp when users's status was updated.\n{% enddocs %}\n\n{% docs sms_status %}\nCurrent SMS status. (e.g. undeliverable, unknown)\n{% enddocs %}\n\n{% docs source_detail %}\nDetails of the origin of the user. (e.g. tell_a_friend, other, opt_in_path/197981)\n{% enddocs %}\n\n{% docs badges %}\nWhether the user has any badges. \n{% enddocs %}\n\n{% docs refer_friends %}\nWhether the user is a part of the refer a friend campaign. \n{% enddocs %}\n\n{% docs subscribed_member %}\nWhether the user is subscribed. \n{% enddocs %}\n\n{% docs last_updated_at %}\nTimestamp when users's was updated.\n{% enddocs %}\n\n{% docs school_id %}\nUnique identifier for the user's school. This info comes from the school finder.\n{% enddocs %}\n\n{% docs newsletter_topic %}\nNewsletter topic. (e.g. community, lifestyle)\n{% enddocs %}\n\n{% docs user_agent %}\nFull user agent string for a user's browser (e.g. \"Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:24.0) Gecko/20100101 Firefox/24.0\")\n{% enddocs %}\n\n{% docs drupal_id %}\nOld Drupal user ID\n{% enddocs %}\n\n{% docs campaigns %}\nCampaigns a user is signed up for.\n{% enddocs %}\n\n{% docs audit %}\nA very useful field with data containing information about changes to a user, e.g. timestamps when the user subscribed and unsubscribed.\n{% enddocs %}\n\n{% docs voting_plan_status %}\nThe indication of the user's plan to vote, e.g. voting, not_voting, cant_vote\n{% enddocs %}\n\n{% docs voting_plan_time_of_day %}\nThe time of day when the user plans to vote, e.g morning, afternoon, evening\n{% enddocs %}\n\n{% docs voting_plan_method_of_transport %}\nHow the user plans to get to their polling place. e.g. walk, drive\n{% enddocs %}\n\n{% docs voting_plan_attending_with %}\nWith Whom the user plans to go voting, e.g. family, friends, alone\n{% enddocs %}\n\n{% docs feature_flags %}\nJSON containing info on features like badges and refer-a-friend.\n{% enddocs %}\n\n{% docs dbt_updated_at %}\nDBT snapshot table data. The updated_at timestamp of the source record when this snapshot row was inserted.\n{% enddocs %}\n\n{% docs dbt_scd_id %}\nDBT snapshot table data. A unique key generated for each snapshotted record.\n{% enddocs %}\n\n{% docs dbt_valid_from %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this snapshot row was first inserted\n{% enddocs %}\n\n{% docs dbt_valid_to %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this row row became invalidated.\n{% enddocs %}\n\n{% docs google_id %}\nUser's Google ID obtained from login.\n{% enddocs %}\n\n{% docs causes %}\nCauses in which a user is interested. e.g. animal welfare, education, mental_health\n{% enddocs %}\n\n{% docs email_subscription_status %}\nEmail subscription status of the user\n{% enddocs %}\n\n{% docs role %}\nUser's role, e.g. user, staff\n{% enddocs %}\n\n{% docs cio_backfilled %}\nWhether this user's data was backfilled from CIO\n{% enddocs %}\n\n{% docs addr_source %}\nWhere the user submitted their address, e.g. sms, GDPR\n{% enddocs %}\n\n{% docs email_subscription_topics %}\nEmail subscription topics correspond to categories in CIO in which the user is interested. e.g. lifestyle, community, scholarship\n{% enddocs %}\n\n{% docs sms_paused %}\nWhether we've paused sending sms messages to the user.\n{% enddocs %}\n\n\n\n\n", "name": "is_accepted", "unique_id": "ds_dbt.is_accepted", "block_contents": "Whether the post has been accepted to be displayed to the public on the website"}, "ds_dbt.action_id": {"root_path": "/Users/mrich/projects/quasar/quasar/dbt", "resource_type": "docs", "path": "schema.md", "original_file_path": "models/schema.md", "package_name": "ds_dbt", "file_contents": "\n{% docs click_id %}\nThis is a unique identifier for each click\n{% enddocs %}\n\n{% docs click_time %}\nTimestamp when user clicked.\n{% enddocs %}\n\n{% docs shortened %}\nShortened URL\n{% enddocs %}\n\n{% docs target_url %}\nURL where the user will be directed\n{% enddocs %}\n\n{% docs broadcast_id %}\nID of the broadcast that generated the shortened URL\n{% enddocs %}\n\n{% docs source %}\nSource of the URL (e.g. SMS, web), origin of the post (e.g. phoenix-web, phoenix-ashes, sms), or source where user was acquired. (e.g. sms, phoenix-next)\n{% enddocs %}\n\n{% docs interaction_type %}\nHow the user interacted with the link (e.g. preview, click)\n{% enddocs %}\n\n{% docs id %}\nUnique identifier for the post\n{% enddocs %}\n\n{% docs type %}\nType of post (e.g. photo)\n{% enddocs %}\n\n{% docs action %}\nPost action (e.g. DefendDreamers_Nov9_CongressCalls, GunViolence2018_Feb15_ParklandResponse)\n{% enddocs %}\n\n{% docs status %}\nPost status (e.g. accepted, rejected)\n{% enddocs %}\n\n{% docs quantity %}\nNumerical quantity of items specified in the call to action (e.g. 10, 200)\n{% enddocs %}\n\n{% docs source_bucket %}\nGrouping bucket for origin of the post (e.g. web, sms) \n{% enddocs %}\n\n{% docs created_at %}\nWhen the item was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs updated_at %}\nWhen the item was updated in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs text %}\nText of the post (e.g. \"Zoo animals and a super hero trying to help too!\") \n{% enddocs %}\n\n{% docs signup_id %}\nUnique identifier for the signup \n{% enddocs %}\n\n{% docs post_class %}\nClass of the signup (e.g. \"photo - default\", \"phone-call - DefendDreamers_Jan16_BothBodies\")\n{% enddocs %}\n\n{% docs is_accepted %}\nWhether the post has been accepted to be displayed to the public on the website\n{% enddocs %}\n\n{% docs action_id %}\nInternal identifier of the action \n{% enddocs %}\n\n{% docs location %}\nLocation where the action takes place (e.g. US-NY)\n{% enddocs %}\n\n{% docs postal_code %}\nPostal code where the action takes place\n{% enddocs %}\n\n{% docs is_reportback %}\nWhether the post is a reportback. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs civic_action %}\nWhether the post is a Civic Action. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs scholarship_entry %}\nWhether the post is a Scholarship Entry. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs why_participated %}\nWhy the user participated in this action. Entered by the user.\n{% enddocs %}\n\n{% docs details %}\nDetails about the post. Contains contentfulId and other information (e.g. {\"campaignContentfulId\":\"6ATBgGEQEeJoIcxs1qbwaC\"})\n{% enddocs %}\n\n{% docs email %}\nEmail address of the user.\n{% enddocs %}\n\n{% docs source_details %}\nDetails about the source of the item. This is sometimes represented as a JSON object, and for other tables like Turbovote its represented as a string. (e.g. \"{\"contentful_id\":\"3CTLlXfbwtz1FOMpl31SKV\",\"utm_source\":\"scholarship_listing\",\"utm_medium\":\"referral\",\"utm_campaign\":\"fastweb_2019_08\"}\", newsletter_456)\n{% enddocs %}\n\n{% docs campaign_id %}\nThis is a unique identifier for the campaign\n{% enddocs %}\n\n{% docs campaign_run_id %}\nUnique identifier for the campaign run\n{% enddocs %}\n\n{% docs campaign_name %}\nName of the campaign\n{% enddocs %}\n\n{% docs campaign_cause %}\nCampaign cause (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_run_start_date %}\nStart date of the campaign run\n{% enddocs %}\n\n{% docs campaign_run_end_date %}\nEnd date of the campaign run\n{% enddocs %}\n\n{% docs campaign_created_date %}\nWhen the campaign was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs campaign_node_id %}\nInternal unique node id for the campaign\n{% enddocs %}\n\n{% docs campaign_node_id_title %}\nCampaign title\n{% enddocs %}\n\n{% docs campaign_run_id_title %}\nTitle of the campaign run\n{% enddocs %}\n\n{% docs campaign_action_type %}\nCampaign action type (eg. Make Something, Share Something)\n{% enddocs %}\n\n{% docs campaign_cause_type %}\nCampaign cause type (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_noun %}\nNoun applicable to the user's action\n{% enddocs %}\n\n{% docs campaign_verb %}\nVerb describing the action the user should take\n{% enddocs %}\n\n{% docs campaign_cta %}\nCampaign's call to action\n{% enddocs %}\n\n{% docs campaign_language %}\n\"Language in which the campaign is available\"\n{% enddocs %}\n\n{% docs agent_id %}\nIf set, the content type of the picture the member is sending us. Exp. image/png.\n{% enddocs %}\n\n{% docs attachment_content_type %}\nIf set, the handle of the Front agent this outbound support message is from.\n{% enddocs %}\n\n{% docs topic %}\nHolds a reference to the **last** campaign topic the member's conversation was in. This is useful to allow members to talk to Gambit and get quick responses (through Rivescript), without Gambit completely forgetting what state the member's interaction with a campaign topic was in.\n{% enddocs %}\n\n{% docs action_serial_id %}\nSerial id for the user's action. Depends on the source of the action. May be the bertly click id, sms message id, etc.\n{% enddocs %}\n\n{% docs channel %}\nChannel for the user's action. Depends on the source of the action. (e.g. web, sms)\n{% enddocs %}\n\n{% docs first_action_month %}\nMonth during which the user took their first action. \n{% enddocs %}\n\n{% docs event_id %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs event_source %}\nApplication source for event (eg. Phoenix, Northstar)\n{% enddocs %}\n\n{% docs event_datetime %}\nWhen the event occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs event_name %}\nName of the event (eg. northstar_submitted_register, https://docs.google.com/spreadsheets/d/1lm-fGrIm85nUTxSojqyCt_Ehmm1zEbViFhKpxcJiz1A/edit#gid=406441516)\n{% enddocs %}\n\n{% docs event_type %}\nType of event (pv = 'Page View', se = 'Structured Event')\n{% enddocs %}\n\n{% docs host %}\nURL host where event occurred (eg. www.dosomething.org or identity.dosomething.org)\n{% enddocs %}\n\n{% docs path %}\nURL path event occurred at (eg. /login or /us/campaigns/huddle-for-heroes)\n{% enddocs %}\n\n{% docs query_parameters %}\nOptional query parameters for the request (eg. query=huddle)\n{% enddocs %}\n\n{% docs se_category %}\nCategory of event (eg. focused_field, authentication) - Custom structured event\n{% enddocs %}\n\n{% docs se_action %}\nAction performed / event name (eg. form_submitted, action_failed) - Custom structured event\n{% enddocs %}\n\n{% docs se_label %}\nThe object of the action (eg. first_name, register, voter_reg_status) - Custom structured event\n{% enddocs %}\n\n{% docs session_id %}\nUnique identifier of the user's session\n{% enddocs %}\n\n{% docs session_counter %}\nHow many sessions a user has started\n{% enddocs %}\n\n{% docs browser_size %}\nWhich type of browser a user is using (eg. Mobile, Desktop)\n{% enddocs %}\n\n{% docs northstar_id %}\nThe Northstar ID of the user who generated the event\n{% enddocs %}\n\n{% docs device_id %}\nID of the device used\n{% enddocs %}\n\n{% docs referrer_host %}\nURL host of the referring site (eg. google.com)\n{% enddocs %}\n\n{% docs referrer_path %}\nURL path from referring site (eg. /10-stats-on-teen-drug-and-alcohol-use/)\n{% enddocs %}\n\n{% docs referrer_source %}\nReferrer source name (eg. Google, Facebook)\n{% enddocs %}\n\n{% docs utm_source %}\nTracks where the traffic is coming from. (eg. scholarship_listing, Facebook)\n{% enddocs %}\n\n{% docs utm_medium %}\nHow the traffic got to the platform (eg. referral, CPC)\n{% enddocs %}\n\n{% docs utm_campaign %}\nTracks which campaign the traffic was generated by. Shows up in Google Analytics as Campaign Name (eg. editorial_newsletter)\n{% enddocs %}\n\n{% docs url %}\nURL of campaign (eg. https://dosome.click/nyn5m7)\n{% enddocs %}\n\n{% docs modal_type %}\nNULL or SURVEY_MODAL\n{% enddocs %}\n\n{% docs landing_datetime %}\nWhen the session started in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs ending_datetime %}\nWhen the session ended in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs session_duration_seconds %}\nSession duration in seconds\n{% enddocs %}\n\n{% docs num_pages_views %}\nNumber of pages viewed in session\n{% enddocs %}\n\n{% docs landing_page %}\nFirst page the user viewed in the session (eg. /us/facts/11-facts-about-bp-oil-spill)\n{% enddocs %}\n\n{% docs exit_page %}\n\"Which page the user ended or exited their session from (eg. /us/campaigns/green-your-getaway)\"\n{% enddocs %}\n\n{% docs days_since_last_session %}\n\"Days since their last session.\"\n{% enddocs %}\n\n{% docs post_type %}\nType of post, (e.g. photo, voter-reg)\n{% enddocs %}\n\n{% docs noun %}\nNoun that corresponds to the item in the call to action that was delivered. (e.g. drawings, tweets)\n{% enddocs %}\n\n{% docs verb %}\nVerb corresponding to the action the user took. (e.g. shared, sent, taken)\n{% enddocs %}\n\n{% docs deleted_at %}\nDate time in UTC when a user deleted their post.\n{% enddocs %}\n\n{% docs _fivetran_deleted %}\nMarks rows that were deleted in the source table\n{% enddocs %}\n\n{% docs _fivetran_synced %}\n(UTC timestamp) keeps track of when each row was last successfully synced\n{% enddocs %}\n\n{% docs reportback %}\nWhether the post is a reportback \n{% enddocs %}\n\n{% docs active %}\nWhether the user is active \n{% enddocs %}\n\n{% docs anonymous %}\nWhether the user is anonymous when making the post \n{% enddocs %}\n\n{% docs callpower_campaign_id %}\nUnique ID corresponding to the Callpower campaign. Callpower allows users to record messages for their representatives.\n{% enddocs %}\n\n{% docs quiz %}\nWhether the post is a quiz \n{% enddocs %}\n\n{% docs action_type %}\nType of action the user took. (e.g. share-something, donate-something)\n{% enddocs %}\n\n{% docs online %}\nWhether the action is a online as opposed to IRL.\n{% enddocs %}\n\n{% docs time_commitment %}\nEstimated time required to do the action (e.g. 3.0+, <0.5)\n{% enddocs %}\n\n{% docs num_signups %}\nQuantity of campaign signups\n{% enddocs %}\n\n{% docs most_recent_signup %}\nTimestamp of the most recent signup in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs num_rbs %}\nQuantity of reportbacks for the user\n{% enddocs %}\n\n{% docs total_quantity %}\nTotal quantity of items in reportbacks\n{% enddocs %}\n\n{% docs most_recent_rb %}\nWhen the most recent reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs first_rb %}\nWhen the first reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs avg_time_betw_rbs %}\nCalculated average time between reportbacks.\n{% enddocs %}\n\n{% docs avg_days_next_action_after_rb %}\nCalculated average days until next action after reportback\n{% enddocs %}\n\n{% docs days_to_next_action_after_last_rb %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs most_recent_mam_action %}\nMost recent monthly active member qualifying action in UTC (eg. 2018-01-01 12:00:00).\n{% enddocs %}\n\n{% docs most_recent_email_open %}\nMost recent email open in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs most_recent_all_actions %}\nMost recent timestamp of any action in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs last_action_is_rb %}\nWhether the last action the user took was a reportback\n{% enddocs %}\n\n{% docs days_since_last_action %}\nDays since the user's last action\n{% enddocs %}\n\n{% docs time_to_first_rb %}\nHow much time after registering until the user's first reportback\n{% enddocs %}\n\n{% docs sms_unsubscribed_at %}\nTimestamp of when user unsubscribed from SMS messaging\n{% enddocs %}\n\n{% docs user_unsubscribed_at %}\nTimestamp of when user unsubscribed from email or sms\n{% enddocs %}\n\n{% docs voter_reg_acquisition %}\nWhether the user was an acquisition through voter registration efforts. \n{% enddocs %}\n\n{% docs last_logged_in %}\nDate time in UTC when user last logged in to Northstar\n{% enddocs %}\n\n{% docs last_accessed %}\nDate time in UTC when user last access the website\n{% enddocs %}\n\n{% docs last_messaged_at %}\nDate time in UTC when user was last sent a message via SMS or email\n{% enddocs %}\n\n{% docs facebook_id %}\nUser's facebook id\n{% enddocs %}\n\n{% docs mobile %}\nUsers's mobile phone number\n{% enddocs %}\n\n{% docs birthdate %}\nUser's birthdate\n{% enddocs %}\n\n{% docs first_name %}\nUser's first name\n{% enddocs %}\n\n{% docs last_name %}\nUser's last name\n{% enddocs %}\n\n{% docs voter_registration_status %}\nUser's registration status. (e.g. registration_complete, confirmed, uncertain) \n{% enddocs %}\n\n{% docs finish_with_state %}\nIf the registrant was eligible to use and passed through to complete their registration with their state\u2019s OVR system, it will be indicated in this field (direct quote from Rock-The-Vote documentation). Yes/No value in field.\n{% enddocs %}\n\n{% docs reportback_volume %}\nThis field returns 1 if non voter-reg action, since campaigns team only counts those a 1 reportback. If voter-reg action, we want to count quantity of post as number of registered voters.\n{% enddocs %}\n\n{% docs address_street_1 %}\nFirst line of user's street address\n{% enddocs %}\n\n{% docs address_street_2 %}\nSecond line of user's street address\n{% enddocs %}\n\n{% docs city %}\nUser's city\n{% enddocs %}\n\n{% docs state %}\nUser's state\n{% enddocs %}\n\n{% docs country %}\nUser's country\n{% enddocs %}\n\n{% docs language %}\nUser's language\n{% enddocs %}\n\n{% docs cio_status %}\nStatus of user from CIO. (e.g. customer_subscribed, customer_unsubscribed)\n{% enddocs %}\n\n{% docs cio_status_timestamp %}\nTimestamp when users's status was updated.\n{% enddocs %}\n\n{% docs sms_status %}\nCurrent SMS status. (e.g. undeliverable, unknown)\n{% enddocs %}\n\n{% docs source_detail %}\nDetails of the origin of the user. (e.g. tell_a_friend, other, opt_in_path/197981)\n{% enddocs %}\n\n{% docs badges %}\nWhether the user has any badges. \n{% enddocs %}\n\n{% docs refer_friends %}\nWhether the user is a part of the refer a friend campaign. \n{% enddocs %}\n\n{% docs subscribed_member %}\nWhether the user is subscribed. \n{% enddocs %}\n\n{% docs last_updated_at %}\nTimestamp when users's was updated.\n{% enddocs %}\n\n{% docs school_id %}\nUnique identifier for the user's school. This info comes from the school finder.\n{% enddocs %}\n\n{% docs newsletter_topic %}\nNewsletter topic. (e.g. community, lifestyle)\n{% enddocs %}\n\n{% docs user_agent %}\nFull user agent string for a user's browser (e.g. \"Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:24.0) Gecko/20100101 Firefox/24.0\")\n{% enddocs %}\n\n{% docs drupal_id %}\nOld Drupal user ID\n{% enddocs %}\n\n{% docs campaigns %}\nCampaigns a user is signed up for.\n{% enddocs %}\n\n{% docs audit %}\nA very useful field with data containing information about changes to a user, e.g. timestamps when the user subscribed and unsubscribed.\n{% enddocs %}\n\n{% docs voting_plan_status %}\nThe indication of the user's plan to vote, e.g. voting, not_voting, cant_vote\n{% enddocs %}\n\n{% docs voting_plan_time_of_day %}\nThe time of day when the user plans to vote, e.g morning, afternoon, evening\n{% enddocs %}\n\n{% docs voting_plan_method_of_transport %}\nHow the user plans to get to their polling place. e.g. walk, drive\n{% enddocs %}\n\n{% docs voting_plan_attending_with %}\nWith Whom the user plans to go voting, e.g. family, friends, alone\n{% enddocs %}\n\n{% docs feature_flags %}\nJSON containing info on features like badges and refer-a-friend.\n{% enddocs %}\n\n{% docs dbt_updated_at %}\nDBT snapshot table data. The updated_at timestamp of the source record when this snapshot row was inserted.\n{% enddocs %}\n\n{% docs dbt_scd_id %}\nDBT snapshot table data. A unique key generated for each snapshotted record.\n{% enddocs %}\n\n{% docs dbt_valid_from %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this snapshot row was first inserted\n{% enddocs %}\n\n{% docs dbt_valid_to %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this row row became invalidated.\n{% enddocs %}\n\n{% docs google_id %}\nUser's Google ID obtained from login.\n{% enddocs %}\n\n{% docs causes %}\nCauses in which a user is interested. e.g. animal welfare, education, mental_health\n{% enddocs %}\n\n{% docs email_subscription_status %}\nEmail subscription status of the user\n{% enddocs %}\n\n{% docs role %}\nUser's role, e.g. user, staff\n{% enddocs %}\n\n{% docs cio_backfilled %}\nWhether this user's data was backfilled from CIO\n{% enddocs %}\n\n{% docs addr_source %}\nWhere the user submitted their address, e.g. sms, GDPR\n{% enddocs %}\n\n{% docs email_subscription_topics %}\nEmail subscription topics correspond to categories in CIO in which the user is interested. e.g. lifestyle, community, scholarship\n{% enddocs %}\n\n{% docs sms_paused %}\nWhether we've paused sending sms messages to the user.\n{% enddocs %}\n\n\n\n\n", "name": "action_id", "unique_id": "ds_dbt.action_id", "block_contents": "Internal identifier of the action"}, "ds_dbt.location": {"root_path": "/Users/mrich/projects/quasar/quasar/dbt", "resource_type": "docs", "path": "schema.md", "original_file_path": "models/schema.md", "package_name": "ds_dbt", "file_contents": "\n{% docs click_id %}\nThis is a unique identifier for each click\n{% enddocs %}\n\n{% docs click_time %}\nTimestamp when user clicked.\n{% enddocs %}\n\n{% docs shortened %}\nShortened URL\n{% enddocs %}\n\n{% docs target_url %}\nURL where the user will be directed\n{% enddocs %}\n\n{% docs broadcast_id %}\nID of the broadcast that generated the shortened URL\n{% enddocs %}\n\n{% docs source %}\nSource of the URL (e.g. SMS, web), origin of the post (e.g. phoenix-web, phoenix-ashes, sms), or source where user was acquired. (e.g. sms, phoenix-next)\n{% enddocs %}\n\n{% docs interaction_type %}\nHow the user interacted with the link (e.g. preview, click)\n{% enddocs %}\n\n{% docs id %}\nUnique identifier for the post\n{% enddocs %}\n\n{% docs type %}\nType of post (e.g. photo)\n{% enddocs %}\n\n{% docs action %}\nPost action (e.g. DefendDreamers_Nov9_CongressCalls, GunViolence2018_Feb15_ParklandResponse)\n{% enddocs %}\n\n{% docs status %}\nPost status (e.g. accepted, rejected)\n{% enddocs %}\n\n{% docs quantity %}\nNumerical quantity of items specified in the call to action (e.g. 10, 200)\n{% enddocs %}\n\n{% docs source_bucket %}\nGrouping bucket for origin of the post (e.g. web, sms) \n{% enddocs %}\n\n{% docs created_at %}\nWhen the item was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs updated_at %}\nWhen the item was updated in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs text %}\nText of the post (e.g. \"Zoo animals and a super hero trying to help too!\") \n{% enddocs %}\n\n{% docs signup_id %}\nUnique identifier for the signup \n{% enddocs %}\n\n{% docs post_class %}\nClass of the signup (e.g. \"photo - default\", \"phone-call - DefendDreamers_Jan16_BothBodies\")\n{% enddocs %}\n\n{% docs is_accepted %}\nWhether the post has been accepted to be displayed to the public on the website\n{% enddocs %}\n\n{% docs action_id %}\nInternal identifier of the action \n{% enddocs %}\n\n{% docs location %}\nLocation where the action takes place (e.g. US-NY)\n{% enddocs %}\n\n{% docs postal_code %}\nPostal code where the action takes place\n{% enddocs %}\n\n{% docs is_reportback %}\nWhether the post is a reportback. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs civic_action %}\nWhether the post is a Civic Action. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs scholarship_entry %}\nWhether the post is a Scholarship Entry. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs why_participated %}\nWhy the user participated in this action. Entered by the user.\n{% enddocs %}\n\n{% docs details %}\nDetails about the post. Contains contentfulId and other information (e.g. {\"campaignContentfulId\":\"6ATBgGEQEeJoIcxs1qbwaC\"})\n{% enddocs %}\n\n{% docs email %}\nEmail address of the user.\n{% enddocs %}\n\n{% docs source_details %}\nDetails about the source of the item. This is sometimes represented as a JSON object, and for other tables like Turbovote its represented as a string. (e.g. \"{\"contentful_id\":\"3CTLlXfbwtz1FOMpl31SKV\",\"utm_source\":\"scholarship_listing\",\"utm_medium\":\"referral\",\"utm_campaign\":\"fastweb_2019_08\"}\", newsletter_456)\n{% enddocs %}\n\n{% docs campaign_id %}\nThis is a unique identifier for the campaign\n{% enddocs %}\n\n{% docs campaign_run_id %}\nUnique identifier for the campaign run\n{% enddocs %}\n\n{% docs campaign_name %}\nName of the campaign\n{% enddocs %}\n\n{% docs campaign_cause %}\nCampaign cause (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_run_start_date %}\nStart date of the campaign run\n{% enddocs %}\n\n{% docs campaign_run_end_date %}\nEnd date of the campaign run\n{% enddocs %}\n\n{% docs campaign_created_date %}\nWhen the campaign was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs campaign_node_id %}\nInternal unique node id for the campaign\n{% enddocs %}\n\n{% docs campaign_node_id_title %}\nCampaign title\n{% enddocs %}\n\n{% docs campaign_run_id_title %}\nTitle of the campaign run\n{% enddocs %}\n\n{% docs campaign_action_type %}\nCampaign action type (eg. Make Something, Share Something)\n{% enddocs %}\n\n{% docs campaign_cause_type %}\nCampaign cause type (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_noun %}\nNoun applicable to the user's action\n{% enddocs %}\n\n{% docs campaign_verb %}\nVerb describing the action the user should take\n{% enddocs %}\n\n{% docs campaign_cta %}\nCampaign's call to action\n{% enddocs %}\n\n{% docs campaign_language %}\n\"Language in which the campaign is available\"\n{% enddocs %}\n\n{% docs agent_id %}\nIf set, the content type of the picture the member is sending us. Exp. image/png.\n{% enddocs %}\n\n{% docs attachment_content_type %}\nIf set, the handle of the Front agent this outbound support message is from.\n{% enddocs %}\n\n{% docs topic %}\nHolds a reference to the **last** campaign topic the member's conversation was in. This is useful to allow members to talk to Gambit and get quick responses (through Rivescript), without Gambit completely forgetting what state the member's interaction with a campaign topic was in.\n{% enddocs %}\n\n{% docs action_serial_id %}\nSerial id for the user's action. Depends on the source of the action. May be the bertly click id, sms message id, etc.\n{% enddocs %}\n\n{% docs channel %}\nChannel for the user's action. Depends on the source of the action. (e.g. web, sms)\n{% enddocs %}\n\n{% docs first_action_month %}\nMonth during which the user took their first action. \n{% enddocs %}\n\n{% docs event_id %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs event_source %}\nApplication source for event (eg. Phoenix, Northstar)\n{% enddocs %}\n\n{% docs event_datetime %}\nWhen the event occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs event_name %}\nName of the event (eg. northstar_submitted_register, https://docs.google.com/spreadsheets/d/1lm-fGrIm85nUTxSojqyCt_Ehmm1zEbViFhKpxcJiz1A/edit#gid=406441516)\n{% enddocs %}\n\n{% docs event_type %}\nType of event (pv = 'Page View', se = 'Structured Event')\n{% enddocs %}\n\n{% docs host %}\nURL host where event occurred (eg. www.dosomething.org or identity.dosomething.org)\n{% enddocs %}\n\n{% docs path %}\nURL path event occurred at (eg. /login or /us/campaigns/huddle-for-heroes)\n{% enddocs %}\n\n{% docs query_parameters %}\nOptional query parameters for the request (eg. query=huddle)\n{% enddocs %}\n\n{% docs se_category %}\nCategory of event (eg. focused_field, authentication) - Custom structured event\n{% enddocs %}\n\n{% docs se_action %}\nAction performed / event name (eg. form_submitted, action_failed) - Custom structured event\n{% enddocs %}\n\n{% docs se_label %}\nThe object of the action (eg. first_name, register, voter_reg_status) - Custom structured event\n{% enddocs %}\n\n{% docs session_id %}\nUnique identifier of the user's session\n{% enddocs %}\n\n{% docs session_counter %}\nHow many sessions a user has started\n{% enddocs %}\n\n{% docs browser_size %}\nWhich type of browser a user is using (eg. Mobile, Desktop)\n{% enddocs %}\n\n{% docs northstar_id %}\nThe Northstar ID of the user who generated the event\n{% enddocs %}\n\n{% docs device_id %}\nID of the device used\n{% enddocs %}\n\n{% docs referrer_host %}\nURL host of the referring site (eg. google.com)\n{% enddocs %}\n\n{% docs referrer_path %}\nURL path from referring site (eg. /10-stats-on-teen-drug-and-alcohol-use/)\n{% enddocs %}\n\n{% docs referrer_source %}\nReferrer source name (eg. Google, Facebook)\n{% enddocs %}\n\n{% docs utm_source %}\nTracks where the traffic is coming from. (eg. scholarship_listing, Facebook)\n{% enddocs %}\n\n{% docs utm_medium %}\nHow the traffic got to the platform (eg. referral, CPC)\n{% enddocs %}\n\n{% docs utm_campaign %}\nTracks which campaign the traffic was generated by. Shows up in Google Analytics as Campaign Name (eg. editorial_newsletter)\n{% enddocs %}\n\n{% docs url %}\nURL of campaign (eg. https://dosome.click/nyn5m7)\n{% enddocs %}\n\n{% docs modal_type %}\nNULL or SURVEY_MODAL\n{% enddocs %}\n\n{% docs landing_datetime %}\nWhen the session started in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs ending_datetime %}\nWhen the session ended in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs session_duration_seconds %}\nSession duration in seconds\n{% enddocs %}\n\n{% docs num_pages_views %}\nNumber of pages viewed in session\n{% enddocs %}\n\n{% docs landing_page %}\nFirst page the user viewed in the session (eg. /us/facts/11-facts-about-bp-oil-spill)\n{% enddocs %}\n\n{% docs exit_page %}\n\"Which page the user ended or exited their session from (eg. /us/campaigns/green-your-getaway)\"\n{% enddocs %}\n\n{% docs days_since_last_session %}\n\"Days since their last session.\"\n{% enddocs %}\n\n{% docs post_type %}\nType of post, (e.g. photo, voter-reg)\n{% enddocs %}\n\n{% docs noun %}\nNoun that corresponds to the item in the call to action that was delivered. (e.g. drawings, tweets)\n{% enddocs %}\n\n{% docs verb %}\nVerb corresponding to the action the user took. (e.g. shared, sent, taken)\n{% enddocs %}\n\n{% docs deleted_at %}\nDate time in UTC when a user deleted their post.\n{% enddocs %}\n\n{% docs _fivetran_deleted %}\nMarks rows that were deleted in the source table\n{% enddocs %}\n\n{% docs _fivetran_synced %}\n(UTC timestamp) keeps track of when each row was last successfully synced\n{% enddocs %}\n\n{% docs reportback %}\nWhether the post is a reportback \n{% enddocs %}\n\n{% docs active %}\nWhether the user is active \n{% enddocs %}\n\n{% docs anonymous %}\nWhether the user is anonymous when making the post \n{% enddocs %}\n\n{% docs callpower_campaign_id %}\nUnique ID corresponding to the Callpower campaign. Callpower allows users to record messages for their representatives.\n{% enddocs %}\n\n{% docs quiz %}\nWhether the post is a quiz \n{% enddocs %}\n\n{% docs action_type %}\nType of action the user took. (e.g. share-something, donate-something)\n{% enddocs %}\n\n{% docs online %}\nWhether the action is a online as opposed to IRL.\n{% enddocs %}\n\n{% docs time_commitment %}\nEstimated time required to do the action (e.g. 3.0+, <0.5)\n{% enddocs %}\n\n{% docs num_signups %}\nQuantity of campaign signups\n{% enddocs %}\n\n{% docs most_recent_signup %}\nTimestamp of the most recent signup in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs num_rbs %}\nQuantity of reportbacks for the user\n{% enddocs %}\n\n{% docs total_quantity %}\nTotal quantity of items in reportbacks\n{% enddocs %}\n\n{% docs most_recent_rb %}\nWhen the most recent reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs first_rb %}\nWhen the first reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs avg_time_betw_rbs %}\nCalculated average time between reportbacks.\n{% enddocs %}\n\n{% docs avg_days_next_action_after_rb %}\nCalculated average days until next action after reportback\n{% enddocs %}\n\n{% docs days_to_next_action_after_last_rb %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs most_recent_mam_action %}\nMost recent monthly active member qualifying action in UTC (eg. 2018-01-01 12:00:00).\n{% enddocs %}\n\n{% docs most_recent_email_open %}\nMost recent email open in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs most_recent_all_actions %}\nMost recent timestamp of any action in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs last_action_is_rb %}\nWhether the last action the user took was a reportback\n{% enddocs %}\n\n{% docs days_since_last_action %}\nDays since the user's last action\n{% enddocs %}\n\n{% docs time_to_first_rb %}\nHow much time after registering until the user's first reportback\n{% enddocs %}\n\n{% docs sms_unsubscribed_at %}\nTimestamp of when user unsubscribed from SMS messaging\n{% enddocs %}\n\n{% docs user_unsubscribed_at %}\nTimestamp of when user unsubscribed from email or sms\n{% enddocs %}\n\n{% docs voter_reg_acquisition %}\nWhether the user was an acquisition through voter registration efforts. \n{% enddocs %}\n\n{% docs last_logged_in %}\nDate time in UTC when user last logged in to Northstar\n{% enddocs %}\n\n{% docs last_accessed %}\nDate time in UTC when user last access the website\n{% enddocs %}\n\n{% docs last_messaged_at %}\nDate time in UTC when user was last sent a message via SMS or email\n{% enddocs %}\n\n{% docs facebook_id %}\nUser's facebook id\n{% enddocs %}\n\n{% docs mobile %}\nUsers's mobile phone number\n{% enddocs %}\n\n{% docs birthdate %}\nUser's birthdate\n{% enddocs %}\n\n{% docs first_name %}\nUser's first name\n{% enddocs %}\n\n{% docs last_name %}\nUser's last name\n{% enddocs %}\n\n{% docs voter_registration_status %}\nUser's registration status. (e.g. registration_complete, confirmed, uncertain) \n{% enddocs %}\n\n{% docs finish_with_state %}\nIf the registrant was eligible to use and passed through to complete their registration with their state\u2019s OVR system, it will be indicated in this field (direct quote from Rock-The-Vote documentation). Yes/No value in field.\n{% enddocs %}\n\n{% docs reportback_volume %}\nThis field returns 1 if non voter-reg action, since campaigns team only counts those a 1 reportback. If voter-reg action, we want to count quantity of post as number of registered voters.\n{% enddocs %}\n\n{% docs address_street_1 %}\nFirst line of user's street address\n{% enddocs %}\n\n{% docs address_street_2 %}\nSecond line of user's street address\n{% enddocs %}\n\n{% docs city %}\nUser's city\n{% enddocs %}\n\n{% docs state %}\nUser's state\n{% enddocs %}\n\n{% docs country %}\nUser's country\n{% enddocs %}\n\n{% docs language %}\nUser's language\n{% enddocs %}\n\n{% docs cio_status %}\nStatus of user from CIO. (e.g. customer_subscribed, customer_unsubscribed)\n{% enddocs %}\n\n{% docs cio_status_timestamp %}\nTimestamp when users's status was updated.\n{% enddocs %}\n\n{% docs sms_status %}\nCurrent SMS status. (e.g. undeliverable, unknown)\n{% enddocs %}\n\n{% docs source_detail %}\nDetails of the origin of the user. (e.g. tell_a_friend, other, opt_in_path/197981)\n{% enddocs %}\n\n{% docs badges %}\nWhether the user has any badges. \n{% enddocs %}\n\n{% docs refer_friends %}\nWhether the user is a part of the refer a friend campaign. \n{% enddocs %}\n\n{% docs subscribed_member %}\nWhether the user is subscribed. \n{% enddocs %}\n\n{% docs last_updated_at %}\nTimestamp when users's was updated.\n{% enddocs %}\n\n{% docs school_id %}\nUnique identifier for the user's school. This info comes from the school finder.\n{% enddocs %}\n\n{% docs newsletter_topic %}\nNewsletter topic. (e.g. community, lifestyle)\n{% enddocs %}\n\n{% docs user_agent %}\nFull user agent string for a user's browser (e.g. \"Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:24.0) Gecko/20100101 Firefox/24.0\")\n{% enddocs %}\n\n{% docs drupal_id %}\nOld Drupal user ID\n{% enddocs %}\n\n{% docs campaigns %}\nCampaigns a user is signed up for.\n{% enddocs %}\n\n{% docs audit %}\nA very useful field with data containing information about changes to a user, e.g. timestamps when the user subscribed and unsubscribed.\n{% enddocs %}\n\n{% docs voting_plan_status %}\nThe indication of the user's plan to vote, e.g. voting, not_voting, cant_vote\n{% enddocs %}\n\n{% docs voting_plan_time_of_day %}\nThe time of day when the user plans to vote, e.g morning, afternoon, evening\n{% enddocs %}\n\n{% docs voting_plan_method_of_transport %}\nHow the user plans to get to their polling place. e.g. walk, drive\n{% enddocs %}\n\n{% docs voting_plan_attending_with %}\nWith Whom the user plans to go voting, e.g. family, friends, alone\n{% enddocs %}\n\n{% docs feature_flags %}\nJSON containing info on features like badges and refer-a-friend.\n{% enddocs %}\n\n{% docs dbt_updated_at %}\nDBT snapshot table data. The updated_at timestamp of the source record when this snapshot row was inserted.\n{% enddocs %}\n\n{% docs dbt_scd_id %}\nDBT snapshot table data. A unique key generated for each snapshotted record.\n{% enddocs %}\n\n{% docs dbt_valid_from %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this snapshot row was first inserted\n{% enddocs %}\n\n{% docs dbt_valid_to %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this row row became invalidated.\n{% enddocs %}\n\n{% docs google_id %}\nUser's Google ID obtained from login.\n{% enddocs %}\n\n{% docs causes %}\nCauses in which a user is interested. e.g. animal welfare, education, mental_health\n{% enddocs %}\n\n{% docs email_subscription_status %}\nEmail subscription status of the user\n{% enddocs %}\n\n{% docs role %}\nUser's role, e.g. user, staff\n{% enddocs %}\n\n{% docs cio_backfilled %}\nWhether this user's data was backfilled from CIO\n{% enddocs %}\n\n{% docs addr_source %}\nWhere the user submitted their address, e.g. sms, GDPR\n{% enddocs %}\n\n{% docs email_subscription_topics %}\nEmail subscription topics correspond to categories in CIO in which the user is interested. e.g. lifestyle, community, scholarship\n{% enddocs %}\n\n{% docs sms_paused %}\nWhether we've paused sending sms messages to the user.\n{% enddocs %}\n\n\n\n\n", "name": "location", "unique_id": "ds_dbt.location", "block_contents": "Location where the action takes place (e.g. US-NY)"}, "ds_dbt.postal_code": {"root_path": "/Users/mrich/projects/quasar/quasar/dbt", "resource_type": "docs", "path": "schema.md", "original_file_path": "models/schema.md", "package_name": "ds_dbt", "file_contents": "\n{% docs click_id %}\nThis is a unique identifier for each click\n{% enddocs %}\n\n{% docs click_time %}\nTimestamp when user clicked.\n{% enddocs %}\n\n{% docs shortened %}\nShortened URL\n{% enddocs %}\n\n{% docs target_url %}\nURL where the user will be directed\n{% enddocs %}\n\n{% docs broadcast_id %}\nID of the broadcast that generated the shortened URL\n{% enddocs %}\n\n{% docs source %}\nSource of the URL (e.g. SMS, web), origin of the post (e.g. phoenix-web, phoenix-ashes, sms), or source where user was acquired. (e.g. sms, phoenix-next)\n{% enddocs %}\n\n{% docs interaction_type %}\nHow the user interacted with the link (e.g. preview, click)\n{% enddocs %}\n\n{% docs id %}\nUnique identifier for the post\n{% enddocs %}\n\n{% docs type %}\nType of post (e.g. photo)\n{% enddocs %}\n\n{% docs action %}\nPost action (e.g. DefendDreamers_Nov9_CongressCalls, GunViolence2018_Feb15_ParklandResponse)\n{% enddocs %}\n\n{% docs status %}\nPost status (e.g. accepted, rejected)\n{% enddocs %}\n\n{% docs quantity %}\nNumerical quantity of items specified in the call to action (e.g. 10, 200)\n{% enddocs %}\n\n{% docs source_bucket %}\nGrouping bucket for origin of the post (e.g. web, sms) \n{% enddocs %}\n\n{% docs created_at %}\nWhen the item was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs updated_at %}\nWhen the item was updated in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs text %}\nText of the post (e.g. \"Zoo animals and a super hero trying to help too!\") \n{% enddocs %}\n\n{% docs signup_id %}\nUnique identifier for the signup \n{% enddocs %}\n\n{% docs post_class %}\nClass of the signup (e.g. \"photo - default\", \"phone-call - DefendDreamers_Jan16_BothBodies\")\n{% enddocs %}\n\n{% docs is_accepted %}\nWhether the post has been accepted to be displayed to the public on the website\n{% enddocs %}\n\n{% docs action_id %}\nInternal identifier of the action \n{% enddocs %}\n\n{% docs location %}\nLocation where the action takes place (e.g. US-NY)\n{% enddocs %}\n\n{% docs postal_code %}\nPostal code where the action takes place\n{% enddocs %}\n\n{% docs is_reportback %}\nWhether the post is a reportback. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs civic_action %}\nWhether the post is a Civic Action. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs scholarship_entry %}\nWhether the post is a Scholarship Entry. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs why_participated %}\nWhy the user participated in this action. Entered by the user.\n{% enddocs %}\n\n{% docs details %}\nDetails about the post. Contains contentfulId and other information (e.g. {\"campaignContentfulId\":\"6ATBgGEQEeJoIcxs1qbwaC\"})\n{% enddocs %}\n\n{% docs email %}\nEmail address of the user.\n{% enddocs %}\n\n{% docs source_details %}\nDetails about the source of the item. This is sometimes represented as a JSON object, and for other tables like Turbovote its represented as a string. (e.g. \"{\"contentful_id\":\"3CTLlXfbwtz1FOMpl31SKV\",\"utm_source\":\"scholarship_listing\",\"utm_medium\":\"referral\",\"utm_campaign\":\"fastweb_2019_08\"}\", newsletter_456)\n{% enddocs %}\n\n{% docs campaign_id %}\nThis is a unique identifier for the campaign\n{% enddocs %}\n\n{% docs campaign_run_id %}\nUnique identifier for the campaign run\n{% enddocs %}\n\n{% docs campaign_name %}\nName of the campaign\n{% enddocs %}\n\n{% docs campaign_cause %}\nCampaign cause (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_run_start_date %}\nStart date of the campaign run\n{% enddocs %}\n\n{% docs campaign_run_end_date %}\nEnd date of the campaign run\n{% enddocs %}\n\n{% docs campaign_created_date %}\nWhen the campaign was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs campaign_node_id %}\nInternal unique node id for the campaign\n{% enddocs %}\n\n{% docs campaign_node_id_title %}\nCampaign title\n{% enddocs %}\n\n{% docs campaign_run_id_title %}\nTitle of the campaign run\n{% enddocs %}\n\n{% docs campaign_action_type %}\nCampaign action type (eg. Make Something, Share Something)\n{% enddocs %}\n\n{% docs campaign_cause_type %}\nCampaign cause type (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_noun %}\nNoun applicable to the user's action\n{% enddocs %}\n\n{% docs campaign_verb %}\nVerb describing the action the user should take\n{% enddocs %}\n\n{% docs campaign_cta %}\nCampaign's call to action\n{% enddocs %}\n\n{% docs campaign_language %}\n\"Language in which the campaign is available\"\n{% enddocs %}\n\n{% docs agent_id %}\nIf set, the content type of the picture the member is sending us. Exp. image/png.\n{% enddocs %}\n\n{% docs attachment_content_type %}\nIf set, the handle of the Front agent this outbound support message is from.\n{% enddocs %}\n\n{% docs topic %}\nHolds a reference to the **last** campaign topic the member's conversation was in. This is useful to allow members to talk to Gambit and get quick responses (through Rivescript), without Gambit completely forgetting what state the member's interaction with a campaign topic was in.\n{% enddocs %}\n\n{% docs action_serial_id %}\nSerial id for the user's action. Depends on the source of the action. May be the bertly click id, sms message id, etc.\n{% enddocs %}\n\n{% docs channel %}\nChannel for the user's action. Depends on the source of the action. (e.g. web, sms)\n{% enddocs %}\n\n{% docs first_action_month %}\nMonth during which the user took their first action. \n{% enddocs %}\n\n{% docs event_id %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs event_source %}\nApplication source for event (eg. Phoenix, Northstar)\n{% enddocs %}\n\n{% docs event_datetime %}\nWhen the event occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs event_name %}\nName of the event (eg. northstar_submitted_register, https://docs.google.com/spreadsheets/d/1lm-fGrIm85nUTxSojqyCt_Ehmm1zEbViFhKpxcJiz1A/edit#gid=406441516)\n{% enddocs %}\n\n{% docs event_type %}\nType of event (pv = 'Page View', se = 'Structured Event')\n{% enddocs %}\n\n{% docs host %}\nURL host where event occurred (eg. www.dosomething.org or identity.dosomething.org)\n{% enddocs %}\n\n{% docs path %}\nURL path event occurred at (eg. /login or /us/campaigns/huddle-for-heroes)\n{% enddocs %}\n\n{% docs query_parameters %}\nOptional query parameters for the request (eg. query=huddle)\n{% enddocs %}\n\n{% docs se_category %}\nCategory of event (eg. focused_field, authentication) - Custom structured event\n{% enddocs %}\n\n{% docs se_action %}\nAction performed / event name (eg. form_submitted, action_failed) - Custom structured event\n{% enddocs %}\n\n{% docs se_label %}\nThe object of the action (eg. first_name, register, voter_reg_status) - Custom structured event\n{% enddocs %}\n\n{% docs session_id %}\nUnique identifier of the user's session\n{% enddocs %}\n\n{% docs session_counter %}\nHow many sessions a user has started\n{% enddocs %}\n\n{% docs browser_size %}\nWhich type of browser a user is using (eg. Mobile, Desktop)\n{% enddocs %}\n\n{% docs northstar_id %}\nThe Northstar ID of the user who generated the event\n{% enddocs %}\n\n{% docs device_id %}\nID of the device used\n{% enddocs %}\n\n{% docs referrer_host %}\nURL host of the referring site (eg. google.com)\n{% enddocs %}\n\n{% docs referrer_path %}\nURL path from referring site (eg. /10-stats-on-teen-drug-and-alcohol-use/)\n{% enddocs %}\n\n{% docs referrer_source %}\nReferrer source name (eg. Google, Facebook)\n{% enddocs %}\n\n{% docs utm_source %}\nTracks where the traffic is coming from. (eg. scholarship_listing, Facebook)\n{% enddocs %}\n\n{% docs utm_medium %}\nHow the traffic got to the platform (eg. referral, CPC)\n{% enddocs %}\n\n{% docs utm_campaign %}\nTracks which campaign the traffic was generated by. Shows up in Google Analytics as Campaign Name (eg. editorial_newsletter)\n{% enddocs %}\n\n{% docs url %}\nURL of campaign (eg. https://dosome.click/nyn5m7)\n{% enddocs %}\n\n{% docs modal_type %}\nNULL or SURVEY_MODAL\n{% enddocs %}\n\n{% docs landing_datetime %}\nWhen the session started in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs ending_datetime %}\nWhen the session ended in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs session_duration_seconds %}\nSession duration in seconds\n{% enddocs %}\n\n{% docs num_pages_views %}\nNumber of pages viewed in session\n{% enddocs %}\n\n{% docs landing_page %}\nFirst page the user viewed in the session (eg. /us/facts/11-facts-about-bp-oil-spill)\n{% enddocs %}\n\n{% docs exit_page %}\n\"Which page the user ended or exited their session from (eg. /us/campaigns/green-your-getaway)\"\n{% enddocs %}\n\n{% docs days_since_last_session %}\n\"Days since their last session.\"\n{% enddocs %}\n\n{% docs post_type %}\nType of post, (e.g. photo, voter-reg)\n{% enddocs %}\n\n{% docs noun %}\nNoun that corresponds to the item in the call to action that was delivered. (e.g. drawings, tweets)\n{% enddocs %}\n\n{% docs verb %}\nVerb corresponding to the action the user took. (e.g. shared, sent, taken)\n{% enddocs %}\n\n{% docs deleted_at %}\nDate time in UTC when a user deleted their post.\n{% enddocs %}\n\n{% docs _fivetran_deleted %}\nMarks rows that were deleted in the source table\n{% enddocs %}\n\n{% docs _fivetran_synced %}\n(UTC timestamp) keeps track of when each row was last successfully synced\n{% enddocs %}\n\n{% docs reportback %}\nWhether the post is a reportback \n{% enddocs %}\n\n{% docs active %}\nWhether the user is active \n{% enddocs %}\n\n{% docs anonymous %}\nWhether the user is anonymous when making the post \n{% enddocs %}\n\n{% docs callpower_campaign_id %}\nUnique ID corresponding to the Callpower campaign. Callpower allows users to record messages for their representatives.\n{% enddocs %}\n\n{% docs quiz %}\nWhether the post is a quiz \n{% enddocs %}\n\n{% docs action_type %}\nType of action the user took. (e.g. share-something, donate-something)\n{% enddocs %}\n\n{% docs online %}\nWhether the action is a online as opposed to IRL.\n{% enddocs %}\n\n{% docs time_commitment %}\nEstimated time required to do the action (e.g. 3.0+, <0.5)\n{% enddocs %}\n\n{% docs num_signups %}\nQuantity of campaign signups\n{% enddocs %}\n\n{% docs most_recent_signup %}\nTimestamp of the most recent signup in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs num_rbs %}\nQuantity of reportbacks for the user\n{% enddocs %}\n\n{% docs total_quantity %}\nTotal quantity of items in reportbacks\n{% enddocs %}\n\n{% docs most_recent_rb %}\nWhen the most recent reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs first_rb %}\nWhen the first reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs avg_time_betw_rbs %}\nCalculated average time between reportbacks.\n{% enddocs %}\n\n{% docs avg_days_next_action_after_rb %}\nCalculated average days until next action after reportback\n{% enddocs %}\n\n{% docs days_to_next_action_after_last_rb %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs most_recent_mam_action %}\nMost recent monthly active member qualifying action in UTC (eg. 2018-01-01 12:00:00).\n{% enddocs %}\n\n{% docs most_recent_email_open %}\nMost recent email open in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs most_recent_all_actions %}\nMost recent timestamp of any action in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs last_action_is_rb %}\nWhether the last action the user took was a reportback\n{% enddocs %}\n\n{% docs days_since_last_action %}\nDays since the user's last action\n{% enddocs %}\n\n{% docs time_to_first_rb %}\nHow much time after registering until the user's first reportback\n{% enddocs %}\n\n{% docs sms_unsubscribed_at %}\nTimestamp of when user unsubscribed from SMS messaging\n{% enddocs %}\n\n{% docs user_unsubscribed_at %}\nTimestamp of when user unsubscribed from email or sms\n{% enddocs %}\n\n{% docs voter_reg_acquisition %}\nWhether the user was an acquisition through voter registration efforts. \n{% enddocs %}\n\n{% docs last_logged_in %}\nDate time in UTC when user last logged in to Northstar\n{% enddocs %}\n\n{% docs last_accessed %}\nDate time in UTC when user last access the website\n{% enddocs %}\n\n{% docs last_messaged_at %}\nDate time in UTC when user was last sent a message via SMS or email\n{% enddocs %}\n\n{% docs facebook_id %}\nUser's facebook id\n{% enddocs %}\n\n{% docs mobile %}\nUsers's mobile phone number\n{% enddocs %}\n\n{% docs birthdate %}\nUser's birthdate\n{% enddocs %}\n\n{% docs first_name %}\nUser's first name\n{% enddocs %}\n\n{% docs last_name %}\nUser's last name\n{% enddocs %}\n\n{% docs voter_registration_status %}\nUser's registration status. (e.g. registration_complete, confirmed, uncertain) \n{% enddocs %}\n\n{% docs finish_with_state %}\nIf the registrant was eligible to use and passed through to complete their registration with their state\u2019s OVR system, it will be indicated in this field (direct quote from Rock-The-Vote documentation). Yes/No value in field.\n{% enddocs %}\n\n{% docs reportback_volume %}\nThis field returns 1 if non voter-reg action, since campaigns team only counts those a 1 reportback. If voter-reg action, we want to count quantity of post as number of registered voters.\n{% enddocs %}\n\n{% docs address_street_1 %}\nFirst line of user's street address\n{% enddocs %}\n\n{% docs address_street_2 %}\nSecond line of user's street address\n{% enddocs %}\n\n{% docs city %}\nUser's city\n{% enddocs %}\n\n{% docs state %}\nUser's state\n{% enddocs %}\n\n{% docs country %}\nUser's country\n{% enddocs %}\n\n{% docs language %}\nUser's language\n{% enddocs %}\n\n{% docs cio_status %}\nStatus of user from CIO. (e.g. customer_subscribed, customer_unsubscribed)\n{% enddocs %}\n\n{% docs cio_status_timestamp %}\nTimestamp when users's status was updated.\n{% enddocs %}\n\n{% docs sms_status %}\nCurrent SMS status. (e.g. undeliverable, unknown)\n{% enddocs %}\n\n{% docs source_detail %}\nDetails of the origin of the user. (e.g. tell_a_friend, other, opt_in_path/197981)\n{% enddocs %}\n\n{% docs badges %}\nWhether the user has any badges. \n{% enddocs %}\n\n{% docs refer_friends %}\nWhether the user is a part of the refer a friend campaign. \n{% enddocs %}\n\n{% docs subscribed_member %}\nWhether the user is subscribed. \n{% enddocs %}\n\n{% docs last_updated_at %}\nTimestamp when users's was updated.\n{% enddocs %}\n\n{% docs school_id %}\nUnique identifier for the user's school. This info comes from the school finder.\n{% enddocs %}\n\n{% docs newsletter_topic %}\nNewsletter topic. (e.g. community, lifestyle)\n{% enddocs %}\n\n{% docs user_agent %}\nFull user agent string for a user's browser (e.g. \"Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:24.0) Gecko/20100101 Firefox/24.0\")\n{% enddocs %}\n\n{% docs drupal_id %}\nOld Drupal user ID\n{% enddocs %}\n\n{% docs campaigns %}\nCampaigns a user is signed up for.\n{% enddocs %}\n\n{% docs audit %}\nA very useful field with data containing information about changes to a user, e.g. timestamps when the user subscribed and unsubscribed.\n{% enddocs %}\n\n{% docs voting_plan_status %}\nThe indication of the user's plan to vote, e.g. voting, not_voting, cant_vote\n{% enddocs %}\n\n{% docs voting_plan_time_of_day %}\nThe time of day when the user plans to vote, e.g morning, afternoon, evening\n{% enddocs %}\n\n{% docs voting_plan_method_of_transport %}\nHow the user plans to get to their polling place. e.g. walk, drive\n{% enddocs %}\n\n{% docs voting_plan_attending_with %}\nWith Whom the user plans to go voting, e.g. family, friends, alone\n{% enddocs %}\n\n{% docs feature_flags %}\nJSON containing info on features like badges and refer-a-friend.\n{% enddocs %}\n\n{% docs dbt_updated_at %}\nDBT snapshot table data. The updated_at timestamp of the source record when this snapshot row was inserted.\n{% enddocs %}\n\n{% docs dbt_scd_id %}\nDBT snapshot table data. A unique key generated for each snapshotted record.\n{% enddocs %}\n\n{% docs dbt_valid_from %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this snapshot row was first inserted\n{% enddocs %}\n\n{% docs dbt_valid_to %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this row row became invalidated.\n{% enddocs %}\n\n{% docs google_id %}\nUser's Google ID obtained from login.\n{% enddocs %}\n\n{% docs causes %}\nCauses in which a user is interested. e.g. animal welfare, education, mental_health\n{% enddocs %}\n\n{% docs email_subscription_status %}\nEmail subscription status of the user\n{% enddocs %}\n\n{% docs role %}\nUser's role, e.g. user, staff\n{% enddocs %}\n\n{% docs cio_backfilled %}\nWhether this user's data was backfilled from CIO\n{% enddocs %}\n\n{% docs addr_source %}\nWhere the user submitted their address, e.g. sms, GDPR\n{% enddocs %}\n\n{% docs email_subscription_topics %}\nEmail subscription topics correspond to categories in CIO in which the user is interested. e.g. lifestyle, community, scholarship\n{% enddocs %}\n\n{% docs sms_paused %}\nWhether we've paused sending sms messages to the user.\n{% enddocs %}\n\n\n\n\n", "name": "postal_code", "unique_id": "ds_dbt.postal_code", "block_contents": "Postal code where the action takes place"}, "ds_dbt.is_reportback": {"root_path": "/Users/mrich/projects/quasar/quasar/dbt", "resource_type": "docs", "path": "schema.md", "original_file_path": "models/schema.md", "package_name": "ds_dbt", "file_contents": "\n{% docs click_id %}\nThis is a unique identifier for each click\n{% enddocs %}\n\n{% docs click_time %}\nTimestamp when user clicked.\n{% enddocs %}\n\n{% docs shortened %}\nShortened URL\n{% enddocs %}\n\n{% docs target_url %}\nURL where the user will be directed\n{% enddocs %}\n\n{% docs broadcast_id %}\nID of the broadcast that generated the shortened URL\n{% enddocs %}\n\n{% docs source %}\nSource of the URL (e.g. SMS, web), origin of the post (e.g. phoenix-web, phoenix-ashes, sms), or source where user was acquired. (e.g. sms, phoenix-next)\n{% enddocs %}\n\n{% docs interaction_type %}\nHow the user interacted with the link (e.g. preview, click)\n{% enddocs %}\n\n{% docs id %}\nUnique identifier for the post\n{% enddocs %}\n\n{% docs type %}\nType of post (e.g. photo)\n{% enddocs %}\n\n{% docs action %}\nPost action (e.g. DefendDreamers_Nov9_CongressCalls, GunViolence2018_Feb15_ParklandResponse)\n{% enddocs %}\n\n{% docs status %}\nPost status (e.g. accepted, rejected)\n{% enddocs %}\n\n{% docs quantity %}\nNumerical quantity of items specified in the call to action (e.g. 10, 200)\n{% enddocs %}\n\n{% docs source_bucket %}\nGrouping bucket for origin of the post (e.g. web, sms) \n{% enddocs %}\n\n{% docs created_at %}\nWhen the item was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs updated_at %}\nWhen the item was updated in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs text %}\nText of the post (e.g. \"Zoo animals and a super hero trying to help too!\") \n{% enddocs %}\n\n{% docs signup_id %}\nUnique identifier for the signup \n{% enddocs %}\n\n{% docs post_class %}\nClass of the signup (e.g. \"photo - default\", \"phone-call - DefendDreamers_Jan16_BothBodies\")\n{% enddocs %}\n\n{% docs is_accepted %}\nWhether the post has been accepted to be displayed to the public on the website\n{% enddocs %}\n\n{% docs action_id %}\nInternal identifier of the action \n{% enddocs %}\n\n{% docs location %}\nLocation where the action takes place (e.g. US-NY)\n{% enddocs %}\n\n{% docs postal_code %}\nPostal code where the action takes place\n{% enddocs %}\n\n{% docs is_reportback %}\nWhether the post is a reportback. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs civic_action %}\nWhether the post is a Civic Action. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs scholarship_entry %}\nWhether the post is a Scholarship Entry. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs why_participated %}\nWhy the user participated in this action. Entered by the user.\n{% enddocs %}\n\n{% docs details %}\nDetails about the post. Contains contentfulId and other information (e.g. {\"campaignContentfulId\":\"6ATBgGEQEeJoIcxs1qbwaC\"})\n{% enddocs %}\n\n{% docs email %}\nEmail address of the user.\n{% enddocs %}\n\n{% docs source_details %}\nDetails about the source of the item. This is sometimes represented as a JSON object, and for other tables like Turbovote its represented as a string. (e.g. \"{\"contentful_id\":\"3CTLlXfbwtz1FOMpl31SKV\",\"utm_source\":\"scholarship_listing\",\"utm_medium\":\"referral\",\"utm_campaign\":\"fastweb_2019_08\"}\", newsletter_456)\n{% enddocs %}\n\n{% docs campaign_id %}\nThis is a unique identifier for the campaign\n{% enddocs %}\n\n{% docs campaign_run_id %}\nUnique identifier for the campaign run\n{% enddocs %}\n\n{% docs campaign_name %}\nName of the campaign\n{% enddocs %}\n\n{% docs campaign_cause %}\nCampaign cause (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_run_start_date %}\nStart date of the campaign run\n{% enddocs %}\n\n{% docs campaign_run_end_date %}\nEnd date of the campaign run\n{% enddocs %}\n\n{% docs campaign_created_date %}\nWhen the campaign was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs campaign_node_id %}\nInternal unique node id for the campaign\n{% enddocs %}\n\n{% docs campaign_node_id_title %}\nCampaign title\n{% enddocs %}\n\n{% docs campaign_run_id_title %}\nTitle of the campaign run\n{% enddocs %}\n\n{% docs campaign_action_type %}\nCampaign action type (eg. Make Something, Share Something)\n{% enddocs %}\n\n{% docs campaign_cause_type %}\nCampaign cause type (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_noun %}\nNoun applicable to the user's action\n{% enddocs %}\n\n{% docs campaign_verb %}\nVerb describing the action the user should take\n{% enddocs %}\n\n{% docs campaign_cta %}\nCampaign's call to action\n{% enddocs %}\n\n{% docs campaign_language %}\n\"Language in which the campaign is available\"\n{% enddocs %}\n\n{% docs agent_id %}\nIf set, the content type of the picture the member is sending us. Exp. image/png.\n{% enddocs %}\n\n{% docs attachment_content_type %}\nIf set, the handle of the Front agent this outbound support message is from.\n{% enddocs %}\n\n{% docs topic %}\nHolds a reference to the **last** campaign topic the member's conversation was in. This is useful to allow members to talk to Gambit and get quick responses (through Rivescript), without Gambit completely forgetting what state the member's interaction with a campaign topic was in.\n{% enddocs %}\n\n{% docs action_serial_id %}\nSerial id for the user's action. Depends on the source of the action. May be the bertly click id, sms message id, etc.\n{% enddocs %}\n\n{% docs channel %}\nChannel for the user's action. Depends on the source of the action. (e.g. web, sms)\n{% enddocs %}\n\n{% docs first_action_month %}\nMonth during which the user took their first action. \n{% enddocs %}\n\n{% docs event_id %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs event_source %}\nApplication source for event (eg. Phoenix, Northstar)\n{% enddocs %}\n\n{% docs event_datetime %}\nWhen the event occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs event_name %}\nName of the event (eg. northstar_submitted_register, https://docs.google.com/spreadsheets/d/1lm-fGrIm85nUTxSojqyCt_Ehmm1zEbViFhKpxcJiz1A/edit#gid=406441516)\n{% enddocs %}\n\n{% docs event_type %}\nType of event (pv = 'Page View', se = 'Structured Event')\n{% enddocs %}\n\n{% docs host %}\nURL host where event occurred (eg. www.dosomething.org or identity.dosomething.org)\n{% enddocs %}\n\n{% docs path %}\nURL path event occurred at (eg. /login or /us/campaigns/huddle-for-heroes)\n{% enddocs %}\n\n{% docs query_parameters %}\nOptional query parameters for the request (eg. query=huddle)\n{% enddocs %}\n\n{% docs se_category %}\nCategory of event (eg. focused_field, authentication) - Custom structured event\n{% enddocs %}\n\n{% docs se_action %}\nAction performed / event name (eg. form_submitted, action_failed) - Custom structured event\n{% enddocs %}\n\n{% docs se_label %}\nThe object of the action (eg. first_name, register, voter_reg_status) - Custom structured event\n{% enddocs %}\n\n{% docs session_id %}\nUnique identifier of the user's session\n{% enddocs %}\n\n{% docs session_counter %}\nHow many sessions a user has started\n{% enddocs %}\n\n{% docs browser_size %}\nWhich type of browser a user is using (eg. Mobile, Desktop)\n{% enddocs %}\n\n{% docs northstar_id %}\nThe Northstar ID of the user who generated the event\n{% enddocs %}\n\n{% docs device_id %}\nID of the device used\n{% enddocs %}\n\n{% docs referrer_host %}\nURL host of the referring site (eg. google.com)\n{% enddocs %}\n\n{% docs referrer_path %}\nURL path from referring site (eg. /10-stats-on-teen-drug-and-alcohol-use/)\n{% enddocs %}\n\n{% docs referrer_source %}\nReferrer source name (eg. Google, Facebook)\n{% enddocs %}\n\n{% docs utm_source %}\nTracks where the traffic is coming from. (eg. scholarship_listing, Facebook)\n{% enddocs %}\n\n{% docs utm_medium %}\nHow the traffic got to the platform (eg. referral, CPC)\n{% enddocs %}\n\n{% docs utm_campaign %}\nTracks which campaign the traffic was generated by. Shows up in Google Analytics as Campaign Name (eg. editorial_newsletter)\n{% enddocs %}\n\n{% docs url %}\nURL of campaign (eg. https://dosome.click/nyn5m7)\n{% enddocs %}\n\n{% docs modal_type %}\nNULL or SURVEY_MODAL\n{% enddocs %}\n\n{% docs landing_datetime %}\nWhen the session started in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs ending_datetime %}\nWhen the session ended in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs session_duration_seconds %}\nSession duration in seconds\n{% enddocs %}\n\n{% docs num_pages_views %}\nNumber of pages viewed in session\n{% enddocs %}\n\n{% docs landing_page %}\nFirst page the user viewed in the session (eg. /us/facts/11-facts-about-bp-oil-spill)\n{% enddocs %}\n\n{% docs exit_page %}\n\"Which page the user ended or exited their session from (eg. /us/campaigns/green-your-getaway)\"\n{% enddocs %}\n\n{% docs days_since_last_session %}\n\"Days since their last session.\"\n{% enddocs %}\n\n{% docs post_type %}\nType of post, (e.g. photo, voter-reg)\n{% enddocs %}\n\n{% docs noun %}\nNoun that corresponds to the item in the call to action that was delivered. (e.g. drawings, tweets)\n{% enddocs %}\n\n{% docs verb %}\nVerb corresponding to the action the user took. (e.g. shared, sent, taken)\n{% enddocs %}\n\n{% docs deleted_at %}\nDate time in UTC when a user deleted their post.\n{% enddocs %}\n\n{% docs _fivetran_deleted %}\nMarks rows that were deleted in the source table\n{% enddocs %}\n\n{% docs _fivetran_synced %}\n(UTC timestamp) keeps track of when each row was last successfully synced\n{% enddocs %}\n\n{% docs reportback %}\nWhether the post is a reportback \n{% enddocs %}\n\n{% docs active %}\nWhether the user is active \n{% enddocs %}\n\n{% docs anonymous %}\nWhether the user is anonymous when making the post \n{% enddocs %}\n\n{% docs callpower_campaign_id %}\nUnique ID corresponding to the Callpower campaign. Callpower allows users to record messages for their representatives.\n{% enddocs %}\n\n{% docs quiz %}\nWhether the post is a quiz \n{% enddocs %}\n\n{% docs action_type %}\nType of action the user took. (e.g. share-something, donate-something)\n{% enddocs %}\n\n{% docs online %}\nWhether the action is a online as opposed to IRL.\n{% enddocs %}\n\n{% docs time_commitment %}\nEstimated time required to do the action (e.g. 3.0+, <0.5)\n{% enddocs %}\n\n{% docs num_signups %}\nQuantity of campaign signups\n{% enddocs %}\n\n{% docs most_recent_signup %}\nTimestamp of the most recent signup in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs num_rbs %}\nQuantity of reportbacks for the user\n{% enddocs %}\n\n{% docs total_quantity %}\nTotal quantity of items in reportbacks\n{% enddocs %}\n\n{% docs most_recent_rb %}\nWhen the most recent reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs first_rb %}\nWhen the first reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs avg_time_betw_rbs %}\nCalculated average time between reportbacks.\n{% enddocs %}\n\n{% docs avg_days_next_action_after_rb %}\nCalculated average days until next action after reportback\n{% enddocs %}\n\n{% docs days_to_next_action_after_last_rb %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs most_recent_mam_action %}\nMost recent monthly active member qualifying action in UTC (eg. 2018-01-01 12:00:00).\n{% enddocs %}\n\n{% docs most_recent_email_open %}\nMost recent email open in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs most_recent_all_actions %}\nMost recent timestamp of any action in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs last_action_is_rb %}\nWhether the last action the user took was a reportback\n{% enddocs %}\n\n{% docs days_since_last_action %}\nDays since the user's last action\n{% enddocs %}\n\n{% docs time_to_first_rb %}\nHow much time after registering until the user's first reportback\n{% enddocs %}\n\n{% docs sms_unsubscribed_at %}\nTimestamp of when user unsubscribed from SMS messaging\n{% enddocs %}\n\n{% docs user_unsubscribed_at %}\nTimestamp of when user unsubscribed from email or sms\n{% enddocs %}\n\n{% docs voter_reg_acquisition %}\nWhether the user was an acquisition through voter registration efforts. \n{% enddocs %}\n\n{% docs last_logged_in %}\nDate time in UTC when user last logged in to Northstar\n{% enddocs %}\n\n{% docs last_accessed %}\nDate time in UTC when user last access the website\n{% enddocs %}\n\n{% docs last_messaged_at %}\nDate time in UTC when user was last sent a message via SMS or email\n{% enddocs %}\n\n{% docs facebook_id %}\nUser's facebook id\n{% enddocs %}\n\n{% docs mobile %}\nUsers's mobile phone number\n{% enddocs %}\n\n{% docs birthdate %}\nUser's birthdate\n{% enddocs %}\n\n{% docs first_name %}\nUser's first name\n{% enddocs %}\n\n{% docs last_name %}\nUser's last name\n{% enddocs %}\n\n{% docs voter_registration_status %}\nUser's registration status. (e.g. registration_complete, confirmed, uncertain) \n{% enddocs %}\n\n{% docs finish_with_state %}\nIf the registrant was eligible to use and passed through to complete their registration with their state\u2019s OVR system, it will be indicated in this field (direct quote from Rock-The-Vote documentation). Yes/No value in field.\n{% enddocs %}\n\n{% docs reportback_volume %}\nThis field returns 1 if non voter-reg action, since campaigns team only counts those a 1 reportback. If voter-reg action, we want to count quantity of post as number of registered voters.\n{% enddocs %}\n\n{% docs address_street_1 %}\nFirst line of user's street address\n{% enddocs %}\n\n{% docs address_street_2 %}\nSecond line of user's street address\n{% enddocs %}\n\n{% docs city %}\nUser's city\n{% enddocs %}\n\n{% docs state %}\nUser's state\n{% enddocs %}\n\n{% docs country %}\nUser's country\n{% enddocs %}\n\n{% docs language %}\nUser's language\n{% enddocs %}\n\n{% docs cio_status %}\nStatus of user from CIO. (e.g. customer_subscribed, customer_unsubscribed)\n{% enddocs %}\n\n{% docs cio_status_timestamp %}\nTimestamp when users's status was updated.\n{% enddocs %}\n\n{% docs sms_status %}\nCurrent SMS status. (e.g. undeliverable, unknown)\n{% enddocs %}\n\n{% docs source_detail %}\nDetails of the origin of the user. (e.g. tell_a_friend, other, opt_in_path/197981)\n{% enddocs %}\n\n{% docs badges %}\nWhether the user has any badges. \n{% enddocs %}\n\n{% docs refer_friends %}\nWhether the user is a part of the refer a friend campaign. \n{% enddocs %}\n\n{% docs subscribed_member %}\nWhether the user is subscribed. \n{% enddocs %}\n\n{% docs last_updated_at %}\nTimestamp when users's was updated.\n{% enddocs %}\n\n{% docs school_id %}\nUnique identifier for the user's school. This info comes from the school finder.\n{% enddocs %}\n\n{% docs newsletter_topic %}\nNewsletter topic. (e.g. community, lifestyle)\n{% enddocs %}\n\n{% docs user_agent %}\nFull user agent string for a user's browser (e.g. \"Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:24.0) Gecko/20100101 Firefox/24.0\")\n{% enddocs %}\n\n{% docs drupal_id %}\nOld Drupal user ID\n{% enddocs %}\n\n{% docs campaigns %}\nCampaigns a user is signed up for.\n{% enddocs %}\n\n{% docs audit %}\nA very useful field with data containing information about changes to a user, e.g. timestamps when the user subscribed and unsubscribed.\n{% enddocs %}\n\n{% docs voting_plan_status %}\nThe indication of the user's plan to vote, e.g. voting, not_voting, cant_vote\n{% enddocs %}\n\n{% docs voting_plan_time_of_day %}\nThe time of day when the user plans to vote, e.g morning, afternoon, evening\n{% enddocs %}\n\n{% docs voting_plan_method_of_transport %}\nHow the user plans to get to their polling place. e.g. walk, drive\n{% enddocs %}\n\n{% docs voting_plan_attending_with %}\nWith Whom the user plans to go voting, e.g. family, friends, alone\n{% enddocs %}\n\n{% docs feature_flags %}\nJSON containing info on features like badges and refer-a-friend.\n{% enddocs %}\n\n{% docs dbt_updated_at %}\nDBT snapshot table data. The updated_at timestamp of the source record when this snapshot row was inserted.\n{% enddocs %}\n\n{% docs dbt_scd_id %}\nDBT snapshot table data. A unique key generated for each snapshotted record.\n{% enddocs %}\n\n{% docs dbt_valid_from %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this snapshot row was first inserted\n{% enddocs %}\n\n{% docs dbt_valid_to %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this row row became invalidated.\n{% enddocs %}\n\n{% docs google_id %}\nUser's Google ID obtained from login.\n{% enddocs %}\n\n{% docs causes %}\nCauses in which a user is interested. e.g. animal welfare, education, mental_health\n{% enddocs %}\n\n{% docs email_subscription_status %}\nEmail subscription status of the user\n{% enddocs %}\n\n{% docs role %}\nUser's role, e.g. user, staff\n{% enddocs %}\n\n{% docs cio_backfilled %}\nWhether this user's data was backfilled from CIO\n{% enddocs %}\n\n{% docs addr_source %}\nWhere the user submitted their address, e.g. sms, GDPR\n{% enddocs %}\n\n{% docs email_subscription_topics %}\nEmail subscription topics correspond to categories in CIO in which the user is interested. e.g. lifestyle, community, scholarship\n{% enddocs %}\n\n{% docs sms_paused %}\nWhether we've paused sending sms messages to the user.\n{% enddocs %}\n\n\n\n\n", "name": "is_reportback", "unique_id": "ds_dbt.is_reportback", "block_contents": "Whether the post is a reportback. The application allows for multiple types of posts."}, "ds_dbt.civic_action": {"root_path": "/Users/mrich/projects/quasar/quasar/dbt", "resource_type": "docs", "path": "schema.md", "original_file_path": "models/schema.md", "package_name": "ds_dbt", "file_contents": "\n{% docs click_id %}\nThis is a unique identifier for each click\n{% enddocs %}\n\n{% docs click_time %}\nTimestamp when user clicked.\n{% enddocs %}\n\n{% docs shortened %}\nShortened URL\n{% enddocs %}\n\n{% docs target_url %}\nURL where the user will be directed\n{% enddocs %}\n\n{% docs broadcast_id %}\nID of the broadcast that generated the shortened URL\n{% enddocs %}\n\n{% docs source %}\nSource of the URL (e.g. SMS, web), origin of the post (e.g. phoenix-web, phoenix-ashes, sms), or source where user was acquired. (e.g. sms, phoenix-next)\n{% enddocs %}\n\n{% docs interaction_type %}\nHow the user interacted with the link (e.g. preview, click)\n{% enddocs %}\n\n{% docs id %}\nUnique identifier for the post\n{% enddocs %}\n\n{% docs type %}\nType of post (e.g. photo)\n{% enddocs %}\n\n{% docs action %}\nPost action (e.g. DefendDreamers_Nov9_CongressCalls, GunViolence2018_Feb15_ParklandResponse)\n{% enddocs %}\n\n{% docs status %}\nPost status (e.g. accepted, rejected)\n{% enddocs %}\n\n{% docs quantity %}\nNumerical quantity of items specified in the call to action (e.g. 10, 200)\n{% enddocs %}\n\n{% docs source_bucket %}\nGrouping bucket for origin of the post (e.g. web, sms) \n{% enddocs %}\n\n{% docs created_at %}\nWhen the item was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs updated_at %}\nWhen the item was updated in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs text %}\nText of the post (e.g. \"Zoo animals and a super hero trying to help too!\") \n{% enddocs %}\n\n{% docs signup_id %}\nUnique identifier for the signup \n{% enddocs %}\n\n{% docs post_class %}\nClass of the signup (e.g. \"photo - default\", \"phone-call - DefendDreamers_Jan16_BothBodies\")\n{% enddocs %}\n\n{% docs is_accepted %}\nWhether the post has been accepted to be displayed to the public on the website\n{% enddocs %}\n\n{% docs action_id %}\nInternal identifier of the action \n{% enddocs %}\n\n{% docs location %}\nLocation where the action takes place (e.g. US-NY)\n{% enddocs %}\n\n{% docs postal_code %}\nPostal code where the action takes place\n{% enddocs %}\n\n{% docs is_reportback %}\nWhether the post is a reportback. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs civic_action %}\nWhether the post is a Civic Action. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs scholarship_entry %}\nWhether the post is a Scholarship Entry. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs why_participated %}\nWhy the user participated in this action. Entered by the user.\n{% enddocs %}\n\n{% docs details %}\nDetails about the post. Contains contentfulId and other information (e.g. {\"campaignContentfulId\":\"6ATBgGEQEeJoIcxs1qbwaC\"})\n{% enddocs %}\n\n{% docs email %}\nEmail address of the user.\n{% enddocs %}\n\n{% docs source_details %}\nDetails about the source of the item. This is sometimes represented as a JSON object, and for other tables like Turbovote its represented as a string. (e.g. \"{\"contentful_id\":\"3CTLlXfbwtz1FOMpl31SKV\",\"utm_source\":\"scholarship_listing\",\"utm_medium\":\"referral\",\"utm_campaign\":\"fastweb_2019_08\"}\", newsletter_456)\n{% enddocs %}\n\n{% docs campaign_id %}\nThis is a unique identifier for the campaign\n{% enddocs %}\n\n{% docs campaign_run_id %}\nUnique identifier for the campaign run\n{% enddocs %}\n\n{% docs campaign_name %}\nName of the campaign\n{% enddocs %}\n\n{% docs campaign_cause %}\nCampaign cause (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_run_start_date %}\nStart date of the campaign run\n{% enddocs %}\n\n{% docs campaign_run_end_date %}\nEnd date of the campaign run\n{% enddocs %}\n\n{% docs campaign_created_date %}\nWhen the campaign was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs campaign_node_id %}\nInternal unique node id for the campaign\n{% enddocs %}\n\n{% docs campaign_node_id_title %}\nCampaign title\n{% enddocs %}\n\n{% docs campaign_run_id_title %}\nTitle of the campaign run\n{% enddocs %}\n\n{% docs campaign_action_type %}\nCampaign action type (eg. Make Something, Share Something)\n{% enddocs %}\n\n{% docs campaign_cause_type %}\nCampaign cause type (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_noun %}\nNoun applicable to the user's action\n{% enddocs %}\n\n{% docs campaign_verb %}\nVerb describing the action the user should take\n{% enddocs %}\n\n{% docs campaign_cta %}\nCampaign's call to action\n{% enddocs %}\n\n{% docs campaign_language %}\n\"Language in which the campaign is available\"\n{% enddocs %}\n\n{% docs agent_id %}\nIf set, the content type of the picture the member is sending us. Exp. image/png.\n{% enddocs %}\n\n{% docs attachment_content_type %}\nIf set, the handle of the Front agent this outbound support message is from.\n{% enddocs %}\n\n{% docs topic %}\nHolds a reference to the **last** campaign topic the member's conversation was in. This is useful to allow members to talk to Gambit and get quick responses (through Rivescript), without Gambit completely forgetting what state the member's interaction with a campaign topic was in.\n{% enddocs %}\n\n{% docs action_serial_id %}\nSerial id for the user's action. Depends on the source of the action. May be the bertly click id, sms message id, etc.\n{% enddocs %}\n\n{% docs channel %}\nChannel for the user's action. Depends on the source of the action. (e.g. web, sms)\n{% enddocs %}\n\n{% docs first_action_month %}\nMonth during which the user took their first action. \n{% enddocs %}\n\n{% docs event_id %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs event_source %}\nApplication source for event (eg. Phoenix, Northstar)\n{% enddocs %}\n\n{% docs event_datetime %}\nWhen the event occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs event_name %}\nName of the event (eg. northstar_submitted_register, https://docs.google.com/spreadsheets/d/1lm-fGrIm85nUTxSojqyCt_Ehmm1zEbViFhKpxcJiz1A/edit#gid=406441516)\n{% enddocs %}\n\n{% docs event_type %}\nType of event (pv = 'Page View', se = 'Structured Event')\n{% enddocs %}\n\n{% docs host %}\nURL host where event occurred (eg. www.dosomething.org or identity.dosomething.org)\n{% enddocs %}\n\n{% docs path %}\nURL path event occurred at (eg. /login or /us/campaigns/huddle-for-heroes)\n{% enddocs %}\n\n{% docs query_parameters %}\nOptional query parameters for the request (eg. query=huddle)\n{% enddocs %}\n\n{% docs se_category %}\nCategory of event (eg. focused_field, authentication) - Custom structured event\n{% enddocs %}\n\n{% docs se_action %}\nAction performed / event name (eg. form_submitted, action_failed) - Custom structured event\n{% enddocs %}\n\n{% docs se_label %}\nThe object of the action (eg. first_name, register, voter_reg_status) - Custom structured event\n{% enddocs %}\n\n{% docs session_id %}\nUnique identifier of the user's session\n{% enddocs %}\n\n{% docs session_counter %}\nHow many sessions a user has started\n{% enddocs %}\n\n{% docs browser_size %}\nWhich type of browser a user is using (eg. Mobile, Desktop)\n{% enddocs %}\n\n{% docs northstar_id %}\nThe Northstar ID of the user who generated the event\n{% enddocs %}\n\n{% docs device_id %}\nID of the device used\n{% enddocs %}\n\n{% docs referrer_host %}\nURL host of the referring site (eg. google.com)\n{% enddocs %}\n\n{% docs referrer_path %}\nURL path from referring site (eg. /10-stats-on-teen-drug-and-alcohol-use/)\n{% enddocs %}\n\n{% docs referrer_source %}\nReferrer source name (eg. Google, Facebook)\n{% enddocs %}\n\n{% docs utm_source %}\nTracks where the traffic is coming from. (eg. scholarship_listing, Facebook)\n{% enddocs %}\n\n{% docs utm_medium %}\nHow the traffic got to the platform (eg. referral, CPC)\n{% enddocs %}\n\n{% docs utm_campaign %}\nTracks which campaign the traffic was generated by. Shows up in Google Analytics as Campaign Name (eg. editorial_newsletter)\n{% enddocs %}\n\n{% docs url %}\nURL of campaign (eg. https://dosome.click/nyn5m7)\n{% enddocs %}\n\n{% docs modal_type %}\nNULL or SURVEY_MODAL\n{% enddocs %}\n\n{% docs landing_datetime %}\nWhen the session started in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs ending_datetime %}\nWhen the session ended in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs session_duration_seconds %}\nSession duration in seconds\n{% enddocs %}\n\n{% docs num_pages_views %}\nNumber of pages viewed in session\n{% enddocs %}\n\n{% docs landing_page %}\nFirst page the user viewed in the session (eg. /us/facts/11-facts-about-bp-oil-spill)\n{% enddocs %}\n\n{% docs exit_page %}\n\"Which page the user ended or exited their session from (eg. /us/campaigns/green-your-getaway)\"\n{% enddocs %}\n\n{% docs days_since_last_session %}\n\"Days since their last session.\"\n{% enddocs %}\n\n{% docs post_type %}\nType of post, (e.g. photo, voter-reg)\n{% enddocs %}\n\n{% docs noun %}\nNoun that corresponds to the item in the call to action that was delivered. (e.g. drawings, tweets)\n{% enddocs %}\n\n{% docs verb %}\nVerb corresponding to the action the user took. (e.g. shared, sent, taken)\n{% enddocs %}\n\n{% docs deleted_at %}\nDate time in UTC when a user deleted their post.\n{% enddocs %}\n\n{% docs _fivetran_deleted %}\nMarks rows that were deleted in the source table\n{% enddocs %}\n\n{% docs _fivetran_synced %}\n(UTC timestamp) keeps track of when each row was last successfully synced\n{% enddocs %}\n\n{% docs reportback %}\nWhether the post is a reportback \n{% enddocs %}\n\n{% docs active %}\nWhether the user is active \n{% enddocs %}\n\n{% docs anonymous %}\nWhether the user is anonymous when making the post \n{% enddocs %}\n\n{% docs callpower_campaign_id %}\nUnique ID corresponding to the Callpower campaign. Callpower allows users to record messages for their representatives.\n{% enddocs %}\n\n{% docs quiz %}\nWhether the post is a quiz \n{% enddocs %}\n\n{% docs action_type %}\nType of action the user took. (e.g. share-something, donate-something)\n{% enddocs %}\n\n{% docs online %}\nWhether the action is a online as opposed to IRL.\n{% enddocs %}\n\n{% docs time_commitment %}\nEstimated time required to do the action (e.g. 3.0+, <0.5)\n{% enddocs %}\n\n{% docs num_signups %}\nQuantity of campaign signups\n{% enddocs %}\n\n{% docs most_recent_signup %}\nTimestamp of the most recent signup in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs num_rbs %}\nQuantity of reportbacks for the user\n{% enddocs %}\n\n{% docs total_quantity %}\nTotal quantity of items in reportbacks\n{% enddocs %}\n\n{% docs most_recent_rb %}\nWhen the most recent reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs first_rb %}\nWhen the first reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs avg_time_betw_rbs %}\nCalculated average time between reportbacks.\n{% enddocs %}\n\n{% docs avg_days_next_action_after_rb %}\nCalculated average days until next action after reportback\n{% enddocs %}\n\n{% docs days_to_next_action_after_last_rb %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs most_recent_mam_action %}\nMost recent monthly active member qualifying action in UTC (eg. 2018-01-01 12:00:00).\n{% enddocs %}\n\n{% docs most_recent_email_open %}\nMost recent email open in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs most_recent_all_actions %}\nMost recent timestamp of any action in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs last_action_is_rb %}\nWhether the last action the user took was a reportback\n{% enddocs %}\n\n{% docs days_since_last_action %}\nDays since the user's last action\n{% enddocs %}\n\n{% docs time_to_first_rb %}\nHow much time after registering until the user's first reportback\n{% enddocs %}\n\n{% docs sms_unsubscribed_at %}\nTimestamp of when user unsubscribed from SMS messaging\n{% enddocs %}\n\n{% docs user_unsubscribed_at %}\nTimestamp of when user unsubscribed from email or sms\n{% enddocs %}\n\n{% docs voter_reg_acquisition %}\nWhether the user was an acquisition through voter registration efforts. \n{% enddocs %}\n\n{% docs last_logged_in %}\nDate time in UTC when user last logged in to Northstar\n{% enddocs %}\n\n{% docs last_accessed %}\nDate time in UTC when user last access the website\n{% enddocs %}\n\n{% docs last_messaged_at %}\nDate time in UTC when user was last sent a message via SMS or email\n{% enddocs %}\n\n{% docs facebook_id %}\nUser's facebook id\n{% enddocs %}\n\n{% docs mobile %}\nUsers's mobile phone number\n{% enddocs %}\n\n{% docs birthdate %}\nUser's birthdate\n{% enddocs %}\n\n{% docs first_name %}\nUser's first name\n{% enddocs %}\n\n{% docs last_name %}\nUser's last name\n{% enddocs %}\n\n{% docs voter_registration_status %}\nUser's registration status. (e.g. registration_complete, confirmed, uncertain) \n{% enddocs %}\n\n{% docs finish_with_state %}\nIf the registrant was eligible to use and passed through to complete their registration with their state\u2019s OVR system, it will be indicated in this field (direct quote from Rock-The-Vote documentation). Yes/No value in field.\n{% enddocs %}\n\n{% docs reportback_volume %}\nThis field returns 1 if non voter-reg action, since campaigns team only counts those a 1 reportback. If voter-reg action, we want to count quantity of post as number of registered voters.\n{% enddocs %}\n\n{% docs address_street_1 %}\nFirst line of user's street address\n{% enddocs %}\n\n{% docs address_street_2 %}\nSecond line of user's street address\n{% enddocs %}\n\n{% docs city %}\nUser's city\n{% enddocs %}\n\n{% docs state %}\nUser's state\n{% enddocs %}\n\n{% docs country %}\nUser's country\n{% enddocs %}\n\n{% docs language %}\nUser's language\n{% enddocs %}\n\n{% docs cio_status %}\nStatus of user from CIO. (e.g. customer_subscribed, customer_unsubscribed)\n{% enddocs %}\n\n{% docs cio_status_timestamp %}\nTimestamp when users's status was updated.\n{% enddocs %}\n\n{% docs sms_status %}\nCurrent SMS status. (e.g. undeliverable, unknown)\n{% enddocs %}\n\n{% docs source_detail %}\nDetails of the origin of the user. (e.g. tell_a_friend, other, opt_in_path/197981)\n{% enddocs %}\n\n{% docs badges %}\nWhether the user has any badges. \n{% enddocs %}\n\n{% docs refer_friends %}\nWhether the user is a part of the refer a friend campaign. \n{% enddocs %}\n\n{% docs subscribed_member %}\nWhether the user is subscribed. \n{% enddocs %}\n\n{% docs last_updated_at %}\nTimestamp when users's was updated.\n{% enddocs %}\n\n{% docs school_id %}\nUnique identifier for the user's school. This info comes from the school finder.\n{% enddocs %}\n\n{% docs newsletter_topic %}\nNewsletter topic. (e.g. community, lifestyle)\n{% enddocs %}\n\n{% docs user_agent %}\nFull user agent string for a user's browser (e.g. \"Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:24.0) Gecko/20100101 Firefox/24.0\")\n{% enddocs %}\n\n{% docs drupal_id %}\nOld Drupal user ID\n{% enddocs %}\n\n{% docs campaigns %}\nCampaigns a user is signed up for.\n{% enddocs %}\n\n{% docs audit %}\nA very useful field with data containing information about changes to a user, e.g. timestamps when the user subscribed and unsubscribed.\n{% enddocs %}\n\n{% docs voting_plan_status %}\nThe indication of the user's plan to vote, e.g. voting, not_voting, cant_vote\n{% enddocs %}\n\n{% docs voting_plan_time_of_day %}\nThe time of day when the user plans to vote, e.g morning, afternoon, evening\n{% enddocs %}\n\n{% docs voting_plan_method_of_transport %}\nHow the user plans to get to their polling place. e.g. walk, drive\n{% enddocs %}\n\n{% docs voting_plan_attending_with %}\nWith Whom the user plans to go voting, e.g. family, friends, alone\n{% enddocs %}\n\n{% docs feature_flags %}\nJSON containing info on features like badges and refer-a-friend.\n{% enddocs %}\n\n{% docs dbt_updated_at %}\nDBT snapshot table data. The updated_at timestamp of the source record when this snapshot row was inserted.\n{% enddocs %}\n\n{% docs dbt_scd_id %}\nDBT snapshot table data. A unique key generated for each snapshotted record.\n{% enddocs %}\n\n{% docs dbt_valid_from %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this snapshot row was first inserted\n{% enddocs %}\n\n{% docs dbt_valid_to %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this row row became invalidated.\n{% enddocs %}\n\n{% docs google_id %}\nUser's Google ID obtained from login.\n{% enddocs %}\n\n{% docs causes %}\nCauses in which a user is interested. e.g. animal welfare, education, mental_health\n{% enddocs %}\n\n{% docs email_subscription_status %}\nEmail subscription status of the user\n{% enddocs %}\n\n{% docs role %}\nUser's role, e.g. user, staff\n{% enddocs %}\n\n{% docs cio_backfilled %}\nWhether this user's data was backfilled from CIO\n{% enddocs %}\n\n{% docs addr_source %}\nWhere the user submitted their address, e.g. sms, GDPR\n{% enddocs %}\n\n{% docs email_subscription_topics %}\nEmail subscription topics correspond to categories in CIO in which the user is interested. e.g. lifestyle, community, scholarship\n{% enddocs %}\n\n{% docs sms_paused %}\nWhether we've paused sending sms messages to the user.\n{% enddocs %}\n\n\n\n\n", "name": "civic_action", "unique_id": "ds_dbt.civic_action", "block_contents": "Whether the post is a Civic Action. The application allows for multiple types of posts."}, "ds_dbt.scholarship_entry": {"root_path": "/Users/mrich/projects/quasar/quasar/dbt", "resource_type": "docs", "path": "schema.md", "original_file_path": "models/schema.md", "package_name": "ds_dbt", "file_contents": "\n{% docs click_id %}\nThis is a unique identifier for each click\n{% enddocs %}\n\n{% docs click_time %}\nTimestamp when user clicked.\n{% enddocs %}\n\n{% docs shortened %}\nShortened URL\n{% enddocs %}\n\n{% docs target_url %}\nURL where the user will be directed\n{% enddocs %}\n\n{% docs broadcast_id %}\nID of the broadcast that generated the shortened URL\n{% enddocs %}\n\n{% docs source %}\nSource of the URL (e.g. SMS, web), origin of the post (e.g. phoenix-web, phoenix-ashes, sms), or source where user was acquired. (e.g. sms, phoenix-next)\n{% enddocs %}\n\n{% docs interaction_type %}\nHow the user interacted with the link (e.g. preview, click)\n{% enddocs %}\n\n{% docs id %}\nUnique identifier for the post\n{% enddocs %}\n\n{% docs type %}\nType of post (e.g. photo)\n{% enddocs %}\n\n{% docs action %}\nPost action (e.g. DefendDreamers_Nov9_CongressCalls, GunViolence2018_Feb15_ParklandResponse)\n{% enddocs %}\n\n{% docs status %}\nPost status (e.g. accepted, rejected)\n{% enddocs %}\n\n{% docs quantity %}\nNumerical quantity of items specified in the call to action (e.g. 10, 200)\n{% enddocs %}\n\n{% docs source_bucket %}\nGrouping bucket for origin of the post (e.g. web, sms) \n{% enddocs %}\n\n{% docs created_at %}\nWhen the item was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs updated_at %}\nWhen the item was updated in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs text %}\nText of the post (e.g. \"Zoo animals and a super hero trying to help too!\") \n{% enddocs %}\n\n{% docs signup_id %}\nUnique identifier for the signup \n{% enddocs %}\n\n{% docs post_class %}\nClass of the signup (e.g. \"photo - default\", \"phone-call - DefendDreamers_Jan16_BothBodies\")\n{% enddocs %}\n\n{% docs is_accepted %}\nWhether the post has been accepted to be displayed to the public on the website\n{% enddocs %}\n\n{% docs action_id %}\nInternal identifier of the action \n{% enddocs %}\n\n{% docs location %}\nLocation where the action takes place (e.g. US-NY)\n{% enddocs %}\n\n{% docs postal_code %}\nPostal code where the action takes place\n{% enddocs %}\n\n{% docs is_reportback %}\nWhether the post is a reportback. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs civic_action %}\nWhether the post is a Civic Action. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs scholarship_entry %}\nWhether the post is a Scholarship Entry. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs why_participated %}\nWhy the user participated in this action. Entered by the user.\n{% enddocs %}\n\n{% docs details %}\nDetails about the post. Contains contentfulId and other information (e.g. {\"campaignContentfulId\":\"6ATBgGEQEeJoIcxs1qbwaC\"})\n{% enddocs %}\n\n{% docs email %}\nEmail address of the user.\n{% enddocs %}\n\n{% docs source_details %}\nDetails about the source of the item. This is sometimes represented as a JSON object, and for other tables like Turbovote its represented as a string. (e.g. \"{\"contentful_id\":\"3CTLlXfbwtz1FOMpl31SKV\",\"utm_source\":\"scholarship_listing\",\"utm_medium\":\"referral\",\"utm_campaign\":\"fastweb_2019_08\"}\", newsletter_456)\n{% enddocs %}\n\n{% docs campaign_id %}\nThis is a unique identifier for the campaign\n{% enddocs %}\n\n{% docs campaign_run_id %}\nUnique identifier for the campaign run\n{% enddocs %}\n\n{% docs campaign_name %}\nName of the campaign\n{% enddocs %}\n\n{% docs campaign_cause %}\nCampaign cause (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_run_start_date %}\nStart date of the campaign run\n{% enddocs %}\n\n{% docs campaign_run_end_date %}\nEnd date of the campaign run\n{% enddocs %}\n\n{% docs campaign_created_date %}\nWhen the campaign was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs campaign_node_id %}\nInternal unique node id for the campaign\n{% enddocs %}\n\n{% docs campaign_node_id_title %}\nCampaign title\n{% enddocs %}\n\n{% docs campaign_run_id_title %}\nTitle of the campaign run\n{% enddocs %}\n\n{% docs campaign_action_type %}\nCampaign action type (eg. Make Something, Share Something)\n{% enddocs %}\n\n{% docs campaign_cause_type %}\nCampaign cause type (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_noun %}\nNoun applicable to the user's action\n{% enddocs %}\n\n{% docs campaign_verb %}\nVerb describing the action the user should take\n{% enddocs %}\n\n{% docs campaign_cta %}\nCampaign's call to action\n{% enddocs %}\n\n{% docs campaign_language %}\n\"Language in which the campaign is available\"\n{% enddocs %}\n\n{% docs agent_id %}\nIf set, the content type of the picture the member is sending us. Exp. image/png.\n{% enddocs %}\n\n{% docs attachment_content_type %}\nIf set, the handle of the Front agent this outbound support message is from.\n{% enddocs %}\n\n{% docs topic %}\nHolds a reference to the **last** campaign topic the member's conversation was in. This is useful to allow members to talk to Gambit and get quick responses (through Rivescript), without Gambit completely forgetting what state the member's interaction with a campaign topic was in.\n{% enddocs %}\n\n{% docs action_serial_id %}\nSerial id for the user's action. Depends on the source of the action. May be the bertly click id, sms message id, etc.\n{% enddocs %}\n\n{% docs channel %}\nChannel for the user's action. Depends on the source of the action. (e.g. web, sms)\n{% enddocs %}\n\n{% docs first_action_month %}\nMonth during which the user took their first action. \n{% enddocs %}\n\n{% docs event_id %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs event_source %}\nApplication source for event (eg. Phoenix, Northstar)\n{% enddocs %}\n\n{% docs event_datetime %}\nWhen the event occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs event_name %}\nName of the event (eg. northstar_submitted_register, https://docs.google.com/spreadsheets/d/1lm-fGrIm85nUTxSojqyCt_Ehmm1zEbViFhKpxcJiz1A/edit#gid=406441516)\n{% enddocs %}\n\n{% docs event_type %}\nType of event (pv = 'Page View', se = 'Structured Event')\n{% enddocs %}\n\n{% docs host %}\nURL host where event occurred (eg. www.dosomething.org or identity.dosomething.org)\n{% enddocs %}\n\n{% docs path %}\nURL path event occurred at (eg. /login or /us/campaigns/huddle-for-heroes)\n{% enddocs %}\n\n{% docs query_parameters %}\nOptional query parameters for the request (eg. query=huddle)\n{% enddocs %}\n\n{% docs se_category %}\nCategory of event (eg. focused_field, authentication) - Custom structured event\n{% enddocs %}\n\n{% docs se_action %}\nAction performed / event name (eg. form_submitted, action_failed) - Custom structured event\n{% enddocs %}\n\n{% docs se_label %}\nThe object of the action (eg. first_name, register, voter_reg_status) - Custom structured event\n{% enddocs %}\n\n{% docs session_id %}\nUnique identifier of the user's session\n{% enddocs %}\n\n{% docs session_counter %}\nHow many sessions a user has started\n{% enddocs %}\n\n{% docs browser_size %}\nWhich type of browser a user is using (eg. Mobile, Desktop)\n{% enddocs %}\n\n{% docs northstar_id %}\nThe Northstar ID of the user who generated the event\n{% enddocs %}\n\n{% docs device_id %}\nID of the device used\n{% enddocs %}\n\n{% docs referrer_host %}\nURL host of the referring site (eg. google.com)\n{% enddocs %}\n\n{% docs referrer_path %}\nURL path from referring site (eg. /10-stats-on-teen-drug-and-alcohol-use/)\n{% enddocs %}\n\n{% docs referrer_source %}\nReferrer source name (eg. Google, Facebook)\n{% enddocs %}\n\n{% docs utm_source %}\nTracks where the traffic is coming from. (eg. scholarship_listing, Facebook)\n{% enddocs %}\n\n{% docs utm_medium %}\nHow the traffic got to the platform (eg. referral, CPC)\n{% enddocs %}\n\n{% docs utm_campaign %}\nTracks which campaign the traffic was generated by. Shows up in Google Analytics as Campaign Name (eg. editorial_newsletter)\n{% enddocs %}\n\n{% docs url %}\nURL of campaign (eg. https://dosome.click/nyn5m7)\n{% enddocs %}\n\n{% docs modal_type %}\nNULL or SURVEY_MODAL\n{% enddocs %}\n\n{% docs landing_datetime %}\nWhen the session started in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs ending_datetime %}\nWhen the session ended in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs session_duration_seconds %}\nSession duration in seconds\n{% enddocs %}\n\n{% docs num_pages_views %}\nNumber of pages viewed in session\n{% enddocs %}\n\n{% docs landing_page %}\nFirst page the user viewed in the session (eg. /us/facts/11-facts-about-bp-oil-spill)\n{% enddocs %}\n\n{% docs exit_page %}\n\"Which page the user ended or exited their session from (eg. /us/campaigns/green-your-getaway)\"\n{% enddocs %}\n\n{% docs days_since_last_session %}\n\"Days since their last session.\"\n{% enddocs %}\n\n{% docs post_type %}\nType of post, (e.g. photo, voter-reg)\n{% enddocs %}\n\n{% docs noun %}\nNoun that corresponds to the item in the call to action that was delivered. (e.g. drawings, tweets)\n{% enddocs %}\n\n{% docs verb %}\nVerb corresponding to the action the user took. (e.g. shared, sent, taken)\n{% enddocs %}\n\n{% docs deleted_at %}\nDate time in UTC when a user deleted their post.\n{% enddocs %}\n\n{% docs _fivetran_deleted %}\nMarks rows that were deleted in the source table\n{% enddocs %}\n\n{% docs _fivetran_synced %}\n(UTC timestamp) keeps track of when each row was last successfully synced\n{% enddocs %}\n\n{% docs reportback %}\nWhether the post is a reportback \n{% enddocs %}\n\n{% docs active %}\nWhether the user is active \n{% enddocs %}\n\n{% docs anonymous %}\nWhether the user is anonymous when making the post \n{% enddocs %}\n\n{% docs callpower_campaign_id %}\nUnique ID corresponding to the Callpower campaign. Callpower allows users to record messages for their representatives.\n{% enddocs %}\n\n{% docs quiz %}\nWhether the post is a quiz \n{% enddocs %}\n\n{% docs action_type %}\nType of action the user took. (e.g. share-something, donate-something)\n{% enddocs %}\n\n{% docs online %}\nWhether the action is a online as opposed to IRL.\n{% enddocs %}\n\n{% docs time_commitment %}\nEstimated time required to do the action (e.g. 3.0+, <0.5)\n{% enddocs %}\n\n{% docs num_signups %}\nQuantity of campaign signups\n{% enddocs %}\n\n{% docs most_recent_signup %}\nTimestamp of the most recent signup in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs num_rbs %}\nQuantity of reportbacks for the user\n{% enddocs %}\n\n{% docs total_quantity %}\nTotal quantity of items in reportbacks\n{% enddocs %}\n\n{% docs most_recent_rb %}\nWhen the most recent reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs first_rb %}\nWhen the first reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs avg_time_betw_rbs %}\nCalculated average time between reportbacks.\n{% enddocs %}\n\n{% docs avg_days_next_action_after_rb %}\nCalculated average days until next action after reportback\n{% enddocs %}\n\n{% docs days_to_next_action_after_last_rb %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs most_recent_mam_action %}\nMost recent monthly active member qualifying action in UTC (eg. 2018-01-01 12:00:00).\n{% enddocs %}\n\n{% docs most_recent_email_open %}\nMost recent email open in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs most_recent_all_actions %}\nMost recent timestamp of any action in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs last_action_is_rb %}\nWhether the last action the user took was a reportback\n{% enddocs %}\n\n{% docs days_since_last_action %}\nDays since the user's last action\n{% enddocs %}\n\n{% docs time_to_first_rb %}\nHow much time after registering until the user's first reportback\n{% enddocs %}\n\n{% docs sms_unsubscribed_at %}\nTimestamp of when user unsubscribed from SMS messaging\n{% enddocs %}\n\n{% docs user_unsubscribed_at %}\nTimestamp of when user unsubscribed from email or sms\n{% enddocs %}\n\n{% docs voter_reg_acquisition %}\nWhether the user was an acquisition through voter registration efforts. \n{% enddocs %}\n\n{% docs last_logged_in %}\nDate time in UTC when user last logged in to Northstar\n{% enddocs %}\n\n{% docs last_accessed %}\nDate time in UTC when user last access the website\n{% enddocs %}\n\n{% docs last_messaged_at %}\nDate time in UTC when user was last sent a message via SMS or email\n{% enddocs %}\n\n{% docs facebook_id %}\nUser's facebook id\n{% enddocs %}\n\n{% docs mobile %}\nUsers's mobile phone number\n{% enddocs %}\n\n{% docs birthdate %}\nUser's birthdate\n{% enddocs %}\n\n{% docs first_name %}\nUser's first name\n{% enddocs %}\n\n{% docs last_name %}\nUser's last name\n{% enddocs %}\n\n{% docs voter_registration_status %}\nUser's registration status. (e.g. registration_complete, confirmed, uncertain) \n{% enddocs %}\n\n{% docs finish_with_state %}\nIf the registrant was eligible to use and passed through to complete their registration with their state\u2019s OVR system, it will be indicated in this field (direct quote from Rock-The-Vote documentation). Yes/No value in field.\n{% enddocs %}\n\n{% docs reportback_volume %}\nThis field returns 1 if non voter-reg action, since campaigns team only counts those a 1 reportback. If voter-reg action, we want to count quantity of post as number of registered voters.\n{% enddocs %}\n\n{% docs address_street_1 %}\nFirst line of user's street address\n{% enddocs %}\n\n{% docs address_street_2 %}\nSecond line of user's street address\n{% enddocs %}\n\n{% docs city %}\nUser's city\n{% enddocs %}\n\n{% docs state %}\nUser's state\n{% enddocs %}\n\n{% docs country %}\nUser's country\n{% enddocs %}\n\n{% docs language %}\nUser's language\n{% enddocs %}\n\n{% docs cio_status %}\nStatus of user from CIO. (e.g. customer_subscribed, customer_unsubscribed)\n{% enddocs %}\n\n{% docs cio_status_timestamp %}\nTimestamp when users's status was updated.\n{% enddocs %}\n\n{% docs sms_status %}\nCurrent SMS status. (e.g. undeliverable, unknown)\n{% enddocs %}\n\n{% docs source_detail %}\nDetails of the origin of the user. (e.g. tell_a_friend, other, opt_in_path/197981)\n{% enddocs %}\n\n{% docs badges %}\nWhether the user has any badges. \n{% enddocs %}\n\n{% docs refer_friends %}\nWhether the user is a part of the refer a friend campaign. \n{% enddocs %}\n\n{% docs subscribed_member %}\nWhether the user is subscribed. \n{% enddocs %}\n\n{% docs last_updated_at %}\nTimestamp when users's was updated.\n{% enddocs %}\n\n{% docs school_id %}\nUnique identifier for the user's school. This info comes from the school finder.\n{% enddocs %}\n\n{% docs newsletter_topic %}\nNewsletter topic. (e.g. community, lifestyle)\n{% enddocs %}\n\n{% docs user_agent %}\nFull user agent string for a user's browser (e.g. \"Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:24.0) Gecko/20100101 Firefox/24.0\")\n{% enddocs %}\n\n{% docs drupal_id %}\nOld Drupal user ID\n{% enddocs %}\n\n{% docs campaigns %}\nCampaigns a user is signed up for.\n{% enddocs %}\n\n{% docs audit %}\nA very useful field with data containing information about changes to a user, e.g. timestamps when the user subscribed and unsubscribed.\n{% enddocs %}\n\n{% docs voting_plan_status %}\nThe indication of the user's plan to vote, e.g. voting, not_voting, cant_vote\n{% enddocs %}\n\n{% docs voting_plan_time_of_day %}\nThe time of day when the user plans to vote, e.g morning, afternoon, evening\n{% enddocs %}\n\n{% docs voting_plan_method_of_transport %}\nHow the user plans to get to their polling place. e.g. walk, drive\n{% enddocs %}\n\n{% docs voting_plan_attending_with %}\nWith Whom the user plans to go voting, e.g. family, friends, alone\n{% enddocs %}\n\n{% docs feature_flags %}\nJSON containing info on features like badges and refer-a-friend.\n{% enddocs %}\n\n{% docs dbt_updated_at %}\nDBT snapshot table data. The updated_at timestamp of the source record when this snapshot row was inserted.\n{% enddocs %}\n\n{% docs dbt_scd_id %}\nDBT snapshot table data. A unique key generated for each snapshotted record.\n{% enddocs %}\n\n{% docs dbt_valid_from %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this snapshot row was first inserted\n{% enddocs %}\n\n{% docs dbt_valid_to %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this row row became invalidated.\n{% enddocs %}\n\n{% docs google_id %}\nUser's Google ID obtained from login.\n{% enddocs %}\n\n{% docs causes %}\nCauses in which a user is interested. e.g. animal welfare, education, mental_health\n{% enddocs %}\n\n{% docs email_subscription_status %}\nEmail subscription status of the user\n{% enddocs %}\n\n{% docs role %}\nUser's role, e.g. user, staff\n{% enddocs %}\n\n{% docs cio_backfilled %}\nWhether this user's data was backfilled from CIO\n{% enddocs %}\n\n{% docs addr_source %}\nWhere the user submitted their address, e.g. sms, GDPR\n{% enddocs %}\n\n{% docs email_subscription_topics %}\nEmail subscription topics correspond to categories in CIO in which the user is interested. e.g. lifestyle, community, scholarship\n{% enddocs %}\n\n{% docs sms_paused %}\nWhether we've paused sending sms messages to the user.\n{% enddocs %}\n\n\n\n\n", "name": "scholarship_entry", "unique_id": "ds_dbt.scholarship_entry", "block_contents": "Whether the post is a Scholarship Entry. The application allows for multiple types of posts."}, "ds_dbt.why_participated": {"root_path": "/Users/mrich/projects/quasar/quasar/dbt", "resource_type": "docs", "path": "schema.md", "original_file_path": "models/schema.md", "package_name": "ds_dbt", "file_contents": "\n{% docs click_id %}\nThis is a unique identifier for each click\n{% enddocs %}\n\n{% docs click_time %}\nTimestamp when user clicked.\n{% enddocs %}\n\n{% docs shortened %}\nShortened URL\n{% enddocs %}\n\n{% docs target_url %}\nURL where the user will be directed\n{% enddocs %}\n\n{% docs broadcast_id %}\nID of the broadcast that generated the shortened URL\n{% enddocs %}\n\n{% docs source %}\nSource of the URL (e.g. SMS, web), origin of the post (e.g. phoenix-web, phoenix-ashes, sms), or source where user was acquired. (e.g. sms, phoenix-next)\n{% enddocs %}\n\n{% docs interaction_type %}\nHow the user interacted with the link (e.g. preview, click)\n{% enddocs %}\n\n{% docs id %}\nUnique identifier for the post\n{% enddocs %}\n\n{% docs type %}\nType of post (e.g. photo)\n{% enddocs %}\n\n{% docs action %}\nPost action (e.g. DefendDreamers_Nov9_CongressCalls, GunViolence2018_Feb15_ParklandResponse)\n{% enddocs %}\n\n{% docs status %}\nPost status (e.g. accepted, rejected)\n{% enddocs %}\n\n{% docs quantity %}\nNumerical quantity of items specified in the call to action (e.g. 10, 200)\n{% enddocs %}\n\n{% docs source_bucket %}\nGrouping bucket for origin of the post (e.g. web, sms) \n{% enddocs %}\n\n{% docs created_at %}\nWhen the item was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs updated_at %}\nWhen the item was updated in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs text %}\nText of the post (e.g. \"Zoo animals and a super hero trying to help too!\") \n{% enddocs %}\n\n{% docs signup_id %}\nUnique identifier for the signup \n{% enddocs %}\n\n{% docs post_class %}\nClass of the signup (e.g. \"photo - default\", \"phone-call - DefendDreamers_Jan16_BothBodies\")\n{% enddocs %}\n\n{% docs is_accepted %}\nWhether the post has been accepted to be displayed to the public on the website\n{% enddocs %}\n\n{% docs action_id %}\nInternal identifier of the action \n{% enddocs %}\n\n{% docs location %}\nLocation where the action takes place (e.g. US-NY)\n{% enddocs %}\n\n{% docs postal_code %}\nPostal code where the action takes place\n{% enddocs %}\n\n{% docs is_reportback %}\nWhether the post is a reportback. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs civic_action %}\nWhether the post is a Civic Action. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs scholarship_entry %}\nWhether the post is a Scholarship Entry. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs why_participated %}\nWhy the user participated in this action. Entered by the user.\n{% enddocs %}\n\n{% docs details %}\nDetails about the post. Contains contentfulId and other information (e.g. {\"campaignContentfulId\":\"6ATBgGEQEeJoIcxs1qbwaC\"})\n{% enddocs %}\n\n{% docs email %}\nEmail address of the user.\n{% enddocs %}\n\n{% docs source_details %}\nDetails about the source of the item. This is sometimes represented as a JSON object, and for other tables like Turbovote its represented as a string. (e.g. \"{\"contentful_id\":\"3CTLlXfbwtz1FOMpl31SKV\",\"utm_source\":\"scholarship_listing\",\"utm_medium\":\"referral\",\"utm_campaign\":\"fastweb_2019_08\"}\", newsletter_456)\n{% enddocs %}\n\n{% docs campaign_id %}\nThis is a unique identifier for the campaign\n{% enddocs %}\n\n{% docs campaign_run_id %}\nUnique identifier for the campaign run\n{% enddocs %}\n\n{% docs campaign_name %}\nName of the campaign\n{% enddocs %}\n\n{% docs campaign_cause %}\nCampaign cause (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_run_start_date %}\nStart date of the campaign run\n{% enddocs %}\n\n{% docs campaign_run_end_date %}\nEnd date of the campaign run\n{% enddocs %}\n\n{% docs campaign_created_date %}\nWhen the campaign was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs campaign_node_id %}\nInternal unique node id for the campaign\n{% enddocs %}\n\n{% docs campaign_node_id_title %}\nCampaign title\n{% enddocs %}\n\n{% docs campaign_run_id_title %}\nTitle of the campaign run\n{% enddocs %}\n\n{% docs campaign_action_type %}\nCampaign action type (eg. Make Something, Share Something)\n{% enddocs %}\n\n{% docs campaign_cause_type %}\nCampaign cause type (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_noun %}\nNoun applicable to the user's action\n{% enddocs %}\n\n{% docs campaign_verb %}\nVerb describing the action the user should take\n{% enddocs %}\n\n{% docs campaign_cta %}\nCampaign's call to action\n{% enddocs %}\n\n{% docs campaign_language %}\n\"Language in which the campaign is available\"\n{% enddocs %}\n\n{% docs agent_id %}\nIf set, the content type of the picture the member is sending us. Exp. image/png.\n{% enddocs %}\n\n{% docs attachment_content_type %}\nIf set, the handle of the Front agent this outbound support message is from.\n{% enddocs %}\n\n{% docs topic %}\nHolds a reference to the **last** campaign topic the member's conversation was in. This is useful to allow members to talk to Gambit and get quick responses (through Rivescript), without Gambit completely forgetting what state the member's interaction with a campaign topic was in.\n{% enddocs %}\n\n{% docs action_serial_id %}\nSerial id for the user's action. Depends on the source of the action. May be the bertly click id, sms message id, etc.\n{% enddocs %}\n\n{% docs channel %}\nChannel for the user's action. Depends on the source of the action. (e.g. web, sms)\n{% enddocs %}\n\n{% docs first_action_month %}\nMonth during which the user took their first action. \n{% enddocs %}\n\n{% docs event_id %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs event_source %}\nApplication source for event (eg. Phoenix, Northstar)\n{% enddocs %}\n\n{% docs event_datetime %}\nWhen the event occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs event_name %}\nName of the event (eg. northstar_submitted_register, https://docs.google.com/spreadsheets/d/1lm-fGrIm85nUTxSojqyCt_Ehmm1zEbViFhKpxcJiz1A/edit#gid=406441516)\n{% enddocs %}\n\n{% docs event_type %}\nType of event (pv = 'Page View', se = 'Structured Event')\n{% enddocs %}\n\n{% docs host %}\nURL host where event occurred (eg. www.dosomething.org or identity.dosomething.org)\n{% enddocs %}\n\n{% docs path %}\nURL path event occurred at (eg. /login or /us/campaigns/huddle-for-heroes)\n{% enddocs %}\n\n{% docs query_parameters %}\nOptional query parameters for the request (eg. query=huddle)\n{% enddocs %}\n\n{% docs se_category %}\nCategory of event (eg. focused_field, authentication) - Custom structured event\n{% enddocs %}\n\n{% docs se_action %}\nAction performed / event name (eg. form_submitted, action_failed) - Custom structured event\n{% enddocs %}\n\n{% docs se_label %}\nThe object of the action (eg. first_name, register, voter_reg_status) - Custom structured event\n{% enddocs %}\n\n{% docs session_id %}\nUnique identifier of the user's session\n{% enddocs %}\n\n{% docs session_counter %}\nHow many sessions a user has started\n{% enddocs %}\n\n{% docs browser_size %}\nWhich type of browser a user is using (eg. Mobile, Desktop)\n{% enddocs %}\n\n{% docs northstar_id %}\nThe Northstar ID of the user who generated the event\n{% enddocs %}\n\n{% docs device_id %}\nID of the device used\n{% enddocs %}\n\n{% docs referrer_host %}\nURL host of the referring site (eg. google.com)\n{% enddocs %}\n\n{% docs referrer_path %}\nURL path from referring site (eg. /10-stats-on-teen-drug-and-alcohol-use/)\n{% enddocs %}\n\n{% docs referrer_source %}\nReferrer source name (eg. Google, Facebook)\n{% enddocs %}\n\n{% docs utm_source %}\nTracks where the traffic is coming from. (eg. scholarship_listing, Facebook)\n{% enddocs %}\n\n{% docs utm_medium %}\nHow the traffic got to the platform (eg. referral, CPC)\n{% enddocs %}\n\n{% docs utm_campaign %}\nTracks which campaign the traffic was generated by. Shows up in Google Analytics as Campaign Name (eg. editorial_newsletter)\n{% enddocs %}\n\n{% docs url %}\nURL of campaign (eg. https://dosome.click/nyn5m7)\n{% enddocs %}\n\n{% docs modal_type %}\nNULL or SURVEY_MODAL\n{% enddocs %}\n\n{% docs landing_datetime %}\nWhen the session started in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs ending_datetime %}\nWhen the session ended in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs session_duration_seconds %}\nSession duration in seconds\n{% enddocs %}\n\n{% docs num_pages_views %}\nNumber of pages viewed in session\n{% enddocs %}\n\n{% docs landing_page %}\nFirst page the user viewed in the session (eg. /us/facts/11-facts-about-bp-oil-spill)\n{% enddocs %}\n\n{% docs exit_page %}\n\"Which page the user ended or exited their session from (eg. /us/campaigns/green-your-getaway)\"\n{% enddocs %}\n\n{% docs days_since_last_session %}\n\"Days since their last session.\"\n{% enddocs %}\n\n{% docs post_type %}\nType of post, (e.g. photo, voter-reg)\n{% enddocs %}\n\n{% docs noun %}\nNoun that corresponds to the item in the call to action that was delivered. (e.g. drawings, tweets)\n{% enddocs %}\n\n{% docs verb %}\nVerb corresponding to the action the user took. (e.g. shared, sent, taken)\n{% enddocs %}\n\n{% docs deleted_at %}\nDate time in UTC when a user deleted their post.\n{% enddocs %}\n\n{% docs _fivetran_deleted %}\nMarks rows that were deleted in the source table\n{% enddocs %}\n\n{% docs _fivetran_synced %}\n(UTC timestamp) keeps track of when each row was last successfully synced\n{% enddocs %}\n\n{% docs reportback %}\nWhether the post is a reportback \n{% enddocs %}\n\n{% docs active %}\nWhether the user is active \n{% enddocs %}\n\n{% docs anonymous %}\nWhether the user is anonymous when making the post \n{% enddocs %}\n\n{% docs callpower_campaign_id %}\nUnique ID corresponding to the Callpower campaign. Callpower allows users to record messages for their representatives.\n{% enddocs %}\n\n{% docs quiz %}\nWhether the post is a quiz \n{% enddocs %}\n\n{% docs action_type %}\nType of action the user took. (e.g. share-something, donate-something)\n{% enddocs %}\n\n{% docs online %}\nWhether the action is a online as opposed to IRL.\n{% enddocs %}\n\n{% docs time_commitment %}\nEstimated time required to do the action (e.g. 3.0+, <0.5)\n{% enddocs %}\n\n{% docs num_signups %}\nQuantity of campaign signups\n{% enddocs %}\n\n{% docs most_recent_signup %}\nTimestamp of the most recent signup in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs num_rbs %}\nQuantity of reportbacks for the user\n{% enddocs %}\n\n{% docs total_quantity %}\nTotal quantity of items in reportbacks\n{% enddocs %}\n\n{% docs most_recent_rb %}\nWhen the most recent reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs first_rb %}\nWhen the first reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs avg_time_betw_rbs %}\nCalculated average time between reportbacks.\n{% enddocs %}\n\n{% docs avg_days_next_action_after_rb %}\nCalculated average days until next action after reportback\n{% enddocs %}\n\n{% docs days_to_next_action_after_last_rb %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs most_recent_mam_action %}\nMost recent monthly active member qualifying action in UTC (eg. 2018-01-01 12:00:00).\n{% enddocs %}\n\n{% docs most_recent_email_open %}\nMost recent email open in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs most_recent_all_actions %}\nMost recent timestamp of any action in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs last_action_is_rb %}\nWhether the last action the user took was a reportback\n{% enddocs %}\n\n{% docs days_since_last_action %}\nDays since the user's last action\n{% enddocs %}\n\n{% docs time_to_first_rb %}\nHow much time after registering until the user's first reportback\n{% enddocs %}\n\n{% docs sms_unsubscribed_at %}\nTimestamp of when user unsubscribed from SMS messaging\n{% enddocs %}\n\n{% docs user_unsubscribed_at %}\nTimestamp of when user unsubscribed from email or sms\n{% enddocs %}\n\n{% docs voter_reg_acquisition %}\nWhether the user was an acquisition through voter registration efforts. \n{% enddocs %}\n\n{% docs last_logged_in %}\nDate time in UTC when user last logged in to Northstar\n{% enddocs %}\n\n{% docs last_accessed %}\nDate time in UTC when user last access the website\n{% enddocs %}\n\n{% docs last_messaged_at %}\nDate time in UTC when user was last sent a message via SMS or email\n{% enddocs %}\n\n{% docs facebook_id %}\nUser's facebook id\n{% enddocs %}\n\n{% docs mobile %}\nUsers's mobile phone number\n{% enddocs %}\n\n{% docs birthdate %}\nUser's birthdate\n{% enddocs %}\n\n{% docs first_name %}\nUser's first name\n{% enddocs %}\n\n{% docs last_name %}\nUser's last name\n{% enddocs %}\n\n{% docs voter_registration_status %}\nUser's registration status. (e.g. registration_complete, confirmed, uncertain) \n{% enddocs %}\n\n{% docs finish_with_state %}\nIf the registrant was eligible to use and passed through to complete their registration with their state\u2019s OVR system, it will be indicated in this field (direct quote from Rock-The-Vote documentation). Yes/No value in field.\n{% enddocs %}\n\n{% docs reportback_volume %}\nThis field returns 1 if non voter-reg action, since campaigns team only counts those a 1 reportback. If voter-reg action, we want to count quantity of post as number of registered voters.\n{% enddocs %}\n\n{% docs address_street_1 %}\nFirst line of user's street address\n{% enddocs %}\n\n{% docs address_street_2 %}\nSecond line of user's street address\n{% enddocs %}\n\n{% docs city %}\nUser's city\n{% enddocs %}\n\n{% docs state %}\nUser's state\n{% enddocs %}\n\n{% docs country %}\nUser's country\n{% enddocs %}\n\n{% docs language %}\nUser's language\n{% enddocs %}\n\n{% docs cio_status %}\nStatus of user from CIO. (e.g. customer_subscribed, customer_unsubscribed)\n{% enddocs %}\n\n{% docs cio_status_timestamp %}\nTimestamp when users's status was updated.\n{% enddocs %}\n\n{% docs sms_status %}\nCurrent SMS status. (e.g. undeliverable, unknown)\n{% enddocs %}\n\n{% docs source_detail %}\nDetails of the origin of the user. (e.g. tell_a_friend, other, opt_in_path/197981)\n{% enddocs %}\n\n{% docs badges %}\nWhether the user has any badges. \n{% enddocs %}\n\n{% docs refer_friends %}\nWhether the user is a part of the refer a friend campaign. \n{% enddocs %}\n\n{% docs subscribed_member %}\nWhether the user is subscribed. \n{% enddocs %}\n\n{% docs last_updated_at %}\nTimestamp when users's was updated.\n{% enddocs %}\n\n{% docs school_id %}\nUnique identifier for the user's school. This info comes from the school finder.\n{% enddocs %}\n\n{% docs newsletter_topic %}\nNewsletter topic. (e.g. community, lifestyle)\n{% enddocs %}\n\n{% docs user_agent %}\nFull user agent string for a user's browser (e.g. \"Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:24.0) Gecko/20100101 Firefox/24.0\")\n{% enddocs %}\n\n{% docs drupal_id %}\nOld Drupal user ID\n{% enddocs %}\n\n{% docs campaigns %}\nCampaigns a user is signed up for.\n{% enddocs %}\n\n{% docs audit %}\nA very useful field with data containing information about changes to a user, e.g. timestamps when the user subscribed and unsubscribed.\n{% enddocs %}\n\n{% docs voting_plan_status %}\nThe indication of the user's plan to vote, e.g. voting, not_voting, cant_vote\n{% enddocs %}\n\n{% docs voting_plan_time_of_day %}\nThe time of day when the user plans to vote, e.g morning, afternoon, evening\n{% enddocs %}\n\n{% docs voting_plan_method_of_transport %}\nHow the user plans to get to their polling place. e.g. walk, drive\n{% enddocs %}\n\n{% docs voting_plan_attending_with %}\nWith Whom the user plans to go voting, e.g. family, friends, alone\n{% enddocs %}\n\n{% docs feature_flags %}\nJSON containing info on features like badges and refer-a-friend.\n{% enddocs %}\n\n{% docs dbt_updated_at %}\nDBT snapshot table data. The updated_at timestamp of the source record when this snapshot row was inserted.\n{% enddocs %}\n\n{% docs dbt_scd_id %}\nDBT snapshot table data. A unique key generated for each snapshotted record.\n{% enddocs %}\n\n{% docs dbt_valid_from %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this snapshot row was first inserted\n{% enddocs %}\n\n{% docs dbt_valid_to %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this row row became invalidated.\n{% enddocs %}\n\n{% docs google_id %}\nUser's Google ID obtained from login.\n{% enddocs %}\n\n{% docs causes %}\nCauses in which a user is interested. e.g. animal welfare, education, mental_health\n{% enddocs %}\n\n{% docs email_subscription_status %}\nEmail subscription status of the user\n{% enddocs %}\n\n{% docs role %}\nUser's role, e.g. user, staff\n{% enddocs %}\n\n{% docs cio_backfilled %}\nWhether this user's data was backfilled from CIO\n{% enddocs %}\n\n{% docs addr_source %}\nWhere the user submitted their address, e.g. sms, GDPR\n{% enddocs %}\n\n{% docs email_subscription_topics %}\nEmail subscription topics correspond to categories in CIO in which the user is interested. e.g. lifestyle, community, scholarship\n{% enddocs %}\n\n{% docs sms_paused %}\nWhether we've paused sending sms messages to the user.\n{% enddocs %}\n\n\n\n\n", "name": "why_participated", "unique_id": "ds_dbt.why_participated", "block_contents": "Why the user participated in this action. Entered by the user."}, "ds_dbt.details": {"root_path": "/Users/mrich/projects/quasar/quasar/dbt", "resource_type": "docs", "path": "schema.md", "original_file_path": "models/schema.md", "package_name": "ds_dbt", "file_contents": "\n{% docs click_id %}\nThis is a unique identifier for each click\n{% enddocs %}\n\n{% docs click_time %}\nTimestamp when user clicked.\n{% enddocs %}\n\n{% docs shortened %}\nShortened URL\n{% enddocs %}\n\n{% docs target_url %}\nURL where the user will be directed\n{% enddocs %}\n\n{% docs broadcast_id %}\nID of the broadcast that generated the shortened URL\n{% enddocs %}\n\n{% docs source %}\nSource of the URL (e.g. SMS, web), origin of the post (e.g. phoenix-web, phoenix-ashes, sms), or source where user was acquired. (e.g. sms, phoenix-next)\n{% enddocs %}\n\n{% docs interaction_type %}\nHow the user interacted with the link (e.g. preview, click)\n{% enddocs %}\n\n{% docs id %}\nUnique identifier for the post\n{% enddocs %}\n\n{% docs type %}\nType of post (e.g. photo)\n{% enddocs %}\n\n{% docs action %}\nPost action (e.g. DefendDreamers_Nov9_CongressCalls, GunViolence2018_Feb15_ParklandResponse)\n{% enddocs %}\n\n{% docs status %}\nPost status (e.g. accepted, rejected)\n{% enddocs %}\n\n{% docs quantity %}\nNumerical quantity of items specified in the call to action (e.g. 10, 200)\n{% enddocs %}\n\n{% docs source_bucket %}\nGrouping bucket for origin of the post (e.g. web, sms) \n{% enddocs %}\n\n{% docs created_at %}\nWhen the item was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs updated_at %}\nWhen the item was updated in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs text %}\nText of the post (e.g. \"Zoo animals and a super hero trying to help too!\") \n{% enddocs %}\n\n{% docs signup_id %}\nUnique identifier for the signup \n{% enddocs %}\n\n{% docs post_class %}\nClass of the signup (e.g. \"photo - default\", \"phone-call - DefendDreamers_Jan16_BothBodies\")\n{% enddocs %}\n\n{% docs is_accepted %}\nWhether the post has been accepted to be displayed to the public on the website\n{% enddocs %}\n\n{% docs action_id %}\nInternal identifier of the action \n{% enddocs %}\n\n{% docs location %}\nLocation where the action takes place (e.g. US-NY)\n{% enddocs %}\n\n{% docs postal_code %}\nPostal code where the action takes place\n{% enddocs %}\n\n{% docs is_reportback %}\nWhether the post is a reportback. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs civic_action %}\nWhether the post is a Civic Action. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs scholarship_entry %}\nWhether the post is a Scholarship Entry. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs why_participated %}\nWhy the user participated in this action. Entered by the user.\n{% enddocs %}\n\n{% docs details %}\nDetails about the post. Contains contentfulId and other information (e.g. {\"campaignContentfulId\":\"6ATBgGEQEeJoIcxs1qbwaC\"})\n{% enddocs %}\n\n{% docs email %}\nEmail address of the user.\n{% enddocs %}\n\n{% docs source_details %}\nDetails about the source of the item. This is sometimes represented as a JSON object, and for other tables like Turbovote its represented as a string. (e.g. \"{\"contentful_id\":\"3CTLlXfbwtz1FOMpl31SKV\",\"utm_source\":\"scholarship_listing\",\"utm_medium\":\"referral\",\"utm_campaign\":\"fastweb_2019_08\"}\", newsletter_456)\n{% enddocs %}\n\n{% docs campaign_id %}\nThis is a unique identifier for the campaign\n{% enddocs %}\n\n{% docs campaign_run_id %}\nUnique identifier for the campaign run\n{% enddocs %}\n\n{% docs campaign_name %}\nName of the campaign\n{% enddocs %}\n\n{% docs campaign_cause %}\nCampaign cause (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_run_start_date %}\nStart date of the campaign run\n{% enddocs %}\n\n{% docs campaign_run_end_date %}\nEnd date of the campaign run\n{% enddocs %}\n\n{% docs campaign_created_date %}\nWhen the campaign was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs campaign_node_id %}\nInternal unique node id for the campaign\n{% enddocs %}\n\n{% docs campaign_node_id_title %}\nCampaign title\n{% enddocs %}\n\n{% docs campaign_run_id_title %}\nTitle of the campaign run\n{% enddocs %}\n\n{% docs campaign_action_type %}\nCampaign action type (eg. Make Something, Share Something)\n{% enddocs %}\n\n{% docs campaign_cause_type %}\nCampaign cause type (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_noun %}\nNoun applicable to the user's action\n{% enddocs %}\n\n{% docs campaign_verb %}\nVerb describing the action the user should take\n{% enddocs %}\n\n{% docs campaign_cta %}\nCampaign's call to action\n{% enddocs %}\n\n{% docs campaign_language %}\n\"Language in which the campaign is available\"\n{% enddocs %}\n\n{% docs agent_id %}\nIf set, the content type of the picture the member is sending us. Exp. image/png.\n{% enddocs %}\n\n{% docs attachment_content_type %}\nIf set, the handle of the Front agent this outbound support message is from.\n{% enddocs %}\n\n{% docs topic %}\nHolds a reference to the **last** campaign topic the member's conversation was in. This is useful to allow members to talk to Gambit and get quick responses (through Rivescript), without Gambit completely forgetting what state the member's interaction with a campaign topic was in.\n{% enddocs %}\n\n{% docs action_serial_id %}\nSerial id for the user's action. Depends on the source of the action. May be the bertly click id, sms message id, etc.\n{% enddocs %}\n\n{% docs channel %}\nChannel for the user's action. Depends on the source of the action. (e.g. web, sms)\n{% enddocs %}\n\n{% docs first_action_month %}\nMonth during which the user took their first action. \n{% enddocs %}\n\n{% docs event_id %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs event_source %}\nApplication source for event (eg. Phoenix, Northstar)\n{% enddocs %}\n\n{% docs event_datetime %}\nWhen the event occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs event_name %}\nName of the event (eg. northstar_submitted_register, https://docs.google.com/spreadsheets/d/1lm-fGrIm85nUTxSojqyCt_Ehmm1zEbViFhKpxcJiz1A/edit#gid=406441516)\n{% enddocs %}\n\n{% docs event_type %}\nType of event (pv = 'Page View', se = 'Structured Event')\n{% enddocs %}\n\n{% docs host %}\nURL host where event occurred (eg. www.dosomething.org or identity.dosomething.org)\n{% enddocs %}\n\n{% docs path %}\nURL path event occurred at (eg. /login or /us/campaigns/huddle-for-heroes)\n{% enddocs %}\n\n{% docs query_parameters %}\nOptional query parameters for the request (eg. query=huddle)\n{% enddocs %}\n\n{% docs se_category %}\nCategory of event (eg. focused_field, authentication) - Custom structured event\n{% enddocs %}\n\n{% docs se_action %}\nAction performed / event name (eg. form_submitted, action_failed) - Custom structured event\n{% enddocs %}\n\n{% docs se_label %}\nThe object of the action (eg. first_name, register, voter_reg_status) - Custom structured event\n{% enddocs %}\n\n{% docs session_id %}\nUnique identifier of the user's session\n{% enddocs %}\n\n{% docs session_counter %}\nHow many sessions a user has started\n{% enddocs %}\n\n{% docs browser_size %}\nWhich type of browser a user is using (eg. Mobile, Desktop)\n{% enddocs %}\n\n{% docs northstar_id %}\nThe Northstar ID of the user who generated the event\n{% enddocs %}\n\n{% docs device_id %}\nID of the device used\n{% enddocs %}\n\n{% docs referrer_host %}\nURL host of the referring site (eg. google.com)\n{% enddocs %}\n\n{% docs referrer_path %}\nURL path from referring site (eg. /10-stats-on-teen-drug-and-alcohol-use/)\n{% enddocs %}\n\n{% docs referrer_source %}\nReferrer source name (eg. Google, Facebook)\n{% enddocs %}\n\n{% docs utm_source %}\nTracks where the traffic is coming from. (eg. scholarship_listing, Facebook)\n{% enddocs %}\n\n{% docs utm_medium %}\nHow the traffic got to the platform (eg. referral, CPC)\n{% enddocs %}\n\n{% docs utm_campaign %}\nTracks which campaign the traffic was generated by. Shows up in Google Analytics as Campaign Name (eg. editorial_newsletter)\n{% enddocs %}\n\n{% docs url %}\nURL of campaign (eg. https://dosome.click/nyn5m7)\n{% enddocs %}\n\n{% docs modal_type %}\nNULL or SURVEY_MODAL\n{% enddocs %}\n\n{% docs landing_datetime %}\nWhen the session started in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs ending_datetime %}\nWhen the session ended in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs session_duration_seconds %}\nSession duration in seconds\n{% enddocs %}\n\n{% docs num_pages_views %}\nNumber of pages viewed in session\n{% enddocs %}\n\n{% docs landing_page %}\nFirst page the user viewed in the session (eg. /us/facts/11-facts-about-bp-oil-spill)\n{% enddocs %}\n\n{% docs exit_page %}\n\"Which page the user ended or exited their session from (eg. /us/campaigns/green-your-getaway)\"\n{% enddocs %}\n\n{% docs days_since_last_session %}\n\"Days since their last session.\"\n{% enddocs %}\n\n{% docs post_type %}\nType of post, (e.g. photo, voter-reg)\n{% enddocs %}\n\n{% docs noun %}\nNoun that corresponds to the item in the call to action that was delivered. (e.g. drawings, tweets)\n{% enddocs %}\n\n{% docs verb %}\nVerb corresponding to the action the user took. (e.g. shared, sent, taken)\n{% enddocs %}\n\n{% docs deleted_at %}\nDate time in UTC when a user deleted their post.\n{% enddocs %}\n\n{% docs _fivetran_deleted %}\nMarks rows that were deleted in the source table\n{% enddocs %}\n\n{% docs _fivetran_synced %}\n(UTC timestamp) keeps track of when each row was last successfully synced\n{% enddocs %}\n\n{% docs reportback %}\nWhether the post is a reportback \n{% enddocs %}\n\n{% docs active %}\nWhether the user is active \n{% enddocs %}\n\n{% docs anonymous %}\nWhether the user is anonymous when making the post \n{% enddocs %}\n\n{% docs callpower_campaign_id %}\nUnique ID corresponding to the Callpower campaign. Callpower allows users to record messages for their representatives.\n{% enddocs %}\n\n{% docs quiz %}\nWhether the post is a quiz \n{% enddocs %}\n\n{% docs action_type %}\nType of action the user took. (e.g. share-something, donate-something)\n{% enddocs %}\n\n{% docs online %}\nWhether the action is a online as opposed to IRL.\n{% enddocs %}\n\n{% docs time_commitment %}\nEstimated time required to do the action (e.g. 3.0+, <0.5)\n{% enddocs %}\n\n{% docs num_signups %}\nQuantity of campaign signups\n{% enddocs %}\n\n{% docs most_recent_signup %}\nTimestamp of the most recent signup in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs num_rbs %}\nQuantity of reportbacks for the user\n{% enddocs %}\n\n{% docs total_quantity %}\nTotal quantity of items in reportbacks\n{% enddocs %}\n\n{% docs most_recent_rb %}\nWhen the most recent reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs first_rb %}\nWhen the first reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs avg_time_betw_rbs %}\nCalculated average time between reportbacks.\n{% enddocs %}\n\n{% docs avg_days_next_action_after_rb %}\nCalculated average days until next action after reportback\n{% enddocs %}\n\n{% docs days_to_next_action_after_last_rb %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs most_recent_mam_action %}\nMost recent monthly active member qualifying action in UTC (eg. 2018-01-01 12:00:00).\n{% enddocs %}\n\n{% docs most_recent_email_open %}\nMost recent email open in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs most_recent_all_actions %}\nMost recent timestamp of any action in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs last_action_is_rb %}\nWhether the last action the user took was a reportback\n{% enddocs %}\n\n{% docs days_since_last_action %}\nDays since the user's last action\n{% enddocs %}\n\n{% docs time_to_first_rb %}\nHow much time after registering until the user's first reportback\n{% enddocs %}\n\n{% docs sms_unsubscribed_at %}\nTimestamp of when user unsubscribed from SMS messaging\n{% enddocs %}\n\n{% docs user_unsubscribed_at %}\nTimestamp of when user unsubscribed from email or sms\n{% enddocs %}\n\n{% docs voter_reg_acquisition %}\nWhether the user was an acquisition through voter registration efforts. \n{% enddocs %}\n\n{% docs last_logged_in %}\nDate time in UTC when user last logged in to Northstar\n{% enddocs %}\n\n{% docs last_accessed %}\nDate time in UTC when user last access the website\n{% enddocs %}\n\n{% docs last_messaged_at %}\nDate time in UTC when user was last sent a message via SMS or email\n{% enddocs %}\n\n{% docs facebook_id %}\nUser's facebook id\n{% enddocs %}\n\n{% docs mobile %}\nUsers's mobile phone number\n{% enddocs %}\n\n{% docs birthdate %}\nUser's birthdate\n{% enddocs %}\n\n{% docs first_name %}\nUser's first name\n{% enddocs %}\n\n{% docs last_name %}\nUser's last name\n{% enddocs %}\n\n{% docs voter_registration_status %}\nUser's registration status. (e.g. registration_complete, confirmed, uncertain) \n{% enddocs %}\n\n{% docs finish_with_state %}\nIf the registrant was eligible to use and passed through to complete their registration with their state\u2019s OVR system, it will be indicated in this field (direct quote from Rock-The-Vote documentation). Yes/No value in field.\n{% enddocs %}\n\n{% docs reportback_volume %}\nThis field returns 1 if non voter-reg action, since campaigns team only counts those a 1 reportback. If voter-reg action, we want to count quantity of post as number of registered voters.\n{% enddocs %}\n\n{% docs address_street_1 %}\nFirst line of user's street address\n{% enddocs %}\n\n{% docs address_street_2 %}\nSecond line of user's street address\n{% enddocs %}\n\n{% docs city %}\nUser's city\n{% enddocs %}\n\n{% docs state %}\nUser's state\n{% enddocs %}\n\n{% docs country %}\nUser's country\n{% enddocs %}\n\n{% docs language %}\nUser's language\n{% enddocs %}\n\n{% docs cio_status %}\nStatus of user from CIO. (e.g. customer_subscribed, customer_unsubscribed)\n{% enddocs %}\n\n{% docs cio_status_timestamp %}\nTimestamp when users's status was updated.\n{% enddocs %}\n\n{% docs sms_status %}\nCurrent SMS status. (e.g. undeliverable, unknown)\n{% enddocs %}\n\n{% docs source_detail %}\nDetails of the origin of the user. (e.g. tell_a_friend, other, opt_in_path/197981)\n{% enddocs %}\n\n{% docs badges %}\nWhether the user has any badges. \n{% enddocs %}\n\n{% docs refer_friends %}\nWhether the user is a part of the refer a friend campaign. \n{% enddocs %}\n\n{% docs subscribed_member %}\nWhether the user is subscribed. \n{% enddocs %}\n\n{% docs last_updated_at %}\nTimestamp when users's was updated.\n{% enddocs %}\n\n{% docs school_id %}\nUnique identifier for the user's school. This info comes from the school finder.\n{% enddocs %}\n\n{% docs newsletter_topic %}\nNewsletter topic. (e.g. community, lifestyle)\n{% enddocs %}\n\n{% docs user_agent %}\nFull user agent string for a user's browser (e.g. \"Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:24.0) Gecko/20100101 Firefox/24.0\")\n{% enddocs %}\n\n{% docs drupal_id %}\nOld Drupal user ID\n{% enddocs %}\n\n{% docs campaigns %}\nCampaigns a user is signed up for.\n{% enddocs %}\n\n{% docs audit %}\nA very useful field with data containing information about changes to a user, e.g. timestamps when the user subscribed and unsubscribed.\n{% enddocs %}\n\n{% docs voting_plan_status %}\nThe indication of the user's plan to vote, e.g. voting, not_voting, cant_vote\n{% enddocs %}\n\n{% docs voting_plan_time_of_day %}\nThe time of day when the user plans to vote, e.g morning, afternoon, evening\n{% enddocs %}\n\n{% docs voting_plan_method_of_transport %}\nHow the user plans to get to their polling place. e.g. walk, drive\n{% enddocs %}\n\n{% docs voting_plan_attending_with %}\nWith Whom the user plans to go voting, e.g. family, friends, alone\n{% enddocs %}\n\n{% docs feature_flags %}\nJSON containing info on features like badges and refer-a-friend.\n{% enddocs %}\n\n{% docs dbt_updated_at %}\nDBT snapshot table data. The updated_at timestamp of the source record when this snapshot row was inserted.\n{% enddocs %}\n\n{% docs dbt_scd_id %}\nDBT snapshot table data. A unique key generated for each snapshotted record.\n{% enddocs %}\n\n{% docs dbt_valid_from %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this snapshot row was first inserted\n{% enddocs %}\n\n{% docs dbt_valid_to %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this row row became invalidated.\n{% enddocs %}\n\n{% docs google_id %}\nUser's Google ID obtained from login.\n{% enddocs %}\n\n{% docs causes %}\nCauses in which a user is interested. e.g. animal welfare, education, mental_health\n{% enddocs %}\n\n{% docs email_subscription_status %}\nEmail subscription status of the user\n{% enddocs %}\n\n{% docs role %}\nUser's role, e.g. user, staff\n{% enddocs %}\n\n{% docs cio_backfilled %}\nWhether this user's data was backfilled from CIO\n{% enddocs %}\n\n{% docs addr_source %}\nWhere the user submitted their address, e.g. sms, GDPR\n{% enddocs %}\n\n{% docs email_subscription_topics %}\nEmail subscription topics correspond to categories in CIO in which the user is interested. e.g. lifestyle, community, scholarship\n{% enddocs %}\n\n{% docs sms_paused %}\nWhether we've paused sending sms messages to the user.\n{% enddocs %}\n\n\n\n\n", "name": "details", "unique_id": "ds_dbt.details", "block_contents": "Details about the post. Contains contentfulId and other information (e.g. {\"campaignContentfulId\":\"6ATBgGEQEeJoIcxs1qbwaC\"})"}, "ds_dbt.email": {"root_path": "/Users/mrich/projects/quasar/quasar/dbt", "resource_type": "docs", "path": "schema.md", "original_file_path": "models/schema.md", "package_name": "ds_dbt", "file_contents": "\n{% docs click_id %}\nThis is a unique identifier for each click\n{% enddocs %}\n\n{% docs click_time %}\nTimestamp when user clicked.\n{% enddocs %}\n\n{% docs shortened %}\nShortened URL\n{% enddocs %}\n\n{% docs target_url %}\nURL where the user will be directed\n{% enddocs %}\n\n{% docs broadcast_id %}\nID of the broadcast that generated the shortened URL\n{% enddocs %}\n\n{% docs source %}\nSource of the URL (e.g. SMS, web), origin of the post (e.g. phoenix-web, phoenix-ashes, sms), or source where user was acquired. (e.g. sms, phoenix-next)\n{% enddocs %}\n\n{% docs interaction_type %}\nHow the user interacted with the link (e.g. preview, click)\n{% enddocs %}\n\n{% docs id %}\nUnique identifier for the post\n{% enddocs %}\n\n{% docs type %}\nType of post (e.g. photo)\n{% enddocs %}\n\n{% docs action %}\nPost action (e.g. DefendDreamers_Nov9_CongressCalls, GunViolence2018_Feb15_ParklandResponse)\n{% enddocs %}\n\n{% docs status %}\nPost status (e.g. accepted, rejected)\n{% enddocs %}\n\n{% docs quantity %}\nNumerical quantity of items specified in the call to action (e.g. 10, 200)\n{% enddocs %}\n\n{% docs source_bucket %}\nGrouping bucket for origin of the post (e.g. web, sms) \n{% enddocs %}\n\n{% docs created_at %}\nWhen the item was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs updated_at %}\nWhen the item was updated in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs text %}\nText of the post (e.g. \"Zoo animals and a super hero trying to help too!\") \n{% enddocs %}\n\n{% docs signup_id %}\nUnique identifier for the signup \n{% enddocs %}\n\n{% docs post_class %}\nClass of the signup (e.g. \"photo - default\", \"phone-call - DefendDreamers_Jan16_BothBodies\")\n{% enddocs %}\n\n{% docs is_accepted %}\nWhether the post has been accepted to be displayed to the public on the website\n{% enddocs %}\n\n{% docs action_id %}\nInternal identifier of the action \n{% enddocs %}\n\n{% docs location %}\nLocation where the action takes place (e.g. US-NY)\n{% enddocs %}\n\n{% docs postal_code %}\nPostal code where the action takes place\n{% enddocs %}\n\n{% docs is_reportback %}\nWhether the post is a reportback. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs civic_action %}\nWhether the post is a Civic Action. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs scholarship_entry %}\nWhether the post is a Scholarship Entry. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs why_participated %}\nWhy the user participated in this action. Entered by the user.\n{% enddocs %}\n\n{% docs details %}\nDetails about the post. Contains contentfulId and other information (e.g. {\"campaignContentfulId\":\"6ATBgGEQEeJoIcxs1qbwaC\"})\n{% enddocs %}\n\n{% docs email %}\nEmail address of the user.\n{% enddocs %}\n\n{% docs source_details %}\nDetails about the source of the item. This is sometimes represented as a JSON object, and for other tables like Turbovote its represented as a string. (e.g. \"{\"contentful_id\":\"3CTLlXfbwtz1FOMpl31SKV\",\"utm_source\":\"scholarship_listing\",\"utm_medium\":\"referral\",\"utm_campaign\":\"fastweb_2019_08\"}\", newsletter_456)\n{% enddocs %}\n\n{% docs campaign_id %}\nThis is a unique identifier for the campaign\n{% enddocs %}\n\n{% docs campaign_run_id %}\nUnique identifier for the campaign run\n{% enddocs %}\n\n{% docs campaign_name %}\nName of the campaign\n{% enddocs %}\n\n{% docs campaign_cause %}\nCampaign cause (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_run_start_date %}\nStart date of the campaign run\n{% enddocs %}\n\n{% docs campaign_run_end_date %}\nEnd date of the campaign run\n{% enddocs %}\n\n{% docs campaign_created_date %}\nWhen the campaign was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs campaign_node_id %}\nInternal unique node id for the campaign\n{% enddocs %}\n\n{% docs campaign_node_id_title %}\nCampaign title\n{% enddocs %}\n\n{% docs campaign_run_id_title %}\nTitle of the campaign run\n{% enddocs %}\n\n{% docs campaign_action_type %}\nCampaign action type (eg. Make Something, Share Something)\n{% enddocs %}\n\n{% docs campaign_cause_type %}\nCampaign cause type (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_noun %}\nNoun applicable to the user's action\n{% enddocs %}\n\n{% docs campaign_verb %}\nVerb describing the action the user should take\n{% enddocs %}\n\n{% docs campaign_cta %}\nCampaign's call to action\n{% enddocs %}\n\n{% docs campaign_language %}\n\"Language in which the campaign is available\"\n{% enddocs %}\n\n{% docs agent_id %}\nIf set, the content type of the picture the member is sending us. Exp. image/png.\n{% enddocs %}\n\n{% docs attachment_content_type %}\nIf set, the handle of the Front agent this outbound support message is from.\n{% enddocs %}\n\n{% docs topic %}\nHolds a reference to the **last** campaign topic the member's conversation was in. This is useful to allow members to talk to Gambit and get quick responses (through Rivescript), without Gambit completely forgetting what state the member's interaction with a campaign topic was in.\n{% enddocs %}\n\n{% docs action_serial_id %}\nSerial id for the user's action. Depends on the source of the action. May be the bertly click id, sms message id, etc.\n{% enddocs %}\n\n{% docs channel %}\nChannel for the user's action. Depends on the source of the action. (e.g. web, sms)\n{% enddocs %}\n\n{% docs first_action_month %}\nMonth during which the user took their first action. \n{% enddocs %}\n\n{% docs event_id %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs event_source %}\nApplication source for event (eg. Phoenix, Northstar)\n{% enddocs %}\n\n{% docs event_datetime %}\nWhen the event occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs event_name %}\nName of the event (eg. northstar_submitted_register, https://docs.google.com/spreadsheets/d/1lm-fGrIm85nUTxSojqyCt_Ehmm1zEbViFhKpxcJiz1A/edit#gid=406441516)\n{% enddocs %}\n\n{% docs event_type %}\nType of event (pv = 'Page View', se = 'Structured Event')\n{% enddocs %}\n\n{% docs host %}\nURL host where event occurred (eg. www.dosomething.org or identity.dosomething.org)\n{% enddocs %}\n\n{% docs path %}\nURL path event occurred at (eg. /login or /us/campaigns/huddle-for-heroes)\n{% enddocs %}\n\n{% docs query_parameters %}\nOptional query parameters for the request (eg. query=huddle)\n{% enddocs %}\n\n{% docs se_category %}\nCategory of event (eg. focused_field, authentication) - Custom structured event\n{% enddocs %}\n\n{% docs se_action %}\nAction performed / event name (eg. form_submitted, action_failed) - Custom structured event\n{% enddocs %}\n\n{% docs se_label %}\nThe object of the action (eg. first_name, register, voter_reg_status) - Custom structured event\n{% enddocs %}\n\n{% docs session_id %}\nUnique identifier of the user's session\n{% enddocs %}\n\n{% docs session_counter %}\nHow many sessions a user has started\n{% enddocs %}\n\n{% docs browser_size %}\nWhich type of browser a user is using (eg. Mobile, Desktop)\n{% enddocs %}\n\n{% docs northstar_id %}\nThe Northstar ID of the user who generated the event\n{% enddocs %}\n\n{% docs device_id %}\nID of the device used\n{% enddocs %}\n\n{% docs referrer_host %}\nURL host of the referring site (eg. google.com)\n{% enddocs %}\n\n{% docs referrer_path %}\nURL path from referring site (eg. /10-stats-on-teen-drug-and-alcohol-use/)\n{% enddocs %}\n\n{% docs referrer_source %}\nReferrer source name (eg. Google, Facebook)\n{% enddocs %}\n\n{% docs utm_source %}\nTracks where the traffic is coming from. (eg. scholarship_listing, Facebook)\n{% enddocs %}\n\n{% docs utm_medium %}\nHow the traffic got to the platform (eg. referral, CPC)\n{% enddocs %}\n\n{% docs utm_campaign %}\nTracks which campaign the traffic was generated by. Shows up in Google Analytics as Campaign Name (eg. editorial_newsletter)\n{% enddocs %}\n\n{% docs url %}\nURL of campaign (eg. https://dosome.click/nyn5m7)\n{% enddocs %}\n\n{% docs modal_type %}\nNULL or SURVEY_MODAL\n{% enddocs %}\n\n{% docs landing_datetime %}\nWhen the session started in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs ending_datetime %}\nWhen the session ended in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs session_duration_seconds %}\nSession duration in seconds\n{% enddocs %}\n\n{% docs num_pages_views %}\nNumber of pages viewed in session\n{% enddocs %}\n\n{% docs landing_page %}\nFirst page the user viewed in the session (eg. /us/facts/11-facts-about-bp-oil-spill)\n{% enddocs %}\n\n{% docs exit_page %}\n\"Which page the user ended or exited their session from (eg. /us/campaigns/green-your-getaway)\"\n{% enddocs %}\n\n{% docs days_since_last_session %}\n\"Days since their last session.\"\n{% enddocs %}\n\n{% docs post_type %}\nType of post, (e.g. photo, voter-reg)\n{% enddocs %}\n\n{% docs noun %}\nNoun that corresponds to the item in the call to action that was delivered. (e.g. drawings, tweets)\n{% enddocs %}\n\n{% docs verb %}\nVerb corresponding to the action the user took. (e.g. shared, sent, taken)\n{% enddocs %}\n\n{% docs deleted_at %}\nDate time in UTC when a user deleted their post.\n{% enddocs %}\n\n{% docs _fivetran_deleted %}\nMarks rows that were deleted in the source table\n{% enddocs %}\n\n{% docs _fivetran_synced %}\n(UTC timestamp) keeps track of when each row was last successfully synced\n{% enddocs %}\n\n{% docs reportback %}\nWhether the post is a reportback \n{% enddocs %}\n\n{% docs active %}\nWhether the user is active \n{% enddocs %}\n\n{% docs anonymous %}\nWhether the user is anonymous when making the post \n{% enddocs %}\n\n{% docs callpower_campaign_id %}\nUnique ID corresponding to the Callpower campaign. Callpower allows users to record messages for their representatives.\n{% enddocs %}\n\n{% docs quiz %}\nWhether the post is a quiz \n{% enddocs %}\n\n{% docs action_type %}\nType of action the user took. (e.g. share-something, donate-something)\n{% enddocs %}\n\n{% docs online %}\nWhether the action is a online as opposed to IRL.\n{% enddocs %}\n\n{% docs time_commitment %}\nEstimated time required to do the action (e.g. 3.0+, <0.5)\n{% enddocs %}\n\n{% docs num_signups %}\nQuantity of campaign signups\n{% enddocs %}\n\n{% docs most_recent_signup %}\nTimestamp of the most recent signup in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs num_rbs %}\nQuantity of reportbacks for the user\n{% enddocs %}\n\n{% docs total_quantity %}\nTotal quantity of items in reportbacks\n{% enddocs %}\n\n{% docs most_recent_rb %}\nWhen the most recent reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs first_rb %}\nWhen the first reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs avg_time_betw_rbs %}\nCalculated average time between reportbacks.\n{% enddocs %}\n\n{% docs avg_days_next_action_after_rb %}\nCalculated average days until next action after reportback\n{% enddocs %}\n\n{% docs days_to_next_action_after_last_rb %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs most_recent_mam_action %}\nMost recent monthly active member qualifying action in UTC (eg. 2018-01-01 12:00:00).\n{% enddocs %}\n\n{% docs most_recent_email_open %}\nMost recent email open in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs most_recent_all_actions %}\nMost recent timestamp of any action in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs last_action_is_rb %}\nWhether the last action the user took was a reportback\n{% enddocs %}\n\n{% docs days_since_last_action %}\nDays since the user's last action\n{% enddocs %}\n\n{% docs time_to_first_rb %}\nHow much time after registering until the user's first reportback\n{% enddocs %}\n\n{% docs sms_unsubscribed_at %}\nTimestamp of when user unsubscribed from SMS messaging\n{% enddocs %}\n\n{% docs user_unsubscribed_at %}\nTimestamp of when user unsubscribed from email or sms\n{% enddocs %}\n\n{% docs voter_reg_acquisition %}\nWhether the user was an acquisition through voter registration efforts. \n{% enddocs %}\n\n{% docs last_logged_in %}\nDate time in UTC when user last logged in to Northstar\n{% enddocs %}\n\n{% docs last_accessed %}\nDate time in UTC when user last access the website\n{% enddocs %}\n\n{% docs last_messaged_at %}\nDate time in UTC when user was last sent a message via SMS or email\n{% enddocs %}\n\n{% docs facebook_id %}\nUser's facebook id\n{% enddocs %}\n\n{% docs mobile %}\nUsers's mobile phone number\n{% enddocs %}\n\n{% docs birthdate %}\nUser's birthdate\n{% enddocs %}\n\n{% docs first_name %}\nUser's first name\n{% enddocs %}\n\n{% docs last_name %}\nUser's last name\n{% enddocs %}\n\n{% docs voter_registration_status %}\nUser's registration status. (e.g. registration_complete, confirmed, uncertain) \n{% enddocs %}\n\n{% docs finish_with_state %}\nIf the registrant was eligible to use and passed through to complete their registration with their state\u2019s OVR system, it will be indicated in this field (direct quote from Rock-The-Vote documentation). Yes/No value in field.\n{% enddocs %}\n\n{% docs reportback_volume %}\nThis field returns 1 if non voter-reg action, since campaigns team only counts those a 1 reportback. If voter-reg action, we want to count quantity of post as number of registered voters.\n{% enddocs %}\n\n{% docs address_street_1 %}\nFirst line of user's street address\n{% enddocs %}\n\n{% docs address_street_2 %}\nSecond line of user's street address\n{% enddocs %}\n\n{% docs city %}\nUser's city\n{% enddocs %}\n\n{% docs state %}\nUser's state\n{% enddocs %}\n\n{% docs country %}\nUser's country\n{% enddocs %}\n\n{% docs language %}\nUser's language\n{% enddocs %}\n\n{% docs cio_status %}\nStatus of user from CIO. (e.g. customer_subscribed, customer_unsubscribed)\n{% enddocs %}\n\n{% docs cio_status_timestamp %}\nTimestamp when users's status was updated.\n{% enddocs %}\n\n{% docs sms_status %}\nCurrent SMS status. (e.g. undeliverable, unknown)\n{% enddocs %}\n\n{% docs source_detail %}\nDetails of the origin of the user. (e.g. tell_a_friend, other, opt_in_path/197981)\n{% enddocs %}\n\n{% docs badges %}\nWhether the user has any badges. \n{% enddocs %}\n\n{% docs refer_friends %}\nWhether the user is a part of the refer a friend campaign. \n{% enddocs %}\n\n{% docs subscribed_member %}\nWhether the user is subscribed. \n{% enddocs %}\n\n{% docs last_updated_at %}\nTimestamp when users's was updated.\n{% enddocs %}\n\n{% docs school_id %}\nUnique identifier for the user's school. This info comes from the school finder.\n{% enddocs %}\n\n{% docs newsletter_topic %}\nNewsletter topic. (e.g. community, lifestyle)\n{% enddocs %}\n\n{% docs user_agent %}\nFull user agent string for a user's browser (e.g. \"Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:24.0) Gecko/20100101 Firefox/24.0\")\n{% enddocs %}\n\n{% docs drupal_id %}\nOld Drupal user ID\n{% enddocs %}\n\n{% docs campaigns %}\nCampaigns a user is signed up for.\n{% enddocs %}\n\n{% docs audit %}\nA very useful field with data containing information about changes to a user, e.g. timestamps when the user subscribed and unsubscribed.\n{% enddocs %}\n\n{% docs voting_plan_status %}\nThe indication of the user's plan to vote, e.g. voting, not_voting, cant_vote\n{% enddocs %}\n\n{% docs voting_plan_time_of_day %}\nThe time of day when the user plans to vote, e.g morning, afternoon, evening\n{% enddocs %}\n\n{% docs voting_plan_method_of_transport %}\nHow the user plans to get to their polling place. e.g. walk, drive\n{% enddocs %}\n\n{% docs voting_plan_attending_with %}\nWith Whom the user plans to go voting, e.g. family, friends, alone\n{% enddocs %}\n\n{% docs feature_flags %}\nJSON containing info on features like badges and refer-a-friend.\n{% enddocs %}\n\n{% docs dbt_updated_at %}\nDBT snapshot table data. The updated_at timestamp of the source record when this snapshot row was inserted.\n{% enddocs %}\n\n{% docs dbt_scd_id %}\nDBT snapshot table data. A unique key generated for each snapshotted record.\n{% enddocs %}\n\n{% docs dbt_valid_from %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this snapshot row was first inserted\n{% enddocs %}\n\n{% docs dbt_valid_to %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this row row became invalidated.\n{% enddocs %}\n\n{% docs google_id %}\nUser's Google ID obtained from login.\n{% enddocs %}\n\n{% docs causes %}\nCauses in which a user is interested. e.g. animal welfare, education, mental_health\n{% enddocs %}\n\n{% docs email_subscription_status %}\nEmail subscription status of the user\n{% enddocs %}\n\n{% docs role %}\nUser's role, e.g. user, staff\n{% enddocs %}\n\n{% docs cio_backfilled %}\nWhether this user's data was backfilled from CIO\n{% enddocs %}\n\n{% docs addr_source %}\nWhere the user submitted their address, e.g. sms, GDPR\n{% enddocs %}\n\n{% docs email_subscription_topics %}\nEmail subscription topics correspond to categories in CIO in which the user is interested. e.g. lifestyle, community, scholarship\n{% enddocs %}\n\n{% docs sms_paused %}\nWhether we've paused sending sms messages to the user.\n{% enddocs %}\n\n\n\n\n", "name": "email", "unique_id": "ds_dbt.email", "block_contents": "Email address of the user."}, "ds_dbt.source_details": {"root_path": "/Users/mrich/projects/quasar/quasar/dbt", "resource_type": "docs", "path": "schema.md", "original_file_path": "models/schema.md", "package_name": "ds_dbt", "file_contents": "\n{% docs click_id %}\nThis is a unique identifier for each click\n{% enddocs %}\n\n{% docs click_time %}\nTimestamp when user clicked.\n{% enddocs %}\n\n{% docs shortened %}\nShortened URL\n{% enddocs %}\n\n{% docs target_url %}\nURL where the user will be directed\n{% enddocs %}\n\n{% docs broadcast_id %}\nID of the broadcast that generated the shortened URL\n{% enddocs %}\n\n{% docs source %}\nSource of the URL (e.g. SMS, web), origin of the post (e.g. phoenix-web, phoenix-ashes, sms), or source where user was acquired. (e.g. sms, phoenix-next)\n{% enddocs %}\n\n{% docs interaction_type %}\nHow the user interacted with the link (e.g. preview, click)\n{% enddocs %}\n\n{% docs id %}\nUnique identifier for the post\n{% enddocs %}\n\n{% docs type %}\nType of post (e.g. photo)\n{% enddocs %}\n\n{% docs action %}\nPost action (e.g. DefendDreamers_Nov9_CongressCalls, GunViolence2018_Feb15_ParklandResponse)\n{% enddocs %}\n\n{% docs status %}\nPost status (e.g. accepted, rejected)\n{% enddocs %}\n\n{% docs quantity %}\nNumerical quantity of items specified in the call to action (e.g. 10, 200)\n{% enddocs %}\n\n{% docs source_bucket %}\nGrouping bucket for origin of the post (e.g. web, sms) \n{% enddocs %}\n\n{% docs created_at %}\nWhen the item was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs updated_at %}\nWhen the item was updated in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs text %}\nText of the post (e.g. \"Zoo animals and a super hero trying to help too!\") \n{% enddocs %}\n\n{% docs signup_id %}\nUnique identifier for the signup \n{% enddocs %}\n\n{% docs post_class %}\nClass of the signup (e.g. \"photo - default\", \"phone-call - DefendDreamers_Jan16_BothBodies\")\n{% enddocs %}\n\n{% docs is_accepted %}\nWhether the post has been accepted to be displayed to the public on the website\n{% enddocs %}\n\n{% docs action_id %}\nInternal identifier of the action \n{% enddocs %}\n\n{% docs location %}\nLocation where the action takes place (e.g. US-NY)\n{% enddocs %}\n\n{% docs postal_code %}\nPostal code where the action takes place\n{% enddocs %}\n\n{% docs is_reportback %}\nWhether the post is a reportback. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs civic_action %}\nWhether the post is a Civic Action. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs scholarship_entry %}\nWhether the post is a Scholarship Entry. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs why_participated %}\nWhy the user participated in this action. Entered by the user.\n{% enddocs %}\n\n{% docs details %}\nDetails about the post. Contains contentfulId and other information (e.g. {\"campaignContentfulId\":\"6ATBgGEQEeJoIcxs1qbwaC\"})\n{% enddocs %}\n\n{% docs email %}\nEmail address of the user.\n{% enddocs %}\n\n{% docs source_details %}\nDetails about the source of the item. This is sometimes represented as a JSON object, and for other tables like Turbovote its represented as a string. (e.g. \"{\"contentful_id\":\"3CTLlXfbwtz1FOMpl31SKV\",\"utm_source\":\"scholarship_listing\",\"utm_medium\":\"referral\",\"utm_campaign\":\"fastweb_2019_08\"}\", newsletter_456)\n{% enddocs %}\n\n{% docs campaign_id %}\nThis is a unique identifier for the campaign\n{% enddocs %}\n\n{% docs campaign_run_id %}\nUnique identifier for the campaign run\n{% enddocs %}\n\n{% docs campaign_name %}\nName of the campaign\n{% enddocs %}\n\n{% docs campaign_cause %}\nCampaign cause (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_run_start_date %}\nStart date of the campaign run\n{% enddocs %}\n\n{% docs campaign_run_end_date %}\nEnd date of the campaign run\n{% enddocs %}\n\n{% docs campaign_created_date %}\nWhen the campaign was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs campaign_node_id %}\nInternal unique node id for the campaign\n{% enddocs %}\n\n{% docs campaign_node_id_title %}\nCampaign title\n{% enddocs %}\n\n{% docs campaign_run_id_title %}\nTitle of the campaign run\n{% enddocs %}\n\n{% docs campaign_action_type %}\nCampaign action type (eg. Make Something, Share Something)\n{% enddocs %}\n\n{% docs campaign_cause_type %}\nCampaign cause type (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_noun %}\nNoun applicable to the user's action\n{% enddocs %}\n\n{% docs campaign_verb %}\nVerb describing the action the user should take\n{% enddocs %}\n\n{% docs campaign_cta %}\nCampaign's call to action\n{% enddocs %}\n\n{% docs campaign_language %}\n\"Language in which the campaign is available\"\n{% enddocs %}\n\n{% docs agent_id %}\nIf set, the content type of the picture the member is sending us. Exp. image/png.\n{% enddocs %}\n\n{% docs attachment_content_type %}\nIf set, the handle of the Front agent this outbound support message is from.\n{% enddocs %}\n\n{% docs topic %}\nHolds a reference to the **last** campaign topic the member's conversation was in. This is useful to allow members to talk to Gambit and get quick responses (through Rivescript), without Gambit completely forgetting what state the member's interaction with a campaign topic was in.\n{% enddocs %}\n\n{% docs action_serial_id %}\nSerial id for the user's action. Depends on the source of the action. May be the bertly click id, sms message id, etc.\n{% enddocs %}\n\n{% docs channel %}\nChannel for the user's action. Depends on the source of the action. (e.g. web, sms)\n{% enddocs %}\n\n{% docs first_action_month %}\nMonth during which the user took their first action. \n{% enddocs %}\n\n{% docs event_id %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs event_source %}\nApplication source for event (eg. Phoenix, Northstar)\n{% enddocs %}\n\n{% docs event_datetime %}\nWhen the event occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs event_name %}\nName of the event (eg. northstar_submitted_register, https://docs.google.com/spreadsheets/d/1lm-fGrIm85nUTxSojqyCt_Ehmm1zEbViFhKpxcJiz1A/edit#gid=406441516)\n{% enddocs %}\n\n{% docs event_type %}\nType of event (pv = 'Page View', se = 'Structured Event')\n{% enddocs %}\n\n{% docs host %}\nURL host where event occurred (eg. www.dosomething.org or identity.dosomething.org)\n{% enddocs %}\n\n{% docs path %}\nURL path event occurred at (eg. /login or /us/campaigns/huddle-for-heroes)\n{% enddocs %}\n\n{% docs query_parameters %}\nOptional query parameters for the request (eg. query=huddle)\n{% enddocs %}\n\n{% docs se_category %}\nCategory of event (eg. focused_field, authentication) - Custom structured event\n{% enddocs %}\n\n{% docs se_action %}\nAction performed / event name (eg. form_submitted, action_failed) - Custom structured event\n{% enddocs %}\n\n{% docs se_label %}\nThe object of the action (eg. first_name, register, voter_reg_status) - Custom structured event\n{% enddocs %}\n\n{% docs session_id %}\nUnique identifier of the user's session\n{% enddocs %}\n\n{% docs session_counter %}\nHow many sessions a user has started\n{% enddocs %}\n\n{% docs browser_size %}\nWhich type of browser a user is using (eg. Mobile, Desktop)\n{% enddocs %}\n\n{% docs northstar_id %}\nThe Northstar ID of the user who generated the event\n{% enddocs %}\n\n{% docs device_id %}\nID of the device used\n{% enddocs %}\n\n{% docs referrer_host %}\nURL host of the referring site (eg. google.com)\n{% enddocs %}\n\n{% docs referrer_path %}\nURL path from referring site (eg. /10-stats-on-teen-drug-and-alcohol-use/)\n{% enddocs %}\n\n{% docs referrer_source %}\nReferrer source name (eg. Google, Facebook)\n{% enddocs %}\n\n{% docs utm_source %}\nTracks where the traffic is coming from. (eg. scholarship_listing, Facebook)\n{% enddocs %}\n\n{% docs utm_medium %}\nHow the traffic got to the platform (eg. referral, CPC)\n{% enddocs %}\n\n{% docs utm_campaign %}\nTracks which campaign the traffic was generated by. Shows up in Google Analytics as Campaign Name (eg. editorial_newsletter)\n{% enddocs %}\n\n{% docs url %}\nURL of campaign (eg. https://dosome.click/nyn5m7)\n{% enddocs %}\n\n{% docs modal_type %}\nNULL or SURVEY_MODAL\n{% enddocs %}\n\n{% docs landing_datetime %}\nWhen the session started in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs ending_datetime %}\nWhen the session ended in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs session_duration_seconds %}\nSession duration in seconds\n{% enddocs %}\n\n{% docs num_pages_views %}\nNumber of pages viewed in session\n{% enddocs %}\n\n{% docs landing_page %}\nFirst page the user viewed in the session (eg. /us/facts/11-facts-about-bp-oil-spill)\n{% enddocs %}\n\n{% docs exit_page %}\n\"Which page the user ended or exited their session from (eg. /us/campaigns/green-your-getaway)\"\n{% enddocs %}\n\n{% docs days_since_last_session %}\n\"Days since their last session.\"\n{% enddocs %}\n\n{% docs post_type %}\nType of post, (e.g. photo, voter-reg)\n{% enddocs %}\n\n{% docs noun %}\nNoun that corresponds to the item in the call to action that was delivered. (e.g. drawings, tweets)\n{% enddocs %}\n\n{% docs verb %}\nVerb corresponding to the action the user took. (e.g. shared, sent, taken)\n{% enddocs %}\n\n{% docs deleted_at %}\nDate time in UTC when a user deleted their post.\n{% enddocs %}\n\n{% docs _fivetran_deleted %}\nMarks rows that were deleted in the source table\n{% enddocs %}\n\n{% docs _fivetran_synced %}\n(UTC timestamp) keeps track of when each row was last successfully synced\n{% enddocs %}\n\n{% docs reportback %}\nWhether the post is a reportback \n{% enddocs %}\n\n{% docs active %}\nWhether the user is active \n{% enddocs %}\n\n{% docs anonymous %}\nWhether the user is anonymous when making the post \n{% enddocs %}\n\n{% docs callpower_campaign_id %}\nUnique ID corresponding to the Callpower campaign. Callpower allows users to record messages for their representatives.\n{% enddocs %}\n\n{% docs quiz %}\nWhether the post is a quiz \n{% enddocs %}\n\n{% docs action_type %}\nType of action the user took. (e.g. share-something, donate-something)\n{% enddocs %}\n\n{% docs online %}\nWhether the action is a online as opposed to IRL.\n{% enddocs %}\n\n{% docs time_commitment %}\nEstimated time required to do the action (e.g. 3.0+, <0.5)\n{% enddocs %}\n\n{% docs num_signups %}\nQuantity of campaign signups\n{% enddocs %}\n\n{% docs most_recent_signup %}\nTimestamp of the most recent signup in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs num_rbs %}\nQuantity of reportbacks for the user\n{% enddocs %}\n\n{% docs total_quantity %}\nTotal quantity of items in reportbacks\n{% enddocs %}\n\n{% docs most_recent_rb %}\nWhen the most recent reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs first_rb %}\nWhen the first reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs avg_time_betw_rbs %}\nCalculated average time between reportbacks.\n{% enddocs %}\n\n{% docs avg_days_next_action_after_rb %}\nCalculated average days until next action after reportback\n{% enddocs %}\n\n{% docs days_to_next_action_after_last_rb %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs most_recent_mam_action %}\nMost recent monthly active member qualifying action in UTC (eg. 2018-01-01 12:00:00).\n{% enddocs %}\n\n{% docs most_recent_email_open %}\nMost recent email open in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs most_recent_all_actions %}\nMost recent timestamp of any action in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs last_action_is_rb %}\nWhether the last action the user took was a reportback\n{% enddocs %}\n\n{% docs days_since_last_action %}\nDays since the user's last action\n{% enddocs %}\n\n{% docs time_to_first_rb %}\nHow much time after registering until the user's first reportback\n{% enddocs %}\n\n{% docs sms_unsubscribed_at %}\nTimestamp of when user unsubscribed from SMS messaging\n{% enddocs %}\n\n{% docs user_unsubscribed_at %}\nTimestamp of when user unsubscribed from email or sms\n{% enddocs %}\n\n{% docs voter_reg_acquisition %}\nWhether the user was an acquisition through voter registration efforts. \n{% enddocs %}\n\n{% docs last_logged_in %}\nDate time in UTC when user last logged in to Northstar\n{% enddocs %}\n\n{% docs last_accessed %}\nDate time in UTC when user last access the website\n{% enddocs %}\n\n{% docs last_messaged_at %}\nDate time in UTC when user was last sent a message via SMS or email\n{% enddocs %}\n\n{% docs facebook_id %}\nUser's facebook id\n{% enddocs %}\n\n{% docs mobile %}\nUsers's mobile phone number\n{% enddocs %}\n\n{% docs birthdate %}\nUser's birthdate\n{% enddocs %}\n\n{% docs first_name %}\nUser's first name\n{% enddocs %}\n\n{% docs last_name %}\nUser's last name\n{% enddocs %}\n\n{% docs voter_registration_status %}\nUser's registration status. (e.g. registration_complete, confirmed, uncertain) \n{% enddocs %}\n\n{% docs finish_with_state %}\nIf the registrant was eligible to use and passed through to complete their registration with their state\u2019s OVR system, it will be indicated in this field (direct quote from Rock-The-Vote documentation). Yes/No value in field.\n{% enddocs %}\n\n{% docs reportback_volume %}\nThis field returns 1 if non voter-reg action, since campaigns team only counts those a 1 reportback. If voter-reg action, we want to count quantity of post as number of registered voters.\n{% enddocs %}\n\n{% docs address_street_1 %}\nFirst line of user's street address\n{% enddocs %}\n\n{% docs address_street_2 %}\nSecond line of user's street address\n{% enddocs %}\n\n{% docs city %}\nUser's city\n{% enddocs %}\n\n{% docs state %}\nUser's state\n{% enddocs %}\n\n{% docs country %}\nUser's country\n{% enddocs %}\n\n{% docs language %}\nUser's language\n{% enddocs %}\n\n{% docs cio_status %}\nStatus of user from CIO. (e.g. customer_subscribed, customer_unsubscribed)\n{% enddocs %}\n\n{% docs cio_status_timestamp %}\nTimestamp when users's status was updated.\n{% enddocs %}\n\n{% docs sms_status %}\nCurrent SMS status. (e.g. undeliverable, unknown)\n{% enddocs %}\n\n{% docs source_detail %}\nDetails of the origin of the user. (e.g. tell_a_friend, other, opt_in_path/197981)\n{% enddocs %}\n\n{% docs badges %}\nWhether the user has any badges. \n{% enddocs %}\n\n{% docs refer_friends %}\nWhether the user is a part of the refer a friend campaign. \n{% enddocs %}\n\n{% docs subscribed_member %}\nWhether the user is subscribed. \n{% enddocs %}\n\n{% docs last_updated_at %}\nTimestamp when users's was updated.\n{% enddocs %}\n\n{% docs school_id %}\nUnique identifier for the user's school. This info comes from the school finder.\n{% enddocs %}\n\n{% docs newsletter_topic %}\nNewsletter topic. (e.g. community, lifestyle)\n{% enddocs %}\n\n{% docs user_agent %}\nFull user agent string for a user's browser (e.g. \"Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:24.0) Gecko/20100101 Firefox/24.0\")\n{% enddocs %}\n\n{% docs drupal_id %}\nOld Drupal user ID\n{% enddocs %}\n\n{% docs campaigns %}\nCampaigns a user is signed up for.\n{% enddocs %}\n\n{% docs audit %}\nA very useful field with data containing information about changes to a user, e.g. timestamps when the user subscribed and unsubscribed.\n{% enddocs %}\n\n{% docs voting_plan_status %}\nThe indication of the user's plan to vote, e.g. voting, not_voting, cant_vote\n{% enddocs %}\n\n{% docs voting_plan_time_of_day %}\nThe time of day when the user plans to vote, e.g morning, afternoon, evening\n{% enddocs %}\n\n{% docs voting_plan_method_of_transport %}\nHow the user plans to get to their polling place. e.g. walk, drive\n{% enddocs %}\n\n{% docs voting_plan_attending_with %}\nWith Whom the user plans to go voting, e.g. family, friends, alone\n{% enddocs %}\n\n{% docs feature_flags %}\nJSON containing info on features like badges and refer-a-friend.\n{% enddocs %}\n\n{% docs dbt_updated_at %}\nDBT snapshot table data. The updated_at timestamp of the source record when this snapshot row was inserted.\n{% enddocs %}\n\n{% docs dbt_scd_id %}\nDBT snapshot table data. A unique key generated for each snapshotted record.\n{% enddocs %}\n\n{% docs dbt_valid_from %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this snapshot row was first inserted\n{% enddocs %}\n\n{% docs dbt_valid_to %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this row row became invalidated.\n{% enddocs %}\n\n{% docs google_id %}\nUser's Google ID obtained from login.\n{% enddocs %}\n\n{% docs causes %}\nCauses in which a user is interested. e.g. animal welfare, education, mental_health\n{% enddocs %}\n\n{% docs email_subscription_status %}\nEmail subscription status of the user\n{% enddocs %}\n\n{% docs role %}\nUser's role, e.g. user, staff\n{% enddocs %}\n\n{% docs cio_backfilled %}\nWhether this user's data was backfilled from CIO\n{% enddocs %}\n\n{% docs addr_source %}\nWhere the user submitted their address, e.g. sms, GDPR\n{% enddocs %}\n\n{% docs email_subscription_topics %}\nEmail subscription topics correspond to categories in CIO in which the user is interested. e.g. lifestyle, community, scholarship\n{% enddocs %}\n\n{% docs sms_paused %}\nWhether we've paused sending sms messages to the user.\n{% enddocs %}\n\n\n\n\n", "name": "source_details", "unique_id": "ds_dbt.source_details", "block_contents": "Details about the source of the item. This is sometimes represented as a JSON object, and for other tables like Turbovote its represented as a string. (e.g. \"{\"contentful_id\":\"3CTLlXfbwtz1FOMpl31SKV\",\"utm_source\":\"scholarship_listing\",\"utm_medium\":\"referral\",\"utm_campaign\":\"fastweb_2019_08\"}\", newsletter_456)"}, "ds_dbt.campaign_id": {"root_path": "/Users/mrich/projects/quasar/quasar/dbt", "resource_type": "docs", "path": "schema.md", "original_file_path": "models/schema.md", "package_name": "ds_dbt", "file_contents": "\n{% docs click_id %}\nThis is a unique identifier for each click\n{% enddocs %}\n\n{% docs click_time %}\nTimestamp when user clicked.\n{% enddocs %}\n\n{% docs shortened %}\nShortened URL\n{% enddocs %}\n\n{% docs target_url %}\nURL where the user will be directed\n{% enddocs %}\n\n{% docs broadcast_id %}\nID of the broadcast that generated the shortened URL\n{% enddocs %}\n\n{% docs source %}\nSource of the URL (e.g. SMS, web), origin of the post (e.g. phoenix-web, phoenix-ashes, sms), or source where user was acquired. (e.g. sms, phoenix-next)\n{% enddocs %}\n\n{% docs interaction_type %}\nHow the user interacted with the link (e.g. preview, click)\n{% enddocs %}\n\n{% docs id %}\nUnique identifier for the post\n{% enddocs %}\n\n{% docs type %}\nType of post (e.g. photo)\n{% enddocs %}\n\n{% docs action %}\nPost action (e.g. DefendDreamers_Nov9_CongressCalls, GunViolence2018_Feb15_ParklandResponse)\n{% enddocs %}\n\n{% docs status %}\nPost status (e.g. accepted, rejected)\n{% enddocs %}\n\n{% docs quantity %}\nNumerical quantity of items specified in the call to action (e.g. 10, 200)\n{% enddocs %}\n\n{% docs source_bucket %}\nGrouping bucket for origin of the post (e.g. web, sms) \n{% enddocs %}\n\n{% docs created_at %}\nWhen the item was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs updated_at %}\nWhen the item was updated in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs text %}\nText of the post (e.g. \"Zoo animals and a super hero trying to help too!\") \n{% enddocs %}\n\n{% docs signup_id %}\nUnique identifier for the signup \n{% enddocs %}\n\n{% docs post_class %}\nClass of the signup (e.g. \"photo - default\", \"phone-call - DefendDreamers_Jan16_BothBodies\")\n{% enddocs %}\n\n{% docs is_accepted %}\nWhether the post has been accepted to be displayed to the public on the website\n{% enddocs %}\n\n{% docs action_id %}\nInternal identifier of the action \n{% enddocs %}\n\n{% docs location %}\nLocation where the action takes place (e.g. US-NY)\n{% enddocs %}\n\n{% docs postal_code %}\nPostal code where the action takes place\n{% enddocs %}\n\n{% docs is_reportback %}\nWhether the post is a reportback. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs civic_action %}\nWhether the post is a Civic Action. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs scholarship_entry %}\nWhether the post is a Scholarship Entry. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs why_participated %}\nWhy the user participated in this action. Entered by the user.\n{% enddocs %}\n\n{% docs details %}\nDetails about the post. Contains contentfulId and other information (e.g. {\"campaignContentfulId\":\"6ATBgGEQEeJoIcxs1qbwaC\"})\n{% enddocs %}\n\n{% docs email %}\nEmail address of the user.\n{% enddocs %}\n\n{% docs source_details %}\nDetails about the source of the item. This is sometimes represented as a JSON object, and for other tables like Turbovote its represented as a string. (e.g. \"{\"contentful_id\":\"3CTLlXfbwtz1FOMpl31SKV\",\"utm_source\":\"scholarship_listing\",\"utm_medium\":\"referral\",\"utm_campaign\":\"fastweb_2019_08\"}\", newsletter_456)\n{% enddocs %}\n\n{% docs campaign_id %}\nThis is a unique identifier for the campaign\n{% enddocs %}\n\n{% docs campaign_run_id %}\nUnique identifier for the campaign run\n{% enddocs %}\n\n{% docs campaign_name %}\nName of the campaign\n{% enddocs %}\n\n{% docs campaign_cause %}\nCampaign cause (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_run_start_date %}\nStart date of the campaign run\n{% enddocs %}\n\n{% docs campaign_run_end_date %}\nEnd date of the campaign run\n{% enddocs %}\n\n{% docs campaign_created_date %}\nWhen the campaign was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs campaign_node_id %}\nInternal unique node id for the campaign\n{% enddocs %}\n\n{% docs campaign_node_id_title %}\nCampaign title\n{% enddocs %}\n\n{% docs campaign_run_id_title %}\nTitle of the campaign run\n{% enddocs %}\n\n{% docs campaign_action_type %}\nCampaign action type (eg. Make Something, Share Something)\n{% enddocs %}\n\n{% docs campaign_cause_type %}\nCampaign cause type (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_noun %}\nNoun applicable to the user's action\n{% enddocs %}\n\n{% docs campaign_verb %}\nVerb describing the action the user should take\n{% enddocs %}\n\n{% docs campaign_cta %}\nCampaign's call to action\n{% enddocs %}\n\n{% docs campaign_language %}\n\"Language in which the campaign is available\"\n{% enddocs %}\n\n{% docs agent_id %}\nIf set, the content type of the picture the member is sending us. Exp. image/png.\n{% enddocs %}\n\n{% docs attachment_content_type %}\nIf set, the handle of the Front agent this outbound support message is from.\n{% enddocs %}\n\n{% docs topic %}\nHolds a reference to the **last** campaign topic the member's conversation was in. This is useful to allow members to talk to Gambit and get quick responses (through Rivescript), without Gambit completely forgetting what state the member's interaction with a campaign topic was in.\n{% enddocs %}\n\n{% docs action_serial_id %}\nSerial id for the user's action. Depends on the source of the action. May be the bertly click id, sms message id, etc.\n{% enddocs %}\n\n{% docs channel %}\nChannel for the user's action. Depends on the source of the action. (e.g. web, sms)\n{% enddocs %}\n\n{% docs first_action_month %}\nMonth during which the user took their first action. \n{% enddocs %}\n\n{% docs event_id %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs event_source %}\nApplication source for event (eg. Phoenix, Northstar)\n{% enddocs %}\n\n{% docs event_datetime %}\nWhen the event occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs event_name %}\nName of the event (eg. northstar_submitted_register, https://docs.google.com/spreadsheets/d/1lm-fGrIm85nUTxSojqyCt_Ehmm1zEbViFhKpxcJiz1A/edit#gid=406441516)\n{% enddocs %}\n\n{% docs event_type %}\nType of event (pv = 'Page View', se = 'Structured Event')\n{% enddocs %}\n\n{% docs host %}\nURL host where event occurred (eg. www.dosomething.org or identity.dosomething.org)\n{% enddocs %}\n\n{% docs path %}\nURL path event occurred at (eg. /login or /us/campaigns/huddle-for-heroes)\n{% enddocs %}\n\n{% docs query_parameters %}\nOptional query parameters for the request (eg. query=huddle)\n{% enddocs %}\n\n{% docs se_category %}\nCategory of event (eg. focused_field, authentication) - Custom structured event\n{% enddocs %}\n\n{% docs se_action %}\nAction performed / event name (eg. form_submitted, action_failed) - Custom structured event\n{% enddocs %}\n\n{% docs se_label %}\nThe object of the action (eg. first_name, register, voter_reg_status) - Custom structured event\n{% enddocs %}\n\n{% docs session_id %}\nUnique identifier of the user's session\n{% enddocs %}\n\n{% docs session_counter %}\nHow many sessions a user has started\n{% enddocs %}\n\n{% docs browser_size %}\nWhich type of browser a user is using (eg. Mobile, Desktop)\n{% enddocs %}\n\n{% docs northstar_id %}\nThe Northstar ID of the user who generated the event\n{% enddocs %}\n\n{% docs device_id %}\nID of the device used\n{% enddocs %}\n\n{% docs referrer_host %}\nURL host of the referring site (eg. google.com)\n{% enddocs %}\n\n{% docs referrer_path %}\nURL path from referring site (eg. /10-stats-on-teen-drug-and-alcohol-use/)\n{% enddocs %}\n\n{% docs referrer_source %}\nReferrer source name (eg. Google, Facebook)\n{% enddocs %}\n\n{% docs utm_source %}\nTracks where the traffic is coming from. (eg. scholarship_listing, Facebook)\n{% enddocs %}\n\n{% docs utm_medium %}\nHow the traffic got to the platform (eg. referral, CPC)\n{% enddocs %}\n\n{% docs utm_campaign %}\nTracks which campaign the traffic was generated by. Shows up in Google Analytics as Campaign Name (eg. editorial_newsletter)\n{% enddocs %}\n\n{% docs url %}\nURL of campaign (eg. https://dosome.click/nyn5m7)\n{% enddocs %}\n\n{% docs modal_type %}\nNULL or SURVEY_MODAL\n{% enddocs %}\n\n{% docs landing_datetime %}\nWhen the session started in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs ending_datetime %}\nWhen the session ended in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs session_duration_seconds %}\nSession duration in seconds\n{% enddocs %}\n\n{% docs num_pages_views %}\nNumber of pages viewed in session\n{% enddocs %}\n\n{% docs landing_page %}\nFirst page the user viewed in the session (eg. /us/facts/11-facts-about-bp-oil-spill)\n{% enddocs %}\n\n{% docs exit_page %}\n\"Which page the user ended or exited their session from (eg. /us/campaigns/green-your-getaway)\"\n{% enddocs %}\n\n{% docs days_since_last_session %}\n\"Days since their last session.\"\n{% enddocs %}\n\n{% docs post_type %}\nType of post, (e.g. photo, voter-reg)\n{% enddocs %}\n\n{% docs noun %}\nNoun that corresponds to the item in the call to action that was delivered. (e.g. drawings, tweets)\n{% enddocs %}\n\n{% docs verb %}\nVerb corresponding to the action the user took. (e.g. shared, sent, taken)\n{% enddocs %}\n\n{% docs deleted_at %}\nDate time in UTC when a user deleted their post.\n{% enddocs %}\n\n{% docs _fivetran_deleted %}\nMarks rows that were deleted in the source table\n{% enddocs %}\n\n{% docs _fivetran_synced %}\n(UTC timestamp) keeps track of when each row was last successfully synced\n{% enddocs %}\n\n{% docs reportback %}\nWhether the post is a reportback \n{% enddocs %}\n\n{% docs active %}\nWhether the user is active \n{% enddocs %}\n\n{% docs anonymous %}\nWhether the user is anonymous when making the post \n{% enddocs %}\n\n{% docs callpower_campaign_id %}\nUnique ID corresponding to the Callpower campaign. Callpower allows users to record messages for their representatives.\n{% enddocs %}\n\n{% docs quiz %}\nWhether the post is a quiz \n{% enddocs %}\n\n{% docs action_type %}\nType of action the user took. (e.g. share-something, donate-something)\n{% enddocs %}\n\n{% docs online %}\nWhether the action is a online as opposed to IRL.\n{% enddocs %}\n\n{% docs time_commitment %}\nEstimated time required to do the action (e.g. 3.0+, <0.5)\n{% enddocs %}\n\n{% docs num_signups %}\nQuantity of campaign signups\n{% enddocs %}\n\n{% docs most_recent_signup %}\nTimestamp of the most recent signup in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs num_rbs %}\nQuantity of reportbacks for the user\n{% enddocs %}\n\n{% docs total_quantity %}\nTotal quantity of items in reportbacks\n{% enddocs %}\n\n{% docs most_recent_rb %}\nWhen the most recent reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs first_rb %}\nWhen the first reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs avg_time_betw_rbs %}\nCalculated average time between reportbacks.\n{% enddocs %}\n\n{% docs avg_days_next_action_after_rb %}\nCalculated average days until next action after reportback\n{% enddocs %}\n\n{% docs days_to_next_action_after_last_rb %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs most_recent_mam_action %}\nMost recent monthly active member qualifying action in UTC (eg. 2018-01-01 12:00:00).\n{% enddocs %}\n\n{% docs most_recent_email_open %}\nMost recent email open in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs most_recent_all_actions %}\nMost recent timestamp of any action in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs last_action_is_rb %}\nWhether the last action the user took was a reportback\n{% enddocs %}\n\n{% docs days_since_last_action %}\nDays since the user's last action\n{% enddocs %}\n\n{% docs time_to_first_rb %}\nHow much time after registering until the user's first reportback\n{% enddocs %}\n\n{% docs sms_unsubscribed_at %}\nTimestamp of when user unsubscribed from SMS messaging\n{% enddocs %}\n\n{% docs user_unsubscribed_at %}\nTimestamp of when user unsubscribed from email or sms\n{% enddocs %}\n\n{% docs voter_reg_acquisition %}\nWhether the user was an acquisition through voter registration efforts. \n{% enddocs %}\n\n{% docs last_logged_in %}\nDate time in UTC when user last logged in to Northstar\n{% enddocs %}\n\n{% docs last_accessed %}\nDate time in UTC when user last access the website\n{% enddocs %}\n\n{% docs last_messaged_at %}\nDate time in UTC when user was last sent a message via SMS or email\n{% enddocs %}\n\n{% docs facebook_id %}\nUser's facebook id\n{% enddocs %}\n\n{% docs mobile %}\nUsers's mobile phone number\n{% enddocs %}\n\n{% docs birthdate %}\nUser's birthdate\n{% enddocs %}\n\n{% docs first_name %}\nUser's first name\n{% enddocs %}\n\n{% docs last_name %}\nUser's last name\n{% enddocs %}\n\n{% docs voter_registration_status %}\nUser's registration status. (e.g. registration_complete, confirmed, uncertain) \n{% enddocs %}\n\n{% docs finish_with_state %}\nIf the registrant was eligible to use and passed through to complete their registration with their state\u2019s OVR system, it will be indicated in this field (direct quote from Rock-The-Vote documentation). Yes/No value in field.\n{% enddocs %}\n\n{% docs reportback_volume %}\nThis field returns 1 if non voter-reg action, since campaigns team only counts those a 1 reportback. If voter-reg action, we want to count quantity of post as number of registered voters.\n{% enddocs %}\n\n{% docs address_street_1 %}\nFirst line of user's street address\n{% enddocs %}\n\n{% docs address_street_2 %}\nSecond line of user's street address\n{% enddocs %}\n\n{% docs city %}\nUser's city\n{% enddocs %}\n\n{% docs state %}\nUser's state\n{% enddocs %}\n\n{% docs country %}\nUser's country\n{% enddocs %}\n\n{% docs language %}\nUser's language\n{% enddocs %}\n\n{% docs cio_status %}\nStatus of user from CIO. (e.g. customer_subscribed, customer_unsubscribed)\n{% enddocs %}\n\n{% docs cio_status_timestamp %}\nTimestamp when users's status was updated.\n{% enddocs %}\n\n{% docs sms_status %}\nCurrent SMS status. (e.g. undeliverable, unknown)\n{% enddocs %}\n\n{% docs source_detail %}\nDetails of the origin of the user. (e.g. tell_a_friend, other, opt_in_path/197981)\n{% enddocs %}\n\n{% docs badges %}\nWhether the user has any badges. \n{% enddocs %}\n\n{% docs refer_friends %}\nWhether the user is a part of the refer a friend campaign. \n{% enddocs %}\n\n{% docs subscribed_member %}\nWhether the user is subscribed. \n{% enddocs %}\n\n{% docs last_updated_at %}\nTimestamp when users's was updated.\n{% enddocs %}\n\n{% docs school_id %}\nUnique identifier for the user's school. This info comes from the school finder.\n{% enddocs %}\n\n{% docs newsletter_topic %}\nNewsletter topic. (e.g. community, lifestyle)\n{% enddocs %}\n\n{% docs user_agent %}\nFull user agent string for a user's browser (e.g. \"Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:24.0) Gecko/20100101 Firefox/24.0\")\n{% enddocs %}\n\n{% docs drupal_id %}\nOld Drupal user ID\n{% enddocs %}\n\n{% docs campaigns %}\nCampaigns a user is signed up for.\n{% enddocs %}\n\n{% docs audit %}\nA very useful field with data containing information about changes to a user, e.g. timestamps when the user subscribed and unsubscribed.\n{% enddocs %}\n\n{% docs voting_plan_status %}\nThe indication of the user's plan to vote, e.g. voting, not_voting, cant_vote\n{% enddocs %}\n\n{% docs voting_plan_time_of_day %}\nThe time of day when the user plans to vote, e.g morning, afternoon, evening\n{% enddocs %}\n\n{% docs voting_plan_method_of_transport %}\nHow the user plans to get to their polling place. e.g. walk, drive\n{% enddocs %}\n\n{% docs voting_plan_attending_with %}\nWith Whom the user plans to go voting, e.g. family, friends, alone\n{% enddocs %}\n\n{% docs feature_flags %}\nJSON containing info on features like badges and refer-a-friend.\n{% enddocs %}\n\n{% docs dbt_updated_at %}\nDBT snapshot table data. The updated_at timestamp of the source record when this snapshot row was inserted.\n{% enddocs %}\n\n{% docs dbt_scd_id %}\nDBT snapshot table data. A unique key generated for each snapshotted record.\n{% enddocs %}\n\n{% docs dbt_valid_from %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this snapshot row was first inserted\n{% enddocs %}\n\n{% docs dbt_valid_to %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this row row became invalidated.\n{% enddocs %}\n\n{% docs google_id %}\nUser's Google ID obtained from login.\n{% enddocs %}\n\n{% docs causes %}\nCauses in which a user is interested. e.g. animal welfare, education, mental_health\n{% enddocs %}\n\n{% docs email_subscription_status %}\nEmail subscription status of the user\n{% enddocs %}\n\n{% docs role %}\nUser's role, e.g. user, staff\n{% enddocs %}\n\n{% docs cio_backfilled %}\nWhether this user's data was backfilled from CIO\n{% enddocs %}\n\n{% docs addr_source %}\nWhere the user submitted their address, e.g. sms, GDPR\n{% enddocs %}\n\n{% docs email_subscription_topics %}\nEmail subscription topics correspond to categories in CIO in which the user is interested. e.g. lifestyle, community, scholarship\n{% enddocs %}\n\n{% docs sms_paused %}\nWhether we've paused sending sms messages to the user.\n{% enddocs %}\n\n\n\n\n", "name": "campaign_id", "unique_id": "ds_dbt.campaign_id", "block_contents": "This is a unique identifier for the campaign"}, "ds_dbt.campaign_run_id": {"root_path": "/Users/mrich/projects/quasar/quasar/dbt", "resource_type": "docs", "path": "schema.md", "original_file_path": "models/schema.md", "package_name": "ds_dbt", "file_contents": "\n{% docs click_id %}\nThis is a unique identifier for each click\n{% enddocs %}\n\n{% docs click_time %}\nTimestamp when user clicked.\n{% enddocs %}\n\n{% docs shortened %}\nShortened URL\n{% enddocs %}\n\n{% docs target_url %}\nURL where the user will be directed\n{% enddocs %}\n\n{% docs broadcast_id %}\nID of the broadcast that generated the shortened URL\n{% enddocs %}\n\n{% docs source %}\nSource of the URL (e.g. SMS, web), origin of the post (e.g. phoenix-web, phoenix-ashes, sms), or source where user was acquired. (e.g. sms, phoenix-next)\n{% enddocs %}\n\n{% docs interaction_type %}\nHow the user interacted with the link (e.g. preview, click)\n{% enddocs %}\n\n{% docs id %}\nUnique identifier for the post\n{% enddocs %}\n\n{% docs type %}\nType of post (e.g. photo)\n{% enddocs %}\n\n{% docs action %}\nPost action (e.g. DefendDreamers_Nov9_CongressCalls, GunViolence2018_Feb15_ParklandResponse)\n{% enddocs %}\n\n{% docs status %}\nPost status (e.g. accepted, rejected)\n{% enddocs %}\n\n{% docs quantity %}\nNumerical quantity of items specified in the call to action (e.g. 10, 200)\n{% enddocs %}\n\n{% docs source_bucket %}\nGrouping bucket for origin of the post (e.g. web, sms) \n{% enddocs %}\n\n{% docs created_at %}\nWhen the item was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs updated_at %}\nWhen the item was updated in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs text %}\nText of the post (e.g. \"Zoo animals and a super hero trying to help too!\") \n{% enddocs %}\n\n{% docs signup_id %}\nUnique identifier for the signup \n{% enddocs %}\n\n{% docs post_class %}\nClass of the signup (e.g. \"photo - default\", \"phone-call - DefendDreamers_Jan16_BothBodies\")\n{% enddocs %}\n\n{% docs is_accepted %}\nWhether the post has been accepted to be displayed to the public on the website\n{% enddocs %}\n\n{% docs action_id %}\nInternal identifier of the action \n{% enddocs %}\n\n{% docs location %}\nLocation where the action takes place (e.g. US-NY)\n{% enddocs %}\n\n{% docs postal_code %}\nPostal code where the action takes place\n{% enddocs %}\n\n{% docs is_reportback %}\nWhether the post is a reportback. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs civic_action %}\nWhether the post is a Civic Action. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs scholarship_entry %}\nWhether the post is a Scholarship Entry. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs why_participated %}\nWhy the user participated in this action. Entered by the user.\n{% enddocs %}\n\n{% docs details %}\nDetails about the post. Contains contentfulId and other information (e.g. {\"campaignContentfulId\":\"6ATBgGEQEeJoIcxs1qbwaC\"})\n{% enddocs %}\n\n{% docs email %}\nEmail address of the user.\n{% enddocs %}\n\n{% docs source_details %}\nDetails about the source of the item. This is sometimes represented as a JSON object, and for other tables like Turbovote its represented as a string. (e.g. \"{\"contentful_id\":\"3CTLlXfbwtz1FOMpl31SKV\",\"utm_source\":\"scholarship_listing\",\"utm_medium\":\"referral\",\"utm_campaign\":\"fastweb_2019_08\"}\", newsletter_456)\n{% enddocs %}\n\n{% docs campaign_id %}\nThis is a unique identifier for the campaign\n{% enddocs %}\n\n{% docs campaign_run_id %}\nUnique identifier for the campaign run\n{% enddocs %}\n\n{% docs campaign_name %}\nName of the campaign\n{% enddocs %}\n\n{% docs campaign_cause %}\nCampaign cause (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_run_start_date %}\nStart date of the campaign run\n{% enddocs %}\n\n{% docs campaign_run_end_date %}\nEnd date of the campaign run\n{% enddocs %}\n\n{% docs campaign_created_date %}\nWhen the campaign was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs campaign_node_id %}\nInternal unique node id for the campaign\n{% enddocs %}\n\n{% docs campaign_node_id_title %}\nCampaign title\n{% enddocs %}\n\n{% docs campaign_run_id_title %}\nTitle of the campaign run\n{% enddocs %}\n\n{% docs campaign_action_type %}\nCampaign action type (eg. Make Something, Share Something)\n{% enddocs %}\n\n{% docs campaign_cause_type %}\nCampaign cause type (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_noun %}\nNoun applicable to the user's action\n{% enddocs %}\n\n{% docs campaign_verb %}\nVerb describing the action the user should take\n{% enddocs %}\n\n{% docs campaign_cta %}\nCampaign's call to action\n{% enddocs %}\n\n{% docs campaign_language %}\n\"Language in which the campaign is available\"\n{% enddocs %}\n\n{% docs agent_id %}\nIf set, the content type of the picture the member is sending us. Exp. image/png.\n{% enddocs %}\n\n{% docs attachment_content_type %}\nIf set, the handle of the Front agent this outbound support message is from.\n{% enddocs %}\n\n{% docs topic %}\nHolds a reference to the **last** campaign topic the member's conversation was in. This is useful to allow members to talk to Gambit and get quick responses (through Rivescript), without Gambit completely forgetting what state the member's interaction with a campaign topic was in.\n{% enddocs %}\n\n{% docs action_serial_id %}\nSerial id for the user's action. Depends on the source of the action. May be the bertly click id, sms message id, etc.\n{% enddocs %}\n\n{% docs channel %}\nChannel for the user's action. Depends on the source of the action. (e.g. web, sms)\n{% enddocs %}\n\n{% docs first_action_month %}\nMonth during which the user took their first action. \n{% enddocs %}\n\n{% docs event_id %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs event_source %}\nApplication source for event (eg. Phoenix, Northstar)\n{% enddocs %}\n\n{% docs event_datetime %}\nWhen the event occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs event_name %}\nName of the event (eg. northstar_submitted_register, https://docs.google.com/spreadsheets/d/1lm-fGrIm85nUTxSojqyCt_Ehmm1zEbViFhKpxcJiz1A/edit#gid=406441516)\n{% enddocs %}\n\n{% docs event_type %}\nType of event (pv = 'Page View', se = 'Structured Event')\n{% enddocs %}\n\n{% docs host %}\nURL host where event occurred (eg. www.dosomething.org or identity.dosomething.org)\n{% enddocs %}\n\n{% docs path %}\nURL path event occurred at (eg. /login or /us/campaigns/huddle-for-heroes)\n{% enddocs %}\n\n{% docs query_parameters %}\nOptional query parameters for the request (eg. query=huddle)\n{% enddocs %}\n\n{% docs se_category %}\nCategory of event (eg. focused_field, authentication) - Custom structured event\n{% enddocs %}\n\n{% docs se_action %}\nAction performed / event name (eg. form_submitted, action_failed) - Custom structured event\n{% enddocs %}\n\n{% docs se_label %}\nThe object of the action (eg. first_name, register, voter_reg_status) - Custom structured event\n{% enddocs %}\n\n{% docs session_id %}\nUnique identifier of the user's session\n{% enddocs %}\n\n{% docs session_counter %}\nHow many sessions a user has started\n{% enddocs %}\n\n{% docs browser_size %}\nWhich type of browser a user is using (eg. Mobile, Desktop)\n{% enddocs %}\n\n{% docs northstar_id %}\nThe Northstar ID of the user who generated the event\n{% enddocs %}\n\n{% docs device_id %}\nID of the device used\n{% enddocs %}\n\n{% docs referrer_host %}\nURL host of the referring site (eg. google.com)\n{% enddocs %}\n\n{% docs referrer_path %}\nURL path from referring site (eg. /10-stats-on-teen-drug-and-alcohol-use/)\n{% enddocs %}\n\n{% docs referrer_source %}\nReferrer source name (eg. Google, Facebook)\n{% enddocs %}\n\n{% docs utm_source %}\nTracks where the traffic is coming from. (eg. scholarship_listing, Facebook)\n{% enddocs %}\n\n{% docs utm_medium %}\nHow the traffic got to the platform (eg. referral, CPC)\n{% enddocs %}\n\n{% docs utm_campaign %}\nTracks which campaign the traffic was generated by. Shows up in Google Analytics as Campaign Name (eg. editorial_newsletter)\n{% enddocs %}\n\n{% docs url %}\nURL of campaign (eg. https://dosome.click/nyn5m7)\n{% enddocs %}\n\n{% docs modal_type %}\nNULL or SURVEY_MODAL\n{% enddocs %}\n\n{% docs landing_datetime %}\nWhen the session started in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs ending_datetime %}\nWhen the session ended in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs session_duration_seconds %}\nSession duration in seconds\n{% enddocs %}\n\n{% docs num_pages_views %}\nNumber of pages viewed in session\n{% enddocs %}\n\n{% docs landing_page %}\nFirst page the user viewed in the session (eg. /us/facts/11-facts-about-bp-oil-spill)\n{% enddocs %}\n\n{% docs exit_page %}\n\"Which page the user ended or exited their session from (eg. /us/campaigns/green-your-getaway)\"\n{% enddocs %}\n\n{% docs days_since_last_session %}\n\"Days since their last session.\"\n{% enddocs %}\n\n{% docs post_type %}\nType of post, (e.g. photo, voter-reg)\n{% enddocs %}\n\n{% docs noun %}\nNoun that corresponds to the item in the call to action that was delivered. (e.g. drawings, tweets)\n{% enddocs %}\n\n{% docs verb %}\nVerb corresponding to the action the user took. (e.g. shared, sent, taken)\n{% enddocs %}\n\n{% docs deleted_at %}\nDate time in UTC when a user deleted their post.\n{% enddocs %}\n\n{% docs _fivetran_deleted %}\nMarks rows that were deleted in the source table\n{% enddocs %}\n\n{% docs _fivetran_synced %}\n(UTC timestamp) keeps track of when each row was last successfully synced\n{% enddocs %}\n\n{% docs reportback %}\nWhether the post is a reportback \n{% enddocs %}\n\n{% docs active %}\nWhether the user is active \n{% enddocs %}\n\n{% docs anonymous %}\nWhether the user is anonymous when making the post \n{% enddocs %}\n\n{% docs callpower_campaign_id %}\nUnique ID corresponding to the Callpower campaign. Callpower allows users to record messages for their representatives.\n{% enddocs %}\n\n{% docs quiz %}\nWhether the post is a quiz \n{% enddocs %}\n\n{% docs action_type %}\nType of action the user took. (e.g. share-something, donate-something)\n{% enddocs %}\n\n{% docs online %}\nWhether the action is a online as opposed to IRL.\n{% enddocs %}\n\n{% docs time_commitment %}\nEstimated time required to do the action (e.g. 3.0+, <0.5)\n{% enddocs %}\n\n{% docs num_signups %}\nQuantity of campaign signups\n{% enddocs %}\n\n{% docs most_recent_signup %}\nTimestamp of the most recent signup in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs num_rbs %}\nQuantity of reportbacks for the user\n{% enddocs %}\n\n{% docs total_quantity %}\nTotal quantity of items in reportbacks\n{% enddocs %}\n\n{% docs most_recent_rb %}\nWhen the most recent reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs first_rb %}\nWhen the first reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs avg_time_betw_rbs %}\nCalculated average time between reportbacks.\n{% enddocs %}\n\n{% docs avg_days_next_action_after_rb %}\nCalculated average days until next action after reportback\n{% enddocs %}\n\n{% docs days_to_next_action_after_last_rb %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs most_recent_mam_action %}\nMost recent monthly active member qualifying action in UTC (eg. 2018-01-01 12:00:00).\n{% enddocs %}\n\n{% docs most_recent_email_open %}\nMost recent email open in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs most_recent_all_actions %}\nMost recent timestamp of any action in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs last_action_is_rb %}\nWhether the last action the user took was a reportback\n{% enddocs %}\n\n{% docs days_since_last_action %}\nDays since the user's last action\n{% enddocs %}\n\n{% docs time_to_first_rb %}\nHow much time after registering until the user's first reportback\n{% enddocs %}\n\n{% docs sms_unsubscribed_at %}\nTimestamp of when user unsubscribed from SMS messaging\n{% enddocs %}\n\n{% docs user_unsubscribed_at %}\nTimestamp of when user unsubscribed from email or sms\n{% enddocs %}\n\n{% docs voter_reg_acquisition %}\nWhether the user was an acquisition through voter registration efforts. \n{% enddocs %}\n\n{% docs last_logged_in %}\nDate time in UTC when user last logged in to Northstar\n{% enddocs %}\n\n{% docs last_accessed %}\nDate time in UTC when user last access the website\n{% enddocs %}\n\n{% docs last_messaged_at %}\nDate time in UTC when user was last sent a message via SMS or email\n{% enddocs %}\n\n{% docs facebook_id %}\nUser's facebook id\n{% enddocs %}\n\n{% docs mobile %}\nUsers's mobile phone number\n{% enddocs %}\n\n{% docs birthdate %}\nUser's birthdate\n{% enddocs %}\n\n{% docs first_name %}\nUser's first name\n{% enddocs %}\n\n{% docs last_name %}\nUser's last name\n{% enddocs %}\n\n{% docs voter_registration_status %}\nUser's registration status. (e.g. registration_complete, confirmed, uncertain) \n{% enddocs %}\n\n{% docs finish_with_state %}\nIf the registrant was eligible to use and passed through to complete their registration with their state\u2019s OVR system, it will be indicated in this field (direct quote from Rock-The-Vote documentation). Yes/No value in field.\n{% enddocs %}\n\n{% docs reportback_volume %}\nThis field returns 1 if non voter-reg action, since campaigns team only counts those a 1 reportback. If voter-reg action, we want to count quantity of post as number of registered voters.\n{% enddocs %}\n\n{% docs address_street_1 %}\nFirst line of user's street address\n{% enddocs %}\n\n{% docs address_street_2 %}\nSecond line of user's street address\n{% enddocs %}\n\n{% docs city %}\nUser's city\n{% enddocs %}\n\n{% docs state %}\nUser's state\n{% enddocs %}\n\n{% docs country %}\nUser's country\n{% enddocs %}\n\n{% docs language %}\nUser's language\n{% enddocs %}\n\n{% docs cio_status %}\nStatus of user from CIO. (e.g. customer_subscribed, customer_unsubscribed)\n{% enddocs %}\n\n{% docs cio_status_timestamp %}\nTimestamp when users's status was updated.\n{% enddocs %}\n\n{% docs sms_status %}\nCurrent SMS status. (e.g. undeliverable, unknown)\n{% enddocs %}\n\n{% docs source_detail %}\nDetails of the origin of the user. (e.g. tell_a_friend, other, opt_in_path/197981)\n{% enddocs %}\n\n{% docs badges %}\nWhether the user has any badges. \n{% enddocs %}\n\n{% docs refer_friends %}\nWhether the user is a part of the refer a friend campaign. \n{% enddocs %}\n\n{% docs subscribed_member %}\nWhether the user is subscribed. \n{% enddocs %}\n\n{% docs last_updated_at %}\nTimestamp when users's was updated.\n{% enddocs %}\n\n{% docs school_id %}\nUnique identifier for the user's school. This info comes from the school finder.\n{% enddocs %}\n\n{% docs newsletter_topic %}\nNewsletter topic. (e.g. community, lifestyle)\n{% enddocs %}\n\n{% docs user_agent %}\nFull user agent string for a user's browser (e.g. \"Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:24.0) Gecko/20100101 Firefox/24.0\")\n{% enddocs %}\n\n{% docs drupal_id %}\nOld Drupal user ID\n{% enddocs %}\n\n{% docs campaigns %}\nCampaigns a user is signed up for.\n{% enddocs %}\n\n{% docs audit %}\nA very useful field with data containing information about changes to a user, e.g. timestamps when the user subscribed and unsubscribed.\n{% enddocs %}\n\n{% docs voting_plan_status %}\nThe indication of the user's plan to vote, e.g. voting, not_voting, cant_vote\n{% enddocs %}\n\n{% docs voting_plan_time_of_day %}\nThe time of day when the user plans to vote, e.g morning, afternoon, evening\n{% enddocs %}\n\n{% docs voting_plan_method_of_transport %}\nHow the user plans to get to their polling place. e.g. walk, drive\n{% enddocs %}\n\n{% docs voting_plan_attending_with %}\nWith Whom the user plans to go voting, e.g. family, friends, alone\n{% enddocs %}\n\n{% docs feature_flags %}\nJSON containing info on features like badges and refer-a-friend.\n{% enddocs %}\n\n{% docs dbt_updated_at %}\nDBT snapshot table data. The updated_at timestamp of the source record when this snapshot row was inserted.\n{% enddocs %}\n\n{% docs dbt_scd_id %}\nDBT snapshot table data. A unique key generated for each snapshotted record.\n{% enddocs %}\n\n{% docs dbt_valid_from %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this snapshot row was first inserted\n{% enddocs %}\n\n{% docs dbt_valid_to %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this row row became invalidated.\n{% enddocs %}\n\n{% docs google_id %}\nUser's Google ID obtained from login.\n{% enddocs %}\n\n{% docs causes %}\nCauses in which a user is interested. e.g. animal welfare, education, mental_health\n{% enddocs %}\n\n{% docs email_subscription_status %}\nEmail subscription status of the user\n{% enddocs %}\n\n{% docs role %}\nUser's role, e.g. user, staff\n{% enddocs %}\n\n{% docs cio_backfilled %}\nWhether this user's data was backfilled from CIO\n{% enddocs %}\n\n{% docs addr_source %}\nWhere the user submitted their address, e.g. sms, GDPR\n{% enddocs %}\n\n{% docs email_subscription_topics %}\nEmail subscription topics correspond to categories in CIO in which the user is interested. e.g. lifestyle, community, scholarship\n{% enddocs %}\n\n{% docs sms_paused %}\nWhether we've paused sending sms messages to the user.\n{% enddocs %}\n\n\n\n\n", "name": "campaign_run_id", "unique_id": "ds_dbt.campaign_run_id", "block_contents": "Unique identifier for the campaign run"}, "ds_dbt.campaign_name": {"root_path": "/Users/mrich/projects/quasar/quasar/dbt", "resource_type": "docs", "path": "schema.md", "original_file_path": "models/schema.md", "package_name": "ds_dbt", "file_contents": "\n{% docs click_id %}\nThis is a unique identifier for each click\n{% enddocs %}\n\n{% docs click_time %}\nTimestamp when user clicked.\n{% enddocs %}\n\n{% docs shortened %}\nShortened URL\n{% enddocs %}\n\n{% docs target_url %}\nURL where the user will be directed\n{% enddocs %}\n\n{% docs broadcast_id %}\nID of the broadcast that generated the shortened URL\n{% enddocs %}\n\n{% docs source %}\nSource of the URL (e.g. SMS, web), origin of the post (e.g. phoenix-web, phoenix-ashes, sms), or source where user was acquired. (e.g. sms, phoenix-next)\n{% enddocs %}\n\n{% docs interaction_type %}\nHow the user interacted with the link (e.g. preview, click)\n{% enddocs %}\n\n{% docs id %}\nUnique identifier for the post\n{% enddocs %}\n\n{% docs type %}\nType of post (e.g. photo)\n{% enddocs %}\n\n{% docs action %}\nPost action (e.g. DefendDreamers_Nov9_CongressCalls, GunViolence2018_Feb15_ParklandResponse)\n{% enddocs %}\n\n{% docs status %}\nPost status (e.g. accepted, rejected)\n{% enddocs %}\n\n{% docs quantity %}\nNumerical quantity of items specified in the call to action (e.g. 10, 200)\n{% enddocs %}\n\n{% docs source_bucket %}\nGrouping bucket for origin of the post (e.g. web, sms) \n{% enddocs %}\n\n{% docs created_at %}\nWhen the item was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs updated_at %}\nWhen the item was updated in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs text %}\nText of the post (e.g. \"Zoo animals and a super hero trying to help too!\") \n{% enddocs %}\n\n{% docs signup_id %}\nUnique identifier for the signup \n{% enddocs %}\n\n{% docs post_class %}\nClass of the signup (e.g. \"photo - default\", \"phone-call - DefendDreamers_Jan16_BothBodies\")\n{% enddocs %}\n\n{% docs is_accepted %}\nWhether the post has been accepted to be displayed to the public on the website\n{% enddocs %}\n\n{% docs action_id %}\nInternal identifier of the action \n{% enddocs %}\n\n{% docs location %}\nLocation where the action takes place (e.g. US-NY)\n{% enddocs %}\n\n{% docs postal_code %}\nPostal code where the action takes place\n{% enddocs %}\n\n{% docs is_reportback %}\nWhether the post is a reportback. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs civic_action %}\nWhether the post is a Civic Action. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs scholarship_entry %}\nWhether the post is a Scholarship Entry. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs why_participated %}\nWhy the user participated in this action. Entered by the user.\n{% enddocs %}\n\n{% docs details %}\nDetails about the post. Contains contentfulId and other information (e.g. {\"campaignContentfulId\":\"6ATBgGEQEeJoIcxs1qbwaC\"})\n{% enddocs %}\n\n{% docs email %}\nEmail address of the user.\n{% enddocs %}\n\n{% docs source_details %}\nDetails about the source of the item. This is sometimes represented as a JSON object, and for other tables like Turbovote its represented as a string. (e.g. \"{\"contentful_id\":\"3CTLlXfbwtz1FOMpl31SKV\",\"utm_source\":\"scholarship_listing\",\"utm_medium\":\"referral\",\"utm_campaign\":\"fastweb_2019_08\"}\", newsletter_456)\n{% enddocs %}\n\n{% docs campaign_id %}\nThis is a unique identifier for the campaign\n{% enddocs %}\n\n{% docs campaign_run_id %}\nUnique identifier for the campaign run\n{% enddocs %}\n\n{% docs campaign_name %}\nName of the campaign\n{% enddocs %}\n\n{% docs campaign_cause %}\nCampaign cause (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_run_start_date %}\nStart date of the campaign run\n{% enddocs %}\n\n{% docs campaign_run_end_date %}\nEnd date of the campaign run\n{% enddocs %}\n\n{% docs campaign_created_date %}\nWhen the campaign was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs campaign_node_id %}\nInternal unique node id for the campaign\n{% enddocs %}\n\n{% docs campaign_node_id_title %}\nCampaign title\n{% enddocs %}\n\n{% docs campaign_run_id_title %}\nTitle of the campaign run\n{% enddocs %}\n\n{% docs campaign_action_type %}\nCampaign action type (eg. Make Something, Share Something)\n{% enddocs %}\n\n{% docs campaign_cause_type %}\nCampaign cause type (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_noun %}\nNoun applicable to the user's action\n{% enddocs %}\n\n{% docs campaign_verb %}\nVerb describing the action the user should take\n{% enddocs %}\n\n{% docs campaign_cta %}\nCampaign's call to action\n{% enddocs %}\n\n{% docs campaign_language %}\n\"Language in which the campaign is available\"\n{% enddocs %}\n\n{% docs agent_id %}\nIf set, the content type of the picture the member is sending us. Exp. image/png.\n{% enddocs %}\n\n{% docs attachment_content_type %}\nIf set, the handle of the Front agent this outbound support message is from.\n{% enddocs %}\n\n{% docs topic %}\nHolds a reference to the **last** campaign topic the member's conversation was in. This is useful to allow members to talk to Gambit and get quick responses (through Rivescript), without Gambit completely forgetting what state the member's interaction with a campaign topic was in.\n{% enddocs %}\n\n{% docs action_serial_id %}\nSerial id for the user's action. Depends on the source of the action. May be the bertly click id, sms message id, etc.\n{% enddocs %}\n\n{% docs channel %}\nChannel for the user's action. Depends on the source of the action. (e.g. web, sms)\n{% enddocs %}\n\n{% docs first_action_month %}\nMonth during which the user took their first action. \n{% enddocs %}\n\n{% docs event_id %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs event_source %}\nApplication source for event (eg. Phoenix, Northstar)\n{% enddocs %}\n\n{% docs event_datetime %}\nWhen the event occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs event_name %}\nName of the event (eg. northstar_submitted_register, https://docs.google.com/spreadsheets/d/1lm-fGrIm85nUTxSojqyCt_Ehmm1zEbViFhKpxcJiz1A/edit#gid=406441516)\n{% enddocs %}\n\n{% docs event_type %}\nType of event (pv = 'Page View', se = 'Structured Event')\n{% enddocs %}\n\n{% docs host %}\nURL host where event occurred (eg. www.dosomething.org or identity.dosomething.org)\n{% enddocs %}\n\n{% docs path %}\nURL path event occurred at (eg. /login or /us/campaigns/huddle-for-heroes)\n{% enddocs %}\n\n{% docs query_parameters %}\nOptional query parameters for the request (eg. query=huddle)\n{% enddocs %}\n\n{% docs se_category %}\nCategory of event (eg. focused_field, authentication) - Custom structured event\n{% enddocs %}\n\n{% docs se_action %}\nAction performed / event name (eg. form_submitted, action_failed) - Custom structured event\n{% enddocs %}\n\n{% docs se_label %}\nThe object of the action (eg. first_name, register, voter_reg_status) - Custom structured event\n{% enddocs %}\n\n{% docs session_id %}\nUnique identifier of the user's session\n{% enddocs %}\n\n{% docs session_counter %}\nHow many sessions a user has started\n{% enddocs %}\n\n{% docs browser_size %}\nWhich type of browser a user is using (eg. Mobile, Desktop)\n{% enddocs %}\n\n{% docs northstar_id %}\nThe Northstar ID of the user who generated the event\n{% enddocs %}\n\n{% docs device_id %}\nID of the device used\n{% enddocs %}\n\n{% docs referrer_host %}\nURL host of the referring site (eg. google.com)\n{% enddocs %}\n\n{% docs referrer_path %}\nURL path from referring site (eg. /10-stats-on-teen-drug-and-alcohol-use/)\n{% enddocs %}\n\n{% docs referrer_source %}\nReferrer source name (eg. Google, Facebook)\n{% enddocs %}\n\n{% docs utm_source %}\nTracks where the traffic is coming from. (eg. scholarship_listing, Facebook)\n{% enddocs %}\n\n{% docs utm_medium %}\nHow the traffic got to the platform (eg. referral, CPC)\n{% enddocs %}\n\n{% docs utm_campaign %}\nTracks which campaign the traffic was generated by. Shows up in Google Analytics as Campaign Name (eg. editorial_newsletter)\n{% enddocs %}\n\n{% docs url %}\nURL of campaign (eg. https://dosome.click/nyn5m7)\n{% enddocs %}\n\n{% docs modal_type %}\nNULL or SURVEY_MODAL\n{% enddocs %}\n\n{% docs landing_datetime %}\nWhen the session started in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs ending_datetime %}\nWhen the session ended in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs session_duration_seconds %}\nSession duration in seconds\n{% enddocs %}\n\n{% docs num_pages_views %}\nNumber of pages viewed in session\n{% enddocs %}\n\n{% docs landing_page %}\nFirst page the user viewed in the session (eg. /us/facts/11-facts-about-bp-oil-spill)\n{% enddocs %}\n\n{% docs exit_page %}\n\"Which page the user ended or exited their session from (eg. /us/campaigns/green-your-getaway)\"\n{% enddocs %}\n\n{% docs days_since_last_session %}\n\"Days since their last session.\"\n{% enddocs %}\n\n{% docs post_type %}\nType of post, (e.g. photo, voter-reg)\n{% enddocs %}\n\n{% docs noun %}\nNoun that corresponds to the item in the call to action that was delivered. (e.g. drawings, tweets)\n{% enddocs %}\n\n{% docs verb %}\nVerb corresponding to the action the user took. (e.g. shared, sent, taken)\n{% enddocs %}\n\n{% docs deleted_at %}\nDate time in UTC when a user deleted their post.\n{% enddocs %}\n\n{% docs _fivetran_deleted %}\nMarks rows that were deleted in the source table\n{% enddocs %}\n\n{% docs _fivetran_synced %}\n(UTC timestamp) keeps track of when each row was last successfully synced\n{% enddocs %}\n\n{% docs reportback %}\nWhether the post is a reportback \n{% enddocs %}\n\n{% docs active %}\nWhether the user is active \n{% enddocs %}\n\n{% docs anonymous %}\nWhether the user is anonymous when making the post \n{% enddocs %}\n\n{% docs callpower_campaign_id %}\nUnique ID corresponding to the Callpower campaign. Callpower allows users to record messages for their representatives.\n{% enddocs %}\n\n{% docs quiz %}\nWhether the post is a quiz \n{% enddocs %}\n\n{% docs action_type %}\nType of action the user took. (e.g. share-something, donate-something)\n{% enddocs %}\n\n{% docs online %}\nWhether the action is a online as opposed to IRL.\n{% enddocs %}\n\n{% docs time_commitment %}\nEstimated time required to do the action (e.g. 3.0+, <0.5)\n{% enddocs %}\n\n{% docs num_signups %}\nQuantity of campaign signups\n{% enddocs %}\n\n{% docs most_recent_signup %}\nTimestamp of the most recent signup in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs num_rbs %}\nQuantity of reportbacks for the user\n{% enddocs %}\n\n{% docs total_quantity %}\nTotal quantity of items in reportbacks\n{% enddocs %}\n\n{% docs most_recent_rb %}\nWhen the most recent reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs first_rb %}\nWhen the first reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs avg_time_betw_rbs %}\nCalculated average time between reportbacks.\n{% enddocs %}\n\n{% docs avg_days_next_action_after_rb %}\nCalculated average days until next action after reportback\n{% enddocs %}\n\n{% docs days_to_next_action_after_last_rb %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs most_recent_mam_action %}\nMost recent monthly active member qualifying action in UTC (eg. 2018-01-01 12:00:00).\n{% enddocs %}\n\n{% docs most_recent_email_open %}\nMost recent email open in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs most_recent_all_actions %}\nMost recent timestamp of any action in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs last_action_is_rb %}\nWhether the last action the user took was a reportback\n{% enddocs %}\n\n{% docs days_since_last_action %}\nDays since the user's last action\n{% enddocs %}\n\n{% docs time_to_first_rb %}\nHow much time after registering until the user's first reportback\n{% enddocs %}\n\n{% docs sms_unsubscribed_at %}\nTimestamp of when user unsubscribed from SMS messaging\n{% enddocs %}\n\n{% docs user_unsubscribed_at %}\nTimestamp of when user unsubscribed from email or sms\n{% enddocs %}\n\n{% docs voter_reg_acquisition %}\nWhether the user was an acquisition through voter registration efforts. \n{% enddocs %}\n\n{% docs last_logged_in %}\nDate time in UTC when user last logged in to Northstar\n{% enddocs %}\n\n{% docs last_accessed %}\nDate time in UTC when user last access the website\n{% enddocs %}\n\n{% docs last_messaged_at %}\nDate time in UTC when user was last sent a message via SMS or email\n{% enddocs %}\n\n{% docs facebook_id %}\nUser's facebook id\n{% enddocs %}\n\n{% docs mobile %}\nUsers's mobile phone number\n{% enddocs %}\n\n{% docs birthdate %}\nUser's birthdate\n{% enddocs %}\n\n{% docs first_name %}\nUser's first name\n{% enddocs %}\n\n{% docs last_name %}\nUser's last name\n{% enddocs %}\n\n{% docs voter_registration_status %}\nUser's registration status. (e.g. registration_complete, confirmed, uncertain) \n{% enddocs %}\n\n{% docs finish_with_state %}\nIf the registrant was eligible to use and passed through to complete their registration with their state\u2019s OVR system, it will be indicated in this field (direct quote from Rock-The-Vote documentation). Yes/No value in field.\n{% enddocs %}\n\n{% docs reportback_volume %}\nThis field returns 1 if non voter-reg action, since campaigns team only counts those a 1 reportback. If voter-reg action, we want to count quantity of post as number of registered voters.\n{% enddocs %}\n\n{% docs address_street_1 %}\nFirst line of user's street address\n{% enddocs %}\n\n{% docs address_street_2 %}\nSecond line of user's street address\n{% enddocs %}\n\n{% docs city %}\nUser's city\n{% enddocs %}\n\n{% docs state %}\nUser's state\n{% enddocs %}\n\n{% docs country %}\nUser's country\n{% enddocs %}\n\n{% docs language %}\nUser's language\n{% enddocs %}\n\n{% docs cio_status %}\nStatus of user from CIO. (e.g. customer_subscribed, customer_unsubscribed)\n{% enddocs %}\n\n{% docs cio_status_timestamp %}\nTimestamp when users's status was updated.\n{% enddocs %}\n\n{% docs sms_status %}\nCurrent SMS status. (e.g. undeliverable, unknown)\n{% enddocs %}\n\n{% docs source_detail %}\nDetails of the origin of the user. (e.g. tell_a_friend, other, opt_in_path/197981)\n{% enddocs %}\n\n{% docs badges %}\nWhether the user has any badges. \n{% enddocs %}\n\n{% docs refer_friends %}\nWhether the user is a part of the refer a friend campaign. \n{% enddocs %}\n\n{% docs subscribed_member %}\nWhether the user is subscribed. \n{% enddocs %}\n\n{% docs last_updated_at %}\nTimestamp when users's was updated.\n{% enddocs %}\n\n{% docs school_id %}\nUnique identifier for the user's school. This info comes from the school finder.\n{% enddocs %}\n\n{% docs newsletter_topic %}\nNewsletter topic. (e.g. community, lifestyle)\n{% enddocs %}\n\n{% docs user_agent %}\nFull user agent string for a user's browser (e.g. \"Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:24.0) Gecko/20100101 Firefox/24.0\")\n{% enddocs %}\n\n{% docs drupal_id %}\nOld Drupal user ID\n{% enddocs %}\n\n{% docs campaigns %}\nCampaigns a user is signed up for.\n{% enddocs %}\n\n{% docs audit %}\nA very useful field with data containing information about changes to a user, e.g. timestamps when the user subscribed and unsubscribed.\n{% enddocs %}\n\n{% docs voting_plan_status %}\nThe indication of the user's plan to vote, e.g. voting, not_voting, cant_vote\n{% enddocs %}\n\n{% docs voting_plan_time_of_day %}\nThe time of day when the user plans to vote, e.g morning, afternoon, evening\n{% enddocs %}\n\n{% docs voting_plan_method_of_transport %}\nHow the user plans to get to their polling place. e.g. walk, drive\n{% enddocs %}\n\n{% docs voting_plan_attending_with %}\nWith Whom the user plans to go voting, e.g. family, friends, alone\n{% enddocs %}\n\n{% docs feature_flags %}\nJSON containing info on features like badges and refer-a-friend.\n{% enddocs %}\n\n{% docs dbt_updated_at %}\nDBT snapshot table data. The updated_at timestamp of the source record when this snapshot row was inserted.\n{% enddocs %}\n\n{% docs dbt_scd_id %}\nDBT snapshot table data. A unique key generated for each snapshotted record.\n{% enddocs %}\n\n{% docs dbt_valid_from %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this snapshot row was first inserted\n{% enddocs %}\n\n{% docs dbt_valid_to %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this row row became invalidated.\n{% enddocs %}\n\n{% docs google_id %}\nUser's Google ID obtained from login.\n{% enddocs %}\n\n{% docs causes %}\nCauses in which a user is interested. e.g. animal welfare, education, mental_health\n{% enddocs %}\n\n{% docs email_subscription_status %}\nEmail subscription status of the user\n{% enddocs %}\n\n{% docs role %}\nUser's role, e.g. user, staff\n{% enddocs %}\n\n{% docs cio_backfilled %}\nWhether this user's data was backfilled from CIO\n{% enddocs %}\n\n{% docs addr_source %}\nWhere the user submitted their address, e.g. sms, GDPR\n{% enddocs %}\n\n{% docs email_subscription_topics %}\nEmail subscription topics correspond to categories in CIO in which the user is interested. e.g. lifestyle, community, scholarship\n{% enddocs %}\n\n{% docs sms_paused %}\nWhether we've paused sending sms messages to the user.\n{% enddocs %}\n\n\n\n\n", "name": "campaign_name", "unique_id": "ds_dbt.campaign_name", "block_contents": "Name of the campaign"}, "ds_dbt.campaign_cause": {"root_path": "/Users/mrich/projects/quasar/quasar/dbt", "resource_type": "docs", "path": "schema.md", "original_file_path": "models/schema.md", "package_name": "ds_dbt", "file_contents": "\n{% docs click_id %}\nThis is a unique identifier for each click\n{% enddocs %}\n\n{% docs click_time %}\nTimestamp when user clicked.\n{% enddocs %}\n\n{% docs shortened %}\nShortened URL\n{% enddocs %}\n\n{% docs target_url %}\nURL where the user will be directed\n{% enddocs %}\n\n{% docs broadcast_id %}\nID of the broadcast that generated the shortened URL\n{% enddocs %}\n\n{% docs source %}\nSource of the URL (e.g. SMS, web), origin of the post (e.g. phoenix-web, phoenix-ashes, sms), or source where user was acquired. (e.g. sms, phoenix-next)\n{% enddocs %}\n\n{% docs interaction_type %}\nHow the user interacted with the link (e.g. preview, click)\n{% enddocs %}\n\n{% docs id %}\nUnique identifier for the post\n{% enddocs %}\n\n{% docs type %}\nType of post (e.g. photo)\n{% enddocs %}\n\n{% docs action %}\nPost action (e.g. DefendDreamers_Nov9_CongressCalls, GunViolence2018_Feb15_ParklandResponse)\n{% enddocs %}\n\n{% docs status %}\nPost status (e.g. accepted, rejected)\n{% enddocs %}\n\n{% docs quantity %}\nNumerical quantity of items specified in the call to action (e.g. 10, 200)\n{% enddocs %}\n\n{% docs source_bucket %}\nGrouping bucket for origin of the post (e.g. web, sms) \n{% enddocs %}\n\n{% docs created_at %}\nWhen the item was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs updated_at %}\nWhen the item was updated in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs text %}\nText of the post (e.g. \"Zoo animals and a super hero trying to help too!\") \n{% enddocs %}\n\n{% docs signup_id %}\nUnique identifier for the signup \n{% enddocs %}\n\n{% docs post_class %}\nClass of the signup (e.g. \"photo - default\", \"phone-call - DefendDreamers_Jan16_BothBodies\")\n{% enddocs %}\n\n{% docs is_accepted %}\nWhether the post has been accepted to be displayed to the public on the website\n{% enddocs %}\n\n{% docs action_id %}\nInternal identifier of the action \n{% enddocs %}\n\n{% docs location %}\nLocation where the action takes place (e.g. US-NY)\n{% enddocs %}\n\n{% docs postal_code %}\nPostal code where the action takes place\n{% enddocs %}\n\n{% docs is_reportback %}\nWhether the post is a reportback. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs civic_action %}\nWhether the post is a Civic Action. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs scholarship_entry %}\nWhether the post is a Scholarship Entry. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs why_participated %}\nWhy the user participated in this action. Entered by the user.\n{% enddocs %}\n\n{% docs details %}\nDetails about the post. Contains contentfulId and other information (e.g. {\"campaignContentfulId\":\"6ATBgGEQEeJoIcxs1qbwaC\"})\n{% enddocs %}\n\n{% docs email %}\nEmail address of the user.\n{% enddocs %}\n\n{% docs source_details %}\nDetails about the source of the item. This is sometimes represented as a JSON object, and for other tables like Turbovote its represented as a string. (e.g. \"{\"contentful_id\":\"3CTLlXfbwtz1FOMpl31SKV\",\"utm_source\":\"scholarship_listing\",\"utm_medium\":\"referral\",\"utm_campaign\":\"fastweb_2019_08\"}\", newsletter_456)\n{% enddocs %}\n\n{% docs campaign_id %}\nThis is a unique identifier for the campaign\n{% enddocs %}\n\n{% docs campaign_run_id %}\nUnique identifier for the campaign run\n{% enddocs %}\n\n{% docs campaign_name %}\nName of the campaign\n{% enddocs %}\n\n{% docs campaign_cause %}\nCampaign cause (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_run_start_date %}\nStart date of the campaign run\n{% enddocs %}\n\n{% docs campaign_run_end_date %}\nEnd date of the campaign run\n{% enddocs %}\n\n{% docs campaign_created_date %}\nWhen the campaign was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs campaign_node_id %}\nInternal unique node id for the campaign\n{% enddocs %}\n\n{% docs campaign_node_id_title %}\nCampaign title\n{% enddocs %}\n\n{% docs campaign_run_id_title %}\nTitle of the campaign run\n{% enddocs %}\n\n{% docs campaign_action_type %}\nCampaign action type (eg. Make Something, Share Something)\n{% enddocs %}\n\n{% docs campaign_cause_type %}\nCampaign cause type (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_noun %}\nNoun applicable to the user's action\n{% enddocs %}\n\n{% docs campaign_verb %}\nVerb describing the action the user should take\n{% enddocs %}\n\n{% docs campaign_cta %}\nCampaign's call to action\n{% enddocs %}\n\n{% docs campaign_language %}\n\"Language in which the campaign is available\"\n{% enddocs %}\n\n{% docs agent_id %}\nIf set, the content type of the picture the member is sending us. Exp. image/png.\n{% enddocs %}\n\n{% docs attachment_content_type %}\nIf set, the handle of the Front agent this outbound support message is from.\n{% enddocs %}\n\n{% docs topic %}\nHolds a reference to the **last** campaign topic the member's conversation was in. This is useful to allow members to talk to Gambit and get quick responses (through Rivescript), without Gambit completely forgetting what state the member's interaction with a campaign topic was in.\n{% enddocs %}\n\n{% docs action_serial_id %}\nSerial id for the user's action. Depends on the source of the action. May be the bertly click id, sms message id, etc.\n{% enddocs %}\n\n{% docs channel %}\nChannel for the user's action. Depends on the source of the action. (e.g. web, sms)\n{% enddocs %}\n\n{% docs first_action_month %}\nMonth during which the user took their first action. \n{% enddocs %}\n\n{% docs event_id %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs event_source %}\nApplication source for event (eg. Phoenix, Northstar)\n{% enddocs %}\n\n{% docs event_datetime %}\nWhen the event occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs event_name %}\nName of the event (eg. northstar_submitted_register, https://docs.google.com/spreadsheets/d/1lm-fGrIm85nUTxSojqyCt_Ehmm1zEbViFhKpxcJiz1A/edit#gid=406441516)\n{% enddocs %}\n\n{% docs event_type %}\nType of event (pv = 'Page View', se = 'Structured Event')\n{% enddocs %}\n\n{% docs host %}\nURL host where event occurred (eg. www.dosomething.org or identity.dosomething.org)\n{% enddocs %}\n\n{% docs path %}\nURL path event occurred at (eg. /login or /us/campaigns/huddle-for-heroes)\n{% enddocs %}\n\n{% docs query_parameters %}\nOptional query parameters for the request (eg. query=huddle)\n{% enddocs %}\n\n{% docs se_category %}\nCategory of event (eg. focused_field, authentication) - Custom structured event\n{% enddocs %}\n\n{% docs se_action %}\nAction performed / event name (eg. form_submitted, action_failed) - Custom structured event\n{% enddocs %}\n\n{% docs se_label %}\nThe object of the action (eg. first_name, register, voter_reg_status) - Custom structured event\n{% enddocs %}\n\n{% docs session_id %}\nUnique identifier of the user's session\n{% enddocs %}\n\n{% docs session_counter %}\nHow many sessions a user has started\n{% enddocs %}\n\n{% docs browser_size %}\nWhich type of browser a user is using (eg. Mobile, Desktop)\n{% enddocs %}\n\n{% docs northstar_id %}\nThe Northstar ID of the user who generated the event\n{% enddocs %}\n\n{% docs device_id %}\nID of the device used\n{% enddocs %}\n\n{% docs referrer_host %}\nURL host of the referring site (eg. google.com)\n{% enddocs %}\n\n{% docs referrer_path %}\nURL path from referring site (eg. /10-stats-on-teen-drug-and-alcohol-use/)\n{% enddocs %}\n\n{% docs referrer_source %}\nReferrer source name (eg. Google, Facebook)\n{% enddocs %}\n\n{% docs utm_source %}\nTracks where the traffic is coming from. (eg. scholarship_listing, Facebook)\n{% enddocs %}\n\n{% docs utm_medium %}\nHow the traffic got to the platform (eg. referral, CPC)\n{% enddocs %}\n\n{% docs utm_campaign %}\nTracks which campaign the traffic was generated by. Shows up in Google Analytics as Campaign Name (eg. editorial_newsletter)\n{% enddocs %}\n\n{% docs url %}\nURL of campaign (eg. https://dosome.click/nyn5m7)\n{% enddocs %}\n\n{% docs modal_type %}\nNULL or SURVEY_MODAL\n{% enddocs %}\n\n{% docs landing_datetime %}\nWhen the session started in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs ending_datetime %}\nWhen the session ended in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs session_duration_seconds %}\nSession duration in seconds\n{% enddocs %}\n\n{% docs num_pages_views %}\nNumber of pages viewed in session\n{% enddocs %}\n\n{% docs landing_page %}\nFirst page the user viewed in the session (eg. /us/facts/11-facts-about-bp-oil-spill)\n{% enddocs %}\n\n{% docs exit_page %}\n\"Which page the user ended or exited their session from (eg. /us/campaigns/green-your-getaway)\"\n{% enddocs %}\n\n{% docs days_since_last_session %}\n\"Days since their last session.\"\n{% enddocs %}\n\n{% docs post_type %}\nType of post, (e.g. photo, voter-reg)\n{% enddocs %}\n\n{% docs noun %}\nNoun that corresponds to the item in the call to action that was delivered. (e.g. drawings, tweets)\n{% enddocs %}\n\n{% docs verb %}\nVerb corresponding to the action the user took. (e.g. shared, sent, taken)\n{% enddocs %}\n\n{% docs deleted_at %}\nDate time in UTC when a user deleted their post.\n{% enddocs %}\n\n{% docs _fivetran_deleted %}\nMarks rows that were deleted in the source table\n{% enddocs %}\n\n{% docs _fivetran_synced %}\n(UTC timestamp) keeps track of when each row was last successfully synced\n{% enddocs %}\n\n{% docs reportback %}\nWhether the post is a reportback \n{% enddocs %}\n\n{% docs active %}\nWhether the user is active \n{% enddocs %}\n\n{% docs anonymous %}\nWhether the user is anonymous when making the post \n{% enddocs %}\n\n{% docs callpower_campaign_id %}\nUnique ID corresponding to the Callpower campaign. Callpower allows users to record messages for their representatives.\n{% enddocs %}\n\n{% docs quiz %}\nWhether the post is a quiz \n{% enddocs %}\n\n{% docs action_type %}\nType of action the user took. (e.g. share-something, donate-something)\n{% enddocs %}\n\n{% docs online %}\nWhether the action is a online as opposed to IRL.\n{% enddocs %}\n\n{% docs time_commitment %}\nEstimated time required to do the action (e.g. 3.0+, <0.5)\n{% enddocs %}\n\n{% docs num_signups %}\nQuantity of campaign signups\n{% enddocs %}\n\n{% docs most_recent_signup %}\nTimestamp of the most recent signup in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs num_rbs %}\nQuantity of reportbacks for the user\n{% enddocs %}\n\n{% docs total_quantity %}\nTotal quantity of items in reportbacks\n{% enddocs %}\n\n{% docs most_recent_rb %}\nWhen the most recent reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs first_rb %}\nWhen the first reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs avg_time_betw_rbs %}\nCalculated average time between reportbacks.\n{% enddocs %}\n\n{% docs avg_days_next_action_after_rb %}\nCalculated average days until next action after reportback\n{% enddocs %}\n\n{% docs days_to_next_action_after_last_rb %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs most_recent_mam_action %}\nMost recent monthly active member qualifying action in UTC (eg. 2018-01-01 12:00:00).\n{% enddocs %}\n\n{% docs most_recent_email_open %}\nMost recent email open in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs most_recent_all_actions %}\nMost recent timestamp of any action in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs last_action_is_rb %}\nWhether the last action the user took was a reportback\n{% enddocs %}\n\n{% docs days_since_last_action %}\nDays since the user's last action\n{% enddocs %}\n\n{% docs time_to_first_rb %}\nHow much time after registering until the user's first reportback\n{% enddocs %}\n\n{% docs sms_unsubscribed_at %}\nTimestamp of when user unsubscribed from SMS messaging\n{% enddocs %}\n\n{% docs user_unsubscribed_at %}\nTimestamp of when user unsubscribed from email or sms\n{% enddocs %}\n\n{% docs voter_reg_acquisition %}\nWhether the user was an acquisition through voter registration efforts. \n{% enddocs %}\n\n{% docs last_logged_in %}\nDate time in UTC when user last logged in to Northstar\n{% enddocs %}\n\n{% docs last_accessed %}\nDate time in UTC when user last access the website\n{% enddocs %}\n\n{% docs last_messaged_at %}\nDate time in UTC when user was last sent a message via SMS or email\n{% enddocs %}\n\n{% docs facebook_id %}\nUser's facebook id\n{% enddocs %}\n\n{% docs mobile %}\nUsers's mobile phone number\n{% enddocs %}\n\n{% docs birthdate %}\nUser's birthdate\n{% enddocs %}\n\n{% docs first_name %}\nUser's first name\n{% enddocs %}\n\n{% docs last_name %}\nUser's last name\n{% enddocs %}\n\n{% docs voter_registration_status %}\nUser's registration status. (e.g. registration_complete, confirmed, uncertain) \n{% enddocs %}\n\n{% docs finish_with_state %}\nIf the registrant was eligible to use and passed through to complete their registration with their state\u2019s OVR system, it will be indicated in this field (direct quote from Rock-The-Vote documentation). Yes/No value in field.\n{% enddocs %}\n\n{% docs reportback_volume %}\nThis field returns 1 if non voter-reg action, since campaigns team only counts those a 1 reportback. If voter-reg action, we want to count quantity of post as number of registered voters.\n{% enddocs %}\n\n{% docs address_street_1 %}\nFirst line of user's street address\n{% enddocs %}\n\n{% docs address_street_2 %}\nSecond line of user's street address\n{% enddocs %}\n\n{% docs city %}\nUser's city\n{% enddocs %}\n\n{% docs state %}\nUser's state\n{% enddocs %}\n\n{% docs country %}\nUser's country\n{% enddocs %}\n\n{% docs language %}\nUser's language\n{% enddocs %}\n\n{% docs cio_status %}\nStatus of user from CIO. (e.g. customer_subscribed, customer_unsubscribed)\n{% enddocs %}\n\n{% docs cio_status_timestamp %}\nTimestamp when users's status was updated.\n{% enddocs %}\n\n{% docs sms_status %}\nCurrent SMS status. (e.g. undeliverable, unknown)\n{% enddocs %}\n\n{% docs source_detail %}\nDetails of the origin of the user. (e.g. tell_a_friend, other, opt_in_path/197981)\n{% enddocs %}\n\n{% docs badges %}\nWhether the user has any badges. \n{% enddocs %}\n\n{% docs refer_friends %}\nWhether the user is a part of the refer a friend campaign. \n{% enddocs %}\n\n{% docs subscribed_member %}\nWhether the user is subscribed. \n{% enddocs %}\n\n{% docs last_updated_at %}\nTimestamp when users's was updated.\n{% enddocs %}\n\n{% docs school_id %}\nUnique identifier for the user's school. This info comes from the school finder.\n{% enddocs %}\n\n{% docs newsletter_topic %}\nNewsletter topic. (e.g. community, lifestyle)\n{% enddocs %}\n\n{% docs user_agent %}\nFull user agent string for a user's browser (e.g. \"Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:24.0) Gecko/20100101 Firefox/24.0\")\n{% enddocs %}\n\n{% docs drupal_id %}\nOld Drupal user ID\n{% enddocs %}\n\n{% docs campaigns %}\nCampaigns a user is signed up for.\n{% enddocs %}\n\n{% docs audit %}\nA very useful field with data containing information about changes to a user, e.g. timestamps when the user subscribed and unsubscribed.\n{% enddocs %}\n\n{% docs voting_plan_status %}\nThe indication of the user's plan to vote, e.g. voting, not_voting, cant_vote\n{% enddocs %}\n\n{% docs voting_plan_time_of_day %}\nThe time of day when the user plans to vote, e.g morning, afternoon, evening\n{% enddocs %}\n\n{% docs voting_plan_method_of_transport %}\nHow the user plans to get to their polling place. e.g. walk, drive\n{% enddocs %}\n\n{% docs voting_plan_attending_with %}\nWith Whom the user plans to go voting, e.g. family, friends, alone\n{% enddocs %}\n\n{% docs feature_flags %}\nJSON containing info on features like badges and refer-a-friend.\n{% enddocs %}\n\n{% docs dbt_updated_at %}\nDBT snapshot table data. The updated_at timestamp of the source record when this snapshot row was inserted.\n{% enddocs %}\n\n{% docs dbt_scd_id %}\nDBT snapshot table data. A unique key generated for each snapshotted record.\n{% enddocs %}\n\n{% docs dbt_valid_from %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this snapshot row was first inserted\n{% enddocs %}\n\n{% docs dbt_valid_to %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this row row became invalidated.\n{% enddocs %}\n\n{% docs google_id %}\nUser's Google ID obtained from login.\n{% enddocs %}\n\n{% docs causes %}\nCauses in which a user is interested. e.g. animal welfare, education, mental_health\n{% enddocs %}\n\n{% docs email_subscription_status %}\nEmail subscription status of the user\n{% enddocs %}\n\n{% docs role %}\nUser's role, e.g. user, staff\n{% enddocs %}\n\n{% docs cio_backfilled %}\nWhether this user's data was backfilled from CIO\n{% enddocs %}\n\n{% docs addr_source %}\nWhere the user submitted their address, e.g. sms, GDPR\n{% enddocs %}\n\n{% docs email_subscription_topics %}\nEmail subscription topics correspond to categories in CIO in which the user is interested. e.g. lifestyle, community, scholarship\n{% enddocs %}\n\n{% docs sms_paused %}\nWhether we've paused sending sms messages to the user.\n{% enddocs %}\n\n\n\n\n", "name": "campaign_cause", "unique_id": "ds_dbt.campaign_cause", "block_contents": "Campaign cause (eg. Mental Health, Education)"}, "ds_dbt.campaign_run_start_date": {"root_path": "/Users/mrich/projects/quasar/quasar/dbt", "resource_type": "docs", "path": "schema.md", "original_file_path": "models/schema.md", "package_name": "ds_dbt", "file_contents": "\n{% docs click_id %}\nThis is a unique identifier for each click\n{% enddocs %}\n\n{% docs click_time %}\nTimestamp when user clicked.\n{% enddocs %}\n\n{% docs shortened %}\nShortened URL\n{% enddocs %}\n\n{% docs target_url %}\nURL where the user will be directed\n{% enddocs %}\n\n{% docs broadcast_id %}\nID of the broadcast that generated the shortened URL\n{% enddocs %}\n\n{% docs source %}\nSource of the URL (e.g. SMS, web), origin of the post (e.g. phoenix-web, phoenix-ashes, sms), or source where user was acquired. (e.g. sms, phoenix-next)\n{% enddocs %}\n\n{% docs interaction_type %}\nHow the user interacted with the link (e.g. preview, click)\n{% enddocs %}\n\n{% docs id %}\nUnique identifier for the post\n{% enddocs %}\n\n{% docs type %}\nType of post (e.g. photo)\n{% enddocs %}\n\n{% docs action %}\nPost action (e.g. DefendDreamers_Nov9_CongressCalls, GunViolence2018_Feb15_ParklandResponse)\n{% enddocs %}\n\n{% docs status %}\nPost status (e.g. accepted, rejected)\n{% enddocs %}\n\n{% docs quantity %}\nNumerical quantity of items specified in the call to action (e.g. 10, 200)\n{% enddocs %}\n\n{% docs source_bucket %}\nGrouping bucket for origin of the post (e.g. web, sms) \n{% enddocs %}\n\n{% docs created_at %}\nWhen the item was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs updated_at %}\nWhen the item was updated in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs text %}\nText of the post (e.g. \"Zoo animals and a super hero trying to help too!\") \n{% enddocs %}\n\n{% docs signup_id %}\nUnique identifier for the signup \n{% enddocs %}\n\n{% docs post_class %}\nClass of the signup (e.g. \"photo - default\", \"phone-call - DefendDreamers_Jan16_BothBodies\")\n{% enddocs %}\n\n{% docs is_accepted %}\nWhether the post has been accepted to be displayed to the public on the website\n{% enddocs %}\n\n{% docs action_id %}\nInternal identifier of the action \n{% enddocs %}\n\n{% docs location %}\nLocation where the action takes place (e.g. US-NY)\n{% enddocs %}\n\n{% docs postal_code %}\nPostal code where the action takes place\n{% enddocs %}\n\n{% docs is_reportback %}\nWhether the post is a reportback. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs civic_action %}\nWhether the post is a Civic Action. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs scholarship_entry %}\nWhether the post is a Scholarship Entry. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs why_participated %}\nWhy the user participated in this action. Entered by the user.\n{% enddocs %}\n\n{% docs details %}\nDetails about the post. Contains contentfulId and other information (e.g. {\"campaignContentfulId\":\"6ATBgGEQEeJoIcxs1qbwaC\"})\n{% enddocs %}\n\n{% docs email %}\nEmail address of the user.\n{% enddocs %}\n\n{% docs source_details %}\nDetails about the source of the item. This is sometimes represented as a JSON object, and for other tables like Turbovote its represented as a string. (e.g. \"{\"contentful_id\":\"3CTLlXfbwtz1FOMpl31SKV\",\"utm_source\":\"scholarship_listing\",\"utm_medium\":\"referral\",\"utm_campaign\":\"fastweb_2019_08\"}\", newsletter_456)\n{% enddocs %}\n\n{% docs campaign_id %}\nThis is a unique identifier for the campaign\n{% enddocs %}\n\n{% docs campaign_run_id %}\nUnique identifier for the campaign run\n{% enddocs %}\n\n{% docs campaign_name %}\nName of the campaign\n{% enddocs %}\n\n{% docs campaign_cause %}\nCampaign cause (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_run_start_date %}\nStart date of the campaign run\n{% enddocs %}\n\n{% docs campaign_run_end_date %}\nEnd date of the campaign run\n{% enddocs %}\n\n{% docs campaign_created_date %}\nWhen the campaign was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs campaign_node_id %}\nInternal unique node id for the campaign\n{% enddocs %}\n\n{% docs campaign_node_id_title %}\nCampaign title\n{% enddocs %}\n\n{% docs campaign_run_id_title %}\nTitle of the campaign run\n{% enddocs %}\n\n{% docs campaign_action_type %}\nCampaign action type (eg. Make Something, Share Something)\n{% enddocs %}\n\n{% docs campaign_cause_type %}\nCampaign cause type (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_noun %}\nNoun applicable to the user's action\n{% enddocs %}\n\n{% docs campaign_verb %}\nVerb describing the action the user should take\n{% enddocs %}\n\n{% docs campaign_cta %}\nCampaign's call to action\n{% enddocs %}\n\n{% docs campaign_language %}\n\"Language in which the campaign is available\"\n{% enddocs %}\n\n{% docs agent_id %}\nIf set, the content type of the picture the member is sending us. Exp. image/png.\n{% enddocs %}\n\n{% docs attachment_content_type %}\nIf set, the handle of the Front agent this outbound support message is from.\n{% enddocs %}\n\n{% docs topic %}\nHolds a reference to the **last** campaign topic the member's conversation was in. This is useful to allow members to talk to Gambit and get quick responses (through Rivescript), without Gambit completely forgetting what state the member's interaction with a campaign topic was in.\n{% enddocs %}\n\n{% docs action_serial_id %}\nSerial id for the user's action. Depends on the source of the action. May be the bertly click id, sms message id, etc.\n{% enddocs %}\n\n{% docs channel %}\nChannel for the user's action. Depends on the source of the action. (e.g. web, sms)\n{% enddocs %}\n\n{% docs first_action_month %}\nMonth during which the user took their first action. \n{% enddocs %}\n\n{% docs event_id %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs event_source %}\nApplication source for event (eg. Phoenix, Northstar)\n{% enddocs %}\n\n{% docs event_datetime %}\nWhen the event occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs event_name %}\nName of the event (eg. northstar_submitted_register, https://docs.google.com/spreadsheets/d/1lm-fGrIm85nUTxSojqyCt_Ehmm1zEbViFhKpxcJiz1A/edit#gid=406441516)\n{% enddocs %}\n\n{% docs event_type %}\nType of event (pv = 'Page View', se = 'Structured Event')\n{% enddocs %}\n\n{% docs host %}\nURL host where event occurred (eg. www.dosomething.org or identity.dosomething.org)\n{% enddocs %}\n\n{% docs path %}\nURL path event occurred at (eg. /login or /us/campaigns/huddle-for-heroes)\n{% enddocs %}\n\n{% docs query_parameters %}\nOptional query parameters for the request (eg. query=huddle)\n{% enddocs %}\n\n{% docs se_category %}\nCategory of event (eg. focused_field, authentication) - Custom structured event\n{% enddocs %}\n\n{% docs se_action %}\nAction performed / event name (eg. form_submitted, action_failed) - Custom structured event\n{% enddocs %}\n\n{% docs se_label %}\nThe object of the action (eg. first_name, register, voter_reg_status) - Custom structured event\n{% enddocs %}\n\n{% docs session_id %}\nUnique identifier of the user's session\n{% enddocs %}\n\n{% docs session_counter %}\nHow many sessions a user has started\n{% enddocs %}\n\n{% docs browser_size %}\nWhich type of browser a user is using (eg. Mobile, Desktop)\n{% enddocs %}\n\n{% docs northstar_id %}\nThe Northstar ID of the user who generated the event\n{% enddocs %}\n\n{% docs device_id %}\nID of the device used\n{% enddocs %}\n\n{% docs referrer_host %}\nURL host of the referring site (eg. google.com)\n{% enddocs %}\n\n{% docs referrer_path %}\nURL path from referring site (eg. /10-stats-on-teen-drug-and-alcohol-use/)\n{% enddocs %}\n\n{% docs referrer_source %}\nReferrer source name (eg. Google, Facebook)\n{% enddocs %}\n\n{% docs utm_source %}\nTracks where the traffic is coming from. (eg. scholarship_listing, Facebook)\n{% enddocs %}\n\n{% docs utm_medium %}\nHow the traffic got to the platform (eg. referral, CPC)\n{% enddocs %}\n\n{% docs utm_campaign %}\nTracks which campaign the traffic was generated by. Shows up in Google Analytics as Campaign Name (eg. editorial_newsletter)\n{% enddocs %}\n\n{% docs url %}\nURL of campaign (eg. https://dosome.click/nyn5m7)\n{% enddocs %}\n\n{% docs modal_type %}\nNULL or SURVEY_MODAL\n{% enddocs %}\n\n{% docs landing_datetime %}\nWhen the session started in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs ending_datetime %}\nWhen the session ended in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs session_duration_seconds %}\nSession duration in seconds\n{% enddocs %}\n\n{% docs num_pages_views %}\nNumber of pages viewed in session\n{% enddocs %}\n\n{% docs landing_page %}\nFirst page the user viewed in the session (eg. /us/facts/11-facts-about-bp-oil-spill)\n{% enddocs %}\n\n{% docs exit_page %}\n\"Which page the user ended or exited their session from (eg. /us/campaigns/green-your-getaway)\"\n{% enddocs %}\n\n{% docs days_since_last_session %}\n\"Days since their last session.\"\n{% enddocs %}\n\n{% docs post_type %}\nType of post, (e.g. photo, voter-reg)\n{% enddocs %}\n\n{% docs noun %}\nNoun that corresponds to the item in the call to action that was delivered. (e.g. drawings, tweets)\n{% enddocs %}\n\n{% docs verb %}\nVerb corresponding to the action the user took. (e.g. shared, sent, taken)\n{% enddocs %}\n\n{% docs deleted_at %}\nDate time in UTC when a user deleted their post.\n{% enddocs %}\n\n{% docs _fivetran_deleted %}\nMarks rows that were deleted in the source table\n{% enddocs %}\n\n{% docs _fivetran_synced %}\n(UTC timestamp) keeps track of when each row was last successfully synced\n{% enddocs %}\n\n{% docs reportback %}\nWhether the post is a reportback \n{% enddocs %}\n\n{% docs active %}\nWhether the user is active \n{% enddocs %}\n\n{% docs anonymous %}\nWhether the user is anonymous when making the post \n{% enddocs %}\n\n{% docs callpower_campaign_id %}\nUnique ID corresponding to the Callpower campaign. Callpower allows users to record messages for their representatives.\n{% enddocs %}\n\n{% docs quiz %}\nWhether the post is a quiz \n{% enddocs %}\n\n{% docs action_type %}\nType of action the user took. (e.g. share-something, donate-something)\n{% enddocs %}\n\n{% docs online %}\nWhether the action is a online as opposed to IRL.\n{% enddocs %}\n\n{% docs time_commitment %}\nEstimated time required to do the action (e.g. 3.0+, <0.5)\n{% enddocs %}\n\n{% docs num_signups %}\nQuantity of campaign signups\n{% enddocs %}\n\n{% docs most_recent_signup %}\nTimestamp of the most recent signup in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs num_rbs %}\nQuantity of reportbacks for the user\n{% enddocs %}\n\n{% docs total_quantity %}\nTotal quantity of items in reportbacks\n{% enddocs %}\n\n{% docs most_recent_rb %}\nWhen the most recent reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs first_rb %}\nWhen the first reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs avg_time_betw_rbs %}\nCalculated average time between reportbacks.\n{% enddocs %}\n\n{% docs avg_days_next_action_after_rb %}\nCalculated average days until next action after reportback\n{% enddocs %}\n\n{% docs days_to_next_action_after_last_rb %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs most_recent_mam_action %}\nMost recent monthly active member qualifying action in UTC (eg. 2018-01-01 12:00:00).\n{% enddocs %}\n\n{% docs most_recent_email_open %}\nMost recent email open in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs most_recent_all_actions %}\nMost recent timestamp of any action in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs last_action_is_rb %}\nWhether the last action the user took was a reportback\n{% enddocs %}\n\n{% docs days_since_last_action %}\nDays since the user's last action\n{% enddocs %}\n\n{% docs time_to_first_rb %}\nHow much time after registering until the user's first reportback\n{% enddocs %}\n\n{% docs sms_unsubscribed_at %}\nTimestamp of when user unsubscribed from SMS messaging\n{% enddocs %}\n\n{% docs user_unsubscribed_at %}\nTimestamp of when user unsubscribed from email or sms\n{% enddocs %}\n\n{% docs voter_reg_acquisition %}\nWhether the user was an acquisition through voter registration efforts. \n{% enddocs %}\n\n{% docs last_logged_in %}\nDate time in UTC when user last logged in to Northstar\n{% enddocs %}\n\n{% docs last_accessed %}\nDate time in UTC when user last access the website\n{% enddocs %}\n\n{% docs last_messaged_at %}\nDate time in UTC when user was last sent a message via SMS or email\n{% enddocs %}\n\n{% docs facebook_id %}\nUser's facebook id\n{% enddocs %}\n\n{% docs mobile %}\nUsers's mobile phone number\n{% enddocs %}\n\n{% docs birthdate %}\nUser's birthdate\n{% enddocs %}\n\n{% docs first_name %}\nUser's first name\n{% enddocs %}\n\n{% docs last_name %}\nUser's last name\n{% enddocs %}\n\n{% docs voter_registration_status %}\nUser's registration status. (e.g. registration_complete, confirmed, uncertain) \n{% enddocs %}\n\n{% docs finish_with_state %}\nIf the registrant was eligible to use and passed through to complete their registration with their state\u2019s OVR system, it will be indicated in this field (direct quote from Rock-The-Vote documentation). Yes/No value in field.\n{% enddocs %}\n\n{% docs reportback_volume %}\nThis field returns 1 if non voter-reg action, since campaigns team only counts those a 1 reportback. If voter-reg action, we want to count quantity of post as number of registered voters.\n{% enddocs %}\n\n{% docs address_street_1 %}\nFirst line of user's street address\n{% enddocs %}\n\n{% docs address_street_2 %}\nSecond line of user's street address\n{% enddocs %}\n\n{% docs city %}\nUser's city\n{% enddocs %}\n\n{% docs state %}\nUser's state\n{% enddocs %}\n\n{% docs country %}\nUser's country\n{% enddocs %}\n\n{% docs language %}\nUser's language\n{% enddocs %}\n\n{% docs cio_status %}\nStatus of user from CIO. (e.g. customer_subscribed, customer_unsubscribed)\n{% enddocs %}\n\n{% docs cio_status_timestamp %}\nTimestamp when users's status was updated.\n{% enddocs %}\n\n{% docs sms_status %}\nCurrent SMS status. (e.g. undeliverable, unknown)\n{% enddocs %}\n\n{% docs source_detail %}\nDetails of the origin of the user. (e.g. tell_a_friend, other, opt_in_path/197981)\n{% enddocs %}\n\n{% docs badges %}\nWhether the user has any badges. \n{% enddocs %}\n\n{% docs refer_friends %}\nWhether the user is a part of the refer a friend campaign. \n{% enddocs %}\n\n{% docs subscribed_member %}\nWhether the user is subscribed. \n{% enddocs %}\n\n{% docs last_updated_at %}\nTimestamp when users's was updated.\n{% enddocs %}\n\n{% docs school_id %}\nUnique identifier for the user's school. This info comes from the school finder.\n{% enddocs %}\n\n{% docs newsletter_topic %}\nNewsletter topic. (e.g. community, lifestyle)\n{% enddocs %}\n\n{% docs user_agent %}\nFull user agent string for a user's browser (e.g. \"Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:24.0) Gecko/20100101 Firefox/24.0\")\n{% enddocs %}\n\n{% docs drupal_id %}\nOld Drupal user ID\n{% enddocs %}\n\n{% docs campaigns %}\nCampaigns a user is signed up for.\n{% enddocs %}\n\n{% docs audit %}\nA very useful field with data containing information about changes to a user, e.g. timestamps when the user subscribed and unsubscribed.\n{% enddocs %}\n\n{% docs voting_plan_status %}\nThe indication of the user's plan to vote, e.g. voting, not_voting, cant_vote\n{% enddocs %}\n\n{% docs voting_plan_time_of_day %}\nThe time of day when the user plans to vote, e.g morning, afternoon, evening\n{% enddocs %}\n\n{% docs voting_plan_method_of_transport %}\nHow the user plans to get to their polling place. e.g. walk, drive\n{% enddocs %}\n\n{% docs voting_plan_attending_with %}\nWith Whom the user plans to go voting, e.g. family, friends, alone\n{% enddocs %}\n\n{% docs feature_flags %}\nJSON containing info on features like badges and refer-a-friend.\n{% enddocs %}\n\n{% docs dbt_updated_at %}\nDBT snapshot table data. The updated_at timestamp of the source record when this snapshot row was inserted.\n{% enddocs %}\n\n{% docs dbt_scd_id %}\nDBT snapshot table data. A unique key generated for each snapshotted record.\n{% enddocs %}\n\n{% docs dbt_valid_from %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this snapshot row was first inserted\n{% enddocs %}\n\n{% docs dbt_valid_to %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this row row became invalidated.\n{% enddocs %}\n\n{% docs google_id %}\nUser's Google ID obtained from login.\n{% enddocs %}\n\n{% docs causes %}\nCauses in which a user is interested. e.g. animal welfare, education, mental_health\n{% enddocs %}\n\n{% docs email_subscription_status %}\nEmail subscription status of the user\n{% enddocs %}\n\n{% docs role %}\nUser's role, e.g. user, staff\n{% enddocs %}\n\n{% docs cio_backfilled %}\nWhether this user's data was backfilled from CIO\n{% enddocs %}\n\n{% docs addr_source %}\nWhere the user submitted their address, e.g. sms, GDPR\n{% enddocs %}\n\n{% docs email_subscription_topics %}\nEmail subscription topics correspond to categories in CIO in which the user is interested. e.g. lifestyle, community, scholarship\n{% enddocs %}\n\n{% docs sms_paused %}\nWhether we've paused sending sms messages to the user.\n{% enddocs %}\n\n\n\n\n", "name": "campaign_run_start_date", "unique_id": "ds_dbt.campaign_run_start_date", "block_contents": "Start date of the campaign run"}, "ds_dbt.campaign_run_end_date": {"root_path": "/Users/mrich/projects/quasar/quasar/dbt", "resource_type": "docs", "path": "schema.md", "original_file_path": "models/schema.md", "package_name": "ds_dbt", "file_contents": "\n{% docs click_id %}\nThis is a unique identifier for each click\n{% enddocs %}\n\n{% docs click_time %}\nTimestamp when user clicked.\n{% enddocs %}\n\n{% docs shortened %}\nShortened URL\n{% enddocs %}\n\n{% docs target_url %}\nURL where the user will be directed\n{% enddocs %}\n\n{% docs broadcast_id %}\nID of the broadcast that generated the shortened URL\n{% enddocs %}\n\n{% docs source %}\nSource of the URL (e.g. SMS, web), origin of the post (e.g. phoenix-web, phoenix-ashes, sms), or source where user was acquired. (e.g. sms, phoenix-next)\n{% enddocs %}\n\n{% docs interaction_type %}\nHow the user interacted with the link (e.g. preview, click)\n{% enddocs %}\n\n{% docs id %}\nUnique identifier for the post\n{% enddocs %}\n\n{% docs type %}\nType of post (e.g. photo)\n{% enddocs %}\n\n{% docs action %}\nPost action (e.g. DefendDreamers_Nov9_CongressCalls, GunViolence2018_Feb15_ParklandResponse)\n{% enddocs %}\n\n{% docs status %}\nPost status (e.g. accepted, rejected)\n{% enddocs %}\n\n{% docs quantity %}\nNumerical quantity of items specified in the call to action (e.g. 10, 200)\n{% enddocs %}\n\n{% docs source_bucket %}\nGrouping bucket for origin of the post (e.g. web, sms) \n{% enddocs %}\n\n{% docs created_at %}\nWhen the item was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs updated_at %}\nWhen the item was updated in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs text %}\nText of the post (e.g. \"Zoo animals and a super hero trying to help too!\") \n{% enddocs %}\n\n{% docs signup_id %}\nUnique identifier for the signup \n{% enddocs %}\n\n{% docs post_class %}\nClass of the signup (e.g. \"photo - default\", \"phone-call - DefendDreamers_Jan16_BothBodies\")\n{% enddocs %}\n\n{% docs is_accepted %}\nWhether the post has been accepted to be displayed to the public on the website\n{% enddocs %}\n\n{% docs action_id %}\nInternal identifier of the action \n{% enddocs %}\n\n{% docs location %}\nLocation where the action takes place (e.g. US-NY)\n{% enddocs %}\n\n{% docs postal_code %}\nPostal code where the action takes place\n{% enddocs %}\n\n{% docs is_reportback %}\nWhether the post is a reportback. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs civic_action %}\nWhether the post is a Civic Action. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs scholarship_entry %}\nWhether the post is a Scholarship Entry. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs why_participated %}\nWhy the user participated in this action. Entered by the user.\n{% enddocs %}\n\n{% docs details %}\nDetails about the post. Contains contentfulId and other information (e.g. {\"campaignContentfulId\":\"6ATBgGEQEeJoIcxs1qbwaC\"})\n{% enddocs %}\n\n{% docs email %}\nEmail address of the user.\n{% enddocs %}\n\n{% docs source_details %}\nDetails about the source of the item. This is sometimes represented as a JSON object, and for other tables like Turbovote its represented as a string. (e.g. \"{\"contentful_id\":\"3CTLlXfbwtz1FOMpl31SKV\",\"utm_source\":\"scholarship_listing\",\"utm_medium\":\"referral\",\"utm_campaign\":\"fastweb_2019_08\"}\", newsletter_456)\n{% enddocs %}\n\n{% docs campaign_id %}\nThis is a unique identifier for the campaign\n{% enddocs %}\n\n{% docs campaign_run_id %}\nUnique identifier for the campaign run\n{% enddocs %}\n\n{% docs campaign_name %}\nName of the campaign\n{% enddocs %}\n\n{% docs campaign_cause %}\nCampaign cause (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_run_start_date %}\nStart date of the campaign run\n{% enddocs %}\n\n{% docs campaign_run_end_date %}\nEnd date of the campaign run\n{% enddocs %}\n\n{% docs campaign_created_date %}\nWhen the campaign was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs campaign_node_id %}\nInternal unique node id for the campaign\n{% enddocs %}\n\n{% docs campaign_node_id_title %}\nCampaign title\n{% enddocs %}\n\n{% docs campaign_run_id_title %}\nTitle of the campaign run\n{% enddocs %}\n\n{% docs campaign_action_type %}\nCampaign action type (eg. Make Something, Share Something)\n{% enddocs %}\n\n{% docs campaign_cause_type %}\nCampaign cause type (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_noun %}\nNoun applicable to the user's action\n{% enddocs %}\n\n{% docs campaign_verb %}\nVerb describing the action the user should take\n{% enddocs %}\n\n{% docs campaign_cta %}\nCampaign's call to action\n{% enddocs %}\n\n{% docs campaign_language %}\n\"Language in which the campaign is available\"\n{% enddocs %}\n\n{% docs agent_id %}\nIf set, the content type of the picture the member is sending us. Exp. image/png.\n{% enddocs %}\n\n{% docs attachment_content_type %}\nIf set, the handle of the Front agent this outbound support message is from.\n{% enddocs %}\n\n{% docs topic %}\nHolds a reference to the **last** campaign topic the member's conversation was in. This is useful to allow members to talk to Gambit and get quick responses (through Rivescript), without Gambit completely forgetting what state the member's interaction with a campaign topic was in.\n{% enddocs %}\n\n{% docs action_serial_id %}\nSerial id for the user's action. Depends on the source of the action. May be the bertly click id, sms message id, etc.\n{% enddocs %}\n\n{% docs channel %}\nChannel for the user's action. Depends on the source of the action. (e.g. web, sms)\n{% enddocs %}\n\n{% docs first_action_month %}\nMonth during which the user took their first action. \n{% enddocs %}\n\n{% docs event_id %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs event_source %}\nApplication source for event (eg. Phoenix, Northstar)\n{% enddocs %}\n\n{% docs event_datetime %}\nWhen the event occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs event_name %}\nName of the event (eg. northstar_submitted_register, https://docs.google.com/spreadsheets/d/1lm-fGrIm85nUTxSojqyCt_Ehmm1zEbViFhKpxcJiz1A/edit#gid=406441516)\n{% enddocs %}\n\n{% docs event_type %}\nType of event (pv = 'Page View', se = 'Structured Event')\n{% enddocs %}\n\n{% docs host %}\nURL host where event occurred (eg. www.dosomething.org or identity.dosomething.org)\n{% enddocs %}\n\n{% docs path %}\nURL path event occurred at (eg. /login or /us/campaigns/huddle-for-heroes)\n{% enddocs %}\n\n{% docs query_parameters %}\nOptional query parameters for the request (eg. query=huddle)\n{% enddocs %}\n\n{% docs se_category %}\nCategory of event (eg. focused_field, authentication) - Custom structured event\n{% enddocs %}\n\n{% docs se_action %}\nAction performed / event name (eg. form_submitted, action_failed) - Custom structured event\n{% enddocs %}\n\n{% docs se_label %}\nThe object of the action (eg. first_name, register, voter_reg_status) - Custom structured event\n{% enddocs %}\n\n{% docs session_id %}\nUnique identifier of the user's session\n{% enddocs %}\n\n{% docs session_counter %}\nHow many sessions a user has started\n{% enddocs %}\n\n{% docs browser_size %}\nWhich type of browser a user is using (eg. Mobile, Desktop)\n{% enddocs %}\n\n{% docs northstar_id %}\nThe Northstar ID of the user who generated the event\n{% enddocs %}\n\n{% docs device_id %}\nID of the device used\n{% enddocs %}\n\n{% docs referrer_host %}\nURL host of the referring site (eg. google.com)\n{% enddocs %}\n\n{% docs referrer_path %}\nURL path from referring site (eg. /10-stats-on-teen-drug-and-alcohol-use/)\n{% enddocs %}\n\n{% docs referrer_source %}\nReferrer source name (eg. Google, Facebook)\n{% enddocs %}\n\n{% docs utm_source %}\nTracks where the traffic is coming from. (eg. scholarship_listing, Facebook)\n{% enddocs %}\n\n{% docs utm_medium %}\nHow the traffic got to the platform (eg. referral, CPC)\n{% enddocs %}\n\n{% docs utm_campaign %}\nTracks which campaign the traffic was generated by. Shows up in Google Analytics as Campaign Name (eg. editorial_newsletter)\n{% enddocs %}\n\n{% docs url %}\nURL of campaign (eg. https://dosome.click/nyn5m7)\n{% enddocs %}\n\n{% docs modal_type %}\nNULL or SURVEY_MODAL\n{% enddocs %}\n\n{% docs landing_datetime %}\nWhen the session started in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs ending_datetime %}\nWhen the session ended in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs session_duration_seconds %}\nSession duration in seconds\n{% enddocs %}\n\n{% docs num_pages_views %}\nNumber of pages viewed in session\n{% enddocs %}\n\n{% docs landing_page %}\nFirst page the user viewed in the session (eg. /us/facts/11-facts-about-bp-oil-spill)\n{% enddocs %}\n\n{% docs exit_page %}\n\"Which page the user ended or exited their session from (eg. /us/campaigns/green-your-getaway)\"\n{% enddocs %}\n\n{% docs days_since_last_session %}\n\"Days since their last session.\"\n{% enddocs %}\n\n{% docs post_type %}\nType of post, (e.g. photo, voter-reg)\n{% enddocs %}\n\n{% docs noun %}\nNoun that corresponds to the item in the call to action that was delivered. (e.g. drawings, tweets)\n{% enddocs %}\n\n{% docs verb %}\nVerb corresponding to the action the user took. (e.g. shared, sent, taken)\n{% enddocs %}\n\n{% docs deleted_at %}\nDate time in UTC when a user deleted their post.\n{% enddocs %}\n\n{% docs _fivetran_deleted %}\nMarks rows that were deleted in the source table\n{% enddocs %}\n\n{% docs _fivetran_synced %}\n(UTC timestamp) keeps track of when each row was last successfully synced\n{% enddocs %}\n\n{% docs reportback %}\nWhether the post is a reportback \n{% enddocs %}\n\n{% docs active %}\nWhether the user is active \n{% enddocs %}\n\n{% docs anonymous %}\nWhether the user is anonymous when making the post \n{% enddocs %}\n\n{% docs callpower_campaign_id %}\nUnique ID corresponding to the Callpower campaign. Callpower allows users to record messages for their representatives.\n{% enddocs %}\n\n{% docs quiz %}\nWhether the post is a quiz \n{% enddocs %}\n\n{% docs action_type %}\nType of action the user took. (e.g. share-something, donate-something)\n{% enddocs %}\n\n{% docs online %}\nWhether the action is a online as opposed to IRL.\n{% enddocs %}\n\n{% docs time_commitment %}\nEstimated time required to do the action (e.g. 3.0+, <0.5)\n{% enddocs %}\n\n{% docs num_signups %}\nQuantity of campaign signups\n{% enddocs %}\n\n{% docs most_recent_signup %}\nTimestamp of the most recent signup in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs num_rbs %}\nQuantity of reportbacks for the user\n{% enddocs %}\n\n{% docs total_quantity %}\nTotal quantity of items in reportbacks\n{% enddocs %}\n\n{% docs most_recent_rb %}\nWhen the most recent reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs first_rb %}\nWhen the first reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs avg_time_betw_rbs %}\nCalculated average time between reportbacks.\n{% enddocs %}\n\n{% docs avg_days_next_action_after_rb %}\nCalculated average days until next action after reportback\n{% enddocs %}\n\n{% docs days_to_next_action_after_last_rb %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs most_recent_mam_action %}\nMost recent monthly active member qualifying action in UTC (eg. 2018-01-01 12:00:00).\n{% enddocs %}\n\n{% docs most_recent_email_open %}\nMost recent email open in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs most_recent_all_actions %}\nMost recent timestamp of any action in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs last_action_is_rb %}\nWhether the last action the user took was a reportback\n{% enddocs %}\n\n{% docs days_since_last_action %}\nDays since the user's last action\n{% enddocs %}\n\n{% docs time_to_first_rb %}\nHow much time after registering until the user's first reportback\n{% enddocs %}\n\n{% docs sms_unsubscribed_at %}\nTimestamp of when user unsubscribed from SMS messaging\n{% enddocs %}\n\n{% docs user_unsubscribed_at %}\nTimestamp of when user unsubscribed from email or sms\n{% enddocs %}\n\n{% docs voter_reg_acquisition %}\nWhether the user was an acquisition through voter registration efforts. \n{% enddocs %}\n\n{% docs last_logged_in %}\nDate time in UTC when user last logged in to Northstar\n{% enddocs %}\n\n{% docs last_accessed %}\nDate time in UTC when user last access the website\n{% enddocs %}\n\n{% docs last_messaged_at %}\nDate time in UTC when user was last sent a message via SMS or email\n{% enddocs %}\n\n{% docs facebook_id %}\nUser's facebook id\n{% enddocs %}\n\n{% docs mobile %}\nUsers's mobile phone number\n{% enddocs %}\n\n{% docs birthdate %}\nUser's birthdate\n{% enddocs %}\n\n{% docs first_name %}\nUser's first name\n{% enddocs %}\n\n{% docs last_name %}\nUser's last name\n{% enddocs %}\n\n{% docs voter_registration_status %}\nUser's registration status. (e.g. registration_complete, confirmed, uncertain) \n{% enddocs %}\n\n{% docs finish_with_state %}\nIf the registrant was eligible to use and passed through to complete their registration with their state\u2019s OVR system, it will be indicated in this field (direct quote from Rock-The-Vote documentation). Yes/No value in field.\n{% enddocs %}\n\n{% docs reportback_volume %}\nThis field returns 1 if non voter-reg action, since campaigns team only counts those a 1 reportback. If voter-reg action, we want to count quantity of post as number of registered voters.\n{% enddocs %}\n\n{% docs address_street_1 %}\nFirst line of user's street address\n{% enddocs %}\n\n{% docs address_street_2 %}\nSecond line of user's street address\n{% enddocs %}\n\n{% docs city %}\nUser's city\n{% enddocs %}\n\n{% docs state %}\nUser's state\n{% enddocs %}\n\n{% docs country %}\nUser's country\n{% enddocs %}\n\n{% docs language %}\nUser's language\n{% enddocs %}\n\n{% docs cio_status %}\nStatus of user from CIO. (e.g. customer_subscribed, customer_unsubscribed)\n{% enddocs %}\n\n{% docs cio_status_timestamp %}\nTimestamp when users's status was updated.\n{% enddocs %}\n\n{% docs sms_status %}\nCurrent SMS status. (e.g. undeliverable, unknown)\n{% enddocs %}\n\n{% docs source_detail %}\nDetails of the origin of the user. (e.g. tell_a_friend, other, opt_in_path/197981)\n{% enddocs %}\n\n{% docs badges %}\nWhether the user has any badges. \n{% enddocs %}\n\n{% docs refer_friends %}\nWhether the user is a part of the refer a friend campaign. \n{% enddocs %}\n\n{% docs subscribed_member %}\nWhether the user is subscribed. \n{% enddocs %}\n\n{% docs last_updated_at %}\nTimestamp when users's was updated.\n{% enddocs %}\n\n{% docs school_id %}\nUnique identifier for the user's school. This info comes from the school finder.\n{% enddocs %}\n\n{% docs newsletter_topic %}\nNewsletter topic. (e.g. community, lifestyle)\n{% enddocs %}\n\n{% docs user_agent %}\nFull user agent string for a user's browser (e.g. \"Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:24.0) Gecko/20100101 Firefox/24.0\")\n{% enddocs %}\n\n{% docs drupal_id %}\nOld Drupal user ID\n{% enddocs %}\n\n{% docs campaigns %}\nCampaigns a user is signed up for.\n{% enddocs %}\n\n{% docs audit %}\nA very useful field with data containing information about changes to a user, e.g. timestamps when the user subscribed and unsubscribed.\n{% enddocs %}\n\n{% docs voting_plan_status %}\nThe indication of the user's plan to vote, e.g. voting, not_voting, cant_vote\n{% enddocs %}\n\n{% docs voting_plan_time_of_day %}\nThe time of day when the user plans to vote, e.g morning, afternoon, evening\n{% enddocs %}\n\n{% docs voting_plan_method_of_transport %}\nHow the user plans to get to their polling place. e.g. walk, drive\n{% enddocs %}\n\n{% docs voting_plan_attending_with %}\nWith Whom the user plans to go voting, e.g. family, friends, alone\n{% enddocs %}\n\n{% docs feature_flags %}\nJSON containing info on features like badges and refer-a-friend.\n{% enddocs %}\n\n{% docs dbt_updated_at %}\nDBT snapshot table data. The updated_at timestamp of the source record when this snapshot row was inserted.\n{% enddocs %}\n\n{% docs dbt_scd_id %}\nDBT snapshot table data. A unique key generated for each snapshotted record.\n{% enddocs %}\n\n{% docs dbt_valid_from %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this snapshot row was first inserted\n{% enddocs %}\n\n{% docs dbt_valid_to %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this row row became invalidated.\n{% enddocs %}\n\n{% docs google_id %}\nUser's Google ID obtained from login.\n{% enddocs %}\n\n{% docs causes %}\nCauses in which a user is interested. e.g. animal welfare, education, mental_health\n{% enddocs %}\n\n{% docs email_subscription_status %}\nEmail subscription status of the user\n{% enddocs %}\n\n{% docs role %}\nUser's role, e.g. user, staff\n{% enddocs %}\n\n{% docs cio_backfilled %}\nWhether this user's data was backfilled from CIO\n{% enddocs %}\n\n{% docs addr_source %}\nWhere the user submitted their address, e.g. sms, GDPR\n{% enddocs %}\n\n{% docs email_subscription_topics %}\nEmail subscription topics correspond to categories in CIO in which the user is interested. e.g. lifestyle, community, scholarship\n{% enddocs %}\n\n{% docs sms_paused %}\nWhether we've paused sending sms messages to the user.\n{% enddocs %}\n\n\n\n\n", "name": "campaign_run_end_date", "unique_id": "ds_dbt.campaign_run_end_date", "block_contents": "End date of the campaign run"}, "ds_dbt.campaign_created_date": {"root_path": "/Users/mrich/projects/quasar/quasar/dbt", "resource_type": "docs", "path": "schema.md", "original_file_path": "models/schema.md", "package_name": "ds_dbt", "file_contents": "\n{% docs click_id %}\nThis is a unique identifier for each click\n{% enddocs %}\n\n{% docs click_time %}\nTimestamp when user clicked.\n{% enddocs %}\n\n{% docs shortened %}\nShortened URL\n{% enddocs %}\n\n{% docs target_url %}\nURL where the user will be directed\n{% enddocs %}\n\n{% docs broadcast_id %}\nID of the broadcast that generated the shortened URL\n{% enddocs %}\n\n{% docs source %}\nSource of the URL (e.g. SMS, web), origin of the post (e.g. phoenix-web, phoenix-ashes, sms), or source where user was acquired. (e.g. sms, phoenix-next)\n{% enddocs %}\n\n{% docs interaction_type %}\nHow the user interacted with the link (e.g. preview, click)\n{% enddocs %}\n\n{% docs id %}\nUnique identifier for the post\n{% enddocs %}\n\n{% docs type %}\nType of post (e.g. photo)\n{% enddocs %}\n\n{% docs action %}\nPost action (e.g. DefendDreamers_Nov9_CongressCalls, GunViolence2018_Feb15_ParklandResponse)\n{% enddocs %}\n\n{% docs status %}\nPost status (e.g. accepted, rejected)\n{% enddocs %}\n\n{% docs quantity %}\nNumerical quantity of items specified in the call to action (e.g. 10, 200)\n{% enddocs %}\n\n{% docs source_bucket %}\nGrouping bucket for origin of the post (e.g. web, sms) \n{% enddocs %}\n\n{% docs created_at %}\nWhen the item was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs updated_at %}\nWhen the item was updated in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs text %}\nText of the post (e.g. \"Zoo animals and a super hero trying to help too!\") \n{% enddocs %}\n\n{% docs signup_id %}\nUnique identifier for the signup \n{% enddocs %}\n\n{% docs post_class %}\nClass of the signup (e.g. \"photo - default\", \"phone-call - DefendDreamers_Jan16_BothBodies\")\n{% enddocs %}\n\n{% docs is_accepted %}\nWhether the post has been accepted to be displayed to the public on the website\n{% enddocs %}\n\n{% docs action_id %}\nInternal identifier of the action \n{% enddocs %}\n\n{% docs location %}\nLocation where the action takes place (e.g. US-NY)\n{% enddocs %}\n\n{% docs postal_code %}\nPostal code where the action takes place\n{% enddocs %}\n\n{% docs is_reportback %}\nWhether the post is a reportback. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs civic_action %}\nWhether the post is a Civic Action. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs scholarship_entry %}\nWhether the post is a Scholarship Entry. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs why_participated %}\nWhy the user participated in this action. Entered by the user.\n{% enddocs %}\n\n{% docs details %}\nDetails about the post. Contains contentfulId and other information (e.g. {\"campaignContentfulId\":\"6ATBgGEQEeJoIcxs1qbwaC\"})\n{% enddocs %}\n\n{% docs email %}\nEmail address of the user.\n{% enddocs %}\n\n{% docs source_details %}\nDetails about the source of the item. This is sometimes represented as a JSON object, and for other tables like Turbovote its represented as a string. (e.g. \"{\"contentful_id\":\"3CTLlXfbwtz1FOMpl31SKV\",\"utm_source\":\"scholarship_listing\",\"utm_medium\":\"referral\",\"utm_campaign\":\"fastweb_2019_08\"}\", newsletter_456)\n{% enddocs %}\n\n{% docs campaign_id %}\nThis is a unique identifier for the campaign\n{% enddocs %}\n\n{% docs campaign_run_id %}\nUnique identifier for the campaign run\n{% enddocs %}\n\n{% docs campaign_name %}\nName of the campaign\n{% enddocs %}\n\n{% docs campaign_cause %}\nCampaign cause (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_run_start_date %}\nStart date of the campaign run\n{% enddocs %}\n\n{% docs campaign_run_end_date %}\nEnd date of the campaign run\n{% enddocs %}\n\n{% docs campaign_created_date %}\nWhen the campaign was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs campaign_node_id %}\nInternal unique node id for the campaign\n{% enddocs %}\n\n{% docs campaign_node_id_title %}\nCampaign title\n{% enddocs %}\n\n{% docs campaign_run_id_title %}\nTitle of the campaign run\n{% enddocs %}\n\n{% docs campaign_action_type %}\nCampaign action type (eg. Make Something, Share Something)\n{% enddocs %}\n\n{% docs campaign_cause_type %}\nCampaign cause type (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_noun %}\nNoun applicable to the user's action\n{% enddocs %}\n\n{% docs campaign_verb %}\nVerb describing the action the user should take\n{% enddocs %}\n\n{% docs campaign_cta %}\nCampaign's call to action\n{% enddocs %}\n\n{% docs campaign_language %}\n\"Language in which the campaign is available\"\n{% enddocs %}\n\n{% docs agent_id %}\nIf set, the content type of the picture the member is sending us. Exp. image/png.\n{% enddocs %}\n\n{% docs attachment_content_type %}\nIf set, the handle of the Front agent this outbound support message is from.\n{% enddocs %}\n\n{% docs topic %}\nHolds a reference to the **last** campaign topic the member's conversation was in. This is useful to allow members to talk to Gambit and get quick responses (through Rivescript), without Gambit completely forgetting what state the member's interaction with a campaign topic was in.\n{% enddocs %}\n\n{% docs action_serial_id %}\nSerial id for the user's action. Depends on the source of the action. May be the bertly click id, sms message id, etc.\n{% enddocs %}\n\n{% docs channel %}\nChannel for the user's action. Depends on the source of the action. (e.g. web, sms)\n{% enddocs %}\n\n{% docs first_action_month %}\nMonth during which the user took their first action. \n{% enddocs %}\n\n{% docs event_id %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs event_source %}\nApplication source for event (eg. Phoenix, Northstar)\n{% enddocs %}\n\n{% docs event_datetime %}\nWhen the event occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs event_name %}\nName of the event (eg. northstar_submitted_register, https://docs.google.com/spreadsheets/d/1lm-fGrIm85nUTxSojqyCt_Ehmm1zEbViFhKpxcJiz1A/edit#gid=406441516)\n{% enddocs %}\n\n{% docs event_type %}\nType of event (pv = 'Page View', se = 'Structured Event')\n{% enddocs %}\n\n{% docs host %}\nURL host where event occurred (eg. www.dosomething.org or identity.dosomething.org)\n{% enddocs %}\n\n{% docs path %}\nURL path event occurred at (eg. /login or /us/campaigns/huddle-for-heroes)\n{% enddocs %}\n\n{% docs query_parameters %}\nOptional query parameters for the request (eg. query=huddle)\n{% enddocs %}\n\n{% docs se_category %}\nCategory of event (eg. focused_field, authentication) - Custom structured event\n{% enddocs %}\n\n{% docs se_action %}\nAction performed / event name (eg. form_submitted, action_failed) - Custom structured event\n{% enddocs %}\n\n{% docs se_label %}\nThe object of the action (eg. first_name, register, voter_reg_status) - Custom structured event\n{% enddocs %}\n\n{% docs session_id %}\nUnique identifier of the user's session\n{% enddocs %}\n\n{% docs session_counter %}\nHow many sessions a user has started\n{% enddocs %}\n\n{% docs browser_size %}\nWhich type of browser a user is using (eg. Mobile, Desktop)\n{% enddocs %}\n\n{% docs northstar_id %}\nThe Northstar ID of the user who generated the event\n{% enddocs %}\n\n{% docs device_id %}\nID of the device used\n{% enddocs %}\n\n{% docs referrer_host %}\nURL host of the referring site (eg. google.com)\n{% enddocs %}\n\n{% docs referrer_path %}\nURL path from referring site (eg. /10-stats-on-teen-drug-and-alcohol-use/)\n{% enddocs %}\n\n{% docs referrer_source %}\nReferrer source name (eg. Google, Facebook)\n{% enddocs %}\n\n{% docs utm_source %}\nTracks where the traffic is coming from. (eg. scholarship_listing, Facebook)\n{% enddocs %}\n\n{% docs utm_medium %}\nHow the traffic got to the platform (eg. referral, CPC)\n{% enddocs %}\n\n{% docs utm_campaign %}\nTracks which campaign the traffic was generated by. Shows up in Google Analytics as Campaign Name (eg. editorial_newsletter)\n{% enddocs %}\n\n{% docs url %}\nURL of campaign (eg. https://dosome.click/nyn5m7)\n{% enddocs %}\n\n{% docs modal_type %}\nNULL or SURVEY_MODAL\n{% enddocs %}\n\n{% docs landing_datetime %}\nWhen the session started in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs ending_datetime %}\nWhen the session ended in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs session_duration_seconds %}\nSession duration in seconds\n{% enddocs %}\n\n{% docs num_pages_views %}\nNumber of pages viewed in session\n{% enddocs %}\n\n{% docs landing_page %}\nFirst page the user viewed in the session (eg. /us/facts/11-facts-about-bp-oil-spill)\n{% enddocs %}\n\n{% docs exit_page %}\n\"Which page the user ended or exited their session from (eg. /us/campaigns/green-your-getaway)\"\n{% enddocs %}\n\n{% docs days_since_last_session %}\n\"Days since their last session.\"\n{% enddocs %}\n\n{% docs post_type %}\nType of post, (e.g. photo, voter-reg)\n{% enddocs %}\n\n{% docs noun %}\nNoun that corresponds to the item in the call to action that was delivered. (e.g. drawings, tweets)\n{% enddocs %}\n\n{% docs verb %}\nVerb corresponding to the action the user took. (e.g. shared, sent, taken)\n{% enddocs %}\n\n{% docs deleted_at %}\nDate time in UTC when a user deleted their post.\n{% enddocs %}\n\n{% docs _fivetran_deleted %}\nMarks rows that were deleted in the source table\n{% enddocs %}\n\n{% docs _fivetran_synced %}\n(UTC timestamp) keeps track of when each row was last successfully synced\n{% enddocs %}\n\n{% docs reportback %}\nWhether the post is a reportback \n{% enddocs %}\n\n{% docs active %}\nWhether the user is active \n{% enddocs %}\n\n{% docs anonymous %}\nWhether the user is anonymous when making the post \n{% enddocs %}\n\n{% docs callpower_campaign_id %}\nUnique ID corresponding to the Callpower campaign. Callpower allows users to record messages for their representatives.\n{% enddocs %}\n\n{% docs quiz %}\nWhether the post is a quiz \n{% enddocs %}\n\n{% docs action_type %}\nType of action the user took. (e.g. share-something, donate-something)\n{% enddocs %}\n\n{% docs online %}\nWhether the action is a online as opposed to IRL.\n{% enddocs %}\n\n{% docs time_commitment %}\nEstimated time required to do the action (e.g. 3.0+, <0.5)\n{% enddocs %}\n\n{% docs num_signups %}\nQuantity of campaign signups\n{% enddocs %}\n\n{% docs most_recent_signup %}\nTimestamp of the most recent signup in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs num_rbs %}\nQuantity of reportbacks for the user\n{% enddocs %}\n\n{% docs total_quantity %}\nTotal quantity of items in reportbacks\n{% enddocs %}\n\n{% docs most_recent_rb %}\nWhen the most recent reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs first_rb %}\nWhen the first reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs avg_time_betw_rbs %}\nCalculated average time between reportbacks.\n{% enddocs %}\n\n{% docs avg_days_next_action_after_rb %}\nCalculated average days until next action after reportback\n{% enddocs %}\n\n{% docs days_to_next_action_after_last_rb %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs most_recent_mam_action %}\nMost recent monthly active member qualifying action in UTC (eg. 2018-01-01 12:00:00).\n{% enddocs %}\n\n{% docs most_recent_email_open %}\nMost recent email open in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs most_recent_all_actions %}\nMost recent timestamp of any action in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs last_action_is_rb %}\nWhether the last action the user took was a reportback\n{% enddocs %}\n\n{% docs days_since_last_action %}\nDays since the user's last action\n{% enddocs %}\n\n{% docs time_to_first_rb %}\nHow much time after registering until the user's first reportback\n{% enddocs %}\n\n{% docs sms_unsubscribed_at %}\nTimestamp of when user unsubscribed from SMS messaging\n{% enddocs %}\n\n{% docs user_unsubscribed_at %}\nTimestamp of when user unsubscribed from email or sms\n{% enddocs %}\n\n{% docs voter_reg_acquisition %}\nWhether the user was an acquisition through voter registration efforts. \n{% enddocs %}\n\n{% docs last_logged_in %}\nDate time in UTC when user last logged in to Northstar\n{% enddocs %}\n\n{% docs last_accessed %}\nDate time in UTC when user last access the website\n{% enddocs %}\n\n{% docs last_messaged_at %}\nDate time in UTC when user was last sent a message via SMS or email\n{% enddocs %}\n\n{% docs facebook_id %}\nUser's facebook id\n{% enddocs %}\n\n{% docs mobile %}\nUsers's mobile phone number\n{% enddocs %}\n\n{% docs birthdate %}\nUser's birthdate\n{% enddocs %}\n\n{% docs first_name %}\nUser's first name\n{% enddocs %}\n\n{% docs last_name %}\nUser's last name\n{% enddocs %}\n\n{% docs voter_registration_status %}\nUser's registration status. (e.g. registration_complete, confirmed, uncertain) \n{% enddocs %}\n\n{% docs finish_with_state %}\nIf the registrant was eligible to use and passed through to complete their registration with their state\u2019s OVR system, it will be indicated in this field (direct quote from Rock-The-Vote documentation). Yes/No value in field.\n{% enddocs %}\n\n{% docs reportback_volume %}\nThis field returns 1 if non voter-reg action, since campaigns team only counts those a 1 reportback. If voter-reg action, we want to count quantity of post as number of registered voters.\n{% enddocs %}\n\n{% docs address_street_1 %}\nFirst line of user's street address\n{% enddocs %}\n\n{% docs address_street_2 %}\nSecond line of user's street address\n{% enddocs %}\n\n{% docs city %}\nUser's city\n{% enddocs %}\n\n{% docs state %}\nUser's state\n{% enddocs %}\n\n{% docs country %}\nUser's country\n{% enddocs %}\n\n{% docs language %}\nUser's language\n{% enddocs %}\n\n{% docs cio_status %}\nStatus of user from CIO. (e.g. customer_subscribed, customer_unsubscribed)\n{% enddocs %}\n\n{% docs cio_status_timestamp %}\nTimestamp when users's status was updated.\n{% enddocs %}\n\n{% docs sms_status %}\nCurrent SMS status. (e.g. undeliverable, unknown)\n{% enddocs %}\n\n{% docs source_detail %}\nDetails of the origin of the user. (e.g. tell_a_friend, other, opt_in_path/197981)\n{% enddocs %}\n\n{% docs badges %}\nWhether the user has any badges. \n{% enddocs %}\n\n{% docs refer_friends %}\nWhether the user is a part of the refer a friend campaign. \n{% enddocs %}\n\n{% docs subscribed_member %}\nWhether the user is subscribed. \n{% enddocs %}\n\n{% docs last_updated_at %}\nTimestamp when users's was updated.\n{% enddocs %}\n\n{% docs school_id %}\nUnique identifier for the user's school. This info comes from the school finder.\n{% enddocs %}\n\n{% docs newsletter_topic %}\nNewsletter topic. (e.g. community, lifestyle)\n{% enddocs %}\n\n{% docs user_agent %}\nFull user agent string for a user's browser (e.g. \"Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:24.0) Gecko/20100101 Firefox/24.0\")\n{% enddocs %}\n\n{% docs drupal_id %}\nOld Drupal user ID\n{% enddocs %}\n\n{% docs campaigns %}\nCampaigns a user is signed up for.\n{% enddocs %}\n\n{% docs audit %}\nA very useful field with data containing information about changes to a user, e.g. timestamps when the user subscribed and unsubscribed.\n{% enddocs %}\n\n{% docs voting_plan_status %}\nThe indication of the user's plan to vote, e.g. voting, not_voting, cant_vote\n{% enddocs %}\n\n{% docs voting_plan_time_of_day %}\nThe time of day when the user plans to vote, e.g morning, afternoon, evening\n{% enddocs %}\n\n{% docs voting_plan_method_of_transport %}\nHow the user plans to get to their polling place. e.g. walk, drive\n{% enddocs %}\n\n{% docs voting_plan_attending_with %}\nWith Whom the user plans to go voting, e.g. family, friends, alone\n{% enddocs %}\n\n{% docs feature_flags %}\nJSON containing info on features like badges and refer-a-friend.\n{% enddocs %}\n\n{% docs dbt_updated_at %}\nDBT snapshot table data. The updated_at timestamp of the source record when this snapshot row was inserted.\n{% enddocs %}\n\n{% docs dbt_scd_id %}\nDBT snapshot table data. A unique key generated for each snapshotted record.\n{% enddocs %}\n\n{% docs dbt_valid_from %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this snapshot row was first inserted\n{% enddocs %}\n\n{% docs dbt_valid_to %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this row row became invalidated.\n{% enddocs %}\n\n{% docs google_id %}\nUser's Google ID obtained from login.\n{% enddocs %}\n\n{% docs causes %}\nCauses in which a user is interested. e.g. animal welfare, education, mental_health\n{% enddocs %}\n\n{% docs email_subscription_status %}\nEmail subscription status of the user\n{% enddocs %}\n\n{% docs role %}\nUser's role, e.g. user, staff\n{% enddocs %}\n\n{% docs cio_backfilled %}\nWhether this user's data was backfilled from CIO\n{% enddocs %}\n\n{% docs addr_source %}\nWhere the user submitted their address, e.g. sms, GDPR\n{% enddocs %}\n\n{% docs email_subscription_topics %}\nEmail subscription topics correspond to categories in CIO in which the user is interested. e.g. lifestyle, community, scholarship\n{% enddocs %}\n\n{% docs sms_paused %}\nWhether we've paused sending sms messages to the user.\n{% enddocs %}\n\n\n\n\n", "name": "campaign_created_date", "unique_id": "ds_dbt.campaign_created_date", "block_contents": "When the campaign was created in UTC (eg. 2018-01-01 12:00:00)"}, "ds_dbt.campaign_node_id": {"root_path": "/Users/mrich/projects/quasar/quasar/dbt", "resource_type": "docs", "path": "schema.md", "original_file_path": "models/schema.md", "package_name": "ds_dbt", "file_contents": "\n{% docs click_id %}\nThis is a unique identifier for each click\n{% enddocs %}\n\n{% docs click_time %}\nTimestamp when user clicked.\n{% enddocs %}\n\n{% docs shortened %}\nShortened URL\n{% enddocs %}\n\n{% docs target_url %}\nURL where the user will be directed\n{% enddocs %}\n\n{% docs broadcast_id %}\nID of the broadcast that generated the shortened URL\n{% enddocs %}\n\n{% docs source %}\nSource of the URL (e.g. SMS, web), origin of the post (e.g. phoenix-web, phoenix-ashes, sms), or source where user was acquired. (e.g. sms, phoenix-next)\n{% enddocs %}\n\n{% docs interaction_type %}\nHow the user interacted with the link (e.g. preview, click)\n{% enddocs %}\n\n{% docs id %}\nUnique identifier for the post\n{% enddocs %}\n\n{% docs type %}\nType of post (e.g. photo)\n{% enddocs %}\n\n{% docs action %}\nPost action (e.g. DefendDreamers_Nov9_CongressCalls, GunViolence2018_Feb15_ParklandResponse)\n{% enddocs %}\n\n{% docs status %}\nPost status (e.g. accepted, rejected)\n{% enddocs %}\n\n{% docs quantity %}\nNumerical quantity of items specified in the call to action (e.g. 10, 200)\n{% enddocs %}\n\n{% docs source_bucket %}\nGrouping bucket for origin of the post (e.g. web, sms) \n{% enddocs %}\n\n{% docs created_at %}\nWhen the item was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs updated_at %}\nWhen the item was updated in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs text %}\nText of the post (e.g. \"Zoo animals and a super hero trying to help too!\") \n{% enddocs %}\n\n{% docs signup_id %}\nUnique identifier for the signup \n{% enddocs %}\n\n{% docs post_class %}\nClass of the signup (e.g. \"photo - default\", \"phone-call - DefendDreamers_Jan16_BothBodies\")\n{% enddocs %}\n\n{% docs is_accepted %}\nWhether the post has been accepted to be displayed to the public on the website\n{% enddocs %}\n\n{% docs action_id %}\nInternal identifier of the action \n{% enddocs %}\n\n{% docs location %}\nLocation where the action takes place (e.g. US-NY)\n{% enddocs %}\n\n{% docs postal_code %}\nPostal code where the action takes place\n{% enddocs %}\n\n{% docs is_reportback %}\nWhether the post is a reportback. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs civic_action %}\nWhether the post is a Civic Action. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs scholarship_entry %}\nWhether the post is a Scholarship Entry. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs why_participated %}\nWhy the user participated in this action. Entered by the user.\n{% enddocs %}\n\n{% docs details %}\nDetails about the post. Contains contentfulId and other information (e.g. {\"campaignContentfulId\":\"6ATBgGEQEeJoIcxs1qbwaC\"})\n{% enddocs %}\n\n{% docs email %}\nEmail address of the user.\n{% enddocs %}\n\n{% docs source_details %}\nDetails about the source of the item. This is sometimes represented as a JSON object, and for other tables like Turbovote its represented as a string. (e.g. \"{\"contentful_id\":\"3CTLlXfbwtz1FOMpl31SKV\",\"utm_source\":\"scholarship_listing\",\"utm_medium\":\"referral\",\"utm_campaign\":\"fastweb_2019_08\"}\", newsletter_456)\n{% enddocs %}\n\n{% docs campaign_id %}\nThis is a unique identifier for the campaign\n{% enddocs %}\n\n{% docs campaign_run_id %}\nUnique identifier for the campaign run\n{% enddocs %}\n\n{% docs campaign_name %}\nName of the campaign\n{% enddocs %}\n\n{% docs campaign_cause %}\nCampaign cause (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_run_start_date %}\nStart date of the campaign run\n{% enddocs %}\n\n{% docs campaign_run_end_date %}\nEnd date of the campaign run\n{% enddocs %}\n\n{% docs campaign_created_date %}\nWhen the campaign was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs campaign_node_id %}\nInternal unique node id for the campaign\n{% enddocs %}\n\n{% docs campaign_node_id_title %}\nCampaign title\n{% enddocs %}\n\n{% docs campaign_run_id_title %}\nTitle of the campaign run\n{% enddocs %}\n\n{% docs campaign_action_type %}\nCampaign action type (eg. Make Something, Share Something)\n{% enddocs %}\n\n{% docs campaign_cause_type %}\nCampaign cause type (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_noun %}\nNoun applicable to the user's action\n{% enddocs %}\n\n{% docs campaign_verb %}\nVerb describing the action the user should take\n{% enddocs %}\n\n{% docs campaign_cta %}\nCampaign's call to action\n{% enddocs %}\n\n{% docs campaign_language %}\n\"Language in which the campaign is available\"\n{% enddocs %}\n\n{% docs agent_id %}\nIf set, the content type of the picture the member is sending us. Exp. image/png.\n{% enddocs %}\n\n{% docs attachment_content_type %}\nIf set, the handle of the Front agent this outbound support message is from.\n{% enddocs %}\n\n{% docs topic %}\nHolds a reference to the **last** campaign topic the member's conversation was in. This is useful to allow members to talk to Gambit and get quick responses (through Rivescript), without Gambit completely forgetting what state the member's interaction with a campaign topic was in.\n{% enddocs %}\n\n{% docs action_serial_id %}\nSerial id for the user's action. Depends on the source of the action. May be the bertly click id, sms message id, etc.\n{% enddocs %}\n\n{% docs channel %}\nChannel for the user's action. Depends on the source of the action. (e.g. web, sms)\n{% enddocs %}\n\n{% docs first_action_month %}\nMonth during which the user took their first action. \n{% enddocs %}\n\n{% docs event_id %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs event_source %}\nApplication source for event (eg. Phoenix, Northstar)\n{% enddocs %}\n\n{% docs event_datetime %}\nWhen the event occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs event_name %}\nName of the event (eg. northstar_submitted_register, https://docs.google.com/spreadsheets/d/1lm-fGrIm85nUTxSojqyCt_Ehmm1zEbViFhKpxcJiz1A/edit#gid=406441516)\n{% enddocs %}\n\n{% docs event_type %}\nType of event (pv = 'Page View', se = 'Structured Event')\n{% enddocs %}\n\n{% docs host %}\nURL host where event occurred (eg. www.dosomething.org or identity.dosomething.org)\n{% enddocs %}\n\n{% docs path %}\nURL path event occurred at (eg. /login or /us/campaigns/huddle-for-heroes)\n{% enddocs %}\n\n{% docs query_parameters %}\nOptional query parameters for the request (eg. query=huddle)\n{% enddocs %}\n\n{% docs se_category %}\nCategory of event (eg. focused_field, authentication) - Custom structured event\n{% enddocs %}\n\n{% docs se_action %}\nAction performed / event name (eg. form_submitted, action_failed) - Custom structured event\n{% enddocs %}\n\n{% docs se_label %}\nThe object of the action (eg. first_name, register, voter_reg_status) - Custom structured event\n{% enddocs %}\n\n{% docs session_id %}\nUnique identifier of the user's session\n{% enddocs %}\n\n{% docs session_counter %}\nHow many sessions a user has started\n{% enddocs %}\n\n{% docs browser_size %}\nWhich type of browser a user is using (eg. Mobile, Desktop)\n{% enddocs %}\n\n{% docs northstar_id %}\nThe Northstar ID of the user who generated the event\n{% enddocs %}\n\n{% docs device_id %}\nID of the device used\n{% enddocs %}\n\n{% docs referrer_host %}\nURL host of the referring site (eg. google.com)\n{% enddocs %}\n\n{% docs referrer_path %}\nURL path from referring site (eg. /10-stats-on-teen-drug-and-alcohol-use/)\n{% enddocs %}\n\n{% docs referrer_source %}\nReferrer source name (eg. Google, Facebook)\n{% enddocs %}\n\n{% docs utm_source %}\nTracks where the traffic is coming from. (eg. scholarship_listing, Facebook)\n{% enddocs %}\n\n{% docs utm_medium %}\nHow the traffic got to the platform (eg. referral, CPC)\n{% enddocs %}\n\n{% docs utm_campaign %}\nTracks which campaign the traffic was generated by. Shows up in Google Analytics as Campaign Name (eg. editorial_newsletter)\n{% enddocs %}\n\n{% docs url %}\nURL of campaign (eg. https://dosome.click/nyn5m7)\n{% enddocs %}\n\n{% docs modal_type %}\nNULL or SURVEY_MODAL\n{% enddocs %}\n\n{% docs landing_datetime %}\nWhen the session started in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs ending_datetime %}\nWhen the session ended in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs session_duration_seconds %}\nSession duration in seconds\n{% enddocs %}\n\n{% docs num_pages_views %}\nNumber of pages viewed in session\n{% enddocs %}\n\n{% docs landing_page %}\nFirst page the user viewed in the session (eg. /us/facts/11-facts-about-bp-oil-spill)\n{% enddocs %}\n\n{% docs exit_page %}\n\"Which page the user ended or exited their session from (eg. /us/campaigns/green-your-getaway)\"\n{% enddocs %}\n\n{% docs days_since_last_session %}\n\"Days since their last session.\"\n{% enddocs %}\n\n{% docs post_type %}\nType of post, (e.g. photo, voter-reg)\n{% enddocs %}\n\n{% docs noun %}\nNoun that corresponds to the item in the call to action that was delivered. (e.g. drawings, tweets)\n{% enddocs %}\n\n{% docs verb %}\nVerb corresponding to the action the user took. (e.g. shared, sent, taken)\n{% enddocs %}\n\n{% docs deleted_at %}\nDate time in UTC when a user deleted their post.\n{% enddocs %}\n\n{% docs _fivetran_deleted %}\nMarks rows that were deleted in the source table\n{% enddocs %}\n\n{% docs _fivetran_synced %}\n(UTC timestamp) keeps track of when each row was last successfully synced\n{% enddocs %}\n\n{% docs reportback %}\nWhether the post is a reportback \n{% enddocs %}\n\n{% docs active %}\nWhether the user is active \n{% enddocs %}\n\n{% docs anonymous %}\nWhether the user is anonymous when making the post \n{% enddocs %}\n\n{% docs callpower_campaign_id %}\nUnique ID corresponding to the Callpower campaign. Callpower allows users to record messages for their representatives.\n{% enddocs %}\n\n{% docs quiz %}\nWhether the post is a quiz \n{% enddocs %}\n\n{% docs action_type %}\nType of action the user took. (e.g. share-something, donate-something)\n{% enddocs %}\n\n{% docs online %}\nWhether the action is a online as opposed to IRL.\n{% enddocs %}\n\n{% docs time_commitment %}\nEstimated time required to do the action (e.g. 3.0+, <0.5)\n{% enddocs %}\n\n{% docs num_signups %}\nQuantity of campaign signups\n{% enddocs %}\n\n{% docs most_recent_signup %}\nTimestamp of the most recent signup in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs num_rbs %}\nQuantity of reportbacks for the user\n{% enddocs %}\n\n{% docs total_quantity %}\nTotal quantity of items in reportbacks\n{% enddocs %}\n\n{% docs most_recent_rb %}\nWhen the most recent reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs first_rb %}\nWhen the first reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs avg_time_betw_rbs %}\nCalculated average time between reportbacks.\n{% enddocs %}\n\n{% docs avg_days_next_action_after_rb %}\nCalculated average days until next action after reportback\n{% enddocs %}\n\n{% docs days_to_next_action_after_last_rb %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs most_recent_mam_action %}\nMost recent monthly active member qualifying action in UTC (eg. 2018-01-01 12:00:00).\n{% enddocs %}\n\n{% docs most_recent_email_open %}\nMost recent email open in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs most_recent_all_actions %}\nMost recent timestamp of any action in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs last_action_is_rb %}\nWhether the last action the user took was a reportback\n{% enddocs %}\n\n{% docs days_since_last_action %}\nDays since the user's last action\n{% enddocs %}\n\n{% docs time_to_first_rb %}\nHow much time after registering until the user's first reportback\n{% enddocs %}\n\n{% docs sms_unsubscribed_at %}\nTimestamp of when user unsubscribed from SMS messaging\n{% enddocs %}\n\n{% docs user_unsubscribed_at %}\nTimestamp of when user unsubscribed from email or sms\n{% enddocs %}\n\n{% docs voter_reg_acquisition %}\nWhether the user was an acquisition through voter registration efforts. \n{% enddocs %}\n\n{% docs last_logged_in %}\nDate time in UTC when user last logged in to Northstar\n{% enddocs %}\n\n{% docs last_accessed %}\nDate time in UTC when user last access the website\n{% enddocs %}\n\n{% docs last_messaged_at %}\nDate time in UTC when user was last sent a message via SMS or email\n{% enddocs %}\n\n{% docs facebook_id %}\nUser's facebook id\n{% enddocs %}\n\n{% docs mobile %}\nUsers's mobile phone number\n{% enddocs %}\n\n{% docs birthdate %}\nUser's birthdate\n{% enddocs %}\n\n{% docs first_name %}\nUser's first name\n{% enddocs %}\n\n{% docs last_name %}\nUser's last name\n{% enddocs %}\n\n{% docs voter_registration_status %}\nUser's registration status. (e.g. registration_complete, confirmed, uncertain) \n{% enddocs %}\n\n{% docs finish_with_state %}\nIf the registrant was eligible to use and passed through to complete their registration with their state\u2019s OVR system, it will be indicated in this field (direct quote from Rock-The-Vote documentation). Yes/No value in field.\n{% enddocs %}\n\n{% docs reportback_volume %}\nThis field returns 1 if non voter-reg action, since campaigns team only counts those a 1 reportback. If voter-reg action, we want to count quantity of post as number of registered voters.\n{% enddocs %}\n\n{% docs address_street_1 %}\nFirst line of user's street address\n{% enddocs %}\n\n{% docs address_street_2 %}\nSecond line of user's street address\n{% enddocs %}\n\n{% docs city %}\nUser's city\n{% enddocs %}\n\n{% docs state %}\nUser's state\n{% enddocs %}\n\n{% docs country %}\nUser's country\n{% enddocs %}\n\n{% docs language %}\nUser's language\n{% enddocs %}\n\n{% docs cio_status %}\nStatus of user from CIO. (e.g. customer_subscribed, customer_unsubscribed)\n{% enddocs %}\n\n{% docs cio_status_timestamp %}\nTimestamp when users's status was updated.\n{% enddocs %}\n\n{% docs sms_status %}\nCurrent SMS status. (e.g. undeliverable, unknown)\n{% enddocs %}\n\n{% docs source_detail %}\nDetails of the origin of the user. (e.g. tell_a_friend, other, opt_in_path/197981)\n{% enddocs %}\n\n{% docs badges %}\nWhether the user has any badges. \n{% enddocs %}\n\n{% docs refer_friends %}\nWhether the user is a part of the refer a friend campaign. \n{% enddocs %}\n\n{% docs subscribed_member %}\nWhether the user is subscribed. \n{% enddocs %}\n\n{% docs last_updated_at %}\nTimestamp when users's was updated.\n{% enddocs %}\n\n{% docs school_id %}\nUnique identifier for the user's school. This info comes from the school finder.\n{% enddocs %}\n\n{% docs newsletter_topic %}\nNewsletter topic. (e.g. community, lifestyle)\n{% enddocs %}\n\n{% docs user_agent %}\nFull user agent string for a user's browser (e.g. \"Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:24.0) Gecko/20100101 Firefox/24.0\")\n{% enddocs %}\n\n{% docs drupal_id %}\nOld Drupal user ID\n{% enddocs %}\n\n{% docs campaigns %}\nCampaigns a user is signed up for.\n{% enddocs %}\n\n{% docs audit %}\nA very useful field with data containing information about changes to a user, e.g. timestamps when the user subscribed and unsubscribed.\n{% enddocs %}\n\n{% docs voting_plan_status %}\nThe indication of the user's plan to vote, e.g. voting, not_voting, cant_vote\n{% enddocs %}\n\n{% docs voting_plan_time_of_day %}\nThe time of day when the user plans to vote, e.g morning, afternoon, evening\n{% enddocs %}\n\n{% docs voting_plan_method_of_transport %}\nHow the user plans to get to their polling place. e.g. walk, drive\n{% enddocs %}\n\n{% docs voting_plan_attending_with %}\nWith Whom the user plans to go voting, e.g. family, friends, alone\n{% enddocs %}\n\n{% docs feature_flags %}\nJSON containing info on features like badges and refer-a-friend.\n{% enddocs %}\n\n{% docs dbt_updated_at %}\nDBT snapshot table data. The updated_at timestamp of the source record when this snapshot row was inserted.\n{% enddocs %}\n\n{% docs dbt_scd_id %}\nDBT snapshot table data. A unique key generated for each snapshotted record.\n{% enddocs %}\n\n{% docs dbt_valid_from %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this snapshot row was first inserted\n{% enddocs %}\n\n{% docs dbt_valid_to %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this row row became invalidated.\n{% enddocs %}\n\n{% docs google_id %}\nUser's Google ID obtained from login.\n{% enddocs %}\n\n{% docs causes %}\nCauses in which a user is interested. e.g. animal welfare, education, mental_health\n{% enddocs %}\n\n{% docs email_subscription_status %}\nEmail subscription status of the user\n{% enddocs %}\n\n{% docs role %}\nUser's role, e.g. user, staff\n{% enddocs %}\n\n{% docs cio_backfilled %}\nWhether this user's data was backfilled from CIO\n{% enddocs %}\n\n{% docs addr_source %}\nWhere the user submitted their address, e.g. sms, GDPR\n{% enddocs %}\n\n{% docs email_subscription_topics %}\nEmail subscription topics correspond to categories in CIO in which the user is interested. e.g. lifestyle, community, scholarship\n{% enddocs %}\n\n{% docs sms_paused %}\nWhether we've paused sending sms messages to the user.\n{% enddocs %}\n\n\n\n\n", "name": "campaign_node_id", "unique_id": "ds_dbt.campaign_node_id", "block_contents": "Internal unique node id for the campaign"}, "ds_dbt.campaign_node_id_title": {"root_path": "/Users/mrich/projects/quasar/quasar/dbt", "resource_type": "docs", "path": "schema.md", "original_file_path": "models/schema.md", "package_name": "ds_dbt", "file_contents": "\n{% docs click_id %}\nThis is a unique identifier for each click\n{% enddocs %}\n\n{% docs click_time %}\nTimestamp when user clicked.\n{% enddocs %}\n\n{% docs shortened %}\nShortened URL\n{% enddocs %}\n\n{% docs target_url %}\nURL where the user will be directed\n{% enddocs %}\n\n{% docs broadcast_id %}\nID of the broadcast that generated the shortened URL\n{% enddocs %}\n\n{% docs source %}\nSource of the URL (e.g. SMS, web), origin of the post (e.g. phoenix-web, phoenix-ashes, sms), or source where user was acquired. (e.g. sms, phoenix-next)\n{% enddocs %}\n\n{% docs interaction_type %}\nHow the user interacted with the link (e.g. preview, click)\n{% enddocs %}\n\n{% docs id %}\nUnique identifier for the post\n{% enddocs %}\n\n{% docs type %}\nType of post (e.g. photo)\n{% enddocs %}\n\n{% docs action %}\nPost action (e.g. DefendDreamers_Nov9_CongressCalls, GunViolence2018_Feb15_ParklandResponse)\n{% enddocs %}\n\n{% docs status %}\nPost status (e.g. accepted, rejected)\n{% enddocs %}\n\n{% docs quantity %}\nNumerical quantity of items specified in the call to action (e.g. 10, 200)\n{% enddocs %}\n\n{% docs source_bucket %}\nGrouping bucket for origin of the post (e.g. web, sms) \n{% enddocs %}\n\n{% docs created_at %}\nWhen the item was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs updated_at %}\nWhen the item was updated in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs text %}\nText of the post (e.g. \"Zoo animals and a super hero trying to help too!\") \n{% enddocs %}\n\n{% docs signup_id %}\nUnique identifier for the signup \n{% enddocs %}\n\n{% docs post_class %}\nClass of the signup (e.g. \"photo - default\", \"phone-call - DefendDreamers_Jan16_BothBodies\")\n{% enddocs %}\n\n{% docs is_accepted %}\nWhether the post has been accepted to be displayed to the public on the website\n{% enddocs %}\n\n{% docs action_id %}\nInternal identifier of the action \n{% enddocs %}\n\n{% docs location %}\nLocation where the action takes place (e.g. US-NY)\n{% enddocs %}\n\n{% docs postal_code %}\nPostal code where the action takes place\n{% enddocs %}\n\n{% docs is_reportback %}\nWhether the post is a reportback. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs civic_action %}\nWhether the post is a Civic Action. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs scholarship_entry %}\nWhether the post is a Scholarship Entry. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs why_participated %}\nWhy the user participated in this action. Entered by the user.\n{% enddocs %}\n\n{% docs details %}\nDetails about the post. Contains contentfulId and other information (e.g. {\"campaignContentfulId\":\"6ATBgGEQEeJoIcxs1qbwaC\"})\n{% enddocs %}\n\n{% docs email %}\nEmail address of the user.\n{% enddocs %}\n\n{% docs source_details %}\nDetails about the source of the item. This is sometimes represented as a JSON object, and for other tables like Turbovote its represented as a string. (e.g. \"{\"contentful_id\":\"3CTLlXfbwtz1FOMpl31SKV\",\"utm_source\":\"scholarship_listing\",\"utm_medium\":\"referral\",\"utm_campaign\":\"fastweb_2019_08\"}\", newsletter_456)\n{% enddocs %}\n\n{% docs campaign_id %}\nThis is a unique identifier for the campaign\n{% enddocs %}\n\n{% docs campaign_run_id %}\nUnique identifier for the campaign run\n{% enddocs %}\n\n{% docs campaign_name %}\nName of the campaign\n{% enddocs %}\n\n{% docs campaign_cause %}\nCampaign cause (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_run_start_date %}\nStart date of the campaign run\n{% enddocs %}\n\n{% docs campaign_run_end_date %}\nEnd date of the campaign run\n{% enddocs %}\n\n{% docs campaign_created_date %}\nWhen the campaign was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs campaign_node_id %}\nInternal unique node id for the campaign\n{% enddocs %}\n\n{% docs campaign_node_id_title %}\nCampaign title\n{% enddocs %}\n\n{% docs campaign_run_id_title %}\nTitle of the campaign run\n{% enddocs %}\n\n{% docs campaign_action_type %}\nCampaign action type (eg. Make Something, Share Something)\n{% enddocs %}\n\n{% docs campaign_cause_type %}\nCampaign cause type (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_noun %}\nNoun applicable to the user's action\n{% enddocs %}\n\n{% docs campaign_verb %}\nVerb describing the action the user should take\n{% enddocs %}\n\n{% docs campaign_cta %}\nCampaign's call to action\n{% enddocs %}\n\n{% docs campaign_language %}\n\"Language in which the campaign is available\"\n{% enddocs %}\n\n{% docs agent_id %}\nIf set, the content type of the picture the member is sending us. Exp. image/png.\n{% enddocs %}\n\n{% docs attachment_content_type %}\nIf set, the handle of the Front agent this outbound support message is from.\n{% enddocs %}\n\n{% docs topic %}\nHolds a reference to the **last** campaign topic the member's conversation was in. This is useful to allow members to talk to Gambit and get quick responses (through Rivescript), without Gambit completely forgetting what state the member's interaction with a campaign topic was in.\n{% enddocs %}\n\n{% docs action_serial_id %}\nSerial id for the user's action. Depends on the source of the action. May be the bertly click id, sms message id, etc.\n{% enddocs %}\n\n{% docs channel %}\nChannel for the user's action. Depends on the source of the action. (e.g. web, sms)\n{% enddocs %}\n\n{% docs first_action_month %}\nMonth during which the user took their first action. \n{% enddocs %}\n\n{% docs event_id %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs event_source %}\nApplication source for event (eg. Phoenix, Northstar)\n{% enddocs %}\n\n{% docs event_datetime %}\nWhen the event occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs event_name %}\nName of the event (eg. northstar_submitted_register, https://docs.google.com/spreadsheets/d/1lm-fGrIm85nUTxSojqyCt_Ehmm1zEbViFhKpxcJiz1A/edit#gid=406441516)\n{% enddocs %}\n\n{% docs event_type %}\nType of event (pv = 'Page View', se = 'Structured Event')\n{% enddocs %}\n\n{% docs host %}\nURL host where event occurred (eg. www.dosomething.org or identity.dosomething.org)\n{% enddocs %}\n\n{% docs path %}\nURL path event occurred at (eg. /login or /us/campaigns/huddle-for-heroes)\n{% enddocs %}\n\n{% docs query_parameters %}\nOptional query parameters for the request (eg. query=huddle)\n{% enddocs %}\n\n{% docs se_category %}\nCategory of event (eg. focused_field, authentication) - Custom structured event\n{% enddocs %}\n\n{% docs se_action %}\nAction performed / event name (eg. form_submitted, action_failed) - Custom structured event\n{% enddocs %}\n\n{% docs se_label %}\nThe object of the action (eg. first_name, register, voter_reg_status) - Custom structured event\n{% enddocs %}\n\n{% docs session_id %}\nUnique identifier of the user's session\n{% enddocs %}\n\n{% docs session_counter %}\nHow many sessions a user has started\n{% enddocs %}\n\n{% docs browser_size %}\nWhich type of browser a user is using (eg. Mobile, Desktop)\n{% enddocs %}\n\n{% docs northstar_id %}\nThe Northstar ID of the user who generated the event\n{% enddocs %}\n\n{% docs device_id %}\nID of the device used\n{% enddocs %}\n\n{% docs referrer_host %}\nURL host of the referring site (eg. google.com)\n{% enddocs %}\n\n{% docs referrer_path %}\nURL path from referring site (eg. /10-stats-on-teen-drug-and-alcohol-use/)\n{% enddocs %}\n\n{% docs referrer_source %}\nReferrer source name (eg. Google, Facebook)\n{% enddocs %}\n\n{% docs utm_source %}\nTracks where the traffic is coming from. (eg. scholarship_listing, Facebook)\n{% enddocs %}\n\n{% docs utm_medium %}\nHow the traffic got to the platform (eg. referral, CPC)\n{% enddocs %}\n\n{% docs utm_campaign %}\nTracks which campaign the traffic was generated by. Shows up in Google Analytics as Campaign Name (eg. editorial_newsletter)\n{% enddocs %}\n\n{% docs url %}\nURL of campaign (eg. https://dosome.click/nyn5m7)\n{% enddocs %}\n\n{% docs modal_type %}\nNULL or SURVEY_MODAL\n{% enddocs %}\n\n{% docs landing_datetime %}\nWhen the session started in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs ending_datetime %}\nWhen the session ended in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs session_duration_seconds %}\nSession duration in seconds\n{% enddocs %}\n\n{% docs num_pages_views %}\nNumber of pages viewed in session\n{% enddocs %}\n\n{% docs landing_page %}\nFirst page the user viewed in the session (eg. /us/facts/11-facts-about-bp-oil-spill)\n{% enddocs %}\n\n{% docs exit_page %}\n\"Which page the user ended or exited their session from (eg. /us/campaigns/green-your-getaway)\"\n{% enddocs %}\n\n{% docs days_since_last_session %}\n\"Days since their last session.\"\n{% enddocs %}\n\n{% docs post_type %}\nType of post, (e.g. photo, voter-reg)\n{% enddocs %}\n\n{% docs noun %}\nNoun that corresponds to the item in the call to action that was delivered. (e.g. drawings, tweets)\n{% enddocs %}\n\n{% docs verb %}\nVerb corresponding to the action the user took. (e.g. shared, sent, taken)\n{% enddocs %}\n\n{% docs deleted_at %}\nDate time in UTC when a user deleted their post.\n{% enddocs %}\n\n{% docs _fivetran_deleted %}\nMarks rows that were deleted in the source table\n{% enddocs %}\n\n{% docs _fivetran_synced %}\n(UTC timestamp) keeps track of when each row was last successfully synced\n{% enddocs %}\n\n{% docs reportback %}\nWhether the post is a reportback \n{% enddocs %}\n\n{% docs active %}\nWhether the user is active \n{% enddocs %}\n\n{% docs anonymous %}\nWhether the user is anonymous when making the post \n{% enddocs %}\n\n{% docs callpower_campaign_id %}\nUnique ID corresponding to the Callpower campaign. Callpower allows users to record messages for their representatives.\n{% enddocs %}\n\n{% docs quiz %}\nWhether the post is a quiz \n{% enddocs %}\n\n{% docs action_type %}\nType of action the user took. (e.g. share-something, donate-something)\n{% enddocs %}\n\n{% docs online %}\nWhether the action is a online as opposed to IRL.\n{% enddocs %}\n\n{% docs time_commitment %}\nEstimated time required to do the action (e.g. 3.0+, <0.5)\n{% enddocs %}\n\n{% docs num_signups %}\nQuantity of campaign signups\n{% enddocs %}\n\n{% docs most_recent_signup %}\nTimestamp of the most recent signup in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs num_rbs %}\nQuantity of reportbacks for the user\n{% enddocs %}\n\n{% docs total_quantity %}\nTotal quantity of items in reportbacks\n{% enddocs %}\n\n{% docs most_recent_rb %}\nWhen the most recent reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs first_rb %}\nWhen the first reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs avg_time_betw_rbs %}\nCalculated average time between reportbacks.\n{% enddocs %}\n\n{% docs avg_days_next_action_after_rb %}\nCalculated average days until next action after reportback\n{% enddocs %}\n\n{% docs days_to_next_action_after_last_rb %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs most_recent_mam_action %}\nMost recent monthly active member qualifying action in UTC (eg. 2018-01-01 12:00:00).\n{% enddocs %}\n\n{% docs most_recent_email_open %}\nMost recent email open in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs most_recent_all_actions %}\nMost recent timestamp of any action in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs last_action_is_rb %}\nWhether the last action the user took was a reportback\n{% enddocs %}\n\n{% docs days_since_last_action %}\nDays since the user's last action\n{% enddocs %}\n\n{% docs time_to_first_rb %}\nHow much time after registering until the user's first reportback\n{% enddocs %}\n\n{% docs sms_unsubscribed_at %}\nTimestamp of when user unsubscribed from SMS messaging\n{% enddocs %}\n\n{% docs user_unsubscribed_at %}\nTimestamp of when user unsubscribed from email or sms\n{% enddocs %}\n\n{% docs voter_reg_acquisition %}\nWhether the user was an acquisition through voter registration efforts. \n{% enddocs %}\n\n{% docs last_logged_in %}\nDate time in UTC when user last logged in to Northstar\n{% enddocs %}\n\n{% docs last_accessed %}\nDate time in UTC when user last access the website\n{% enddocs %}\n\n{% docs last_messaged_at %}\nDate time in UTC when user was last sent a message via SMS or email\n{% enddocs %}\n\n{% docs facebook_id %}\nUser's facebook id\n{% enddocs %}\n\n{% docs mobile %}\nUsers's mobile phone number\n{% enddocs %}\n\n{% docs birthdate %}\nUser's birthdate\n{% enddocs %}\n\n{% docs first_name %}\nUser's first name\n{% enddocs %}\n\n{% docs last_name %}\nUser's last name\n{% enddocs %}\n\n{% docs voter_registration_status %}\nUser's registration status. (e.g. registration_complete, confirmed, uncertain) \n{% enddocs %}\n\n{% docs finish_with_state %}\nIf the registrant was eligible to use and passed through to complete their registration with their state\u2019s OVR system, it will be indicated in this field (direct quote from Rock-The-Vote documentation). Yes/No value in field.\n{% enddocs %}\n\n{% docs reportback_volume %}\nThis field returns 1 if non voter-reg action, since campaigns team only counts those a 1 reportback. If voter-reg action, we want to count quantity of post as number of registered voters.\n{% enddocs %}\n\n{% docs address_street_1 %}\nFirst line of user's street address\n{% enddocs %}\n\n{% docs address_street_2 %}\nSecond line of user's street address\n{% enddocs %}\n\n{% docs city %}\nUser's city\n{% enddocs %}\n\n{% docs state %}\nUser's state\n{% enddocs %}\n\n{% docs country %}\nUser's country\n{% enddocs %}\n\n{% docs language %}\nUser's language\n{% enddocs %}\n\n{% docs cio_status %}\nStatus of user from CIO. (e.g. customer_subscribed, customer_unsubscribed)\n{% enddocs %}\n\n{% docs cio_status_timestamp %}\nTimestamp when users's status was updated.\n{% enddocs %}\n\n{% docs sms_status %}\nCurrent SMS status. (e.g. undeliverable, unknown)\n{% enddocs %}\n\n{% docs source_detail %}\nDetails of the origin of the user. (e.g. tell_a_friend, other, opt_in_path/197981)\n{% enddocs %}\n\n{% docs badges %}\nWhether the user has any badges. \n{% enddocs %}\n\n{% docs refer_friends %}\nWhether the user is a part of the refer a friend campaign. \n{% enddocs %}\n\n{% docs subscribed_member %}\nWhether the user is subscribed. \n{% enddocs %}\n\n{% docs last_updated_at %}\nTimestamp when users's was updated.\n{% enddocs %}\n\n{% docs school_id %}\nUnique identifier for the user's school. This info comes from the school finder.\n{% enddocs %}\n\n{% docs newsletter_topic %}\nNewsletter topic. (e.g. community, lifestyle)\n{% enddocs %}\n\n{% docs user_agent %}\nFull user agent string for a user's browser (e.g. \"Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:24.0) Gecko/20100101 Firefox/24.0\")\n{% enddocs %}\n\n{% docs drupal_id %}\nOld Drupal user ID\n{% enddocs %}\n\n{% docs campaigns %}\nCampaigns a user is signed up for.\n{% enddocs %}\n\n{% docs audit %}\nA very useful field with data containing information about changes to a user, e.g. timestamps when the user subscribed and unsubscribed.\n{% enddocs %}\n\n{% docs voting_plan_status %}\nThe indication of the user's plan to vote, e.g. voting, not_voting, cant_vote\n{% enddocs %}\n\n{% docs voting_plan_time_of_day %}\nThe time of day when the user plans to vote, e.g morning, afternoon, evening\n{% enddocs %}\n\n{% docs voting_plan_method_of_transport %}\nHow the user plans to get to their polling place. e.g. walk, drive\n{% enddocs %}\n\n{% docs voting_plan_attending_with %}\nWith Whom the user plans to go voting, e.g. family, friends, alone\n{% enddocs %}\n\n{% docs feature_flags %}\nJSON containing info on features like badges and refer-a-friend.\n{% enddocs %}\n\n{% docs dbt_updated_at %}\nDBT snapshot table data. The updated_at timestamp of the source record when this snapshot row was inserted.\n{% enddocs %}\n\n{% docs dbt_scd_id %}\nDBT snapshot table data. A unique key generated for each snapshotted record.\n{% enddocs %}\n\n{% docs dbt_valid_from %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this snapshot row was first inserted\n{% enddocs %}\n\n{% docs dbt_valid_to %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this row row became invalidated.\n{% enddocs %}\n\n{% docs google_id %}\nUser's Google ID obtained from login.\n{% enddocs %}\n\n{% docs causes %}\nCauses in which a user is interested. e.g. animal welfare, education, mental_health\n{% enddocs %}\n\n{% docs email_subscription_status %}\nEmail subscription status of the user\n{% enddocs %}\n\n{% docs role %}\nUser's role, e.g. user, staff\n{% enddocs %}\n\n{% docs cio_backfilled %}\nWhether this user's data was backfilled from CIO\n{% enddocs %}\n\n{% docs addr_source %}\nWhere the user submitted their address, e.g. sms, GDPR\n{% enddocs %}\n\n{% docs email_subscription_topics %}\nEmail subscription topics correspond to categories in CIO in which the user is interested. e.g. lifestyle, community, scholarship\n{% enddocs %}\n\n{% docs sms_paused %}\nWhether we've paused sending sms messages to the user.\n{% enddocs %}\n\n\n\n\n", "name": "campaign_node_id_title", "unique_id": "ds_dbt.campaign_node_id_title", "block_contents": "Campaign title"}, "ds_dbt.campaign_run_id_title": {"root_path": "/Users/mrich/projects/quasar/quasar/dbt", "resource_type": "docs", "path": "schema.md", "original_file_path": "models/schema.md", "package_name": "ds_dbt", "file_contents": "\n{% docs click_id %}\nThis is a unique identifier for each click\n{% enddocs %}\n\n{% docs click_time %}\nTimestamp when user clicked.\n{% enddocs %}\n\n{% docs shortened %}\nShortened URL\n{% enddocs %}\n\n{% docs target_url %}\nURL where the user will be directed\n{% enddocs %}\n\n{% docs broadcast_id %}\nID of the broadcast that generated the shortened URL\n{% enddocs %}\n\n{% docs source %}\nSource of the URL (e.g. SMS, web), origin of the post (e.g. phoenix-web, phoenix-ashes, sms), or source where user was acquired. (e.g. sms, phoenix-next)\n{% enddocs %}\n\n{% docs interaction_type %}\nHow the user interacted with the link (e.g. preview, click)\n{% enddocs %}\n\n{% docs id %}\nUnique identifier for the post\n{% enddocs %}\n\n{% docs type %}\nType of post (e.g. photo)\n{% enddocs %}\n\n{% docs action %}\nPost action (e.g. DefendDreamers_Nov9_CongressCalls, GunViolence2018_Feb15_ParklandResponse)\n{% enddocs %}\n\n{% docs status %}\nPost status (e.g. accepted, rejected)\n{% enddocs %}\n\n{% docs quantity %}\nNumerical quantity of items specified in the call to action (e.g. 10, 200)\n{% enddocs %}\n\n{% docs source_bucket %}\nGrouping bucket for origin of the post (e.g. web, sms) \n{% enddocs %}\n\n{% docs created_at %}\nWhen the item was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs updated_at %}\nWhen the item was updated in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs text %}\nText of the post (e.g. \"Zoo animals and a super hero trying to help too!\") \n{% enddocs %}\n\n{% docs signup_id %}\nUnique identifier for the signup \n{% enddocs %}\n\n{% docs post_class %}\nClass of the signup (e.g. \"photo - default\", \"phone-call - DefendDreamers_Jan16_BothBodies\")\n{% enddocs %}\n\n{% docs is_accepted %}\nWhether the post has been accepted to be displayed to the public on the website\n{% enddocs %}\n\n{% docs action_id %}\nInternal identifier of the action \n{% enddocs %}\n\n{% docs location %}\nLocation where the action takes place (e.g. US-NY)\n{% enddocs %}\n\n{% docs postal_code %}\nPostal code where the action takes place\n{% enddocs %}\n\n{% docs is_reportback %}\nWhether the post is a reportback. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs civic_action %}\nWhether the post is a Civic Action. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs scholarship_entry %}\nWhether the post is a Scholarship Entry. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs why_participated %}\nWhy the user participated in this action. Entered by the user.\n{% enddocs %}\n\n{% docs details %}\nDetails about the post. Contains contentfulId and other information (e.g. {\"campaignContentfulId\":\"6ATBgGEQEeJoIcxs1qbwaC\"})\n{% enddocs %}\n\n{% docs email %}\nEmail address of the user.\n{% enddocs %}\n\n{% docs source_details %}\nDetails about the source of the item. This is sometimes represented as a JSON object, and for other tables like Turbovote its represented as a string. (e.g. \"{\"contentful_id\":\"3CTLlXfbwtz1FOMpl31SKV\",\"utm_source\":\"scholarship_listing\",\"utm_medium\":\"referral\",\"utm_campaign\":\"fastweb_2019_08\"}\", newsletter_456)\n{% enddocs %}\n\n{% docs campaign_id %}\nThis is a unique identifier for the campaign\n{% enddocs %}\n\n{% docs campaign_run_id %}\nUnique identifier for the campaign run\n{% enddocs %}\n\n{% docs campaign_name %}\nName of the campaign\n{% enddocs %}\n\n{% docs campaign_cause %}\nCampaign cause (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_run_start_date %}\nStart date of the campaign run\n{% enddocs %}\n\n{% docs campaign_run_end_date %}\nEnd date of the campaign run\n{% enddocs %}\n\n{% docs campaign_created_date %}\nWhen the campaign was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs campaign_node_id %}\nInternal unique node id for the campaign\n{% enddocs %}\n\n{% docs campaign_node_id_title %}\nCampaign title\n{% enddocs %}\n\n{% docs campaign_run_id_title %}\nTitle of the campaign run\n{% enddocs %}\n\n{% docs campaign_action_type %}\nCampaign action type (eg. Make Something, Share Something)\n{% enddocs %}\n\n{% docs campaign_cause_type %}\nCampaign cause type (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_noun %}\nNoun applicable to the user's action\n{% enddocs %}\n\n{% docs campaign_verb %}\nVerb describing the action the user should take\n{% enddocs %}\n\n{% docs campaign_cta %}\nCampaign's call to action\n{% enddocs %}\n\n{% docs campaign_language %}\n\"Language in which the campaign is available\"\n{% enddocs %}\n\n{% docs agent_id %}\nIf set, the content type of the picture the member is sending us. Exp. image/png.\n{% enddocs %}\n\n{% docs attachment_content_type %}\nIf set, the handle of the Front agent this outbound support message is from.\n{% enddocs %}\n\n{% docs topic %}\nHolds a reference to the **last** campaign topic the member's conversation was in. This is useful to allow members to talk to Gambit and get quick responses (through Rivescript), without Gambit completely forgetting what state the member's interaction with a campaign topic was in.\n{% enddocs %}\n\n{% docs action_serial_id %}\nSerial id for the user's action. Depends on the source of the action. May be the bertly click id, sms message id, etc.\n{% enddocs %}\n\n{% docs channel %}\nChannel for the user's action. Depends on the source of the action. (e.g. web, sms)\n{% enddocs %}\n\n{% docs first_action_month %}\nMonth during which the user took their first action. \n{% enddocs %}\n\n{% docs event_id %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs event_source %}\nApplication source for event (eg. Phoenix, Northstar)\n{% enddocs %}\n\n{% docs event_datetime %}\nWhen the event occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs event_name %}\nName of the event (eg. northstar_submitted_register, https://docs.google.com/spreadsheets/d/1lm-fGrIm85nUTxSojqyCt_Ehmm1zEbViFhKpxcJiz1A/edit#gid=406441516)\n{% enddocs %}\n\n{% docs event_type %}\nType of event (pv = 'Page View', se = 'Structured Event')\n{% enddocs %}\n\n{% docs host %}\nURL host where event occurred (eg. www.dosomething.org or identity.dosomething.org)\n{% enddocs %}\n\n{% docs path %}\nURL path event occurred at (eg. /login or /us/campaigns/huddle-for-heroes)\n{% enddocs %}\n\n{% docs query_parameters %}\nOptional query parameters for the request (eg. query=huddle)\n{% enddocs %}\n\n{% docs se_category %}\nCategory of event (eg. focused_field, authentication) - Custom structured event\n{% enddocs %}\n\n{% docs se_action %}\nAction performed / event name (eg. form_submitted, action_failed) - Custom structured event\n{% enddocs %}\n\n{% docs se_label %}\nThe object of the action (eg. first_name, register, voter_reg_status) - Custom structured event\n{% enddocs %}\n\n{% docs session_id %}\nUnique identifier of the user's session\n{% enddocs %}\n\n{% docs session_counter %}\nHow many sessions a user has started\n{% enddocs %}\n\n{% docs browser_size %}\nWhich type of browser a user is using (eg. Mobile, Desktop)\n{% enddocs %}\n\n{% docs northstar_id %}\nThe Northstar ID of the user who generated the event\n{% enddocs %}\n\n{% docs device_id %}\nID of the device used\n{% enddocs %}\n\n{% docs referrer_host %}\nURL host of the referring site (eg. google.com)\n{% enddocs %}\n\n{% docs referrer_path %}\nURL path from referring site (eg. /10-stats-on-teen-drug-and-alcohol-use/)\n{% enddocs %}\n\n{% docs referrer_source %}\nReferrer source name (eg. Google, Facebook)\n{% enddocs %}\n\n{% docs utm_source %}\nTracks where the traffic is coming from. (eg. scholarship_listing, Facebook)\n{% enddocs %}\n\n{% docs utm_medium %}\nHow the traffic got to the platform (eg. referral, CPC)\n{% enddocs %}\n\n{% docs utm_campaign %}\nTracks which campaign the traffic was generated by. Shows up in Google Analytics as Campaign Name (eg. editorial_newsletter)\n{% enddocs %}\n\n{% docs url %}\nURL of campaign (eg. https://dosome.click/nyn5m7)\n{% enddocs %}\n\n{% docs modal_type %}\nNULL or SURVEY_MODAL\n{% enddocs %}\n\n{% docs landing_datetime %}\nWhen the session started in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs ending_datetime %}\nWhen the session ended in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs session_duration_seconds %}\nSession duration in seconds\n{% enddocs %}\n\n{% docs num_pages_views %}\nNumber of pages viewed in session\n{% enddocs %}\n\n{% docs landing_page %}\nFirst page the user viewed in the session (eg. /us/facts/11-facts-about-bp-oil-spill)\n{% enddocs %}\n\n{% docs exit_page %}\n\"Which page the user ended or exited their session from (eg. /us/campaigns/green-your-getaway)\"\n{% enddocs %}\n\n{% docs days_since_last_session %}\n\"Days since their last session.\"\n{% enddocs %}\n\n{% docs post_type %}\nType of post, (e.g. photo, voter-reg)\n{% enddocs %}\n\n{% docs noun %}\nNoun that corresponds to the item in the call to action that was delivered. (e.g. drawings, tweets)\n{% enddocs %}\n\n{% docs verb %}\nVerb corresponding to the action the user took. (e.g. shared, sent, taken)\n{% enddocs %}\n\n{% docs deleted_at %}\nDate time in UTC when a user deleted their post.\n{% enddocs %}\n\n{% docs _fivetran_deleted %}\nMarks rows that were deleted in the source table\n{% enddocs %}\n\n{% docs _fivetran_synced %}\n(UTC timestamp) keeps track of when each row was last successfully synced\n{% enddocs %}\n\n{% docs reportback %}\nWhether the post is a reportback \n{% enddocs %}\n\n{% docs active %}\nWhether the user is active \n{% enddocs %}\n\n{% docs anonymous %}\nWhether the user is anonymous when making the post \n{% enddocs %}\n\n{% docs callpower_campaign_id %}\nUnique ID corresponding to the Callpower campaign. Callpower allows users to record messages for their representatives.\n{% enddocs %}\n\n{% docs quiz %}\nWhether the post is a quiz \n{% enddocs %}\n\n{% docs action_type %}\nType of action the user took. (e.g. share-something, donate-something)\n{% enddocs %}\n\n{% docs online %}\nWhether the action is a online as opposed to IRL.\n{% enddocs %}\n\n{% docs time_commitment %}\nEstimated time required to do the action (e.g. 3.0+, <0.5)\n{% enddocs %}\n\n{% docs num_signups %}\nQuantity of campaign signups\n{% enddocs %}\n\n{% docs most_recent_signup %}\nTimestamp of the most recent signup in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs num_rbs %}\nQuantity of reportbacks for the user\n{% enddocs %}\n\n{% docs total_quantity %}\nTotal quantity of items in reportbacks\n{% enddocs %}\n\n{% docs most_recent_rb %}\nWhen the most recent reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs first_rb %}\nWhen the first reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs avg_time_betw_rbs %}\nCalculated average time between reportbacks.\n{% enddocs %}\n\n{% docs avg_days_next_action_after_rb %}\nCalculated average days until next action after reportback\n{% enddocs %}\n\n{% docs days_to_next_action_after_last_rb %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs most_recent_mam_action %}\nMost recent monthly active member qualifying action in UTC (eg. 2018-01-01 12:00:00).\n{% enddocs %}\n\n{% docs most_recent_email_open %}\nMost recent email open in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs most_recent_all_actions %}\nMost recent timestamp of any action in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs last_action_is_rb %}\nWhether the last action the user took was a reportback\n{% enddocs %}\n\n{% docs days_since_last_action %}\nDays since the user's last action\n{% enddocs %}\n\n{% docs time_to_first_rb %}\nHow much time after registering until the user's first reportback\n{% enddocs %}\n\n{% docs sms_unsubscribed_at %}\nTimestamp of when user unsubscribed from SMS messaging\n{% enddocs %}\n\n{% docs user_unsubscribed_at %}\nTimestamp of when user unsubscribed from email or sms\n{% enddocs %}\n\n{% docs voter_reg_acquisition %}\nWhether the user was an acquisition through voter registration efforts. \n{% enddocs %}\n\n{% docs last_logged_in %}\nDate time in UTC when user last logged in to Northstar\n{% enddocs %}\n\n{% docs last_accessed %}\nDate time in UTC when user last access the website\n{% enddocs %}\n\n{% docs last_messaged_at %}\nDate time in UTC when user was last sent a message via SMS or email\n{% enddocs %}\n\n{% docs facebook_id %}\nUser's facebook id\n{% enddocs %}\n\n{% docs mobile %}\nUsers's mobile phone number\n{% enddocs %}\n\n{% docs birthdate %}\nUser's birthdate\n{% enddocs %}\n\n{% docs first_name %}\nUser's first name\n{% enddocs %}\n\n{% docs last_name %}\nUser's last name\n{% enddocs %}\n\n{% docs voter_registration_status %}\nUser's registration status. (e.g. registration_complete, confirmed, uncertain) \n{% enddocs %}\n\n{% docs finish_with_state %}\nIf the registrant was eligible to use and passed through to complete their registration with their state\u2019s OVR system, it will be indicated in this field (direct quote from Rock-The-Vote documentation). Yes/No value in field.\n{% enddocs %}\n\n{% docs reportback_volume %}\nThis field returns 1 if non voter-reg action, since campaigns team only counts those a 1 reportback. If voter-reg action, we want to count quantity of post as number of registered voters.\n{% enddocs %}\n\n{% docs address_street_1 %}\nFirst line of user's street address\n{% enddocs %}\n\n{% docs address_street_2 %}\nSecond line of user's street address\n{% enddocs %}\n\n{% docs city %}\nUser's city\n{% enddocs %}\n\n{% docs state %}\nUser's state\n{% enddocs %}\n\n{% docs country %}\nUser's country\n{% enddocs %}\n\n{% docs language %}\nUser's language\n{% enddocs %}\n\n{% docs cio_status %}\nStatus of user from CIO. (e.g. customer_subscribed, customer_unsubscribed)\n{% enddocs %}\n\n{% docs cio_status_timestamp %}\nTimestamp when users's status was updated.\n{% enddocs %}\n\n{% docs sms_status %}\nCurrent SMS status. (e.g. undeliverable, unknown)\n{% enddocs %}\n\n{% docs source_detail %}\nDetails of the origin of the user. (e.g. tell_a_friend, other, opt_in_path/197981)\n{% enddocs %}\n\n{% docs badges %}\nWhether the user has any badges. \n{% enddocs %}\n\n{% docs refer_friends %}\nWhether the user is a part of the refer a friend campaign. \n{% enddocs %}\n\n{% docs subscribed_member %}\nWhether the user is subscribed. \n{% enddocs %}\n\n{% docs last_updated_at %}\nTimestamp when users's was updated.\n{% enddocs %}\n\n{% docs school_id %}\nUnique identifier for the user's school. This info comes from the school finder.\n{% enddocs %}\n\n{% docs newsletter_topic %}\nNewsletter topic. (e.g. community, lifestyle)\n{% enddocs %}\n\n{% docs user_agent %}\nFull user agent string for a user's browser (e.g. \"Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:24.0) Gecko/20100101 Firefox/24.0\")\n{% enddocs %}\n\n{% docs drupal_id %}\nOld Drupal user ID\n{% enddocs %}\n\n{% docs campaigns %}\nCampaigns a user is signed up for.\n{% enddocs %}\n\n{% docs audit %}\nA very useful field with data containing information about changes to a user, e.g. timestamps when the user subscribed and unsubscribed.\n{% enddocs %}\n\n{% docs voting_plan_status %}\nThe indication of the user's plan to vote, e.g. voting, not_voting, cant_vote\n{% enddocs %}\n\n{% docs voting_plan_time_of_day %}\nThe time of day when the user plans to vote, e.g morning, afternoon, evening\n{% enddocs %}\n\n{% docs voting_plan_method_of_transport %}\nHow the user plans to get to their polling place. e.g. walk, drive\n{% enddocs %}\n\n{% docs voting_plan_attending_with %}\nWith Whom the user plans to go voting, e.g. family, friends, alone\n{% enddocs %}\n\n{% docs feature_flags %}\nJSON containing info on features like badges and refer-a-friend.\n{% enddocs %}\n\n{% docs dbt_updated_at %}\nDBT snapshot table data. The updated_at timestamp of the source record when this snapshot row was inserted.\n{% enddocs %}\n\n{% docs dbt_scd_id %}\nDBT snapshot table data. A unique key generated for each snapshotted record.\n{% enddocs %}\n\n{% docs dbt_valid_from %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this snapshot row was first inserted\n{% enddocs %}\n\n{% docs dbt_valid_to %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this row row became invalidated.\n{% enddocs %}\n\n{% docs google_id %}\nUser's Google ID obtained from login.\n{% enddocs %}\n\n{% docs causes %}\nCauses in which a user is interested. e.g. animal welfare, education, mental_health\n{% enddocs %}\n\n{% docs email_subscription_status %}\nEmail subscription status of the user\n{% enddocs %}\n\n{% docs role %}\nUser's role, e.g. user, staff\n{% enddocs %}\n\n{% docs cio_backfilled %}\nWhether this user's data was backfilled from CIO\n{% enddocs %}\n\n{% docs addr_source %}\nWhere the user submitted their address, e.g. sms, GDPR\n{% enddocs %}\n\n{% docs email_subscription_topics %}\nEmail subscription topics correspond to categories in CIO in which the user is interested. e.g. lifestyle, community, scholarship\n{% enddocs %}\n\n{% docs sms_paused %}\nWhether we've paused sending sms messages to the user.\n{% enddocs %}\n\n\n\n\n", "name": "campaign_run_id_title", "unique_id": "ds_dbt.campaign_run_id_title", "block_contents": "Title of the campaign run"}, "ds_dbt.campaign_action_type": {"root_path": "/Users/mrich/projects/quasar/quasar/dbt", "resource_type": "docs", "path": "schema.md", "original_file_path": "models/schema.md", "package_name": "ds_dbt", "file_contents": "\n{% docs click_id %}\nThis is a unique identifier for each click\n{% enddocs %}\n\n{% docs click_time %}\nTimestamp when user clicked.\n{% enddocs %}\n\n{% docs shortened %}\nShortened URL\n{% enddocs %}\n\n{% docs target_url %}\nURL where the user will be directed\n{% enddocs %}\n\n{% docs broadcast_id %}\nID of the broadcast that generated the shortened URL\n{% enddocs %}\n\n{% docs source %}\nSource of the URL (e.g. SMS, web), origin of the post (e.g. phoenix-web, phoenix-ashes, sms), or source where user was acquired. (e.g. sms, phoenix-next)\n{% enddocs %}\n\n{% docs interaction_type %}\nHow the user interacted with the link (e.g. preview, click)\n{% enddocs %}\n\n{% docs id %}\nUnique identifier for the post\n{% enddocs %}\n\n{% docs type %}\nType of post (e.g. photo)\n{% enddocs %}\n\n{% docs action %}\nPost action (e.g. DefendDreamers_Nov9_CongressCalls, GunViolence2018_Feb15_ParklandResponse)\n{% enddocs %}\n\n{% docs status %}\nPost status (e.g. accepted, rejected)\n{% enddocs %}\n\n{% docs quantity %}\nNumerical quantity of items specified in the call to action (e.g. 10, 200)\n{% enddocs %}\n\n{% docs source_bucket %}\nGrouping bucket for origin of the post (e.g. web, sms) \n{% enddocs %}\n\n{% docs created_at %}\nWhen the item was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs updated_at %}\nWhen the item was updated in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs text %}\nText of the post (e.g. \"Zoo animals and a super hero trying to help too!\") \n{% enddocs %}\n\n{% docs signup_id %}\nUnique identifier for the signup \n{% enddocs %}\n\n{% docs post_class %}\nClass of the signup (e.g. \"photo - default\", \"phone-call - DefendDreamers_Jan16_BothBodies\")\n{% enddocs %}\n\n{% docs is_accepted %}\nWhether the post has been accepted to be displayed to the public on the website\n{% enddocs %}\n\n{% docs action_id %}\nInternal identifier of the action \n{% enddocs %}\n\n{% docs location %}\nLocation where the action takes place (e.g. US-NY)\n{% enddocs %}\n\n{% docs postal_code %}\nPostal code where the action takes place\n{% enddocs %}\n\n{% docs is_reportback %}\nWhether the post is a reportback. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs civic_action %}\nWhether the post is a Civic Action. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs scholarship_entry %}\nWhether the post is a Scholarship Entry. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs why_participated %}\nWhy the user participated in this action. Entered by the user.\n{% enddocs %}\n\n{% docs details %}\nDetails about the post. Contains contentfulId and other information (e.g. {\"campaignContentfulId\":\"6ATBgGEQEeJoIcxs1qbwaC\"})\n{% enddocs %}\n\n{% docs email %}\nEmail address of the user.\n{% enddocs %}\n\n{% docs source_details %}\nDetails about the source of the item. This is sometimes represented as a JSON object, and for other tables like Turbovote its represented as a string. (e.g. \"{\"contentful_id\":\"3CTLlXfbwtz1FOMpl31SKV\",\"utm_source\":\"scholarship_listing\",\"utm_medium\":\"referral\",\"utm_campaign\":\"fastweb_2019_08\"}\", newsletter_456)\n{% enddocs %}\n\n{% docs campaign_id %}\nThis is a unique identifier for the campaign\n{% enddocs %}\n\n{% docs campaign_run_id %}\nUnique identifier for the campaign run\n{% enddocs %}\n\n{% docs campaign_name %}\nName of the campaign\n{% enddocs %}\n\n{% docs campaign_cause %}\nCampaign cause (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_run_start_date %}\nStart date of the campaign run\n{% enddocs %}\n\n{% docs campaign_run_end_date %}\nEnd date of the campaign run\n{% enddocs %}\n\n{% docs campaign_created_date %}\nWhen the campaign was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs campaign_node_id %}\nInternal unique node id for the campaign\n{% enddocs %}\n\n{% docs campaign_node_id_title %}\nCampaign title\n{% enddocs %}\n\n{% docs campaign_run_id_title %}\nTitle of the campaign run\n{% enddocs %}\n\n{% docs campaign_action_type %}\nCampaign action type (eg. Make Something, Share Something)\n{% enddocs %}\n\n{% docs campaign_cause_type %}\nCampaign cause type (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_noun %}\nNoun applicable to the user's action\n{% enddocs %}\n\n{% docs campaign_verb %}\nVerb describing the action the user should take\n{% enddocs %}\n\n{% docs campaign_cta %}\nCampaign's call to action\n{% enddocs %}\n\n{% docs campaign_language %}\n\"Language in which the campaign is available\"\n{% enddocs %}\n\n{% docs agent_id %}\nIf set, the content type of the picture the member is sending us. Exp. image/png.\n{% enddocs %}\n\n{% docs attachment_content_type %}\nIf set, the handle of the Front agent this outbound support message is from.\n{% enddocs %}\n\n{% docs topic %}\nHolds a reference to the **last** campaign topic the member's conversation was in. This is useful to allow members to talk to Gambit and get quick responses (through Rivescript), without Gambit completely forgetting what state the member's interaction with a campaign topic was in.\n{% enddocs %}\n\n{% docs action_serial_id %}\nSerial id for the user's action. Depends on the source of the action. May be the bertly click id, sms message id, etc.\n{% enddocs %}\n\n{% docs channel %}\nChannel for the user's action. Depends on the source of the action. (e.g. web, sms)\n{% enddocs %}\n\n{% docs first_action_month %}\nMonth during which the user took their first action. \n{% enddocs %}\n\n{% docs event_id %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs event_source %}\nApplication source for event (eg. Phoenix, Northstar)\n{% enddocs %}\n\n{% docs event_datetime %}\nWhen the event occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs event_name %}\nName of the event (eg. northstar_submitted_register, https://docs.google.com/spreadsheets/d/1lm-fGrIm85nUTxSojqyCt_Ehmm1zEbViFhKpxcJiz1A/edit#gid=406441516)\n{% enddocs %}\n\n{% docs event_type %}\nType of event (pv = 'Page View', se = 'Structured Event')\n{% enddocs %}\n\n{% docs host %}\nURL host where event occurred (eg. www.dosomething.org or identity.dosomething.org)\n{% enddocs %}\n\n{% docs path %}\nURL path event occurred at (eg. /login or /us/campaigns/huddle-for-heroes)\n{% enddocs %}\n\n{% docs query_parameters %}\nOptional query parameters for the request (eg. query=huddle)\n{% enddocs %}\n\n{% docs se_category %}\nCategory of event (eg. focused_field, authentication) - Custom structured event\n{% enddocs %}\n\n{% docs se_action %}\nAction performed / event name (eg. form_submitted, action_failed) - Custom structured event\n{% enddocs %}\n\n{% docs se_label %}\nThe object of the action (eg. first_name, register, voter_reg_status) - Custom structured event\n{% enddocs %}\n\n{% docs session_id %}\nUnique identifier of the user's session\n{% enddocs %}\n\n{% docs session_counter %}\nHow many sessions a user has started\n{% enddocs %}\n\n{% docs browser_size %}\nWhich type of browser a user is using (eg. Mobile, Desktop)\n{% enddocs %}\n\n{% docs northstar_id %}\nThe Northstar ID of the user who generated the event\n{% enddocs %}\n\n{% docs device_id %}\nID of the device used\n{% enddocs %}\n\n{% docs referrer_host %}\nURL host of the referring site (eg. google.com)\n{% enddocs %}\n\n{% docs referrer_path %}\nURL path from referring site (eg. /10-stats-on-teen-drug-and-alcohol-use/)\n{% enddocs %}\n\n{% docs referrer_source %}\nReferrer source name (eg. Google, Facebook)\n{% enddocs %}\n\n{% docs utm_source %}\nTracks where the traffic is coming from. (eg. scholarship_listing, Facebook)\n{% enddocs %}\n\n{% docs utm_medium %}\nHow the traffic got to the platform (eg. referral, CPC)\n{% enddocs %}\n\n{% docs utm_campaign %}\nTracks which campaign the traffic was generated by. Shows up in Google Analytics as Campaign Name (eg. editorial_newsletter)\n{% enddocs %}\n\n{% docs url %}\nURL of campaign (eg. https://dosome.click/nyn5m7)\n{% enddocs %}\n\n{% docs modal_type %}\nNULL or SURVEY_MODAL\n{% enddocs %}\n\n{% docs landing_datetime %}\nWhen the session started in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs ending_datetime %}\nWhen the session ended in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs session_duration_seconds %}\nSession duration in seconds\n{% enddocs %}\n\n{% docs num_pages_views %}\nNumber of pages viewed in session\n{% enddocs %}\n\n{% docs landing_page %}\nFirst page the user viewed in the session (eg. /us/facts/11-facts-about-bp-oil-spill)\n{% enddocs %}\n\n{% docs exit_page %}\n\"Which page the user ended or exited their session from (eg. /us/campaigns/green-your-getaway)\"\n{% enddocs %}\n\n{% docs days_since_last_session %}\n\"Days since their last session.\"\n{% enddocs %}\n\n{% docs post_type %}\nType of post, (e.g. photo, voter-reg)\n{% enddocs %}\n\n{% docs noun %}\nNoun that corresponds to the item in the call to action that was delivered. (e.g. drawings, tweets)\n{% enddocs %}\n\n{% docs verb %}\nVerb corresponding to the action the user took. (e.g. shared, sent, taken)\n{% enddocs %}\n\n{% docs deleted_at %}\nDate time in UTC when a user deleted their post.\n{% enddocs %}\n\n{% docs _fivetran_deleted %}\nMarks rows that were deleted in the source table\n{% enddocs %}\n\n{% docs _fivetran_synced %}\n(UTC timestamp) keeps track of when each row was last successfully synced\n{% enddocs %}\n\n{% docs reportback %}\nWhether the post is a reportback \n{% enddocs %}\n\n{% docs active %}\nWhether the user is active \n{% enddocs %}\n\n{% docs anonymous %}\nWhether the user is anonymous when making the post \n{% enddocs %}\n\n{% docs callpower_campaign_id %}\nUnique ID corresponding to the Callpower campaign. Callpower allows users to record messages for their representatives.\n{% enddocs %}\n\n{% docs quiz %}\nWhether the post is a quiz \n{% enddocs %}\n\n{% docs action_type %}\nType of action the user took. (e.g. share-something, donate-something)\n{% enddocs %}\n\n{% docs online %}\nWhether the action is a online as opposed to IRL.\n{% enddocs %}\n\n{% docs time_commitment %}\nEstimated time required to do the action (e.g. 3.0+, <0.5)\n{% enddocs %}\n\n{% docs num_signups %}\nQuantity of campaign signups\n{% enddocs %}\n\n{% docs most_recent_signup %}\nTimestamp of the most recent signup in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs num_rbs %}\nQuantity of reportbacks for the user\n{% enddocs %}\n\n{% docs total_quantity %}\nTotal quantity of items in reportbacks\n{% enddocs %}\n\n{% docs most_recent_rb %}\nWhen the most recent reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs first_rb %}\nWhen the first reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs avg_time_betw_rbs %}\nCalculated average time between reportbacks.\n{% enddocs %}\n\n{% docs avg_days_next_action_after_rb %}\nCalculated average days until next action after reportback\n{% enddocs %}\n\n{% docs days_to_next_action_after_last_rb %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs most_recent_mam_action %}\nMost recent monthly active member qualifying action in UTC (eg. 2018-01-01 12:00:00).\n{% enddocs %}\n\n{% docs most_recent_email_open %}\nMost recent email open in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs most_recent_all_actions %}\nMost recent timestamp of any action in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs last_action_is_rb %}\nWhether the last action the user took was a reportback\n{% enddocs %}\n\n{% docs days_since_last_action %}\nDays since the user's last action\n{% enddocs %}\n\n{% docs time_to_first_rb %}\nHow much time after registering until the user's first reportback\n{% enddocs %}\n\n{% docs sms_unsubscribed_at %}\nTimestamp of when user unsubscribed from SMS messaging\n{% enddocs %}\n\n{% docs user_unsubscribed_at %}\nTimestamp of when user unsubscribed from email or sms\n{% enddocs %}\n\n{% docs voter_reg_acquisition %}\nWhether the user was an acquisition through voter registration efforts. \n{% enddocs %}\n\n{% docs last_logged_in %}\nDate time in UTC when user last logged in to Northstar\n{% enddocs %}\n\n{% docs last_accessed %}\nDate time in UTC when user last access the website\n{% enddocs %}\n\n{% docs last_messaged_at %}\nDate time in UTC when user was last sent a message via SMS or email\n{% enddocs %}\n\n{% docs facebook_id %}\nUser's facebook id\n{% enddocs %}\n\n{% docs mobile %}\nUsers's mobile phone number\n{% enddocs %}\n\n{% docs birthdate %}\nUser's birthdate\n{% enddocs %}\n\n{% docs first_name %}\nUser's first name\n{% enddocs %}\n\n{% docs last_name %}\nUser's last name\n{% enddocs %}\n\n{% docs voter_registration_status %}\nUser's registration status. (e.g. registration_complete, confirmed, uncertain) \n{% enddocs %}\n\n{% docs finish_with_state %}\nIf the registrant was eligible to use and passed through to complete their registration with their state\u2019s OVR system, it will be indicated in this field (direct quote from Rock-The-Vote documentation). Yes/No value in field.\n{% enddocs %}\n\n{% docs reportback_volume %}\nThis field returns 1 if non voter-reg action, since campaigns team only counts those a 1 reportback. If voter-reg action, we want to count quantity of post as number of registered voters.\n{% enddocs %}\n\n{% docs address_street_1 %}\nFirst line of user's street address\n{% enddocs %}\n\n{% docs address_street_2 %}\nSecond line of user's street address\n{% enddocs %}\n\n{% docs city %}\nUser's city\n{% enddocs %}\n\n{% docs state %}\nUser's state\n{% enddocs %}\n\n{% docs country %}\nUser's country\n{% enddocs %}\n\n{% docs language %}\nUser's language\n{% enddocs %}\n\n{% docs cio_status %}\nStatus of user from CIO. (e.g. customer_subscribed, customer_unsubscribed)\n{% enddocs %}\n\n{% docs cio_status_timestamp %}\nTimestamp when users's status was updated.\n{% enddocs %}\n\n{% docs sms_status %}\nCurrent SMS status. (e.g. undeliverable, unknown)\n{% enddocs %}\n\n{% docs source_detail %}\nDetails of the origin of the user. (e.g. tell_a_friend, other, opt_in_path/197981)\n{% enddocs %}\n\n{% docs badges %}\nWhether the user has any badges. \n{% enddocs %}\n\n{% docs refer_friends %}\nWhether the user is a part of the refer a friend campaign. \n{% enddocs %}\n\n{% docs subscribed_member %}\nWhether the user is subscribed. \n{% enddocs %}\n\n{% docs last_updated_at %}\nTimestamp when users's was updated.\n{% enddocs %}\n\n{% docs school_id %}\nUnique identifier for the user's school. This info comes from the school finder.\n{% enddocs %}\n\n{% docs newsletter_topic %}\nNewsletter topic. (e.g. community, lifestyle)\n{% enddocs %}\n\n{% docs user_agent %}\nFull user agent string for a user's browser (e.g. \"Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:24.0) Gecko/20100101 Firefox/24.0\")\n{% enddocs %}\n\n{% docs drupal_id %}\nOld Drupal user ID\n{% enddocs %}\n\n{% docs campaigns %}\nCampaigns a user is signed up for.\n{% enddocs %}\n\n{% docs audit %}\nA very useful field with data containing information about changes to a user, e.g. timestamps when the user subscribed and unsubscribed.\n{% enddocs %}\n\n{% docs voting_plan_status %}\nThe indication of the user's plan to vote, e.g. voting, not_voting, cant_vote\n{% enddocs %}\n\n{% docs voting_plan_time_of_day %}\nThe time of day when the user plans to vote, e.g morning, afternoon, evening\n{% enddocs %}\n\n{% docs voting_plan_method_of_transport %}\nHow the user plans to get to their polling place. e.g. walk, drive\n{% enddocs %}\n\n{% docs voting_plan_attending_with %}\nWith Whom the user plans to go voting, e.g. family, friends, alone\n{% enddocs %}\n\n{% docs feature_flags %}\nJSON containing info on features like badges and refer-a-friend.\n{% enddocs %}\n\n{% docs dbt_updated_at %}\nDBT snapshot table data. The updated_at timestamp of the source record when this snapshot row was inserted.\n{% enddocs %}\n\n{% docs dbt_scd_id %}\nDBT snapshot table data. A unique key generated for each snapshotted record.\n{% enddocs %}\n\n{% docs dbt_valid_from %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this snapshot row was first inserted\n{% enddocs %}\n\n{% docs dbt_valid_to %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this row row became invalidated.\n{% enddocs %}\n\n{% docs google_id %}\nUser's Google ID obtained from login.\n{% enddocs %}\n\n{% docs causes %}\nCauses in which a user is interested. e.g. animal welfare, education, mental_health\n{% enddocs %}\n\n{% docs email_subscription_status %}\nEmail subscription status of the user\n{% enddocs %}\n\n{% docs role %}\nUser's role, e.g. user, staff\n{% enddocs %}\n\n{% docs cio_backfilled %}\nWhether this user's data was backfilled from CIO\n{% enddocs %}\n\n{% docs addr_source %}\nWhere the user submitted their address, e.g. sms, GDPR\n{% enddocs %}\n\n{% docs email_subscription_topics %}\nEmail subscription topics correspond to categories in CIO in which the user is interested. e.g. lifestyle, community, scholarship\n{% enddocs %}\n\n{% docs sms_paused %}\nWhether we've paused sending sms messages to the user.\n{% enddocs %}\n\n\n\n\n", "name": "campaign_action_type", "unique_id": "ds_dbt.campaign_action_type", "block_contents": "Campaign action type (eg. Make Something, Share Something)"}, "ds_dbt.campaign_cause_type": {"root_path": "/Users/mrich/projects/quasar/quasar/dbt", "resource_type": "docs", "path": "schema.md", "original_file_path": "models/schema.md", "package_name": "ds_dbt", "file_contents": "\n{% docs click_id %}\nThis is a unique identifier for each click\n{% enddocs %}\n\n{% docs click_time %}\nTimestamp when user clicked.\n{% enddocs %}\n\n{% docs shortened %}\nShortened URL\n{% enddocs %}\n\n{% docs target_url %}\nURL where the user will be directed\n{% enddocs %}\n\n{% docs broadcast_id %}\nID of the broadcast that generated the shortened URL\n{% enddocs %}\n\n{% docs source %}\nSource of the URL (e.g. SMS, web), origin of the post (e.g. phoenix-web, phoenix-ashes, sms), or source where user was acquired. (e.g. sms, phoenix-next)\n{% enddocs %}\n\n{% docs interaction_type %}\nHow the user interacted with the link (e.g. preview, click)\n{% enddocs %}\n\n{% docs id %}\nUnique identifier for the post\n{% enddocs %}\n\n{% docs type %}\nType of post (e.g. photo)\n{% enddocs %}\n\n{% docs action %}\nPost action (e.g. DefendDreamers_Nov9_CongressCalls, GunViolence2018_Feb15_ParklandResponse)\n{% enddocs %}\n\n{% docs status %}\nPost status (e.g. accepted, rejected)\n{% enddocs %}\n\n{% docs quantity %}\nNumerical quantity of items specified in the call to action (e.g. 10, 200)\n{% enddocs %}\n\n{% docs source_bucket %}\nGrouping bucket for origin of the post (e.g. web, sms) \n{% enddocs %}\n\n{% docs created_at %}\nWhen the item was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs updated_at %}\nWhen the item was updated in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs text %}\nText of the post (e.g. \"Zoo animals and a super hero trying to help too!\") \n{% enddocs %}\n\n{% docs signup_id %}\nUnique identifier for the signup \n{% enddocs %}\n\n{% docs post_class %}\nClass of the signup (e.g. \"photo - default\", \"phone-call - DefendDreamers_Jan16_BothBodies\")\n{% enddocs %}\n\n{% docs is_accepted %}\nWhether the post has been accepted to be displayed to the public on the website\n{% enddocs %}\n\n{% docs action_id %}\nInternal identifier of the action \n{% enddocs %}\n\n{% docs location %}\nLocation where the action takes place (e.g. US-NY)\n{% enddocs %}\n\n{% docs postal_code %}\nPostal code where the action takes place\n{% enddocs %}\n\n{% docs is_reportback %}\nWhether the post is a reportback. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs civic_action %}\nWhether the post is a Civic Action. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs scholarship_entry %}\nWhether the post is a Scholarship Entry. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs why_participated %}\nWhy the user participated in this action. Entered by the user.\n{% enddocs %}\n\n{% docs details %}\nDetails about the post. Contains contentfulId and other information (e.g. {\"campaignContentfulId\":\"6ATBgGEQEeJoIcxs1qbwaC\"})\n{% enddocs %}\n\n{% docs email %}\nEmail address of the user.\n{% enddocs %}\n\n{% docs source_details %}\nDetails about the source of the item. This is sometimes represented as a JSON object, and for other tables like Turbovote its represented as a string. (e.g. \"{\"contentful_id\":\"3CTLlXfbwtz1FOMpl31SKV\",\"utm_source\":\"scholarship_listing\",\"utm_medium\":\"referral\",\"utm_campaign\":\"fastweb_2019_08\"}\", newsletter_456)\n{% enddocs %}\n\n{% docs campaign_id %}\nThis is a unique identifier for the campaign\n{% enddocs %}\n\n{% docs campaign_run_id %}\nUnique identifier for the campaign run\n{% enddocs %}\n\n{% docs campaign_name %}\nName of the campaign\n{% enddocs %}\n\n{% docs campaign_cause %}\nCampaign cause (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_run_start_date %}\nStart date of the campaign run\n{% enddocs %}\n\n{% docs campaign_run_end_date %}\nEnd date of the campaign run\n{% enddocs %}\n\n{% docs campaign_created_date %}\nWhen the campaign was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs campaign_node_id %}\nInternal unique node id for the campaign\n{% enddocs %}\n\n{% docs campaign_node_id_title %}\nCampaign title\n{% enddocs %}\n\n{% docs campaign_run_id_title %}\nTitle of the campaign run\n{% enddocs %}\n\n{% docs campaign_action_type %}\nCampaign action type (eg. Make Something, Share Something)\n{% enddocs %}\n\n{% docs campaign_cause_type %}\nCampaign cause type (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_noun %}\nNoun applicable to the user's action\n{% enddocs %}\n\n{% docs campaign_verb %}\nVerb describing the action the user should take\n{% enddocs %}\n\n{% docs campaign_cta %}\nCampaign's call to action\n{% enddocs %}\n\n{% docs campaign_language %}\n\"Language in which the campaign is available\"\n{% enddocs %}\n\n{% docs agent_id %}\nIf set, the content type of the picture the member is sending us. Exp. image/png.\n{% enddocs %}\n\n{% docs attachment_content_type %}\nIf set, the handle of the Front agent this outbound support message is from.\n{% enddocs %}\n\n{% docs topic %}\nHolds a reference to the **last** campaign topic the member's conversation was in. This is useful to allow members to talk to Gambit and get quick responses (through Rivescript), without Gambit completely forgetting what state the member's interaction with a campaign topic was in.\n{% enddocs %}\n\n{% docs action_serial_id %}\nSerial id for the user's action. Depends on the source of the action. May be the bertly click id, sms message id, etc.\n{% enddocs %}\n\n{% docs channel %}\nChannel for the user's action. Depends on the source of the action. (e.g. web, sms)\n{% enddocs %}\n\n{% docs first_action_month %}\nMonth during which the user took their first action. \n{% enddocs %}\n\n{% docs event_id %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs event_source %}\nApplication source for event (eg. Phoenix, Northstar)\n{% enddocs %}\n\n{% docs event_datetime %}\nWhen the event occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs event_name %}\nName of the event (eg. northstar_submitted_register, https://docs.google.com/spreadsheets/d/1lm-fGrIm85nUTxSojqyCt_Ehmm1zEbViFhKpxcJiz1A/edit#gid=406441516)\n{% enddocs %}\n\n{% docs event_type %}\nType of event (pv = 'Page View', se = 'Structured Event')\n{% enddocs %}\n\n{% docs host %}\nURL host where event occurred (eg. www.dosomething.org or identity.dosomething.org)\n{% enddocs %}\n\n{% docs path %}\nURL path event occurred at (eg. /login or /us/campaigns/huddle-for-heroes)\n{% enddocs %}\n\n{% docs query_parameters %}\nOptional query parameters for the request (eg. query=huddle)\n{% enddocs %}\n\n{% docs se_category %}\nCategory of event (eg. focused_field, authentication) - Custom structured event\n{% enddocs %}\n\n{% docs se_action %}\nAction performed / event name (eg. form_submitted, action_failed) - Custom structured event\n{% enddocs %}\n\n{% docs se_label %}\nThe object of the action (eg. first_name, register, voter_reg_status) - Custom structured event\n{% enddocs %}\n\n{% docs session_id %}\nUnique identifier of the user's session\n{% enddocs %}\n\n{% docs session_counter %}\nHow many sessions a user has started\n{% enddocs %}\n\n{% docs browser_size %}\nWhich type of browser a user is using (eg. Mobile, Desktop)\n{% enddocs %}\n\n{% docs northstar_id %}\nThe Northstar ID of the user who generated the event\n{% enddocs %}\n\n{% docs device_id %}\nID of the device used\n{% enddocs %}\n\n{% docs referrer_host %}\nURL host of the referring site (eg. google.com)\n{% enddocs %}\n\n{% docs referrer_path %}\nURL path from referring site (eg. /10-stats-on-teen-drug-and-alcohol-use/)\n{% enddocs %}\n\n{% docs referrer_source %}\nReferrer source name (eg. Google, Facebook)\n{% enddocs %}\n\n{% docs utm_source %}\nTracks where the traffic is coming from. (eg. scholarship_listing, Facebook)\n{% enddocs %}\n\n{% docs utm_medium %}\nHow the traffic got to the platform (eg. referral, CPC)\n{% enddocs %}\n\n{% docs utm_campaign %}\nTracks which campaign the traffic was generated by. Shows up in Google Analytics as Campaign Name (eg. editorial_newsletter)\n{% enddocs %}\n\n{% docs url %}\nURL of campaign (eg. https://dosome.click/nyn5m7)\n{% enddocs %}\n\n{% docs modal_type %}\nNULL or SURVEY_MODAL\n{% enddocs %}\n\n{% docs landing_datetime %}\nWhen the session started in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs ending_datetime %}\nWhen the session ended in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs session_duration_seconds %}\nSession duration in seconds\n{% enddocs %}\n\n{% docs num_pages_views %}\nNumber of pages viewed in session\n{% enddocs %}\n\n{% docs landing_page %}\nFirst page the user viewed in the session (eg. /us/facts/11-facts-about-bp-oil-spill)\n{% enddocs %}\n\n{% docs exit_page %}\n\"Which page the user ended or exited their session from (eg. /us/campaigns/green-your-getaway)\"\n{% enddocs %}\n\n{% docs days_since_last_session %}\n\"Days since their last session.\"\n{% enddocs %}\n\n{% docs post_type %}\nType of post, (e.g. photo, voter-reg)\n{% enddocs %}\n\n{% docs noun %}\nNoun that corresponds to the item in the call to action that was delivered. (e.g. drawings, tweets)\n{% enddocs %}\n\n{% docs verb %}\nVerb corresponding to the action the user took. (e.g. shared, sent, taken)\n{% enddocs %}\n\n{% docs deleted_at %}\nDate time in UTC when a user deleted their post.\n{% enddocs %}\n\n{% docs _fivetran_deleted %}\nMarks rows that were deleted in the source table\n{% enddocs %}\n\n{% docs _fivetran_synced %}\n(UTC timestamp) keeps track of when each row was last successfully synced\n{% enddocs %}\n\n{% docs reportback %}\nWhether the post is a reportback \n{% enddocs %}\n\n{% docs active %}\nWhether the user is active \n{% enddocs %}\n\n{% docs anonymous %}\nWhether the user is anonymous when making the post \n{% enddocs %}\n\n{% docs callpower_campaign_id %}\nUnique ID corresponding to the Callpower campaign. Callpower allows users to record messages for their representatives.\n{% enddocs %}\n\n{% docs quiz %}\nWhether the post is a quiz \n{% enddocs %}\n\n{% docs action_type %}\nType of action the user took. (e.g. share-something, donate-something)\n{% enddocs %}\n\n{% docs online %}\nWhether the action is a online as opposed to IRL.\n{% enddocs %}\n\n{% docs time_commitment %}\nEstimated time required to do the action (e.g. 3.0+, <0.5)\n{% enddocs %}\n\n{% docs num_signups %}\nQuantity of campaign signups\n{% enddocs %}\n\n{% docs most_recent_signup %}\nTimestamp of the most recent signup in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs num_rbs %}\nQuantity of reportbacks for the user\n{% enddocs %}\n\n{% docs total_quantity %}\nTotal quantity of items in reportbacks\n{% enddocs %}\n\n{% docs most_recent_rb %}\nWhen the most recent reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs first_rb %}\nWhen the first reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs avg_time_betw_rbs %}\nCalculated average time between reportbacks.\n{% enddocs %}\n\n{% docs avg_days_next_action_after_rb %}\nCalculated average days until next action after reportback\n{% enddocs %}\n\n{% docs days_to_next_action_after_last_rb %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs most_recent_mam_action %}\nMost recent monthly active member qualifying action in UTC (eg. 2018-01-01 12:00:00).\n{% enddocs %}\n\n{% docs most_recent_email_open %}\nMost recent email open in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs most_recent_all_actions %}\nMost recent timestamp of any action in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs last_action_is_rb %}\nWhether the last action the user took was a reportback\n{% enddocs %}\n\n{% docs days_since_last_action %}\nDays since the user's last action\n{% enddocs %}\n\n{% docs time_to_first_rb %}\nHow much time after registering until the user's first reportback\n{% enddocs %}\n\n{% docs sms_unsubscribed_at %}\nTimestamp of when user unsubscribed from SMS messaging\n{% enddocs %}\n\n{% docs user_unsubscribed_at %}\nTimestamp of when user unsubscribed from email or sms\n{% enddocs %}\n\n{% docs voter_reg_acquisition %}\nWhether the user was an acquisition through voter registration efforts. \n{% enddocs %}\n\n{% docs last_logged_in %}\nDate time in UTC when user last logged in to Northstar\n{% enddocs %}\n\n{% docs last_accessed %}\nDate time in UTC when user last access the website\n{% enddocs %}\n\n{% docs last_messaged_at %}\nDate time in UTC when user was last sent a message via SMS or email\n{% enddocs %}\n\n{% docs facebook_id %}\nUser's facebook id\n{% enddocs %}\n\n{% docs mobile %}\nUsers's mobile phone number\n{% enddocs %}\n\n{% docs birthdate %}\nUser's birthdate\n{% enddocs %}\n\n{% docs first_name %}\nUser's first name\n{% enddocs %}\n\n{% docs last_name %}\nUser's last name\n{% enddocs %}\n\n{% docs voter_registration_status %}\nUser's registration status. (e.g. registration_complete, confirmed, uncertain) \n{% enddocs %}\n\n{% docs finish_with_state %}\nIf the registrant was eligible to use and passed through to complete their registration with their state\u2019s OVR system, it will be indicated in this field (direct quote from Rock-The-Vote documentation). Yes/No value in field.\n{% enddocs %}\n\n{% docs reportback_volume %}\nThis field returns 1 if non voter-reg action, since campaigns team only counts those a 1 reportback. If voter-reg action, we want to count quantity of post as number of registered voters.\n{% enddocs %}\n\n{% docs address_street_1 %}\nFirst line of user's street address\n{% enddocs %}\n\n{% docs address_street_2 %}\nSecond line of user's street address\n{% enddocs %}\n\n{% docs city %}\nUser's city\n{% enddocs %}\n\n{% docs state %}\nUser's state\n{% enddocs %}\n\n{% docs country %}\nUser's country\n{% enddocs %}\n\n{% docs language %}\nUser's language\n{% enddocs %}\n\n{% docs cio_status %}\nStatus of user from CIO. (e.g. customer_subscribed, customer_unsubscribed)\n{% enddocs %}\n\n{% docs cio_status_timestamp %}\nTimestamp when users's status was updated.\n{% enddocs %}\n\n{% docs sms_status %}\nCurrent SMS status. (e.g. undeliverable, unknown)\n{% enddocs %}\n\n{% docs source_detail %}\nDetails of the origin of the user. (e.g. tell_a_friend, other, opt_in_path/197981)\n{% enddocs %}\n\n{% docs badges %}\nWhether the user has any badges. \n{% enddocs %}\n\n{% docs refer_friends %}\nWhether the user is a part of the refer a friend campaign. \n{% enddocs %}\n\n{% docs subscribed_member %}\nWhether the user is subscribed. \n{% enddocs %}\n\n{% docs last_updated_at %}\nTimestamp when users's was updated.\n{% enddocs %}\n\n{% docs school_id %}\nUnique identifier for the user's school. This info comes from the school finder.\n{% enddocs %}\n\n{% docs newsletter_topic %}\nNewsletter topic. (e.g. community, lifestyle)\n{% enddocs %}\n\n{% docs user_agent %}\nFull user agent string for a user's browser (e.g. \"Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:24.0) Gecko/20100101 Firefox/24.0\")\n{% enddocs %}\n\n{% docs drupal_id %}\nOld Drupal user ID\n{% enddocs %}\n\n{% docs campaigns %}\nCampaigns a user is signed up for.\n{% enddocs %}\n\n{% docs audit %}\nA very useful field with data containing information about changes to a user, e.g. timestamps when the user subscribed and unsubscribed.\n{% enddocs %}\n\n{% docs voting_plan_status %}\nThe indication of the user's plan to vote, e.g. voting, not_voting, cant_vote\n{% enddocs %}\n\n{% docs voting_plan_time_of_day %}\nThe time of day when the user plans to vote, e.g morning, afternoon, evening\n{% enddocs %}\n\n{% docs voting_plan_method_of_transport %}\nHow the user plans to get to their polling place. e.g. walk, drive\n{% enddocs %}\n\n{% docs voting_plan_attending_with %}\nWith Whom the user plans to go voting, e.g. family, friends, alone\n{% enddocs %}\n\n{% docs feature_flags %}\nJSON containing info on features like badges and refer-a-friend.\n{% enddocs %}\n\n{% docs dbt_updated_at %}\nDBT snapshot table data. The updated_at timestamp of the source record when this snapshot row was inserted.\n{% enddocs %}\n\n{% docs dbt_scd_id %}\nDBT snapshot table data. A unique key generated for each snapshotted record.\n{% enddocs %}\n\n{% docs dbt_valid_from %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this snapshot row was first inserted\n{% enddocs %}\n\n{% docs dbt_valid_to %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this row row became invalidated.\n{% enddocs %}\n\n{% docs google_id %}\nUser's Google ID obtained from login.\n{% enddocs %}\n\n{% docs causes %}\nCauses in which a user is interested. e.g. animal welfare, education, mental_health\n{% enddocs %}\n\n{% docs email_subscription_status %}\nEmail subscription status of the user\n{% enddocs %}\n\n{% docs role %}\nUser's role, e.g. user, staff\n{% enddocs %}\n\n{% docs cio_backfilled %}\nWhether this user's data was backfilled from CIO\n{% enddocs %}\n\n{% docs addr_source %}\nWhere the user submitted their address, e.g. sms, GDPR\n{% enddocs %}\n\n{% docs email_subscription_topics %}\nEmail subscription topics correspond to categories in CIO in which the user is interested. e.g. lifestyle, community, scholarship\n{% enddocs %}\n\n{% docs sms_paused %}\nWhether we've paused sending sms messages to the user.\n{% enddocs %}\n\n\n\n\n", "name": "campaign_cause_type", "unique_id": "ds_dbt.campaign_cause_type", "block_contents": "Campaign cause type (eg. Mental Health, Education)"}, "ds_dbt.campaign_noun": {"root_path": "/Users/mrich/projects/quasar/quasar/dbt", "resource_type": "docs", "path": "schema.md", "original_file_path": "models/schema.md", "package_name": "ds_dbt", "file_contents": "\n{% docs click_id %}\nThis is a unique identifier for each click\n{% enddocs %}\n\n{% docs click_time %}\nTimestamp when user clicked.\n{% enddocs %}\n\n{% docs shortened %}\nShortened URL\n{% enddocs %}\n\n{% docs target_url %}\nURL where the user will be directed\n{% enddocs %}\n\n{% docs broadcast_id %}\nID of the broadcast that generated the shortened URL\n{% enddocs %}\n\n{% docs source %}\nSource of the URL (e.g. SMS, web), origin of the post (e.g. phoenix-web, phoenix-ashes, sms), or source where user was acquired. (e.g. sms, phoenix-next)\n{% enddocs %}\n\n{% docs interaction_type %}\nHow the user interacted with the link (e.g. preview, click)\n{% enddocs %}\n\n{% docs id %}\nUnique identifier for the post\n{% enddocs %}\n\n{% docs type %}\nType of post (e.g. photo)\n{% enddocs %}\n\n{% docs action %}\nPost action (e.g. DefendDreamers_Nov9_CongressCalls, GunViolence2018_Feb15_ParklandResponse)\n{% enddocs %}\n\n{% docs status %}\nPost status (e.g. accepted, rejected)\n{% enddocs %}\n\n{% docs quantity %}\nNumerical quantity of items specified in the call to action (e.g. 10, 200)\n{% enddocs %}\n\n{% docs source_bucket %}\nGrouping bucket for origin of the post (e.g. web, sms) \n{% enddocs %}\n\n{% docs created_at %}\nWhen the item was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs updated_at %}\nWhen the item was updated in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs text %}\nText of the post (e.g. \"Zoo animals and a super hero trying to help too!\") \n{% enddocs %}\n\n{% docs signup_id %}\nUnique identifier for the signup \n{% enddocs %}\n\n{% docs post_class %}\nClass of the signup (e.g. \"photo - default\", \"phone-call - DefendDreamers_Jan16_BothBodies\")\n{% enddocs %}\n\n{% docs is_accepted %}\nWhether the post has been accepted to be displayed to the public on the website\n{% enddocs %}\n\n{% docs action_id %}\nInternal identifier of the action \n{% enddocs %}\n\n{% docs location %}\nLocation where the action takes place (e.g. US-NY)\n{% enddocs %}\n\n{% docs postal_code %}\nPostal code where the action takes place\n{% enddocs %}\n\n{% docs is_reportback %}\nWhether the post is a reportback. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs civic_action %}\nWhether the post is a Civic Action. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs scholarship_entry %}\nWhether the post is a Scholarship Entry. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs why_participated %}\nWhy the user participated in this action. Entered by the user.\n{% enddocs %}\n\n{% docs details %}\nDetails about the post. Contains contentfulId and other information (e.g. {\"campaignContentfulId\":\"6ATBgGEQEeJoIcxs1qbwaC\"})\n{% enddocs %}\n\n{% docs email %}\nEmail address of the user.\n{% enddocs %}\n\n{% docs source_details %}\nDetails about the source of the item. This is sometimes represented as a JSON object, and for other tables like Turbovote its represented as a string. (e.g. \"{\"contentful_id\":\"3CTLlXfbwtz1FOMpl31SKV\",\"utm_source\":\"scholarship_listing\",\"utm_medium\":\"referral\",\"utm_campaign\":\"fastweb_2019_08\"}\", newsletter_456)\n{% enddocs %}\n\n{% docs campaign_id %}\nThis is a unique identifier for the campaign\n{% enddocs %}\n\n{% docs campaign_run_id %}\nUnique identifier for the campaign run\n{% enddocs %}\n\n{% docs campaign_name %}\nName of the campaign\n{% enddocs %}\n\n{% docs campaign_cause %}\nCampaign cause (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_run_start_date %}\nStart date of the campaign run\n{% enddocs %}\n\n{% docs campaign_run_end_date %}\nEnd date of the campaign run\n{% enddocs %}\n\n{% docs campaign_created_date %}\nWhen the campaign was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs campaign_node_id %}\nInternal unique node id for the campaign\n{% enddocs %}\n\n{% docs campaign_node_id_title %}\nCampaign title\n{% enddocs %}\n\n{% docs campaign_run_id_title %}\nTitle of the campaign run\n{% enddocs %}\n\n{% docs campaign_action_type %}\nCampaign action type (eg. Make Something, Share Something)\n{% enddocs %}\n\n{% docs campaign_cause_type %}\nCampaign cause type (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_noun %}\nNoun applicable to the user's action\n{% enddocs %}\n\n{% docs campaign_verb %}\nVerb describing the action the user should take\n{% enddocs %}\n\n{% docs campaign_cta %}\nCampaign's call to action\n{% enddocs %}\n\n{% docs campaign_language %}\n\"Language in which the campaign is available\"\n{% enddocs %}\n\n{% docs agent_id %}\nIf set, the content type of the picture the member is sending us. Exp. image/png.\n{% enddocs %}\n\n{% docs attachment_content_type %}\nIf set, the handle of the Front agent this outbound support message is from.\n{% enddocs %}\n\n{% docs topic %}\nHolds a reference to the **last** campaign topic the member's conversation was in. This is useful to allow members to talk to Gambit and get quick responses (through Rivescript), without Gambit completely forgetting what state the member's interaction with a campaign topic was in.\n{% enddocs %}\n\n{% docs action_serial_id %}\nSerial id for the user's action. Depends on the source of the action. May be the bertly click id, sms message id, etc.\n{% enddocs %}\n\n{% docs channel %}\nChannel for the user's action. Depends on the source of the action. (e.g. web, sms)\n{% enddocs %}\n\n{% docs first_action_month %}\nMonth during which the user took their first action. \n{% enddocs %}\n\n{% docs event_id %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs event_source %}\nApplication source for event (eg. Phoenix, Northstar)\n{% enddocs %}\n\n{% docs event_datetime %}\nWhen the event occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs event_name %}\nName of the event (eg. northstar_submitted_register, https://docs.google.com/spreadsheets/d/1lm-fGrIm85nUTxSojqyCt_Ehmm1zEbViFhKpxcJiz1A/edit#gid=406441516)\n{% enddocs %}\n\n{% docs event_type %}\nType of event (pv = 'Page View', se = 'Structured Event')\n{% enddocs %}\n\n{% docs host %}\nURL host where event occurred (eg. www.dosomething.org or identity.dosomething.org)\n{% enddocs %}\n\n{% docs path %}\nURL path event occurred at (eg. /login or /us/campaigns/huddle-for-heroes)\n{% enddocs %}\n\n{% docs query_parameters %}\nOptional query parameters for the request (eg. query=huddle)\n{% enddocs %}\n\n{% docs se_category %}\nCategory of event (eg. focused_field, authentication) - Custom structured event\n{% enddocs %}\n\n{% docs se_action %}\nAction performed / event name (eg. form_submitted, action_failed) - Custom structured event\n{% enddocs %}\n\n{% docs se_label %}\nThe object of the action (eg. first_name, register, voter_reg_status) - Custom structured event\n{% enddocs %}\n\n{% docs session_id %}\nUnique identifier of the user's session\n{% enddocs %}\n\n{% docs session_counter %}\nHow many sessions a user has started\n{% enddocs %}\n\n{% docs browser_size %}\nWhich type of browser a user is using (eg. Mobile, Desktop)\n{% enddocs %}\n\n{% docs northstar_id %}\nThe Northstar ID of the user who generated the event\n{% enddocs %}\n\n{% docs device_id %}\nID of the device used\n{% enddocs %}\n\n{% docs referrer_host %}\nURL host of the referring site (eg. google.com)\n{% enddocs %}\n\n{% docs referrer_path %}\nURL path from referring site (eg. /10-stats-on-teen-drug-and-alcohol-use/)\n{% enddocs %}\n\n{% docs referrer_source %}\nReferrer source name (eg. Google, Facebook)\n{% enddocs %}\n\n{% docs utm_source %}\nTracks where the traffic is coming from. (eg. scholarship_listing, Facebook)\n{% enddocs %}\n\n{% docs utm_medium %}\nHow the traffic got to the platform (eg. referral, CPC)\n{% enddocs %}\n\n{% docs utm_campaign %}\nTracks which campaign the traffic was generated by. Shows up in Google Analytics as Campaign Name (eg. editorial_newsletter)\n{% enddocs %}\n\n{% docs url %}\nURL of campaign (eg. https://dosome.click/nyn5m7)\n{% enddocs %}\n\n{% docs modal_type %}\nNULL or SURVEY_MODAL\n{% enddocs %}\n\n{% docs landing_datetime %}\nWhen the session started in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs ending_datetime %}\nWhen the session ended in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs session_duration_seconds %}\nSession duration in seconds\n{% enddocs %}\n\n{% docs num_pages_views %}\nNumber of pages viewed in session\n{% enddocs %}\n\n{% docs landing_page %}\nFirst page the user viewed in the session (eg. /us/facts/11-facts-about-bp-oil-spill)\n{% enddocs %}\n\n{% docs exit_page %}\n\"Which page the user ended or exited their session from (eg. /us/campaigns/green-your-getaway)\"\n{% enddocs %}\n\n{% docs days_since_last_session %}\n\"Days since their last session.\"\n{% enddocs %}\n\n{% docs post_type %}\nType of post, (e.g. photo, voter-reg)\n{% enddocs %}\n\n{% docs noun %}\nNoun that corresponds to the item in the call to action that was delivered. (e.g. drawings, tweets)\n{% enddocs %}\n\n{% docs verb %}\nVerb corresponding to the action the user took. (e.g. shared, sent, taken)\n{% enddocs %}\n\n{% docs deleted_at %}\nDate time in UTC when a user deleted their post.\n{% enddocs %}\n\n{% docs _fivetran_deleted %}\nMarks rows that were deleted in the source table\n{% enddocs %}\n\n{% docs _fivetran_synced %}\n(UTC timestamp) keeps track of when each row was last successfully synced\n{% enddocs %}\n\n{% docs reportback %}\nWhether the post is a reportback \n{% enddocs %}\n\n{% docs active %}\nWhether the user is active \n{% enddocs %}\n\n{% docs anonymous %}\nWhether the user is anonymous when making the post \n{% enddocs %}\n\n{% docs callpower_campaign_id %}\nUnique ID corresponding to the Callpower campaign. Callpower allows users to record messages for their representatives.\n{% enddocs %}\n\n{% docs quiz %}\nWhether the post is a quiz \n{% enddocs %}\n\n{% docs action_type %}\nType of action the user took. (e.g. share-something, donate-something)\n{% enddocs %}\n\n{% docs online %}\nWhether the action is a online as opposed to IRL.\n{% enddocs %}\n\n{% docs time_commitment %}\nEstimated time required to do the action (e.g. 3.0+, <0.5)\n{% enddocs %}\n\n{% docs num_signups %}\nQuantity of campaign signups\n{% enddocs %}\n\n{% docs most_recent_signup %}\nTimestamp of the most recent signup in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs num_rbs %}\nQuantity of reportbacks for the user\n{% enddocs %}\n\n{% docs total_quantity %}\nTotal quantity of items in reportbacks\n{% enddocs %}\n\n{% docs most_recent_rb %}\nWhen the most recent reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs first_rb %}\nWhen the first reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs avg_time_betw_rbs %}\nCalculated average time between reportbacks.\n{% enddocs %}\n\n{% docs avg_days_next_action_after_rb %}\nCalculated average days until next action after reportback\n{% enddocs %}\n\n{% docs days_to_next_action_after_last_rb %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs most_recent_mam_action %}\nMost recent monthly active member qualifying action in UTC (eg. 2018-01-01 12:00:00).\n{% enddocs %}\n\n{% docs most_recent_email_open %}\nMost recent email open in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs most_recent_all_actions %}\nMost recent timestamp of any action in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs last_action_is_rb %}\nWhether the last action the user took was a reportback\n{% enddocs %}\n\n{% docs days_since_last_action %}\nDays since the user's last action\n{% enddocs %}\n\n{% docs time_to_first_rb %}\nHow much time after registering until the user's first reportback\n{% enddocs %}\n\n{% docs sms_unsubscribed_at %}\nTimestamp of when user unsubscribed from SMS messaging\n{% enddocs %}\n\n{% docs user_unsubscribed_at %}\nTimestamp of when user unsubscribed from email or sms\n{% enddocs %}\n\n{% docs voter_reg_acquisition %}\nWhether the user was an acquisition through voter registration efforts. \n{% enddocs %}\n\n{% docs last_logged_in %}\nDate time in UTC when user last logged in to Northstar\n{% enddocs %}\n\n{% docs last_accessed %}\nDate time in UTC when user last access the website\n{% enddocs %}\n\n{% docs last_messaged_at %}\nDate time in UTC when user was last sent a message via SMS or email\n{% enddocs %}\n\n{% docs facebook_id %}\nUser's facebook id\n{% enddocs %}\n\n{% docs mobile %}\nUsers's mobile phone number\n{% enddocs %}\n\n{% docs birthdate %}\nUser's birthdate\n{% enddocs %}\n\n{% docs first_name %}\nUser's first name\n{% enddocs %}\n\n{% docs last_name %}\nUser's last name\n{% enddocs %}\n\n{% docs voter_registration_status %}\nUser's registration status. (e.g. registration_complete, confirmed, uncertain) \n{% enddocs %}\n\n{% docs finish_with_state %}\nIf the registrant was eligible to use and passed through to complete their registration with their state\u2019s OVR system, it will be indicated in this field (direct quote from Rock-The-Vote documentation). Yes/No value in field.\n{% enddocs %}\n\n{% docs reportback_volume %}\nThis field returns 1 if non voter-reg action, since campaigns team only counts those a 1 reportback. If voter-reg action, we want to count quantity of post as number of registered voters.\n{% enddocs %}\n\n{% docs address_street_1 %}\nFirst line of user's street address\n{% enddocs %}\n\n{% docs address_street_2 %}\nSecond line of user's street address\n{% enddocs %}\n\n{% docs city %}\nUser's city\n{% enddocs %}\n\n{% docs state %}\nUser's state\n{% enddocs %}\n\n{% docs country %}\nUser's country\n{% enddocs %}\n\n{% docs language %}\nUser's language\n{% enddocs %}\n\n{% docs cio_status %}\nStatus of user from CIO. (e.g. customer_subscribed, customer_unsubscribed)\n{% enddocs %}\n\n{% docs cio_status_timestamp %}\nTimestamp when users's status was updated.\n{% enddocs %}\n\n{% docs sms_status %}\nCurrent SMS status. (e.g. undeliverable, unknown)\n{% enddocs %}\n\n{% docs source_detail %}\nDetails of the origin of the user. (e.g. tell_a_friend, other, opt_in_path/197981)\n{% enddocs %}\n\n{% docs badges %}\nWhether the user has any badges. \n{% enddocs %}\n\n{% docs refer_friends %}\nWhether the user is a part of the refer a friend campaign. \n{% enddocs %}\n\n{% docs subscribed_member %}\nWhether the user is subscribed. \n{% enddocs %}\n\n{% docs last_updated_at %}\nTimestamp when users's was updated.\n{% enddocs %}\n\n{% docs school_id %}\nUnique identifier for the user's school. This info comes from the school finder.\n{% enddocs %}\n\n{% docs newsletter_topic %}\nNewsletter topic. (e.g. community, lifestyle)\n{% enddocs %}\n\n{% docs user_agent %}\nFull user agent string for a user's browser (e.g. \"Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:24.0) Gecko/20100101 Firefox/24.0\")\n{% enddocs %}\n\n{% docs drupal_id %}\nOld Drupal user ID\n{% enddocs %}\n\n{% docs campaigns %}\nCampaigns a user is signed up for.\n{% enddocs %}\n\n{% docs audit %}\nA very useful field with data containing information about changes to a user, e.g. timestamps when the user subscribed and unsubscribed.\n{% enddocs %}\n\n{% docs voting_plan_status %}\nThe indication of the user's plan to vote, e.g. voting, not_voting, cant_vote\n{% enddocs %}\n\n{% docs voting_plan_time_of_day %}\nThe time of day when the user plans to vote, e.g morning, afternoon, evening\n{% enddocs %}\n\n{% docs voting_plan_method_of_transport %}\nHow the user plans to get to their polling place. e.g. walk, drive\n{% enddocs %}\n\n{% docs voting_plan_attending_with %}\nWith Whom the user plans to go voting, e.g. family, friends, alone\n{% enddocs %}\n\n{% docs feature_flags %}\nJSON containing info on features like badges and refer-a-friend.\n{% enddocs %}\n\n{% docs dbt_updated_at %}\nDBT snapshot table data. The updated_at timestamp of the source record when this snapshot row was inserted.\n{% enddocs %}\n\n{% docs dbt_scd_id %}\nDBT snapshot table data. A unique key generated for each snapshotted record.\n{% enddocs %}\n\n{% docs dbt_valid_from %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this snapshot row was first inserted\n{% enddocs %}\n\n{% docs dbt_valid_to %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this row row became invalidated.\n{% enddocs %}\n\n{% docs google_id %}\nUser's Google ID obtained from login.\n{% enddocs %}\n\n{% docs causes %}\nCauses in which a user is interested. e.g. animal welfare, education, mental_health\n{% enddocs %}\n\n{% docs email_subscription_status %}\nEmail subscription status of the user\n{% enddocs %}\n\n{% docs role %}\nUser's role, e.g. user, staff\n{% enddocs %}\n\n{% docs cio_backfilled %}\nWhether this user's data was backfilled from CIO\n{% enddocs %}\n\n{% docs addr_source %}\nWhere the user submitted their address, e.g. sms, GDPR\n{% enddocs %}\n\n{% docs email_subscription_topics %}\nEmail subscription topics correspond to categories in CIO in which the user is interested. e.g. lifestyle, community, scholarship\n{% enddocs %}\n\n{% docs sms_paused %}\nWhether we've paused sending sms messages to the user.\n{% enddocs %}\n\n\n\n\n", "name": "campaign_noun", "unique_id": "ds_dbt.campaign_noun", "block_contents": "Noun applicable to the user's action"}, "ds_dbt.campaign_verb": {"root_path": "/Users/mrich/projects/quasar/quasar/dbt", "resource_type": "docs", "path": "schema.md", "original_file_path": "models/schema.md", "package_name": "ds_dbt", "file_contents": "\n{% docs click_id %}\nThis is a unique identifier for each click\n{% enddocs %}\n\n{% docs click_time %}\nTimestamp when user clicked.\n{% enddocs %}\n\n{% docs shortened %}\nShortened URL\n{% enddocs %}\n\n{% docs target_url %}\nURL where the user will be directed\n{% enddocs %}\n\n{% docs broadcast_id %}\nID of the broadcast that generated the shortened URL\n{% enddocs %}\n\n{% docs source %}\nSource of the URL (e.g. SMS, web), origin of the post (e.g. phoenix-web, phoenix-ashes, sms), or source where user was acquired. (e.g. sms, phoenix-next)\n{% enddocs %}\n\n{% docs interaction_type %}\nHow the user interacted with the link (e.g. preview, click)\n{% enddocs %}\n\n{% docs id %}\nUnique identifier for the post\n{% enddocs %}\n\n{% docs type %}\nType of post (e.g. photo)\n{% enddocs %}\n\n{% docs action %}\nPost action (e.g. DefendDreamers_Nov9_CongressCalls, GunViolence2018_Feb15_ParklandResponse)\n{% enddocs %}\n\n{% docs status %}\nPost status (e.g. accepted, rejected)\n{% enddocs %}\n\n{% docs quantity %}\nNumerical quantity of items specified in the call to action (e.g. 10, 200)\n{% enddocs %}\n\n{% docs source_bucket %}\nGrouping bucket for origin of the post (e.g. web, sms) \n{% enddocs %}\n\n{% docs created_at %}\nWhen the item was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs updated_at %}\nWhen the item was updated in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs text %}\nText of the post (e.g. \"Zoo animals and a super hero trying to help too!\") \n{% enddocs %}\n\n{% docs signup_id %}\nUnique identifier for the signup \n{% enddocs %}\n\n{% docs post_class %}\nClass of the signup (e.g. \"photo - default\", \"phone-call - DefendDreamers_Jan16_BothBodies\")\n{% enddocs %}\n\n{% docs is_accepted %}\nWhether the post has been accepted to be displayed to the public on the website\n{% enddocs %}\n\n{% docs action_id %}\nInternal identifier of the action \n{% enddocs %}\n\n{% docs location %}\nLocation where the action takes place (e.g. US-NY)\n{% enddocs %}\n\n{% docs postal_code %}\nPostal code where the action takes place\n{% enddocs %}\n\n{% docs is_reportback %}\nWhether the post is a reportback. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs civic_action %}\nWhether the post is a Civic Action. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs scholarship_entry %}\nWhether the post is a Scholarship Entry. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs why_participated %}\nWhy the user participated in this action. Entered by the user.\n{% enddocs %}\n\n{% docs details %}\nDetails about the post. Contains contentfulId and other information (e.g. {\"campaignContentfulId\":\"6ATBgGEQEeJoIcxs1qbwaC\"})\n{% enddocs %}\n\n{% docs email %}\nEmail address of the user.\n{% enddocs %}\n\n{% docs source_details %}\nDetails about the source of the item. This is sometimes represented as a JSON object, and for other tables like Turbovote its represented as a string. (e.g. \"{\"contentful_id\":\"3CTLlXfbwtz1FOMpl31SKV\",\"utm_source\":\"scholarship_listing\",\"utm_medium\":\"referral\",\"utm_campaign\":\"fastweb_2019_08\"}\", newsletter_456)\n{% enddocs %}\n\n{% docs campaign_id %}\nThis is a unique identifier for the campaign\n{% enddocs %}\n\n{% docs campaign_run_id %}\nUnique identifier for the campaign run\n{% enddocs %}\n\n{% docs campaign_name %}\nName of the campaign\n{% enddocs %}\n\n{% docs campaign_cause %}\nCampaign cause (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_run_start_date %}\nStart date of the campaign run\n{% enddocs %}\n\n{% docs campaign_run_end_date %}\nEnd date of the campaign run\n{% enddocs %}\n\n{% docs campaign_created_date %}\nWhen the campaign was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs campaign_node_id %}\nInternal unique node id for the campaign\n{% enddocs %}\n\n{% docs campaign_node_id_title %}\nCampaign title\n{% enddocs %}\n\n{% docs campaign_run_id_title %}\nTitle of the campaign run\n{% enddocs %}\n\n{% docs campaign_action_type %}\nCampaign action type (eg. Make Something, Share Something)\n{% enddocs %}\n\n{% docs campaign_cause_type %}\nCampaign cause type (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_noun %}\nNoun applicable to the user's action\n{% enddocs %}\n\n{% docs campaign_verb %}\nVerb describing the action the user should take\n{% enddocs %}\n\n{% docs campaign_cta %}\nCampaign's call to action\n{% enddocs %}\n\n{% docs campaign_language %}\n\"Language in which the campaign is available\"\n{% enddocs %}\n\n{% docs agent_id %}\nIf set, the content type of the picture the member is sending us. Exp. image/png.\n{% enddocs %}\n\n{% docs attachment_content_type %}\nIf set, the handle of the Front agent this outbound support message is from.\n{% enddocs %}\n\n{% docs topic %}\nHolds a reference to the **last** campaign topic the member's conversation was in. This is useful to allow members to talk to Gambit and get quick responses (through Rivescript), without Gambit completely forgetting what state the member's interaction with a campaign topic was in.\n{% enddocs %}\n\n{% docs action_serial_id %}\nSerial id for the user's action. Depends on the source of the action. May be the bertly click id, sms message id, etc.\n{% enddocs %}\n\n{% docs channel %}\nChannel for the user's action. Depends on the source of the action. (e.g. web, sms)\n{% enddocs %}\n\n{% docs first_action_month %}\nMonth during which the user took their first action. \n{% enddocs %}\n\n{% docs event_id %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs event_source %}\nApplication source for event (eg. Phoenix, Northstar)\n{% enddocs %}\n\n{% docs event_datetime %}\nWhen the event occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs event_name %}\nName of the event (eg. northstar_submitted_register, https://docs.google.com/spreadsheets/d/1lm-fGrIm85nUTxSojqyCt_Ehmm1zEbViFhKpxcJiz1A/edit#gid=406441516)\n{% enddocs %}\n\n{% docs event_type %}\nType of event (pv = 'Page View', se = 'Structured Event')\n{% enddocs %}\n\n{% docs host %}\nURL host where event occurred (eg. www.dosomething.org or identity.dosomething.org)\n{% enddocs %}\n\n{% docs path %}\nURL path event occurred at (eg. /login or /us/campaigns/huddle-for-heroes)\n{% enddocs %}\n\n{% docs query_parameters %}\nOptional query parameters for the request (eg. query=huddle)\n{% enddocs %}\n\n{% docs se_category %}\nCategory of event (eg. focused_field, authentication) - Custom structured event\n{% enddocs %}\n\n{% docs se_action %}\nAction performed / event name (eg. form_submitted, action_failed) - Custom structured event\n{% enddocs %}\n\n{% docs se_label %}\nThe object of the action (eg. first_name, register, voter_reg_status) - Custom structured event\n{% enddocs %}\n\n{% docs session_id %}\nUnique identifier of the user's session\n{% enddocs %}\n\n{% docs session_counter %}\nHow many sessions a user has started\n{% enddocs %}\n\n{% docs browser_size %}\nWhich type of browser a user is using (eg. Mobile, Desktop)\n{% enddocs %}\n\n{% docs northstar_id %}\nThe Northstar ID of the user who generated the event\n{% enddocs %}\n\n{% docs device_id %}\nID of the device used\n{% enddocs %}\n\n{% docs referrer_host %}\nURL host of the referring site (eg. google.com)\n{% enddocs %}\n\n{% docs referrer_path %}\nURL path from referring site (eg. /10-stats-on-teen-drug-and-alcohol-use/)\n{% enddocs %}\n\n{% docs referrer_source %}\nReferrer source name (eg. Google, Facebook)\n{% enddocs %}\n\n{% docs utm_source %}\nTracks where the traffic is coming from. (eg. scholarship_listing, Facebook)\n{% enddocs %}\n\n{% docs utm_medium %}\nHow the traffic got to the platform (eg. referral, CPC)\n{% enddocs %}\n\n{% docs utm_campaign %}\nTracks which campaign the traffic was generated by. Shows up in Google Analytics as Campaign Name (eg. editorial_newsletter)\n{% enddocs %}\n\n{% docs url %}\nURL of campaign (eg. https://dosome.click/nyn5m7)\n{% enddocs %}\n\n{% docs modal_type %}\nNULL or SURVEY_MODAL\n{% enddocs %}\n\n{% docs landing_datetime %}\nWhen the session started in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs ending_datetime %}\nWhen the session ended in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs session_duration_seconds %}\nSession duration in seconds\n{% enddocs %}\n\n{% docs num_pages_views %}\nNumber of pages viewed in session\n{% enddocs %}\n\n{% docs landing_page %}\nFirst page the user viewed in the session (eg. /us/facts/11-facts-about-bp-oil-spill)\n{% enddocs %}\n\n{% docs exit_page %}\n\"Which page the user ended or exited their session from (eg. /us/campaigns/green-your-getaway)\"\n{% enddocs %}\n\n{% docs days_since_last_session %}\n\"Days since their last session.\"\n{% enddocs %}\n\n{% docs post_type %}\nType of post, (e.g. photo, voter-reg)\n{% enddocs %}\n\n{% docs noun %}\nNoun that corresponds to the item in the call to action that was delivered. (e.g. drawings, tweets)\n{% enddocs %}\n\n{% docs verb %}\nVerb corresponding to the action the user took. (e.g. shared, sent, taken)\n{% enddocs %}\n\n{% docs deleted_at %}\nDate time in UTC when a user deleted their post.\n{% enddocs %}\n\n{% docs _fivetran_deleted %}\nMarks rows that were deleted in the source table\n{% enddocs %}\n\n{% docs _fivetran_synced %}\n(UTC timestamp) keeps track of when each row was last successfully synced\n{% enddocs %}\n\n{% docs reportback %}\nWhether the post is a reportback \n{% enddocs %}\n\n{% docs active %}\nWhether the user is active \n{% enddocs %}\n\n{% docs anonymous %}\nWhether the user is anonymous when making the post \n{% enddocs %}\n\n{% docs callpower_campaign_id %}\nUnique ID corresponding to the Callpower campaign. Callpower allows users to record messages for their representatives.\n{% enddocs %}\n\n{% docs quiz %}\nWhether the post is a quiz \n{% enddocs %}\n\n{% docs action_type %}\nType of action the user took. (e.g. share-something, donate-something)\n{% enddocs %}\n\n{% docs online %}\nWhether the action is a online as opposed to IRL.\n{% enddocs %}\n\n{% docs time_commitment %}\nEstimated time required to do the action (e.g. 3.0+, <0.5)\n{% enddocs %}\n\n{% docs num_signups %}\nQuantity of campaign signups\n{% enddocs %}\n\n{% docs most_recent_signup %}\nTimestamp of the most recent signup in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs num_rbs %}\nQuantity of reportbacks for the user\n{% enddocs %}\n\n{% docs total_quantity %}\nTotal quantity of items in reportbacks\n{% enddocs %}\n\n{% docs most_recent_rb %}\nWhen the most recent reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs first_rb %}\nWhen the first reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs avg_time_betw_rbs %}\nCalculated average time between reportbacks.\n{% enddocs %}\n\n{% docs avg_days_next_action_after_rb %}\nCalculated average days until next action after reportback\n{% enddocs %}\n\n{% docs days_to_next_action_after_last_rb %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs most_recent_mam_action %}\nMost recent monthly active member qualifying action in UTC (eg. 2018-01-01 12:00:00).\n{% enddocs %}\n\n{% docs most_recent_email_open %}\nMost recent email open in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs most_recent_all_actions %}\nMost recent timestamp of any action in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs last_action_is_rb %}\nWhether the last action the user took was a reportback\n{% enddocs %}\n\n{% docs days_since_last_action %}\nDays since the user's last action\n{% enddocs %}\n\n{% docs time_to_first_rb %}\nHow much time after registering until the user's first reportback\n{% enddocs %}\n\n{% docs sms_unsubscribed_at %}\nTimestamp of when user unsubscribed from SMS messaging\n{% enddocs %}\n\n{% docs user_unsubscribed_at %}\nTimestamp of when user unsubscribed from email or sms\n{% enddocs %}\n\n{% docs voter_reg_acquisition %}\nWhether the user was an acquisition through voter registration efforts. \n{% enddocs %}\n\n{% docs last_logged_in %}\nDate time in UTC when user last logged in to Northstar\n{% enddocs %}\n\n{% docs last_accessed %}\nDate time in UTC when user last access the website\n{% enddocs %}\n\n{% docs last_messaged_at %}\nDate time in UTC when user was last sent a message via SMS or email\n{% enddocs %}\n\n{% docs facebook_id %}\nUser's facebook id\n{% enddocs %}\n\n{% docs mobile %}\nUsers's mobile phone number\n{% enddocs %}\n\n{% docs birthdate %}\nUser's birthdate\n{% enddocs %}\n\n{% docs first_name %}\nUser's first name\n{% enddocs %}\n\n{% docs last_name %}\nUser's last name\n{% enddocs %}\n\n{% docs voter_registration_status %}\nUser's registration status. (e.g. registration_complete, confirmed, uncertain) \n{% enddocs %}\n\n{% docs finish_with_state %}\nIf the registrant was eligible to use and passed through to complete their registration with their state\u2019s OVR system, it will be indicated in this field (direct quote from Rock-The-Vote documentation). Yes/No value in field.\n{% enddocs %}\n\n{% docs reportback_volume %}\nThis field returns 1 if non voter-reg action, since campaigns team only counts those a 1 reportback. If voter-reg action, we want to count quantity of post as number of registered voters.\n{% enddocs %}\n\n{% docs address_street_1 %}\nFirst line of user's street address\n{% enddocs %}\n\n{% docs address_street_2 %}\nSecond line of user's street address\n{% enddocs %}\n\n{% docs city %}\nUser's city\n{% enddocs %}\n\n{% docs state %}\nUser's state\n{% enddocs %}\n\n{% docs country %}\nUser's country\n{% enddocs %}\n\n{% docs language %}\nUser's language\n{% enddocs %}\n\n{% docs cio_status %}\nStatus of user from CIO. (e.g. customer_subscribed, customer_unsubscribed)\n{% enddocs %}\n\n{% docs cio_status_timestamp %}\nTimestamp when users's status was updated.\n{% enddocs %}\n\n{% docs sms_status %}\nCurrent SMS status. (e.g. undeliverable, unknown)\n{% enddocs %}\n\n{% docs source_detail %}\nDetails of the origin of the user. (e.g. tell_a_friend, other, opt_in_path/197981)\n{% enddocs %}\n\n{% docs badges %}\nWhether the user has any badges. \n{% enddocs %}\n\n{% docs refer_friends %}\nWhether the user is a part of the refer a friend campaign. \n{% enddocs %}\n\n{% docs subscribed_member %}\nWhether the user is subscribed. \n{% enddocs %}\n\n{% docs last_updated_at %}\nTimestamp when users's was updated.\n{% enddocs %}\n\n{% docs school_id %}\nUnique identifier for the user's school. This info comes from the school finder.\n{% enddocs %}\n\n{% docs newsletter_topic %}\nNewsletter topic. (e.g. community, lifestyle)\n{% enddocs %}\n\n{% docs user_agent %}\nFull user agent string for a user's browser (e.g. \"Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:24.0) Gecko/20100101 Firefox/24.0\")\n{% enddocs %}\n\n{% docs drupal_id %}\nOld Drupal user ID\n{% enddocs %}\n\n{% docs campaigns %}\nCampaigns a user is signed up for.\n{% enddocs %}\n\n{% docs audit %}\nA very useful field with data containing information about changes to a user, e.g. timestamps when the user subscribed and unsubscribed.\n{% enddocs %}\n\n{% docs voting_plan_status %}\nThe indication of the user's plan to vote, e.g. voting, not_voting, cant_vote\n{% enddocs %}\n\n{% docs voting_plan_time_of_day %}\nThe time of day when the user plans to vote, e.g morning, afternoon, evening\n{% enddocs %}\n\n{% docs voting_plan_method_of_transport %}\nHow the user plans to get to their polling place. e.g. walk, drive\n{% enddocs %}\n\n{% docs voting_plan_attending_with %}\nWith Whom the user plans to go voting, e.g. family, friends, alone\n{% enddocs %}\n\n{% docs feature_flags %}\nJSON containing info on features like badges and refer-a-friend.\n{% enddocs %}\n\n{% docs dbt_updated_at %}\nDBT snapshot table data. The updated_at timestamp of the source record when this snapshot row was inserted.\n{% enddocs %}\n\n{% docs dbt_scd_id %}\nDBT snapshot table data. A unique key generated for each snapshotted record.\n{% enddocs %}\n\n{% docs dbt_valid_from %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this snapshot row was first inserted\n{% enddocs %}\n\n{% docs dbt_valid_to %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this row row became invalidated.\n{% enddocs %}\n\n{% docs google_id %}\nUser's Google ID obtained from login.\n{% enddocs %}\n\n{% docs causes %}\nCauses in which a user is interested. e.g. animal welfare, education, mental_health\n{% enddocs %}\n\n{% docs email_subscription_status %}\nEmail subscription status of the user\n{% enddocs %}\n\n{% docs role %}\nUser's role, e.g. user, staff\n{% enddocs %}\n\n{% docs cio_backfilled %}\nWhether this user's data was backfilled from CIO\n{% enddocs %}\n\n{% docs addr_source %}\nWhere the user submitted their address, e.g. sms, GDPR\n{% enddocs %}\n\n{% docs email_subscription_topics %}\nEmail subscription topics correspond to categories in CIO in which the user is interested. e.g. lifestyle, community, scholarship\n{% enddocs %}\n\n{% docs sms_paused %}\nWhether we've paused sending sms messages to the user.\n{% enddocs %}\n\n\n\n\n", "name": "campaign_verb", "unique_id": "ds_dbt.campaign_verb", "block_contents": "Verb describing the action the user should take"}, "ds_dbt.campaign_cta": {"root_path": "/Users/mrich/projects/quasar/quasar/dbt", "resource_type": "docs", "path": "schema.md", "original_file_path": "models/schema.md", "package_name": "ds_dbt", "file_contents": "\n{% docs click_id %}\nThis is a unique identifier for each click\n{% enddocs %}\n\n{% docs click_time %}\nTimestamp when user clicked.\n{% enddocs %}\n\n{% docs shortened %}\nShortened URL\n{% enddocs %}\n\n{% docs target_url %}\nURL where the user will be directed\n{% enddocs %}\n\n{% docs broadcast_id %}\nID of the broadcast that generated the shortened URL\n{% enddocs %}\n\n{% docs source %}\nSource of the URL (e.g. SMS, web), origin of the post (e.g. phoenix-web, phoenix-ashes, sms), or source where user was acquired. (e.g. sms, phoenix-next)\n{% enddocs %}\n\n{% docs interaction_type %}\nHow the user interacted with the link (e.g. preview, click)\n{% enddocs %}\n\n{% docs id %}\nUnique identifier for the post\n{% enddocs %}\n\n{% docs type %}\nType of post (e.g. photo)\n{% enddocs %}\n\n{% docs action %}\nPost action (e.g. DefendDreamers_Nov9_CongressCalls, GunViolence2018_Feb15_ParklandResponse)\n{% enddocs %}\n\n{% docs status %}\nPost status (e.g. accepted, rejected)\n{% enddocs %}\n\n{% docs quantity %}\nNumerical quantity of items specified in the call to action (e.g. 10, 200)\n{% enddocs %}\n\n{% docs source_bucket %}\nGrouping bucket for origin of the post (e.g. web, sms) \n{% enddocs %}\n\n{% docs created_at %}\nWhen the item was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs updated_at %}\nWhen the item was updated in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs text %}\nText of the post (e.g. \"Zoo animals and a super hero trying to help too!\") \n{% enddocs %}\n\n{% docs signup_id %}\nUnique identifier for the signup \n{% enddocs %}\n\n{% docs post_class %}\nClass of the signup (e.g. \"photo - default\", \"phone-call - DefendDreamers_Jan16_BothBodies\")\n{% enddocs %}\n\n{% docs is_accepted %}\nWhether the post has been accepted to be displayed to the public on the website\n{% enddocs %}\n\n{% docs action_id %}\nInternal identifier of the action \n{% enddocs %}\n\n{% docs location %}\nLocation where the action takes place (e.g. US-NY)\n{% enddocs %}\n\n{% docs postal_code %}\nPostal code where the action takes place\n{% enddocs %}\n\n{% docs is_reportback %}\nWhether the post is a reportback. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs civic_action %}\nWhether the post is a Civic Action. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs scholarship_entry %}\nWhether the post is a Scholarship Entry. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs why_participated %}\nWhy the user participated in this action. Entered by the user.\n{% enddocs %}\n\n{% docs details %}\nDetails about the post. Contains contentfulId and other information (e.g. {\"campaignContentfulId\":\"6ATBgGEQEeJoIcxs1qbwaC\"})\n{% enddocs %}\n\n{% docs email %}\nEmail address of the user.\n{% enddocs %}\n\n{% docs source_details %}\nDetails about the source of the item. This is sometimes represented as a JSON object, and for other tables like Turbovote its represented as a string. (e.g. \"{\"contentful_id\":\"3CTLlXfbwtz1FOMpl31SKV\",\"utm_source\":\"scholarship_listing\",\"utm_medium\":\"referral\",\"utm_campaign\":\"fastweb_2019_08\"}\", newsletter_456)\n{% enddocs %}\n\n{% docs campaign_id %}\nThis is a unique identifier for the campaign\n{% enddocs %}\n\n{% docs campaign_run_id %}\nUnique identifier for the campaign run\n{% enddocs %}\n\n{% docs campaign_name %}\nName of the campaign\n{% enddocs %}\n\n{% docs campaign_cause %}\nCampaign cause (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_run_start_date %}\nStart date of the campaign run\n{% enddocs %}\n\n{% docs campaign_run_end_date %}\nEnd date of the campaign run\n{% enddocs %}\n\n{% docs campaign_created_date %}\nWhen the campaign was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs campaign_node_id %}\nInternal unique node id for the campaign\n{% enddocs %}\n\n{% docs campaign_node_id_title %}\nCampaign title\n{% enddocs %}\n\n{% docs campaign_run_id_title %}\nTitle of the campaign run\n{% enddocs %}\n\n{% docs campaign_action_type %}\nCampaign action type (eg. Make Something, Share Something)\n{% enddocs %}\n\n{% docs campaign_cause_type %}\nCampaign cause type (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_noun %}\nNoun applicable to the user's action\n{% enddocs %}\n\n{% docs campaign_verb %}\nVerb describing the action the user should take\n{% enddocs %}\n\n{% docs campaign_cta %}\nCampaign's call to action\n{% enddocs %}\n\n{% docs campaign_language %}\n\"Language in which the campaign is available\"\n{% enddocs %}\n\n{% docs agent_id %}\nIf set, the content type of the picture the member is sending us. Exp. image/png.\n{% enddocs %}\n\n{% docs attachment_content_type %}\nIf set, the handle of the Front agent this outbound support message is from.\n{% enddocs %}\n\n{% docs topic %}\nHolds a reference to the **last** campaign topic the member's conversation was in. This is useful to allow members to talk to Gambit and get quick responses (through Rivescript), without Gambit completely forgetting what state the member's interaction with a campaign topic was in.\n{% enddocs %}\n\n{% docs action_serial_id %}\nSerial id for the user's action. Depends on the source of the action. May be the bertly click id, sms message id, etc.\n{% enddocs %}\n\n{% docs channel %}\nChannel for the user's action. Depends on the source of the action. (e.g. web, sms)\n{% enddocs %}\n\n{% docs first_action_month %}\nMonth during which the user took their first action. \n{% enddocs %}\n\n{% docs event_id %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs event_source %}\nApplication source for event (eg. Phoenix, Northstar)\n{% enddocs %}\n\n{% docs event_datetime %}\nWhen the event occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs event_name %}\nName of the event (eg. northstar_submitted_register, https://docs.google.com/spreadsheets/d/1lm-fGrIm85nUTxSojqyCt_Ehmm1zEbViFhKpxcJiz1A/edit#gid=406441516)\n{% enddocs %}\n\n{% docs event_type %}\nType of event (pv = 'Page View', se = 'Structured Event')\n{% enddocs %}\n\n{% docs host %}\nURL host where event occurred (eg. www.dosomething.org or identity.dosomething.org)\n{% enddocs %}\n\n{% docs path %}\nURL path event occurred at (eg. /login or /us/campaigns/huddle-for-heroes)\n{% enddocs %}\n\n{% docs query_parameters %}\nOptional query parameters for the request (eg. query=huddle)\n{% enddocs %}\n\n{% docs se_category %}\nCategory of event (eg. focused_field, authentication) - Custom structured event\n{% enddocs %}\n\n{% docs se_action %}\nAction performed / event name (eg. form_submitted, action_failed) - Custom structured event\n{% enddocs %}\n\n{% docs se_label %}\nThe object of the action (eg. first_name, register, voter_reg_status) - Custom structured event\n{% enddocs %}\n\n{% docs session_id %}\nUnique identifier of the user's session\n{% enddocs %}\n\n{% docs session_counter %}\nHow many sessions a user has started\n{% enddocs %}\n\n{% docs browser_size %}\nWhich type of browser a user is using (eg. Mobile, Desktop)\n{% enddocs %}\n\n{% docs northstar_id %}\nThe Northstar ID of the user who generated the event\n{% enddocs %}\n\n{% docs device_id %}\nID of the device used\n{% enddocs %}\n\n{% docs referrer_host %}\nURL host of the referring site (eg. google.com)\n{% enddocs %}\n\n{% docs referrer_path %}\nURL path from referring site (eg. /10-stats-on-teen-drug-and-alcohol-use/)\n{% enddocs %}\n\n{% docs referrer_source %}\nReferrer source name (eg. Google, Facebook)\n{% enddocs %}\n\n{% docs utm_source %}\nTracks where the traffic is coming from. (eg. scholarship_listing, Facebook)\n{% enddocs %}\n\n{% docs utm_medium %}\nHow the traffic got to the platform (eg. referral, CPC)\n{% enddocs %}\n\n{% docs utm_campaign %}\nTracks which campaign the traffic was generated by. Shows up in Google Analytics as Campaign Name (eg. editorial_newsletter)\n{% enddocs %}\n\n{% docs url %}\nURL of campaign (eg. https://dosome.click/nyn5m7)\n{% enddocs %}\n\n{% docs modal_type %}\nNULL or SURVEY_MODAL\n{% enddocs %}\n\n{% docs landing_datetime %}\nWhen the session started in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs ending_datetime %}\nWhen the session ended in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs session_duration_seconds %}\nSession duration in seconds\n{% enddocs %}\n\n{% docs num_pages_views %}\nNumber of pages viewed in session\n{% enddocs %}\n\n{% docs landing_page %}\nFirst page the user viewed in the session (eg. /us/facts/11-facts-about-bp-oil-spill)\n{% enddocs %}\n\n{% docs exit_page %}\n\"Which page the user ended or exited their session from (eg. /us/campaigns/green-your-getaway)\"\n{% enddocs %}\n\n{% docs days_since_last_session %}\n\"Days since their last session.\"\n{% enddocs %}\n\n{% docs post_type %}\nType of post, (e.g. photo, voter-reg)\n{% enddocs %}\n\n{% docs noun %}\nNoun that corresponds to the item in the call to action that was delivered. (e.g. drawings, tweets)\n{% enddocs %}\n\n{% docs verb %}\nVerb corresponding to the action the user took. (e.g. shared, sent, taken)\n{% enddocs %}\n\n{% docs deleted_at %}\nDate time in UTC when a user deleted their post.\n{% enddocs %}\n\n{% docs _fivetran_deleted %}\nMarks rows that were deleted in the source table\n{% enddocs %}\n\n{% docs _fivetran_synced %}\n(UTC timestamp) keeps track of when each row was last successfully synced\n{% enddocs %}\n\n{% docs reportback %}\nWhether the post is a reportback \n{% enddocs %}\n\n{% docs active %}\nWhether the user is active \n{% enddocs %}\n\n{% docs anonymous %}\nWhether the user is anonymous when making the post \n{% enddocs %}\n\n{% docs callpower_campaign_id %}\nUnique ID corresponding to the Callpower campaign. Callpower allows users to record messages for their representatives.\n{% enddocs %}\n\n{% docs quiz %}\nWhether the post is a quiz \n{% enddocs %}\n\n{% docs action_type %}\nType of action the user took. (e.g. share-something, donate-something)\n{% enddocs %}\n\n{% docs online %}\nWhether the action is a online as opposed to IRL.\n{% enddocs %}\n\n{% docs time_commitment %}\nEstimated time required to do the action (e.g. 3.0+, <0.5)\n{% enddocs %}\n\n{% docs num_signups %}\nQuantity of campaign signups\n{% enddocs %}\n\n{% docs most_recent_signup %}\nTimestamp of the most recent signup in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs num_rbs %}\nQuantity of reportbacks for the user\n{% enddocs %}\n\n{% docs total_quantity %}\nTotal quantity of items in reportbacks\n{% enddocs %}\n\n{% docs most_recent_rb %}\nWhen the most recent reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs first_rb %}\nWhen the first reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs avg_time_betw_rbs %}\nCalculated average time between reportbacks.\n{% enddocs %}\n\n{% docs avg_days_next_action_after_rb %}\nCalculated average days until next action after reportback\n{% enddocs %}\n\n{% docs days_to_next_action_after_last_rb %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs most_recent_mam_action %}\nMost recent monthly active member qualifying action in UTC (eg. 2018-01-01 12:00:00).\n{% enddocs %}\n\n{% docs most_recent_email_open %}\nMost recent email open in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs most_recent_all_actions %}\nMost recent timestamp of any action in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs last_action_is_rb %}\nWhether the last action the user took was a reportback\n{% enddocs %}\n\n{% docs days_since_last_action %}\nDays since the user's last action\n{% enddocs %}\n\n{% docs time_to_first_rb %}\nHow much time after registering until the user's first reportback\n{% enddocs %}\n\n{% docs sms_unsubscribed_at %}\nTimestamp of when user unsubscribed from SMS messaging\n{% enddocs %}\n\n{% docs user_unsubscribed_at %}\nTimestamp of when user unsubscribed from email or sms\n{% enddocs %}\n\n{% docs voter_reg_acquisition %}\nWhether the user was an acquisition through voter registration efforts. \n{% enddocs %}\n\n{% docs last_logged_in %}\nDate time in UTC when user last logged in to Northstar\n{% enddocs %}\n\n{% docs last_accessed %}\nDate time in UTC when user last access the website\n{% enddocs %}\n\n{% docs last_messaged_at %}\nDate time in UTC when user was last sent a message via SMS or email\n{% enddocs %}\n\n{% docs facebook_id %}\nUser's facebook id\n{% enddocs %}\n\n{% docs mobile %}\nUsers's mobile phone number\n{% enddocs %}\n\n{% docs birthdate %}\nUser's birthdate\n{% enddocs %}\n\n{% docs first_name %}\nUser's first name\n{% enddocs %}\n\n{% docs last_name %}\nUser's last name\n{% enddocs %}\n\n{% docs voter_registration_status %}\nUser's registration status. (e.g. registration_complete, confirmed, uncertain) \n{% enddocs %}\n\n{% docs finish_with_state %}\nIf the registrant was eligible to use and passed through to complete their registration with their state\u2019s OVR system, it will be indicated in this field (direct quote from Rock-The-Vote documentation). Yes/No value in field.\n{% enddocs %}\n\n{% docs reportback_volume %}\nThis field returns 1 if non voter-reg action, since campaigns team only counts those a 1 reportback. If voter-reg action, we want to count quantity of post as number of registered voters.\n{% enddocs %}\n\n{% docs address_street_1 %}\nFirst line of user's street address\n{% enddocs %}\n\n{% docs address_street_2 %}\nSecond line of user's street address\n{% enddocs %}\n\n{% docs city %}\nUser's city\n{% enddocs %}\n\n{% docs state %}\nUser's state\n{% enddocs %}\n\n{% docs country %}\nUser's country\n{% enddocs %}\n\n{% docs language %}\nUser's language\n{% enddocs %}\n\n{% docs cio_status %}\nStatus of user from CIO. (e.g. customer_subscribed, customer_unsubscribed)\n{% enddocs %}\n\n{% docs cio_status_timestamp %}\nTimestamp when users's status was updated.\n{% enddocs %}\n\n{% docs sms_status %}\nCurrent SMS status. (e.g. undeliverable, unknown)\n{% enddocs %}\n\n{% docs source_detail %}\nDetails of the origin of the user. (e.g. tell_a_friend, other, opt_in_path/197981)\n{% enddocs %}\n\n{% docs badges %}\nWhether the user has any badges. \n{% enddocs %}\n\n{% docs refer_friends %}\nWhether the user is a part of the refer a friend campaign. \n{% enddocs %}\n\n{% docs subscribed_member %}\nWhether the user is subscribed. \n{% enddocs %}\n\n{% docs last_updated_at %}\nTimestamp when users's was updated.\n{% enddocs %}\n\n{% docs school_id %}\nUnique identifier for the user's school. This info comes from the school finder.\n{% enddocs %}\n\n{% docs newsletter_topic %}\nNewsletter topic. (e.g. community, lifestyle)\n{% enddocs %}\n\n{% docs user_agent %}\nFull user agent string for a user's browser (e.g. \"Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:24.0) Gecko/20100101 Firefox/24.0\")\n{% enddocs %}\n\n{% docs drupal_id %}\nOld Drupal user ID\n{% enddocs %}\n\n{% docs campaigns %}\nCampaigns a user is signed up for.\n{% enddocs %}\n\n{% docs audit %}\nA very useful field with data containing information about changes to a user, e.g. timestamps when the user subscribed and unsubscribed.\n{% enddocs %}\n\n{% docs voting_plan_status %}\nThe indication of the user's plan to vote, e.g. voting, not_voting, cant_vote\n{% enddocs %}\n\n{% docs voting_plan_time_of_day %}\nThe time of day when the user plans to vote, e.g morning, afternoon, evening\n{% enddocs %}\n\n{% docs voting_plan_method_of_transport %}\nHow the user plans to get to their polling place. e.g. walk, drive\n{% enddocs %}\n\n{% docs voting_plan_attending_with %}\nWith Whom the user plans to go voting, e.g. family, friends, alone\n{% enddocs %}\n\n{% docs feature_flags %}\nJSON containing info on features like badges and refer-a-friend.\n{% enddocs %}\n\n{% docs dbt_updated_at %}\nDBT snapshot table data. The updated_at timestamp of the source record when this snapshot row was inserted.\n{% enddocs %}\n\n{% docs dbt_scd_id %}\nDBT snapshot table data. A unique key generated for each snapshotted record.\n{% enddocs %}\n\n{% docs dbt_valid_from %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this snapshot row was first inserted\n{% enddocs %}\n\n{% docs dbt_valid_to %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this row row became invalidated.\n{% enddocs %}\n\n{% docs google_id %}\nUser's Google ID obtained from login.\n{% enddocs %}\n\n{% docs causes %}\nCauses in which a user is interested. e.g. animal welfare, education, mental_health\n{% enddocs %}\n\n{% docs email_subscription_status %}\nEmail subscription status of the user\n{% enddocs %}\n\n{% docs role %}\nUser's role, e.g. user, staff\n{% enddocs %}\n\n{% docs cio_backfilled %}\nWhether this user's data was backfilled from CIO\n{% enddocs %}\n\n{% docs addr_source %}\nWhere the user submitted their address, e.g. sms, GDPR\n{% enddocs %}\n\n{% docs email_subscription_topics %}\nEmail subscription topics correspond to categories in CIO in which the user is interested. e.g. lifestyle, community, scholarship\n{% enddocs %}\n\n{% docs sms_paused %}\nWhether we've paused sending sms messages to the user.\n{% enddocs %}\n\n\n\n\n", "name": "campaign_cta", "unique_id": "ds_dbt.campaign_cta", "block_contents": "Campaign's call to action"}, "ds_dbt.campaign_language": {"root_path": "/Users/mrich/projects/quasar/quasar/dbt", "resource_type": "docs", "path": "schema.md", "original_file_path": "models/schema.md", "package_name": "ds_dbt", "file_contents": "\n{% docs click_id %}\nThis is a unique identifier for each click\n{% enddocs %}\n\n{% docs click_time %}\nTimestamp when user clicked.\n{% enddocs %}\n\n{% docs shortened %}\nShortened URL\n{% enddocs %}\n\n{% docs target_url %}\nURL where the user will be directed\n{% enddocs %}\n\n{% docs broadcast_id %}\nID of the broadcast that generated the shortened URL\n{% enddocs %}\n\n{% docs source %}\nSource of the URL (e.g. SMS, web), origin of the post (e.g. phoenix-web, phoenix-ashes, sms), or source where user was acquired. (e.g. sms, phoenix-next)\n{% enddocs %}\n\n{% docs interaction_type %}\nHow the user interacted with the link (e.g. preview, click)\n{% enddocs %}\n\n{% docs id %}\nUnique identifier for the post\n{% enddocs %}\n\n{% docs type %}\nType of post (e.g. photo)\n{% enddocs %}\n\n{% docs action %}\nPost action (e.g. DefendDreamers_Nov9_CongressCalls, GunViolence2018_Feb15_ParklandResponse)\n{% enddocs %}\n\n{% docs status %}\nPost status (e.g. accepted, rejected)\n{% enddocs %}\n\n{% docs quantity %}\nNumerical quantity of items specified in the call to action (e.g. 10, 200)\n{% enddocs %}\n\n{% docs source_bucket %}\nGrouping bucket for origin of the post (e.g. web, sms) \n{% enddocs %}\n\n{% docs created_at %}\nWhen the item was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs updated_at %}\nWhen the item was updated in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs text %}\nText of the post (e.g. \"Zoo animals and a super hero trying to help too!\") \n{% enddocs %}\n\n{% docs signup_id %}\nUnique identifier for the signup \n{% enddocs %}\n\n{% docs post_class %}\nClass of the signup (e.g. \"photo - default\", \"phone-call - DefendDreamers_Jan16_BothBodies\")\n{% enddocs %}\n\n{% docs is_accepted %}\nWhether the post has been accepted to be displayed to the public on the website\n{% enddocs %}\n\n{% docs action_id %}\nInternal identifier of the action \n{% enddocs %}\n\n{% docs location %}\nLocation where the action takes place (e.g. US-NY)\n{% enddocs %}\n\n{% docs postal_code %}\nPostal code where the action takes place\n{% enddocs %}\n\n{% docs is_reportback %}\nWhether the post is a reportback. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs civic_action %}\nWhether the post is a Civic Action. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs scholarship_entry %}\nWhether the post is a Scholarship Entry. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs why_participated %}\nWhy the user participated in this action. Entered by the user.\n{% enddocs %}\n\n{% docs details %}\nDetails about the post. Contains contentfulId and other information (e.g. {\"campaignContentfulId\":\"6ATBgGEQEeJoIcxs1qbwaC\"})\n{% enddocs %}\n\n{% docs email %}\nEmail address of the user.\n{% enddocs %}\n\n{% docs source_details %}\nDetails about the source of the item. This is sometimes represented as a JSON object, and for other tables like Turbovote its represented as a string. (e.g. \"{\"contentful_id\":\"3CTLlXfbwtz1FOMpl31SKV\",\"utm_source\":\"scholarship_listing\",\"utm_medium\":\"referral\",\"utm_campaign\":\"fastweb_2019_08\"}\", newsletter_456)\n{% enddocs %}\n\n{% docs campaign_id %}\nThis is a unique identifier for the campaign\n{% enddocs %}\n\n{% docs campaign_run_id %}\nUnique identifier for the campaign run\n{% enddocs %}\n\n{% docs campaign_name %}\nName of the campaign\n{% enddocs %}\n\n{% docs campaign_cause %}\nCampaign cause (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_run_start_date %}\nStart date of the campaign run\n{% enddocs %}\n\n{% docs campaign_run_end_date %}\nEnd date of the campaign run\n{% enddocs %}\n\n{% docs campaign_created_date %}\nWhen the campaign was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs campaign_node_id %}\nInternal unique node id for the campaign\n{% enddocs %}\n\n{% docs campaign_node_id_title %}\nCampaign title\n{% enddocs %}\n\n{% docs campaign_run_id_title %}\nTitle of the campaign run\n{% enddocs %}\n\n{% docs campaign_action_type %}\nCampaign action type (eg. Make Something, Share Something)\n{% enddocs %}\n\n{% docs campaign_cause_type %}\nCampaign cause type (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_noun %}\nNoun applicable to the user's action\n{% enddocs %}\n\n{% docs campaign_verb %}\nVerb describing the action the user should take\n{% enddocs %}\n\n{% docs campaign_cta %}\nCampaign's call to action\n{% enddocs %}\n\n{% docs campaign_language %}\n\"Language in which the campaign is available\"\n{% enddocs %}\n\n{% docs agent_id %}\nIf set, the content type of the picture the member is sending us. Exp. image/png.\n{% enddocs %}\n\n{% docs attachment_content_type %}\nIf set, the handle of the Front agent this outbound support message is from.\n{% enddocs %}\n\n{% docs topic %}\nHolds a reference to the **last** campaign topic the member's conversation was in. This is useful to allow members to talk to Gambit and get quick responses (through Rivescript), without Gambit completely forgetting what state the member's interaction with a campaign topic was in.\n{% enddocs %}\n\n{% docs action_serial_id %}\nSerial id for the user's action. Depends on the source of the action. May be the bertly click id, sms message id, etc.\n{% enddocs %}\n\n{% docs channel %}\nChannel for the user's action. Depends on the source of the action. (e.g. web, sms)\n{% enddocs %}\n\n{% docs first_action_month %}\nMonth during which the user took their first action. \n{% enddocs %}\n\n{% docs event_id %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs event_source %}\nApplication source for event (eg. Phoenix, Northstar)\n{% enddocs %}\n\n{% docs event_datetime %}\nWhen the event occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs event_name %}\nName of the event (eg. northstar_submitted_register, https://docs.google.com/spreadsheets/d/1lm-fGrIm85nUTxSojqyCt_Ehmm1zEbViFhKpxcJiz1A/edit#gid=406441516)\n{% enddocs %}\n\n{% docs event_type %}\nType of event (pv = 'Page View', se = 'Structured Event')\n{% enddocs %}\n\n{% docs host %}\nURL host where event occurred (eg. www.dosomething.org or identity.dosomething.org)\n{% enddocs %}\n\n{% docs path %}\nURL path event occurred at (eg. /login or /us/campaigns/huddle-for-heroes)\n{% enddocs %}\n\n{% docs query_parameters %}\nOptional query parameters for the request (eg. query=huddle)\n{% enddocs %}\n\n{% docs se_category %}\nCategory of event (eg. focused_field, authentication) - Custom structured event\n{% enddocs %}\n\n{% docs se_action %}\nAction performed / event name (eg. form_submitted, action_failed) - Custom structured event\n{% enddocs %}\n\n{% docs se_label %}\nThe object of the action (eg. first_name, register, voter_reg_status) - Custom structured event\n{% enddocs %}\n\n{% docs session_id %}\nUnique identifier of the user's session\n{% enddocs %}\n\n{% docs session_counter %}\nHow many sessions a user has started\n{% enddocs %}\n\n{% docs browser_size %}\nWhich type of browser a user is using (eg. Mobile, Desktop)\n{% enddocs %}\n\n{% docs northstar_id %}\nThe Northstar ID of the user who generated the event\n{% enddocs %}\n\n{% docs device_id %}\nID of the device used\n{% enddocs %}\n\n{% docs referrer_host %}\nURL host of the referring site (eg. google.com)\n{% enddocs %}\n\n{% docs referrer_path %}\nURL path from referring site (eg. /10-stats-on-teen-drug-and-alcohol-use/)\n{% enddocs %}\n\n{% docs referrer_source %}\nReferrer source name (eg. Google, Facebook)\n{% enddocs %}\n\n{% docs utm_source %}\nTracks where the traffic is coming from. (eg. scholarship_listing, Facebook)\n{% enddocs %}\n\n{% docs utm_medium %}\nHow the traffic got to the platform (eg. referral, CPC)\n{% enddocs %}\n\n{% docs utm_campaign %}\nTracks which campaign the traffic was generated by. Shows up in Google Analytics as Campaign Name (eg. editorial_newsletter)\n{% enddocs %}\n\n{% docs url %}\nURL of campaign (eg. https://dosome.click/nyn5m7)\n{% enddocs %}\n\n{% docs modal_type %}\nNULL or SURVEY_MODAL\n{% enddocs %}\n\n{% docs landing_datetime %}\nWhen the session started in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs ending_datetime %}\nWhen the session ended in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs session_duration_seconds %}\nSession duration in seconds\n{% enddocs %}\n\n{% docs num_pages_views %}\nNumber of pages viewed in session\n{% enddocs %}\n\n{% docs landing_page %}\nFirst page the user viewed in the session (eg. /us/facts/11-facts-about-bp-oil-spill)\n{% enddocs %}\n\n{% docs exit_page %}\n\"Which page the user ended or exited their session from (eg. /us/campaigns/green-your-getaway)\"\n{% enddocs %}\n\n{% docs days_since_last_session %}\n\"Days since their last session.\"\n{% enddocs %}\n\n{% docs post_type %}\nType of post, (e.g. photo, voter-reg)\n{% enddocs %}\n\n{% docs noun %}\nNoun that corresponds to the item in the call to action that was delivered. (e.g. drawings, tweets)\n{% enddocs %}\n\n{% docs verb %}\nVerb corresponding to the action the user took. (e.g. shared, sent, taken)\n{% enddocs %}\n\n{% docs deleted_at %}\nDate time in UTC when a user deleted their post.\n{% enddocs %}\n\n{% docs _fivetran_deleted %}\nMarks rows that were deleted in the source table\n{% enddocs %}\n\n{% docs _fivetran_synced %}\n(UTC timestamp) keeps track of when each row was last successfully synced\n{% enddocs %}\n\n{% docs reportback %}\nWhether the post is a reportback \n{% enddocs %}\n\n{% docs active %}\nWhether the user is active \n{% enddocs %}\n\n{% docs anonymous %}\nWhether the user is anonymous when making the post \n{% enddocs %}\n\n{% docs callpower_campaign_id %}\nUnique ID corresponding to the Callpower campaign. Callpower allows users to record messages for their representatives.\n{% enddocs %}\n\n{% docs quiz %}\nWhether the post is a quiz \n{% enddocs %}\n\n{% docs action_type %}\nType of action the user took. (e.g. share-something, donate-something)\n{% enddocs %}\n\n{% docs online %}\nWhether the action is a online as opposed to IRL.\n{% enddocs %}\n\n{% docs time_commitment %}\nEstimated time required to do the action (e.g. 3.0+, <0.5)\n{% enddocs %}\n\n{% docs num_signups %}\nQuantity of campaign signups\n{% enddocs %}\n\n{% docs most_recent_signup %}\nTimestamp of the most recent signup in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs num_rbs %}\nQuantity of reportbacks for the user\n{% enddocs %}\n\n{% docs total_quantity %}\nTotal quantity of items in reportbacks\n{% enddocs %}\n\n{% docs most_recent_rb %}\nWhen the most recent reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs first_rb %}\nWhen the first reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs avg_time_betw_rbs %}\nCalculated average time between reportbacks.\n{% enddocs %}\n\n{% docs avg_days_next_action_after_rb %}\nCalculated average days until next action after reportback\n{% enddocs %}\n\n{% docs days_to_next_action_after_last_rb %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs most_recent_mam_action %}\nMost recent monthly active member qualifying action in UTC (eg. 2018-01-01 12:00:00).\n{% enddocs %}\n\n{% docs most_recent_email_open %}\nMost recent email open in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs most_recent_all_actions %}\nMost recent timestamp of any action in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs last_action_is_rb %}\nWhether the last action the user took was a reportback\n{% enddocs %}\n\n{% docs days_since_last_action %}\nDays since the user's last action\n{% enddocs %}\n\n{% docs time_to_first_rb %}\nHow much time after registering until the user's first reportback\n{% enddocs %}\n\n{% docs sms_unsubscribed_at %}\nTimestamp of when user unsubscribed from SMS messaging\n{% enddocs %}\n\n{% docs user_unsubscribed_at %}\nTimestamp of when user unsubscribed from email or sms\n{% enddocs %}\n\n{% docs voter_reg_acquisition %}\nWhether the user was an acquisition through voter registration efforts. \n{% enddocs %}\n\n{% docs last_logged_in %}\nDate time in UTC when user last logged in to Northstar\n{% enddocs %}\n\n{% docs last_accessed %}\nDate time in UTC when user last access the website\n{% enddocs %}\n\n{% docs last_messaged_at %}\nDate time in UTC when user was last sent a message via SMS or email\n{% enddocs %}\n\n{% docs facebook_id %}\nUser's facebook id\n{% enddocs %}\n\n{% docs mobile %}\nUsers's mobile phone number\n{% enddocs %}\n\n{% docs birthdate %}\nUser's birthdate\n{% enddocs %}\n\n{% docs first_name %}\nUser's first name\n{% enddocs %}\n\n{% docs last_name %}\nUser's last name\n{% enddocs %}\n\n{% docs voter_registration_status %}\nUser's registration status. (e.g. registration_complete, confirmed, uncertain) \n{% enddocs %}\n\n{% docs finish_with_state %}\nIf the registrant was eligible to use and passed through to complete their registration with their state\u2019s OVR system, it will be indicated in this field (direct quote from Rock-The-Vote documentation). Yes/No value in field.\n{% enddocs %}\n\n{% docs reportback_volume %}\nThis field returns 1 if non voter-reg action, since campaigns team only counts those a 1 reportback. If voter-reg action, we want to count quantity of post as number of registered voters.\n{% enddocs %}\n\n{% docs address_street_1 %}\nFirst line of user's street address\n{% enddocs %}\n\n{% docs address_street_2 %}\nSecond line of user's street address\n{% enddocs %}\n\n{% docs city %}\nUser's city\n{% enddocs %}\n\n{% docs state %}\nUser's state\n{% enddocs %}\n\n{% docs country %}\nUser's country\n{% enddocs %}\n\n{% docs language %}\nUser's language\n{% enddocs %}\n\n{% docs cio_status %}\nStatus of user from CIO. (e.g. customer_subscribed, customer_unsubscribed)\n{% enddocs %}\n\n{% docs cio_status_timestamp %}\nTimestamp when users's status was updated.\n{% enddocs %}\n\n{% docs sms_status %}\nCurrent SMS status. (e.g. undeliverable, unknown)\n{% enddocs %}\n\n{% docs source_detail %}\nDetails of the origin of the user. (e.g. tell_a_friend, other, opt_in_path/197981)\n{% enddocs %}\n\n{% docs badges %}\nWhether the user has any badges. \n{% enddocs %}\n\n{% docs refer_friends %}\nWhether the user is a part of the refer a friend campaign. \n{% enddocs %}\n\n{% docs subscribed_member %}\nWhether the user is subscribed. \n{% enddocs %}\n\n{% docs last_updated_at %}\nTimestamp when users's was updated.\n{% enddocs %}\n\n{% docs school_id %}\nUnique identifier for the user's school. This info comes from the school finder.\n{% enddocs %}\n\n{% docs newsletter_topic %}\nNewsletter topic. (e.g. community, lifestyle)\n{% enddocs %}\n\n{% docs user_agent %}\nFull user agent string for a user's browser (e.g. \"Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:24.0) Gecko/20100101 Firefox/24.0\")\n{% enddocs %}\n\n{% docs drupal_id %}\nOld Drupal user ID\n{% enddocs %}\n\n{% docs campaigns %}\nCampaigns a user is signed up for.\n{% enddocs %}\n\n{% docs audit %}\nA very useful field with data containing information about changes to a user, e.g. timestamps when the user subscribed and unsubscribed.\n{% enddocs %}\n\n{% docs voting_plan_status %}\nThe indication of the user's plan to vote, e.g. voting, not_voting, cant_vote\n{% enddocs %}\n\n{% docs voting_plan_time_of_day %}\nThe time of day when the user plans to vote, e.g morning, afternoon, evening\n{% enddocs %}\n\n{% docs voting_plan_method_of_transport %}\nHow the user plans to get to their polling place. e.g. walk, drive\n{% enddocs %}\n\n{% docs voting_plan_attending_with %}\nWith Whom the user plans to go voting, e.g. family, friends, alone\n{% enddocs %}\n\n{% docs feature_flags %}\nJSON containing info on features like badges and refer-a-friend.\n{% enddocs %}\n\n{% docs dbt_updated_at %}\nDBT snapshot table data. The updated_at timestamp of the source record when this snapshot row was inserted.\n{% enddocs %}\n\n{% docs dbt_scd_id %}\nDBT snapshot table data. A unique key generated for each snapshotted record.\n{% enddocs %}\n\n{% docs dbt_valid_from %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this snapshot row was first inserted\n{% enddocs %}\n\n{% docs dbt_valid_to %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this row row became invalidated.\n{% enddocs %}\n\n{% docs google_id %}\nUser's Google ID obtained from login.\n{% enddocs %}\n\n{% docs causes %}\nCauses in which a user is interested. e.g. animal welfare, education, mental_health\n{% enddocs %}\n\n{% docs email_subscription_status %}\nEmail subscription status of the user\n{% enddocs %}\n\n{% docs role %}\nUser's role, e.g. user, staff\n{% enddocs %}\n\n{% docs cio_backfilled %}\nWhether this user's data was backfilled from CIO\n{% enddocs %}\n\n{% docs addr_source %}\nWhere the user submitted their address, e.g. sms, GDPR\n{% enddocs %}\n\n{% docs email_subscription_topics %}\nEmail subscription topics correspond to categories in CIO in which the user is interested. e.g. lifestyle, community, scholarship\n{% enddocs %}\n\n{% docs sms_paused %}\nWhether we've paused sending sms messages to the user.\n{% enddocs %}\n\n\n\n\n", "name": "campaign_language", "unique_id": "ds_dbt.campaign_language", "block_contents": "\"Language in which the campaign is available\""}, "ds_dbt.agent_id": {"root_path": "/Users/mrich/projects/quasar/quasar/dbt", "resource_type": "docs", "path": "schema.md", "original_file_path": "models/schema.md", "package_name": "ds_dbt", "file_contents": "\n{% docs click_id %}\nThis is a unique identifier for each click\n{% enddocs %}\n\n{% docs click_time %}\nTimestamp when user clicked.\n{% enddocs %}\n\n{% docs shortened %}\nShortened URL\n{% enddocs %}\n\n{% docs target_url %}\nURL where the user will be directed\n{% enddocs %}\n\n{% docs broadcast_id %}\nID of the broadcast that generated the shortened URL\n{% enddocs %}\n\n{% docs source %}\nSource of the URL (e.g. SMS, web), origin of the post (e.g. phoenix-web, phoenix-ashes, sms), or source where user was acquired. (e.g. sms, phoenix-next)\n{% enddocs %}\n\n{% docs interaction_type %}\nHow the user interacted with the link (e.g. preview, click)\n{% enddocs %}\n\n{% docs id %}\nUnique identifier for the post\n{% enddocs %}\n\n{% docs type %}\nType of post (e.g. photo)\n{% enddocs %}\n\n{% docs action %}\nPost action (e.g. DefendDreamers_Nov9_CongressCalls, GunViolence2018_Feb15_ParklandResponse)\n{% enddocs %}\n\n{% docs status %}\nPost status (e.g. accepted, rejected)\n{% enddocs %}\n\n{% docs quantity %}\nNumerical quantity of items specified in the call to action (e.g. 10, 200)\n{% enddocs %}\n\n{% docs source_bucket %}\nGrouping bucket for origin of the post (e.g. web, sms) \n{% enddocs %}\n\n{% docs created_at %}\nWhen the item was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs updated_at %}\nWhen the item was updated in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs text %}\nText of the post (e.g. \"Zoo animals and a super hero trying to help too!\") \n{% enddocs %}\n\n{% docs signup_id %}\nUnique identifier for the signup \n{% enddocs %}\n\n{% docs post_class %}\nClass of the signup (e.g. \"photo - default\", \"phone-call - DefendDreamers_Jan16_BothBodies\")\n{% enddocs %}\n\n{% docs is_accepted %}\nWhether the post has been accepted to be displayed to the public on the website\n{% enddocs %}\n\n{% docs action_id %}\nInternal identifier of the action \n{% enddocs %}\n\n{% docs location %}\nLocation where the action takes place (e.g. US-NY)\n{% enddocs %}\n\n{% docs postal_code %}\nPostal code where the action takes place\n{% enddocs %}\n\n{% docs is_reportback %}\nWhether the post is a reportback. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs civic_action %}\nWhether the post is a Civic Action. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs scholarship_entry %}\nWhether the post is a Scholarship Entry. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs why_participated %}\nWhy the user participated in this action. Entered by the user.\n{% enddocs %}\n\n{% docs details %}\nDetails about the post. Contains contentfulId and other information (e.g. {\"campaignContentfulId\":\"6ATBgGEQEeJoIcxs1qbwaC\"})\n{% enddocs %}\n\n{% docs email %}\nEmail address of the user.\n{% enddocs %}\n\n{% docs source_details %}\nDetails about the source of the item. This is sometimes represented as a JSON object, and for other tables like Turbovote its represented as a string. (e.g. \"{\"contentful_id\":\"3CTLlXfbwtz1FOMpl31SKV\",\"utm_source\":\"scholarship_listing\",\"utm_medium\":\"referral\",\"utm_campaign\":\"fastweb_2019_08\"}\", newsletter_456)\n{% enddocs %}\n\n{% docs campaign_id %}\nThis is a unique identifier for the campaign\n{% enddocs %}\n\n{% docs campaign_run_id %}\nUnique identifier for the campaign run\n{% enddocs %}\n\n{% docs campaign_name %}\nName of the campaign\n{% enddocs %}\n\n{% docs campaign_cause %}\nCampaign cause (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_run_start_date %}\nStart date of the campaign run\n{% enddocs %}\n\n{% docs campaign_run_end_date %}\nEnd date of the campaign run\n{% enddocs %}\n\n{% docs campaign_created_date %}\nWhen the campaign was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs campaign_node_id %}\nInternal unique node id for the campaign\n{% enddocs %}\n\n{% docs campaign_node_id_title %}\nCampaign title\n{% enddocs %}\n\n{% docs campaign_run_id_title %}\nTitle of the campaign run\n{% enddocs %}\n\n{% docs campaign_action_type %}\nCampaign action type (eg. Make Something, Share Something)\n{% enddocs %}\n\n{% docs campaign_cause_type %}\nCampaign cause type (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_noun %}\nNoun applicable to the user's action\n{% enddocs %}\n\n{% docs campaign_verb %}\nVerb describing the action the user should take\n{% enddocs %}\n\n{% docs campaign_cta %}\nCampaign's call to action\n{% enddocs %}\n\n{% docs campaign_language %}\n\"Language in which the campaign is available\"\n{% enddocs %}\n\n{% docs agent_id %}\nIf set, the content type of the picture the member is sending us. Exp. image/png.\n{% enddocs %}\n\n{% docs attachment_content_type %}\nIf set, the handle of the Front agent this outbound support message is from.\n{% enddocs %}\n\n{% docs topic %}\nHolds a reference to the **last** campaign topic the member's conversation was in. This is useful to allow members to talk to Gambit and get quick responses (through Rivescript), without Gambit completely forgetting what state the member's interaction with a campaign topic was in.\n{% enddocs %}\n\n{% docs action_serial_id %}\nSerial id for the user's action. Depends on the source of the action. May be the bertly click id, sms message id, etc.\n{% enddocs %}\n\n{% docs channel %}\nChannel for the user's action. Depends on the source of the action. (e.g. web, sms)\n{% enddocs %}\n\n{% docs first_action_month %}\nMonth during which the user took their first action. \n{% enddocs %}\n\n{% docs event_id %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs event_source %}\nApplication source for event (eg. Phoenix, Northstar)\n{% enddocs %}\n\n{% docs event_datetime %}\nWhen the event occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs event_name %}\nName of the event (eg. northstar_submitted_register, https://docs.google.com/spreadsheets/d/1lm-fGrIm85nUTxSojqyCt_Ehmm1zEbViFhKpxcJiz1A/edit#gid=406441516)\n{% enddocs %}\n\n{% docs event_type %}\nType of event (pv = 'Page View', se = 'Structured Event')\n{% enddocs %}\n\n{% docs host %}\nURL host where event occurred (eg. www.dosomething.org or identity.dosomething.org)\n{% enddocs %}\n\n{% docs path %}\nURL path event occurred at (eg. /login or /us/campaigns/huddle-for-heroes)\n{% enddocs %}\n\n{% docs query_parameters %}\nOptional query parameters for the request (eg. query=huddle)\n{% enddocs %}\n\n{% docs se_category %}\nCategory of event (eg. focused_field, authentication) - Custom structured event\n{% enddocs %}\n\n{% docs se_action %}\nAction performed / event name (eg. form_submitted, action_failed) - Custom structured event\n{% enddocs %}\n\n{% docs se_label %}\nThe object of the action (eg. first_name, register, voter_reg_status) - Custom structured event\n{% enddocs %}\n\n{% docs session_id %}\nUnique identifier of the user's session\n{% enddocs %}\n\n{% docs session_counter %}\nHow many sessions a user has started\n{% enddocs %}\n\n{% docs browser_size %}\nWhich type of browser a user is using (eg. Mobile, Desktop)\n{% enddocs %}\n\n{% docs northstar_id %}\nThe Northstar ID of the user who generated the event\n{% enddocs %}\n\n{% docs device_id %}\nID of the device used\n{% enddocs %}\n\n{% docs referrer_host %}\nURL host of the referring site (eg. google.com)\n{% enddocs %}\n\n{% docs referrer_path %}\nURL path from referring site (eg. /10-stats-on-teen-drug-and-alcohol-use/)\n{% enddocs %}\n\n{% docs referrer_source %}\nReferrer source name (eg. Google, Facebook)\n{% enddocs %}\n\n{% docs utm_source %}\nTracks where the traffic is coming from. (eg. scholarship_listing, Facebook)\n{% enddocs %}\n\n{% docs utm_medium %}\nHow the traffic got to the platform (eg. referral, CPC)\n{% enddocs %}\n\n{% docs utm_campaign %}\nTracks which campaign the traffic was generated by. Shows up in Google Analytics as Campaign Name (eg. editorial_newsletter)\n{% enddocs %}\n\n{% docs url %}\nURL of campaign (eg. https://dosome.click/nyn5m7)\n{% enddocs %}\n\n{% docs modal_type %}\nNULL or SURVEY_MODAL\n{% enddocs %}\n\n{% docs landing_datetime %}\nWhen the session started in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs ending_datetime %}\nWhen the session ended in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs session_duration_seconds %}\nSession duration in seconds\n{% enddocs %}\n\n{% docs num_pages_views %}\nNumber of pages viewed in session\n{% enddocs %}\n\n{% docs landing_page %}\nFirst page the user viewed in the session (eg. /us/facts/11-facts-about-bp-oil-spill)\n{% enddocs %}\n\n{% docs exit_page %}\n\"Which page the user ended or exited their session from (eg. /us/campaigns/green-your-getaway)\"\n{% enddocs %}\n\n{% docs days_since_last_session %}\n\"Days since their last session.\"\n{% enddocs %}\n\n{% docs post_type %}\nType of post, (e.g. photo, voter-reg)\n{% enddocs %}\n\n{% docs noun %}\nNoun that corresponds to the item in the call to action that was delivered. (e.g. drawings, tweets)\n{% enddocs %}\n\n{% docs verb %}\nVerb corresponding to the action the user took. (e.g. shared, sent, taken)\n{% enddocs %}\n\n{% docs deleted_at %}\nDate time in UTC when a user deleted their post.\n{% enddocs %}\n\n{% docs _fivetran_deleted %}\nMarks rows that were deleted in the source table\n{% enddocs %}\n\n{% docs _fivetran_synced %}\n(UTC timestamp) keeps track of when each row was last successfully synced\n{% enddocs %}\n\n{% docs reportback %}\nWhether the post is a reportback \n{% enddocs %}\n\n{% docs active %}\nWhether the user is active \n{% enddocs %}\n\n{% docs anonymous %}\nWhether the user is anonymous when making the post \n{% enddocs %}\n\n{% docs callpower_campaign_id %}\nUnique ID corresponding to the Callpower campaign. Callpower allows users to record messages for their representatives.\n{% enddocs %}\n\n{% docs quiz %}\nWhether the post is a quiz \n{% enddocs %}\n\n{% docs action_type %}\nType of action the user took. (e.g. share-something, donate-something)\n{% enddocs %}\n\n{% docs online %}\nWhether the action is a online as opposed to IRL.\n{% enddocs %}\n\n{% docs time_commitment %}\nEstimated time required to do the action (e.g. 3.0+, <0.5)\n{% enddocs %}\n\n{% docs num_signups %}\nQuantity of campaign signups\n{% enddocs %}\n\n{% docs most_recent_signup %}\nTimestamp of the most recent signup in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs num_rbs %}\nQuantity of reportbacks for the user\n{% enddocs %}\n\n{% docs total_quantity %}\nTotal quantity of items in reportbacks\n{% enddocs %}\n\n{% docs most_recent_rb %}\nWhen the most recent reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs first_rb %}\nWhen the first reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs avg_time_betw_rbs %}\nCalculated average time between reportbacks.\n{% enddocs %}\n\n{% docs avg_days_next_action_after_rb %}\nCalculated average days until next action after reportback\n{% enddocs %}\n\n{% docs days_to_next_action_after_last_rb %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs most_recent_mam_action %}\nMost recent monthly active member qualifying action in UTC (eg. 2018-01-01 12:00:00).\n{% enddocs %}\n\n{% docs most_recent_email_open %}\nMost recent email open in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs most_recent_all_actions %}\nMost recent timestamp of any action in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs last_action_is_rb %}\nWhether the last action the user took was a reportback\n{% enddocs %}\n\n{% docs days_since_last_action %}\nDays since the user's last action\n{% enddocs %}\n\n{% docs time_to_first_rb %}\nHow much time after registering until the user's first reportback\n{% enddocs %}\n\n{% docs sms_unsubscribed_at %}\nTimestamp of when user unsubscribed from SMS messaging\n{% enddocs %}\n\n{% docs user_unsubscribed_at %}\nTimestamp of when user unsubscribed from email or sms\n{% enddocs %}\n\n{% docs voter_reg_acquisition %}\nWhether the user was an acquisition through voter registration efforts. \n{% enddocs %}\n\n{% docs last_logged_in %}\nDate time in UTC when user last logged in to Northstar\n{% enddocs %}\n\n{% docs last_accessed %}\nDate time in UTC when user last access the website\n{% enddocs %}\n\n{% docs last_messaged_at %}\nDate time in UTC when user was last sent a message via SMS or email\n{% enddocs %}\n\n{% docs facebook_id %}\nUser's facebook id\n{% enddocs %}\n\n{% docs mobile %}\nUsers's mobile phone number\n{% enddocs %}\n\n{% docs birthdate %}\nUser's birthdate\n{% enddocs %}\n\n{% docs first_name %}\nUser's first name\n{% enddocs %}\n\n{% docs last_name %}\nUser's last name\n{% enddocs %}\n\n{% docs voter_registration_status %}\nUser's registration status. (e.g. registration_complete, confirmed, uncertain) \n{% enddocs %}\n\n{% docs finish_with_state %}\nIf the registrant was eligible to use and passed through to complete their registration with their state\u2019s OVR system, it will be indicated in this field (direct quote from Rock-The-Vote documentation). Yes/No value in field.\n{% enddocs %}\n\n{% docs reportback_volume %}\nThis field returns 1 if non voter-reg action, since campaigns team only counts those a 1 reportback. If voter-reg action, we want to count quantity of post as number of registered voters.\n{% enddocs %}\n\n{% docs address_street_1 %}\nFirst line of user's street address\n{% enddocs %}\n\n{% docs address_street_2 %}\nSecond line of user's street address\n{% enddocs %}\n\n{% docs city %}\nUser's city\n{% enddocs %}\n\n{% docs state %}\nUser's state\n{% enddocs %}\n\n{% docs country %}\nUser's country\n{% enddocs %}\n\n{% docs language %}\nUser's language\n{% enddocs %}\n\n{% docs cio_status %}\nStatus of user from CIO. (e.g. customer_subscribed, customer_unsubscribed)\n{% enddocs %}\n\n{% docs cio_status_timestamp %}\nTimestamp when users's status was updated.\n{% enddocs %}\n\n{% docs sms_status %}\nCurrent SMS status. (e.g. undeliverable, unknown)\n{% enddocs %}\n\n{% docs source_detail %}\nDetails of the origin of the user. (e.g. tell_a_friend, other, opt_in_path/197981)\n{% enddocs %}\n\n{% docs badges %}\nWhether the user has any badges. \n{% enddocs %}\n\n{% docs refer_friends %}\nWhether the user is a part of the refer a friend campaign. \n{% enddocs %}\n\n{% docs subscribed_member %}\nWhether the user is subscribed. \n{% enddocs %}\n\n{% docs last_updated_at %}\nTimestamp when users's was updated.\n{% enddocs %}\n\n{% docs school_id %}\nUnique identifier for the user's school. This info comes from the school finder.\n{% enddocs %}\n\n{% docs newsletter_topic %}\nNewsletter topic. (e.g. community, lifestyle)\n{% enddocs %}\n\n{% docs user_agent %}\nFull user agent string for a user's browser (e.g. \"Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:24.0) Gecko/20100101 Firefox/24.0\")\n{% enddocs %}\n\n{% docs drupal_id %}\nOld Drupal user ID\n{% enddocs %}\n\n{% docs campaigns %}\nCampaigns a user is signed up for.\n{% enddocs %}\n\n{% docs audit %}\nA very useful field with data containing information about changes to a user, e.g. timestamps when the user subscribed and unsubscribed.\n{% enddocs %}\n\n{% docs voting_plan_status %}\nThe indication of the user's plan to vote, e.g. voting, not_voting, cant_vote\n{% enddocs %}\n\n{% docs voting_plan_time_of_day %}\nThe time of day when the user plans to vote, e.g morning, afternoon, evening\n{% enddocs %}\n\n{% docs voting_plan_method_of_transport %}\nHow the user plans to get to their polling place. e.g. walk, drive\n{% enddocs %}\n\n{% docs voting_plan_attending_with %}\nWith Whom the user plans to go voting, e.g. family, friends, alone\n{% enddocs %}\n\n{% docs feature_flags %}\nJSON containing info on features like badges and refer-a-friend.\n{% enddocs %}\n\n{% docs dbt_updated_at %}\nDBT snapshot table data. The updated_at timestamp of the source record when this snapshot row was inserted.\n{% enddocs %}\n\n{% docs dbt_scd_id %}\nDBT snapshot table data. A unique key generated for each snapshotted record.\n{% enddocs %}\n\n{% docs dbt_valid_from %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this snapshot row was first inserted\n{% enddocs %}\n\n{% docs dbt_valid_to %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this row row became invalidated.\n{% enddocs %}\n\n{% docs google_id %}\nUser's Google ID obtained from login.\n{% enddocs %}\n\n{% docs causes %}\nCauses in which a user is interested. e.g. animal welfare, education, mental_health\n{% enddocs %}\n\n{% docs email_subscription_status %}\nEmail subscription status of the user\n{% enddocs %}\n\n{% docs role %}\nUser's role, e.g. user, staff\n{% enddocs %}\n\n{% docs cio_backfilled %}\nWhether this user's data was backfilled from CIO\n{% enddocs %}\n\n{% docs addr_source %}\nWhere the user submitted their address, e.g. sms, GDPR\n{% enddocs %}\n\n{% docs email_subscription_topics %}\nEmail subscription topics correspond to categories in CIO in which the user is interested. e.g. lifestyle, community, scholarship\n{% enddocs %}\n\n{% docs sms_paused %}\nWhether we've paused sending sms messages to the user.\n{% enddocs %}\n\n\n\n\n", "name": "agent_id", "unique_id": "ds_dbt.agent_id", "block_contents": "If set, the content type of the picture the member is sending us. Exp. image/png."}, "ds_dbt.attachment_content_type": {"root_path": "/Users/mrich/projects/quasar/quasar/dbt", "resource_type": "docs", "path": "schema.md", "original_file_path": "models/schema.md", "package_name": "ds_dbt", "file_contents": "\n{% docs click_id %}\nThis is a unique identifier for each click\n{% enddocs %}\n\n{% docs click_time %}\nTimestamp when user clicked.\n{% enddocs %}\n\n{% docs shortened %}\nShortened URL\n{% enddocs %}\n\n{% docs target_url %}\nURL where the user will be directed\n{% enddocs %}\n\n{% docs broadcast_id %}\nID of the broadcast that generated the shortened URL\n{% enddocs %}\n\n{% docs source %}\nSource of the URL (e.g. SMS, web), origin of the post (e.g. phoenix-web, phoenix-ashes, sms), or source where user was acquired. (e.g. sms, phoenix-next)\n{% enddocs %}\n\n{% docs interaction_type %}\nHow the user interacted with the link (e.g. preview, click)\n{% enddocs %}\n\n{% docs id %}\nUnique identifier for the post\n{% enddocs %}\n\n{% docs type %}\nType of post (e.g. photo)\n{% enddocs %}\n\n{% docs action %}\nPost action (e.g. DefendDreamers_Nov9_CongressCalls, GunViolence2018_Feb15_ParklandResponse)\n{% enddocs %}\n\n{% docs status %}\nPost status (e.g. accepted, rejected)\n{% enddocs %}\n\n{% docs quantity %}\nNumerical quantity of items specified in the call to action (e.g. 10, 200)\n{% enddocs %}\n\n{% docs source_bucket %}\nGrouping bucket for origin of the post (e.g. web, sms) \n{% enddocs %}\n\n{% docs created_at %}\nWhen the item was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs updated_at %}\nWhen the item was updated in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs text %}\nText of the post (e.g. \"Zoo animals and a super hero trying to help too!\") \n{% enddocs %}\n\n{% docs signup_id %}\nUnique identifier for the signup \n{% enddocs %}\n\n{% docs post_class %}\nClass of the signup (e.g. \"photo - default\", \"phone-call - DefendDreamers_Jan16_BothBodies\")\n{% enddocs %}\n\n{% docs is_accepted %}\nWhether the post has been accepted to be displayed to the public on the website\n{% enddocs %}\n\n{% docs action_id %}\nInternal identifier of the action \n{% enddocs %}\n\n{% docs location %}\nLocation where the action takes place (e.g. US-NY)\n{% enddocs %}\n\n{% docs postal_code %}\nPostal code where the action takes place\n{% enddocs %}\n\n{% docs is_reportback %}\nWhether the post is a reportback. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs civic_action %}\nWhether the post is a Civic Action. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs scholarship_entry %}\nWhether the post is a Scholarship Entry. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs why_participated %}\nWhy the user participated in this action. Entered by the user.\n{% enddocs %}\n\n{% docs details %}\nDetails about the post. Contains contentfulId and other information (e.g. {\"campaignContentfulId\":\"6ATBgGEQEeJoIcxs1qbwaC\"})\n{% enddocs %}\n\n{% docs email %}\nEmail address of the user.\n{% enddocs %}\n\n{% docs source_details %}\nDetails about the source of the item. This is sometimes represented as a JSON object, and for other tables like Turbovote its represented as a string. (e.g. \"{\"contentful_id\":\"3CTLlXfbwtz1FOMpl31SKV\",\"utm_source\":\"scholarship_listing\",\"utm_medium\":\"referral\",\"utm_campaign\":\"fastweb_2019_08\"}\", newsletter_456)\n{% enddocs %}\n\n{% docs campaign_id %}\nThis is a unique identifier for the campaign\n{% enddocs %}\n\n{% docs campaign_run_id %}\nUnique identifier for the campaign run\n{% enddocs %}\n\n{% docs campaign_name %}\nName of the campaign\n{% enddocs %}\n\n{% docs campaign_cause %}\nCampaign cause (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_run_start_date %}\nStart date of the campaign run\n{% enddocs %}\n\n{% docs campaign_run_end_date %}\nEnd date of the campaign run\n{% enddocs %}\n\n{% docs campaign_created_date %}\nWhen the campaign was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs campaign_node_id %}\nInternal unique node id for the campaign\n{% enddocs %}\n\n{% docs campaign_node_id_title %}\nCampaign title\n{% enddocs %}\n\n{% docs campaign_run_id_title %}\nTitle of the campaign run\n{% enddocs %}\n\n{% docs campaign_action_type %}\nCampaign action type (eg. Make Something, Share Something)\n{% enddocs %}\n\n{% docs campaign_cause_type %}\nCampaign cause type (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_noun %}\nNoun applicable to the user's action\n{% enddocs %}\n\n{% docs campaign_verb %}\nVerb describing the action the user should take\n{% enddocs %}\n\n{% docs campaign_cta %}\nCampaign's call to action\n{% enddocs %}\n\n{% docs campaign_language %}\n\"Language in which the campaign is available\"\n{% enddocs %}\n\n{% docs agent_id %}\nIf set, the content type of the picture the member is sending us. Exp. image/png.\n{% enddocs %}\n\n{% docs attachment_content_type %}\nIf set, the handle of the Front agent this outbound support message is from.\n{% enddocs %}\n\n{% docs topic %}\nHolds a reference to the **last** campaign topic the member's conversation was in. This is useful to allow members to talk to Gambit and get quick responses (through Rivescript), without Gambit completely forgetting what state the member's interaction with a campaign topic was in.\n{% enddocs %}\n\n{% docs action_serial_id %}\nSerial id for the user's action. Depends on the source of the action. May be the bertly click id, sms message id, etc.\n{% enddocs %}\n\n{% docs channel %}\nChannel for the user's action. Depends on the source of the action. (e.g. web, sms)\n{% enddocs %}\n\n{% docs first_action_month %}\nMonth during which the user took their first action. \n{% enddocs %}\n\n{% docs event_id %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs event_source %}\nApplication source for event (eg. Phoenix, Northstar)\n{% enddocs %}\n\n{% docs event_datetime %}\nWhen the event occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs event_name %}\nName of the event (eg. northstar_submitted_register, https://docs.google.com/spreadsheets/d/1lm-fGrIm85nUTxSojqyCt_Ehmm1zEbViFhKpxcJiz1A/edit#gid=406441516)\n{% enddocs %}\n\n{% docs event_type %}\nType of event (pv = 'Page View', se = 'Structured Event')\n{% enddocs %}\n\n{% docs host %}\nURL host where event occurred (eg. www.dosomething.org or identity.dosomething.org)\n{% enddocs %}\n\n{% docs path %}\nURL path event occurred at (eg. /login or /us/campaigns/huddle-for-heroes)\n{% enddocs %}\n\n{% docs query_parameters %}\nOptional query parameters for the request (eg. query=huddle)\n{% enddocs %}\n\n{% docs se_category %}\nCategory of event (eg. focused_field, authentication) - Custom structured event\n{% enddocs %}\n\n{% docs se_action %}\nAction performed / event name (eg. form_submitted, action_failed) - Custom structured event\n{% enddocs %}\n\n{% docs se_label %}\nThe object of the action (eg. first_name, register, voter_reg_status) - Custom structured event\n{% enddocs %}\n\n{% docs session_id %}\nUnique identifier of the user's session\n{% enddocs %}\n\n{% docs session_counter %}\nHow many sessions a user has started\n{% enddocs %}\n\n{% docs browser_size %}\nWhich type of browser a user is using (eg. Mobile, Desktop)\n{% enddocs %}\n\n{% docs northstar_id %}\nThe Northstar ID of the user who generated the event\n{% enddocs %}\n\n{% docs device_id %}\nID of the device used\n{% enddocs %}\n\n{% docs referrer_host %}\nURL host of the referring site (eg. google.com)\n{% enddocs %}\n\n{% docs referrer_path %}\nURL path from referring site (eg. /10-stats-on-teen-drug-and-alcohol-use/)\n{% enddocs %}\n\n{% docs referrer_source %}\nReferrer source name (eg. Google, Facebook)\n{% enddocs %}\n\n{% docs utm_source %}\nTracks where the traffic is coming from. (eg. scholarship_listing, Facebook)\n{% enddocs %}\n\n{% docs utm_medium %}\nHow the traffic got to the platform (eg. referral, CPC)\n{% enddocs %}\n\n{% docs utm_campaign %}\nTracks which campaign the traffic was generated by. Shows up in Google Analytics as Campaign Name (eg. editorial_newsletter)\n{% enddocs %}\n\n{% docs url %}\nURL of campaign (eg. https://dosome.click/nyn5m7)\n{% enddocs %}\n\n{% docs modal_type %}\nNULL or SURVEY_MODAL\n{% enddocs %}\n\n{% docs landing_datetime %}\nWhen the session started in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs ending_datetime %}\nWhen the session ended in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs session_duration_seconds %}\nSession duration in seconds\n{% enddocs %}\n\n{% docs num_pages_views %}\nNumber of pages viewed in session\n{% enddocs %}\n\n{% docs landing_page %}\nFirst page the user viewed in the session (eg. /us/facts/11-facts-about-bp-oil-spill)\n{% enddocs %}\n\n{% docs exit_page %}\n\"Which page the user ended or exited their session from (eg. /us/campaigns/green-your-getaway)\"\n{% enddocs %}\n\n{% docs days_since_last_session %}\n\"Days since their last session.\"\n{% enddocs %}\n\n{% docs post_type %}\nType of post, (e.g. photo, voter-reg)\n{% enddocs %}\n\n{% docs noun %}\nNoun that corresponds to the item in the call to action that was delivered. (e.g. drawings, tweets)\n{% enddocs %}\n\n{% docs verb %}\nVerb corresponding to the action the user took. (e.g. shared, sent, taken)\n{% enddocs %}\n\n{% docs deleted_at %}\nDate time in UTC when a user deleted their post.\n{% enddocs %}\n\n{% docs _fivetran_deleted %}\nMarks rows that were deleted in the source table\n{% enddocs %}\n\n{% docs _fivetran_synced %}\n(UTC timestamp) keeps track of when each row was last successfully synced\n{% enddocs %}\n\n{% docs reportback %}\nWhether the post is a reportback \n{% enddocs %}\n\n{% docs active %}\nWhether the user is active \n{% enddocs %}\n\n{% docs anonymous %}\nWhether the user is anonymous when making the post \n{% enddocs %}\n\n{% docs callpower_campaign_id %}\nUnique ID corresponding to the Callpower campaign. Callpower allows users to record messages for their representatives.\n{% enddocs %}\n\n{% docs quiz %}\nWhether the post is a quiz \n{% enddocs %}\n\n{% docs action_type %}\nType of action the user took. (e.g. share-something, donate-something)\n{% enddocs %}\n\n{% docs online %}\nWhether the action is a online as opposed to IRL.\n{% enddocs %}\n\n{% docs time_commitment %}\nEstimated time required to do the action (e.g. 3.0+, <0.5)\n{% enddocs %}\n\n{% docs num_signups %}\nQuantity of campaign signups\n{% enddocs %}\n\n{% docs most_recent_signup %}\nTimestamp of the most recent signup in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs num_rbs %}\nQuantity of reportbacks for the user\n{% enddocs %}\n\n{% docs total_quantity %}\nTotal quantity of items in reportbacks\n{% enddocs %}\n\n{% docs most_recent_rb %}\nWhen the most recent reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs first_rb %}\nWhen the first reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs avg_time_betw_rbs %}\nCalculated average time between reportbacks.\n{% enddocs %}\n\n{% docs avg_days_next_action_after_rb %}\nCalculated average days until next action after reportback\n{% enddocs %}\n\n{% docs days_to_next_action_after_last_rb %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs most_recent_mam_action %}\nMost recent monthly active member qualifying action in UTC (eg. 2018-01-01 12:00:00).\n{% enddocs %}\n\n{% docs most_recent_email_open %}\nMost recent email open in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs most_recent_all_actions %}\nMost recent timestamp of any action in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs last_action_is_rb %}\nWhether the last action the user took was a reportback\n{% enddocs %}\n\n{% docs days_since_last_action %}\nDays since the user's last action\n{% enddocs %}\n\n{% docs time_to_first_rb %}\nHow much time after registering until the user's first reportback\n{% enddocs %}\n\n{% docs sms_unsubscribed_at %}\nTimestamp of when user unsubscribed from SMS messaging\n{% enddocs %}\n\n{% docs user_unsubscribed_at %}\nTimestamp of when user unsubscribed from email or sms\n{% enddocs %}\n\n{% docs voter_reg_acquisition %}\nWhether the user was an acquisition through voter registration efforts. \n{% enddocs %}\n\n{% docs last_logged_in %}\nDate time in UTC when user last logged in to Northstar\n{% enddocs %}\n\n{% docs last_accessed %}\nDate time in UTC when user last access the website\n{% enddocs %}\n\n{% docs last_messaged_at %}\nDate time in UTC when user was last sent a message via SMS or email\n{% enddocs %}\n\n{% docs facebook_id %}\nUser's facebook id\n{% enddocs %}\n\n{% docs mobile %}\nUsers's mobile phone number\n{% enddocs %}\n\n{% docs birthdate %}\nUser's birthdate\n{% enddocs %}\n\n{% docs first_name %}\nUser's first name\n{% enddocs %}\n\n{% docs last_name %}\nUser's last name\n{% enddocs %}\n\n{% docs voter_registration_status %}\nUser's registration status. (e.g. registration_complete, confirmed, uncertain) \n{% enddocs %}\n\n{% docs finish_with_state %}\nIf the registrant was eligible to use and passed through to complete their registration with their state\u2019s OVR system, it will be indicated in this field (direct quote from Rock-The-Vote documentation). Yes/No value in field.\n{% enddocs %}\n\n{% docs reportback_volume %}\nThis field returns 1 if non voter-reg action, since campaigns team only counts those a 1 reportback. If voter-reg action, we want to count quantity of post as number of registered voters.\n{% enddocs %}\n\n{% docs address_street_1 %}\nFirst line of user's street address\n{% enddocs %}\n\n{% docs address_street_2 %}\nSecond line of user's street address\n{% enddocs %}\n\n{% docs city %}\nUser's city\n{% enddocs %}\n\n{% docs state %}\nUser's state\n{% enddocs %}\n\n{% docs country %}\nUser's country\n{% enddocs %}\n\n{% docs language %}\nUser's language\n{% enddocs %}\n\n{% docs cio_status %}\nStatus of user from CIO. (e.g. customer_subscribed, customer_unsubscribed)\n{% enddocs %}\n\n{% docs cio_status_timestamp %}\nTimestamp when users's status was updated.\n{% enddocs %}\n\n{% docs sms_status %}\nCurrent SMS status. (e.g. undeliverable, unknown)\n{% enddocs %}\n\n{% docs source_detail %}\nDetails of the origin of the user. (e.g. tell_a_friend, other, opt_in_path/197981)\n{% enddocs %}\n\n{% docs badges %}\nWhether the user has any badges. \n{% enddocs %}\n\n{% docs refer_friends %}\nWhether the user is a part of the refer a friend campaign. \n{% enddocs %}\n\n{% docs subscribed_member %}\nWhether the user is subscribed. \n{% enddocs %}\n\n{% docs last_updated_at %}\nTimestamp when users's was updated.\n{% enddocs %}\n\n{% docs school_id %}\nUnique identifier for the user's school. This info comes from the school finder.\n{% enddocs %}\n\n{% docs newsletter_topic %}\nNewsletter topic. (e.g. community, lifestyle)\n{% enddocs %}\n\n{% docs user_agent %}\nFull user agent string for a user's browser (e.g. \"Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:24.0) Gecko/20100101 Firefox/24.0\")\n{% enddocs %}\n\n{% docs drupal_id %}\nOld Drupal user ID\n{% enddocs %}\n\n{% docs campaigns %}\nCampaigns a user is signed up for.\n{% enddocs %}\n\n{% docs audit %}\nA very useful field with data containing information about changes to a user, e.g. timestamps when the user subscribed and unsubscribed.\n{% enddocs %}\n\n{% docs voting_plan_status %}\nThe indication of the user's plan to vote, e.g. voting, not_voting, cant_vote\n{% enddocs %}\n\n{% docs voting_plan_time_of_day %}\nThe time of day when the user plans to vote, e.g morning, afternoon, evening\n{% enddocs %}\n\n{% docs voting_plan_method_of_transport %}\nHow the user plans to get to their polling place. e.g. walk, drive\n{% enddocs %}\n\n{% docs voting_plan_attending_with %}\nWith Whom the user plans to go voting, e.g. family, friends, alone\n{% enddocs %}\n\n{% docs feature_flags %}\nJSON containing info on features like badges and refer-a-friend.\n{% enddocs %}\n\n{% docs dbt_updated_at %}\nDBT snapshot table data. The updated_at timestamp of the source record when this snapshot row was inserted.\n{% enddocs %}\n\n{% docs dbt_scd_id %}\nDBT snapshot table data. A unique key generated for each snapshotted record.\n{% enddocs %}\n\n{% docs dbt_valid_from %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this snapshot row was first inserted\n{% enddocs %}\n\n{% docs dbt_valid_to %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this row row became invalidated.\n{% enddocs %}\n\n{% docs google_id %}\nUser's Google ID obtained from login.\n{% enddocs %}\n\n{% docs causes %}\nCauses in which a user is interested. e.g. animal welfare, education, mental_health\n{% enddocs %}\n\n{% docs email_subscription_status %}\nEmail subscription status of the user\n{% enddocs %}\n\n{% docs role %}\nUser's role, e.g. user, staff\n{% enddocs %}\n\n{% docs cio_backfilled %}\nWhether this user's data was backfilled from CIO\n{% enddocs %}\n\n{% docs addr_source %}\nWhere the user submitted their address, e.g. sms, GDPR\n{% enddocs %}\n\n{% docs email_subscription_topics %}\nEmail subscription topics correspond to categories in CIO in which the user is interested. e.g. lifestyle, community, scholarship\n{% enddocs %}\n\n{% docs sms_paused %}\nWhether we've paused sending sms messages to the user.\n{% enddocs %}\n\n\n\n\n", "name": "attachment_content_type", "unique_id": "ds_dbt.attachment_content_type", "block_contents": "If set, the handle of the Front agent this outbound support message is from."}, "ds_dbt.topic": {"root_path": "/Users/mrich/projects/quasar/quasar/dbt", "resource_type": "docs", "path": "schema.md", "original_file_path": "models/schema.md", "package_name": "ds_dbt", "file_contents": "\n{% docs click_id %}\nThis is a unique identifier for each click\n{% enddocs %}\n\n{% docs click_time %}\nTimestamp when user clicked.\n{% enddocs %}\n\n{% docs shortened %}\nShortened URL\n{% enddocs %}\n\n{% docs target_url %}\nURL where the user will be directed\n{% enddocs %}\n\n{% docs broadcast_id %}\nID of the broadcast that generated the shortened URL\n{% enddocs %}\n\n{% docs source %}\nSource of the URL (e.g. SMS, web), origin of the post (e.g. phoenix-web, phoenix-ashes, sms), or source where user was acquired. (e.g. sms, phoenix-next)\n{% enddocs %}\n\n{% docs interaction_type %}\nHow the user interacted with the link (e.g. preview, click)\n{% enddocs %}\n\n{% docs id %}\nUnique identifier for the post\n{% enddocs %}\n\n{% docs type %}\nType of post (e.g. photo)\n{% enddocs %}\n\n{% docs action %}\nPost action (e.g. DefendDreamers_Nov9_CongressCalls, GunViolence2018_Feb15_ParklandResponse)\n{% enddocs %}\n\n{% docs status %}\nPost status (e.g. accepted, rejected)\n{% enddocs %}\n\n{% docs quantity %}\nNumerical quantity of items specified in the call to action (e.g. 10, 200)\n{% enddocs %}\n\n{% docs source_bucket %}\nGrouping bucket for origin of the post (e.g. web, sms) \n{% enddocs %}\n\n{% docs created_at %}\nWhen the item was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs updated_at %}\nWhen the item was updated in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs text %}\nText of the post (e.g. \"Zoo animals and a super hero trying to help too!\") \n{% enddocs %}\n\n{% docs signup_id %}\nUnique identifier for the signup \n{% enddocs %}\n\n{% docs post_class %}\nClass of the signup (e.g. \"photo - default\", \"phone-call - DefendDreamers_Jan16_BothBodies\")\n{% enddocs %}\n\n{% docs is_accepted %}\nWhether the post has been accepted to be displayed to the public on the website\n{% enddocs %}\n\n{% docs action_id %}\nInternal identifier of the action \n{% enddocs %}\n\n{% docs location %}\nLocation where the action takes place (e.g. US-NY)\n{% enddocs %}\n\n{% docs postal_code %}\nPostal code where the action takes place\n{% enddocs %}\n\n{% docs is_reportback %}\nWhether the post is a reportback. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs civic_action %}\nWhether the post is a Civic Action. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs scholarship_entry %}\nWhether the post is a Scholarship Entry. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs why_participated %}\nWhy the user participated in this action. Entered by the user.\n{% enddocs %}\n\n{% docs details %}\nDetails about the post. Contains contentfulId and other information (e.g. {\"campaignContentfulId\":\"6ATBgGEQEeJoIcxs1qbwaC\"})\n{% enddocs %}\n\n{% docs email %}\nEmail address of the user.\n{% enddocs %}\n\n{% docs source_details %}\nDetails about the source of the item. This is sometimes represented as a JSON object, and for other tables like Turbovote its represented as a string. (e.g. \"{\"contentful_id\":\"3CTLlXfbwtz1FOMpl31SKV\",\"utm_source\":\"scholarship_listing\",\"utm_medium\":\"referral\",\"utm_campaign\":\"fastweb_2019_08\"}\", newsletter_456)\n{% enddocs %}\n\n{% docs campaign_id %}\nThis is a unique identifier for the campaign\n{% enddocs %}\n\n{% docs campaign_run_id %}\nUnique identifier for the campaign run\n{% enddocs %}\n\n{% docs campaign_name %}\nName of the campaign\n{% enddocs %}\n\n{% docs campaign_cause %}\nCampaign cause (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_run_start_date %}\nStart date of the campaign run\n{% enddocs %}\n\n{% docs campaign_run_end_date %}\nEnd date of the campaign run\n{% enddocs %}\n\n{% docs campaign_created_date %}\nWhen the campaign was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs campaign_node_id %}\nInternal unique node id for the campaign\n{% enddocs %}\n\n{% docs campaign_node_id_title %}\nCampaign title\n{% enddocs %}\n\n{% docs campaign_run_id_title %}\nTitle of the campaign run\n{% enddocs %}\n\n{% docs campaign_action_type %}\nCampaign action type (eg. Make Something, Share Something)\n{% enddocs %}\n\n{% docs campaign_cause_type %}\nCampaign cause type (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_noun %}\nNoun applicable to the user's action\n{% enddocs %}\n\n{% docs campaign_verb %}\nVerb describing the action the user should take\n{% enddocs %}\n\n{% docs campaign_cta %}\nCampaign's call to action\n{% enddocs %}\n\n{% docs campaign_language %}\n\"Language in which the campaign is available\"\n{% enddocs %}\n\n{% docs agent_id %}\nIf set, the content type of the picture the member is sending us. Exp. image/png.\n{% enddocs %}\n\n{% docs attachment_content_type %}\nIf set, the handle of the Front agent this outbound support message is from.\n{% enddocs %}\n\n{% docs topic %}\nHolds a reference to the **last** campaign topic the member's conversation was in. This is useful to allow members to talk to Gambit and get quick responses (through Rivescript), without Gambit completely forgetting what state the member's interaction with a campaign topic was in.\n{% enddocs %}\n\n{% docs action_serial_id %}\nSerial id for the user's action. Depends on the source of the action. May be the bertly click id, sms message id, etc.\n{% enddocs %}\n\n{% docs channel %}\nChannel for the user's action. Depends on the source of the action. (e.g. web, sms)\n{% enddocs %}\n\n{% docs first_action_month %}\nMonth during which the user took their first action. \n{% enddocs %}\n\n{% docs event_id %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs event_source %}\nApplication source for event (eg. Phoenix, Northstar)\n{% enddocs %}\n\n{% docs event_datetime %}\nWhen the event occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs event_name %}\nName of the event (eg. northstar_submitted_register, https://docs.google.com/spreadsheets/d/1lm-fGrIm85nUTxSojqyCt_Ehmm1zEbViFhKpxcJiz1A/edit#gid=406441516)\n{% enddocs %}\n\n{% docs event_type %}\nType of event (pv = 'Page View', se = 'Structured Event')\n{% enddocs %}\n\n{% docs host %}\nURL host where event occurred (eg. www.dosomething.org or identity.dosomething.org)\n{% enddocs %}\n\n{% docs path %}\nURL path event occurred at (eg. /login or /us/campaigns/huddle-for-heroes)\n{% enddocs %}\n\n{% docs query_parameters %}\nOptional query parameters for the request (eg. query=huddle)\n{% enddocs %}\n\n{% docs se_category %}\nCategory of event (eg. focused_field, authentication) - Custom structured event\n{% enddocs %}\n\n{% docs se_action %}\nAction performed / event name (eg. form_submitted, action_failed) - Custom structured event\n{% enddocs %}\n\n{% docs se_label %}\nThe object of the action (eg. first_name, register, voter_reg_status) - Custom structured event\n{% enddocs %}\n\n{% docs session_id %}\nUnique identifier of the user's session\n{% enddocs %}\n\n{% docs session_counter %}\nHow many sessions a user has started\n{% enddocs %}\n\n{% docs browser_size %}\nWhich type of browser a user is using (eg. Mobile, Desktop)\n{% enddocs %}\n\n{% docs northstar_id %}\nThe Northstar ID of the user who generated the event\n{% enddocs %}\n\n{% docs device_id %}\nID of the device used\n{% enddocs %}\n\n{% docs referrer_host %}\nURL host of the referring site (eg. google.com)\n{% enddocs %}\n\n{% docs referrer_path %}\nURL path from referring site (eg. /10-stats-on-teen-drug-and-alcohol-use/)\n{% enddocs %}\n\n{% docs referrer_source %}\nReferrer source name (eg. Google, Facebook)\n{% enddocs %}\n\n{% docs utm_source %}\nTracks where the traffic is coming from. (eg. scholarship_listing, Facebook)\n{% enddocs %}\n\n{% docs utm_medium %}\nHow the traffic got to the platform (eg. referral, CPC)\n{% enddocs %}\n\n{% docs utm_campaign %}\nTracks which campaign the traffic was generated by. Shows up in Google Analytics as Campaign Name (eg. editorial_newsletter)\n{% enddocs %}\n\n{% docs url %}\nURL of campaign (eg. https://dosome.click/nyn5m7)\n{% enddocs %}\n\n{% docs modal_type %}\nNULL or SURVEY_MODAL\n{% enddocs %}\n\n{% docs landing_datetime %}\nWhen the session started in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs ending_datetime %}\nWhen the session ended in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs session_duration_seconds %}\nSession duration in seconds\n{% enddocs %}\n\n{% docs num_pages_views %}\nNumber of pages viewed in session\n{% enddocs %}\n\n{% docs landing_page %}\nFirst page the user viewed in the session (eg. /us/facts/11-facts-about-bp-oil-spill)\n{% enddocs %}\n\n{% docs exit_page %}\n\"Which page the user ended or exited their session from (eg. /us/campaigns/green-your-getaway)\"\n{% enddocs %}\n\n{% docs days_since_last_session %}\n\"Days since their last session.\"\n{% enddocs %}\n\n{% docs post_type %}\nType of post, (e.g. photo, voter-reg)\n{% enddocs %}\n\n{% docs noun %}\nNoun that corresponds to the item in the call to action that was delivered. (e.g. drawings, tweets)\n{% enddocs %}\n\n{% docs verb %}\nVerb corresponding to the action the user took. (e.g. shared, sent, taken)\n{% enddocs %}\n\n{% docs deleted_at %}\nDate time in UTC when a user deleted their post.\n{% enddocs %}\n\n{% docs _fivetran_deleted %}\nMarks rows that were deleted in the source table\n{% enddocs %}\n\n{% docs _fivetran_synced %}\n(UTC timestamp) keeps track of when each row was last successfully synced\n{% enddocs %}\n\n{% docs reportback %}\nWhether the post is a reportback \n{% enddocs %}\n\n{% docs active %}\nWhether the user is active \n{% enddocs %}\n\n{% docs anonymous %}\nWhether the user is anonymous when making the post \n{% enddocs %}\n\n{% docs callpower_campaign_id %}\nUnique ID corresponding to the Callpower campaign. Callpower allows users to record messages for their representatives.\n{% enddocs %}\n\n{% docs quiz %}\nWhether the post is a quiz \n{% enddocs %}\n\n{% docs action_type %}\nType of action the user took. (e.g. share-something, donate-something)\n{% enddocs %}\n\n{% docs online %}\nWhether the action is a online as opposed to IRL.\n{% enddocs %}\n\n{% docs time_commitment %}\nEstimated time required to do the action (e.g. 3.0+, <0.5)\n{% enddocs %}\n\n{% docs num_signups %}\nQuantity of campaign signups\n{% enddocs %}\n\n{% docs most_recent_signup %}\nTimestamp of the most recent signup in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs num_rbs %}\nQuantity of reportbacks for the user\n{% enddocs %}\n\n{% docs total_quantity %}\nTotal quantity of items in reportbacks\n{% enddocs %}\n\n{% docs most_recent_rb %}\nWhen the most recent reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs first_rb %}\nWhen the first reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs avg_time_betw_rbs %}\nCalculated average time between reportbacks.\n{% enddocs %}\n\n{% docs avg_days_next_action_after_rb %}\nCalculated average days until next action after reportback\n{% enddocs %}\n\n{% docs days_to_next_action_after_last_rb %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs most_recent_mam_action %}\nMost recent monthly active member qualifying action in UTC (eg. 2018-01-01 12:00:00).\n{% enddocs %}\n\n{% docs most_recent_email_open %}\nMost recent email open in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs most_recent_all_actions %}\nMost recent timestamp of any action in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs last_action_is_rb %}\nWhether the last action the user took was a reportback\n{% enddocs %}\n\n{% docs days_since_last_action %}\nDays since the user's last action\n{% enddocs %}\n\n{% docs time_to_first_rb %}\nHow much time after registering until the user's first reportback\n{% enddocs %}\n\n{% docs sms_unsubscribed_at %}\nTimestamp of when user unsubscribed from SMS messaging\n{% enddocs %}\n\n{% docs user_unsubscribed_at %}\nTimestamp of when user unsubscribed from email or sms\n{% enddocs %}\n\n{% docs voter_reg_acquisition %}\nWhether the user was an acquisition through voter registration efforts. \n{% enddocs %}\n\n{% docs last_logged_in %}\nDate time in UTC when user last logged in to Northstar\n{% enddocs %}\n\n{% docs last_accessed %}\nDate time in UTC when user last access the website\n{% enddocs %}\n\n{% docs last_messaged_at %}\nDate time in UTC when user was last sent a message via SMS or email\n{% enddocs %}\n\n{% docs facebook_id %}\nUser's facebook id\n{% enddocs %}\n\n{% docs mobile %}\nUsers's mobile phone number\n{% enddocs %}\n\n{% docs birthdate %}\nUser's birthdate\n{% enddocs %}\n\n{% docs first_name %}\nUser's first name\n{% enddocs %}\n\n{% docs last_name %}\nUser's last name\n{% enddocs %}\n\n{% docs voter_registration_status %}\nUser's registration status. (e.g. registration_complete, confirmed, uncertain) \n{% enddocs %}\n\n{% docs finish_with_state %}\nIf the registrant was eligible to use and passed through to complete their registration with their state\u2019s OVR system, it will be indicated in this field (direct quote from Rock-The-Vote documentation). Yes/No value in field.\n{% enddocs %}\n\n{% docs reportback_volume %}\nThis field returns 1 if non voter-reg action, since campaigns team only counts those a 1 reportback. If voter-reg action, we want to count quantity of post as number of registered voters.\n{% enddocs %}\n\n{% docs address_street_1 %}\nFirst line of user's street address\n{% enddocs %}\n\n{% docs address_street_2 %}\nSecond line of user's street address\n{% enddocs %}\n\n{% docs city %}\nUser's city\n{% enddocs %}\n\n{% docs state %}\nUser's state\n{% enddocs %}\n\n{% docs country %}\nUser's country\n{% enddocs %}\n\n{% docs language %}\nUser's language\n{% enddocs %}\n\n{% docs cio_status %}\nStatus of user from CIO. (e.g. customer_subscribed, customer_unsubscribed)\n{% enddocs %}\n\n{% docs cio_status_timestamp %}\nTimestamp when users's status was updated.\n{% enddocs %}\n\n{% docs sms_status %}\nCurrent SMS status. (e.g. undeliverable, unknown)\n{% enddocs %}\n\n{% docs source_detail %}\nDetails of the origin of the user. (e.g. tell_a_friend, other, opt_in_path/197981)\n{% enddocs %}\n\n{% docs badges %}\nWhether the user has any badges. \n{% enddocs %}\n\n{% docs refer_friends %}\nWhether the user is a part of the refer a friend campaign. \n{% enddocs %}\n\n{% docs subscribed_member %}\nWhether the user is subscribed. \n{% enddocs %}\n\n{% docs last_updated_at %}\nTimestamp when users's was updated.\n{% enddocs %}\n\n{% docs school_id %}\nUnique identifier for the user's school. This info comes from the school finder.\n{% enddocs %}\n\n{% docs newsletter_topic %}\nNewsletter topic. (e.g. community, lifestyle)\n{% enddocs %}\n\n{% docs user_agent %}\nFull user agent string for a user's browser (e.g. \"Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:24.0) Gecko/20100101 Firefox/24.0\")\n{% enddocs %}\n\n{% docs drupal_id %}\nOld Drupal user ID\n{% enddocs %}\n\n{% docs campaigns %}\nCampaigns a user is signed up for.\n{% enddocs %}\n\n{% docs audit %}\nA very useful field with data containing information about changes to a user, e.g. timestamps when the user subscribed and unsubscribed.\n{% enddocs %}\n\n{% docs voting_plan_status %}\nThe indication of the user's plan to vote, e.g. voting, not_voting, cant_vote\n{% enddocs %}\n\n{% docs voting_plan_time_of_day %}\nThe time of day when the user plans to vote, e.g morning, afternoon, evening\n{% enddocs %}\n\n{% docs voting_plan_method_of_transport %}\nHow the user plans to get to their polling place. e.g. walk, drive\n{% enddocs %}\n\n{% docs voting_plan_attending_with %}\nWith Whom the user plans to go voting, e.g. family, friends, alone\n{% enddocs %}\n\n{% docs feature_flags %}\nJSON containing info on features like badges and refer-a-friend.\n{% enddocs %}\n\n{% docs dbt_updated_at %}\nDBT snapshot table data. The updated_at timestamp of the source record when this snapshot row was inserted.\n{% enddocs %}\n\n{% docs dbt_scd_id %}\nDBT snapshot table data. A unique key generated for each snapshotted record.\n{% enddocs %}\n\n{% docs dbt_valid_from %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this snapshot row was first inserted\n{% enddocs %}\n\n{% docs dbt_valid_to %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this row row became invalidated.\n{% enddocs %}\n\n{% docs google_id %}\nUser's Google ID obtained from login.\n{% enddocs %}\n\n{% docs causes %}\nCauses in which a user is interested. e.g. animal welfare, education, mental_health\n{% enddocs %}\n\n{% docs email_subscription_status %}\nEmail subscription status of the user\n{% enddocs %}\n\n{% docs role %}\nUser's role, e.g. user, staff\n{% enddocs %}\n\n{% docs cio_backfilled %}\nWhether this user's data was backfilled from CIO\n{% enddocs %}\n\n{% docs addr_source %}\nWhere the user submitted their address, e.g. sms, GDPR\n{% enddocs %}\n\n{% docs email_subscription_topics %}\nEmail subscription topics correspond to categories in CIO in which the user is interested. e.g. lifestyle, community, scholarship\n{% enddocs %}\n\n{% docs sms_paused %}\nWhether we've paused sending sms messages to the user.\n{% enddocs %}\n\n\n\n\n", "name": "topic", "unique_id": "ds_dbt.topic", "block_contents": "Holds a reference to the **last** campaign topic the member's conversation was in. This is useful to allow members to talk to Gambit and get quick responses (through Rivescript), without Gambit completely forgetting what state the member's interaction with a campaign topic was in."}, "ds_dbt.action_serial_id": {"root_path": "/Users/mrich/projects/quasar/quasar/dbt", "resource_type": "docs", "path": "schema.md", "original_file_path": "models/schema.md", "package_name": "ds_dbt", "file_contents": "\n{% docs click_id %}\nThis is a unique identifier for each click\n{% enddocs %}\n\n{% docs click_time %}\nTimestamp when user clicked.\n{% enddocs %}\n\n{% docs shortened %}\nShortened URL\n{% enddocs %}\n\n{% docs target_url %}\nURL where the user will be directed\n{% enddocs %}\n\n{% docs broadcast_id %}\nID of the broadcast that generated the shortened URL\n{% enddocs %}\n\n{% docs source %}\nSource of the URL (e.g. SMS, web), origin of the post (e.g. phoenix-web, phoenix-ashes, sms), or source where user was acquired. (e.g. sms, phoenix-next)\n{% enddocs %}\n\n{% docs interaction_type %}\nHow the user interacted with the link (e.g. preview, click)\n{% enddocs %}\n\n{% docs id %}\nUnique identifier for the post\n{% enddocs %}\n\n{% docs type %}\nType of post (e.g. photo)\n{% enddocs %}\n\n{% docs action %}\nPost action (e.g. DefendDreamers_Nov9_CongressCalls, GunViolence2018_Feb15_ParklandResponse)\n{% enddocs %}\n\n{% docs status %}\nPost status (e.g. accepted, rejected)\n{% enddocs %}\n\n{% docs quantity %}\nNumerical quantity of items specified in the call to action (e.g. 10, 200)\n{% enddocs %}\n\n{% docs source_bucket %}\nGrouping bucket for origin of the post (e.g. web, sms) \n{% enddocs %}\n\n{% docs created_at %}\nWhen the item was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs updated_at %}\nWhen the item was updated in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs text %}\nText of the post (e.g. \"Zoo animals and a super hero trying to help too!\") \n{% enddocs %}\n\n{% docs signup_id %}\nUnique identifier for the signup \n{% enddocs %}\n\n{% docs post_class %}\nClass of the signup (e.g. \"photo - default\", \"phone-call - DefendDreamers_Jan16_BothBodies\")\n{% enddocs %}\n\n{% docs is_accepted %}\nWhether the post has been accepted to be displayed to the public on the website\n{% enddocs %}\n\n{% docs action_id %}\nInternal identifier of the action \n{% enddocs %}\n\n{% docs location %}\nLocation where the action takes place (e.g. US-NY)\n{% enddocs %}\n\n{% docs postal_code %}\nPostal code where the action takes place\n{% enddocs %}\n\n{% docs is_reportback %}\nWhether the post is a reportback. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs civic_action %}\nWhether the post is a Civic Action. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs scholarship_entry %}\nWhether the post is a Scholarship Entry. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs why_participated %}\nWhy the user participated in this action. Entered by the user.\n{% enddocs %}\n\n{% docs details %}\nDetails about the post. Contains contentfulId and other information (e.g. {\"campaignContentfulId\":\"6ATBgGEQEeJoIcxs1qbwaC\"})\n{% enddocs %}\n\n{% docs email %}\nEmail address of the user.\n{% enddocs %}\n\n{% docs source_details %}\nDetails about the source of the item. This is sometimes represented as a JSON object, and for other tables like Turbovote its represented as a string. (e.g. \"{\"contentful_id\":\"3CTLlXfbwtz1FOMpl31SKV\",\"utm_source\":\"scholarship_listing\",\"utm_medium\":\"referral\",\"utm_campaign\":\"fastweb_2019_08\"}\", newsletter_456)\n{% enddocs %}\n\n{% docs campaign_id %}\nThis is a unique identifier for the campaign\n{% enddocs %}\n\n{% docs campaign_run_id %}\nUnique identifier for the campaign run\n{% enddocs %}\n\n{% docs campaign_name %}\nName of the campaign\n{% enddocs %}\n\n{% docs campaign_cause %}\nCampaign cause (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_run_start_date %}\nStart date of the campaign run\n{% enddocs %}\n\n{% docs campaign_run_end_date %}\nEnd date of the campaign run\n{% enddocs %}\n\n{% docs campaign_created_date %}\nWhen the campaign was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs campaign_node_id %}\nInternal unique node id for the campaign\n{% enddocs %}\n\n{% docs campaign_node_id_title %}\nCampaign title\n{% enddocs %}\n\n{% docs campaign_run_id_title %}\nTitle of the campaign run\n{% enddocs %}\n\n{% docs campaign_action_type %}\nCampaign action type (eg. Make Something, Share Something)\n{% enddocs %}\n\n{% docs campaign_cause_type %}\nCampaign cause type (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_noun %}\nNoun applicable to the user's action\n{% enddocs %}\n\n{% docs campaign_verb %}\nVerb describing the action the user should take\n{% enddocs %}\n\n{% docs campaign_cta %}\nCampaign's call to action\n{% enddocs %}\n\n{% docs campaign_language %}\n\"Language in which the campaign is available\"\n{% enddocs %}\n\n{% docs agent_id %}\nIf set, the content type of the picture the member is sending us. Exp. image/png.\n{% enddocs %}\n\n{% docs attachment_content_type %}\nIf set, the handle of the Front agent this outbound support message is from.\n{% enddocs %}\n\n{% docs topic %}\nHolds a reference to the **last** campaign topic the member's conversation was in. This is useful to allow members to talk to Gambit and get quick responses (through Rivescript), without Gambit completely forgetting what state the member's interaction with a campaign topic was in.\n{% enddocs %}\n\n{% docs action_serial_id %}\nSerial id for the user's action. Depends on the source of the action. May be the bertly click id, sms message id, etc.\n{% enddocs %}\n\n{% docs channel %}\nChannel for the user's action. Depends on the source of the action. (e.g. web, sms)\n{% enddocs %}\n\n{% docs first_action_month %}\nMonth during which the user took their first action. \n{% enddocs %}\n\n{% docs event_id %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs event_source %}\nApplication source for event (eg. Phoenix, Northstar)\n{% enddocs %}\n\n{% docs event_datetime %}\nWhen the event occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs event_name %}\nName of the event (eg. northstar_submitted_register, https://docs.google.com/spreadsheets/d/1lm-fGrIm85nUTxSojqyCt_Ehmm1zEbViFhKpxcJiz1A/edit#gid=406441516)\n{% enddocs %}\n\n{% docs event_type %}\nType of event (pv = 'Page View', se = 'Structured Event')\n{% enddocs %}\n\n{% docs host %}\nURL host where event occurred (eg. www.dosomething.org or identity.dosomething.org)\n{% enddocs %}\n\n{% docs path %}\nURL path event occurred at (eg. /login or /us/campaigns/huddle-for-heroes)\n{% enddocs %}\n\n{% docs query_parameters %}\nOptional query parameters for the request (eg. query=huddle)\n{% enddocs %}\n\n{% docs se_category %}\nCategory of event (eg. focused_field, authentication) - Custom structured event\n{% enddocs %}\n\n{% docs se_action %}\nAction performed / event name (eg. form_submitted, action_failed) - Custom structured event\n{% enddocs %}\n\n{% docs se_label %}\nThe object of the action (eg. first_name, register, voter_reg_status) - Custom structured event\n{% enddocs %}\n\n{% docs session_id %}\nUnique identifier of the user's session\n{% enddocs %}\n\n{% docs session_counter %}\nHow many sessions a user has started\n{% enddocs %}\n\n{% docs browser_size %}\nWhich type of browser a user is using (eg. Mobile, Desktop)\n{% enddocs %}\n\n{% docs northstar_id %}\nThe Northstar ID of the user who generated the event\n{% enddocs %}\n\n{% docs device_id %}\nID of the device used\n{% enddocs %}\n\n{% docs referrer_host %}\nURL host of the referring site (eg. google.com)\n{% enddocs %}\n\n{% docs referrer_path %}\nURL path from referring site (eg. /10-stats-on-teen-drug-and-alcohol-use/)\n{% enddocs %}\n\n{% docs referrer_source %}\nReferrer source name (eg. Google, Facebook)\n{% enddocs %}\n\n{% docs utm_source %}\nTracks where the traffic is coming from. (eg. scholarship_listing, Facebook)\n{% enddocs %}\n\n{% docs utm_medium %}\nHow the traffic got to the platform (eg. referral, CPC)\n{% enddocs %}\n\n{% docs utm_campaign %}\nTracks which campaign the traffic was generated by. Shows up in Google Analytics as Campaign Name (eg. editorial_newsletter)\n{% enddocs %}\n\n{% docs url %}\nURL of campaign (eg. https://dosome.click/nyn5m7)\n{% enddocs %}\n\n{% docs modal_type %}\nNULL or SURVEY_MODAL\n{% enddocs %}\n\n{% docs landing_datetime %}\nWhen the session started in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs ending_datetime %}\nWhen the session ended in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs session_duration_seconds %}\nSession duration in seconds\n{% enddocs %}\n\n{% docs num_pages_views %}\nNumber of pages viewed in session\n{% enddocs %}\n\n{% docs landing_page %}\nFirst page the user viewed in the session (eg. /us/facts/11-facts-about-bp-oil-spill)\n{% enddocs %}\n\n{% docs exit_page %}\n\"Which page the user ended or exited their session from (eg. /us/campaigns/green-your-getaway)\"\n{% enddocs %}\n\n{% docs days_since_last_session %}\n\"Days since their last session.\"\n{% enddocs %}\n\n{% docs post_type %}\nType of post, (e.g. photo, voter-reg)\n{% enddocs %}\n\n{% docs noun %}\nNoun that corresponds to the item in the call to action that was delivered. (e.g. drawings, tweets)\n{% enddocs %}\n\n{% docs verb %}\nVerb corresponding to the action the user took. (e.g. shared, sent, taken)\n{% enddocs %}\n\n{% docs deleted_at %}\nDate time in UTC when a user deleted their post.\n{% enddocs %}\n\n{% docs _fivetran_deleted %}\nMarks rows that were deleted in the source table\n{% enddocs %}\n\n{% docs _fivetran_synced %}\n(UTC timestamp) keeps track of when each row was last successfully synced\n{% enddocs %}\n\n{% docs reportback %}\nWhether the post is a reportback \n{% enddocs %}\n\n{% docs active %}\nWhether the user is active \n{% enddocs %}\n\n{% docs anonymous %}\nWhether the user is anonymous when making the post \n{% enddocs %}\n\n{% docs callpower_campaign_id %}\nUnique ID corresponding to the Callpower campaign. Callpower allows users to record messages for their representatives.\n{% enddocs %}\n\n{% docs quiz %}\nWhether the post is a quiz \n{% enddocs %}\n\n{% docs action_type %}\nType of action the user took. (e.g. share-something, donate-something)\n{% enddocs %}\n\n{% docs online %}\nWhether the action is a online as opposed to IRL.\n{% enddocs %}\n\n{% docs time_commitment %}\nEstimated time required to do the action (e.g. 3.0+, <0.5)\n{% enddocs %}\n\n{% docs num_signups %}\nQuantity of campaign signups\n{% enddocs %}\n\n{% docs most_recent_signup %}\nTimestamp of the most recent signup in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs num_rbs %}\nQuantity of reportbacks for the user\n{% enddocs %}\n\n{% docs total_quantity %}\nTotal quantity of items in reportbacks\n{% enddocs %}\n\n{% docs most_recent_rb %}\nWhen the most recent reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs first_rb %}\nWhen the first reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs avg_time_betw_rbs %}\nCalculated average time between reportbacks.\n{% enddocs %}\n\n{% docs avg_days_next_action_after_rb %}\nCalculated average days until next action after reportback\n{% enddocs %}\n\n{% docs days_to_next_action_after_last_rb %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs most_recent_mam_action %}\nMost recent monthly active member qualifying action in UTC (eg. 2018-01-01 12:00:00).\n{% enddocs %}\n\n{% docs most_recent_email_open %}\nMost recent email open in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs most_recent_all_actions %}\nMost recent timestamp of any action in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs last_action_is_rb %}\nWhether the last action the user took was a reportback\n{% enddocs %}\n\n{% docs days_since_last_action %}\nDays since the user's last action\n{% enddocs %}\n\n{% docs time_to_first_rb %}\nHow much time after registering until the user's first reportback\n{% enddocs %}\n\n{% docs sms_unsubscribed_at %}\nTimestamp of when user unsubscribed from SMS messaging\n{% enddocs %}\n\n{% docs user_unsubscribed_at %}\nTimestamp of when user unsubscribed from email or sms\n{% enddocs %}\n\n{% docs voter_reg_acquisition %}\nWhether the user was an acquisition through voter registration efforts. \n{% enddocs %}\n\n{% docs last_logged_in %}\nDate time in UTC when user last logged in to Northstar\n{% enddocs %}\n\n{% docs last_accessed %}\nDate time in UTC when user last access the website\n{% enddocs %}\n\n{% docs last_messaged_at %}\nDate time in UTC when user was last sent a message via SMS or email\n{% enddocs %}\n\n{% docs facebook_id %}\nUser's facebook id\n{% enddocs %}\n\n{% docs mobile %}\nUsers's mobile phone number\n{% enddocs %}\n\n{% docs birthdate %}\nUser's birthdate\n{% enddocs %}\n\n{% docs first_name %}\nUser's first name\n{% enddocs %}\n\n{% docs last_name %}\nUser's last name\n{% enddocs %}\n\n{% docs voter_registration_status %}\nUser's registration status. (e.g. registration_complete, confirmed, uncertain) \n{% enddocs %}\n\n{% docs finish_with_state %}\nIf the registrant was eligible to use and passed through to complete their registration with their state\u2019s OVR system, it will be indicated in this field (direct quote from Rock-The-Vote documentation). Yes/No value in field.\n{% enddocs %}\n\n{% docs reportback_volume %}\nThis field returns 1 if non voter-reg action, since campaigns team only counts those a 1 reportback. If voter-reg action, we want to count quantity of post as number of registered voters.\n{% enddocs %}\n\n{% docs address_street_1 %}\nFirst line of user's street address\n{% enddocs %}\n\n{% docs address_street_2 %}\nSecond line of user's street address\n{% enddocs %}\n\n{% docs city %}\nUser's city\n{% enddocs %}\n\n{% docs state %}\nUser's state\n{% enddocs %}\n\n{% docs country %}\nUser's country\n{% enddocs %}\n\n{% docs language %}\nUser's language\n{% enddocs %}\n\n{% docs cio_status %}\nStatus of user from CIO. (e.g. customer_subscribed, customer_unsubscribed)\n{% enddocs %}\n\n{% docs cio_status_timestamp %}\nTimestamp when users's status was updated.\n{% enddocs %}\n\n{% docs sms_status %}\nCurrent SMS status. (e.g. undeliverable, unknown)\n{% enddocs %}\n\n{% docs source_detail %}\nDetails of the origin of the user. (e.g. tell_a_friend, other, opt_in_path/197981)\n{% enddocs %}\n\n{% docs badges %}\nWhether the user has any badges. \n{% enddocs %}\n\n{% docs refer_friends %}\nWhether the user is a part of the refer a friend campaign. \n{% enddocs %}\n\n{% docs subscribed_member %}\nWhether the user is subscribed. \n{% enddocs %}\n\n{% docs last_updated_at %}\nTimestamp when users's was updated.\n{% enddocs %}\n\n{% docs school_id %}\nUnique identifier for the user's school. This info comes from the school finder.\n{% enddocs %}\n\n{% docs newsletter_topic %}\nNewsletter topic. (e.g. community, lifestyle)\n{% enddocs %}\n\n{% docs user_agent %}\nFull user agent string for a user's browser (e.g. \"Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:24.0) Gecko/20100101 Firefox/24.0\")\n{% enddocs %}\n\n{% docs drupal_id %}\nOld Drupal user ID\n{% enddocs %}\n\n{% docs campaigns %}\nCampaigns a user is signed up for.\n{% enddocs %}\n\n{% docs audit %}\nA very useful field with data containing information about changes to a user, e.g. timestamps when the user subscribed and unsubscribed.\n{% enddocs %}\n\n{% docs voting_plan_status %}\nThe indication of the user's plan to vote, e.g. voting, not_voting, cant_vote\n{% enddocs %}\n\n{% docs voting_plan_time_of_day %}\nThe time of day when the user plans to vote, e.g morning, afternoon, evening\n{% enddocs %}\n\n{% docs voting_plan_method_of_transport %}\nHow the user plans to get to their polling place. e.g. walk, drive\n{% enddocs %}\n\n{% docs voting_plan_attending_with %}\nWith Whom the user plans to go voting, e.g. family, friends, alone\n{% enddocs %}\n\n{% docs feature_flags %}\nJSON containing info on features like badges and refer-a-friend.\n{% enddocs %}\n\n{% docs dbt_updated_at %}\nDBT snapshot table data. The updated_at timestamp of the source record when this snapshot row was inserted.\n{% enddocs %}\n\n{% docs dbt_scd_id %}\nDBT snapshot table data. A unique key generated for each snapshotted record.\n{% enddocs %}\n\n{% docs dbt_valid_from %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this snapshot row was first inserted\n{% enddocs %}\n\n{% docs dbt_valid_to %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this row row became invalidated.\n{% enddocs %}\n\n{% docs google_id %}\nUser's Google ID obtained from login.\n{% enddocs %}\n\n{% docs causes %}\nCauses in which a user is interested. e.g. animal welfare, education, mental_health\n{% enddocs %}\n\n{% docs email_subscription_status %}\nEmail subscription status of the user\n{% enddocs %}\n\n{% docs role %}\nUser's role, e.g. user, staff\n{% enddocs %}\n\n{% docs cio_backfilled %}\nWhether this user's data was backfilled from CIO\n{% enddocs %}\n\n{% docs addr_source %}\nWhere the user submitted their address, e.g. sms, GDPR\n{% enddocs %}\n\n{% docs email_subscription_topics %}\nEmail subscription topics correspond to categories in CIO in which the user is interested. e.g. lifestyle, community, scholarship\n{% enddocs %}\n\n{% docs sms_paused %}\nWhether we've paused sending sms messages to the user.\n{% enddocs %}\n\n\n\n\n", "name": "action_serial_id", "unique_id": "ds_dbt.action_serial_id", "block_contents": "Serial id for the user's action. Depends on the source of the action. May be the bertly click id, sms message id, etc."}, "ds_dbt.channel": {"root_path": "/Users/mrich/projects/quasar/quasar/dbt", "resource_type": "docs", "path": "schema.md", "original_file_path": "models/schema.md", "package_name": "ds_dbt", "file_contents": "\n{% docs click_id %}\nThis is a unique identifier for each click\n{% enddocs %}\n\n{% docs click_time %}\nTimestamp when user clicked.\n{% enddocs %}\n\n{% docs shortened %}\nShortened URL\n{% enddocs %}\n\n{% docs target_url %}\nURL where the user will be directed\n{% enddocs %}\n\n{% docs broadcast_id %}\nID of the broadcast that generated the shortened URL\n{% enddocs %}\n\n{% docs source %}\nSource of the URL (e.g. SMS, web), origin of the post (e.g. phoenix-web, phoenix-ashes, sms), or source where user was acquired. (e.g. sms, phoenix-next)\n{% enddocs %}\n\n{% docs interaction_type %}\nHow the user interacted with the link (e.g. preview, click)\n{% enddocs %}\n\n{% docs id %}\nUnique identifier for the post\n{% enddocs %}\n\n{% docs type %}\nType of post (e.g. photo)\n{% enddocs %}\n\n{% docs action %}\nPost action (e.g. DefendDreamers_Nov9_CongressCalls, GunViolence2018_Feb15_ParklandResponse)\n{% enddocs %}\n\n{% docs status %}\nPost status (e.g. accepted, rejected)\n{% enddocs %}\n\n{% docs quantity %}\nNumerical quantity of items specified in the call to action (e.g. 10, 200)\n{% enddocs %}\n\n{% docs source_bucket %}\nGrouping bucket for origin of the post (e.g. web, sms) \n{% enddocs %}\n\n{% docs created_at %}\nWhen the item was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs updated_at %}\nWhen the item was updated in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs text %}\nText of the post (e.g. \"Zoo animals and a super hero trying to help too!\") \n{% enddocs %}\n\n{% docs signup_id %}\nUnique identifier for the signup \n{% enddocs %}\n\n{% docs post_class %}\nClass of the signup (e.g. \"photo - default\", \"phone-call - DefendDreamers_Jan16_BothBodies\")\n{% enddocs %}\n\n{% docs is_accepted %}\nWhether the post has been accepted to be displayed to the public on the website\n{% enddocs %}\n\n{% docs action_id %}\nInternal identifier of the action \n{% enddocs %}\n\n{% docs location %}\nLocation where the action takes place (e.g. US-NY)\n{% enddocs %}\n\n{% docs postal_code %}\nPostal code where the action takes place\n{% enddocs %}\n\n{% docs is_reportback %}\nWhether the post is a reportback. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs civic_action %}\nWhether the post is a Civic Action. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs scholarship_entry %}\nWhether the post is a Scholarship Entry. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs why_participated %}\nWhy the user participated in this action. Entered by the user.\n{% enddocs %}\n\n{% docs details %}\nDetails about the post. Contains contentfulId and other information (e.g. {\"campaignContentfulId\":\"6ATBgGEQEeJoIcxs1qbwaC\"})\n{% enddocs %}\n\n{% docs email %}\nEmail address of the user.\n{% enddocs %}\n\n{% docs source_details %}\nDetails about the source of the item. This is sometimes represented as a JSON object, and for other tables like Turbovote its represented as a string. (e.g. \"{\"contentful_id\":\"3CTLlXfbwtz1FOMpl31SKV\",\"utm_source\":\"scholarship_listing\",\"utm_medium\":\"referral\",\"utm_campaign\":\"fastweb_2019_08\"}\", newsletter_456)\n{% enddocs %}\n\n{% docs campaign_id %}\nThis is a unique identifier for the campaign\n{% enddocs %}\n\n{% docs campaign_run_id %}\nUnique identifier for the campaign run\n{% enddocs %}\n\n{% docs campaign_name %}\nName of the campaign\n{% enddocs %}\n\n{% docs campaign_cause %}\nCampaign cause (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_run_start_date %}\nStart date of the campaign run\n{% enddocs %}\n\n{% docs campaign_run_end_date %}\nEnd date of the campaign run\n{% enddocs %}\n\n{% docs campaign_created_date %}\nWhen the campaign was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs campaign_node_id %}\nInternal unique node id for the campaign\n{% enddocs %}\n\n{% docs campaign_node_id_title %}\nCampaign title\n{% enddocs %}\n\n{% docs campaign_run_id_title %}\nTitle of the campaign run\n{% enddocs %}\n\n{% docs campaign_action_type %}\nCampaign action type (eg. Make Something, Share Something)\n{% enddocs %}\n\n{% docs campaign_cause_type %}\nCampaign cause type (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_noun %}\nNoun applicable to the user's action\n{% enddocs %}\n\n{% docs campaign_verb %}\nVerb describing the action the user should take\n{% enddocs %}\n\n{% docs campaign_cta %}\nCampaign's call to action\n{% enddocs %}\n\n{% docs campaign_language %}\n\"Language in which the campaign is available\"\n{% enddocs %}\n\n{% docs agent_id %}\nIf set, the content type of the picture the member is sending us. Exp. image/png.\n{% enddocs %}\n\n{% docs attachment_content_type %}\nIf set, the handle of the Front agent this outbound support message is from.\n{% enddocs %}\n\n{% docs topic %}\nHolds a reference to the **last** campaign topic the member's conversation was in. This is useful to allow members to talk to Gambit and get quick responses (through Rivescript), without Gambit completely forgetting what state the member's interaction with a campaign topic was in.\n{% enddocs %}\n\n{% docs action_serial_id %}\nSerial id for the user's action. Depends on the source of the action. May be the bertly click id, sms message id, etc.\n{% enddocs %}\n\n{% docs channel %}\nChannel for the user's action. Depends on the source of the action. (e.g. web, sms)\n{% enddocs %}\n\n{% docs first_action_month %}\nMonth during which the user took their first action. \n{% enddocs %}\n\n{% docs event_id %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs event_source %}\nApplication source for event (eg. Phoenix, Northstar)\n{% enddocs %}\n\n{% docs event_datetime %}\nWhen the event occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs event_name %}\nName of the event (eg. northstar_submitted_register, https://docs.google.com/spreadsheets/d/1lm-fGrIm85nUTxSojqyCt_Ehmm1zEbViFhKpxcJiz1A/edit#gid=406441516)\n{% enddocs %}\n\n{% docs event_type %}\nType of event (pv = 'Page View', se = 'Structured Event')\n{% enddocs %}\n\n{% docs host %}\nURL host where event occurred (eg. www.dosomething.org or identity.dosomething.org)\n{% enddocs %}\n\n{% docs path %}\nURL path event occurred at (eg. /login or /us/campaigns/huddle-for-heroes)\n{% enddocs %}\n\n{% docs query_parameters %}\nOptional query parameters for the request (eg. query=huddle)\n{% enddocs %}\n\n{% docs se_category %}\nCategory of event (eg. focused_field, authentication) - Custom structured event\n{% enddocs %}\n\n{% docs se_action %}\nAction performed / event name (eg. form_submitted, action_failed) - Custom structured event\n{% enddocs %}\n\n{% docs se_label %}\nThe object of the action (eg. first_name, register, voter_reg_status) - Custom structured event\n{% enddocs %}\n\n{% docs session_id %}\nUnique identifier of the user's session\n{% enddocs %}\n\n{% docs session_counter %}\nHow many sessions a user has started\n{% enddocs %}\n\n{% docs browser_size %}\nWhich type of browser a user is using (eg. Mobile, Desktop)\n{% enddocs %}\n\n{% docs northstar_id %}\nThe Northstar ID of the user who generated the event\n{% enddocs %}\n\n{% docs device_id %}\nID of the device used\n{% enddocs %}\n\n{% docs referrer_host %}\nURL host of the referring site (eg. google.com)\n{% enddocs %}\n\n{% docs referrer_path %}\nURL path from referring site (eg. /10-stats-on-teen-drug-and-alcohol-use/)\n{% enddocs %}\n\n{% docs referrer_source %}\nReferrer source name (eg. Google, Facebook)\n{% enddocs %}\n\n{% docs utm_source %}\nTracks where the traffic is coming from. (eg. scholarship_listing, Facebook)\n{% enddocs %}\n\n{% docs utm_medium %}\nHow the traffic got to the platform (eg. referral, CPC)\n{% enddocs %}\n\n{% docs utm_campaign %}\nTracks which campaign the traffic was generated by. Shows up in Google Analytics as Campaign Name (eg. editorial_newsletter)\n{% enddocs %}\n\n{% docs url %}\nURL of campaign (eg. https://dosome.click/nyn5m7)\n{% enddocs %}\n\n{% docs modal_type %}\nNULL or SURVEY_MODAL\n{% enddocs %}\n\n{% docs landing_datetime %}\nWhen the session started in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs ending_datetime %}\nWhen the session ended in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs session_duration_seconds %}\nSession duration in seconds\n{% enddocs %}\n\n{% docs num_pages_views %}\nNumber of pages viewed in session\n{% enddocs %}\n\n{% docs landing_page %}\nFirst page the user viewed in the session (eg. /us/facts/11-facts-about-bp-oil-spill)\n{% enddocs %}\n\n{% docs exit_page %}\n\"Which page the user ended or exited their session from (eg. /us/campaigns/green-your-getaway)\"\n{% enddocs %}\n\n{% docs days_since_last_session %}\n\"Days since their last session.\"\n{% enddocs %}\n\n{% docs post_type %}\nType of post, (e.g. photo, voter-reg)\n{% enddocs %}\n\n{% docs noun %}\nNoun that corresponds to the item in the call to action that was delivered. (e.g. drawings, tweets)\n{% enddocs %}\n\n{% docs verb %}\nVerb corresponding to the action the user took. (e.g. shared, sent, taken)\n{% enddocs %}\n\n{% docs deleted_at %}\nDate time in UTC when a user deleted their post.\n{% enddocs %}\n\n{% docs _fivetran_deleted %}\nMarks rows that were deleted in the source table\n{% enddocs %}\n\n{% docs _fivetran_synced %}\n(UTC timestamp) keeps track of when each row was last successfully synced\n{% enddocs %}\n\n{% docs reportback %}\nWhether the post is a reportback \n{% enddocs %}\n\n{% docs active %}\nWhether the user is active \n{% enddocs %}\n\n{% docs anonymous %}\nWhether the user is anonymous when making the post \n{% enddocs %}\n\n{% docs callpower_campaign_id %}\nUnique ID corresponding to the Callpower campaign. Callpower allows users to record messages for their representatives.\n{% enddocs %}\n\n{% docs quiz %}\nWhether the post is a quiz \n{% enddocs %}\n\n{% docs action_type %}\nType of action the user took. (e.g. share-something, donate-something)\n{% enddocs %}\n\n{% docs online %}\nWhether the action is a online as opposed to IRL.\n{% enddocs %}\n\n{% docs time_commitment %}\nEstimated time required to do the action (e.g. 3.0+, <0.5)\n{% enddocs %}\n\n{% docs num_signups %}\nQuantity of campaign signups\n{% enddocs %}\n\n{% docs most_recent_signup %}\nTimestamp of the most recent signup in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs num_rbs %}\nQuantity of reportbacks for the user\n{% enddocs %}\n\n{% docs total_quantity %}\nTotal quantity of items in reportbacks\n{% enddocs %}\n\n{% docs most_recent_rb %}\nWhen the most recent reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs first_rb %}\nWhen the first reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs avg_time_betw_rbs %}\nCalculated average time between reportbacks.\n{% enddocs %}\n\n{% docs avg_days_next_action_after_rb %}\nCalculated average days until next action after reportback\n{% enddocs %}\n\n{% docs days_to_next_action_after_last_rb %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs most_recent_mam_action %}\nMost recent monthly active member qualifying action in UTC (eg. 2018-01-01 12:00:00).\n{% enddocs %}\n\n{% docs most_recent_email_open %}\nMost recent email open in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs most_recent_all_actions %}\nMost recent timestamp of any action in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs last_action_is_rb %}\nWhether the last action the user took was a reportback\n{% enddocs %}\n\n{% docs days_since_last_action %}\nDays since the user's last action\n{% enddocs %}\n\n{% docs time_to_first_rb %}\nHow much time after registering until the user's first reportback\n{% enddocs %}\n\n{% docs sms_unsubscribed_at %}\nTimestamp of when user unsubscribed from SMS messaging\n{% enddocs %}\n\n{% docs user_unsubscribed_at %}\nTimestamp of when user unsubscribed from email or sms\n{% enddocs %}\n\n{% docs voter_reg_acquisition %}\nWhether the user was an acquisition through voter registration efforts. \n{% enddocs %}\n\n{% docs last_logged_in %}\nDate time in UTC when user last logged in to Northstar\n{% enddocs %}\n\n{% docs last_accessed %}\nDate time in UTC when user last access the website\n{% enddocs %}\n\n{% docs last_messaged_at %}\nDate time in UTC when user was last sent a message via SMS or email\n{% enddocs %}\n\n{% docs facebook_id %}\nUser's facebook id\n{% enddocs %}\n\n{% docs mobile %}\nUsers's mobile phone number\n{% enddocs %}\n\n{% docs birthdate %}\nUser's birthdate\n{% enddocs %}\n\n{% docs first_name %}\nUser's first name\n{% enddocs %}\n\n{% docs last_name %}\nUser's last name\n{% enddocs %}\n\n{% docs voter_registration_status %}\nUser's registration status. (e.g. registration_complete, confirmed, uncertain) \n{% enddocs %}\n\n{% docs finish_with_state %}\nIf the registrant was eligible to use and passed through to complete their registration with their state\u2019s OVR system, it will be indicated in this field (direct quote from Rock-The-Vote documentation). Yes/No value in field.\n{% enddocs %}\n\n{% docs reportback_volume %}\nThis field returns 1 if non voter-reg action, since campaigns team only counts those a 1 reportback. If voter-reg action, we want to count quantity of post as number of registered voters.\n{% enddocs %}\n\n{% docs address_street_1 %}\nFirst line of user's street address\n{% enddocs %}\n\n{% docs address_street_2 %}\nSecond line of user's street address\n{% enddocs %}\n\n{% docs city %}\nUser's city\n{% enddocs %}\n\n{% docs state %}\nUser's state\n{% enddocs %}\n\n{% docs country %}\nUser's country\n{% enddocs %}\n\n{% docs language %}\nUser's language\n{% enddocs %}\n\n{% docs cio_status %}\nStatus of user from CIO. (e.g. customer_subscribed, customer_unsubscribed)\n{% enddocs %}\n\n{% docs cio_status_timestamp %}\nTimestamp when users's status was updated.\n{% enddocs %}\n\n{% docs sms_status %}\nCurrent SMS status. (e.g. undeliverable, unknown)\n{% enddocs %}\n\n{% docs source_detail %}\nDetails of the origin of the user. (e.g. tell_a_friend, other, opt_in_path/197981)\n{% enddocs %}\n\n{% docs badges %}\nWhether the user has any badges. \n{% enddocs %}\n\n{% docs refer_friends %}\nWhether the user is a part of the refer a friend campaign. \n{% enddocs %}\n\n{% docs subscribed_member %}\nWhether the user is subscribed. \n{% enddocs %}\n\n{% docs last_updated_at %}\nTimestamp when users's was updated.\n{% enddocs %}\n\n{% docs school_id %}\nUnique identifier for the user's school. This info comes from the school finder.\n{% enddocs %}\n\n{% docs newsletter_topic %}\nNewsletter topic. (e.g. community, lifestyle)\n{% enddocs %}\n\n{% docs user_agent %}\nFull user agent string for a user's browser (e.g. \"Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:24.0) Gecko/20100101 Firefox/24.0\")\n{% enddocs %}\n\n{% docs drupal_id %}\nOld Drupal user ID\n{% enddocs %}\n\n{% docs campaigns %}\nCampaigns a user is signed up for.\n{% enddocs %}\n\n{% docs audit %}\nA very useful field with data containing information about changes to a user, e.g. timestamps when the user subscribed and unsubscribed.\n{% enddocs %}\n\n{% docs voting_plan_status %}\nThe indication of the user's plan to vote, e.g. voting, not_voting, cant_vote\n{% enddocs %}\n\n{% docs voting_plan_time_of_day %}\nThe time of day when the user plans to vote, e.g morning, afternoon, evening\n{% enddocs %}\n\n{% docs voting_plan_method_of_transport %}\nHow the user plans to get to their polling place. e.g. walk, drive\n{% enddocs %}\n\n{% docs voting_plan_attending_with %}\nWith Whom the user plans to go voting, e.g. family, friends, alone\n{% enddocs %}\n\n{% docs feature_flags %}\nJSON containing info on features like badges and refer-a-friend.\n{% enddocs %}\n\n{% docs dbt_updated_at %}\nDBT snapshot table data. The updated_at timestamp of the source record when this snapshot row was inserted.\n{% enddocs %}\n\n{% docs dbt_scd_id %}\nDBT snapshot table data. A unique key generated for each snapshotted record.\n{% enddocs %}\n\n{% docs dbt_valid_from %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this snapshot row was first inserted\n{% enddocs %}\n\n{% docs dbt_valid_to %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this row row became invalidated.\n{% enddocs %}\n\n{% docs google_id %}\nUser's Google ID obtained from login.\n{% enddocs %}\n\n{% docs causes %}\nCauses in which a user is interested. e.g. animal welfare, education, mental_health\n{% enddocs %}\n\n{% docs email_subscription_status %}\nEmail subscription status of the user\n{% enddocs %}\n\n{% docs role %}\nUser's role, e.g. user, staff\n{% enddocs %}\n\n{% docs cio_backfilled %}\nWhether this user's data was backfilled from CIO\n{% enddocs %}\n\n{% docs addr_source %}\nWhere the user submitted their address, e.g. sms, GDPR\n{% enddocs %}\n\n{% docs email_subscription_topics %}\nEmail subscription topics correspond to categories in CIO in which the user is interested. e.g. lifestyle, community, scholarship\n{% enddocs %}\n\n{% docs sms_paused %}\nWhether we've paused sending sms messages to the user.\n{% enddocs %}\n\n\n\n\n", "name": "channel", "unique_id": "ds_dbt.channel", "block_contents": "Channel for the user's action. Depends on the source of the action. (e.g. web, sms)"}, "ds_dbt.first_action_month": {"root_path": "/Users/mrich/projects/quasar/quasar/dbt", "resource_type": "docs", "path": "schema.md", "original_file_path": "models/schema.md", "package_name": "ds_dbt", "file_contents": "\n{% docs click_id %}\nThis is a unique identifier for each click\n{% enddocs %}\n\n{% docs click_time %}\nTimestamp when user clicked.\n{% enddocs %}\n\n{% docs shortened %}\nShortened URL\n{% enddocs %}\n\n{% docs target_url %}\nURL where the user will be directed\n{% enddocs %}\n\n{% docs broadcast_id %}\nID of the broadcast that generated the shortened URL\n{% enddocs %}\n\n{% docs source %}\nSource of the URL (e.g. SMS, web), origin of the post (e.g. phoenix-web, phoenix-ashes, sms), or source where user was acquired. (e.g. sms, phoenix-next)\n{% enddocs %}\n\n{% docs interaction_type %}\nHow the user interacted with the link (e.g. preview, click)\n{% enddocs %}\n\n{% docs id %}\nUnique identifier for the post\n{% enddocs %}\n\n{% docs type %}\nType of post (e.g. photo)\n{% enddocs %}\n\n{% docs action %}\nPost action (e.g. DefendDreamers_Nov9_CongressCalls, GunViolence2018_Feb15_ParklandResponse)\n{% enddocs %}\n\n{% docs status %}\nPost status (e.g. accepted, rejected)\n{% enddocs %}\n\n{% docs quantity %}\nNumerical quantity of items specified in the call to action (e.g. 10, 200)\n{% enddocs %}\n\n{% docs source_bucket %}\nGrouping bucket for origin of the post (e.g. web, sms) \n{% enddocs %}\n\n{% docs created_at %}\nWhen the item was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs updated_at %}\nWhen the item was updated in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs text %}\nText of the post (e.g. \"Zoo animals and a super hero trying to help too!\") \n{% enddocs %}\n\n{% docs signup_id %}\nUnique identifier for the signup \n{% enddocs %}\n\n{% docs post_class %}\nClass of the signup (e.g. \"photo - default\", \"phone-call - DefendDreamers_Jan16_BothBodies\")\n{% enddocs %}\n\n{% docs is_accepted %}\nWhether the post has been accepted to be displayed to the public on the website\n{% enddocs %}\n\n{% docs action_id %}\nInternal identifier of the action \n{% enddocs %}\n\n{% docs location %}\nLocation where the action takes place (e.g. US-NY)\n{% enddocs %}\n\n{% docs postal_code %}\nPostal code where the action takes place\n{% enddocs %}\n\n{% docs is_reportback %}\nWhether the post is a reportback. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs civic_action %}\nWhether the post is a Civic Action. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs scholarship_entry %}\nWhether the post is a Scholarship Entry. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs why_participated %}\nWhy the user participated in this action. Entered by the user.\n{% enddocs %}\n\n{% docs details %}\nDetails about the post. Contains contentfulId and other information (e.g. {\"campaignContentfulId\":\"6ATBgGEQEeJoIcxs1qbwaC\"})\n{% enddocs %}\n\n{% docs email %}\nEmail address of the user.\n{% enddocs %}\n\n{% docs source_details %}\nDetails about the source of the item. This is sometimes represented as a JSON object, and for other tables like Turbovote its represented as a string. (e.g. \"{\"contentful_id\":\"3CTLlXfbwtz1FOMpl31SKV\",\"utm_source\":\"scholarship_listing\",\"utm_medium\":\"referral\",\"utm_campaign\":\"fastweb_2019_08\"}\", newsletter_456)\n{% enddocs %}\n\n{% docs campaign_id %}\nThis is a unique identifier for the campaign\n{% enddocs %}\n\n{% docs campaign_run_id %}\nUnique identifier for the campaign run\n{% enddocs %}\n\n{% docs campaign_name %}\nName of the campaign\n{% enddocs %}\n\n{% docs campaign_cause %}\nCampaign cause (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_run_start_date %}\nStart date of the campaign run\n{% enddocs %}\n\n{% docs campaign_run_end_date %}\nEnd date of the campaign run\n{% enddocs %}\n\n{% docs campaign_created_date %}\nWhen the campaign was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs campaign_node_id %}\nInternal unique node id for the campaign\n{% enddocs %}\n\n{% docs campaign_node_id_title %}\nCampaign title\n{% enddocs %}\n\n{% docs campaign_run_id_title %}\nTitle of the campaign run\n{% enddocs %}\n\n{% docs campaign_action_type %}\nCampaign action type (eg. Make Something, Share Something)\n{% enddocs %}\n\n{% docs campaign_cause_type %}\nCampaign cause type (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_noun %}\nNoun applicable to the user's action\n{% enddocs %}\n\n{% docs campaign_verb %}\nVerb describing the action the user should take\n{% enddocs %}\n\n{% docs campaign_cta %}\nCampaign's call to action\n{% enddocs %}\n\n{% docs campaign_language %}\n\"Language in which the campaign is available\"\n{% enddocs %}\n\n{% docs agent_id %}\nIf set, the content type of the picture the member is sending us. Exp. image/png.\n{% enddocs %}\n\n{% docs attachment_content_type %}\nIf set, the handle of the Front agent this outbound support message is from.\n{% enddocs %}\n\n{% docs topic %}\nHolds a reference to the **last** campaign topic the member's conversation was in. This is useful to allow members to talk to Gambit and get quick responses (through Rivescript), without Gambit completely forgetting what state the member's interaction with a campaign topic was in.\n{% enddocs %}\n\n{% docs action_serial_id %}\nSerial id for the user's action. Depends on the source of the action. May be the bertly click id, sms message id, etc.\n{% enddocs %}\n\n{% docs channel %}\nChannel for the user's action. Depends on the source of the action. (e.g. web, sms)\n{% enddocs %}\n\n{% docs first_action_month %}\nMonth during which the user took their first action. \n{% enddocs %}\n\n{% docs event_id %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs event_source %}\nApplication source for event (eg. Phoenix, Northstar)\n{% enddocs %}\n\n{% docs event_datetime %}\nWhen the event occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs event_name %}\nName of the event (eg. northstar_submitted_register, https://docs.google.com/spreadsheets/d/1lm-fGrIm85nUTxSojqyCt_Ehmm1zEbViFhKpxcJiz1A/edit#gid=406441516)\n{% enddocs %}\n\n{% docs event_type %}\nType of event (pv = 'Page View', se = 'Structured Event')\n{% enddocs %}\n\n{% docs host %}\nURL host where event occurred (eg. www.dosomething.org or identity.dosomething.org)\n{% enddocs %}\n\n{% docs path %}\nURL path event occurred at (eg. /login or /us/campaigns/huddle-for-heroes)\n{% enddocs %}\n\n{% docs query_parameters %}\nOptional query parameters for the request (eg. query=huddle)\n{% enddocs %}\n\n{% docs se_category %}\nCategory of event (eg. focused_field, authentication) - Custom structured event\n{% enddocs %}\n\n{% docs se_action %}\nAction performed / event name (eg. form_submitted, action_failed) - Custom structured event\n{% enddocs %}\n\n{% docs se_label %}\nThe object of the action (eg. first_name, register, voter_reg_status) - Custom structured event\n{% enddocs %}\n\n{% docs session_id %}\nUnique identifier of the user's session\n{% enddocs %}\n\n{% docs session_counter %}\nHow many sessions a user has started\n{% enddocs %}\n\n{% docs browser_size %}\nWhich type of browser a user is using (eg. Mobile, Desktop)\n{% enddocs %}\n\n{% docs northstar_id %}\nThe Northstar ID of the user who generated the event\n{% enddocs %}\n\n{% docs device_id %}\nID of the device used\n{% enddocs %}\n\n{% docs referrer_host %}\nURL host of the referring site (eg. google.com)\n{% enddocs %}\n\n{% docs referrer_path %}\nURL path from referring site (eg. /10-stats-on-teen-drug-and-alcohol-use/)\n{% enddocs %}\n\n{% docs referrer_source %}\nReferrer source name (eg. Google, Facebook)\n{% enddocs %}\n\n{% docs utm_source %}\nTracks where the traffic is coming from. (eg. scholarship_listing, Facebook)\n{% enddocs %}\n\n{% docs utm_medium %}\nHow the traffic got to the platform (eg. referral, CPC)\n{% enddocs %}\n\n{% docs utm_campaign %}\nTracks which campaign the traffic was generated by. Shows up in Google Analytics as Campaign Name (eg. editorial_newsletter)\n{% enddocs %}\n\n{% docs url %}\nURL of campaign (eg. https://dosome.click/nyn5m7)\n{% enddocs %}\n\n{% docs modal_type %}\nNULL or SURVEY_MODAL\n{% enddocs %}\n\n{% docs landing_datetime %}\nWhen the session started in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs ending_datetime %}\nWhen the session ended in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs session_duration_seconds %}\nSession duration in seconds\n{% enddocs %}\n\n{% docs num_pages_views %}\nNumber of pages viewed in session\n{% enddocs %}\n\n{% docs landing_page %}\nFirst page the user viewed in the session (eg. /us/facts/11-facts-about-bp-oil-spill)\n{% enddocs %}\n\n{% docs exit_page %}\n\"Which page the user ended or exited their session from (eg. /us/campaigns/green-your-getaway)\"\n{% enddocs %}\n\n{% docs days_since_last_session %}\n\"Days since their last session.\"\n{% enddocs %}\n\n{% docs post_type %}\nType of post, (e.g. photo, voter-reg)\n{% enddocs %}\n\n{% docs noun %}\nNoun that corresponds to the item in the call to action that was delivered. (e.g. drawings, tweets)\n{% enddocs %}\n\n{% docs verb %}\nVerb corresponding to the action the user took. (e.g. shared, sent, taken)\n{% enddocs %}\n\n{% docs deleted_at %}\nDate time in UTC when a user deleted their post.\n{% enddocs %}\n\n{% docs _fivetran_deleted %}\nMarks rows that were deleted in the source table\n{% enddocs %}\n\n{% docs _fivetran_synced %}\n(UTC timestamp) keeps track of when each row was last successfully synced\n{% enddocs %}\n\n{% docs reportback %}\nWhether the post is a reportback \n{% enddocs %}\n\n{% docs active %}\nWhether the user is active \n{% enddocs %}\n\n{% docs anonymous %}\nWhether the user is anonymous when making the post \n{% enddocs %}\n\n{% docs callpower_campaign_id %}\nUnique ID corresponding to the Callpower campaign. Callpower allows users to record messages for their representatives.\n{% enddocs %}\n\n{% docs quiz %}\nWhether the post is a quiz \n{% enddocs %}\n\n{% docs action_type %}\nType of action the user took. (e.g. share-something, donate-something)\n{% enddocs %}\n\n{% docs online %}\nWhether the action is a online as opposed to IRL.\n{% enddocs %}\n\n{% docs time_commitment %}\nEstimated time required to do the action (e.g. 3.0+, <0.5)\n{% enddocs %}\n\n{% docs num_signups %}\nQuantity of campaign signups\n{% enddocs %}\n\n{% docs most_recent_signup %}\nTimestamp of the most recent signup in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs num_rbs %}\nQuantity of reportbacks for the user\n{% enddocs %}\n\n{% docs total_quantity %}\nTotal quantity of items in reportbacks\n{% enddocs %}\n\n{% docs most_recent_rb %}\nWhen the most recent reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs first_rb %}\nWhen the first reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs avg_time_betw_rbs %}\nCalculated average time between reportbacks.\n{% enddocs %}\n\n{% docs avg_days_next_action_after_rb %}\nCalculated average days until next action after reportback\n{% enddocs %}\n\n{% docs days_to_next_action_after_last_rb %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs most_recent_mam_action %}\nMost recent monthly active member qualifying action in UTC (eg. 2018-01-01 12:00:00).\n{% enddocs %}\n\n{% docs most_recent_email_open %}\nMost recent email open in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs most_recent_all_actions %}\nMost recent timestamp of any action in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs last_action_is_rb %}\nWhether the last action the user took was a reportback\n{% enddocs %}\n\n{% docs days_since_last_action %}\nDays since the user's last action\n{% enddocs %}\n\n{% docs time_to_first_rb %}\nHow much time after registering until the user's first reportback\n{% enddocs %}\n\n{% docs sms_unsubscribed_at %}\nTimestamp of when user unsubscribed from SMS messaging\n{% enddocs %}\n\n{% docs user_unsubscribed_at %}\nTimestamp of when user unsubscribed from email or sms\n{% enddocs %}\n\n{% docs voter_reg_acquisition %}\nWhether the user was an acquisition through voter registration efforts. \n{% enddocs %}\n\n{% docs last_logged_in %}\nDate time in UTC when user last logged in to Northstar\n{% enddocs %}\n\n{% docs last_accessed %}\nDate time in UTC when user last access the website\n{% enddocs %}\n\n{% docs last_messaged_at %}\nDate time in UTC when user was last sent a message via SMS or email\n{% enddocs %}\n\n{% docs facebook_id %}\nUser's facebook id\n{% enddocs %}\n\n{% docs mobile %}\nUsers's mobile phone number\n{% enddocs %}\n\n{% docs birthdate %}\nUser's birthdate\n{% enddocs %}\n\n{% docs first_name %}\nUser's first name\n{% enddocs %}\n\n{% docs last_name %}\nUser's last name\n{% enddocs %}\n\n{% docs voter_registration_status %}\nUser's registration status. (e.g. registration_complete, confirmed, uncertain) \n{% enddocs %}\n\n{% docs finish_with_state %}\nIf the registrant was eligible to use and passed through to complete their registration with their state\u2019s OVR system, it will be indicated in this field (direct quote from Rock-The-Vote documentation). Yes/No value in field.\n{% enddocs %}\n\n{% docs reportback_volume %}\nThis field returns 1 if non voter-reg action, since campaigns team only counts those a 1 reportback. If voter-reg action, we want to count quantity of post as number of registered voters.\n{% enddocs %}\n\n{% docs address_street_1 %}\nFirst line of user's street address\n{% enddocs %}\n\n{% docs address_street_2 %}\nSecond line of user's street address\n{% enddocs %}\n\n{% docs city %}\nUser's city\n{% enddocs %}\n\n{% docs state %}\nUser's state\n{% enddocs %}\n\n{% docs country %}\nUser's country\n{% enddocs %}\n\n{% docs language %}\nUser's language\n{% enddocs %}\n\n{% docs cio_status %}\nStatus of user from CIO. (e.g. customer_subscribed, customer_unsubscribed)\n{% enddocs %}\n\n{% docs cio_status_timestamp %}\nTimestamp when users's status was updated.\n{% enddocs %}\n\n{% docs sms_status %}\nCurrent SMS status. (e.g. undeliverable, unknown)\n{% enddocs %}\n\n{% docs source_detail %}\nDetails of the origin of the user. (e.g. tell_a_friend, other, opt_in_path/197981)\n{% enddocs %}\n\n{% docs badges %}\nWhether the user has any badges. \n{% enddocs %}\n\n{% docs refer_friends %}\nWhether the user is a part of the refer a friend campaign. \n{% enddocs %}\n\n{% docs subscribed_member %}\nWhether the user is subscribed. \n{% enddocs %}\n\n{% docs last_updated_at %}\nTimestamp when users's was updated.\n{% enddocs %}\n\n{% docs school_id %}\nUnique identifier for the user's school. This info comes from the school finder.\n{% enddocs %}\n\n{% docs newsletter_topic %}\nNewsletter topic. (e.g. community, lifestyle)\n{% enddocs %}\n\n{% docs user_agent %}\nFull user agent string for a user's browser (e.g. \"Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:24.0) Gecko/20100101 Firefox/24.0\")\n{% enddocs %}\n\n{% docs drupal_id %}\nOld Drupal user ID\n{% enddocs %}\n\n{% docs campaigns %}\nCampaigns a user is signed up for.\n{% enddocs %}\n\n{% docs audit %}\nA very useful field with data containing information about changes to a user, e.g. timestamps when the user subscribed and unsubscribed.\n{% enddocs %}\n\n{% docs voting_plan_status %}\nThe indication of the user's plan to vote, e.g. voting, not_voting, cant_vote\n{% enddocs %}\n\n{% docs voting_plan_time_of_day %}\nThe time of day when the user plans to vote, e.g morning, afternoon, evening\n{% enddocs %}\n\n{% docs voting_plan_method_of_transport %}\nHow the user plans to get to their polling place. e.g. walk, drive\n{% enddocs %}\n\n{% docs voting_plan_attending_with %}\nWith Whom the user plans to go voting, e.g. family, friends, alone\n{% enddocs %}\n\n{% docs feature_flags %}\nJSON containing info on features like badges and refer-a-friend.\n{% enddocs %}\n\n{% docs dbt_updated_at %}\nDBT snapshot table data. The updated_at timestamp of the source record when this snapshot row was inserted.\n{% enddocs %}\n\n{% docs dbt_scd_id %}\nDBT snapshot table data. A unique key generated for each snapshotted record.\n{% enddocs %}\n\n{% docs dbt_valid_from %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this snapshot row was first inserted\n{% enddocs %}\n\n{% docs dbt_valid_to %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this row row became invalidated.\n{% enddocs %}\n\n{% docs google_id %}\nUser's Google ID obtained from login.\n{% enddocs %}\n\n{% docs causes %}\nCauses in which a user is interested. e.g. animal welfare, education, mental_health\n{% enddocs %}\n\n{% docs email_subscription_status %}\nEmail subscription status of the user\n{% enddocs %}\n\n{% docs role %}\nUser's role, e.g. user, staff\n{% enddocs %}\n\n{% docs cio_backfilled %}\nWhether this user's data was backfilled from CIO\n{% enddocs %}\n\n{% docs addr_source %}\nWhere the user submitted their address, e.g. sms, GDPR\n{% enddocs %}\n\n{% docs email_subscription_topics %}\nEmail subscription topics correspond to categories in CIO in which the user is interested. e.g. lifestyle, community, scholarship\n{% enddocs %}\n\n{% docs sms_paused %}\nWhether we've paused sending sms messages to the user.\n{% enddocs %}\n\n\n\n\n", "name": "first_action_month", "unique_id": "ds_dbt.first_action_month", "block_contents": "Month during which the user took their first action."}, "ds_dbt.event_id": {"root_path": "/Users/mrich/projects/quasar/quasar/dbt", "resource_type": "docs", "path": "schema.md", "original_file_path": "models/schema.md", "package_name": "ds_dbt", "file_contents": "\n{% docs click_id %}\nThis is a unique identifier for each click\n{% enddocs %}\n\n{% docs click_time %}\nTimestamp when user clicked.\n{% enddocs %}\n\n{% docs shortened %}\nShortened URL\n{% enddocs %}\n\n{% docs target_url %}\nURL where the user will be directed\n{% enddocs %}\n\n{% docs broadcast_id %}\nID of the broadcast that generated the shortened URL\n{% enddocs %}\n\n{% docs source %}\nSource of the URL (e.g. SMS, web), origin of the post (e.g. phoenix-web, phoenix-ashes, sms), or source where user was acquired. (e.g. sms, phoenix-next)\n{% enddocs %}\n\n{% docs interaction_type %}\nHow the user interacted with the link (e.g. preview, click)\n{% enddocs %}\n\n{% docs id %}\nUnique identifier for the post\n{% enddocs %}\n\n{% docs type %}\nType of post (e.g. photo)\n{% enddocs %}\n\n{% docs action %}\nPost action (e.g. DefendDreamers_Nov9_CongressCalls, GunViolence2018_Feb15_ParklandResponse)\n{% enddocs %}\n\n{% docs status %}\nPost status (e.g. accepted, rejected)\n{% enddocs %}\n\n{% docs quantity %}\nNumerical quantity of items specified in the call to action (e.g. 10, 200)\n{% enddocs %}\n\n{% docs source_bucket %}\nGrouping bucket for origin of the post (e.g. web, sms) \n{% enddocs %}\n\n{% docs created_at %}\nWhen the item was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs updated_at %}\nWhen the item was updated in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs text %}\nText of the post (e.g. \"Zoo animals and a super hero trying to help too!\") \n{% enddocs %}\n\n{% docs signup_id %}\nUnique identifier for the signup \n{% enddocs %}\n\n{% docs post_class %}\nClass of the signup (e.g. \"photo - default\", \"phone-call - DefendDreamers_Jan16_BothBodies\")\n{% enddocs %}\n\n{% docs is_accepted %}\nWhether the post has been accepted to be displayed to the public on the website\n{% enddocs %}\n\n{% docs action_id %}\nInternal identifier of the action \n{% enddocs %}\n\n{% docs location %}\nLocation where the action takes place (e.g. US-NY)\n{% enddocs %}\n\n{% docs postal_code %}\nPostal code where the action takes place\n{% enddocs %}\n\n{% docs is_reportback %}\nWhether the post is a reportback. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs civic_action %}\nWhether the post is a Civic Action. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs scholarship_entry %}\nWhether the post is a Scholarship Entry. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs why_participated %}\nWhy the user participated in this action. Entered by the user.\n{% enddocs %}\n\n{% docs details %}\nDetails about the post. Contains contentfulId and other information (e.g. {\"campaignContentfulId\":\"6ATBgGEQEeJoIcxs1qbwaC\"})\n{% enddocs %}\n\n{% docs email %}\nEmail address of the user.\n{% enddocs %}\n\n{% docs source_details %}\nDetails about the source of the item. This is sometimes represented as a JSON object, and for other tables like Turbovote its represented as a string. (e.g. \"{\"contentful_id\":\"3CTLlXfbwtz1FOMpl31SKV\",\"utm_source\":\"scholarship_listing\",\"utm_medium\":\"referral\",\"utm_campaign\":\"fastweb_2019_08\"}\", newsletter_456)\n{% enddocs %}\n\n{% docs campaign_id %}\nThis is a unique identifier for the campaign\n{% enddocs %}\n\n{% docs campaign_run_id %}\nUnique identifier for the campaign run\n{% enddocs %}\n\n{% docs campaign_name %}\nName of the campaign\n{% enddocs %}\n\n{% docs campaign_cause %}\nCampaign cause (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_run_start_date %}\nStart date of the campaign run\n{% enddocs %}\n\n{% docs campaign_run_end_date %}\nEnd date of the campaign run\n{% enddocs %}\n\n{% docs campaign_created_date %}\nWhen the campaign was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs campaign_node_id %}\nInternal unique node id for the campaign\n{% enddocs %}\n\n{% docs campaign_node_id_title %}\nCampaign title\n{% enddocs %}\n\n{% docs campaign_run_id_title %}\nTitle of the campaign run\n{% enddocs %}\n\n{% docs campaign_action_type %}\nCampaign action type (eg. Make Something, Share Something)\n{% enddocs %}\n\n{% docs campaign_cause_type %}\nCampaign cause type (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_noun %}\nNoun applicable to the user's action\n{% enddocs %}\n\n{% docs campaign_verb %}\nVerb describing the action the user should take\n{% enddocs %}\n\n{% docs campaign_cta %}\nCampaign's call to action\n{% enddocs %}\n\n{% docs campaign_language %}\n\"Language in which the campaign is available\"\n{% enddocs %}\n\n{% docs agent_id %}\nIf set, the content type of the picture the member is sending us. Exp. image/png.\n{% enddocs %}\n\n{% docs attachment_content_type %}\nIf set, the handle of the Front agent this outbound support message is from.\n{% enddocs %}\n\n{% docs topic %}\nHolds a reference to the **last** campaign topic the member's conversation was in. This is useful to allow members to talk to Gambit and get quick responses (through Rivescript), without Gambit completely forgetting what state the member's interaction with a campaign topic was in.\n{% enddocs %}\n\n{% docs action_serial_id %}\nSerial id for the user's action. Depends on the source of the action. May be the bertly click id, sms message id, etc.\n{% enddocs %}\n\n{% docs channel %}\nChannel for the user's action. Depends on the source of the action. (e.g. web, sms)\n{% enddocs %}\n\n{% docs first_action_month %}\nMonth during which the user took their first action. \n{% enddocs %}\n\n{% docs event_id %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs event_source %}\nApplication source for event (eg. Phoenix, Northstar)\n{% enddocs %}\n\n{% docs event_datetime %}\nWhen the event occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs event_name %}\nName of the event (eg. northstar_submitted_register, https://docs.google.com/spreadsheets/d/1lm-fGrIm85nUTxSojqyCt_Ehmm1zEbViFhKpxcJiz1A/edit#gid=406441516)\n{% enddocs %}\n\n{% docs event_type %}\nType of event (pv = 'Page View', se = 'Structured Event')\n{% enddocs %}\n\n{% docs host %}\nURL host where event occurred (eg. www.dosomething.org or identity.dosomething.org)\n{% enddocs %}\n\n{% docs path %}\nURL path event occurred at (eg. /login or /us/campaigns/huddle-for-heroes)\n{% enddocs %}\n\n{% docs query_parameters %}\nOptional query parameters for the request (eg. query=huddle)\n{% enddocs %}\n\n{% docs se_category %}\nCategory of event (eg. focused_field, authentication) - Custom structured event\n{% enddocs %}\n\n{% docs se_action %}\nAction performed / event name (eg. form_submitted, action_failed) - Custom structured event\n{% enddocs %}\n\n{% docs se_label %}\nThe object of the action (eg. first_name, register, voter_reg_status) - Custom structured event\n{% enddocs %}\n\n{% docs session_id %}\nUnique identifier of the user's session\n{% enddocs %}\n\n{% docs session_counter %}\nHow many sessions a user has started\n{% enddocs %}\n\n{% docs browser_size %}\nWhich type of browser a user is using (eg. Mobile, Desktop)\n{% enddocs %}\n\n{% docs northstar_id %}\nThe Northstar ID of the user who generated the event\n{% enddocs %}\n\n{% docs device_id %}\nID of the device used\n{% enddocs %}\n\n{% docs referrer_host %}\nURL host of the referring site (eg. google.com)\n{% enddocs %}\n\n{% docs referrer_path %}\nURL path from referring site (eg. /10-stats-on-teen-drug-and-alcohol-use/)\n{% enddocs %}\n\n{% docs referrer_source %}\nReferrer source name (eg. Google, Facebook)\n{% enddocs %}\n\n{% docs utm_source %}\nTracks where the traffic is coming from. (eg. scholarship_listing, Facebook)\n{% enddocs %}\n\n{% docs utm_medium %}\nHow the traffic got to the platform (eg. referral, CPC)\n{% enddocs %}\n\n{% docs utm_campaign %}\nTracks which campaign the traffic was generated by. Shows up in Google Analytics as Campaign Name (eg. editorial_newsletter)\n{% enddocs %}\n\n{% docs url %}\nURL of campaign (eg. https://dosome.click/nyn5m7)\n{% enddocs %}\n\n{% docs modal_type %}\nNULL or SURVEY_MODAL\n{% enddocs %}\n\n{% docs landing_datetime %}\nWhen the session started in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs ending_datetime %}\nWhen the session ended in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs session_duration_seconds %}\nSession duration in seconds\n{% enddocs %}\n\n{% docs num_pages_views %}\nNumber of pages viewed in session\n{% enddocs %}\n\n{% docs landing_page %}\nFirst page the user viewed in the session (eg. /us/facts/11-facts-about-bp-oil-spill)\n{% enddocs %}\n\n{% docs exit_page %}\n\"Which page the user ended or exited their session from (eg. /us/campaigns/green-your-getaway)\"\n{% enddocs %}\n\n{% docs days_since_last_session %}\n\"Days since their last session.\"\n{% enddocs %}\n\n{% docs post_type %}\nType of post, (e.g. photo, voter-reg)\n{% enddocs %}\n\n{% docs noun %}\nNoun that corresponds to the item in the call to action that was delivered. (e.g. drawings, tweets)\n{% enddocs %}\n\n{% docs verb %}\nVerb corresponding to the action the user took. (e.g. shared, sent, taken)\n{% enddocs %}\n\n{% docs deleted_at %}\nDate time in UTC when a user deleted their post.\n{% enddocs %}\n\n{% docs _fivetran_deleted %}\nMarks rows that were deleted in the source table\n{% enddocs %}\n\n{% docs _fivetran_synced %}\n(UTC timestamp) keeps track of when each row was last successfully synced\n{% enddocs %}\n\n{% docs reportback %}\nWhether the post is a reportback \n{% enddocs %}\n\n{% docs active %}\nWhether the user is active \n{% enddocs %}\n\n{% docs anonymous %}\nWhether the user is anonymous when making the post \n{% enddocs %}\n\n{% docs callpower_campaign_id %}\nUnique ID corresponding to the Callpower campaign. Callpower allows users to record messages for their representatives.\n{% enddocs %}\n\n{% docs quiz %}\nWhether the post is a quiz \n{% enddocs %}\n\n{% docs action_type %}\nType of action the user took. (e.g. share-something, donate-something)\n{% enddocs %}\n\n{% docs online %}\nWhether the action is a online as opposed to IRL.\n{% enddocs %}\n\n{% docs time_commitment %}\nEstimated time required to do the action (e.g. 3.0+, <0.5)\n{% enddocs %}\n\n{% docs num_signups %}\nQuantity of campaign signups\n{% enddocs %}\n\n{% docs most_recent_signup %}\nTimestamp of the most recent signup in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs num_rbs %}\nQuantity of reportbacks for the user\n{% enddocs %}\n\n{% docs total_quantity %}\nTotal quantity of items in reportbacks\n{% enddocs %}\n\n{% docs most_recent_rb %}\nWhen the most recent reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs first_rb %}\nWhen the first reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs avg_time_betw_rbs %}\nCalculated average time between reportbacks.\n{% enddocs %}\n\n{% docs avg_days_next_action_after_rb %}\nCalculated average days until next action after reportback\n{% enddocs %}\n\n{% docs days_to_next_action_after_last_rb %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs most_recent_mam_action %}\nMost recent monthly active member qualifying action in UTC (eg. 2018-01-01 12:00:00).\n{% enddocs %}\n\n{% docs most_recent_email_open %}\nMost recent email open in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs most_recent_all_actions %}\nMost recent timestamp of any action in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs last_action_is_rb %}\nWhether the last action the user took was a reportback\n{% enddocs %}\n\n{% docs days_since_last_action %}\nDays since the user's last action\n{% enddocs %}\n\n{% docs time_to_first_rb %}\nHow much time after registering until the user's first reportback\n{% enddocs %}\n\n{% docs sms_unsubscribed_at %}\nTimestamp of when user unsubscribed from SMS messaging\n{% enddocs %}\n\n{% docs user_unsubscribed_at %}\nTimestamp of when user unsubscribed from email or sms\n{% enddocs %}\n\n{% docs voter_reg_acquisition %}\nWhether the user was an acquisition through voter registration efforts. \n{% enddocs %}\n\n{% docs last_logged_in %}\nDate time in UTC when user last logged in to Northstar\n{% enddocs %}\n\n{% docs last_accessed %}\nDate time in UTC when user last access the website\n{% enddocs %}\n\n{% docs last_messaged_at %}\nDate time in UTC when user was last sent a message via SMS or email\n{% enddocs %}\n\n{% docs facebook_id %}\nUser's facebook id\n{% enddocs %}\n\n{% docs mobile %}\nUsers's mobile phone number\n{% enddocs %}\n\n{% docs birthdate %}\nUser's birthdate\n{% enddocs %}\n\n{% docs first_name %}\nUser's first name\n{% enddocs %}\n\n{% docs last_name %}\nUser's last name\n{% enddocs %}\n\n{% docs voter_registration_status %}\nUser's registration status. (e.g. registration_complete, confirmed, uncertain) \n{% enddocs %}\n\n{% docs finish_with_state %}\nIf the registrant was eligible to use and passed through to complete their registration with their state\u2019s OVR system, it will be indicated in this field (direct quote from Rock-The-Vote documentation). Yes/No value in field.\n{% enddocs %}\n\n{% docs reportback_volume %}\nThis field returns 1 if non voter-reg action, since campaigns team only counts those a 1 reportback. If voter-reg action, we want to count quantity of post as number of registered voters.\n{% enddocs %}\n\n{% docs address_street_1 %}\nFirst line of user's street address\n{% enddocs %}\n\n{% docs address_street_2 %}\nSecond line of user's street address\n{% enddocs %}\n\n{% docs city %}\nUser's city\n{% enddocs %}\n\n{% docs state %}\nUser's state\n{% enddocs %}\n\n{% docs country %}\nUser's country\n{% enddocs %}\n\n{% docs language %}\nUser's language\n{% enddocs %}\n\n{% docs cio_status %}\nStatus of user from CIO. (e.g. customer_subscribed, customer_unsubscribed)\n{% enddocs %}\n\n{% docs cio_status_timestamp %}\nTimestamp when users's status was updated.\n{% enddocs %}\n\n{% docs sms_status %}\nCurrent SMS status. (e.g. undeliverable, unknown)\n{% enddocs %}\n\n{% docs source_detail %}\nDetails of the origin of the user. (e.g. tell_a_friend, other, opt_in_path/197981)\n{% enddocs %}\n\n{% docs badges %}\nWhether the user has any badges. \n{% enddocs %}\n\n{% docs refer_friends %}\nWhether the user is a part of the refer a friend campaign. \n{% enddocs %}\n\n{% docs subscribed_member %}\nWhether the user is subscribed. \n{% enddocs %}\n\n{% docs last_updated_at %}\nTimestamp when users's was updated.\n{% enddocs %}\n\n{% docs school_id %}\nUnique identifier for the user's school. This info comes from the school finder.\n{% enddocs %}\n\n{% docs newsletter_topic %}\nNewsletter topic. (e.g. community, lifestyle)\n{% enddocs %}\n\n{% docs user_agent %}\nFull user agent string for a user's browser (e.g. \"Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:24.0) Gecko/20100101 Firefox/24.0\")\n{% enddocs %}\n\n{% docs drupal_id %}\nOld Drupal user ID\n{% enddocs %}\n\n{% docs campaigns %}\nCampaigns a user is signed up for.\n{% enddocs %}\n\n{% docs audit %}\nA very useful field with data containing information about changes to a user, e.g. timestamps when the user subscribed and unsubscribed.\n{% enddocs %}\n\n{% docs voting_plan_status %}\nThe indication of the user's plan to vote, e.g. voting, not_voting, cant_vote\n{% enddocs %}\n\n{% docs voting_plan_time_of_day %}\nThe time of day when the user plans to vote, e.g morning, afternoon, evening\n{% enddocs %}\n\n{% docs voting_plan_method_of_transport %}\nHow the user plans to get to their polling place. e.g. walk, drive\n{% enddocs %}\n\n{% docs voting_plan_attending_with %}\nWith Whom the user plans to go voting, e.g. family, friends, alone\n{% enddocs %}\n\n{% docs feature_flags %}\nJSON containing info on features like badges and refer-a-friend.\n{% enddocs %}\n\n{% docs dbt_updated_at %}\nDBT snapshot table data. The updated_at timestamp of the source record when this snapshot row was inserted.\n{% enddocs %}\n\n{% docs dbt_scd_id %}\nDBT snapshot table data. A unique key generated for each snapshotted record.\n{% enddocs %}\n\n{% docs dbt_valid_from %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this snapshot row was first inserted\n{% enddocs %}\n\n{% docs dbt_valid_to %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this row row became invalidated.\n{% enddocs %}\n\n{% docs google_id %}\nUser's Google ID obtained from login.\n{% enddocs %}\n\n{% docs causes %}\nCauses in which a user is interested. e.g. animal welfare, education, mental_health\n{% enddocs %}\n\n{% docs email_subscription_status %}\nEmail subscription status of the user\n{% enddocs %}\n\n{% docs role %}\nUser's role, e.g. user, staff\n{% enddocs %}\n\n{% docs cio_backfilled %}\nWhether this user's data was backfilled from CIO\n{% enddocs %}\n\n{% docs addr_source %}\nWhere the user submitted their address, e.g. sms, GDPR\n{% enddocs %}\n\n{% docs email_subscription_topics %}\nEmail subscription topics correspond to categories in CIO in which the user is interested. e.g. lifestyle, community, scholarship\n{% enddocs %}\n\n{% docs sms_paused %}\nWhether we've paused sending sms messages to the user.\n{% enddocs %}\n\n\n\n\n", "name": "event_id", "unique_id": "ds_dbt.event_id", "block_contents": "This is a unique identifier for each event"}, "ds_dbt.event_source": {"root_path": "/Users/mrich/projects/quasar/quasar/dbt", "resource_type": "docs", "path": "schema.md", "original_file_path": "models/schema.md", "package_name": "ds_dbt", "file_contents": "\n{% docs click_id %}\nThis is a unique identifier for each click\n{% enddocs %}\n\n{% docs click_time %}\nTimestamp when user clicked.\n{% enddocs %}\n\n{% docs shortened %}\nShortened URL\n{% enddocs %}\n\n{% docs target_url %}\nURL where the user will be directed\n{% enddocs %}\n\n{% docs broadcast_id %}\nID of the broadcast that generated the shortened URL\n{% enddocs %}\n\n{% docs source %}\nSource of the URL (e.g. SMS, web), origin of the post (e.g. phoenix-web, phoenix-ashes, sms), or source where user was acquired. (e.g. sms, phoenix-next)\n{% enddocs %}\n\n{% docs interaction_type %}\nHow the user interacted with the link (e.g. preview, click)\n{% enddocs %}\n\n{% docs id %}\nUnique identifier for the post\n{% enddocs %}\n\n{% docs type %}\nType of post (e.g. photo)\n{% enddocs %}\n\n{% docs action %}\nPost action (e.g. DefendDreamers_Nov9_CongressCalls, GunViolence2018_Feb15_ParklandResponse)\n{% enddocs %}\n\n{% docs status %}\nPost status (e.g. accepted, rejected)\n{% enddocs %}\n\n{% docs quantity %}\nNumerical quantity of items specified in the call to action (e.g. 10, 200)\n{% enddocs %}\n\n{% docs source_bucket %}\nGrouping bucket for origin of the post (e.g. web, sms) \n{% enddocs %}\n\n{% docs created_at %}\nWhen the item was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs updated_at %}\nWhen the item was updated in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs text %}\nText of the post (e.g. \"Zoo animals and a super hero trying to help too!\") \n{% enddocs %}\n\n{% docs signup_id %}\nUnique identifier for the signup \n{% enddocs %}\n\n{% docs post_class %}\nClass of the signup (e.g. \"photo - default\", \"phone-call - DefendDreamers_Jan16_BothBodies\")\n{% enddocs %}\n\n{% docs is_accepted %}\nWhether the post has been accepted to be displayed to the public on the website\n{% enddocs %}\n\n{% docs action_id %}\nInternal identifier of the action \n{% enddocs %}\n\n{% docs location %}\nLocation where the action takes place (e.g. US-NY)\n{% enddocs %}\n\n{% docs postal_code %}\nPostal code where the action takes place\n{% enddocs %}\n\n{% docs is_reportback %}\nWhether the post is a reportback. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs civic_action %}\nWhether the post is a Civic Action. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs scholarship_entry %}\nWhether the post is a Scholarship Entry. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs why_participated %}\nWhy the user participated in this action. Entered by the user.\n{% enddocs %}\n\n{% docs details %}\nDetails about the post. Contains contentfulId and other information (e.g. {\"campaignContentfulId\":\"6ATBgGEQEeJoIcxs1qbwaC\"})\n{% enddocs %}\n\n{% docs email %}\nEmail address of the user.\n{% enddocs %}\n\n{% docs source_details %}\nDetails about the source of the item. This is sometimes represented as a JSON object, and for other tables like Turbovote its represented as a string. (e.g. \"{\"contentful_id\":\"3CTLlXfbwtz1FOMpl31SKV\",\"utm_source\":\"scholarship_listing\",\"utm_medium\":\"referral\",\"utm_campaign\":\"fastweb_2019_08\"}\", newsletter_456)\n{% enddocs %}\n\n{% docs campaign_id %}\nThis is a unique identifier for the campaign\n{% enddocs %}\n\n{% docs campaign_run_id %}\nUnique identifier for the campaign run\n{% enddocs %}\n\n{% docs campaign_name %}\nName of the campaign\n{% enddocs %}\n\n{% docs campaign_cause %}\nCampaign cause (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_run_start_date %}\nStart date of the campaign run\n{% enddocs %}\n\n{% docs campaign_run_end_date %}\nEnd date of the campaign run\n{% enddocs %}\n\n{% docs campaign_created_date %}\nWhen the campaign was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs campaign_node_id %}\nInternal unique node id for the campaign\n{% enddocs %}\n\n{% docs campaign_node_id_title %}\nCampaign title\n{% enddocs %}\n\n{% docs campaign_run_id_title %}\nTitle of the campaign run\n{% enddocs %}\n\n{% docs campaign_action_type %}\nCampaign action type (eg. Make Something, Share Something)\n{% enddocs %}\n\n{% docs campaign_cause_type %}\nCampaign cause type (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_noun %}\nNoun applicable to the user's action\n{% enddocs %}\n\n{% docs campaign_verb %}\nVerb describing the action the user should take\n{% enddocs %}\n\n{% docs campaign_cta %}\nCampaign's call to action\n{% enddocs %}\n\n{% docs campaign_language %}\n\"Language in which the campaign is available\"\n{% enddocs %}\n\n{% docs agent_id %}\nIf set, the content type of the picture the member is sending us. Exp. image/png.\n{% enddocs %}\n\n{% docs attachment_content_type %}\nIf set, the handle of the Front agent this outbound support message is from.\n{% enddocs %}\n\n{% docs topic %}\nHolds a reference to the **last** campaign topic the member's conversation was in. This is useful to allow members to talk to Gambit and get quick responses (through Rivescript), without Gambit completely forgetting what state the member's interaction with a campaign topic was in.\n{% enddocs %}\n\n{% docs action_serial_id %}\nSerial id for the user's action. Depends on the source of the action. May be the bertly click id, sms message id, etc.\n{% enddocs %}\n\n{% docs channel %}\nChannel for the user's action. Depends on the source of the action. (e.g. web, sms)\n{% enddocs %}\n\n{% docs first_action_month %}\nMonth during which the user took their first action. \n{% enddocs %}\n\n{% docs event_id %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs event_source %}\nApplication source for event (eg. Phoenix, Northstar)\n{% enddocs %}\n\n{% docs event_datetime %}\nWhen the event occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs event_name %}\nName of the event (eg. northstar_submitted_register, https://docs.google.com/spreadsheets/d/1lm-fGrIm85nUTxSojqyCt_Ehmm1zEbViFhKpxcJiz1A/edit#gid=406441516)\n{% enddocs %}\n\n{% docs event_type %}\nType of event (pv = 'Page View', se = 'Structured Event')\n{% enddocs %}\n\n{% docs host %}\nURL host where event occurred (eg. www.dosomething.org or identity.dosomething.org)\n{% enddocs %}\n\n{% docs path %}\nURL path event occurred at (eg. /login or /us/campaigns/huddle-for-heroes)\n{% enddocs %}\n\n{% docs query_parameters %}\nOptional query parameters for the request (eg. query=huddle)\n{% enddocs %}\n\n{% docs se_category %}\nCategory of event (eg. focused_field, authentication) - Custom structured event\n{% enddocs %}\n\n{% docs se_action %}\nAction performed / event name (eg. form_submitted, action_failed) - Custom structured event\n{% enddocs %}\n\n{% docs se_label %}\nThe object of the action (eg. first_name, register, voter_reg_status) - Custom structured event\n{% enddocs %}\n\n{% docs session_id %}\nUnique identifier of the user's session\n{% enddocs %}\n\n{% docs session_counter %}\nHow many sessions a user has started\n{% enddocs %}\n\n{% docs browser_size %}\nWhich type of browser a user is using (eg. Mobile, Desktop)\n{% enddocs %}\n\n{% docs northstar_id %}\nThe Northstar ID of the user who generated the event\n{% enddocs %}\n\n{% docs device_id %}\nID of the device used\n{% enddocs %}\n\n{% docs referrer_host %}\nURL host of the referring site (eg. google.com)\n{% enddocs %}\n\n{% docs referrer_path %}\nURL path from referring site (eg. /10-stats-on-teen-drug-and-alcohol-use/)\n{% enddocs %}\n\n{% docs referrer_source %}\nReferrer source name (eg. Google, Facebook)\n{% enddocs %}\n\n{% docs utm_source %}\nTracks where the traffic is coming from. (eg. scholarship_listing, Facebook)\n{% enddocs %}\n\n{% docs utm_medium %}\nHow the traffic got to the platform (eg. referral, CPC)\n{% enddocs %}\n\n{% docs utm_campaign %}\nTracks which campaign the traffic was generated by. Shows up in Google Analytics as Campaign Name (eg. editorial_newsletter)\n{% enddocs %}\n\n{% docs url %}\nURL of campaign (eg. https://dosome.click/nyn5m7)\n{% enddocs %}\n\n{% docs modal_type %}\nNULL or SURVEY_MODAL\n{% enddocs %}\n\n{% docs landing_datetime %}\nWhen the session started in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs ending_datetime %}\nWhen the session ended in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs session_duration_seconds %}\nSession duration in seconds\n{% enddocs %}\n\n{% docs num_pages_views %}\nNumber of pages viewed in session\n{% enddocs %}\n\n{% docs landing_page %}\nFirst page the user viewed in the session (eg. /us/facts/11-facts-about-bp-oil-spill)\n{% enddocs %}\n\n{% docs exit_page %}\n\"Which page the user ended or exited their session from (eg. /us/campaigns/green-your-getaway)\"\n{% enddocs %}\n\n{% docs days_since_last_session %}\n\"Days since their last session.\"\n{% enddocs %}\n\n{% docs post_type %}\nType of post, (e.g. photo, voter-reg)\n{% enddocs %}\n\n{% docs noun %}\nNoun that corresponds to the item in the call to action that was delivered. (e.g. drawings, tweets)\n{% enddocs %}\n\n{% docs verb %}\nVerb corresponding to the action the user took. (e.g. shared, sent, taken)\n{% enddocs %}\n\n{% docs deleted_at %}\nDate time in UTC when a user deleted their post.\n{% enddocs %}\n\n{% docs _fivetran_deleted %}\nMarks rows that were deleted in the source table\n{% enddocs %}\n\n{% docs _fivetran_synced %}\n(UTC timestamp) keeps track of when each row was last successfully synced\n{% enddocs %}\n\n{% docs reportback %}\nWhether the post is a reportback \n{% enddocs %}\n\n{% docs active %}\nWhether the user is active \n{% enddocs %}\n\n{% docs anonymous %}\nWhether the user is anonymous when making the post \n{% enddocs %}\n\n{% docs callpower_campaign_id %}\nUnique ID corresponding to the Callpower campaign. Callpower allows users to record messages for their representatives.\n{% enddocs %}\n\n{% docs quiz %}\nWhether the post is a quiz \n{% enddocs %}\n\n{% docs action_type %}\nType of action the user took. (e.g. share-something, donate-something)\n{% enddocs %}\n\n{% docs online %}\nWhether the action is a online as opposed to IRL.\n{% enddocs %}\n\n{% docs time_commitment %}\nEstimated time required to do the action (e.g. 3.0+, <0.5)\n{% enddocs %}\n\n{% docs num_signups %}\nQuantity of campaign signups\n{% enddocs %}\n\n{% docs most_recent_signup %}\nTimestamp of the most recent signup in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs num_rbs %}\nQuantity of reportbacks for the user\n{% enddocs %}\n\n{% docs total_quantity %}\nTotal quantity of items in reportbacks\n{% enddocs %}\n\n{% docs most_recent_rb %}\nWhen the most recent reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs first_rb %}\nWhen the first reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs avg_time_betw_rbs %}\nCalculated average time between reportbacks.\n{% enddocs %}\n\n{% docs avg_days_next_action_after_rb %}\nCalculated average days until next action after reportback\n{% enddocs %}\n\n{% docs days_to_next_action_after_last_rb %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs most_recent_mam_action %}\nMost recent monthly active member qualifying action in UTC (eg. 2018-01-01 12:00:00).\n{% enddocs %}\n\n{% docs most_recent_email_open %}\nMost recent email open in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs most_recent_all_actions %}\nMost recent timestamp of any action in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs last_action_is_rb %}\nWhether the last action the user took was a reportback\n{% enddocs %}\n\n{% docs days_since_last_action %}\nDays since the user's last action\n{% enddocs %}\n\n{% docs time_to_first_rb %}\nHow much time after registering until the user's first reportback\n{% enddocs %}\n\n{% docs sms_unsubscribed_at %}\nTimestamp of when user unsubscribed from SMS messaging\n{% enddocs %}\n\n{% docs user_unsubscribed_at %}\nTimestamp of when user unsubscribed from email or sms\n{% enddocs %}\n\n{% docs voter_reg_acquisition %}\nWhether the user was an acquisition through voter registration efforts. \n{% enddocs %}\n\n{% docs last_logged_in %}\nDate time in UTC when user last logged in to Northstar\n{% enddocs %}\n\n{% docs last_accessed %}\nDate time in UTC when user last access the website\n{% enddocs %}\n\n{% docs last_messaged_at %}\nDate time in UTC when user was last sent a message via SMS or email\n{% enddocs %}\n\n{% docs facebook_id %}\nUser's facebook id\n{% enddocs %}\n\n{% docs mobile %}\nUsers's mobile phone number\n{% enddocs %}\n\n{% docs birthdate %}\nUser's birthdate\n{% enddocs %}\n\n{% docs first_name %}\nUser's first name\n{% enddocs %}\n\n{% docs last_name %}\nUser's last name\n{% enddocs %}\n\n{% docs voter_registration_status %}\nUser's registration status. (e.g. registration_complete, confirmed, uncertain) \n{% enddocs %}\n\n{% docs finish_with_state %}\nIf the registrant was eligible to use and passed through to complete their registration with their state\u2019s OVR system, it will be indicated in this field (direct quote from Rock-The-Vote documentation). Yes/No value in field.\n{% enddocs %}\n\n{% docs reportback_volume %}\nThis field returns 1 if non voter-reg action, since campaigns team only counts those a 1 reportback. If voter-reg action, we want to count quantity of post as number of registered voters.\n{% enddocs %}\n\n{% docs address_street_1 %}\nFirst line of user's street address\n{% enddocs %}\n\n{% docs address_street_2 %}\nSecond line of user's street address\n{% enddocs %}\n\n{% docs city %}\nUser's city\n{% enddocs %}\n\n{% docs state %}\nUser's state\n{% enddocs %}\n\n{% docs country %}\nUser's country\n{% enddocs %}\n\n{% docs language %}\nUser's language\n{% enddocs %}\n\n{% docs cio_status %}\nStatus of user from CIO. (e.g. customer_subscribed, customer_unsubscribed)\n{% enddocs %}\n\n{% docs cio_status_timestamp %}\nTimestamp when users's status was updated.\n{% enddocs %}\n\n{% docs sms_status %}\nCurrent SMS status. (e.g. undeliverable, unknown)\n{% enddocs %}\n\n{% docs source_detail %}\nDetails of the origin of the user. (e.g. tell_a_friend, other, opt_in_path/197981)\n{% enddocs %}\n\n{% docs badges %}\nWhether the user has any badges. \n{% enddocs %}\n\n{% docs refer_friends %}\nWhether the user is a part of the refer a friend campaign. \n{% enddocs %}\n\n{% docs subscribed_member %}\nWhether the user is subscribed. \n{% enddocs %}\n\n{% docs last_updated_at %}\nTimestamp when users's was updated.\n{% enddocs %}\n\n{% docs school_id %}\nUnique identifier for the user's school. This info comes from the school finder.\n{% enddocs %}\n\n{% docs newsletter_topic %}\nNewsletter topic. (e.g. community, lifestyle)\n{% enddocs %}\n\n{% docs user_agent %}\nFull user agent string for a user's browser (e.g. \"Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:24.0) Gecko/20100101 Firefox/24.0\")\n{% enddocs %}\n\n{% docs drupal_id %}\nOld Drupal user ID\n{% enddocs %}\n\n{% docs campaigns %}\nCampaigns a user is signed up for.\n{% enddocs %}\n\n{% docs audit %}\nA very useful field with data containing information about changes to a user, e.g. timestamps when the user subscribed and unsubscribed.\n{% enddocs %}\n\n{% docs voting_plan_status %}\nThe indication of the user's plan to vote, e.g. voting, not_voting, cant_vote\n{% enddocs %}\n\n{% docs voting_plan_time_of_day %}\nThe time of day when the user plans to vote, e.g morning, afternoon, evening\n{% enddocs %}\n\n{% docs voting_plan_method_of_transport %}\nHow the user plans to get to their polling place. e.g. walk, drive\n{% enddocs %}\n\n{% docs voting_plan_attending_with %}\nWith Whom the user plans to go voting, e.g. family, friends, alone\n{% enddocs %}\n\n{% docs feature_flags %}\nJSON containing info on features like badges and refer-a-friend.\n{% enddocs %}\n\n{% docs dbt_updated_at %}\nDBT snapshot table data. The updated_at timestamp of the source record when this snapshot row was inserted.\n{% enddocs %}\n\n{% docs dbt_scd_id %}\nDBT snapshot table data. A unique key generated for each snapshotted record.\n{% enddocs %}\n\n{% docs dbt_valid_from %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this snapshot row was first inserted\n{% enddocs %}\n\n{% docs dbt_valid_to %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this row row became invalidated.\n{% enddocs %}\n\n{% docs google_id %}\nUser's Google ID obtained from login.\n{% enddocs %}\n\n{% docs causes %}\nCauses in which a user is interested. e.g. animal welfare, education, mental_health\n{% enddocs %}\n\n{% docs email_subscription_status %}\nEmail subscription status of the user\n{% enddocs %}\n\n{% docs role %}\nUser's role, e.g. user, staff\n{% enddocs %}\n\n{% docs cio_backfilled %}\nWhether this user's data was backfilled from CIO\n{% enddocs %}\n\n{% docs addr_source %}\nWhere the user submitted their address, e.g. sms, GDPR\n{% enddocs %}\n\n{% docs email_subscription_topics %}\nEmail subscription topics correspond to categories in CIO in which the user is interested. e.g. lifestyle, community, scholarship\n{% enddocs %}\n\n{% docs sms_paused %}\nWhether we've paused sending sms messages to the user.\n{% enddocs %}\n\n\n\n\n", "name": "event_source", "unique_id": "ds_dbt.event_source", "block_contents": "Application source for event (eg. Phoenix, Northstar)"}, "ds_dbt.event_datetime": {"root_path": "/Users/mrich/projects/quasar/quasar/dbt", "resource_type": "docs", "path": "schema.md", "original_file_path": "models/schema.md", "package_name": "ds_dbt", "file_contents": "\n{% docs click_id %}\nThis is a unique identifier for each click\n{% enddocs %}\n\n{% docs click_time %}\nTimestamp when user clicked.\n{% enddocs %}\n\n{% docs shortened %}\nShortened URL\n{% enddocs %}\n\n{% docs target_url %}\nURL where the user will be directed\n{% enddocs %}\n\n{% docs broadcast_id %}\nID of the broadcast that generated the shortened URL\n{% enddocs %}\n\n{% docs source %}\nSource of the URL (e.g. SMS, web), origin of the post (e.g. phoenix-web, phoenix-ashes, sms), or source where user was acquired. (e.g. sms, phoenix-next)\n{% enddocs %}\n\n{% docs interaction_type %}\nHow the user interacted with the link (e.g. preview, click)\n{% enddocs %}\n\n{% docs id %}\nUnique identifier for the post\n{% enddocs %}\n\n{% docs type %}\nType of post (e.g. photo)\n{% enddocs %}\n\n{% docs action %}\nPost action (e.g. DefendDreamers_Nov9_CongressCalls, GunViolence2018_Feb15_ParklandResponse)\n{% enddocs %}\n\n{% docs status %}\nPost status (e.g. accepted, rejected)\n{% enddocs %}\n\n{% docs quantity %}\nNumerical quantity of items specified in the call to action (e.g. 10, 200)\n{% enddocs %}\n\n{% docs source_bucket %}\nGrouping bucket for origin of the post (e.g. web, sms) \n{% enddocs %}\n\n{% docs created_at %}\nWhen the item was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs updated_at %}\nWhen the item was updated in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs text %}\nText of the post (e.g. \"Zoo animals and a super hero trying to help too!\") \n{% enddocs %}\n\n{% docs signup_id %}\nUnique identifier for the signup \n{% enddocs %}\n\n{% docs post_class %}\nClass of the signup (e.g. \"photo - default\", \"phone-call - DefendDreamers_Jan16_BothBodies\")\n{% enddocs %}\n\n{% docs is_accepted %}\nWhether the post has been accepted to be displayed to the public on the website\n{% enddocs %}\n\n{% docs action_id %}\nInternal identifier of the action \n{% enddocs %}\n\n{% docs location %}\nLocation where the action takes place (e.g. US-NY)\n{% enddocs %}\n\n{% docs postal_code %}\nPostal code where the action takes place\n{% enddocs %}\n\n{% docs is_reportback %}\nWhether the post is a reportback. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs civic_action %}\nWhether the post is a Civic Action. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs scholarship_entry %}\nWhether the post is a Scholarship Entry. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs why_participated %}\nWhy the user participated in this action. Entered by the user.\n{% enddocs %}\n\n{% docs details %}\nDetails about the post. Contains contentfulId and other information (e.g. {\"campaignContentfulId\":\"6ATBgGEQEeJoIcxs1qbwaC\"})\n{% enddocs %}\n\n{% docs email %}\nEmail address of the user.\n{% enddocs %}\n\n{% docs source_details %}\nDetails about the source of the item. This is sometimes represented as a JSON object, and for other tables like Turbovote its represented as a string. (e.g. \"{\"contentful_id\":\"3CTLlXfbwtz1FOMpl31SKV\",\"utm_source\":\"scholarship_listing\",\"utm_medium\":\"referral\",\"utm_campaign\":\"fastweb_2019_08\"}\", newsletter_456)\n{% enddocs %}\n\n{% docs campaign_id %}\nThis is a unique identifier for the campaign\n{% enddocs %}\n\n{% docs campaign_run_id %}\nUnique identifier for the campaign run\n{% enddocs %}\n\n{% docs campaign_name %}\nName of the campaign\n{% enddocs %}\n\n{% docs campaign_cause %}\nCampaign cause (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_run_start_date %}\nStart date of the campaign run\n{% enddocs %}\n\n{% docs campaign_run_end_date %}\nEnd date of the campaign run\n{% enddocs %}\n\n{% docs campaign_created_date %}\nWhen the campaign was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs campaign_node_id %}\nInternal unique node id for the campaign\n{% enddocs %}\n\n{% docs campaign_node_id_title %}\nCampaign title\n{% enddocs %}\n\n{% docs campaign_run_id_title %}\nTitle of the campaign run\n{% enddocs %}\n\n{% docs campaign_action_type %}\nCampaign action type (eg. Make Something, Share Something)\n{% enddocs %}\n\n{% docs campaign_cause_type %}\nCampaign cause type (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_noun %}\nNoun applicable to the user's action\n{% enddocs %}\n\n{% docs campaign_verb %}\nVerb describing the action the user should take\n{% enddocs %}\n\n{% docs campaign_cta %}\nCampaign's call to action\n{% enddocs %}\n\n{% docs campaign_language %}\n\"Language in which the campaign is available\"\n{% enddocs %}\n\n{% docs agent_id %}\nIf set, the content type of the picture the member is sending us. Exp. image/png.\n{% enddocs %}\n\n{% docs attachment_content_type %}\nIf set, the handle of the Front agent this outbound support message is from.\n{% enddocs %}\n\n{% docs topic %}\nHolds a reference to the **last** campaign topic the member's conversation was in. This is useful to allow members to talk to Gambit and get quick responses (through Rivescript), without Gambit completely forgetting what state the member's interaction with a campaign topic was in.\n{% enddocs %}\n\n{% docs action_serial_id %}\nSerial id for the user's action. Depends on the source of the action. May be the bertly click id, sms message id, etc.\n{% enddocs %}\n\n{% docs channel %}\nChannel for the user's action. Depends on the source of the action. (e.g. web, sms)\n{% enddocs %}\n\n{% docs first_action_month %}\nMonth during which the user took their first action. \n{% enddocs %}\n\n{% docs event_id %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs event_source %}\nApplication source for event (eg. Phoenix, Northstar)\n{% enddocs %}\n\n{% docs event_datetime %}\nWhen the event occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs event_name %}\nName of the event (eg. northstar_submitted_register, https://docs.google.com/spreadsheets/d/1lm-fGrIm85nUTxSojqyCt_Ehmm1zEbViFhKpxcJiz1A/edit#gid=406441516)\n{% enddocs %}\n\n{% docs event_type %}\nType of event (pv = 'Page View', se = 'Structured Event')\n{% enddocs %}\n\n{% docs host %}\nURL host where event occurred (eg. www.dosomething.org or identity.dosomething.org)\n{% enddocs %}\n\n{% docs path %}\nURL path event occurred at (eg. /login or /us/campaigns/huddle-for-heroes)\n{% enddocs %}\n\n{% docs query_parameters %}\nOptional query parameters for the request (eg. query=huddle)\n{% enddocs %}\n\n{% docs se_category %}\nCategory of event (eg. focused_field, authentication) - Custom structured event\n{% enddocs %}\n\n{% docs se_action %}\nAction performed / event name (eg. form_submitted, action_failed) - Custom structured event\n{% enddocs %}\n\n{% docs se_label %}\nThe object of the action (eg. first_name, register, voter_reg_status) - Custom structured event\n{% enddocs %}\n\n{% docs session_id %}\nUnique identifier of the user's session\n{% enddocs %}\n\n{% docs session_counter %}\nHow many sessions a user has started\n{% enddocs %}\n\n{% docs browser_size %}\nWhich type of browser a user is using (eg. Mobile, Desktop)\n{% enddocs %}\n\n{% docs northstar_id %}\nThe Northstar ID of the user who generated the event\n{% enddocs %}\n\n{% docs device_id %}\nID of the device used\n{% enddocs %}\n\n{% docs referrer_host %}\nURL host of the referring site (eg. google.com)\n{% enddocs %}\n\n{% docs referrer_path %}\nURL path from referring site (eg. /10-stats-on-teen-drug-and-alcohol-use/)\n{% enddocs %}\n\n{% docs referrer_source %}\nReferrer source name (eg. Google, Facebook)\n{% enddocs %}\n\n{% docs utm_source %}\nTracks where the traffic is coming from. (eg. scholarship_listing, Facebook)\n{% enddocs %}\n\n{% docs utm_medium %}\nHow the traffic got to the platform (eg. referral, CPC)\n{% enddocs %}\n\n{% docs utm_campaign %}\nTracks which campaign the traffic was generated by. Shows up in Google Analytics as Campaign Name (eg. editorial_newsletter)\n{% enddocs %}\n\n{% docs url %}\nURL of campaign (eg. https://dosome.click/nyn5m7)\n{% enddocs %}\n\n{% docs modal_type %}\nNULL or SURVEY_MODAL\n{% enddocs %}\n\n{% docs landing_datetime %}\nWhen the session started in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs ending_datetime %}\nWhen the session ended in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs session_duration_seconds %}\nSession duration in seconds\n{% enddocs %}\n\n{% docs num_pages_views %}\nNumber of pages viewed in session\n{% enddocs %}\n\n{% docs landing_page %}\nFirst page the user viewed in the session (eg. /us/facts/11-facts-about-bp-oil-spill)\n{% enddocs %}\n\n{% docs exit_page %}\n\"Which page the user ended or exited their session from (eg. /us/campaigns/green-your-getaway)\"\n{% enddocs %}\n\n{% docs days_since_last_session %}\n\"Days since their last session.\"\n{% enddocs %}\n\n{% docs post_type %}\nType of post, (e.g. photo, voter-reg)\n{% enddocs %}\n\n{% docs noun %}\nNoun that corresponds to the item in the call to action that was delivered. (e.g. drawings, tweets)\n{% enddocs %}\n\n{% docs verb %}\nVerb corresponding to the action the user took. (e.g. shared, sent, taken)\n{% enddocs %}\n\n{% docs deleted_at %}\nDate time in UTC when a user deleted their post.\n{% enddocs %}\n\n{% docs _fivetran_deleted %}\nMarks rows that were deleted in the source table\n{% enddocs %}\n\n{% docs _fivetran_synced %}\n(UTC timestamp) keeps track of when each row was last successfully synced\n{% enddocs %}\n\n{% docs reportback %}\nWhether the post is a reportback \n{% enddocs %}\n\n{% docs active %}\nWhether the user is active \n{% enddocs %}\n\n{% docs anonymous %}\nWhether the user is anonymous when making the post \n{% enddocs %}\n\n{% docs callpower_campaign_id %}\nUnique ID corresponding to the Callpower campaign. Callpower allows users to record messages for their representatives.\n{% enddocs %}\n\n{% docs quiz %}\nWhether the post is a quiz \n{% enddocs %}\n\n{% docs action_type %}\nType of action the user took. (e.g. share-something, donate-something)\n{% enddocs %}\n\n{% docs online %}\nWhether the action is a online as opposed to IRL.\n{% enddocs %}\n\n{% docs time_commitment %}\nEstimated time required to do the action (e.g. 3.0+, <0.5)\n{% enddocs %}\n\n{% docs num_signups %}\nQuantity of campaign signups\n{% enddocs %}\n\n{% docs most_recent_signup %}\nTimestamp of the most recent signup in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs num_rbs %}\nQuantity of reportbacks for the user\n{% enddocs %}\n\n{% docs total_quantity %}\nTotal quantity of items in reportbacks\n{% enddocs %}\n\n{% docs most_recent_rb %}\nWhen the most recent reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs first_rb %}\nWhen the first reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs avg_time_betw_rbs %}\nCalculated average time between reportbacks.\n{% enddocs %}\n\n{% docs avg_days_next_action_after_rb %}\nCalculated average days until next action after reportback\n{% enddocs %}\n\n{% docs days_to_next_action_after_last_rb %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs most_recent_mam_action %}\nMost recent monthly active member qualifying action in UTC (eg. 2018-01-01 12:00:00).\n{% enddocs %}\n\n{% docs most_recent_email_open %}\nMost recent email open in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs most_recent_all_actions %}\nMost recent timestamp of any action in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs last_action_is_rb %}\nWhether the last action the user took was a reportback\n{% enddocs %}\n\n{% docs days_since_last_action %}\nDays since the user's last action\n{% enddocs %}\n\n{% docs time_to_first_rb %}\nHow much time after registering until the user's first reportback\n{% enddocs %}\n\n{% docs sms_unsubscribed_at %}\nTimestamp of when user unsubscribed from SMS messaging\n{% enddocs %}\n\n{% docs user_unsubscribed_at %}\nTimestamp of when user unsubscribed from email or sms\n{% enddocs %}\n\n{% docs voter_reg_acquisition %}\nWhether the user was an acquisition through voter registration efforts. \n{% enddocs %}\n\n{% docs last_logged_in %}\nDate time in UTC when user last logged in to Northstar\n{% enddocs %}\n\n{% docs last_accessed %}\nDate time in UTC when user last access the website\n{% enddocs %}\n\n{% docs last_messaged_at %}\nDate time in UTC when user was last sent a message via SMS or email\n{% enddocs %}\n\n{% docs facebook_id %}\nUser's facebook id\n{% enddocs %}\n\n{% docs mobile %}\nUsers's mobile phone number\n{% enddocs %}\n\n{% docs birthdate %}\nUser's birthdate\n{% enddocs %}\n\n{% docs first_name %}\nUser's first name\n{% enddocs %}\n\n{% docs last_name %}\nUser's last name\n{% enddocs %}\n\n{% docs voter_registration_status %}\nUser's registration status. (e.g. registration_complete, confirmed, uncertain) \n{% enddocs %}\n\n{% docs finish_with_state %}\nIf the registrant was eligible to use and passed through to complete their registration with their state\u2019s OVR system, it will be indicated in this field (direct quote from Rock-The-Vote documentation). Yes/No value in field.\n{% enddocs %}\n\n{% docs reportback_volume %}\nThis field returns 1 if non voter-reg action, since campaigns team only counts those a 1 reportback. If voter-reg action, we want to count quantity of post as number of registered voters.\n{% enddocs %}\n\n{% docs address_street_1 %}\nFirst line of user's street address\n{% enddocs %}\n\n{% docs address_street_2 %}\nSecond line of user's street address\n{% enddocs %}\n\n{% docs city %}\nUser's city\n{% enddocs %}\n\n{% docs state %}\nUser's state\n{% enddocs %}\n\n{% docs country %}\nUser's country\n{% enddocs %}\n\n{% docs language %}\nUser's language\n{% enddocs %}\n\n{% docs cio_status %}\nStatus of user from CIO. (e.g. customer_subscribed, customer_unsubscribed)\n{% enddocs %}\n\n{% docs cio_status_timestamp %}\nTimestamp when users's status was updated.\n{% enddocs %}\n\n{% docs sms_status %}\nCurrent SMS status. (e.g. undeliverable, unknown)\n{% enddocs %}\n\n{% docs source_detail %}\nDetails of the origin of the user. (e.g. tell_a_friend, other, opt_in_path/197981)\n{% enddocs %}\n\n{% docs badges %}\nWhether the user has any badges. \n{% enddocs %}\n\n{% docs refer_friends %}\nWhether the user is a part of the refer a friend campaign. \n{% enddocs %}\n\n{% docs subscribed_member %}\nWhether the user is subscribed. \n{% enddocs %}\n\n{% docs last_updated_at %}\nTimestamp when users's was updated.\n{% enddocs %}\n\n{% docs school_id %}\nUnique identifier for the user's school. This info comes from the school finder.\n{% enddocs %}\n\n{% docs newsletter_topic %}\nNewsletter topic. (e.g. community, lifestyle)\n{% enddocs %}\n\n{% docs user_agent %}\nFull user agent string for a user's browser (e.g. \"Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:24.0) Gecko/20100101 Firefox/24.0\")\n{% enddocs %}\n\n{% docs drupal_id %}\nOld Drupal user ID\n{% enddocs %}\n\n{% docs campaigns %}\nCampaigns a user is signed up for.\n{% enddocs %}\n\n{% docs audit %}\nA very useful field with data containing information about changes to a user, e.g. timestamps when the user subscribed and unsubscribed.\n{% enddocs %}\n\n{% docs voting_plan_status %}\nThe indication of the user's plan to vote, e.g. voting, not_voting, cant_vote\n{% enddocs %}\n\n{% docs voting_plan_time_of_day %}\nThe time of day when the user plans to vote, e.g morning, afternoon, evening\n{% enddocs %}\n\n{% docs voting_plan_method_of_transport %}\nHow the user plans to get to their polling place. e.g. walk, drive\n{% enddocs %}\n\n{% docs voting_plan_attending_with %}\nWith Whom the user plans to go voting, e.g. family, friends, alone\n{% enddocs %}\n\n{% docs feature_flags %}\nJSON containing info on features like badges and refer-a-friend.\n{% enddocs %}\n\n{% docs dbt_updated_at %}\nDBT snapshot table data. The updated_at timestamp of the source record when this snapshot row was inserted.\n{% enddocs %}\n\n{% docs dbt_scd_id %}\nDBT snapshot table data. A unique key generated for each snapshotted record.\n{% enddocs %}\n\n{% docs dbt_valid_from %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this snapshot row was first inserted\n{% enddocs %}\n\n{% docs dbt_valid_to %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this row row became invalidated.\n{% enddocs %}\n\n{% docs google_id %}\nUser's Google ID obtained from login.\n{% enddocs %}\n\n{% docs causes %}\nCauses in which a user is interested. e.g. animal welfare, education, mental_health\n{% enddocs %}\n\n{% docs email_subscription_status %}\nEmail subscription status of the user\n{% enddocs %}\n\n{% docs role %}\nUser's role, e.g. user, staff\n{% enddocs %}\n\n{% docs cio_backfilled %}\nWhether this user's data was backfilled from CIO\n{% enddocs %}\n\n{% docs addr_source %}\nWhere the user submitted their address, e.g. sms, GDPR\n{% enddocs %}\n\n{% docs email_subscription_topics %}\nEmail subscription topics correspond to categories in CIO in which the user is interested. e.g. lifestyle, community, scholarship\n{% enddocs %}\n\n{% docs sms_paused %}\nWhether we've paused sending sms messages to the user.\n{% enddocs %}\n\n\n\n\n", "name": "event_datetime", "unique_id": "ds_dbt.event_datetime", "block_contents": "When the event occurred in UTC (eg. 2018-01-01 12:00:00)"}, "ds_dbt.event_name": {"root_path": "/Users/mrich/projects/quasar/quasar/dbt", "resource_type": "docs", "path": "schema.md", "original_file_path": "models/schema.md", "package_name": "ds_dbt", "file_contents": "\n{% docs click_id %}\nThis is a unique identifier for each click\n{% enddocs %}\n\n{% docs click_time %}\nTimestamp when user clicked.\n{% enddocs %}\n\n{% docs shortened %}\nShortened URL\n{% enddocs %}\n\n{% docs target_url %}\nURL where the user will be directed\n{% enddocs %}\n\n{% docs broadcast_id %}\nID of the broadcast that generated the shortened URL\n{% enddocs %}\n\n{% docs source %}\nSource of the URL (e.g. SMS, web), origin of the post (e.g. phoenix-web, phoenix-ashes, sms), or source where user was acquired. (e.g. sms, phoenix-next)\n{% enddocs %}\n\n{% docs interaction_type %}\nHow the user interacted with the link (e.g. preview, click)\n{% enddocs %}\n\n{% docs id %}\nUnique identifier for the post\n{% enddocs %}\n\n{% docs type %}\nType of post (e.g. photo)\n{% enddocs %}\n\n{% docs action %}\nPost action (e.g. DefendDreamers_Nov9_CongressCalls, GunViolence2018_Feb15_ParklandResponse)\n{% enddocs %}\n\n{% docs status %}\nPost status (e.g. accepted, rejected)\n{% enddocs %}\n\n{% docs quantity %}\nNumerical quantity of items specified in the call to action (e.g. 10, 200)\n{% enddocs %}\n\n{% docs source_bucket %}\nGrouping bucket for origin of the post (e.g. web, sms) \n{% enddocs %}\n\n{% docs created_at %}\nWhen the item was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs updated_at %}\nWhen the item was updated in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs text %}\nText of the post (e.g. \"Zoo animals and a super hero trying to help too!\") \n{% enddocs %}\n\n{% docs signup_id %}\nUnique identifier for the signup \n{% enddocs %}\n\n{% docs post_class %}\nClass of the signup (e.g. \"photo - default\", \"phone-call - DefendDreamers_Jan16_BothBodies\")\n{% enddocs %}\n\n{% docs is_accepted %}\nWhether the post has been accepted to be displayed to the public on the website\n{% enddocs %}\n\n{% docs action_id %}\nInternal identifier of the action \n{% enddocs %}\n\n{% docs location %}\nLocation where the action takes place (e.g. US-NY)\n{% enddocs %}\n\n{% docs postal_code %}\nPostal code where the action takes place\n{% enddocs %}\n\n{% docs is_reportback %}\nWhether the post is a reportback. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs civic_action %}\nWhether the post is a Civic Action. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs scholarship_entry %}\nWhether the post is a Scholarship Entry. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs why_participated %}\nWhy the user participated in this action. Entered by the user.\n{% enddocs %}\n\n{% docs details %}\nDetails about the post. Contains contentfulId and other information (e.g. {\"campaignContentfulId\":\"6ATBgGEQEeJoIcxs1qbwaC\"})\n{% enddocs %}\n\n{% docs email %}\nEmail address of the user.\n{% enddocs %}\n\n{% docs source_details %}\nDetails about the source of the item. This is sometimes represented as a JSON object, and for other tables like Turbovote its represented as a string. (e.g. \"{\"contentful_id\":\"3CTLlXfbwtz1FOMpl31SKV\",\"utm_source\":\"scholarship_listing\",\"utm_medium\":\"referral\",\"utm_campaign\":\"fastweb_2019_08\"}\", newsletter_456)\n{% enddocs %}\n\n{% docs campaign_id %}\nThis is a unique identifier for the campaign\n{% enddocs %}\n\n{% docs campaign_run_id %}\nUnique identifier for the campaign run\n{% enddocs %}\n\n{% docs campaign_name %}\nName of the campaign\n{% enddocs %}\n\n{% docs campaign_cause %}\nCampaign cause (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_run_start_date %}\nStart date of the campaign run\n{% enddocs %}\n\n{% docs campaign_run_end_date %}\nEnd date of the campaign run\n{% enddocs %}\n\n{% docs campaign_created_date %}\nWhen the campaign was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs campaign_node_id %}\nInternal unique node id for the campaign\n{% enddocs %}\n\n{% docs campaign_node_id_title %}\nCampaign title\n{% enddocs %}\n\n{% docs campaign_run_id_title %}\nTitle of the campaign run\n{% enddocs %}\n\n{% docs campaign_action_type %}\nCampaign action type (eg. Make Something, Share Something)\n{% enddocs %}\n\n{% docs campaign_cause_type %}\nCampaign cause type (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_noun %}\nNoun applicable to the user's action\n{% enddocs %}\n\n{% docs campaign_verb %}\nVerb describing the action the user should take\n{% enddocs %}\n\n{% docs campaign_cta %}\nCampaign's call to action\n{% enddocs %}\n\n{% docs campaign_language %}\n\"Language in which the campaign is available\"\n{% enddocs %}\n\n{% docs agent_id %}\nIf set, the content type of the picture the member is sending us. Exp. image/png.\n{% enddocs %}\n\n{% docs attachment_content_type %}\nIf set, the handle of the Front agent this outbound support message is from.\n{% enddocs %}\n\n{% docs topic %}\nHolds a reference to the **last** campaign topic the member's conversation was in. This is useful to allow members to talk to Gambit and get quick responses (through Rivescript), without Gambit completely forgetting what state the member's interaction with a campaign topic was in.\n{% enddocs %}\n\n{% docs action_serial_id %}\nSerial id for the user's action. Depends on the source of the action. May be the bertly click id, sms message id, etc.\n{% enddocs %}\n\n{% docs channel %}\nChannel for the user's action. Depends on the source of the action. (e.g. web, sms)\n{% enddocs %}\n\n{% docs first_action_month %}\nMonth during which the user took their first action. \n{% enddocs %}\n\n{% docs event_id %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs event_source %}\nApplication source for event (eg. Phoenix, Northstar)\n{% enddocs %}\n\n{% docs event_datetime %}\nWhen the event occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs event_name %}\nName of the event (eg. northstar_submitted_register, https://docs.google.com/spreadsheets/d/1lm-fGrIm85nUTxSojqyCt_Ehmm1zEbViFhKpxcJiz1A/edit#gid=406441516)\n{% enddocs %}\n\n{% docs event_type %}\nType of event (pv = 'Page View', se = 'Structured Event')\n{% enddocs %}\n\n{% docs host %}\nURL host where event occurred (eg. www.dosomething.org or identity.dosomething.org)\n{% enddocs %}\n\n{% docs path %}\nURL path event occurred at (eg. /login or /us/campaigns/huddle-for-heroes)\n{% enddocs %}\n\n{% docs query_parameters %}\nOptional query parameters for the request (eg. query=huddle)\n{% enddocs %}\n\n{% docs se_category %}\nCategory of event (eg. focused_field, authentication) - Custom structured event\n{% enddocs %}\n\n{% docs se_action %}\nAction performed / event name (eg. form_submitted, action_failed) - Custom structured event\n{% enddocs %}\n\n{% docs se_label %}\nThe object of the action (eg. first_name, register, voter_reg_status) - Custom structured event\n{% enddocs %}\n\n{% docs session_id %}\nUnique identifier of the user's session\n{% enddocs %}\n\n{% docs session_counter %}\nHow many sessions a user has started\n{% enddocs %}\n\n{% docs browser_size %}\nWhich type of browser a user is using (eg. Mobile, Desktop)\n{% enddocs %}\n\n{% docs northstar_id %}\nThe Northstar ID of the user who generated the event\n{% enddocs %}\n\n{% docs device_id %}\nID of the device used\n{% enddocs %}\n\n{% docs referrer_host %}\nURL host of the referring site (eg. google.com)\n{% enddocs %}\n\n{% docs referrer_path %}\nURL path from referring site (eg. /10-stats-on-teen-drug-and-alcohol-use/)\n{% enddocs %}\n\n{% docs referrer_source %}\nReferrer source name (eg. Google, Facebook)\n{% enddocs %}\n\n{% docs utm_source %}\nTracks where the traffic is coming from. (eg. scholarship_listing, Facebook)\n{% enddocs %}\n\n{% docs utm_medium %}\nHow the traffic got to the platform (eg. referral, CPC)\n{% enddocs %}\n\n{% docs utm_campaign %}\nTracks which campaign the traffic was generated by. Shows up in Google Analytics as Campaign Name (eg. editorial_newsletter)\n{% enddocs %}\n\n{% docs url %}\nURL of campaign (eg. https://dosome.click/nyn5m7)\n{% enddocs %}\n\n{% docs modal_type %}\nNULL or SURVEY_MODAL\n{% enddocs %}\n\n{% docs landing_datetime %}\nWhen the session started in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs ending_datetime %}\nWhen the session ended in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs session_duration_seconds %}\nSession duration in seconds\n{% enddocs %}\n\n{% docs num_pages_views %}\nNumber of pages viewed in session\n{% enddocs %}\n\n{% docs landing_page %}\nFirst page the user viewed in the session (eg. /us/facts/11-facts-about-bp-oil-spill)\n{% enddocs %}\n\n{% docs exit_page %}\n\"Which page the user ended or exited their session from (eg. /us/campaigns/green-your-getaway)\"\n{% enddocs %}\n\n{% docs days_since_last_session %}\n\"Days since their last session.\"\n{% enddocs %}\n\n{% docs post_type %}\nType of post, (e.g. photo, voter-reg)\n{% enddocs %}\n\n{% docs noun %}\nNoun that corresponds to the item in the call to action that was delivered. (e.g. drawings, tweets)\n{% enddocs %}\n\n{% docs verb %}\nVerb corresponding to the action the user took. (e.g. shared, sent, taken)\n{% enddocs %}\n\n{% docs deleted_at %}\nDate time in UTC when a user deleted their post.\n{% enddocs %}\n\n{% docs _fivetran_deleted %}\nMarks rows that were deleted in the source table\n{% enddocs %}\n\n{% docs _fivetran_synced %}\n(UTC timestamp) keeps track of when each row was last successfully synced\n{% enddocs %}\n\n{% docs reportback %}\nWhether the post is a reportback \n{% enddocs %}\n\n{% docs active %}\nWhether the user is active \n{% enddocs %}\n\n{% docs anonymous %}\nWhether the user is anonymous when making the post \n{% enddocs %}\n\n{% docs callpower_campaign_id %}\nUnique ID corresponding to the Callpower campaign. Callpower allows users to record messages for their representatives.\n{% enddocs %}\n\n{% docs quiz %}\nWhether the post is a quiz \n{% enddocs %}\n\n{% docs action_type %}\nType of action the user took. (e.g. share-something, donate-something)\n{% enddocs %}\n\n{% docs online %}\nWhether the action is a online as opposed to IRL.\n{% enddocs %}\n\n{% docs time_commitment %}\nEstimated time required to do the action (e.g. 3.0+, <0.5)\n{% enddocs %}\n\n{% docs num_signups %}\nQuantity of campaign signups\n{% enddocs %}\n\n{% docs most_recent_signup %}\nTimestamp of the most recent signup in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs num_rbs %}\nQuantity of reportbacks for the user\n{% enddocs %}\n\n{% docs total_quantity %}\nTotal quantity of items in reportbacks\n{% enddocs %}\n\n{% docs most_recent_rb %}\nWhen the most recent reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs first_rb %}\nWhen the first reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs avg_time_betw_rbs %}\nCalculated average time between reportbacks.\n{% enddocs %}\n\n{% docs avg_days_next_action_after_rb %}\nCalculated average days until next action after reportback\n{% enddocs %}\n\n{% docs days_to_next_action_after_last_rb %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs most_recent_mam_action %}\nMost recent monthly active member qualifying action in UTC (eg. 2018-01-01 12:00:00).\n{% enddocs %}\n\n{% docs most_recent_email_open %}\nMost recent email open in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs most_recent_all_actions %}\nMost recent timestamp of any action in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs last_action_is_rb %}\nWhether the last action the user took was a reportback\n{% enddocs %}\n\n{% docs days_since_last_action %}\nDays since the user's last action\n{% enddocs %}\n\n{% docs time_to_first_rb %}\nHow much time after registering until the user's first reportback\n{% enddocs %}\n\n{% docs sms_unsubscribed_at %}\nTimestamp of when user unsubscribed from SMS messaging\n{% enddocs %}\n\n{% docs user_unsubscribed_at %}\nTimestamp of when user unsubscribed from email or sms\n{% enddocs %}\n\n{% docs voter_reg_acquisition %}\nWhether the user was an acquisition through voter registration efforts. \n{% enddocs %}\n\n{% docs last_logged_in %}\nDate time in UTC when user last logged in to Northstar\n{% enddocs %}\n\n{% docs last_accessed %}\nDate time in UTC when user last access the website\n{% enddocs %}\n\n{% docs last_messaged_at %}\nDate time in UTC when user was last sent a message via SMS or email\n{% enddocs %}\n\n{% docs facebook_id %}\nUser's facebook id\n{% enddocs %}\n\n{% docs mobile %}\nUsers's mobile phone number\n{% enddocs %}\n\n{% docs birthdate %}\nUser's birthdate\n{% enddocs %}\n\n{% docs first_name %}\nUser's first name\n{% enddocs %}\n\n{% docs last_name %}\nUser's last name\n{% enddocs %}\n\n{% docs voter_registration_status %}\nUser's registration status. (e.g. registration_complete, confirmed, uncertain) \n{% enddocs %}\n\n{% docs finish_with_state %}\nIf the registrant was eligible to use and passed through to complete their registration with their state\u2019s OVR system, it will be indicated in this field (direct quote from Rock-The-Vote documentation). Yes/No value in field.\n{% enddocs %}\n\n{% docs reportback_volume %}\nThis field returns 1 if non voter-reg action, since campaigns team only counts those a 1 reportback. If voter-reg action, we want to count quantity of post as number of registered voters.\n{% enddocs %}\n\n{% docs address_street_1 %}\nFirst line of user's street address\n{% enddocs %}\n\n{% docs address_street_2 %}\nSecond line of user's street address\n{% enddocs %}\n\n{% docs city %}\nUser's city\n{% enddocs %}\n\n{% docs state %}\nUser's state\n{% enddocs %}\n\n{% docs country %}\nUser's country\n{% enddocs %}\n\n{% docs language %}\nUser's language\n{% enddocs %}\n\n{% docs cio_status %}\nStatus of user from CIO. (e.g. customer_subscribed, customer_unsubscribed)\n{% enddocs %}\n\n{% docs cio_status_timestamp %}\nTimestamp when users's status was updated.\n{% enddocs %}\n\n{% docs sms_status %}\nCurrent SMS status. (e.g. undeliverable, unknown)\n{% enddocs %}\n\n{% docs source_detail %}\nDetails of the origin of the user. (e.g. tell_a_friend, other, opt_in_path/197981)\n{% enddocs %}\n\n{% docs badges %}\nWhether the user has any badges. \n{% enddocs %}\n\n{% docs refer_friends %}\nWhether the user is a part of the refer a friend campaign. \n{% enddocs %}\n\n{% docs subscribed_member %}\nWhether the user is subscribed. \n{% enddocs %}\n\n{% docs last_updated_at %}\nTimestamp when users's was updated.\n{% enddocs %}\n\n{% docs school_id %}\nUnique identifier for the user's school. This info comes from the school finder.\n{% enddocs %}\n\n{% docs newsletter_topic %}\nNewsletter topic. (e.g. community, lifestyle)\n{% enddocs %}\n\n{% docs user_agent %}\nFull user agent string for a user's browser (e.g. \"Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:24.0) Gecko/20100101 Firefox/24.0\")\n{% enddocs %}\n\n{% docs drupal_id %}\nOld Drupal user ID\n{% enddocs %}\n\n{% docs campaigns %}\nCampaigns a user is signed up for.\n{% enddocs %}\n\n{% docs audit %}\nA very useful field with data containing information about changes to a user, e.g. timestamps when the user subscribed and unsubscribed.\n{% enddocs %}\n\n{% docs voting_plan_status %}\nThe indication of the user's plan to vote, e.g. voting, not_voting, cant_vote\n{% enddocs %}\n\n{% docs voting_plan_time_of_day %}\nThe time of day when the user plans to vote, e.g morning, afternoon, evening\n{% enddocs %}\n\n{% docs voting_plan_method_of_transport %}\nHow the user plans to get to their polling place. e.g. walk, drive\n{% enddocs %}\n\n{% docs voting_plan_attending_with %}\nWith Whom the user plans to go voting, e.g. family, friends, alone\n{% enddocs %}\n\n{% docs feature_flags %}\nJSON containing info on features like badges and refer-a-friend.\n{% enddocs %}\n\n{% docs dbt_updated_at %}\nDBT snapshot table data. The updated_at timestamp of the source record when this snapshot row was inserted.\n{% enddocs %}\n\n{% docs dbt_scd_id %}\nDBT snapshot table data. A unique key generated for each snapshotted record.\n{% enddocs %}\n\n{% docs dbt_valid_from %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this snapshot row was first inserted\n{% enddocs %}\n\n{% docs dbt_valid_to %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this row row became invalidated.\n{% enddocs %}\n\n{% docs google_id %}\nUser's Google ID obtained from login.\n{% enddocs %}\n\n{% docs causes %}\nCauses in which a user is interested. e.g. animal welfare, education, mental_health\n{% enddocs %}\n\n{% docs email_subscription_status %}\nEmail subscription status of the user\n{% enddocs %}\n\n{% docs role %}\nUser's role, e.g. user, staff\n{% enddocs %}\n\n{% docs cio_backfilled %}\nWhether this user's data was backfilled from CIO\n{% enddocs %}\n\n{% docs addr_source %}\nWhere the user submitted their address, e.g. sms, GDPR\n{% enddocs %}\n\n{% docs email_subscription_topics %}\nEmail subscription topics correspond to categories in CIO in which the user is interested. e.g. lifestyle, community, scholarship\n{% enddocs %}\n\n{% docs sms_paused %}\nWhether we've paused sending sms messages to the user.\n{% enddocs %}\n\n\n\n\n", "name": "event_name", "unique_id": "ds_dbt.event_name", "block_contents": "Name of the event (eg. northstar_submitted_register, https://docs.google.com/spreadsheets/d/1lm-fGrIm85nUTxSojqyCt_Ehmm1zEbViFhKpxcJiz1A/edit#gid=406441516)"}, "ds_dbt.event_type": {"root_path": "/Users/mrich/projects/quasar/quasar/dbt", "resource_type": "docs", "path": "schema.md", "original_file_path": "models/schema.md", "package_name": "ds_dbt", "file_contents": "\n{% docs click_id %}\nThis is a unique identifier for each click\n{% enddocs %}\n\n{% docs click_time %}\nTimestamp when user clicked.\n{% enddocs %}\n\n{% docs shortened %}\nShortened URL\n{% enddocs %}\n\n{% docs target_url %}\nURL where the user will be directed\n{% enddocs %}\n\n{% docs broadcast_id %}\nID of the broadcast that generated the shortened URL\n{% enddocs %}\n\n{% docs source %}\nSource of the URL (e.g. SMS, web), origin of the post (e.g. phoenix-web, phoenix-ashes, sms), or source where user was acquired. (e.g. sms, phoenix-next)\n{% enddocs %}\n\n{% docs interaction_type %}\nHow the user interacted with the link (e.g. preview, click)\n{% enddocs %}\n\n{% docs id %}\nUnique identifier for the post\n{% enddocs %}\n\n{% docs type %}\nType of post (e.g. photo)\n{% enddocs %}\n\n{% docs action %}\nPost action (e.g. DefendDreamers_Nov9_CongressCalls, GunViolence2018_Feb15_ParklandResponse)\n{% enddocs %}\n\n{% docs status %}\nPost status (e.g. accepted, rejected)\n{% enddocs %}\n\n{% docs quantity %}\nNumerical quantity of items specified in the call to action (e.g. 10, 200)\n{% enddocs %}\n\n{% docs source_bucket %}\nGrouping bucket for origin of the post (e.g. web, sms) \n{% enddocs %}\n\n{% docs created_at %}\nWhen the item was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs updated_at %}\nWhen the item was updated in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs text %}\nText of the post (e.g. \"Zoo animals and a super hero trying to help too!\") \n{% enddocs %}\n\n{% docs signup_id %}\nUnique identifier for the signup \n{% enddocs %}\n\n{% docs post_class %}\nClass of the signup (e.g. \"photo - default\", \"phone-call - DefendDreamers_Jan16_BothBodies\")\n{% enddocs %}\n\n{% docs is_accepted %}\nWhether the post has been accepted to be displayed to the public on the website\n{% enddocs %}\n\n{% docs action_id %}\nInternal identifier of the action \n{% enddocs %}\n\n{% docs location %}\nLocation where the action takes place (e.g. US-NY)\n{% enddocs %}\n\n{% docs postal_code %}\nPostal code where the action takes place\n{% enddocs %}\n\n{% docs is_reportback %}\nWhether the post is a reportback. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs civic_action %}\nWhether the post is a Civic Action. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs scholarship_entry %}\nWhether the post is a Scholarship Entry. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs why_participated %}\nWhy the user participated in this action. Entered by the user.\n{% enddocs %}\n\n{% docs details %}\nDetails about the post. Contains contentfulId and other information (e.g. {\"campaignContentfulId\":\"6ATBgGEQEeJoIcxs1qbwaC\"})\n{% enddocs %}\n\n{% docs email %}\nEmail address of the user.\n{% enddocs %}\n\n{% docs source_details %}\nDetails about the source of the item. This is sometimes represented as a JSON object, and for other tables like Turbovote its represented as a string. (e.g. \"{\"contentful_id\":\"3CTLlXfbwtz1FOMpl31SKV\",\"utm_source\":\"scholarship_listing\",\"utm_medium\":\"referral\",\"utm_campaign\":\"fastweb_2019_08\"}\", newsletter_456)\n{% enddocs %}\n\n{% docs campaign_id %}\nThis is a unique identifier for the campaign\n{% enddocs %}\n\n{% docs campaign_run_id %}\nUnique identifier for the campaign run\n{% enddocs %}\n\n{% docs campaign_name %}\nName of the campaign\n{% enddocs %}\n\n{% docs campaign_cause %}\nCampaign cause (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_run_start_date %}\nStart date of the campaign run\n{% enddocs %}\n\n{% docs campaign_run_end_date %}\nEnd date of the campaign run\n{% enddocs %}\n\n{% docs campaign_created_date %}\nWhen the campaign was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs campaign_node_id %}\nInternal unique node id for the campaign\n{% enddocs %}\n\n{% docs campaign_node_id_title %}\nCampaign title\n{% enddocs %}\n\n{% docs campaign_run_id_title %}\nTitle of the campaign run\n{% enddocs %}\n\n{% docs campaign_action_type %}\nCampaign action type (eg. Make Something, Share Something)\n{% enddocs %}\n\n{% docs campaign_cause_type %}\nCampaign cause type (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_noun %}\nNoun applicable to the user's action\n{% enddocs %}\n\n{% docs campaign_verb %}\nVerb describing the action the user should take\n{% enddocs %}\n\n{% docs campaign_cta %}\nCampaign's call to action\n{% enddocs %}\n\n{% docs campaign_language %}\n\"Language in which the campaign is available\"\n{% enddocs %}\n\n{% docs agent_id %}\nIf set, the content type of the picture the member is sending us. Exp. image/png.\n{% enddocs %}\n\n{% docs attachment_content_type %}\nIf set, the handle of the Front agent this outbound support message is from.\n{% enddocs %}\n\n{% docs topic %}\nHolds a reference to the **last** campaign topic the member's conversation was in. This is useful to allow members to talk to Gambit and get quick responses (through Rivescript), without Gambit completely forgetting what state the member's interaction with a campaign topic was in.\n{% enddocs %}\n\n{% docs action_serial_id %}\nSerial id for the user's action. Depends on the source of the action. May be the bertly click id, sms message id, etc.\n{% enddocs %}\n\n{% docs channel %}\nChannel for the user's action. Depends on the source of the action. (e.g. web, sms)\n{% enddocs %}\n\n{% docs first_action_month %}\nMonth during which the user took their first action. \n{% enddocs %}\n\n{% docs event_id %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs event_source %}\nApplication source for event (eg. Phoenix, Northstar)\n{% enddocs %}\n\n{% docs event_datetime %}\nWhen the event occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs event_name %}\nName of the event (eg. northstar_submitted_register, https://docs.google.com/spreadsheets/d/1lm-fGrIm85nUTxSojqyCt_Ehmm1zEbViFhKpxcJiz1A/edit#gid=406441516)\n{% enddocs %}\n\n{% docs event_type %}\nType of event (pv = 'Page View', se = 'Structured Event')\n{% enddocs %}\n\n{% docs host %}\nURL host where event occurred (eg. www.dosomething.org or identity.dosomething.org)\n{% enddocs %}\n\n{% docs path %}\nURL path event occurred at (eg. /login or /us/campaigns/huddle-for-heroes)\n{% enddocs %}\n\n{% docs query_parameters %}\nOptional query parameters for the request (eg. query=huddle)\n{% enddocs %}\n\n{% docs se_category %}\nCategory of event (eg. focused_field, authentication) - Custom structured event\n{% enddocs %}\n\n{% docs se_action %}\nAction performed / event name (eg. form_submitted, action_failed) - Custom structured event\n{% enddocs %}\n\n{% docs se_label %}\nThe object of the action (eg. first_name, register, voter_reg_status) - Custom structured event\n{% enddocs %}\n\n{% docs session_id %}\nUnique identifier of the user's session\n{% enddocs %}\n\n{% docs session_counter %}\nHow many sessions a user has started\n{% enddocs %}\n\n{% docs browser_size %}\nWhich type of browser a user is using (eg. Mobile, Desktop)\n{% enddocs %}\n\n{% docs northstar_id %}\nThe Northstar ID of the user who generated the event\n{% enddocs %}\n\n{% docs device_id %}\nID of the device used\n{% enddocs %}\n\n{% docs referrer_host %}\nURL host of the referring site (eg. google.com)\n{% enddocs %}\n\n{% docs referrer_path %}\nURL path from referring site (eg. /10-stats-on-teen-drug-and-alcohol-use/)\n{% enddocs %}\n\n{% docs referrer_source %}\nReferrer source name (eg. Google, Facebook)\n{% enddocs %}\n\n{% docs utm_source %}\nTracks where the traffic is coming from. (eg. scholarship_listing, Facebook)\n{% enddocs %}\n\n{% docs utm_medium %}\nHow the traffic got to the platform (eg. referral, CPC)\n{% enddocs %}\n\n{% docs utm_campaign %}\nTracks which campaign the traffic was generated by. Shows up in Google Analytics as Campaign Name (eg. editorial_newsletter)\n{% enddocs %}\n\n{% docs url %}\nURL of campaign (eg. https://dosome.click/nyn5m7)\n{% enddocs %}\n\n{% docs modal_type %}\nNULL or SURVEY_MODAL\n{% enddocs %}\n\n{% docs landing_datetime %}\nWhen the session started in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs ending_datetime %}\nWhen the session ended in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs session_duration_seconds %}\nSession duration in seconds\n{% enddocs %}\n\n{% docs num_pages_views %}\nNumber of pages viewed in session\n{% enddocs %}\n\n{% docs landing_page %}\nFirst page the user viewed in the session (eg. /us/facts/11-facts-about-bp-oil-spill)\n{% enddocs %}\n\n{% docs exit_page %}\n\"Which page the user ended or exited their session from (eg. /us/campaigns/green-your-getaway)\"\n{% enddocs %}\n\n{% docs days_since_last_session %}\n\"Days since their last session.\"\n{% enddocs %}\n\n{% docs post_type %}\nType of post, (e.g. photo, voter-reg)\n{% enddocs %}\n\n{% docs noun %}\nNoun that corresponds to the item in the call to action that was delivered. (e.g. drawings, tweets)\n{% enddocs %}\n\n{% docs verb %}\nVerb corresponding to the action the user took. (e.g. shared, sent, taken)\n{% enddocs %}\n\n{% docs deleted_at %}\nDate time in UTC when a user deleted their post.\n{% enddocs %}\n\n{% docs _fivetran_deleted %}\nMarks rows that were deleted in the source table\n{% enddocs %}\n\n{% docs _fivetran_synced %}\n(UTC timestamp) keeps track of when each row was last successfully synced\n{% enddocs %}\n\n{% docs reportback %}\nWhether the post is a reportback \n{% enddocs %}\n\n{% docs active %}\nWhether the user is active \n{% enddocs %}\n\n{% docs anonymous %}\nWhether the user is anonymous when making the post \n{% enddocs %}\n\n{% docs callpower_campaign_id %}\nUnique ID corresponding to the Callpower campaign. Callpower allows users to record messages for their representatives.\n{% enddocs %}\n\n{% docs quiz %}\nWhether the post is a quiz \n{% enddocs %}\n\n{% docs action_type %}\nType of action the user took. (e.g. share-something, donate-something)\n{% enddocs %}\n\n{% docs online %}\nWhether the action is a online as opposed to IRL.\n{% enddocs %}\n\n{% docs time_commitment %}\nEstimated time required to do the action (e.g. 3.0+, <0.5)\n{% enddocs %}\n\n{% docs num_signups %}\nQuantity of campaign signups\n{% enddocs %}\n\n{% docs most_recent_signup %}\nTimestamp of the most recent signup in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs num_rbs %}\nQuantity of reportbacks for the user\n{% enddocs %}\n\n{% docs total_quantity %}\nTotal quantity of items in reportbacks\n{% enddocs %}\n\n{% docs most_recent_rb %}\nWhen the most recent reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs first_rb %}\nWhen the first reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs avg_time_betw_rbs %}\nCalculated average time between reportbacks.\n{% enddocs %}\n\n{% docs avg_days_next_action_after_rb %}\nCalculated average days until next action after reportback\n{% enddocs %}\n\n{% docs days_to_next_action_after_last_rb %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs most_recent_mam_action %}\nMost recent monthly active member qualifying action in UTC (eg. 2018-01-01 12:00:00).\n{% enddocs %}\n\n{% docs most_recent_email_open %}\nMost recent email open in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs most_recent_all_actions %}\nMost recent timestamp of any action in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs last_action_is_rb %}\nWhether the last action the user took was a reportback\n{% enddocs %}\n\n{% docs days_since_last_action %}\nDays since the user's last action\n{% enddocs %}\n\n{% docs time_to_first_rb %}\nHow much time after registering until the user's first reportback\n{% enddocs %}\n\n{% docs sms_unsubscribed_at %}\nTimestamp of when user unsubscribed from SMS messaging\n{% enddocs %}\n\n{% docs user_unsubscribed_at %}\nTimestamp of when user unsubscribed from email or sms\n{% enddocs %}\n\n{% docs voter_reg_acquisition %}\nWhether the user was an acquisition through voter registration efforts. \n{% enddocs %}\n\n{% docs last_logged_in %}\nDate time in UTC when user last logged in to Northstar\n{% enddocs %}\n\n{% docs last_accessed %}\nDate time in UTC when user last access the website\n{% enddocs %}\n\n{% docs last_messaged_at %}\nDate time in UTC when user was last sent a message via SMS or email\n{% enddocs %}\n\n{% docs facebook_id %}\nUser's facebook id\n{% enddocs %}\n\n{% docs mobile %}\nUsers's mobile phone number\n{% enddocs %}\n\n{% docs birthdate %}\nUser's birthdate\n{% enddocs %}\n\n{% docs first_name %}\nUser's first name\n{% enddocs %}\n\n{% docs last_name %}\nUser's last name\n{% enddocs %}\n\n{% docs voter_registration_status %}\nUser's registration status. (e.g. registration_complete, confirmed, uncertain) \n{% enddocs %}\n\n{% docs finish_with_state %}\nIf the registrant was eligible to use and passed through to complete their registration with their state\u2019s OVR system, it will be indicated in this field (direct quote from Rock-The-Vote documentation). Yes/No value in field.\n{% enddocs %}\n\n{% docs reportback_volume %}\nThis field returns 1 if non voter-reg action, since campaigns team only counts those a 1 reportback. If voter-reg action, we want to count quantity of post as number of registered voters.\n{% enddocs %}\n\n{% docs address_street_1 %}\nFirst line of user's street address\n{% enddocs %}\n\n{% docs address_street_2 %}\nSecond line of user's street address\n{% enddocs %}\n\n{% docs city %}\nUser's city\n{% enddocs %}\n\n{% docs state %}\nUser's state\n{% enddocs %}\n\n{% docs country %}\nUser's country\n{% enddocs %}\n\n{% docs language %}\nUser's language\n{% enddocs %}\n\n{% docs cio_status %}\nStatus of user from CIO. (e.g. customer_subscribed, customer_unsubscribed)\n{% enddocs %}\n\n{% docs cio_status_timestamp %}\nTimestamp when users's status was updated.\n{% enddocs %}\n\n{% docs sms_status %}\nCurrent SMS status. (e.g. undeliverable, unknown)\n{% enddocs %}\n\n{% docs source_detail %}\nDetails of the origin of the user. (e.g. tell_a_friend, other, opt_in_path/197981)\n{% enddocs %}\n\n{% docs badges %}\nWhether the user has any badges. \n{% enddocs %}\n\n{% docs refer_friends %}\nWhether the user is a part of the refer a friend campaign. \n{% enddocs %}\n\n{% docs subscribed_member %}\nWhether the user is subscribed. \n{% enddocs %}\n\n{% docs last_updated_at %}\nTimestamp when users's was updated.\n{% enddocs %}\n\n{% docs school_id %}\nUnique identifier for the user's school. This info comes from the school finder.\n{% enddocs %}\n\n{% docs newsletter_topic %}\nNewsletter topic. (e.g. community, lifestyle)\n{% enddocs %}\n\n{% docs user_agent %}\nFull user agent string for a user's browser (e.g. \"Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:24.0) Gecko/20100101 Firefox/24.0\")\n{% enddocs %}\n\n{% docs drupal_id %}\nOld Drupal user ID\n{% enddocs %}\n\n{% docs campaigns %}\nCampaigns a user is signed up for.\n{% enddocs %}\n\n{% docs audit %}\nA very useful field with data containing information about changes to a user, e.g. timestamps when the user subscribed and unsubscribed.\n{% enddocs %}\n\n{% docs voting_plan_status %}\nThe indication of the user's plan to vote, e.g. voting, not_voting, cant_vote\n{% enddocs %}\n\n{% docs voting_plan_time_of_day %}\nThe time of day when the user plans to vote, e.g morning, afternoon, evening\n{% enddocs %}\n\n{% docs voting_plan_method_of_transport %}\nHow the user plans to get to their polling place. e.g. walk, drive\n{% enddocs %}\n\n{% docs voting_plan_attending_with %}\nWith Whom the user plans to go voting, e.g. family, friends, alone\n{% enddocs %}\n\n{% docs feature_flags %}\nJSON containing info on features like badges and refer-a-friend.\n{% enddocs %}\n\n{% docs dbt_updated_at %}\nDBT snapshot table data. The updated_at timestamp of the source record when this snapshot row was inserted.\n{% enddocs %}\n\n{% docs dbt_scd_id %}\nDBT snapshot table data. A unique key generated for each snapshotted record.\n{% enddocs %}\n\n{% docs dbt_valid_from %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this snapshot row was first inserted\n{% enddocs %}\n\n{% docs dbt_valid_to %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this row row became invalidated.\n{% enddocs %}\n\n{% docs google_id %}\nUser's Google ID obtained from login.\n{% enddocs %}\n\n{% docs causes %}\nCauses in which a user is interested. e.g. animal welfare, education, mental_health\n{% enddocs %}\n\n{% docs email_subscription_status %}\nEmail subscription status of the user\n{% enddocs %}\n\n{% docs role %}\nUser's role, e.g. user, staff\n{% enddocs %}\n\n{% docs cio_backfilled %}\nWhether this user's data was backfilled from CIO\n{% enddocs %}\n\n{% docs addr_source %}\nWhere the user submitted their address, e.g. sms, GDPR\n{% enddocs %}\n\n{% docs email_subscription_topics %}\nEmail subscription topics correspond to categories in CIO in which the user is interested. e.g. lifestyle, community, scholarship\n{% enddocs %}\n\n{% docs sms_paused %}\nWhether we've paused sending sms messages to the user.\n{% enddocs %}\n\n\n\n\n", "name": "event_type", "unique_id": "ds_dbt.event_type", "block_contents": "Type of event (pv = 'Page View', se = 'Structured Event')"}, "ds_dbt.host": {"root_path": "/Users/mrich/projects/quasar/quasar/dbt", "resource_type": "docs", "path": "schema.md", "original_file_path": "models/schema.md", "package_name": "ds_dbt", "file_contents": "\n{% docs click_id %}\nThis is a unique identifier for each click\n{% enddocs %}\n\n{% docs click_time %}\nTimestamp when user clicked.\n{% enddocs %}\n\n{% docs shortened %}\nShortened URL\n{% enddocs %}\n\n{% docs target_url %}\nURL where the user will be directed\n{% enddocs %}\n\n{% docs broadcast_id %}\nID of the broadcast that generated the shortened URL\n{% enddocs %}\n\n{% docs source %}\nSource of the URL (e.g. SMS, web), origin of the post (e.g. phoenix-web, phoenix-ashes, sms), or source where user was acquired. (e.g. sms, phoenix-next)\n{% enddocs %}\n\n{% docs interaction_type %}\nHow the user interacted with the link (e.g. preview, click)\n{% enddocs %}\n\n{% docs id %}\nUnique identifier for the post\n{% enddocs %}\n\n{% docs type %}\nType of post (e.g. photo)\n{% enddocs %}\n\n{% docs action %}\nPost action (e.g. DefendDreamers_Nov9_CongressCalls, GunViolence2018_Feb15_ParklandResponse)\n{% enddocs %}\n\n{% docs status %}\nPost status (e.g. accepted, rejected)\n{% enddocs %}\n\n{% docs quantity %}\nNumerical quantity of items specified in the call to action (e.g. 10, 200)\n{% enddocs %}\n\n{% docs source_bucket %}\nGrouping bucket for origin of the post (e.g. web, sms) \n{% enddocs %}\n\n{% docs created_at %}\nWhen the item was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs updated_at %}\nWhen the item was updated in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs text %}\nText of the post (e.g. \"Zoo animals and a super hero trying to help too!\") \n{% enddocs %}\n\n{% docs signup_id %}\nUnique identifier for the signup \n{% enddocs %}\n\n{% docs post_class %}\nClass of the signup (e.g. \"photo - default\", \"phone-call - DefendDreamers_Jan16_BothBodies\")\n{% enddocs %}\n\n{% docs is_accepted %}\nWhether the post has been accepted to be displayed to the public on the website\n{% enddocs %}\n\n{% docs action_id %}\nInternal identifier of the action \n{% enddocs %}\n\n{% docs location %}\nLocation where the action takes place (e.g. US-NY)\n{% enddocs %}\n\n{% docs postal_code %}\nPostal code where the action takes place\n{% enddocs %}\n\n{% docs is_reportback %}\nWhether the post is a reportback. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs civic_action %}\nWhether the post is a Civic Action. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs scholarship_entry %}\nWhether the post is a Scholarship Entry. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs why_participated %}\nWhy the user participated in this action. Entered by the user.\n{% enddocs %}\n\n{% docs details %}\nDetails about the post. Contains contentfulId and other information (e.g. {\"campaignContentfulId\":\"6ATBgGEQEeJoIcxs1qbwaC\"})\n{% enddocs %}\n\n{% docs email %}\nEmail address of the user.\n{% enddocs %}\n\n{% docs source_details %}\nDetails about the source of the item. This is sometimes represented as a JSON object, and for other tables like Turbovote its represented as a string. (e.g. \"{\"contentful_id\":\"3CTLlXfbwtz1FOMpl31SKV\",\"utm_source\":\"scholarship_listing\",\"utm_medium\":\"referral\",\"utm_campaign\":\"fastweb_2019_08\"}\", newsletter_456)\n{% enddocs %}\n\n{% docs campaign_id %}\nThis is a unique identifier for the campaign\n{% enddocs %}\n\n{% docs campaign_run_id %}\nUnique identifier for the campaign run\n{% enddocs %}\n\n{% docs campaign_name %}\nName of the campaign\n{% enddocs %}\n\n{% docs campaign_cause %}\nCampaign cause (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_run_start_date %}\nStart date of the campaign run\n{% enddocs %}\n\n{% docs campaign_run_end_date %}\nEnd date of the campaign run\n{% enddocs %}\n\n{% docs campaign_created_date %}\nWhen the campaign was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs campaign_node_id %}\nInternal unique node id for the campaign\n{% enddocs %}\n\n{% docs campaign_node_id_title %}\nCampaign title\n{% enddocs %}\n\n{% docs campaign_run_id_title %}\nTitle of the campaign run\n{% enddocs %}\n\n{% docs campaign_action_type %}\nCampaign action type (eg. Make Something, Share Something)\n{% enddocs %}\n\n{% docs campaign_cause_type %}\nCampaign cause type (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_noun %}\nNoun applicable to the user's action\n{% enddocs %}\n\n{% docs campaign_verb %}\nVerb describing the action the user should take\n{% enddocs %}\n\n{% docs campaign_cta %}\nCampaign's call to action\n{% enddocs %}\n\n{% docs campaign_language %}\n\"Language in which the campaign is available\"\n{% enddocs %}\n\n{% docs agent_id %}\nIf set, the content type of the picture the member is sending us. Exp. image/png.\n{% enddocs %}\n\n{% docs attachment_content_type %}\nIf set, the handle of the Front agent this outbound support message is from.\n{% enddocs %}\n\n{% docs topic %}\nHolds a reference to the **last** campaign topic the member's conversation was in. This is useful to allow members to talk to Gambit and get quick responses (through Rivescript), without Gambit completely forgetting what state the member's interaction with a campaign topic was in.\n{% enddocs %}\n\n{% docs action_serial_id %}\nSerial id for the user's action. Depends on the source of the action. May be the bertly click id, sms message id, etc.\n{% enddocs %}\n\n{% docs channel %}\nChannel for the user's action. Depends on the source of the action. (e.g. web, sms)\n{% enddocs %}\n\n{% docs first_action_month %}\nMonth during which the user took their first action. \n{% enddocs %}\n\n{% docs event_id %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs event_source %}\nApplication source for event (eg. Phoenix, Northstar)\n{% enddocs %}\n\n{% docs event_datetime %}\nWhen the event occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs event_name %}\nName of the event (eg. northstar_submitted_register, https://docs.google.com/spreadsheets/d/1lm-fGrIm85nUTxSojqyCt_Ehmm1zEbViFhKpxcJiz1A/edit#gid=406441516)\n{% enddocs %}\n\n{% docs event_type %}\nType of event (pv = 'Page View', se = 'Structured Event')\n{% enddocs %}\n\n{% docs host %}\nURL host where event occurred (eg. www.dosomething.org or identity.dosomething.org)\n{% enddocs %}\n\n{% docs path %}\nURL path event occurred at (eg. /login or /us/campaigns/huddle-for-heroes)\n{% enddocs %}\n\n{% docs query_parameters %}\nOptional query parameters for the request (eg. query=huddle)\n{% enddocs %}\n\n{% docs se_category %}\nCategory of event (eg. focused_field, authentication) - Custom structured event\n{% enddocs %}\n\n{% docs se_action %}\nAction performed / event name (eg. form_submitted, action_failed) - Custom structured event\n{% enddocs %}\n\n{% docs se_label %}\nThe object of the action (eg. first_name, register, voter_reg_status) - Custom structured event\n{% enddocs %}\n\n{% docs session_id %}\nUnique identifier of the user's session\n{% enddocs %}\n\n{% docs session_counter %}\nHow many sessions a user has started\n{% enddocs %}\n\n{% docs browser_size %}\nWhich type of browser a user is using (eg. Mobile, Desktop)\n{% enddocs %}\n\n{% docs northstar_id %}\nThe Northstar ID of the user who generated the event\n{% enddocs %}\n\n{% docs device_id %}\nID of the device used\n{% enddocs %}\n\n{% docs referrer_host %}\nURL host of the referring site (eg. google.com)\n{% enddocs %}\n\n{% docs referrer_path %}\nURL path from referring site (eg. /10-stats-on-teen-drug-and-alcohol-use/)\n{% enddocs %}\n\n{% docs referrer_source %}\nReferrer source name (eg. Google, Facebook)\n{% enddocs %}\n\n{% docs utm_source %}\nTracks where the traffic is coming from. (eg. scholarship_listing, Facebook)\n{% enddocs %}\n\n{% docs utm_medium %}\nHow the traffic got to the platform (eg. referral, CPC)\n{% enddocs %}\n\n{% docs utm_campaign %}\nTracks which campaign the traffic was generated by. Shows up in Google Analytics as Campaign Name (eg. editorial_newsletter)\n{% enddocs %}\n\n{% docs url %}\nURL of campaign (eg. https://dosome.click/nyn5m7)\n{% enddocs %}\n\n{% docs modal_type %}\nNULL or SURVEY_MODAL\n{% enddocs %}\n\n{% docs landing_datetime %}\nWhen the session started in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs ending_datetime %}\nWhen the session ended in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs session_duration_seconds %}\nSession duration in seconds\n{% enddocs %}\n\n{% docs num_pages_views %}\nNumber of pages viewed in session\n{% enddocs %}\n\n{% docs landing_page %}\nFirst page the user viewed in the session (eg. /us/facts/11-facts-about-bp-oil-spill)\n{% enddocs %}\n\n{% docs exit_page %}\n\"Which page the user ended or exited their session from (eg. /us/campaigns/green-your-getaway)\"\n{% enddocs %}\n\n{% docs days_since_last_session %}\n\"Days since their last session.\"\n{% enddocs %}\n\n{% docs post_type %}\nType of post, (e.g. photo, voter-reg)\n{% enddocs %}\n\n{% docs noun %}\nNoun that corresponds to the item in the call to action that was delivered. (e.g. drawings, tweets)\n{% enddocs %}\n\n{% docs verb %}\nVerb corresponding to the action the user took. (e.g. shared, sent, taken)\n{% enddocs %}\n\n{% docs deleted_at %}\nDate time in UTC when a user deleted their post.\n{% enddocs %}\n\n{% docs _fivetran_deleted %}\nMarks rows that were deleted in the source table\n{% enddocs %}\n\n{% docs _fivetran_synced %}\n(UTC timestamp) keeps track of when each row was last successfully synced\n{% enddocs %}\n\n{% docs reportback %}\nWhether the post is a reportback \n{% enddocs %}\n\n{% docs active %}\nWhether the user is active \n{% enddocs %}\n\n{% docs anonymous %}\nWhether the user is anonymous when making the post \n{% enddocs %}\n\n{% docs callpower_campaign_id %}\nUnique ID corresponding to the Callpower campaign. Callpower allows users to record messages for their representatives.\n{% enddocs %}\n\n{% docs quiz %}\nWhether the post is a quiz \n{% enddocs %}\n\n{% docs action_type %}\nType of action the user took. (e.g. share-something, donate-something)\n{% enddocs %}\n\n{% docs online %}\nWhether the action is a online as opposed to IRL.\n{% enddocs %}\n\n{% docs time_commitment %}\nEstimated time required to do the action (e.g. 3.0+, <0.5)\n{% enddocs %}\n\n{% docs num_signups %}\nQuantity of campaign signups\n{% enddocs %}\n\n{% docs most_recent_signup %}\nTimestamp of the most recent signup in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs num_rbs %}\nQuantity of reportbacks for the user\n{% enddocs %}\n\n{% docs total_quantity %}\nTotal quantity of items in reportbacks\n{% enddocs %}\n\n{% docs most_recent_rb %}\nWhen the most recent reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs first_rb %}\nWhen the first reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs avg_time_betw_rbs %}\nCalculated average time between reportbacks.\n{% enddocs %}\n\n{% docs avg_days_next_action_after_rb %}\nCalculated average days until next action after reportback\n{% enddocs %}\n\n{% docs days_to_next_action_after_last_rb %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs most_recent_mam_action %}\nMost recent monthly active member qualifying action in UTC (eg. 2018-01-01 12:00:00).\n{% enddocs %}\n\n{% docs most_recent_email_open %}\nMost recent email open in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs most_recent_all_actions %}\nMost recent timestamp of any action in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs last_action_is_rb %}\nWhether the last action the user took was a reportback\n{% enddocs %}\n\n{% docs days_since_last_action %}\nDays since the user's last action\n{% enddocs %}\n\n{% docs time_to_first_rb %}\nHow much time after registering until the user's first reportback\n{% enddocs %}\n\n{% docs sms_unsubscribed_at %}\nTimestamp of when user unsubscribed from SMS messaging\n{% enddocs %}\n\n{% docs user_unsubscribed_at %}\nTimestamp of when user unsubscribed from email or sms\n{% enddocs %}\n\n{% docs voter_reg_acquisition %}\nWhether the user was an acquisition through voter registration efforts. \n{% enddocs %}\n\n{% docs last_logged_in %}\nDate time in UTC when user last logged in to Northstar\n{% enddocs %}\n\n{% docs last_accessed %}\nDate time in UTC when user last access the website\n{% enddocs %}\n\n{% docs last_messaged_at %}\nDate time in UTC when user was last sent a message via SMS or email\n{% enddocs %}\n\n{% docs facebook_id %}\nUser's facebook id\n{% enddocs %}\n\n{% docs mobile %}\nUsers's mobile phone number\n{% enddocs %}\n\n{% docs birthdate %}\nUser's birthdate\n{% enddocs %}\n\n{% docs first_name %}\nUser's first name\n{% enddocs %}\n\n{% docs last_name %}\nUser's last name\n{% enddocs %}\n\n{% docs voter_registration_status %}\nUser's registration status. (e.g. registration_complete, confirmed, uncertain) \n{% enddocs %}\n\n{% docs finish_with_state %}\nIf the registrant was eligible to use and passed through to complete their registration with their state\u2019s OVR system, it will be indicated in this field (direct quote from Rock-The-Vote documentation). Yes/No value in field.\n{% enddocs %}\n\n{% docs reportback_volume %}\nThis field returns 1 if non voter-reg action, since campaigns team only counts those a 1 reportback. If voter-reg action, we want to count quantity of post as number of registered voters.\n{% enddocs %}\n\n{% docs address_street_1 %}\nFirst line of user's street address\n{% enddocs %}\n\n{% docs address_street_2 %}\nSecond line of user's street address\n{% enddocs %}\n\n{% docs city %}\nUser's city\n{% enddocs %}\n\n{% docs state %}\nUser's state\n{% enddocs %}\n\n{% docs country %}\nUser's country\n{% enddocs %}\n\n{% docs language %}\nUser's language\n{% enddocs %}\n\n{% docs cio_status %}\nStatus of user from CIO. (e.g. customer_subscribed, customer_unsubscribed)\n{% enddocs %}\n\n{% docs cio_status_timestamp %}\nTimestamp when users's status was updated.\n{% enddocs %}\n\n{% docs sms_status %}\nCurrent SMS status. (e.g. undeliverable, unknown)\n{% enddocs %}\n\n{% docs source_detail %}\nDetails of the origin of the user. (e.g. tell_a_friend, other, opt_in_path/197981)\n{% enddocs %}\n\n{% docs badges %}\nWhether the user has any badges. \n{% enddocs %}\n\n{% docs refer_friends %}\nWhether the user is a part of the refer a friend campaign. \n{% enddocs %}\n\n{% docs subscribed_member %}\nWhether the user is subscribed. \n{% enddocs %}\n\n{% docs last_updated_at %}\nTimestamp when users's was updated.\n{% enddocs %}\n\n{% docs school_id %}\nUnique identifier for the user's school. This info comes from the school finder.\n{% enddocs %}\n\n{% docs newsletter_topic %}\nNewsletter topic. (e.g. community, lifestyle)\n{% enddocs %}\n\n{% docs user_agent %}\nFull user agent string for a user's browser (e.g. \"Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:24.0) Gecko/20100101 Firefox/24.0\")\n{% enddocs %}\n\n{% docs drupal_id %}\nOld Drupal user ID\n{% enddocs %}\n\n{% docs campaigns %}\nCampaigns a user is signed up for.\n{% enddocs %}\n\n{% docs audit %}\nA very useful field with data containing information about changes to a user, e.g. timestamps when the user subscribed and unsubscribed.\n{% enddocs %}\n\n{% docs voting_plan_status %}\nThe indication of the user's plan to vote, e.g. voting, not_voting, cant_vote\n{% enddocs %}\n\n{% docs voting_plan_time_of_day %}\nThe time of day when the user plans to vote, e.g morning, afternoon, evening\n{% enddocs %}\n\n{% docs voting_plan_method_of_transport %}\nHow the user plans to get to their polling place. e.g. walk, drive\n{% enddocs %}\n\n{% docs voting_plan_attending_with %}\nWith Whom the user plans to go voting, e.g. family, friends, alone\n{% enddocs %}\n\n{% docs feature_flags %}\nJSON containing info on features like badges and refer-a-friend.\n{% enddocs %}\n\n{% docs dbt_updated_at %}\nDBT snapshot table data. The updated_at timestamp of the source record when this snapshot row was inserted.\n{% enddocs %}\n\n{% docs dbt_scd_id %}\nDBT snapshot table data. A unique key generated for each snapshotted record.\n{% enddocs %}\n\n{% docs dbt_valid_from %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this snapshot row was first inserted\n{% enddocs %}\n\n{% docs dbt_valid_to %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this row row became invalidated.\n{% enddocs %}\n\n{% docs google_id %}\nUser's Google ID obtained from login.\n{% enddocs %}\n\n{% docs causes %}\nCauses in which a user is interested. e.g. animal welfare, education, mental_health\n{% enddocs %}\n\n{% docs email_subscription_status %}\nEmail subscription status of the user\n{% enddocs %}\n\n{% docs role %}\nUser's role, e.g. user, staff\n{% enddocs %}\n\n{% docs cio_backfilled %}\nWhether this user's data was backfilled from CIO\n{% enddocs %}\n\n{% docs addr_source %}\nWhere the user submitted their address, e.g. sms, GDPR\n{% enddocs %}\n\n{% docs email_subscription_topics %}\nEmail subscription topics correspond to categories in CIO in which the user is interested. e.g. lifestyle, community, scholarship\n{% enddocs %}\n\n{% docs sms_paused %}\nWhether we've paused sending sms messages to the user.\n{% enddocs %}\n\n\n\n\n", "name": "host", "unique_id": "ds_dbt.host", "block_contents": "URL host where event occurred (eg. www.dosomething.org or identity.dosomething.org)"}, "ds_dbt.path": {"root_path": "/Users/mrich/projects/quasar/quasar/dbt", "resource_type": "docs", "path": "schema.md", "original_file_path": "models/schema.md", "package_name": "ds_dbt", "file_contents": "\n{% docs click_id %}\nThis is a unique identifier for each click\n{% enddocs %}\n\n{% docs click_time %}\nTimestamp when user clicked.\n{% enddocs %}\n\n{% docs shortened %}\nShortened URL\n{% enddocs %}\n\n{% docs target_url %}\nURL where the user will be directed\n{% enddocs %}\n\n{% docs broadcast_id %}\nID of the broadcast that generated the shortened URL\n{% enddocs %}\n\n{% docs source %}\nSource of the URL (e.g. SMS, web), origin of the post (e.g. phoenix-web, phoenix-ashes, sms), or source where user was acquired. (e.g. sms, phoenix-next)\n{% enddocs %}\n\n{% docs interaction_type %}\nHow the user interacted with the link (e.g. preview, click)\n{% enddocs %}\n\n{% docs id %}\nUnique identifier for the post\n{% enddocs %}\n\n{% docs type %}\nType of post (e.g. photo)\n{% enddocs %}\n\n{% docs action %}\nPost action (e.g. DefendDreamers_Nov9_CongressCalls, GunViolence2018_Feb15_ParklandResponse)\n{% enddocs %}\n\n{% docs status %}\nPost status (e.g. accepted, rejected)\n{% enddocs %}\n\n{% docs quantity %}\nNumerical quantity of items specified in the call to action (e.g. 10, 200)\n{% enddocs %}\n\n{% docs source_bucket %}\nGrouping bucket for origin of the post (e.g. web, sms) \n{% enddocs %}\n\n{% docs created_at %}\nWhen the item was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs updated_at %}\nWhen the item was updated in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs text %}\nText of the post (e.g. \"Zoo animals and a super hero trying to help too!\") \n{% enddocs %}\n\n{% docs signup_id %}\nUnique identifier for the signup \n{% enddocs %}\n\n{% docs post_class %}\nClass of the signup (e.g. \"photo - default\", \"phone-call - DefendDreamers_Jan16_BothBodies\")\n{% enddocs %}\n\n{% docs is_accepted %}\nWhether the post has been accepted to be displayed to the public on the website\n{% enddocs %}\n\n{% docs action_id %}\nInternal identifier of the action \n{% enddocs %}\n\n{% docs location %}\nLocation where the action takes place (e.g. US-NY)\n{% enddocs %}\n\n{% docs postal_code %}\nPostal code where the action takes place\n{% enddocs %}\n\n{% docs is_reportback %}\nWhether the post is a reportback. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs civic_action %}\nWhether the post is a Civic Action. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs scholarship_entry %}\nWhether the post is a Scholarship Entry. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs why_participated %}\nWhy the user participated in this action. Entered by the user.\n{% enddocs %}\n\n{% docs details %}\nDetails about the post. Contains contentfulId and other information (e.g. {\"campaignContentfulId\":\"6ATBgGEQEeJoIcxs1qbwaC\"})\n{% enddocs %}\n\n{% docs email %}\nEmail address of the user.\n{% enddocs %}\n\n{% docs source_details %}\nDetails about the source of the item. This is sometimes represented as a JSON object, and for other tables like Turbovote its represented as a string. (e.g. \"{\"contentful_id\":\"3CTLlXfbwtz1FOMpl31SKV\",\"utm_source\":\"scholarship_listing\",\"utm_medium\":\"referral\",\"utm_campaign\":\"fastweb_2019_08\"}\", newsletter_456)\n{% enddocs %}\n\n{% docs campaign_id %}\nThis is a unique identifier for the campaign\n{% enddocs %}\n\n{% docs campaign_run_id %}\nUnique identifier for the campaign run\n{% enddocs %}\n\n{% docs campaign_name %}\nName of the campaign\n{% enddocs %}\n\n{% docs campaign_cause %}\nCampaign cause (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_run_start_date %}\nStart date of the campaign run\n{% enddocs %}\n\n{% docs campaign_run_end_date %}\nEnd date of the campaign run\n{% enddocs %}\n\n{% docs campaign_created_date %}\nWhen the campaign was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs campaign_node_id %}\nInternal unique node id for the campaign\n{% enddocs %}\n\n{% docs campaign_node_id_title %}\nCampaign title\n{% enddocs %}\n\n{% docs campaign_run_id_title %}\nTitle of the campaign run\n{% enddocs %}\n\n{% docs campaign_action_type %}\nCampaign action type (eg. Make Something, Share Something)\n{% enddocs %}\n\n{% docs campaign_cause_type %}\nCampaign cause type (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_noun %}\nNoun applicable to the user's action\n{% enddocs %}\n\n{% docs campaign_verb %}\nVerb describing the action the user should take\n{% enddocs %}\n\n{% docs campaign_cta %}\nCampaign's call to action\n{% enddocs %}\n\n{% docs campaign_language %}\n\"Language in which the campaign is available\"\n{% enddocs %}\n\n{% docs agent_id %}\nIf set, the content type of the picture the member is sending us. Exp. image/png.\n{% enddocs %}\n\n{% docs attachment_content_type %}\nIf set, the handle of the Front agent this outbound support message is from.\n{% enddocs %}\n\n{% docs topic %}\nHolds a reference to the **last** campaign topic the member's conversation was in. This is useful to allow members to talk to Gambit and get quick responses (through Rivescript), without Gambit completely forgetting what state the member's interaction with a campaign topic was in.\n{% enddocs %}\n\n{% docs action_serial_id %}\nSerial id for the user's action. Depends on the source of the action. May be the bertly click id, sms message id, etc.\n{% enddocs %}\n\n{% docs channel %}\nChannel for the user's action. Depends on the source of the action. (e.g. web, sms)\n{% enddocs %}\n\n{% docs first_action_month %}\nMonth during which the user took their first action. \n{% enddocs %}\n\n{% docs event_id %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs event_source %}\nApplication source for event (eg. Phoenix, Northstar)\n{% enddocs %}\n\n{% docs event_datetime %}\nWhen the event occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs event_name %}\nName of the event (eg. northstar_submitted_register, https://docs.google.com/spreadsheets/d/1lm-fGrIm85nUTxSojqyCt_Ehmm1zEbViFhKpxcJiz1A/edit#gid=406441516)\n{% enddocs %}\n\n{% docs event_type %}\nType of event (pv = 'Page View', se = 'Structured Event')\n{% enddocs %}\n\n{% docs host %}\nURL host where event occurred (eg. www.dosomething.org or identity.dosomething.org)\n{% enddocs %}\n\n{% docs path %}\nURL path event occurred at (eg. /login or /us/campaigns/huddle-for-heroes)\n{% enddocs %}\n\n{% docs query_parameters %}\nOptional query parameters for the request (eg. query=huddle)\n{% enddocs %}\n\n{% docs se_category %}\nCategory of event (eg. focused_field, authentication) - Custom structured event\n{% enddocs %}\n\n{% docs se_action %}\nAction performed / event name (eg. form_submitted, action_failed) - Custom structured event\n{% enddocs %}\n\n{% docs se_label %}\nThe object of the action (eg. first_name, register, voter_reg_status) - Custom structured event\n{% enddocs %}\n\n{% docs session_id %}\nUnique identifier of the user's session\n{% enddocs %}\n\n{% docs session_counter %}\nHow many sessions a user has started\n{% enddocs %}\n\n{% docs browser_size %}\nWhich type of browser a user is using (eg. Mobile, Desktop)\n{% enddocs %}\n\n{% docs northstar_id %}\nThe Northstar ID of the user who generated the event\n{% enddocs %}\n\n{% docs device_id %}\nID of the device used\n{% enddocs %}\n\n{% docs referrer_host %}\nURL host of the referring site (eg. google.com)\n{% enddocs %}\n\n{% docs referrer_path %}\nURL path from referring site (eg. /10-stats-on-teen-drug-and-alcohol-use/)\n{% enddocs %}\n\n{% docs referrer_source %}\nReferrer source name (eg. Google, Facebook)\n{% enddocs %}\n\n{% docs utm_source %}\nTracks where the traffic is coming from. (eg. scholarship_listing, Facebook)\n{% enddocs %}\n\n{% docs utm_medium %}\nHow the traffic got to the platform (eg. referral, CPC)\n{% enddocs %}\n\n{% docs utm_campaign %}\nTracks which campaign the traffic was generated by. Shows up in Google Analytics as Campaign Name (eg. editorial_newsletter)\n{% enddocs %}\n\n{% docs url %}\nURL of campaign (eg. https://dosome.click/nyn5m7)\n{% enddocs %}\n\n{% docs modal_type %}\nNULL or SURVEY_MODAL\n{% enddocs %}\n\n{% docs landing_datetime %}\nWhen the session started in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs ending_datetime %}\nWhen the session ended in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs session_duration_seconds %}\nSession duration in seconds\n{% enddocs %}\n\n{% docs num_pages_views %}\nNumber of pages viewed in session\n{% enddocs %}\n\n{% docs landing_page %}\nFirst page the user viewed in the session (eg. /us/facts/11-facts-about-bp-oil-spill)\n{% enddocs %}\n\n{% docs exit_page %}\n\"Which page the user ended or exited their session from (eg. /us/campaigns/green-your-getaway)\"\n{% enddocs %}\n\n{% docs days_since_last_session %}\n\"Days since their last session.\"\n{% enddocs %}\n\n{% docs post_type %}\nType of post, (e.g. photo, voter-reg)\n{% enddocs %}\n\n{% docs noun %}\nNoun that corresponds to the item in the call to action that was delivered. (e.g. drawings, tweets)\n{% enddocs %}\n\n{% docs verb %}\nVerb corresponding to the action the user took. (e.g. shared, sent, taken)\n{% enddocs %}\n\n{% docs deleted_at %}\nDate time in UTC when a user deleted their post.\n{% enddocs %}\n\n{% docs _fivetran_deleted %}\nMarks rows that were deleted in the source table\n{% enddocs %}\n\n{% docs _fivetran_synced %}\n(UTC timestamp) keeps track of when each row was last successfully synced\n{% enddocs %}\n\n{% docs reportback %}\nWhether the post is a reportback \n{% enddocs %}\n\n{% docs active %}\nWhether the user is active \n{% enddocs %}\n\n{% docs anonymous %}\nWhether the user is anonymous when making the post \n{% enddocs %}\n\n{% docs callpower_campaign_id %}\nUnique ID corresponding to the Callpower campaign. Callpower allows users to record messages for their representatives.\n{% enddocs %}\n\n{% docs quiz %}\nWhether the post is a quiz \n{% enddocs %}\n\n{% docs action_type %}\nType of action the user took. (e.g. share-something, donate-something)\n{% enddocs %}\n\n{% docs online %}\nWhether the action is a online as opposed to IRL.\n{% enddocs %}\n\n{% docs time_commitment %}\nEstimated time required to do the action (e.g. 3.0+, <0.5)\n{% enddocs %}\n\n{% docs num_signups %}\nQuantity of campaign signups\n{% enddocs %}\n\n{% docs most_recent_signup %}\nTimestamp of the most recent signup in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs num_rbs %}\nQuantity of reportbacks for the user\n{% enddocs %}\n\n{% docs total_quantity %}\nTotal quantity of items in reportbacks\n{% enddocs %}\n\n{% docs most_recent_rb %}\nWhen the most recent reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs first_rb %}\nWhen the first reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs avg_time_betw_rbs %}\nCalculated average time between reportbacks.\n{% enddocs %}\n\n{% docs avg_days_next_action_after_rb %}\nCalculated average days until next action after reportback\n{% enddocs %}\n\n{% docs days_to_next_action_after_last_rb %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs most_recent_mam_action %}\nMost recent monthly active member qualifying action in UTC (eg. 2018-01-01 12:00:00).\n{% enddocs %}\n\n{% docs most_recent_email_open %}\nMost recent email open in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs most_recent_all_actions %}\nMost recent timestamp of any action in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs last_action_is_rb %}\nWhether the last action the user took was a reportback\n{% enddocs %}\n\n{% docs days_since_last_action %}\nDays since the user's last action\n{% enddocs %}\n\n{% docs time_to_first_rb %}\nHow much time after registering until the user's first reportback\n{% enddocs %}\n\n{% docs sms_unsubscribed_at %}\nTimestamp of when user unsubscribed from SMS messaging\n{% enddocs %}\n\n{% docs user_unsubscribed_at %}\nTimestamp of when user unsubscribed from email or sms\n{% enddocs %}\n\n{% docs voter_reg_acquisition %}\nWhether the user was an acquisition through voter registration efforts. \n{% enddocs %}\n\n{% docs last_logged_in %}\nDate time in UTC when user last logged in to Northstar\n{% enddocs %}\n\n{% docs last_accessed %}\nDate time in UTC when user last access the website\n{% enddocs %}\n\n{% docs last_messaged_at %}\nDate time in UTC when user was last sent a message via SMS or email\n{% enddocs %}\n\n{% docs facebook_id %}\nUser's facebook id\n{% enddocs %}\n\n{% docs mobile %}\nUsers's mobile phone number\n{% enddocs %}\n\n{% docs birthdate %}\nUser's birthdate\n{% enddocs %}\n\n{% docs first_name %}\nUser's first name\n{% enddocs %}\n\n{% docs last_name %}\nUser's last name\n{% enddocs %}\n\n{% docs voter_registration_status %}\nUser's registration status. (e.g. registration_complete, confirmed, uncertain) \n{% enddocs %}\n\n{% docs finish_with_state %}\nIf the registrant was eligible to use and passed through to complete their registration with their state\u2019s OVR system, it will be indicated in this field (direct quote from Rock-The-Vote documentation). Yes/No value in field.\n{% enddocs %}\n\n{% docs reportback_volume %}\nThis field returns 1 if non voter-reg action, since campaigns team only counts those a 1 reportback. If voter-reg action, we want to count quantity of post as number of registered voters.\n{% enddocs %}\n\n{% docs address_street_1 %}\nFirst line of user's street address\n{% enddocs %}\n\n{% docs address_street_2 %}\nSecond line of user's street address\n{% enddocs %}\n\n{% docs city %}\nUser's city\n{% enddocs %}\n\n{% docs state %}\nUser's state\n{% enddocs %}\n\n{% docs country %}\nUser's country\n{% enddocs %}\n\n{% docs language %}\nUser's language\n{% enddocs %}\n\n{% docs cio_status %}\nStatus of user from CIO. (e.g. customer_subscribed, customer_unsubscribed)\n{% enddocs %}\n\n{% docs cio_status_timestamp %}\nTimestamp when users's status was updated.\n{% enddocs %}\n\n{% docs sms_status %}\nCurrent SMS status. (e.g. undeliverable, unknown)\n{% enddocs %}\n\n{% docs source_detail %}\nDetails of the origin of the user. (e.g. tell_a_friend, other, opt_in_path/197981)\n{% enddocs %}\n\n{% docs badges %}\nWhether the user has any badges. \n{% enddocs %}\n\n{% docs refer_friends %}\nWhether the user is a part of the refer a friend campaign. \n{% enddocs %}\n\n{% docs subscribed_member %}\nWhether the user is subscribed. \n{% enddocs %}\n\n{% docs last_updated_at %}\nTimestamp when users's was updated.\n{% enddocs %}\n\n{% docs school_id %}\nUnique identifier for the user's school. This info comes from the school finder.\n{% enddocs %}\n\n{% docs newsletter_topic %}\nNewsletter topic. (e.g. community, lifestyle)\n{% enddocs %}\n\n{% docs user_agent %}\nFull user agent string for a user's browser (e.g. \"Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:24.0) Gecko/20100101 Firefox/24.0\")\n{% enddocs %}\n\n{% docs drupal_id %}\nOld Drupal user ID\n{% enddocs %}\n\n{% docs campaigns %}\nCampaigns a user is signed up for.\n{% enddocs %}\n\n{% docs audit %}\nA very useful field with data containing information about changes to a user, e.g. timestamps when the user subscribed and unsubscribed.\n{% enddocs %}\n\n{% docs voting_plan_status %}\nThe indication of the user's plan to vote, e.g. voting, not_voting, cant_vote\n{% enddocs %}\n\n{% docs voting_plan_time_of_day %}\nThe time of day when the user plans to vote, e.g morning, afternoon, evening\n{% enddocs %}\n\n{% docs voting_plan_method_of_transport %}\nHow the user plans to get to their polling place. e.g. walk, drive\n{% enddocs %}\n\n{% docs voting_plan_attending_with %}\nWith Whom the user plans to go voting, e.g. family, friends, alone\n{% enddocs %}\n\n{% docs feature_flags %}\nJSON containing info on features like badges and refer-a-friend.\n{% enddocs %}\n\n{% docs dbt_updated_at %}\nDBT snapshot table data. The updated_at timestamp of the source record when this snapshot row was inserted.\n{% enddocs %}\n\n{% docs dbt_scd_id %}\nDBT snapshot table data. A unique key generated for each snapshotted record.\n{% enddocs %}\n\n{% docs dbt_valid_from %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this snapshot row was first inserted\n{% enddocs %}\n\n{% docs dbt_valid_to %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this row row became invalidated.\n{% enddocs %}\n\n{% docs google_id %}\nUser's Google ID obtained from login.\n{% enddocs %}\n\n{% docs causes %}\nCauses in which a user is interested. e.g. animal welfare, education, mental_health\n{% enddocs %}\n\n{% docs email_subscription_status %}\nEmail subscription status of the user\n{% enddocs %}\n\n{% docs role %}\nUser's role, e.g. user, staff\n{% enddocs %}\n\n{% docs cio_backfilled %}\nWhether this user's data was backfilled from CIO\n{% enddocs %}\n\n{% docs addr_source %}\nWhere the user submitted their address, e.g. sms, GDPR\n{% enddocs %}\n\n{% docs email_subscription_topics %}\nEmail subscription topics correspond to categories in CIO in which the user is interested. e.g. lifestyle, community, scholarship\n{% enddocs %}\n\n{% docs sms_paused %}\nWhether we've paused sending sms messages to the user.\n{% enddocs %}\n\n\n\n\n", "name": "path", "unique_id": "ds_dbt.path", "block_contents": "URL path event occurred at (eg. /login or /us/campaigns/huddle-for-heroes)"}, "ds_dbt.query_parameters": {"root_path": "/Users/mrich/projects/quasar/quasar/dbt", "resource_type": "docs", "path": "schema.md", "original_file_path": "models/schema.md", "package_name": "ds_dbt", "file_contents": "\n{% docs click_id %}\nThis is a unique identifier for each click\n{% enddocs %}\n\n{% docs click_time %}\nTimestamp when user clicked.\n{% enddocs %}\n\n{% docs shortened %}\nShortened URL\n{% enddocs %}\n\n{% docs target_url %}\nURL where the user will be directed\n{% enddocs %}\n\n{% docs broadcast_id %}\nID of the broadcast that generated the shortened URL\n{% enddocs %}\n\n{% docs source %}\nSource of the URL (e.g. SMS, web), origin of the post (e.g. phoenix-web, phoenix-ashes, sms), or source where user was acquired. (e.g. sms, phoenix-next)\n{% enddocs %}\n\n{% docs interaction_type %}\nHow the user interacted with the link (e.g. preview, click)\n{% enddocs %}\n\n{% docs id %}\nUnique identifier for the post\n{% enddocs %}\n\n{% docs type %}\nType of post (e.g. photo)\n{% enddocs %}\n\n{% docs action %}\nPost action (e.g. DefendDreamers_Nov9_CongressCalls, GunViolence2018_Feb15_ParklandResponse)\n{% enddocs %}\n\n{% docs status %}\nPost status (e.g. accepted, rejected)\n{% enddocs %}\n\n{% docs quantity %}\nNumerical quantity of items specified in the call to action (e.g. 10, 200)\n{% enddocs %}\n\n{% docs source_bucket %}\nGrouping bucket for origin of the post (e.g. web, sms) \n{% enddocs %}\n\n{% docs created_at %}\nWhen the item was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs updated_at %}\nWhen the item was updated in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs text %}\nText of the post (e.g. \"Zoo animals and a super hero trying to help too!\") \n{% enddocs %}\n\n{% docs signup_id %}\nUnique identifier for the signup \n{% enddocs %}\n\n{% docs post_class %}\nClass of the signup (e.g. \"photo - default\", \"phone-call - DefendDreamers_Jan16_BothBodies\")\n{% enddocs %}\n\n{% docs is_accepted %}\nWhether the post has been accepted to be displayed to the public on the website\n{% enddocs %}\n\n{% docs action_id %}\nInternal identifier of the action \n{% enddocs %}\n\n{% docs location %}\nLocation where the action takes place (e.g. US-NY)\n{% enddocs %}\n\n{% docs postal_code %}\nPostal code where the action takes place\n{% enddocs %}\n\n{% docs is_reportback %}\nWhether the post is a reportback. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs civic_action %}\nWhether the post is a Civic Action. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs scholarship_entry %}\nWhether the post is a Scholarship Entry. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs why_participated %}\nWhy the user participated in this action. Entered by the user.\n{% enddocs %}\n\n{% docs details %}\nDetails about the post. Contains contentfulId and other information (e.g. {\"campaignContentfulId\":\"6ATBgGEQEeJoIcxs1qbwaC\"})\n{% enddocs %}\n\n{% docs email %}\nEmail address of the user.\n{% enddocs %}\n\n{% docs source_details %}\nDetails about the source of the item. This is sometimes represented as a JSON object, and for other tables like Turbovote its represented as a string. (e.g. \"{\"contentful_id\":\"3CTLlXfbwtz1FOMpl31SKV\",\"utm_source\":\"scholarship_listing\",\"utm_medium\":\"referral\",\"utm_campaign\":\"fastweb_2019_08\"}\", newsletter_456)\n{% enddocs %}\n\n{% docs campaign_id %}\nThis is a unique identifier for the campaign\n{% enddocs %}\n\n{% docs campaign_run_id %}\nUnique identifier for the campaign run\n{% enddocs %}\n\n{% docs campaign_name %}\nName of the campaign\n{% enddocs %}\n\n{% docs campaign_cause %}\nCampaign cause (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_run_start_date %}\nStart date of the campaign run\n{% enddocs %}\n\n{% docs campaign_run_end_date %}\nEnd date of the campaign run\n{% enddocs %}\n\n{% docs campaign_created_date %}\nWhen the campaign was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs campaign_node_id %}\nInternal unique node id for the campaign\n{% enddocs %}\n\n{% docs campaign_node_id_title %}\nCampaign title\n{% enddocs %}\n\n{% docs campaign_run_id_title %}\nTitle of the campaign run\n{% enddocs %}\n\n{% docs campaign_action_type %}\nCampaign action type (eg. Make Something, Share Something)\n{% enddocs %}\n\n{% docs campaign_cause_type %}\nCampaign cause type (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_noun %}\nNoun applicable to the user's action\n{% enddocs %}\n\n{% docs campaign_verb %}\nVerb describing the action the user should take\n{% enddocs %}\n\n{% docs campaign_cta %}\nCampaign's call to action\n{% enddocs %}\n\n{% docs campaign_language %}\n\"Language in which the campaign is available\"\n{% enddocs %}\n\n{% docs agent_id %}\nIf set, the content type of the picture the member is sending us. Exp. image/png.\n{% enddocs %}\n\n{% docs attachment_content_type %}\nIf set, the handle of the Front agent this outbound support message is from.\n{% enddocs %}\n\n{% docs topic %}\nHolds a reference to the **last** campaign topic the member's conversation was in. This is useful to allow members to talk to Gambit and get quick responses (through Rivescript), without Gambit completely forgetting what state the member's interaction with a campaign topic was in.\n{% enddocs %}\n\n{% docs action_serial_id %}\nSerial id for the user's action. Depends on the source of the action. May be the bertly click id, sms message id, etc.\n{% enddocs %}\n\n{% docs channel %}\nChannel for the user's action. Depends on the source of the action. (e.g. web, sms)\n{% enddocs %}\n\n{% docs first_action_month %}\nMonth during which the user took their first action. \n{% enddocs %}\n\n{% docs event_id %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs event_source %}\nApplication source for event (eg. Phoenix, Northstar)\n{% enddocs %}\n\n{% docs event_datetime %}\nWhen the event occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs event_name %}\nName of the event (eg. northstar_submitted_register, https://docs.google.com/spreadsheets/d/1lm-fGrIm85nUTxSojqyCt_Ehmm1zEbViFhKpxcJiz1A/edit#gid=406441516)\n{% enddocs %}\n\n{% docs event_type %}\nType of event (pv = 'Page View', se = 'Structured Event')\n{% enddocs %}\n\n{% docs host %}\nURL host where event occurred (eg. www.dosomething.org or identity.dosomething.org)\n{% enddocs %}\n\n{% docs path %}\nURL path event occurred at (eg. /login or /us/campaigns/huddle-for-heroes)\n{% enddocs %}\n\n{% docs query_parameters %}\nOptional query parameters for the request (eg. query=huddle)\n{% enddocs %}\n\n{% docs se_category %}\nCategory of event (eg. focused_field, authentication) - Custom structured event\n{% enddocs %}\n\n{% docs se_action %}\nAction performed / event name (eg. form_submitted, action_failed) - Custom structured event\n{% enddocs %}\n\n{% docs se_label %}\nThe object of the action (eg. first_name, register, voter_reg_status) - Custom structured event\n{% enddocs %}\n\n{% docs session_id %}\nUnique identifier of the user's session\n{% enddocs %}\n\n{% docs session_counter %}\nHow many sessions a user has started\n{% enddocs %}\n\n{% docs browser_size %}\nWhich type of browser a user is using (eg. Mobile, Desktop)\n{% enddocs %}\n\n{% docs northstar_id %}\nThe Northstar ID of the user who generated the event\n{% enddocs %}\n\n{% docs device_id %}\nID of the device used\n{% enddocs %}\n\n{% docs referrer_host %}\nURL host of the referring site (eg. google.com)\n{% enddocs %}\n\n{% docs referrer_path %}\nURL path from referring site (eg. /10-stats-on-teen-drug-and-alcohol-use/)\n{% enddocs %}\n\n{% docs referrer_source %}\nReferrer source name (eg. Google, Facebook)\n{% enddocs %}\n\n{% docs utm_source %}\nTracks where the traffic is coming from. (eg. scholarship_listing, Facebook)\n{% enddocs %}\n\n{% docs utm_medium %}\nHow the traffic got to the platform (eg. referral, CPC)\n{% enddocs %}\n\n{% docs utm_campaign %}\nTracks which campaign the traffic was generated by. Shows up in Google Analytics as Campaign Name (eg. editorial_newsletter)\n{% enddocs %}\n\n{% docs url %}\nURL of campaign (eg. https://dosome.click/nyn5m7)\n{% enddocs %}\n\n{% docs modal_type %}\nNULL or SURVEY_MODAL\n{% enddocs %}\n\n{% docs landing_datetime %}\nWhen the session started in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs ending_datetime %}\nWhen the session ended in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs session_duration_seconds %}\nSession duration in seconds\n{% enddocs %}\n\n{% docs num_pages_views %}\nNumber of pages viewed in session\n{% enddocs %}\n\n{% docs landing_page %}\nFirst page the user viewed in the session (eg. /us/facts/11-facts-about-bp-oil-spill)\n{% enddocs %}\n\n{% docs exit_page %}\n\"Which page the user ended or exited their session from (eg. /us/campaigns/green-your-getaway)\"\n{% enddocs %}\n\n{% docs days_since_last_session %}\n\"Days since their last session.\"\n{% enddocs %}\n\n{% docs post_type %}\nType of post, (e.g. photo, voter-reg)\n{% enddocs %}\n\n{% docs noun %}\nNoun that corresponds to the item in the call to action that was delivered. (e.g. drawings, tweets)\n{% enddocs %}\n\n{% docs verb %}\nVerb corresponding to the action the user took. (e.g. shared, sent, taken)\n{% enddocs %}\n\n{% docs deleted_at %}\nDate time in UTC when a user deleted their post.\n{% enddocs %}\n\n{% docs _fivetran_deleted %}\nMarks rows that were deleted in the source table\n{% enddocs %}\n\n{% docs _fivetran_synced %}\n(UTC timestamp) keeps track of when each row was last successfully synced\n{% enddocs %}\n\n{% docs reportback %}\nWhether the post is a reportback \n{% enddocs %}\n\n{% docs active %}\nWhether the user is active \n{% enddocs %}\n\n{% docs anonymous %}\nWhether the user is anonymous when making the post \n{% enddocs %}\n\n{% docs callpower_campaign_id %}\nUnique ID corresponding to the Callpower campaign. Callpower allows users to record messages for their representatives.\n{% enddocs %}\n\n{% docs quiz %}\nWhether the post is a quiz \n{% enddocs %}\n\n{% docs action_type %}\nType of action the user took. (e.g. share-something, donate-something)\n{% enddocs %}\n\n{% docs online %}\nWhether the action is a online as opposed to IRL.\n{% enddocs %}\n\n{% docs time_commitment %}\nEstimated time required to do the action (e.g. 3.0+, <0.5)\n{% enddocs %}\n\n{% docs num_signups %}\nQuantity of campaign signups\n{% enddocs %}\n\n{% docs most_recent_signup %}\nTimestamp of the most recent signup in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs num_rbs %}\nQuantity of reportbacks for the user\n{% enddocs %}\n\n{% docs total_quantity %}\nTotal quantity of items in reportbacks\n{% enddocs %}\n\n{% docs most_recent_rb %}\nWhen the most recent reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs first_rb %}\nWhen the first reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs avg_time_betw_rbs %}\nCalculated average time between reportbacks.\n{% enddocs %}\n\n{% docs avg_days_next_action_after_rb %}\nCalculated average days until next action after reportback\n{% enddocs %}\n\n{% docs days_to_next_action_after_last_rb %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs most_recent_mam_action %}\nMost recent monthly active member qualifying action in UTC (eg. 2018-01-01 12:00:00).\n{% enddocs %}\n\n{% docs most_recent_email_open %}\nMost recent email open in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs most_recent_all_actions %}\nMost recent timestamp of any action in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs last_action_is_rb %}\nWhether the last action the user took was a reportback\n{% enddocs %}\n\n{% docs days_since_last_action %}\nDays since the user's last action\n{% enddocs %}\n\n{% docs time_to_first_rb %}\nHow much time after registering until the user's first reportback\n{% enddocs %}\n\n{% docs sms_unsubscribed_at %}\nTimestamp of when user unsubscribed from SMS messaging\n{% enddocs %}\n\n{% docs user_unsubscribed_at %}\nTimestamp of when user unsubscribed from email or sms\n{% enddocs %}\n\n{% docs voter_reg_acquisition %}\nWhether the user was an acquisition through voter registration efforts. \n{% enddocs %}\n\n{% docs last_logged_in %}\nDate time in UTC when user last logged in to Northstar\n{% enddocs %}\n\n{% docs last_accessed %}\nDate time in UTC when user last access the website\n{% enddocs %}\n\n{% docs last_messaged_at %}\nDate time in UTC when user was last sent a message via SMS or email\n{% enddocs %}\n\n{% docs facebook_id %}\nUser's facebook id\n{% enddocs %}\n\n{% docs mobile %}\nUsers's mobile phone number\n{% enddocs %}\n\n{% docs birthdate %}\nUser's birthdate\n{% enddocs %}\n\n{% docs first_name %}\nUser's first name\n{% enddocs %}\n\n{% docs last_name %}\nUser's last name\n{% enddocs %}\n\n{% docs voter_registration_status %}\nUser's registration status. (e.g. registration_complete, confirmed, uncertain) \n{% enddocs %}\n\n{% docs finish_with_state %}\nIf the registrant was eligible to use and passed through to complete their registration with their state\u2019s OVR system, it will be indicated in this field (direct quote from Rock-The-Vote documentation). Yes/No value in field.\n{% enddocs %}\n\n{% docs reportback_volume %}\nThis field returns 1 if non voter-reg action, since campaigns team only counts those a 1 reportback. If voter-reg action, we want to count quantity of post as number of registered voters.\n{% enddocs %}\n\n{% docs address_street_1 %}\nFirst line of user's street address\n{% enddocs %}\n\n{% docs address_street_2 %}\nSecond line of user's street address\n{% enddocs %}\n\n{% docs city %}\nUser's city\n{% enddocs %}\n\n{% docs state %}\nUser's state\n{% enddocs %}\n\n{% docs country %}\nUser's country\n{% enddocs %}\n\n{% docs language %}\nUser's language\n{% enddocs %}\n\n{% docs cio_status %}\nStatus of user from CIO. (e.g. customer_subscribed, customer_unsubscribed)\n{% enddocs %}\n\n{% docs cio_status_timestamp %}\nTimestamp when users's status was updated.\n{% enddocs %}\n\n{% docs sms_status %}\nCurrent SMS status. (e.g. undeliverable, unknown)\n{% enddocs %}\n\n{% docs source_detail %}\nDetails of the origin of the user. (e.g. tell_a_friend, other, opt_in_path/197981)\n{% enddocs %}\n\n{% docs badges %}\nWhether the user has any badges. \n{% enddocs %}\n\n{% docs refer_friends %}\nWhether the user is a part of the refer a friend campaign. \n{% enddocs %}\n\n{% docs subscribed_member %}\nWhether the user is subscribed. \n{% enddocs %}\n\n{% docs last_updated_at %}\nTimestamp when users's was updated.\n{% enddocs %}\n\n{% docs school_id %}\nUnique identifier for the user's school. This info comes from the school finder.\n{% enddocs %}\n\n{% docs newsletter_topic %}\nNewsletter topic. (e.g. community, lifestyle)\n{% enddocs %}\n\n{% docs user_agent %}\nFull user agent string for a user's browser (e.g. \"Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:24.0) Gecko/20100101 Firefox/24.0\")\n{% enddocs %}\n\n{% docs drupal_id %}\nOld Drupal user ID\n{% enddocs %}\n\n{% docs campaigns %}\nCampaigns a user is signed up for.\n{% enddocs %}\n\n{% docs audit %}\nA very useful field with data containing information about changes to a user, e.g. timestamps when the user subscribed and unsubscribed.\n{% enddocs %}\n\n{% docs voting_plan_status %}\nThe indication of the user's plan to vote, e.g. voting, not_voting, cant_vote\n{% enddocs %}\n\n{% docs voting_plan_time_of_day %}\nThe time of day when the user plans to vote, e.g morning, afternoon, evening\n{% enddocs %}\n\n{% docs voting_plan_method_of_transport %}\nHow the user plans to get to their polling place. e.g. walk, drive\n{% enddocs %}\n\n{% docs voting_plan_attending_with %}\nWith Whom the user plans to go voting, e.g. family, friends, alone\n{% enddocs %}\n\n{% docs feature_flags %}\nJSON containing info on features like badges and refer-a-friend.\n{% enddocs %}\n\n{% docs dbt_updated_at %}\nDBT snapshot table data. The updated_at timestamp of the source record when this snapshot row was inserted.\n{% enddocs %}\n\n{% docs dbt_scd_id %}\nDBT snapshot table data. A unique key generated for each snapshotted record.\n{% enddocs %}\n\n{% docs dbt_valid_from %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this snapshot row was first inserted\n{% enddocs %}\n\n{% docs dbt_valid_to %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this row row became invalidated.\n{% enddocs %}\n\n{% docs google_id %}\nUser's Google ID obtained from login.\n{% enddocs %}\n\n{% docs causes %}\nCauses in which a user is interested. e.g. animal welfare, education, mental_health\n{% enddocs %}\n\n{% docs email_subscription_status %}\nEmail subscription status of the user\n{% enddocs %}\n\n{% docs role %}\nUser's role, e.g. user, staff\n{% enddocs %}\n\n{% docs cio_backfilled %}\nWhether this user's data was backfilled from CIO\n{% enddocs %}\n\n{% docs addr_source %}\nWhere the user submitted their address, e.g. sms, GDPR\n{% enddocs %}\n\n{% docs email_subscription_topics %}\nEmail subscription topics correspond to categories in CIO in which the user is interested. e.g. lifestyle, community, scholarship\n{% enddocs %}\n\n{% docs sms_paused %}\nWhether we've paused sending sms messages to the user.\n{% enddocs %}\n\n\n\n\n", "name": "query_parameters", "unique_id": "ds_dbt.query_parameters", "block_contents": "Optional query parameters for the request (eg. query=huddle)"}, "ds_dbt.se_category": {"root_path": "/Users/mrich/projects/quasar/quasar/dbt", "resource_type": "docs", "path": "schema.md", "original_file_path": "models/schema.md", "package_name": "ds_dbt", "file_contents": "\n{% docs click_id %}\nThis is a unique identifier for each click\n{% enddocs %}\n\n{% docs click_time %}\nTimestamp when user clicked.\n{% enddocs %}\n\n{% docs shortened %}\nShortened URL\n{% enddocs %}\n\n{% docs target_url %}\nURL where the user will be directed\n{% enddocs %}\n\n{% docs broadcast_id %}\nID of the broadcast that generated the shortened URL\n{% enddocs %}\n\n{% docs source %}\nSource of the URL (e.g. SMS, web), origin of the post (e.g. phoenix-web, phoenix-ashes, sms), or source where user was acquired. (e.g. sms, phoenix-next)\n{% enddocs %}\n\n{% docs interaction_type %}\nHow the user interacted with the link (e.g. preview, click)\n{% enddocs %}\n\n{% docs id %}\nUnique identifier for the post\n{% enddocs %}\n\n{% docs type %}\nType of post (e.g. photo)\n{% enddocs %}\n\n{% docs action %}\nPost action (e.g. DefendDreamers_Nov9_CongressCalls, GunViolence2018_Feb15_ParklandResponse)\n{% enddocs %}\n\n{% docs status %}\nPost status (e.g. accepted, rejected)\n{% enddocs %}\n\n{% docs quantity %}\nNumerical quantity of items specified in the call to action (e.g. 10, 200)\n{% enddocs %}\n\n{% docs source_bucket %}\nGrouping bucket for origin of the post (e.g. web, sms) \n{% enddocs %}\n\n{% docs created_at %}\nWhen the item was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs updated_at %}\nWhen the item was updated in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs text %}\nText of the post (e.g. \"Zoo animals and a super hero trying to help too!\") \n{% enddocs %}\n\n{% docs signup_id %}\nUnique identifier for the signup \n{% enddocs %}\n\n{% docs post_class %}\nClass of the signup (e.g. \"photo - default\", \"phone-call - DefendDreamers_Jan16_BothBodies\")\n{% enddocs %}\n\n{% docs is_accepted %}\nWhether the post has been accepted to be displayed to the public on the website\n{% enddocs %}\n\n{% docs action_id %}\nInternal identifier of the action \n{% enddocs %}\n\n{% docs location %}\nLocation where the action takes place (e.g. US-NY)\n{% enddocs %}\n\n{% docs postal_code %}\nPostal code where the action takes place\n{% enddocs %}\n\n{% docs is_reportback %}\nWhether the post is a reportback. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs civic_action %}\nWhether the post is a Civic Action. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs scholarship_entry %}\nWhether the post is a Scholarship Entry. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs why_participated %}\nWhy the user participated in this action. Entered by the user.\n{% enddocs %}\n\n{% docs details %}\nDetails about the post. Contains contentfulId and other information (e.g. {\"campaignContentfulId\":\"6ATBgGEQEeJoIcxs1qbwaC\"})\n{% enddocs %}\n\n{% docs email %}\nEmail address of the user.\n{% enddocs %}\n\n{% docs source_details %}\nDetails about the source of the item. This is sometimes represented as a JSON object, and for other tables like Turbovote its represented as a string. (e.g. \"{\"contentful_id\":\"3CTLlXfbwtz1FOMpl31SKV\",\"utm_source\":\"scholarship_listing\",\"utm_medium\":\"referral\",\"utm_campaign\":\"fastweb_2019_08\"}\", newsletter_456)\n{% enddocs %}\n\n{% docs campaign_id %}\nThis is a unique identifier for the campaign\n{% enddocs %}\n\n{% docs campaign_run_id %}\nUnique identifier for the campaign run\n{% enddocs %}\n\n{% docs campaign_name %}\nName of the campaign\n{% enddocs %}\n\n{% docs campaign_cause %}\nCampaign cause (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_run_start_date %}\nStart date of the campaign run\n{% enddocs %}\n\n{% docs campaign_run_end_date %}\nEnd date of the campaign run\n{% enddocs %}\n\n{% docs campaign_created_date %}\nWhen the campaign was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs campaign_node_id %}\nInternal unique node id for the campaign\n{% enddocs %}\n\n{% docs campaign_node_id_title %}\nCampaign title\n{% enddocs %}\n\n{% docs campaign_run_id_title %}\nTitle of the campaign run\n{% enddocs %}\n\n{% docs campaign_action_type %}\nCampaign action type (eg. Make Something, Share Something)\n{% enddocs %}\n\n{% docs campaign_cause_type %}\nCampaign cause type (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_noun %}\nNoun applicable to the user's action\n{% enddocs %}\n\n{% docs campaign_verb %}\nVerb describing the action the user should take\n{% enddocs %}\n\n{% docs campaign_cta %}\nCampaign's call to action\n{% enddocs %}\n\n{% docs campaign_language %}\n\"Language in which the campaign is available\"\n{% enddocs %}\n\n{% docs agent_id %}\nIf set, the content type of the picture the member is sending us. Exp. image/png.\n{% enddocs %}\n\n{% docs attachment_content_type %}\nIf set, the handle of the Front agent this outbound support message is from.\n{% enddocs %}\n\n{% docs topic %}\nHolds a reference to the **last** campaign topic the member's conversation was in. This is useful to allow members to talk to Gambit and get quick responses (through Rivescript), without Gambit completely forgetting what state the member's interaction with a campaign topic was in.\n{% enddocs %}\n\n{% docs action_serial_id %}\nSerial id for the user's action. Depends on the source of the action. May be the bertly click id, sms message id, etc.\n{% enddocs %}\n\n{% docs channel %}\nChannel for the user's action. Depends on the source of the action. (e.g. web, sms)\n{% enddocs %}\n\n{% docs first_action_month %}\nMonth during which the user took their first action. \n{% enddocs %}\n\n{% docs event_id %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs event_source %}\nApplication source for event (eg. Phoenix, Northstar)\n{% enddocs %}\n\n{% docs event_datetime %}\nWhen the event occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs event_name %}\nName of the event (eg. northstar_submitted_register, https://docs.google.com/spreadsheets/d/1lm-fGrIm85nUTxSojqyCt_Ehmm1zEbViFhKpxcJiz1A/edit#gid=406441516)\n{% enddocs %}\n\n{% docs event_type %}\nType of event (pv = 'Page View', se = 'Structured Event')\n{% enddocs %}\n\n{% docs host %}\nURL host where event occurred (eg. www.dosomething.org or identity.dosomething.org)\n{% enddocs %}\n\n{% docs path %}\nURL path event occurred at (eg. /login or /us/campaigns/huddle-for-heroes)\n{% enddocs %}\n\n{% docs query_parameters %}\nOptional query parameters for the request (eg. query=huddle)\n{% enddocs %}\n\n{% docs se_category %}\nCategory of event (eg. focused_field, authentication) - Custom structured event\n{% enddocs %}\n\n{% docs se_action %}\nAction performed / event name (eg. form_submitted, action_failed) - Custom structured event\n{% enddocs %}\n\n{% docs se_label %}\nThe object of the action (eg. first_name, register, voter_reg_status) - Custom structured event\n{% enddocs %}\n\n{% docs session_id %}\nUnique identifier of the user's session\n{% enddocs %}\n\n{% docs session_counter %}\nHow many sessions a user has started\n{% enddocs %}\n\n{% docs browser_size %}\nWhich type of browser a user is using (eg. Mobile, Desktop)\n{% enddocs %}\n\n{% docs northstar_id %}\nThe Northstar ID of the user who generated the event\n{% enddocs %}\n\n{% docs device_id %}\nID of the device used\n{% enddocs %}\n\n{% docs referrer_host %}\nURL host of the referring site (eg. google.com)\n{% enddocs %}\n\n{% docs referrer_path %}\nURL path from referring site (eg. /10-stats-on-teen-drug-and-alcohol-use/)\n{% enddocs %}\n\n{% docs referrer_source %}\nReferrer source name (eg. Google, Facebook)\n{% enddocs %}\n\n{% docs utm_source %}\nTracks where the traffic is coming from. (eg. scholarship_listing, Facebook)\n{% enddocs %}\n\n{% docs utm_medium %}\nHow the traffic got to the platform (eg. referral, CPC)\n{% enddocs %}\n\n{% docs utm_campaign %}\nTracks which campaign the traffic was generated by. Shows up in Google Analytics as Campaign Name (eg. editorial_newsletter)\n{% enddocs %}\n\n{% docs url %}\nURL of campaign (eg. https://dosome.click/nyn5m7)\n{% enddocs %}\n\n{% docs modal_type %}\nNULL or SURVEY_MODAL\n{% enddocs %}\n\n{% docs landing_datetime %}\nWhen the session started in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs ending_datetime %}\nWhen the session ended in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs session_duration_seconds %}\nSession duration in seconds\n{% enddocs %}\n\n{% docs num_pages_views %}\nNumber of pages viewed in session\n{% enddocs %}\n\n{% docs landing_page %}\nFirst page the user viewed in the session (eg. /us/facts/11-facts-about-bp-oil-spill)\n{% enddocs %}\n\n{% docs exit_page %}\n\"Which page the user ended or exited their session from (eg. /us/campaigns/green-your-getaway)\"\n{% enddocs %}\n\n{% docs days_since_last_session %}\n\"Days since their last session.\"\n{% enddocs %}\n\n{% docs post_type %}\nType of post, (e.g. photo, voter-reg)\n{% enddocs %}\n\n{% docs noun %}\nNoun that corresponds to the item in the call to action that was delivered. (e.g. drawings, tweets)\n{% enddocs %}\n\n{% docs verb %}\nVerb corresponding to the action the user took. (e.g. shared, sent, taken)\n{% enddocs %}\n\n{% docs deleted_at %}\nDate time in UTC when a user deleted their post.\n{% enddocs %}\n\n{% docs _fivetran_deleted %}\nMarks rows that were deleted in the source table\n{% enddocs %}\n\n{% docs _fivetran_synced %}\n(UTC timestamp) keeps track of when each row was last successfully synced\n{% enddocs %}\n\n{% docs reportback %}\nWhether the post is a reportback \n{% enddocs %}\n\n{% docs active %}\nWhether the user is active \n{% enddocs %}\n\n{% docs anonymous %}\nWhether the user is anonymous when making the post \n{% enddocs %}\n\n{% docs callpower_campaign_id %}\nUnique ID corresponding to the Callpower campaign. Callpower allows users to record messages for their representatives.\n{% enddocs %}\n\n{% docs quiz %}\nWhether the post is a quiz \n{% enddocs %}\n\n{% docs action_type %}\nType of action the user took. (e.g. share-something, donate-something)\n{% enddocs %}\n\n{% docs online %}\nWhether the action is a online as opposed to IRL.\n{% enddocs %}\n\n{% docs time_commitment %}\nEstimated time required to do the action (e.g. 3.0+, <0.5)\n{% enddocs %}\n\n{% docs num_signups %}\nQuantity of campaign signups\n{% enddocs %}\n\n{% docs most_recent_signup %}\nTimestamp of the most recent signup in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs num_rbs %}\nQuantity of reportbacks for the user\n{% enddocs %}\n\n{% docs total_quantity %}\nTotal quantity of items in reportbacks\n{% enddocs %}\n\n{% docs most_recent_rb %}\nWhen the most recent reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs first_rb %}\nWhen the first reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs avg_time_betw_rbs %}\nCalculated average time between reportbacks.\n{% enddocs %}\n\n{% docs avg_days_next_action_after_rb %}\nCalculated average days until next action after reportback\n{% enddocs %}\n\n{% docs days_to_next_action_after_last_rb %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs most_recent_mam_action %}\nMost recent monthly active member qualifying action in UTC (eg. 2018-01-01 12:00:00).\n{% enddocs %}\n\n{% docs most_recent_email_open %}\nMost recent email open in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs most_recent_all_actions %}\nMost recent timestamp of any action in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs last_action_is_rb %}\nWhether the last action the user took was a reportback\n{% enddocs %}\n\n{% docs days_since_last_action %}\nDays since the user's last action\n{% enddocs %}\n\n{% docs time_to_first_rb %}\nHow much time after registering until the user's first reportback\n{% enddocs %}\n\n{% docs sms_unsubscribed_at %}\nTimestamp of when user unsubscribed from SMS messaging\n{% enddocs %}\n\n{% docs user_unsubscribed_at %}\nTimestamp of when user unsubscribed from email or sms\n{% enddocs %}\n\n{% docs voter_reg_acquisition %}\nWhether the user was an acquisition through voter registration efforts. \n{% enddocs %}\n\n{% docs last_logged_in %}\nDate time in UTC when user last logged in to Northstar\n{% enddocs %}\n\n{% docs last_accessed %}\nDate time in UTC when user last access the website\n{% enddocs %}\n\n{% docs last_messaged_at %}\nDate time in UTC when user was last sent a message via SMS or email\n{% enddocs %}\n\n{% docs facebook_id %}\nUser's facebook id\n{% enddocs %}\n\n{% docs mobile %}\nUsers's mobile phone number\n{% enddocs %}\n\n{% docs birthdate %}\nUser's birthdate\n{% enddocs %}\n\n{% docs first_name %}\nUser's first name\n{% enddocs %}\n\n{% docs last_name %}\nUser's last name\n{% enddocs %}\n\n{% docs voter_registration_status %}\nUser's registration status. (e.g. registration_complete, confirmed, uncertain) \n{% enddocs %}\n\n{% docs finish_with_state %}\nIf the registrant was eligible to use and passed through to complete their registration with their state\u2019s OVR system, it will be indicated in this field (direct quote from Rock-The-Vote documentation). Yes/No value in field.\n{% enddocs %}\n\n{% docs reportback_volume %}\nThis field returns 1 if non voter-reg action, since campaigns team only counts those a 1 reportback. If voter-reg action, we want to count quantity of post as number of registered voters.\n{% enddocs %}\n\n{% docs address_street_1 %}\nFirst line of user's street address\n{% enddocs %}\n\n{% docs address_street_2 %}\nSecond line of user's street address\n{% enddocs %}\n\n{% docs city %}\nUser's city\n{% enddocs %}\n\n{% docs state %}\nUser's state\n{% enddocs %}\n\n{% docs country %}\nUser's country\n{% enddocs %}\n\n{% docs language %}\nUser's language\n{% enddocs %}\n\n{% docs cio_status %}\nStatus of user from CIO. (e.g. customer_subscribed, customer_unsubscribed)\n{% enddocs %}\n\n{% docs cio_status_timestamp %}\nTimestamp when users's status was updated.\n{% enddocs %}\n\n{% docs sms_status %}\nCurrent SMS status. (e.g. undeliverable, unknown)\n{% enddocs %}\n\n{% docs source_detail %}\nDetails of the origin of the user. (e.g. tell_a_friend, other, opt_in_path/197981)\n{% enddocs %}\n\n{% docs badges %}\nWhether the user has any badges. \n{% enddocs %}\n\n{% docs refer_friends %}\nWhether the user is a part of the refer a friend campaign. \n{% enddocs %}\n\n{% docs subscribed_member %}\nWhether the user is subscribed. \n{% enddocs %}\n\n{% docs last_updated_at %}\nTimestamp when users's was updated.\n{% enddocs %}\n\n{% docs school_id %}\nUnique identifier for the user's school. This info comes from the school finder.\n{% enddocs %}\n\n{% docs newsletter_topic %}\nNewsletter topic. (e.g. community, lifestyle)\n{% enddocs %}\n\n{% docs user_agent %}\nFull user agent string for a user's browser (e.g. \"Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:24.0) Gecko/20100101 Firefox/24.0\")\n{% enddocs %}\n\n{% docs drupal_id %}\nOld Drupal user ID\n{% enddocs %}\n\n{% docs campaigns %}\nCampaigns a user is signed up for.\n{% enddocs %}\n\n{% docs audit %}\nA very useful field with data containing information about changes to a user, e.g. timestamps when the user subscribed and unsubscribed.\n{% enddocs %}\n\n{% docs voting_plan_status %}\nThe indication of the user's plan to vote, e.g. voting, not_voting, cant_vote\n{% enddocs %}\n\n{% docs voting_plan_time_of_day %}\nThe time of day when the user plans to vote, e.g morning, afternoon, evening\n{% enddocs %}\n\n{% docs voting_plan_method_of_transport %}\nHow the user plans to get to their polling place. e.g. walk, drive\n{% enddocs %}\n\n{% docs voting_plan_attending_with %}\nWith Whom the user plans to go voting, e.g. family, friends, alone\n{% enddocs %}\n\n{% docs feature_flags %}\nJSON containing info on features like badges and refer-a-friend.\n{% enddocs %}\n\n{% docs dbt_updated_at %}\nDBT snapshot table data. The updated_at timestamp of the source record when this snapshot row was inserted.\n{% enddocs %}\n\n{% docs dbt_scd_id %}\nDBT snapshot table data. A unique key generated for each snapshotted record.\n{% enddocs %}\n\n{% docs dbt_valid_from %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this snapshot row was first inserted\n{% enddocs %}\n\n{% docs dbt_valid_to %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this row row became invalidated.\n{% enddocs %}\n\n{% docs google_id %}\nUser's Google ID obtained from login.\n{% enddocs %}\n\n{% docs causes %}\nCauses in which a user is interested. e.g. animal welfare, education, mental_health\n{% enddocs %}\n\n{% docs email_subscription_status %}\nEmail subscription status of the user\n{% enddocs %}\n\n{% docs role %}\nUser's role, e.g. user, staff\n{% enddocs %}\n\n{% docs cio_backfilled %}\nWhether this user's data was backfilled from CIO\n{% enddocs %}\n\n{% docs addr_source %}\nWhere the user submitted their address, e.g. sms, GDPR\n{% enddocs %}\n\n{% docs email_subscription_topics %}\nEmail subscription topics correspond to categories in CIO in which the user is interested. e.g. lifestyle, community, scholarship\n{% enddocs %}\n\n{% docs sms_paused %}\nWhether we've paused sending sms messages to the user.\n{% enddocs %}\n\n\n\n\n", "name": "se_category", "unique_id": "ds_dbt.se_category", "block_contents": "Category of event (eg. focused_field, authentication) - Custom structured event"}, "ds_dbt.se_action": {"root_path": "/Users/mrich/projects/quasar/quasar/dbt", "resource_type": "docs", "path": "schema.md", "original_file_path": "models/schema.md", "package_name": "ds_dbt", "file_contents": "\n{% docs click_id %}\nThis is a unique identifier for each click\n{% enddocs %}\n\n{% docs click_time %}\nTimestamp when user clicked.\n{% enddocs %}\n\n{% docs shortened %}\nShortened URL\n{% enddocs %}\n\n{% docs target_url %}\nURL where the user will be directed\n{% enddocs %}\n\n{% docs broadcast_id %}\nID of the broadcast that generated the shortened URL\n{% enddocs %}\n\n{% docs source %}\nSource of the URL (e.g. SMS, web), origin of the post (e.g. phoenix-web, phoenix-ashes, sms), or source where user was acquired. (e.g. sms, phoenix-next)\n{% enddocs %}\n\n{% docs interaction_type %}\nHow the user interacted with the link (e.g. preview, click)\n{% enddocs %}\n\n{% docs id %}\nUnique identifier for the post\n{% enddocs %}\n\n{% docs type %}\nType of post (e.g. photo)\n{% enddocs %}\n\n{% docs action %}\nPost action (e.g. DefendDreamers_Nov9_CongressCalls, GunViolence2018_Feb15_ParklandResponse)\n{% enddocs %}\n\n{% docs status %}\nPost status (e.g. accepted, rejected)\n{% enddocs %}\n\n{% docs quantity %}\nNumerical quantity of items specified in the call to action (e.g. 10, 200)\n{% enddocs %}\n\n{% docs source_bucket %}\nGrouping bucket for origin of the post (e.g. web, sms) \n{% enddocs %}\n\n{% docs created_at %}\nWhen the item was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs updated_at %}\nWhen the item was updated in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs text %}\nText of the post (e.g. \"Zoo animals and a super hero trying to help too!\") \n{% enddocs %}\n\n{% docs signup_id %}\nUnique identifier for the signup \n{% enddocs %}\n\n{% docs post_class %}\nClass of the signup (e.g. \"photo - default\", \"phone-call - DefendDreamers_Jan16_BothBodies\")\n{% enddocs %}\n\n{% docs is_accepted %}\nWhether the post has been accepted to be displayed to the public on the website\n{% enddocs %}\n\n{% docs action_id %}\nInternal identifier of the action \n{% enddocs %}\n\n{% docs location %}\nLocation where the action takes place (e.g. US-NY)\n{% enddocs %}\n\n{% docs postal_code %}\nPostal code where the action takes place\n{% enddocs %}\n\n{% docs is_reportback %}\nWhether the post is a reportback. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs civic_action %}\nWhether the post is a Civic Action. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs scholarship_entry %}\nWhether the post is a Scholarship Entry. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs why_participated %}\nWhy the user participated in this action. Entered by the user.\n{% enddocs %}\n\n{% docs details %}\nDetails about the post. Contains contentfulId and other information (e.g. {\"campaignContentfulId\":\"6ATBgGEQEeJoIcxs1qbwaC\"})\n{% enddocs %}\n\n{% docs email %}\nEmail address of the user.\n{% enddocs %}\n\n{% docs source_details %}\nDetails about the source of the item. This is sometimes represented as a JSON object, and for other tables like Turbovote its represented as a string. (e.g. \"{\"contentful_id\":\"3CTLlXfbwtz1FOMpl31SKV\",\"utm_source\":\"scholarship_listing\",\"utm_medium\":\"referral\",\"utm_campaign\":\"fastweb_2019_08\"}\", newsletter_456)\n{% enddocs %}\n\n{% docs campaign_id %}\nThis is a unique identifier for the campaign\n{% enddocs %}\n\n{% docs campaign_run_id %}\nUnique identifier for the campaign run\n{% enddocs %}\n\n{% docs campaign_name %}\nName of the campaign\n{% enddocs %}\n\n{% docs campaign_cause %}\nCampaign cause (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_run_start_date %}\nStart date of the campaign run\n{% enddocs %}\n\n{% docs campaign_run_end_date %}\nEnd date of the campaign run\n{% enddocs %}\n\n{% docs campaign_created_date %}\nWhen the campaign was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs campaign_node_id %}\nInternal unique node id for the campaign\n{% enddocs %}\n\n{% docs campaign_node_id_title %}\nCampaign title\n{% enddocs %}\n\n{% docs campaign_run_id_title %}\nTitle of the campaign run\n{% enddocs %}\n\n{% docs campaign_action_type %}\nCampaign action type (eg. Make Something, Share Something)\n{% enddocs %}\n\n{% docs campaign_cause_type %}\nCampaign cause type (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_noun %}\nNoun applicable to the user's action\n{% enddocs %}\n\n{% docs campaign_verb %}\nVerb describing the action the user should take\n{% enddocs %}\n\n{% docs campaign_cta %}\nCampaign's call to action\n{% enddocs %}\n\n{% docs campaign_language %}\n\"Language in which the campaign is available\"\n{% enddocs %}\n\n{% docs agent_id %}\nIf set, the content type of the picture the member is sending us. Exp. image/png.\n{% enddocs %}\n\n{% docs attachment_content_type %}\nIf set, the handle of the Front agent this outbound support message is from.\n{% enddocs %}\n\n{% docs topic %}\nHolds a reference to the **last** campaign topic the member's conversation was in. This is useful to allow members to talk to Gambit and get quick responses (through Rivescript), without Gambit completely forgetting what state the member's interaction with a campaign topic was in.\n{% enddocs %}\n\n{% docs action_serial_id %}\nSerial id for the user's action. Depends on the source of the action. May be the bertly click id, sms message id, etc.\n{% enddocs %}\n\n{% docs channel %}\nChannel for the user's action. Depends on the source of the action. (e.g. web, sms)\n{% enddocs %}\n\n{% docs first_action_month %}\nMonth during which the user took their first action. \n{% enddocs %}\n\n{% docs event_id %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs event_source %}\nApplication source for event (eg. Phoenix, Northstar)\n{% enddocs %}\n\n{% docs event_datetime %}\nWhen the event occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs event_name %}\nName of the event (eg. northstar_submitted_register, https://docs.google.com/spreadsheets/d/1lm-fGrIm85nUTxSojqyCt_Ehmm1zEbViFhKpxcJiz1A/edit#gid=406441516)\n{% enddocs %}\n\n{% docs event_type %}\nType of event (pv = 'Page View', se = 'Structured Event')\n{% enddocs %}\n\n{% docs host %}\nURL host where event occurred (eg. www.dosomething.org or identity.dosomething.org)\n{% enddocs %}\n\n{% docs path %}\nURL path event occurred at (eg. /login or /us/campaigns/huddle-for-heroes)\n{% enddocs %}\n\n{% docs query_parameters %}\nOptional query parameters for the request (eg. query=huddle)\n{% enddocs %}\n\n{% docs se_category %}\nCategory of event (eg. focused_field, authentication) - Custom structured event\n{% enddocs %}\n\n{% docs se_action %}\nAction performed / event name (eg. form_submitted, action_failed) - Custom structured event\n{% enddocs %}\n\n{% docs se_label %}\nThe object of the action (eg. first_name, register, voter_reg_status) - Custom structured event\n{% enddocs %}\n\n{% docs session_id %}\nUnique identifier of the user's session\n{% enddocs %}\n\n{% docs session_counter %}\nHow many sessions a user has started\n{% enddocs %}\n\n{% docs browser_size %}\nWhich type of browser a user is using (eg. Mobile, Desktop)\n{% enddocs %}\n\n{% docs northstar_id %}\nThe Northstar ID of the user who generated the event\n{% enddocs %}\n\n{% docs device_id %}\nID of the device used\n{% enddocs %}\n\n{% docs referrer_host %}\nURL host of the referring site (eg. google.com)\n{% enddocs %}\n\n{% docs referrer_path %}\nURL path from referring site (eg. /10-stats-on-teen-drug-and-alcohol-use/)\n{% enddocs %}\n\n{% docs referrer_source %}\nReferrer source name (eg. Google, Facebook)\n{% enddocs %}\n\n{% docs utm_source %}\nTracks where the traffic is coming from. (eg. scholarship_listing, Facebook)\n{% enddocs %}\n\n{% docs utm_medium %}\nHow the traffic got to the platform (eg. referral, CPC)\n{% enddocs %}\n\n{% docs utm_campaign %}\nTracks which campaign the traffic was generated by. Shows up in Google Analytics as Campaign Name (eg. editorial_newsletter)\n{% enddocs %}\n\n{% docs url %}\nURL of campaign (eg. https://dosome.click/nyn5m7)\n{% enddocs %}\n\n{% docs modal_type %}\nNULL or SURVEY_MODAL\n{% enddocs %}\n\n{% docs landing_datetime %}\nWhen the session started in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs ending_datetime %}\nWhen the session ended in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs session_duration_seconds %}\nSession duration in seconds\n{% enddocs %}\n\n{% docs num_pages_views %}\nNumber of pages viewed in session\n{% enddocs %}\n\n{% docs landing_page %}\nFirst page the user viewed in the session (eg. /us/facts/11-facts-about-bp-oil-spill)\n{% enddocs %}\n\n{% docs exit_page %}\n\"Which page the user ended or exited their session from (eg. /us/campaigns/green-your-getaway)\"\n{% enddocs %}\n\n{% docs days_since_last_session %}\n\"Days since their last session.\"\n{% enddocs %}\n\n{% docs post_type %}\nType of post, (e.g. photo, voter-reg)\n{% enddocs %}\n\n{% docs noun %}\nNoun that corresponds to the item in the call to action that was delivered. (e.g. drawings, tweets)\n{% enddocs %}\n\n{% docs verb %}\nVerb corresponding to the action the user took. (e.g. shared, sent, taken)\n{% enddocs %}\n\n{% docs deleted_at %}\nDate time in UTC when a user deleted their post.\n{% enddocs %}\n\n{% docs _fivetran_deleted %}\nMarks rows that were deleted in the source table\n{% enddocs %}\n\n{% docs _fivetran_synced %}\n(UTC timestamp) keeps track of when each row was last successfully synced\n{% enddocs %}\n\n{% docs reportback %}\nWhether the post is a reportback \n{% enddocs %}\n\n{% docs active %}\nWhether the user is active \n{% enddocs %}\n\n{% docs anonymous %}\nWhether the user is anonymous when making the post \n{% enddocs %}\n\n{% docs callpower_campaign_id %}\nUnique ID corresponding to the Callpower campaign. Callpower allows users to record messages for their representatives.\n{% enddocs %}\n\n{% docs quiz %}\nWhether the post is a quiz \n{% enddocs %}\n\n{% docs action_type %}\nType of action the user took. (e.g. share-something, donate-something)\n{% enddocs %}\n\n{% docs online %}\nWhether the action is a online as opposed to IRL.\n{% enddocs %}\n\n{% docs time_commitment %}\nEstimated time required to do the action (e.g. 3.0+, <0.5)\n{% enddocs %}\n\n{% docs num_signups %}\nQuantity of campaign signups\n{% enddocs %}\n\n{% docs most_recent_signup %}\nTimestamp of the most recent signup in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs num_rbs %}\nQuantity of reportbacks for the user\n{% enddocs %}\n\n{% docs total_quantity %}\nTotal quantity of items in reportbacks\n{% enddocs %}\n\n{% docs most_recent_rb %}\nWhen the most recent reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs first_rb %}\nWhen the first reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs avg_time_betw_rbs %}\nCalculated average time between reportbacks.\n{% enddocs %}\n\n{% docs avg_days_next_action_after_rb %}\nCalculated average days until next action after reportback\n{% enddocs %}\n\n{% docs days_to_next_action_after_last_rb %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs most_recent_mam_action %}\nMost recent monthly active member qualifying action in UTC (eg. 2018-01-01 12:00:00).\n{% enddocs %}\n\n{% docs most_recent_email_open %}\nMost recent email open in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs most_recent_all_actions %}\nMost recent timestamp of any action in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs last_action_is_rb %}\nWhether the last action the user took was a reportback\n{% enddocs %}\n\n{% docs days_since_last_action %}\nDays since the user's last action\n{% enddocs %}\n\n{% docs time_to_first_rb %}\nHow much time after registering until the user's first reportback\n{% enddocs %}\n\n{% docs sms_unsubscribed_at %}\nTimestamp of when user unsubscribed from SMS messaging\n{% enddocs %}\n\n{% docs user_unsubscribed_at %}\nTimestamp of when user unsubscribed from email or sms\n{% enddocs %}\n\n{% docs voter_reg_acquisition %}\nWhether the user was an acquisition through voter registration efforts. \n{% enddocs %}\n\n{% docs last_logged_in %}\nDate time in UTC when user last logged in to Northstar\n{% enddocs %}\n\n{% docs last_accessed %}\nDate time in UTC when user last access the website\n{% enddocs %}\n\n{% docs last_messaged_at %}\nDate time in UTC when user was last sent a message via SMS or email\n{% enddocs %}\n\n{% docs facebook_id %}\nUser's facebook id\n{% enddocs %}\n\n{% docs mobile %}\nUsers's mobile phone number\n{% enddocs %}\n\n{% docs birthdate %}\nUser's birthdate\n{% enddocs %}\n\n{% docs first_name %}\nUser's first name\n{% enddocs %}\n\n{% docs last_name %}\nUser's last name\n{% enddocs %}\n\n{% docs voter_registration_status %}\nUser's registration status. (e.g. registration_complete, confirmed, uncertain) \n{% enddocs %}\n\n{% docs finish_with_state %}\nIf the registrant was eligible to use and passed through to complete their registration with their state\u2019s OVR system, it will be indicated in this field (direct quote from Rock-The-Vote documentation). Yes/No value in field.\n{% enddocs %}\n\n{% docs reportback_volume %}\nThis field returns 1 if non voter-reg action, since campaigns team only counts those a 1 reportback. If voter-reg action, we want to count quantity of post as number of registered voters.\n{% enddocs %}\n\n{% docs address_street_1 %}\nFirst line of user's street address\n{% enddocs %}\n\n{% docs address_street_2 %}\nSecond line of user's street address\n{% enddocs %}\n\n{% docs city %}\nUser's city\n{% enddocs %}\n\n{% docs state %}\nUser's state\n{% enddocs %}\n\n{% docs country %}\nUser's country\n{% enddocs %}\n\n{% docs language %}\nUser's language\n{% enddocs %}\n\n{% docs cio_status %}\nStatus of user from CIO. (e.g. customer_subscribed, customer_unsubscribed)\n{% enddocs %}\n\n{% docs cio_status_timestamp %}\nTimestamp when users's status was updated.\n{% enddocs %}\n\n{% docs sms_status %}\nCurrent SMS status. (e.g. undeliverable, unknown)\n{% enddocs %}\n\n{% docs source_detail %}\nDetails of the origin of the user. (e.g. tell_a_friend, other, opt_in_path/197981)\n{% enddocs %}\n\n{% docs badges %}\nWhether the user has any badges. \n{% enddocs %}\n\n{% docs refer_friends %}\nWhether the user is a part of the refer a friend campaign. \n{% enddocs %}\n\n{% docs subscribed_member %}\nWhether the user is subscribed. \n{% enddocs %}\n\n{% docs last_updated_at %}\nTimestamp when users's was updated.\n{% enddocs %}\n\n{% docs school_id %}\nUnique identifier for the user's school. This info comes from the school finder.\n{% enddocs %}\n\n{% docs newsletter_topic %}\nNewsletter topic. (e.g. community, lifestyle)\n{% enddocs %}\n\n{% docs user_agent %}\nFull user agent string for a user's browser (e.g. \"Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:24.0) Gecko/20100101 Firefox/24.0\")\n{% enddocs %}\n\n{% docs drupal_id %}\nOld Drupal user ID\n{% enddocs %}\n\n{% docs campaigns %}\nCampaigns a user is signed up for.\n{% enddocs %}\n\n{% docs audit %}\nA very useful field with data containing information about changes to a user, e.g. timestamps when the user subscribed and unsubscribed.\n{% enddocs %}\n\n{% docs voting_plan_status %}\nThe indication of the user's plan to vote, e.g. voting, not_voting, cant_vote\n{% enddocs %}\n\n{% docs voting_plan_time_of_day %}\nThe time of day when the user plans to vote, e.g morning, afternoon, evening\n{% enddocs %}\n\n{% docs voting_plan_method_of_transport %}\nHow the user plans to get to their polling place. e.g. walk, drive\n{% enddocs %}\n\n{% docs voting_plan_attending_with %}\nWith Whom the user plans to go voting, e.g. family, friends, alone\n{% enddocs %}\n\n{% docs feature_flags %}\nJSON containing info on features like badges and refer-a-friend.\n{% enddocs %}\n\n{% docs dbt_updated_at %}\nDBT snapshot table data. The updated_at timestamp of the source record when this snapshot row was inserted.\n{% enddocs %}\n\n{% docs dbt_scd_id %}\nDBT snapshot table data. A unique key generated for each snapshotted record.\n{% enddocs %}\n\n{% docs dbt_valid_from %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this snapshot row was first inserted\n{% enddocs %}\n\n{% docs dbt_valid_to %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this row row became invalidated.\n{% enddocs %}\n\n{% docs google_id %}\nUser's Google ID obtained from login.\n{% enddocs %}\n\n{% docs causes %}\nCauses in which a user is interested. e.g. animal welfare, education, mental_health\n{% enddocs %}\n\n{% docs email_subscription_status %}\nEmail subscription status of the user\n{% enddocs %}\n\n{% docs role %}\nUser's role, e.g. user, staff\n{% enddocs %}\n\n{% docs cio_backfilled %}\nWhether this user's data was backfilled from CIO\n{% enddocs %}\n\n{% docs addr_source %}\nWhere the user submitted their address, e.g. sms, GDPR\n{% enddocs %}\n\n{% docs email_subscription_topics %}\nEmail subscription topics correspond to categories in CIO in which the user is interested. e.g. lifestyle, community, scholarship\n{% enddocs %}\n\n{% docs sms_paused %}\nWhether we've paused sending sms messages to the user.\n{% enddocs %}\n\n\n\n\n", "name": "se_action", "unique_id": "ds_dbt.se_action", "block_contents": "Action performed / event name (eg. form_submitted, action_failed) - Custom structured event"}, "ds_dbt.se_label": {"root_path": "/Users/mrich/projects/quasar/quasar/dbt", "resource_type": "docs", "path": "schema.md", "original_file_path": "models/schema.md", "package_name": "ds_dbt", "file_contents": "\n{% docs click_id %}\nThis is a unique identifier for each click\n{% enddocs %}\n\n{% docs click_time %}\nTimestamp when user clicked.\n{% enddocs %}\n\n{% docs shortened %}\nShortened URL\n{% enddocs %}\n\n{% docs target_url %}\nURL where the user will be directed\n{% enddocs %}\n\n{% docs broadcast_id %}\nID of the broadcast that generated the shortened URL\n{% enddocs %}\n\n{% docs source %}\nSource of the URL (e.g. SMS, web), origin of the post (e.g. phoenix-web, phoenix-ashes, sms), or source where user was acquired. (e.g. sms, phoenix-next)\n{% enddocs %}\n\n{% docs interaction_type %}\nHow the user interacted with the link (e.g. preview, click)\n{% enddocs %}\n\n{% docs id %}\nUnique identifier for the post\n{% enddocs %}\n\n{% docs type %}\nType of post (e.g. photo)\n{% enddocs %}\n\n{% docs action %}\nPost action (e.g. DefendDreamers_Nov9_CongressCalls, GunViolence2018_Feb15_ParklandResponse)\n{% enddocs %}\n\n{% docs status %}\nPost status (e.g. accepted, rejected)\n{% enddocs %}\n\n{% docs quantity %}\nNumerical quantity of items specified in the call to action (e.g. 10, 200)\n{% enddocs %}\n\n{% docs source_bucket %}\nGrouping bucket for origin of the post (e.g. web, sms) \n{% enddocs %}\n\n{% docs created_at %}\nWhen the item was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs updated_at %}\nWhen the item was updated in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs text %}\nText of the post (e.g. \"Zoo animals and a super hero trying to help too!\") \n{% enddocs %}\n\n{% docs signup_id %}\nUnique identifier for the signup \n{% enddocs %}\n\n{% docs post_class %}\nClass of the signup (e.g. \"photo - default\", \"phone-call - DefendDreamers_Jan16_BothBodies\")\n{% enddocs %}\n\n{% docs is_accepted %}\nWhether the post has been accepted to be displayed to the public on the website\n{% enddocs %}\n\n{% docs action_id %}\nInternal identifier of the action \n{% enddocs %}\n\n{% docs location %}\nLocation where the action takes place (e.g. US-NY)\n{% enddocs %}\n\n{% docs postal_code %}\nPostal code where the action takes place\n{% enddocs %}\n\n{% docs is_reportback %}\nWhether the post is a reportback. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs civic_action %}\nWhether the post is a Civic Action. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs scholarship_entry %}\nWhether the post is a Scholarship Entry. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs why_participated %}\nWhy the user participated in this action. Entered by the user.\n{% enddocs %}\n\n{% docs details %}\nDetails about the post. Contains contentfulId and other information (e.g. {\"campaignContentfulId\":\"6ATBgGEQEeJoIcxs1qbwaC\"})\n{% enddocs %}\n\n{% docs email %}\nEmail address of the user.\n{% enddocs %}\n\n{% docs source_details %}\nDetails about the source of the item. This is sometimes represented as a JSON object, and for other tables like Turbovote its represented as a string. (e.g. \"{\"contentful_id\":\"3CTLlXfbwtz1FOMpl31SKV\",\"utm_source\":\"scholarship_listing\",\"utm_medium\":\"referral\",\"utm_campaign\":\"fastweb_2019_08\"}\", newsletter_456)\n{% enddocs %}\n\n{% docs campaign_id %}\nThis is a unique identifier for the campaign\n{% enddocs %}\n\n{% docs campaign_run_id %}\nUnique identifier for the campaign run\n{% enddocs %}\n\n{% docs campaign_name %}\nName of the campaign\n{% enddocs %}\n\n{% docs campaign_cause %}\nCampaign cause (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_run_start_date %}\nStart date of the campaign run\n{% enddocs %}\n\n{% docs campaign_run_end_date %}\nEnd date of the campaign run\n{% enddocs %}\n\n{% docs campaign_created_date %}\nWhen the campaign was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs campaign_node_id %}\nInternal unique node id for the campaign\n{% enddocs %}\n\n{% docs campaign_node_id_title %}\nCampaign title\n{% enddocs %}\n\n{% docs campaign_run_id_title %}\nTitle of the campaign run\n{% enddocs %}\n\n{% docs campaign_action_type %}\nCampaign action type (eg. Make Something, Share Something)\n{% enddocs %}\n\n{% docs campaign_cause_type %}\nCampaign cause type (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_noun %}\nNoun applicable to the user's action\n{% enddocs %}\n\n{% docs campaign_verb %}\nVerb describing the action the user should take\n{% enddocs %}\n\n{% docs campaign_cta %}\nCampaign's call to action\n{% enddocs %}\n\n{% docs campaign_language %}\n\"Language in which the campaign is available\"\n{% enddocs %}\n\n{% docs agent_id %}\nIf set, the content type of the picture the member is sending us. Exp. image/png.\n{% enddocs %}\n\n{% docs attachment_content_type %}\nIf set, the handle of the Front agent this outbound support message is from.\n{% enddocs %}\n\n{% docs topic %}\nHolds a reference to the **last** campaign topic the member's conversation was in. This is useful to allow members to talk to Gambit and get quick responses (through Rivescript), without Gambit completely forgetting what state the member's interaction with a campaign topic was in.\n{% enddocs %}\n\n{% docs action_serial_id %}\nSerial id for the user's action. Depends on the source of the action. May be the bertly click id, sms message id, etc.\n{% enddocs %}\n\n{% docs channel %}\nChannel for the user's action. Depends on the source of the action. (e.g. web, sms)\n{% enddocs %}\n\n{% docs first_action_month %}\nMonth during which the user took their first action. \n{% enddocs %}\n\n{% docs event_id %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs event_source %}\nApplication source for event (eg. Phoenix, Northstar)\n{% enddocs %}\n\n{% docs event_datetime %}\nWhen the event occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs event_name %}\nName of the event (eg. northstar_submitted_register, https://docs.google.com/spreadsheets/d/1lm-fGrIm85nUTxSojqyCt_Ehmm1zEbViFhKpxcJiz1A/edit#gid=406441516)\n{% enddocs %}\n\n{% docs event_type %}\nType of event (pv = 'Page View', se = 'Structured Event')\n{% enddocs %}\n\n{% docs host %}\nURL host where event occurred (eg. www.dosomething.org or identity.dosomething.org)\n{% enddocs %}\n\n{% docs path %}\nURL path event occurred at (eg. /login or /us/campaigns/huddle-for-heroes)\n{% enddocs %}\n\n{% docs query_parameters %}\nOptional query parameters for the request (eg. query=huddle)\n{% enddocs %}\n\n{% docs se_category %}\nCategory of event (eg. focused_field, authentication) - Custom structured event\n{% enddocs %}\n\n{% docs se_action %}\nAction performed / event name (eg. form_submitted, action_failed) - Custom structured event\n{% enddocs %}\n\n{% docs se_label %}\nThe object of the action (eg. first_name, register, voter_reg_status) - Custom structured event\n{% enddocs %}\n\n{% docs session_id %}\nUnique identifier of the user's session\n{% enddocs %}\n\n{% docs session_counter %}\nHow many sessions a user has started\n{% enddocs %}\n\n{% docs browser_size %}\nWhich type of browser a user is using (eg. Mobile, Desktop)\n{% enddocs %}\n\n{% docs northstar_id %}\nThe Northstar ID of the user who generated the event\n{% enddocs %}\n\n{% docs device_id %}\nID of the device used\n{% enddocs %}\n\n{% docs referrer_host %}\nURL host of the referring site (eg. google.com)\n{% enddocs %}\n\n{% docs referrer_path %}\nURL path from referring site (eg. /10-stats-on-teen-drug-and-alcohol-use/)\n{% enddocs %}\n\n{% docs referrer_source %}\nReferrer source name (eg. Google, Facebook)\n{% enddocs %}\n\n{% docs utm_source %}\nTracks where the traffic is coming from. (eg. scholarship_listing, Facebook)\n{% enddocs %}\n\n{% docs utm_medium %}\nHow the traffic got to the platform (eg. referral, CPC)\n{% enddocs %}\n\n{% docs utm_campaign %}\nTracks which campaign the traffic was generated by. Shows up in Google Analytics as Campaign Name (eg. editorial_newsletter)\n{% enddocs %}\n\n{% docs url %}\nURL of campaign (eg. https://dosome.click/nyn5m7)\n{% enddocs %}\n\n{% docs modal_type %}\nNULL or SURVEY_MODAL\n{% enddocs %}\n\n{% docs landing_datetime %}\nWhen the session started in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs ending_datetime %}\nWhen the session ended in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs session_duration_seconds %}\nSession duration in seconds\n{% enddocs %}\n\n{% docs num_pages_views %}\nNumber of pages viewed in session\n{% enddocs %}\n\n{% docs landing_page %}\nFirst page the user viewed in the session (eg. /us/facts/11-facts-about-bp-oil-spill)\n{% enddocs %}\n\n{% docs exit_page %}\n\"Which page the user ended or exited their session from (eg. /us/campaigns/green-your-getaway)\"\n{% enddocs %}\n\n{% docs days_since_last_session %}\n\"Days since their last session.\"\n{% enddocs %}\n\n{% docs post_type %}\nType of post, (e.g. photo, voter-reg)\n{% enddocs %}\n\n{% docs noun %}\nNoun that corresponds to the item in the call to action that was delivered. (e.g. drawings, tweets)\n{% enddocs %}\n\n{% docs verb %}\nVerb corresponding to the action the user took. (e.g. shared, sent, taken)\n{% enddocs %}\n\n{% docs deleted_at %}\nDate time in UTC when a user deleted their post.\n{% enddocs %}\n\n{% docs _fivetran_deleted %}\nMarks rows that were deleted in the source table\n{% enddocs %}\n\n{% docs _fivetran_synced %}\n(UTC timestamp) keeps track of when each row was last successfully synced\n{% enddocs %}\n\n{% docs reportback %}\nWhether the post is a reportback \n{% enddocs %}\n\n{% docs active %}\nWhether the user is active \n{% enddocs %}\n\n{% docs anonymous %}\nWhether the user is anonymous when making the post \n{% enddocs %}\n\n{% docs callpower_campaign_id %}\nUnique ID corresponding to the Callpower campaign. Callpower allows users to record messages for their representatives.\n{% enddocs %}\n\n{% docs quiz %}\nWhether the post is a quiz \n{% enddocs %}\n\n{% docs action_type %}\nType of action the user took. (e.g. share-something, donate-something)\n{% enddocs %}\n\n{% docs online %}\nWhether the action is a online as opposed to IRL.\n{% enddocs %}\n\n{% docs time_commitment %}\nEstimated time required to do the action (e.g. 3.0+, <0.5)\n{% enddocs %}\n\n{% docs num_signups %}\nQuantity of campaign signups\n{% enddocs %}\n\n{% docs most_recent_signup %}\nTimestamp of the most recent signup in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs num_rbs %}\nQuantity of reportbacks for the user\n{% enddocs %}\n\n{% docs total_quantity %}\nTotal quantity of items in reportbacks\n{% enddocs %}\n\n{% docs most_recent_rb %}\nWhen the most recent reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs first_rb %}\nWhen the first reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs avg_time_betw_rbs %}\nCalculated average time between reportbacks.\n{% enddocs %}\n\n{% docs avg_days_next_action_after_rb %}\nCalculated average days until next action after reportback\n{% enddocs %}\n\n{% docs days_to_next_action_after_last_rb %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs most_recent_mam_action %}\nMost recent monthly active member qualifying action in UTC (eg. 2018-01-01 12:00:00).\n{% enddocs %}\n\n{% docs most_recent_email_open %}\nMost recent email open in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs most_recent_all_actions %}\nMost recent timestamp of any action in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs last_action_is_rb %}\nWhether the last action the user took was a reportback\n{% enddocs %}\n\n{% docs days_since_last_action %}\nDays since the user's last action\n{% enddocs %}\n\n{% docs time_to_first_rb %}\nHow much time after registering until the user's first reportback\n{% enddocs %}\n\n{% docs sms_unsubscribed_at %}\nTimestamp of when user unsubscribed from SMS messaging\n{% enddocs %}\n\n{% docs user_unsubscribed_at %}\nTimestamp of when user unsubscribed from email or sms\n{% enddocs %}\n\n{% docs voter_reg_acquisition %}\nWhether the user was an acquisition through voter registration efforts. \n{% enddocs %}\n\n{% docs last_logged_in %}\nDate time in UTC when user last logged in to Northstar\n{% enddocs %}\n\n{% docs last_accessed %}\nDate time in UTC when user last access the website\n{% enddocs %}\n\n{% docs last_messaged_at %}\nDate time in UTC when user was last sent a message via SMS or email\n{% enddocs %}\n\n{% docs facebook_id %}\nUser's facebook id\n{% enddocs %}\n\n{% docs mobile %}\nUsers's mobile phone number\n{% enddocs %}\n\n{% docs birthdate %}\nUser's birthdate\n{% enddocs %}\n\n{% docs first_name %}\nUser's first name\n{% enddocs %}\n\n{% docs last_name %}\nUser's last name\n{% enddocs %}\n\n{% docs voter_registration_status %}\nUser's registration status. (e.g. registration_complete, confirmed, uncertain) \n{% enddocs %}\n\n{% docs finish_with_state %}\nIf the registrant was eligible to use and passed through to complete their registration with their state\u2019s OVR system, it will be indicated in this field (direct quote from Rock-The-Vote documentation). Yes/No value in field.\n{% enddocs %}\n\n{% docs reportback_volume %}\nThis field returns 1 if non voter-reg action, since campaigns team only counts those a 1 reportback. If voter-reg action, we want to count quantity of post as number of registered voters.\n{% enddocs %}\n\n{% docs address_street_1 %}\nFirst line of user's street address\n{% enddocs %}\n\n{% docs address_street_2 %}\nSecond line of user's street address\n{% enddocs %}\n\n{% docs city %}\nUser's city\n{% enddocs %}\n\n{% docs state %}\nUser's state\n{% enddocs %}\n\n{% docs country %}\nUser's country\n{% enddocs %}\n\n{% docs language %}\nUser's language\n{% enddocs %}\n\n{% docs cio_status %}\nStatus of user from CIO. (e.g. customer_subscribed, customer_unsubscribed)\n{% enddocs %}\n\n{% docs cio_status_timestamp %}\nTimestamp when users's status was updated.\n{% enddocs %}\n\n{% docs sms_status %}\nCurrent SMS status. (e.g. undeliverable, unknown)\n{% enddocs %}\n\n{% docs source_detail %}\nDetails of the origin of the user. (e.g. tell_a_friend, other, opt_in_path/197981)\n{% enddocs %}\n\n{% docs badges %}\nWhether the user has any badges. \n{% enddocs %}\n\n{% docs refer_friends %}\nWhether the user is a part of the refer a friend campaign. \n{% enddocs %}\n\n{% docs subscribed_member %}\nWhether the user is subscribed. \n{% enddocs %}\n\n{% docs last_updated_at %}\nTimestamp when users's was updated.\n{% enddocs %}\n\n{% docs school_id %}\nUnique identifier for the user's school. This info comes from the school finder.\n{% enddocs %}\n\n{% docs newsletter_topic %}\nNewsletter topic. (e.g. community, lifestyle)\n{% enddocs %}\n\n{% docs user_agent %}\nFull user agent string for a user's browser (e.g. \"Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:24.0) Gecko/20100101 Firefox/24.0\")\n{% enddocs %}\n\n{% docs drupal_id %}\nOld Drupal user ID\n{% enddocs %}\n\n{% docs campaigns %}\nCampaigns a user is signed up for.\n{% enddocs %}\n\n{% docs audit %}\nA very useful field with data containing information about changes to a user, e.g. timestamps when the user subscribed and unsubscribed.\n{% enddocs %}\n\n{% docs voting_plan_status %}\nThe indication of the user's plan to vote, e.g. voting, not_voting, cant_vote\n{% enddocs %}\n\n{% docs voting_plan_time_of_day %}\nThe time of day when the user plans to vote, e.g morning, afternoon, evening\n{% enddocs %}\n\n{% docs voting_plan_method_of_transport %}\nHow the user plans to get to their polling place. e.g. walk, drive\n{% enddocs %}\n\n{% docs voting_plan_attending_with %}\nWith Whom the user plans to go voting, e.g. family, friends, alone\n{% enddocs %}\n\n{% docs feature_flags %}\nJSON containing info on features like badges and refer-a-friend.\n{% enddocs %}\n\n{% docs dbt_updated_at %}\nDBT snapshot table data. The updated_at timestamp of the source record when this snapshot row was inserted.\n{% enddocs %}\n\n{% docs dbt_scd_id %}\nDBT snapshot table data. A unique key generated for each snapshotted record.\n{% enddocs %}\n\n{% docs dbt_valid_from %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this snapshot row was first inserted\n{% enddocs %}\n\n{% docs dbt_valid_to %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this row row became invalidated.\n{% enddocs %}\n\n{% docs google_id %}\nUser's Google ID obtained from login.\n{% enddocs %}\n\n{% docs causes %}\nCauses in which a user is interested. e.g. animal welfare, education, mental_health\n{% enddocs %}\n\n{% docs email_subscription_status %}\nEmail subscription status of the user\n{% enddocs %}\n\n{% docs role %}\nUser's role, e.g. user, staff\n{% enddocs %}\n\n{% docs cio_backfilled %}\nWhether this user's data was backfilled from CIO\n{% enddocs %}\n\n{% docs addr_source %}\nWhere the user submitted their address, e.g. sms, GDPR\n{% enddocs %}\n\n{% docs email_subscription_topics %}\nEmail subscription topics correspond to categories in CIO in which the user is interested. e.g. lifestyle, community, scholarship\n{% enddocs %}\n\n{% docs sms_paused %}\nWhether we've paused sending sms messages to the user.\n{% enddocs %}\n\n\n\n\n", "name": "se_label", "unique_id": "ds_dbt.se_label", "block_contents": "The object of the action (eg. first_name, register, voter_reg_status) - Custom structured event"}, "ds_dbt.session_id": {"root_path": "/Users/mrich/projects/quasar/quasar/dbt", "resource_type": "docs", "path": "schema.md", "original_file_path": "models/schema.md", "package_name": "ds_dbt", "file_contents": "\n{% docs click_id %}\nThis is a unique identifier for each click\n{% enddocs %}\n\n{% docs click_time %}\nTimestamp when user clicked.\n{% enddocs %}\n\n{% docs shortened %}\nShortened URL\n{% enddocs %}\n\n{% docs target_url %}\nURL where the user will be directed\n{% enddocs %}\n\n{% docs broadcast_id %}\nID of the broadcast that generated the shortened URL\n{% enddocs %}\n\n{% docs source %}\nSource of the URL (e.g. SMS, web), origin of the post (e.g. phoenix-web, phoenix-ashes, sms), or source where user was acquired. (e.g. sms, phoenix-next)\n{% enddocs %}\n\n{% docs interaction_type %}\nHow the user interacted with the link (e.g. preview, click)\n{% enddocs %}\n\n{% docs id %}\nUnique identifier for the post\n{% enddocs %}\n\n{% docs type %}\nType of post (e.g. photo)\n{% enddocs %}\n\n{% docs action %}\nPost action (e.g. DefendDreamers_Nov9_CongressCalls, GunViolence2018_Feb15_ParklandResponse)\n{% enddocs %}\n\n{% docs status %}\nPost status (e.g. accepted, rejected)\n{% enddocs %}\n\n{% docs quantity %}\nNumerical quantity of items specified in the call to action (e.g. 10, 200)\n{% enddocs %}\n\n{% docs source_bucket %}\nGrouping bucket for origin of the post (e.g. web, sms) \n{% enddocs %}\n\n{% docs created_at %}\nWhen the item was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs updated_at %}\nWhen the item was updated in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs text %}\nText of the post (e.g. \"Zoo animals and a super hero trying to help too!\") \n{% enddocs %}\n\n{% docs signup_id %}\nUnique identifier for the signup \n{% enddocs %}\n\n{% docs post_class %}\nClass of the signup (e.g. \"photo - default\", \"phone-call - DefendDreamers_Jan16_BothBodies\")\n{% enddocs %}\n\n{% docs is_accepted %}\nWhether the post has been accepted to be displayed to the public on the website\n{% enddocs %}\n\n{% docs action_id %}\nInternal identifier of the action \n{% enddocs %}\n\n{% docs location %}\nLocation where the action takes place (e.g. US-NY)\n{% enddocs %}\n\n{% docs postal_code %}\nPostal code where the action takes place\n{% enddocs %}\n\n{% docs is_reportback %}\nWhether the post is a reportback. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs civic_action %}\nWhether the post is a Civic Action. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs scholarship_entry %}\nWhether the post is a Scholarship Entry. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs why_participated %}\nWhy the user participated in this action. Entered by the user.\n{% enddocs %}\n\n{% docs details %}\nDetails about the post. Contains contentfulId and other information (e.g. {\"campaignContentfulId\":\"6ATBgGEQEeJoIcxs1qbwaC\"})\n{% enddocs %}\n\n{% docs email %}\nEmail address of the user.\n{% enddocs %}\n\n{% docs source_details %}\nDetails about the source of the item. This is sometimes represented as a JSON object, and for other tables like Turbovote its represented as a string. (e.g. \"{\"contentful_id\":\"3CTLlXfbwtz1FOMpl31SKV\",\"utm_source\":\"scholarship_listing\",\"utm_medium\":\"referral\",\"utm_campaign\":\"fastweb_2019_08\"}\", newsletter_456)\n{% enddocs %}\n\n{% docs campaign_id %}\nThis is a unique identifier for the campaign\n{% enddocs %}\n\n{% docs campaign_run_id %}\nUnique identifier for the campaign run\n{% enddocs %}\n\n{% docs campaign_name %}\nName of the campaign\n{% enddocs %}\n\n{% docs campaign_cause %}\nCampaign cause (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_run_start_date %}\nStart date of the campaign run\n{% enddocs %}\n\n{% docs campaign_run_end_date %}\nEnd date of the campaign run\n{% enddocs %}\n\n{% docs campaign_created_date %}\nWhen the campaign was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs campaign_node_id %}\nInternal unique node id for the campaign\n{% enddocs %}\n\n{% docs campaign_node_id_title %}\nCampaign title\n{% enddocs %}\n\n{% docs campaign_run_id_title %}\nTitle of the campaign run\n{% enddocs %}\n\n{% docs campaign_action_type %}\nCampaign action type (eg. Make Something, Share Something)\n{% enddocs %}\n\n{% docs campaign_cause_type %}\nCampaign cause type (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_noun %}\nNoun applicable to the user's action\n{% enddocs %}\n\n{% docs campaign_verb %}\nVerb describing the action the user should take\n{% enddocs %}\n\n{% docs campaign_cta %}\nCampaign's call to action\n{% enddocs %}\n\n{% docs campaign_language %}\n\"Language in which the campaign is available\"\n{% enddocs %}\n\n{% docs agent_id %}\nIf set, the content type of the picture the member is sending us. Exp. image/png.\n{% enddocs %}\n\n{% docs attachment_content_type %}\nIf set, the handle of the Front agent this outbound support message is from.\n{% enddocs %}\n\n{% docs topic %}\nHolds a reference to the **last** campaign topic the member's conversation was in. This is useful to allow members to talk to Gambit and get quick responses (through Rivescript), without Gambit completely forgetting what state the member's interaction with a campaign topic was in.\n{% enddocs %}\n\n{% docs action_serial_id %}\nSerial id for the user's action. Depends on the source of the action. May be the bertly click id, sms message id, etc.\n{% enddocs %}\n\n{% docs channel %}\nChannel for the user's action. Depends on the source of the action. (e.g. web, sms)\n{% enddocs %}\n\n{% docs first_action_month %}\nMonth during which the user took their first action. \n{% enddocs %}\n\n{% docs event_id %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs event_source %}\nApplication source for event (eg. Phoenix, Northstar)\n{% enddocs %}\n\n{% docs event_datetime %}\nWhen the event occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs event_name %}\nName of the event (eg. northstar_submitted_register, https://docs.google.com/spreadsheets/d/1lm-fGrIm85nUTxSojqyCt_Ehmm1zEbViFhKpxcJiz1A/edit#gid=406441516)\n{% enddocs %}\n\n{% docs event_type %}\nType of event (pv = 'Page View', se = 'Structured Event')\n{% enddocs %}\n\n{% docs host %}\nURL host where event occurred (eg. www.dosomething.org or identity.dosomething.org)\n{% enddocs %}\n\n{% docs path %}\nURL path event occurred at (eg. /login or /us/campaigns/huddle-for-heroes)\n{% enddocs %}\n\n{% docs query_parameters %}\nOptional query parameters for the request (eg. query=huddle)\n{% enddocs %}\n\n{% docs se_category %}\nCategory of event (eg. focused_field, authentication) - Custom structured event\n{% enddocs %}\n\n{% docs se_action %}\nAction performed / event name (eg. form_submitted, action_failed) - Custom structured event\n{% enddocs %}\n\n{% docs se_label %}\nThe object of the action (eg. first_name, register, voter_reg_status) - Custom structured event\n{% enddocs %}\n\n{% docs session_id %}\nUnique identifier of the user's session\n{% enddocs %}\n\n{% docs session_counter %}\nHow many sessions a user has started\n{% enddocs %}\n\n{% docs browser_size %}\nWhich type of browser a user is using (eg. Mobile, Desktop)\n{% enddocs %}\n\n{% docs northstar_id %}\nThe Northstar ID of the user who generated the event\n{% enddocs %}\n\n{% docs device_id %}\nID of the device used\n{% enddocs %}\n\n{% docs referrer_host %}\nURL host of the referring site (eg. google.com)\n{% enddocs %}\n\n{% docs referrer_path %}\nURL path from referring site (eg. /10-stats-on-teen-drug-and-alcohol-use/)\n{% enddocs %}\n\n{% docs referrer_source %}\nReferrer source name (eg. Google, Facebook)\n{% enddocs %}\n\n{% docs utm_source %}\nTracks where the traffic is coming from. (eg. scholarship_listing, Facebook)\n{% enddocs %}\n\n{% docs utm_medium %}\nHow the traffic got to the platform (eg. referral, CPC)\n{% enddocs %}\n\n{% docs utm_campaign %}\nTracks which campaign the traffic was generated by. Shows up in Google Analytics as Campaign Name (eg. editorial_newsletter)\n{% enddocs %}\n\n{% docs url %}\nURL of campaign (eg. https://dosome.click/nyn5m7)\n{% enddocs %}\n\n{% docs modal_type %}\nNULL or SURVEY_MODAL\n{% enddocs %}\n\n{% docs landing_datetime %}\nWhen the session started in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs ending_datetime %}\nWhen the session ended in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs session_duration_seconds %}\nSession duration in seconds\n{% enddocs %}\n\n{% docs num_pages_views %}\nNumber of pages viewed in session\n{% enddocs %}\n\n{% docs landing_page %}\nFirst page the user viewed in the session (eg. /us/facts/11-facts-about-bp-oil-spill)\n{% enddocs %}\n\n{% docs exit_page %}\n\"Which page the user ended or exited their session from (eg. /us/campaigns/green-your-getaway)\"\n{% enddocs %}\n\n{% docs days_since_last_session %}\n\"Days since their last session.\"\n{% enddocs %}\n\n{% docs post_type %}\nType of post, (e.g. photo, voter-reg)\n{% enddocs %}\n\n{% docs noun %}\nNoun that corresponds to the item in the call to action that was delivered. (e.g. drawings, tweets)\n{% enddocs %}\n\n{% docs verb %}\nVerb corresponding to the action the user took. (e.g. shared, sent, taken)\n{% enddocs %}\n\n{% docs deleted_at %}\nDate time in UTC when a user deleted their post.\n{% enddocs %}\n\n{% docs _fivetran_deleted %}\nMarks rows that were deleted in the source table\n{% enddocs %}\n\n{% docs _fivetran_synced %}\n(UTC timestamp) keeps track of when each row was last successfully synced\n{% enddocs %}\n\n{% docs reportback %}\nWhether the post is a reportback \n{% enddocs %}\n\n{% docs active %}\nWhether the user is active \n{% enddocs %}\n\n{% docs anonymous %}\nWhether the user is anonymous when making the post \n{% enddocs %}\n\n{% docs callpower_campaign_id %}\nUnique ID corresponding to the Callpower campaign. Callpower allows users to record messages for their representatives.\n{% enddocs %}\n\n{% docs quiz %}\nWhether the post is a quiz \n{% enddocs %}\n\n{% docs action_type %}\nType of action the user took. (e.g. share-something, donate-something)\n{% enddocs %}\n\n{% docs online %}\nWhether the action is a online as opposed to IRL.\n{% enddocs %}\n\n{% docs time_commitment %}\nEstimated time required to do the action (e.g. 3.0+, <0.5)\n{% enddocs %}\n\n{% docs num_signups %}\nQuantity of campaign signups\n{% enddocs %}\n\n{% docs most_recent_signup %}\nTimestamp of the most recent signup in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs num_rbs %}\nQuantity of reportbacks for the user\n{% enddocs %}\n\n{% docs total_quantity %}\nTotal quantity of items in reportbacks\n{% enddocs %}\n\n{% docs most_recent_rb %}\nWhen the most recent reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs first_rb %}\nWhen the first reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs avg_time_betw_rbs %}\nCalculated average time between reportbacks.\n{% enddocs %}\n\n{% docs avg_days_next_action_after_rb %}\nCalculated average days until next action after reportback\n{% enddocs %}\n\n{% docs days_to_next_action_after_last_rb %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs most_recent_mam_action %}\nMost recent monthly active member qualifying action in UTC (eg. 2018-01-01 12:00:00).\n{% enddocs %}\n\n{% docs most_recent_email_open %}\nMost recent email open in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs most_recent_all_actions %}\nMost recent timestamp of any action in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs last_action_is_rb %}\nWhether the last action the user took was a reportback\n{% enddocs %}\n\n{% docs days_since_last_action %}\nDays since the user's last action\n{% enddocs %}\n\n{% docs time_to_first_rb %}\nHow much time after registering until the user's first reportback\n{% enddocs %}\n\n{% docs sms_unsubscribed_at %}\nTimestamp of when user unsubscribed from SMS messaging\n{% enddocs %}\n\n{% docs user_unsubscribed_at %}\nTimestamp of when user unsubscribed from email or sms\n{% enddocs %}\n\n{% docs voter_reg_acquisition %}\nWhether the user was an acquisition through voter registration efforts. \n{% enddocs %}\n\n{% docs last_logged_in %}\nDate time in UTC when user last logged in to Northstar\n{% enddocs %}\n\n{% docs last_accessed %}\nDate time in UTC when user last access the website\n{% enddocs %}\n\n{% docs last_messaged_at %}\nDate time in UTC when user was last sent a message via SMS or email\n{% enddocs %}\n\n{% docs facebook_id %}\nUser's facebook id\n{% enddocs %}\n\n{% docs mobile %}\nUsers's mobile phone number\n{% enddocs %}\n\n{% docs birthdate %}\nUser's birthdate\n{% enddocs %}\n\n{% docs first_name %}\nUser's first name\n{% enddocs %}\n\n{% docs last_name %}\nUser's last name\n{% enddocs %}\n\n{% docs voter_registration_status %}\nUser's registration status. (e.g. registration_complete, confirmed, uncertain) \n{% enddocs %}\n\n{% docs finish_with_state %}\nIf the registrant was eligible to use and passed through to complete their registration with their state\u2019s OVR system, it will be indicated in this field (direct quote from Rock-The-Vote documentation). Yes/No value in field.\n{% enddocs %}\n\n{% docs reportback_volume %}\nThis field returns 1 if non voter-reg action, since campaigns team only counts those a 1 reportback. If voter-reg action, we want to count quantity of post as number of registered voters.\n{% enddocs %}\n\n{% docs address_street_1 %}\nFirst line of user's street address\n{% enddocs %}\n\n{% docs address_street_2 %}\nSecond line of user's street address\n{% enddocs %}\n\n{% docs city %}\nUser's city\n{% enddocs %}\n\n{% docs state %}\nUser's state\n{% enddocs %}\n\n{% docs country %}\nUser's country\n{% enddocs %}\n\n{% docs language %}\nUser's language\n{% enddocs %}\n\n{% docs cio_status %}\nStatus of user from CIO. (e.g. customer_subscribed, customer_unsubscribed)\n{% enddocs %}\n\n{% docs cio_status_timestamp %}\nTimestamp when users's status was updated.\n{% enddocs %}\n\n{% docs sms_status %}\nCurrent SMS status. (e.g. undeliverable, unknown)\n{% enddocs %}\n\n{% docs source_detail %}\nDetails of the origin of the user. (e.g. tell_a_friend, other, opt_in_path/197981)\n{% enddocs %}\n\n{% docs badges %}\nWhether the user has any badges. \n{% enddocs %}\n\n{% docs refer_friends %}\nWhether the user is a part of the refer a friend campaign. \n{% enddocs %}\n\n{% docs subscribed_member %}\nWhether the user is subscribed. \n{% enddocs %}\n\n{% docs last_updated_at %}\nTimestamp when users's was updated.\n{% enddocs %}\n\n{% docs school_id %}\nUnique identifier for the user's school. This info comes from the school finder.\n{% enddocs %}\n\n{% docs newsletter_topic %}\nNewsletter topic. (e.g. community, lifestyle)\n{% enddocs %}\n\n{% docs user_agent %}\nFull user agent string for a user's browser (e.g. \"Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:24.0) Gecko/20100101 Firefox/24.0\")\n{% enddocs %}\n\n{% docs drupal_id %}\nOld Drupal user ID\n{% enddocs %}\n\n{% docs campaigns %}\nCampaigns a user is signed up for.\n{% enddocs %}\n\n{% docs audit %}\nA very useful field with data containing information about changes to a user, e.g. timestamps when the user subscribed and unsubscribed.\n{% enddocs %}\n\n{% docs voting_plan_status %}\nThe indication of the user's plan to vote, e.g. voting, not_voting, cant_vote\n{% enddocs %}\n\n{% docs voting_plan_time_of_day %}\nThe time of day when the user plans to vote, e.g morning, afternoon, evening\n{% enddocs %}\n\n{% docs voting_plan_method_of_transport %}\nHow the user plans to get to their polling place. e.g. walk, drive\n{% enddocs %}\n\n{% docs voting_plan_attending_with %}\nWith Whom the user plans to go voting, e.g. family, friends, alone\n{% enddocs %}\n\n{% docs feature_flags %}\nJSON containing info on features like badges and refer-a-friend.\n{% enddocs %}\n\n{% docs dbt_updated_at %}\nDBT snapshot table data. The updated_at timestamp of the source record when this snapshot row was inserted.\n{% enddocs %}\n\n{% docs dbt_scd_id %}\nDBT snapshot table data. A unique key generated for each snapshotted record.\n{% enddocs %}\n\n{% docs dbt_valid_from %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this snapshot row was first inserted\n{% enddocs %}\n\n{% docs dbt_valid_to %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this row row became invalidated.\n{% enddocs %}\n\n{% docs google_id %}\nUser's Google ID obtained from login.\n{% enddocs %}\n\n{% docs causes %}\nCauses in which a user is interested. e.g. animal welfare, education, mental_health\n{% enddocs %}\n\n{% docs email_subscription_status %}\nEmail subscription status of the user\n{% enddocs %}\n\n{% docs role %}\nUser's role, e.g. user, staff\n{% enddocs %}\n\n{% docs cio_backfilled %}\nWhether this user's data was backfilled from CIO\n{% enddocs %}\n\n{% docs addr_source %}\nWhere the user submitted their address, e.g. sms, GDPR\n{% enddocs %}\n\n{% docs email_subscription_topics %}\nEmail subscription topics correspond to categories in CIO in which the user is interested. e.g. lifestyle, community, scholarship\n{% enddocs %}\n\n{% docs sms_paused %}\nWhether we've paused sending sms messages to the user.\n{% enddocs %}\n\n\n\n\n", "name": "session_id", "unique_id": "ds_dbt.session_id", "block_contents": "Unique identifier of the user's session"}, "ds_dbt.session_counter": {"root_path": "/Users/mrich/projects/quasar/quasar/dbt", "resource_type": "docs", "path": "schema.md", "original_file_path": "models/schema.md", "package_name": "ds_dbt", "file_contents": "\n{% docs click_id %}\nThis is a unique identifier for each click\n{% enddocs %}\n\n{% docs click_time %}\nTimestamp when user clicked.\n{% enddocs %}\n\n{% docs shortened %}\nShortened URL\n{% enddocs %}\n\n{% docs target_url %}\nURL where the user will be directed\n{% enddocs %}\n\n{% docs broadcast_id %}\nID of the broadcast that generated the shortened URL\n{% enddocs %}\n\n{% docs source %}\nSource of the URL (e.g. SMS, web), origin of the post (e.g. phoenix-web, phoenix-ashes, sms), or source where user was acquired. (e.g. sms, phoenix-next)\n{% enddocs %}\n\n{% docs interaction_type %}\nHow the user interacted with the link (e.g. preview, click)\n{% enddocs %}\n\n{% docs id %}\nUnique identifier for the post\n{% enddocs %}\n\n{% docs type %}\nType of post (e.g. photo)\n{% enddocs %}\n\n{% docs action %}\nPost action (e.g. DefendDreamers_Nov9_CongressCalls, GunViolence2018_Feb15_ParklandResponse)\n{% enddocs %}\n\n{% docs status %}\nPost status (e.g. accepted, rejected)\n{% enddocs %}\n\n{% docs quantity %}\nNumerical quantity of items specified in the call to action (e.g. 10, 200)\n{% enddocs %}\n\n{% docs source_bucket %}\nGrouping bucket for origin of the post (e.g. web, sms) \n{% enddocs %}\n\n{% docs created_at %}\nWhen the item was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs updated_at %}\nWhen the item was updated in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs text %}\nText of the post (e.g. \"Zoo animals and a super hero trying to help too!\") \n{% enddocs %}\n\n{% docs signup_id %}\nUnique identifier for the signup \n{% enddocs %}\n\n{% docs post_class %}\nClass of the signup (e.g. \"photo - default\", \"phone-call - DefendDreamers_Jan16_BothBodies\")\n{% enddocs %}\n\n{% docs is_accepted %}\nWhether the post has been accepted to be displayed to the public on the website\n{% enddocs %}\n\n{% docs action_id %}\nInternal identifier of the action \n{% enddocs %}\n\n{% docs location %}\nLocation where the action takes place (e.g. US-NY)\n{% enddocs %}\n\n{% docs postal_code %}\nPostal code where the action takes place\n{% enddocs %}\n\n{% docs is_reportback %}\nWhether the post is a reportback. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs civic_action %}\nWhether the post is a Civic Action. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs scholarship_entry %}\nWhether the post is a Scholarship Entry. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs why_participated %}\nWhy the user participated in this action. Entered by the user.\n{% enddocs %}\n\n{% docs details %}\nDetails about the post. Contains contentfulId and other information (e.g. {\"campaignContentfulId\":\"6ATBgGEQEeJoIcxs1qbwaC\"})\n{% enddocs %}\n\n{% docs email %}\nEmail address of the user.\n{% enddocs %}\n\n{% docs source_details %}\nDetails about the source of the item. This is sometimes represented as a JSON object, and for other tables like Turbovote its represented as a string. (e.g. \"{\"contentful_id\":\"3CTLlXfbwtz1FOMpl31SKV\",\"utm_source\":\"scholarship_listing\",\"utm_medium\":\"referral\",\"utm_campaign\":\"fastweb_2019_08\"}\", newsletter_456)\n{% enddocs %}\n\n{% docs campaign_id %}\nThis is a unique identifier for the campaign\n{% enddocs %}\n\n{% docs campaign_run_id %}\nUnique identifier for the campaign run\n{% enddocs %}\n\n{% docs campaign_name %}\nName of the campaign\n{% enddocs %}\n\n{% docs campaign_cause %}\nCampaign cause (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_run_start_date %}\nStart date of the campaign run\n{% enddocs %}\n\n{% docs campaign_run_end_date %}\nEnd date of the campaign run\n{% enddocs %}\n\n{% docs campaign_created_date %}\nWhen the campaign was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs campaign_node_id %}\nInternal unique node id for the campaign\n{% enddocs %}\n\n{% docs campaign_node_id_title %}\nCampaign title\n{% enddocs %}\n\n{% docs campaign_run_id_title %}\nTitle of the campaign run\n{% enddocs %}\n\n{% docs campaign_action_type %}\nCampaign action type (eg. Make Something, Share Something)\n{% enddocs %}\n\n{% docs campaign_cause_type %}\nCampaign cause type (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_noun %}\nNoun applicable to the user's action\n{% enddocs %}\n\n{% docs campaign_verb %}\nVerb describing the action the user should take\n{% enddocs %}\n\n{% docs campaign_cta %}\nCampaign's call to action\n{% enddocs %}\n\n{% docs campaign_language %}\n\"Language in which the campaign is available\"\n{% enddocs %}\n\n{% docs agent_id %}\nIf set, the content type of the picture the member is sending us. Exp. image/png.\n{% enddocs %}\n\n{% docs attachment_content_type %}\nIf set, the handle of the Front agent this outbound support message is from.\n{% enddocs %}\n\n{% docs topic %}\nHolds a reference to the **last** campaign topic the member's conversation was in. This is useful to allow members to talk to Gambit and get quick responses (through Rivescript), without Gambit completely forgetting what state the member's interaction with a campaign topic was in.\n{% enddocs %}\n\n{% docs action_serial_id %}\nSerial id for the user's action. Depends on the source of the action. May be the bertly click id, sms message id, etc.\n{% enddocs %}\n\n{% docs channel %}\nChannel for the user's action. Depends on the source of the action. (e.g. web, sms)\n{% enddocs %}\n\n{% docs first_action_month %}\nMonth during which the user took their first action. \n{% enddocs %}\n\n{% docs event_id %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs event_source %}\nApplication source for event (eg. Phoenix, Northstar)\n{% enddocs %}\n\n{% docs event_datetime %}\nWhen the event occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs event_name %}\nName of the event (eg. northstar_submitted_register, https://docs.google.com/spreadsheets/d/1lm-fGrIm85nUTxSojqyCt_Ehmm1zEbViFhKpxcJiz1A/edit#gid=406441516)\n{% enddocs %}\n\n{% docs event_type %}\nType of event (pv = 'Page View', se = 'Structured Event')\n{% enddocs %}\n\n{% docs host %}\nURL host where event occurred (eg. www.dosomething.org or identity.dosomething.org)\n{% enddocs %}\n\n{% docs path %}\nURL path event occurred at (eg. /login or /us/campaigns/huddle-for-heroes)\n{% enddocs %}\n\n{% docs query_parameters %}\nOptional query parameters for the request (eg. query=huddle)\n{% enddocs %}\n\n{% docs se_category %}\nCategory of event (eg. focused_field, authentication) - Custom structured event\n{% enddocs %}\n\n{% docs se_action %}\nAction performed / event name (eg. form_submitted, action_failed) - Custom structured event\n{% enddocs %}\n\n{% docs se_label %}\nThe object of the action (eg. first_name, register, voter_reg_status) - Custom structured event\n{% enddocs %}\n\n{% docs session_id %}\nUnique identifier of the user's session\n{% enddocs %}\n\n{% docs session_counter %}\nHow many sessions a user has started\n{% enddocs %}\n\n{% docs browser_size %}\nWhich type of browser a user is using (eg. Mobile, Desktop)\n{% enddocs %}\n\n{% docs northstar_id %}\nThe Northstar ID of the user who generated the event\n{% enddocs %}\n\n{% docs device_id %}\nID of the device used\n{% enddocs %}\n\n{% docs referrer_host %}\nURL host of the referring site (eg. google.com)\n{% enddocs %}\n\n{% docs referrer_path %}\nURL path from referring site (eg. /10-stats-on-teen-drug-and-alcohol-use/)\n{% enddocs %}\n\n{% docs referrer_source %}\nReferrer source name (eg. Google, Facebook)\n{% enddocs %}\n\n{% docs utm_source %}\nTracks where the traffic is coming from. (eg. scholarship_listing, Facebook)\n{% enddocs %}\n\n{% docs utm_medium %}\nHow the traffic got to the platform (eg. referral, CPC)\n{% enddocs %}\n\n{% docs utm_campaign %}\nTracks which campaign the traffic was generated by. Shows up in Google Analytics as Campaign Name (eg. editorial_newsletter)\n{% enddocs %}\n\n{% docs url %}\nURL of campaign (eg. https://dosome.click/nyn5m7)\n{% enddocs %}\n\n{% docs modal_type %}\nNULL or SURVEY_MODAL\n{% enddocs %}\n\n{% docs landing_datetime %}\nWhen the session started in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs ending_datetime %}\nWhen the session ended in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs session_duration_seconds %}\nSession duration in seconds\n{% enddocs %}\n\n{% docs num_pages_views %}\nNumber of pages viewed in session\n{% enddocs %}\n\n{% docs landing_page %}\nFirst page the user viewed in the session (eg. /us/facts/11-facts-about-bp-oil-spill)\n{% enddocs %}\n\n{% docs exit_page %}\n\"Which page the user ended or exited their session from (eg. /us/campaigns/green-your-getaway)\"\n{% enddocs %}\n\n{% docs days_since_last_session %}\n\"Days since their last session.\"\n{% enddocs %}\n\n{% docs post_type %}\nType of post, (e.g. photo, voter-reg)\n{% enddocs %}\n\n{% docs noun %}\nNoun that corresponds to the item in the call to action that was delivered. (e.g. drawings, tweets)\n{% enddocs %}\n\n{% docs verb %}\nVerb corresponding to the action the user took. (e.g. shared, sent, taken)\n{% enddocs %}\n\n{% docs deleted_at %}\nDate time in UTC when a user deleted their post.\n{% enddocs %}\n\n{% docs _fivetran_deleted %}\nMarks rows that were deleted in the source table\n{% enddocs %}\n\n{% docs _fivetran_synced %}\n(UTC timestamp) keeps track of when each row was last successfully synced\n{% enddocs %}\n\n{% docs reportback %}\nWhether the post is a reportback \n{% enddocs %}\n\n{% docs active %}\nWhether the user is active \n{% enddocs %}\n\n{% docs anonymous %}\nWhether the user is anonymous when making the post \n{% enddocs %}\n\n{% docs callpower_campaign_id %}\nUnique ID corresponding to the Callpower campaign. Callpower allows users to record messages for their representatives.\n{% enddocs %}\n\n{% docs quiz %}\nWhether the post is a quiz \n{% enddocs %}\n\n{% docs action_type %}\nType of action the user took. (e.g. share-something, donate-something)\n{% enddocs %}\n\n{% docs online %}\nWhether the action is a online as opposed to IRL.\n{% enddocs %}\n\n{% docs time_commitment %}\nEstimated time required to do the action (e.g. 3.0+, <0.5)\n{% enddocs %}\n\n{% docs num_signups %}\nQuantity of campaign signups\n{% enddocs %}\n\n{% docs most_recent_signup %}\nTimestamp of the most recent signup in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs num_rbs %}\nQuantity of reportbacks for the user\n{% enddocs %}\n\n{% docs total_quantity %}\nTotal quantity of items in reportbacks\n{% enddocs %}\n\n{% docs most_recent_rb %}\nWhen the most recent reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs first_rb %}\nWhen the first reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs avg_time_betw_rbs %}\nCalculated average time between reportbacks.\n{% enddocs %}\n\n{% docs avg_days_next_action_after_rb %}\nCalculated average days until next action after reportback\n{% enddocs %}\n\n{% docs days_to_next_action_after_last_rb %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs most_recent_mam_action %}\nMost recent monthly active member qualifying action in UTC (eg. 2018-01-01 12:00:00).\n{% enddocs %}\n\n{% docs most_recent_email_open %}\nMost recent email open in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs most_recent_all_actions %}\nMost recent timestamp of any action in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs last_action_is_rb %}\nWhether the last action the user took was a reportback\n{% enddocs %}\n\n{% docs days_since_last_action %}\nDays since the user's last action\n{% enddocs %}\n\n{% docs time_to_first_rb %}\nHow much time after registering until the user's first reportback\n{% enddocs %}\n\n{% docs sms_unsubscribed_at %}\nTimestamp of when user unsubscribed from SMS messaging\n{% enddocs %}\n\n{% docs user_unsubscribed_at %}\nTimestamp of when user unsubscribed from email or sms\n{% enddocs %}\n\n{% docs voter_reg_acquisition %}\nWhether the user was an acquisition through voter registration efforts. \n{% enddocs %}\n\n{% docs last_logged_in %}\nDate time in UTC when user last logged in to Northstar\n{% enddocs %}\n\n{% docs last_accessed %}\nDate time in UTC when user last access the website\n{% enddocs %}\n\n{% docs last_messaged_at %}\nDate time in UTC when user was last sent a message via SMS or email\n{% enddocs %}\n\n{% docs facebook_id %}\nUser's facebook id\n{% enddocs %}\n\n{% docs mobile %}\nUsers's mobile phone number\n{% enddocs %}\n\n{% docs birthdate %}\nUser's birthdate\n{% enddocs %}\n\n{% docs first_name %}\nUser's first name\n{% enddocs %}\n\n{% docs last_name %}\nUser's last name\n{% enddocs %}\n\n{% docs voter_registration_status %}\nUser's registration status. (e.g. registration_complete, confirmed, uncertain) \n{% enddocs %}\n\n{% docs finish_with_state %}\nIf the registrant was eligible to use and passed through to complete their registration with their state\u2019s OVR system, it will be indicated in this field (direct quote from Rock-The-Vote documentation). Yes/No value in field.\n{% enddocs %}\n\n{% docs reportback_volume %}\nThis field returns 1 if non voter-reg action, since campaigns team only counts those a 1 reportback. If voter-reg action, we want to count quantity of post as number of registered voters.\n{% enddocs %}\n\n{% docs address_street_1 %}\nFirst line of user's street address\n{% enddocs %}\n\n{% docs address_street_2 %}\nSecond line of user's street address\n{% enddocs %}\n\n{% docs city %}\nUser's city\n{% enddocs %}\n\n{% docs state %}\nUser's state\n{% enddocs %}\n\n{% docs country %}\nUser's country\n{% enddocs %}\n\n{% docs language %}\nUser's language\n{% enddocs %}\n\n{% docs cio_status %}\nStatus of user from CIO. (e.g. customer_subscribed, customer_unsubscribed)\n{% enddocs %}\n\n{% docs cio_status_timestamp %}\nTimestamp when users's status was updated.\n{% enddocs %}\n\n{% docs sms_status %}\nCurrent SMS status. (e.g. undeliverable, unknown)\n{% enddocs %}\n\n{% docs source_detail %}\nDetails of the origin of the user. (e.g. tell_a_friend, other, opt_in_path/197981)\n{% enddocs %}\n\n{% docs badges %}\nWhether the user has any badges. \n{% enddocs %}\n\n{% docs refer_friends %}\nWhether the user is a part of the refer a friend campaign. \n{% enddocs %}\n\n{% docs subscribed_member %}\nWhether the user is subscribed. \n{% enddocs %}\n\n{% docs last_updated_at %}\nTimestamp when users's was updated.\n{% enddocs %}\n\n{% docs school_id %}\nUnique identifier for the user's school. This info comes from the school finder.\n{% enddocs %}\n\n{% docs newsletter_topic %}\nNewsletter topic. (e.g. community, lifestyle)\n{% enddocs %}\n\n{% docs user_agent %}\nFull user agent string for a user's browser (e.g. \"Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:24.0) Gecko/20100101 Firefox/24.0\")\n{% enddocs %}\n\n{% docs drupal_id %}\nOld Drupal user ID\n{% enddocs %}\n\n{% docs campaigns %}\nCampaigns a user is signed up for.\n{% enddocs %}\n\n{% docs audit %}\nA very useful field with data containing information about changes to a user, e.g. timestamps when the user subscribed and unsubscribed.\n{% enddocs %}\n\n{% docs voting_plan_status %}\nThe indication of the user's plan to vote, e.g. voting, not_voting, cant_vote\n{% enddocs %}\n\n{% docs voting_plan_time_of_day %}\nThe time of day when the user plans to vote, e.g morning, afternoon, evening\n{% enddocs %}\n\n{% docs voting_plan_method_of_transport %}\nHow the user plans to get to their polling place. e.g. walk, drive\n{% enddocs %}\n\n{% docs voting_plan_attending_with %}\nWith Whom the user plans to go voting, e.g. family, friends, alone\n{% enddocs %}\n\n{% docs feature_flags %}\nJSON containing info on features like badges and refer-a-friend.\n{% enddocs %}\n\n{% docs dbt_updated_at %}\nDBT snapshot table data. The updated_at timestamp of the source record when this snapshot row was inserted.\n{% enddocs %}\n\n{% docs dbt_scd_id %}\nDBT snapshot table data. A unique key generated for each snapshotted record.\n{% enddocs %}\n\n{% docs dbt_valid_from %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this snapshot row was first inserted\n{% enddocs %}\n\n{% docs dbt_valid_to %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this row row became invalidated.\n{% enddocs %}\n\n{% docs google_id %}\nUser's Google ID obtained from login.\n{% enddocs %}\n\n{% docs causes %}\nCauses in which a user is interested. e.g. animal welfare, education, mental_health\n{% enddocs %}\n\n{% docs email_subscription_status %}\nEmail subscription status of the user\n{% enddocs %}\n\n{% docs role %}\nUser's role, e.g. user, staff\n{% enddocs %}\n\n{% docs cio_backfilled %}\nWhether this user's data was backfilled from CIO\n{% enddocs %}\n\n{% docs addr_source %}\nWhere the user submitted their address, e.g. sms, GDPR\n{% enddocs %}\n\n{% docs email_subscription_topics %}\nEmail subscription topics correspond to categories in CIO in which the user is interested. e.g. lifestyle, community, scholarship\n{% enddocs %}\n\n{% docs sms_paused %}\nWhether we've paused sending sms messages to the user.\n{% enddocs %}\n\n\n\n\n", "name": "session_counter", "unique_id": "ds_dbt.session_counter", "block_contents": "How many sessions a user has started"}, "ds_dbt.browser_size": {"root_path": "/Users/mrich/projects/quasar/quasar/dbt", "resource_type": "docs", "path": "schema.md", "original_file_path": "models/schema.md", "package_name": "ds_dbt", "file_contents": "\n{% docs click_id %}\nThis is a unique identifier for each click\n{% enddocs %}\n\n{% docs click_time %}\nTimestamp when user clicked.\n{% enddocs %}\n\n{% docs shortened %}\nShortened URL\n{% enddocs %}\n\n{% docs target_url %}\nURL where the user will be directed\n{% enddocs %}\n\n{% docs broadcast_id %}\nID of the broadcast that generated the shortened URL\n{% enddocs %}\n\n{% docs source %}\nSource of the URL (e.g. SMS, web), origin of the post (e.g. phoenix-web, phoenix-ashes, sms), or source where user was acquired. (e.g. sms, phoenix-next)\n{% enddocs %}\n\n{% docs interaction_type %}\nHow the user interacted with the link (e.g. preview, click)\n{% enddocs %}\n\n{% docs id %}\nUnique identifier for the post\n{% enddocs %}\n\n{% docs type %}\nType of post (e.g. photo)\n{% enddocs %}\n\n{% docs action %}\nPost action (e.g. DefendDreamers_Nov9_CongressCalls, GunViolence2018_Feb15_ParklandResponse)\n{% enddocs %}\n\n{% docs status %}\nPost status (e.g. accepted, rejected)\n{% enddocs %}\n\n{% docs quantity %}\nNumerical quantity of items specified in the call to action (e.g. 10, 200)\n{% enddocs %}\n\n{% docs source_bucket %}\nGrouping bucket for origin of the post (e.g. web, sms) \n{% enddocs %}\n\n{% docs created_at %}\nWhen the item was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs updated_at %}\nWhen the item was updated in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs text %}\nText of the post (e.g. \"Zoo animals and a super hero trying to help too!\") \n{% enddocs %}\n\n{% docs signup_id %}\nUnique identifier for the signup \n{% enddocs %}\n\n{% docs post_class %}\nClass of the signup (e.g. \"photo - default\", \"phone-call - DefendDreamers_Jan16_BothBodies\")\n{% enddocs %}\n\n{% docs is_accepted %}\nWhether the post has been accepted to be displayed to the public on the website\n{% enddocs %}\n\n{% docs action_id %}\nInternal identifier of the action \n{% enddocs %}\n\n{% docs location %}\nLocation where the action takes place (e.g. US-NY)\n{% enddocs %}\n\n{% docs postal_code %}\nPostal code where the action takes place\n{% enddocs %}\n\n{% docs is_reportback %}\nWhether the post is a reportback. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs civic_action %}\nWhether the post is a Civic Action. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs scholarship_entry %}\nWhether the post is a Scholarship Entry. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs why_participated %}\nWhy the user participated in this action. Entered by the user.\n{% enddocs %}\n\n{% docs details %}\nDetails about the post. Contains contentfulId and other information (e.g. {\"campaignContentfulId\":\"6ATBgGEQEeJoIcxs1qbwaC\"})\n{% enddocs %}\n\n{% docs email %}\nEmail address of the user.\n{% enddocs %}\n\n{% docs source_details %}\nDetails about the source of the item. This is sometimes represented as a JSON object, and for other tables like Turbovote its represented as a string. (e.g. \"{\"contentful_id\":\"3CTLlXfbwtz1FOMpl31SKV\",\"utm_source\":\"scholarship_listing\",\"utm_medium\":\"referral\",\"utm_campaign\":\"fastweb_2019_08\"}\", newsletter_456)\n{% enddocs %}\n\n{% docs campaign_id %}\nThis is a unique identifier for the campaign\n{% enddocs %}\n\n{% docs campaign_run_id %}\nUnique identifier for the campaign run\n{% enddocs %}\n\n{% docs campaign_name %}\nName of the campaign\n{% enddocs %}\n\n{% docs campaign_cause %}\nCampaign cause (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_run_start_date %}\nStart date of the campaign run\n{% enddocs %}\n\n{% docs campaign_run_end_date %}\nEnd date of the campaign run\n{% enddocs %}\n\n{% docs campaign_created_date %}\nWhen the campaign was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs campaign_node_id %}\nInternal unique node id for the campaign\n{% enddocs %}\n\n{% docs campaign_node_id_title %}\nCampaign title\n{% enddocs %}\n\n{% docs campaign_run_id_title %}\nTitle of the campaign run\n{% enddocs %}\n\n{% docs campaign_action_type %}\nCampaign action type (eg. Make Something, Share Something)\n{% enddocs %}\n\n{% docs campaign_cause_type %}\nCampaign cause type (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_noun %}\nNoun applicable to the user's action\n{% enddocs %}\n\n{% docs campaign_verb %}\nVerb describing the action the user should take\n{% enddocs %}\n\n{% docs campaign_cta %}\nCampaign's call to action\n{% enddocs %}\n\n{% docs campaign_language %}\n\"Language in which the campaign is available\"\n{% enddocs %}\n\n{% docs agent_id %}\nIf set, the content type of the picture the member is sending us. Exp. image/png.\n{% enddocs %}\n\n{% docs attachment_content_type %}\nIf set, the handle of the Front agent this outbound support message is from.\n{% enddocs %}\n\n{% docs topic %}\nHolds a reference to the **last** campaign topic the member's conversation was in. This is useful to allow members to talk to Gambit and get quick responses (through Rivescript), without Gambit completely forgetting what state the member's interaction with a campaign topic was in.\n{% enddocs %}\n\n{% docs action_serial_id %}\nSerial id for the user's action. Depends on the source of the action. May be the bertly click id, sms message id, etc.\n{% enddocs %}\n\n{% docs channel %}\nChannel for the user's action. Depends on the source of the action. (e.g. web, sms)\n{% enddocs %}\n\n{% docs first_action_month %}\nMonth during which the user took their first action. \n{% enddocs %}\n\n{% docs event_id %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs event_source %}\nApplication source for event (eg. Phoenix, Northstar)\n{% enddocs %}\n\n{% docs event_datetime %}\nWhen the event occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs event_name %}\nName of the event (eg. northstar_submitted_register, https://docs.google.com/spreadsheets/d/1lm-fGrIm85nUTxSojqyCt_Ehmm1zEbViFhKpxcJiz1A/edit#gid=406441516)\n{% enddocs %}\n\n{% docs event_type %}\nType of event (pv = 'Page View', se = 'Structured Event')\n{% enddocs %}\n\n{% docs host %}\nURL host where event occurred (eg. www.dosomething.org or identity.dosomething.org)\n{% enddocs %}\n\n{% docs path %}\nURL path event occurred at (eg. /login or /us/campaigns/huddle-for-heroes)\n{% enddocs %}\n\n{% docs query_parameters %}\nOptional query parameters for the request (eg. query=huddle)\n{% enddocs %}\n\n{% docs se_category %}\nCategory of event (eg. focused_field, authentication) - Custom structured event\n{% enddocs %}\n\n{% docs se_action %}\nAction performed / event name (eg. form_submitted, action_failed) - Custom structured event\n{% enddocs %}\n\n{% docs se_label %}\nThe object of the action (eg. first_name, register, voter_reg_status) - Custom structured event\n{% enddocs %}\n\n{% docs session_id %}\nUnique identifier of the user's session\n{% enddocs %}\n\n{% docs session_counter %}\nHow many sessions a user has started\n{% enddocs %}\n\n{% docs browser_size %}\nWhich type of browser a user is using (eg. Mobile, Desktop)\n{% enddocs %}\n\n{% docs northstar_id %}\nThe Northstar ID of the user who generated the event\n{% enddocs %}\n\n{% docs device_id %}\nID of the device used\n{% enddocs %}\n\n{% docs referrer_host %}\nURL host of the referring site (eg. google.com)\n{% enddocs %}\n\n{% docs referrer_path %}\nURL path from referring site (eg. /10-stats-on-teen-drug-and-alcohol-use/)\n{% enddocs %}\n\n{% docs referrer_source %}\nReferrer source name (eg. Google, Facebook)\n{% enddocs %}\n\n{% docs utm_source %}\nTracks where the traffic is coming from. (eg. scholarship_listing, Facebook)\n{% enddocs %}\n\n{% docs utm_medium %}\nHow the traffic got to the platform (eg. referral, CPC)\n{% enddocs %}\n\n{% docs utm_campaign %}\nTracks which campaign the traffic was generated by. Shows up in Google Analytics as Campaign Name (eg. editorial_newsletter)\n{% enddocs %}\n\n{% docs url %}\nURL of campaign (eg. https://dosome.click/nyn5m7)\n{% enddocs %}\n\n{% docs modal_type %}\nNULL or SURVEY_MODAL\n{% enddocs %}\n\n{% docs landing_datetime %}\nWhen the session started in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs ending_datetime %}\nWhen the session ended in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs session_duration_seconds %}\nSession duration in seconds\n{% enddocs %}\n\n{% docs num_pages_views %}\nNumber of pages viewed in session\n{% enddocs %}\n\n{% docs landing_page %}\nFirst page the user viewed in the session (eg. /us/facts/11-facts-about-bp-oil-spill)\n{% enddocs %}\n\n{% docs exit_page %}\n\"Which page the user ended or exited their session from (eg. /us/campaigns/green-your-getaway)\"\n{% enddocs %}\n\n{% docs days_since_last_session %}\n\"Days since their last session.\"\n{% enddocs %}\n\n{% docs post_type %}\nType of post, (e.g. photo, voter-reg)\n{% enddocs %}\n\n{% docs noun %}\nNoun that corresponds to the item in the call to action that was delivered. (e.g. drawings, tweets)\n{% enddocs %}\n\n{% docs verb %}\nVerb corresponding to the action the user took. (e.g. shared, sent, taken)\n{% enddocs %}\n\n{% docs deleted_at %}\nDate time in UTC when a user deleted their post.\n{% enddocs %}\n\n{% docs _fivetran_deleted %}\nMarks rows that were deleted in the source table\n{% enddocs %}\n\n{% docs _fivetran_synced %}\n(UTC timestamp) keeps track of when each row was last successfully synced\n{% enddocs %}\n\n{% docs reportback %}\nWhether the post is a reportback \n{% enddocs %}\n\n{% docs active %}\nWhether the user is active \n{% enddocs %}\n\n{% docs anonymous %}\nWhether the user is anonymous when making the post \n{% enddocs %}\n\n{% docs callpower_campaign_id %}\nUnique ID corresponding to the Callpower campaign. Callpower allows users to record messages for their representatives.\n{% enddocs %}\n\n{% docs quiz %}\nWhether the post is a quiz \n{% enddocs %}\n\n{% docs action_type %}\nType of action the user took. (e.g. share-something, donate-something)\n{% enddocs %}\n\n{% docs online %}\nWhether the action is a online as opposed to IRL.\n{% enddocs %}\n\n{% docs time_commitment %}\nEstimated time required to do the action (e.g. 3.0+, <0.5)\n{% enddocs %}\n\n{% docs num_signups %}\nQuantity of campaign signups\n{% enddocs %}\n\n{% docs most_recent_signup %}\nTimestamp of the most recent signup in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs num_rbs %}\nQuantity of reportbacks for the user\n{% enddocs %}\n\n{% docs total_quantity %}\nTotal quantity of items in reportbacks\n{% enddocs %}\n\n{% docs most_recent_rb %}\nWhen the most recent reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs first_rb %}\nWhen the first reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs avg_time_betw_rbs %}\nCalculated average time between reportbacks.\n{% enddocs %}\n\n{% docs avg_days_next_action_after_rb %}\nCalculated average days until next action after reportback\n{% enddocs %}\n\n{% docs days_to_next_action_after_last_rb %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs most_recent_mam_action %}\nMost recent monthly active member qualifying action in UTC (eg. 2018-01-01 12:00:00).\n{% enddocs %}\n\n{% docs most_recent_email_open %}\nMost recent email open in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs most_recent_all_actions %}\nMost recent timestamp of any action in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs last_action_is_rb %}\nWhether the last action the user took was a reportback\n{% enddocs %}\n\n{% docs days_since_last_action %}\nDays since the user's last action\n{% enddocs %}\n\n{% docs time_to_first_rb %}\nHow much time after registering until the user's first reportback\n{% enddocs %}\n\n{% docs sms_unsubscribed_at %}\nTimestamp of when user unsubscribed from SMS messaging\n{% enddocs %}\n\n{% docs user_unsubscribed_at %}\nTimestamp of when user unsubscribed from email or sms\n{% enddocs %}\n\n{% docs voter_reg_acquisition %}\nWhether the user was an acquisition through voter registration efforts. \n{% enddocs %}\n\n{% docs last_logged_in %}\nDate time in UTC when user last logged in to Northstar\n{% enddocs %}\n\n{% docs last_accessed %}\nDate time in UTC when user last access the website\n{% enddocs %}\n\n{% docs last_messaged_at %}\nDate time in UTC when user was last sent a message via SMS or email\n{% enddocs %}\n\n{% docs facebook_id %}\nUser's facebook id\n{% enddocs %}\n\n{% docs mobile %}\nUsers's mobile phone number\n{% enddocs %}\n\n{% docs birthdate %}\nUser's birthdate\n{% enddocs %}\n\n{% docs first_name %}\nUser's first name\n{% enddocs %}\n\n{% docs last_name %}\nUser's last name\n{% enddocs %}\n\n{% docs voter_registration_status %}\nUser's registration status. (e.g. registration_complete, confirmed, uncertain) \n{% enddocs %}\n\n{% docs finish_with_state %}\nIf the registrant was eligible to use and passed through to complete their registration with their state\u2019s OVR system, it will be indicated in this field (direct quote from Rock-The-Vote documentation). Yes/No value in field.\n{% enddocs %}\n\n{% docs reportback_volume %}\nThis field returns 1 if non voter-reg action, since campaigns team only counts those a 1 reportback. If voter-reg action, we want to count quantity of post as number of registered voters.\n{% enddocs %}\n\n{% docs address_street_1 %}\nFirst line of user's street address\n{% enddocs %}\n\n{% docs address_street_2 %}\nSecond line of user's street address\n{% enddocs %}\n\n{% docs city %}\nUser's city\n{% enddocs %}\n\n{% docs state %}\nUser's state\n{% enddocs %}\n\n{% docs country %}\nUser's country\n{% enddocs %}\n\n{% docs language %}\nUser's language\n{% enddocs %}\n\n{% docs cio_status %}\nStatus of user from CIO. (e.g. customer_subscribed, customer_unsubscribed)\n{% enddocs %}\n\n{% docs cio_status_timestamp %}\nTimestamp when users's status was updated.\n{% enddocs %}\n\n{% docs sms_status %}\nCurrent SMS status. (e.g. undeliverable, unknown)\n{% enddocs %}\n\n{% docs source_detail %}\nDetails of the origin of the user. (e.g. tell_a_friend, other, opt_in_path/197981)\n{% enddocs %}\n\n{% docs badges %}\nWhether the user has any badges. \n{% enddocs %}\n\n{% docs refer_friends %}\nWhether the user is a part of the refer a friend campaign. \n{% enddocs %}\n\n{% docs subscribed_member %}\nWhether the user is subscribed. \n{% enddocs %}\n\n{% docs last_updated_at %}\nTimestamp when users's was updated.\n{% enddocs %}\n\n{% docs school_id %}\nUnique identifier for the user's school. This info comes from the school finder.\n{% enddocs %}\n\n{% docs newsletter_topic %}\nNewsletter topic. (e.g. community, lifestyle)\n{% enddocs %}\n\n{% docs user_agent %}\nFull user agent string for a user's browser (e.g. \"Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:24.0) Gecko/20100101 Firefox/24.0\")\n{% enddocs %}\n\n{% docs drupal_id %}\nOld Drupal user ID\n{% enddocs %}\n\n{% docs campaigns %}\nCampaigns a user is signed up for.\n{% enddocs %}\n\n{% docs audit %}\nA very useful field with data containing information about changes to a user, e.g. timestamps when the user subscribed and unsubscribed.\n{% enddocs %}\n\n{% docs voting_plan_status %}\nThe indication of the user's plan to vote, e.g. voting, not_voting, cant_vote\n{% enddocs %}\n\n{% docs voting_plan_time_of_day %}\nThe time of day when the user plans to vote, e.g morning, afternoon, evening\n{% enddocs %}\n\n{% docs voting_plan_method_of_transport %}\nHow the user plans to get to their polling place. e.g. walk, drive\n{% enddocs %}\n\n{% docs voting_plan_attending_with %}\nWith Whom the user plans to go voting, e.g. family, friends, alone\n{% enddocs %}\n\n{% docs feature_flags %}\nJSON containing info on features like badges and refer-a-friend.\n{% enddocs %}\n\n{% docs dbt_updated_at %}\nDBT snapshot table data. The updated_at timestamp of the source record when this snapshot row was inserted.\n{% enddocs %}\n\n{% docs dbt_scd_id %}\nDBT snapshot table data. A unique key generated for each snapshotted record.\n{% enddocs %}\n\n{% docs dbt_valid_from %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this snapshot row was first inserted\n{% enddocs %}\n\n{% docs dbt_valid_to %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this row row became invalidated.\n{% enddocs %}\n\n{% docs google_id %}\nUser's Google ID obtained from login.\n{% enddocs %}\n\n{% docs causes %}\nCauses in which a user is interested. e.g. animal welfare, education, mental_health\n{% enddocs %}\n\n{% docs email_subscription_status %}\nEmail subscription status of the user\n{% enddocs %}\n\n{% docs role %}\nUser's role, e.g. user, staff\n{% enddocs %}\n\n{% docs cio_backfilled %}\nWhether this user's data was backfilled from CIO\n{% enddocs %}\n\n{% docs addr_source %}\nWhere the user submitted their address, e.g. sms, GDPR\n{% enddocs %}\n\n{% docs email_subscription_topics %}\nEmail subscription topics correspond to categories in CIO in which the user is interested. e.g. lifestyle, community, scholarship\n{% enddocs %}\n\n{% docs sms_paused %}\nWhether we've paused sending sms messages to the user.\n{% enddocs %}\n\n\n\n\n", "name": "browser_size", "unique_id": "ds_dbt.browser_size", "block_contents": "Which type of browser a user is using (eg. Mobile, Desktop)"}, "ds_dbt.northstar_id": {"root_path": "/Users/mrich/projects/quasar/quasar/dbt", "resource_type": "docs", "path": "schema.md", "original_file_path": "models/schema.md", "package_name": "ds_dbt", "file_contents": "\n{% docs click_id %}\nThis is a unique identifier for each click\n{% enddocs %}\n\n{% docs click_time %}\nTimestamp when user clicked.\n{% enddocs %}\n\n{% docs shortened %}\nShortened URL\n{% enddocs %}\n\n{% docs target_url %}\nURL where the user will be directed\n{% enddocs %}\n\n{% docs broadcast_id %}\nID of the broadcast that generated the shortened URL\n{% enddocs %}\n\n{% docs source %}\nSource of the URL (e.g. SMS, web), origin of the post (e.g. phoenix-web, phoenix-ashes, sms), or source where user was acquired. (e.g. sms, phoenix-next)\n{% enddocs %}\n\n{% docs interaction_type %}\nHow the user interacted with the link (e.g. preview, click)\n{% enddocs %}\n\n{% docs id %}\nUnique identifier for the post\n{% enddocs %}\n\n{% docs type %}\nType of post (e.g. photo)\n{% enddocs %}\n\n{% docs action %}\nPost action (e.g. DefendDreamers_Nov9_CongressCalls, GunViolence2018_Feb15_ParklandResponse)\n{% enddocs %}\n\n{% docs status %}\nPost status (e.g. accepted, rejected)\n{% enddocs %}\n\n{% docs quantity %}\nNumerical quantity of items specified in the call to action (e.g. 10, 200)\n{% enddocs %}\n\n{% docs source_bucket %}\nGrouping bucket for origin of the post (e.g. web, sms) \n{% enddocs %}\n\n{% docs created_at %}\nWhen the item was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs updated_at %}\nWhen the item was updated in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs text %}\nText of the post (e.g. \"Zoo animals and a super hero trying to help too!\") \n{% enddocs %}\n\n{% docs signup_id %}\nUnique identifier for the signup \n{% enddocs %}\n\n{% docs post_class %}\nClass of the signup (e.g. \"photo - default\", \"phone-call - DefendDreamers_Jan16_BothBodies\")\n{% enddocs %}\n\n{% docs is_accepted %}\nWhether the post has been accepted to be displayed to the public on the website\n{% enddocs %}\n\n{% docs action_id %}\nInternal identifier of the action \n{% enddocs %}\n\n{% docs location %}\nLocation where the action takes place (e.g. US-NY)\n{% enddocs %}\n\n{% docs postal_code %}\nPostal code where the action takes place\n{% enddocs %}\n\n{% docs is_reportback %}\nWhether the post is a reportback. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs civic_action %}\nWhether the post is a Civic Action. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs scholarship_entry %}\nWhether the post is a Scholarship Entry. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs why_participated %}\nWhy the user participated in this action. Entered by the user.\n{% enddocs %}\n\n{% docs details %}\nDetails about the post. Contains contentfulId and other information (e.g. {\"campaignContentfulId\":\"6ATBgGEQEeJoIcxs1qbwaC\"})\n{% enddocs %}\n\n{% docs email %}\nEmail address of the user.\n{% enddocs %}\n\n{% docs source_details %}\nDetails about the source of the item. This is sometimes represented as a JSON object, and for other tables like Turbovote its represented as a string. (e.g. \"{\"contentful_id\":\"3CTLlXfbwtz1FOMpl31SKV\",\"utm_source\":\"scholarship_listing\",\"utm_medium\":\"referral\",\"utm_campaign\":\"fastweb_2019_08\"}\", newsletter_456)\n{% enddocs %}\n\n{% docs campaign_id %}\nThis is a unique identifier for the campaign\n{% enddocs %}\n\n{% docs campaign_run_id %}\nUnique identifier for the campaign run\n{% enddocs %}\n\n{% docs campaign_name %}\nName of the campaign\n{% enddocs %}\n\n{% docs campaign_cause %}\nCampaign cause (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_run_start_date %}\nStart date of the campaign run\n{% enddocs %}\n\n{% docs campaign_run_end_date %}\nEnd date of the campaign run\n{% enddocs %}\n\n{% docs campaign_created_date %}\nWhen the campaign was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs campaign_node_id %}\nInternal unique node id for the campaign\n{% enddocs %}\n\n{% docs campaign_node_id_title %}\nCampaign title\n{% enddocs %}\n\n{% docs campaign_run_id_title %}\nTitle of the campaign run\n{% enddocs %}\n\n{% docs campaign_action_type %}\nCampaign action type (eg. Make Something, Share Something)\n{% enddocs %}\n\n{% docs campaign_cause_type %}\nCampaign cause type (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_noun %}\nNoun applicable to the user's action\n{% enddocs %}\n\n{% docs campaign_verb %}\nVerb describing the action the user should take\n{% enddocs %}\n\n{% docs campaign_cta %}\nCampaign's call to action\n{% enddocs %}\n\n{% docs campaign_language %}\n\"Language in which the campaign is available\"\n{% enddocs %}\n\n{% docs agent_id %}\nIf set, the content type of the picture the member is sending us. Exp. image/png.\n{% enddocs %}\n\n{% docs attachment_content_type %}\nIf set, the handle of the Front agent this outbound support message is from.\n{% enddocs %}\n\n{% docs topic %}\nHolds a reference to the **last** campaign topic the member's conversation was in. This is useful to allow members to talk to Gambit and get quick responses (through Rivescript), without Gambit completely forgetting what state the member's interaction with a campaign topic was in.\n{% enddocs %}\n\n{% docs action_serial_id %}\nSerial id for the user's action. Depends on the source of the action. May be the bertly click id, sms message id, etc.\n{% enddocs %}\n\n{% docs channel %}\nChannel for the user's action. Depends on the source of the action. (e.g. web, sms)\n{% enddocs %}\n\n{% docs first_action_month %}\nMonth during which the user took their first action. \n{% enddocs %}\n\n{% docs event_id %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs event_source %}\nApplication source for event (eg. Phoenix, Northstar)\n{% enddocs %}\n\n{% docs event_datetime %}\nWhen the event occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs event_name %}\nName of the event (eg. northstar_submitted_register, https://docs.google.com/spreadsheets/d/1lm-fGrIm85nUTxSojqyCt_Ehmm1zEbViFhKpxcJiz1A/edit#gid=406441516)\n{% enddocs %}\n\n{% docs event_type %}\nType of event (pv = 'Page View', se = 'Structured Event')\n{% enddocs %}\n\n{% docs host %}\nURL host where event occurred (eg. www.dosomething.org or identity.dosomething.org)\n{% enddocs %}\n\n{% docs path %}\nURL path event occurred at (eg. /login or /us/campaigns/huddle-for-heroes)\n{% enddocs %}\n\n{% docs query_parameters %}\nOptional query parameters for the request (eg. query=huddle)\n{% enddocs %}\n\n{% docs se_category %}\nCategory of event (eg. focused_field, authentication) - Custom structured event\n{% enddocs %}\n\n{% docs se_action %}\nAction performed / event name (eg. form_submitted, action_failed) - Custom structured event\n{% enddocs %}\n\n{% docs se_label %}\nThe object of the action (eg. first_name, register, voter_reg_status) - Custom structured event\n{% enddocs %}\n\n{% docs session_id %}\nUnique identifier of the user's session\n{% enddocs %}\n\n{% docs session_counter %}\nHow many sessions a user has started\n{% enddocs %}\n\n{% docs browser_size %}\nWhich type of browser a user is using (eg. Mobile, Desktop)\n{% enddocs %}\n\n{% docs northstar_id %}\nThe Northstar ID of the user who generated the event\n{% enddocs %}\n\n{% docs device_id %}\nID of the device used\n{% enddocs %}\n\n{% docs referrer_host %}\nURL host of the referring site (eg. google.com)\n{% enddocs %}\n\n{% docs referrer_path %}\nURL path from referring site (eg. /10-stats-on-teen-drug-and-alcohol-use/)\n{% enddocs %}\n\n{% docs referrer_source %}\nReferrer source name (eg. Google, Facebook)\n{% enddocs %}\n\n{% docs utm_source %}\nTracks where the traffic is coming from. (eg. scholarship_listing, Facebook)\n{% enddocs %}\n\n{% docs utm_medium %}\nHow the traffic got to the platform (eg. referral, CPC)\n{% enddocs %}\n\n{% docs utm_campaign %}\nTracks which campaign the traffic was generated by. Shows up in Google Analytics as Campaign Name (eg. editorial_newsletter)\n{% enddocs %}\n\n{% docs url %}\nURL of campaign (eg. https://dosome.click/nyn5m7)\n{% enddocs %}\n\n{% docs modal_type %}\nNULL or SURVEY_MODAL\n{% enddocs %}\n\n{% docs landing_datetime %}\nWhen the session started in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs ending_datetime %}\nWhen the session ended in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs session_duration_seconds %}\nSession duration in seconds\n{% enddocs %}\n\n{% docs num_pages_views %}\nNumber of pages viewed in session\n{% enddocs %}\n\n{% docs landing_page %}\nFirst page the user viewed in the session (eg. /us/facts/11-facts-about-bp-oil-spill)\n{% enddocs %}\n\n{% docs exit_page %}\n\"Which page the user ended or exited their session from (eg. /us/campaigns/green-your-getaway)\"\n{% enddocs %}\n\n{% docs days_since_last_session %}\n\"Days since their last session.\"\n{% enddocs %}\n\n{% docs post_type %}\nType of post, (e.g. photo, voter-reg)\n{% enddocs %}\n\n{% docs noun %}\nNoun that corresponds to the item in the call to action that was delivered. (e.g. drawings, tweets)\n{% enddocs %}\n\n{% docs verb %}\nVerb corresponding to the action the user took. (e.g. shared, sent, taken)\n{% enddocs %}\n\n{% docs deleted_at %}\nDate time in UTC when a user deleted their post.\n{% enddocs %}\n\n{% docs _fivetran_deleted %}\nMarks rows that were deleted in the source table\n{% enddocs %}\n\n{% docs _fivetran_synced %}\n(UTC timestamp) keeps track of when each row was last successfully synced\n{% enddocs %}\n\n{% docs reportback %}\nWhether the post is a reportback \n{% enddocs %}\n\n{% docs active %}\nWhether the user is active \n{% enddocs %}\n\n{% docs anonymous %}\nWhether the user is anonymous when making the post \n{% enddocs %}\n\n{% docs callpower_campaign_id %}\nUnique ID corresponding to the Callpower campaign. Callpower allows users to record messages for their representatives.\n{% enddocs %}\n\n{% docs quiz %}\nWhether the post is a quiz \n{% enddocs %}\n\n{% docs action_type %}\nType of action the user took. (e.g. share-something, donate-something)\n{% enddocs %}\n\n{% docs online %}\nWhether the action is a online as opposed to IRL.\n{% enddocs %}\n\n{% docs time_commitment %}\nEstimated time required to do the action (e.g. 3.0+, <0.5)\n{% enddocs %}\n\n{% docs num_signups %}\nQuantity of campaign signups\n{% enddocs %}\n\n{% docs most_recent_signup %}\nTimestamp of the most recent signup in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs num_rbs %}\nQuantity of reportbacks for the user\n{% enddocs %}\n\n{% docs total_quantity %}\nTotal quantity of items in reportbacks\n{% enddocs %}\n\n{% docs most_recent_rb %}\nWhen the most recent reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs first_rb %}\nWhen the first reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs avg_time_betw_rbs %}\nCalculated average time between reportbacks.\n{% enddocs %}\n\n{% docs avg_days_next_action_after_rb %}\nCalculated average days until next action after reportback\n{% enddocs %}\n\n{% docs days_to_next_action_after_last_rb %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs most_recent_mam_action %}\nMost recent monthly active member qualifying action in UTC (eg. 2018-01-01 12:00:00).\n{% enddocs %}\n\n{% docs most_recent_email_open %}\nMost recent email open in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs most_recent_all_actions %}\nMost recent timestamp of any action in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs last_action_is_rb %}\nWhether the last action the user took was a reportback\n{% enddocs %}\n\n{% docs days_since_last_action %}\nDays since the user's last action\n{% enddocs %}\n\n{% docs time_to_first_rb %}\nHow much time after registering until the user's first reportback\n{% enddocs %}\n\n{% docs sms_unsubscribed_at %}\nTimestamp of when user unsubscribed from SMS messaging\n{% enddocs %}\n\n{% docs user_unsubscribed_at %}\nTimestamp of when user unsubscribed from email or sms\n{% enddocs %}\n\n{% docs voter_reg_acquisition %}\nWhether the user was an acquisition through voter registration efforts. \n{% enddocs %}\n\n{% docs last_logged_in %}\nDate time in UTC when user last logged in to Northstar\n{% enddocs %}\n\n{% docs last_accessed %}\nDate time in UTC when user last access the website\n{% enddocs %}\n\n{% docs last_messaged_at %}\nDate time in UTC when user was last sent a message via SMS or email\n{% enddocs %}\n\n{% docs facebook_id %}\nUser's facebook id\n{% enddocs %}\n\n{% docs mobile %}\nUsers's mobile phone number\n{% enddocs %}\n\n{% docs birthdate %}\nUser's birthdate\n{% enddocs %}\n\n{% docs first_name %}\nUser's first name\n{% enddocs %}\n\n{% docs last_name %}\nUser's last name\n{% enddocs %}\n\n{% docs voter_registration_status %}\nUser's registration status. (e.g. registration_complete, confirmed, uncertain) \n{% enddocs %}\n\n{% docs finish_with_state %}\nIf the registrant was eligible to use and passed through to complete their registration with their state\u2019s OVR system, it will be indicated in this field (direct quote from Rock-The-Vote documentation). Yes/No value in field.\n{% enddocs %}\n\n{% docs reportback_volume %}\nThis field returns 1 if non voter-reg action, since campaigns team only counts those a 1 reportback. If voter-reg action, we want to count quantity of post as number of registered voters.\n{% enddocs %}\n\n{% docs address_street_1 %}\nFirst line of user's street address\n{% enddocs %}\n\n{% docs address_street_2 %}\nSecond line of user's street address\n{% enddocs %}\n\n{% docs city %}\nUser's city\n{% enddocs %}\n\n{% docs state %}\nUser's state\n{% enddocs %}\n\n{% docs country %}\nUser's country\n{% enddocs %}\n\n{% docs language %}\nUser's language\n{% enddocs %}\n\n{% docs cio_status %}\nStatus of user from CIO. (e.g. customer_subscribed, customer_unsubscribed)\n{% enddocs %}\n\n{% docs cio_status_timestamp %}\nTimestamp when users's status was updated.\n{% enddocs %}\n\n{% docs sms_status %}\nCurrent SMS status. (e.g. undeliverable, unknown)\n{% enddocs %}\n\n{% docs source_detail %}\nDetails of the origin of the user. (e.g. tell_a_friend, other, opt_in_path/197981)\n{% enddocs %}\n\n{% docs badges %}\nWhether the user has any badges. \n{% enddocs %}\n\n{% docs refer_friends %}\nWhether the user is a part of the refer a friend campaign. \n{% enddocs %}\n\n{% docs subscribed_member %}\nWhether the user is subscribed. \n{% enddocs %}\n\n{% docs last_updated_at %}\nTimestamp when users's was updated.\n{% enddocs %}\n\n{% docs school_id %}\nUnique identifier for the user's school. This info comes from the school finder.\n{% enddocs %}\n\n{% docs newsletter_topic %}\nNewsletter topic. (e.g. community, lifestyle)\n{% enddocs %}\n\n{% docs user_agent %}\nFull user agent string for a user's browser (e.g. \"Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:24.0) Gecko/20100101 Firefox/24.0\")\n{% enddocs %}\n\n{% docs drupal_id %}\nOld Drupal user ID\n{% enddocs %}\n\n{% docs campaigns %}\nCampaigns a user is signed up for.\n{% enddocs %}\n\n{% docs audit %}\nA very useful field with data containing information about changes to a user, e.g. timestamps when the user subscribed and unsubscribed.\n{% enddocs %}\n\n{% docs voting_plan_status %}\nThe indication of the user's plan to vote, e.g. voting, not_voting, cant_vote\n{% enddocs %}\n\n{% docs voting_plan_time_of_day %}\nThe time of day when the user plans to vote, e.g morning, afternoon, evening\n{% enddocs %}\n\n{% docs voting_plan_method_of_transport %}\nHow the user plans to get to their polling place. e.g. walk, drive\n{% enddocs %}\n\n{% docs voting_plan_attending_with %}\nWith Whom the user plans to go voting, e.g. family, friends, alone\n{% enddocs %}\n\n{% docs feature_flags %}\nJSON containing info on features like badges and refer-a-friend.\n{% enddocs %}\n\n{% docs dbt_updated_at %}\nDBT snapshot table data. The updated_at timestamp of the source record when this snapshot row was inserted.\n{% enddocs %}\n\n{% docs dbt_scd_id %}\nDBT snapshot table data. A unique key generated for each snapshotted record.\n{% enddocs %}\n\n{% docs dbt_valid_from %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this snapshot row was first inserted\n{% enddocs %}\n\n{% docs dbt_valid_to %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this row row became invalidated.\n{% enddocs %}\n\n{% docs google_id %}\nUser's Google ID obtained from login.\n{% enddocs %}\n\n{% docs causes %}\nCauses in which a user is interested. e.g. animal welfare, education, mental_health\n{% enddocs %}\n\n{% docs email_subscription_status %}\nEmail subscription status of the user\n{% enddocs %}\n\n{% docs role %}\nUser's role, e.g. user, staff\n{% enddocs %}\n\n{% docs cio_backfilled %}\nWhether this user's data was backfilled from CIO\n{% enddocs %}\n\n{% docs addr_source %}\nWhere the user submitted their address, e.g. sms, GDPR\n{% enddocs %}\n\n{% docs email_subscription_topics %}\nEmail subscription topics correspond to categories in CIO in which the user is interested. e.g. lifestyle, community, scholarship\n{% enddocs %}\n\n{% docs sms_paused %}\nWhether we've paused sending sms messages to the user.\n{% enddocs %}\n\n\n\n\n", "name": "northstar_id", "unique_id": "ds_dbt.northstar_id", "block_contents": "The Northstar ID of the user who generated the event"}, "ds_dbt.device_id": {"root_path": "/Users/mrich/projects/quasar/quasar/dbt", "resource_type": "docs", "path": "schema.md", "original_file_path": "models/schema.md", "package_name": "ds_dbt", "file_contents": "\n{% docs click_id %}\nThis is a unique identifier for each click\n{% enddocs %}\n\n{% docs click_time %}\nTimestamp when user clicked.\n{% enddocs %}\n\n{% docs shortened %}\nShortened URL\n{% enddocs %}\n\n{% docs target_url %}\nURL where the user will be directed\n{% enddocs %}\n\n{% docs broadcast_id %}\nID of the broadcast that generated the shortened URL\n{% enddocs %}\n\n{% docs source %}\nSource of the URL (e.g. SMS, web), origin of the post (e.g. phoenix-web, phoenix-ashes, sms), or source where user was acquired. (e.g. sms, phoenix-next)\n{% enddocs %}\n\n{% docs interaction_type %}\nHow the user interacted with the link (e.g. preview, click)\n{% enddocs %}\n\n{% docs id %}\nUnique identifier for the post\n{% enddocs %}\n\n{% docs type %}\nType of post (e.g. photo)\n{% enddocs %}\n\n{% docs action %}\nPost action (e.g. DefendDreamers_Nov9_CongressCalls, GunViolence2018_Feb15_ParklandResponse)\n{% enddocs %}\n\n{% docs status %}\nPost status (e.g. accepted, rejected)\n{% enddocs %}\n\n{% docs quantity %}\nNumerical quantity of items specified in the call to action (e.g. 10, 200)\n{% enddocs %}\n\n{% docs source_bucket %}\nGrouping bucket for origin of the post (e.g. web, sms) \n{% enddocs %}\n\n{% docs created_at %}\nWhen the item was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs updated_at %}\nWhen the item was updated in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs text %}\nText of the post (e.g. \"Zoo animals and a super hero trying to help too!\") \n{% enddocs %}\n\n{% docs signup_id %}\nUnique identifier for the signup \n{% enddocs %}\n\n{% docs post_class %}\nClass of the signup (e.g. \"photo - default\", \"phone-call - DefendDreamers_Jan16_BothBodies\")\n{% enddocs %}\n\n{% docs is_accepted %}\nWhether the post has been accepted to be displayed to the public on the website\n{% enddocs %}\n\n{% docs action_id %}\nInternal identifier of the action \n{% enddocs %}\n\n{% docs location %}\nLocation where the action takes place (e.g. US-NY)\n{% enddocs %}\n\n{% docs postal_code %}\nPostal code where the action takes place\n{% enddocs %}\n\n{% docs is_reportback %}\nWhether the post is a reportback. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs civic_action %}\nWhether the post is a Civic Action. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs scholarship_entry %}\nWhether the post is a Scholarship Entry. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs why_participated %}\nWhy the user participated in this action. Entered by the user.\n{% enddocs %}\n\n{% docs details %}\nDetails about the post. Contains contentfulId and other information (e.g. {\"campaignContentfulId\":\"6ATBgGEQEeJoIcxs1qbwaC\"})\n{% enddocs %}\n\n{% docs email %}\nEmail address of the user.\n{% enddocs %}\n\n{% docs source_details %}\nDetails about the source of the item. This is sometimes represented as a JSON object, and for other tables like Turbovote its represented as a string. (e.g. \"{\"contentful_id\":\"3CTLlXfbwtz1FOMpl31SKV\",\"utm_source\":\"scholarship_listing\",\"utm_medium\":\"referral\",\"utm_campaign\":\"fastweb_2019_08\"}\", newsletter_456)\n{% enddocs %}\n\n{% docs campaign_id %}\nThis is a unique identifier for the campaign\n{% enddocs %}\n\n{% docs campaign_run_id %}\nUnique identifier for the campaign run\n{% enddocs %}\n\n{% docs campaign_name %}\nName of the campaign\n{% enddocs %}\n\n{% docs campaign_cause %}\nCampaign cause (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_run_start_date %}\nStart date of the campaign run\n{% enddocs %}\n\n{% docs campaign_run_end_date %}\nEnd date of the campaign run\n{% enddocs %}\n\n{% docs campaign_created_date %}\nWhen the campaign was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs campaign_node_id %}\nInternal unique node id for the campaign\n{% enddocs %}\n\n{% docs campaign_node_id_title %}\nCampaign title\n{% enddocs %}\n\n{% docs campaign_run_id_title %}\nTitle of the campaign run\n{% enddocs %}\n\n{% docs campaign_action_type %}\nCampaign action type (eg. Make Something, Share Something)\n{% enddocs %}\n\n{% docs campaign_cause_type %}\nCampaign cause type (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_noun %}\nNoun applicable to the user's action\n{% enddocs %}\n\n{% docs campaign_verb %}\nVerb describing the action the user should take\n{% enddocs %}\n\n{% docs campaign_cta %}\nCampaign's call to action\n{% enddocs %}\n\n{% docs campaign_language %}\n\"Language in which the campaign is available\"\n{% enddocs %}\n\n{% docs agent_id %}\nIf set, the content type of the picture the member is sending us. Exp. image/png.\n{% enddocs %}\n\n{% docs attachment_content_type %}\nIf set, the handle of the Front agent this outbound support message is from.\n{% enddocs %}\n\n{% docs topic %}\nHolds a reference to the **last** campaign topic the member's conversation was in. This is useful to allow members to talk to Gambit and get quick responses (through Rivescript), without Gambit completely forgetting what state the member's interaction with a campaign topic was in.\n{% enddocs %}\n\n{% docs action_serial_id %}\nSerial id for the user's action. Depends on the source of the action. May be the bertly click id, sms message id, etc.\n{% enddocs %}\n\n{% docs channel %}\nChannel for the user's action. Depends on the source of the action. (e.g. web, sms)\n{% enddocs %}\n\n{% docs first_action_month %}\nMonth during which the user took their first action. \n{% enddocs %}\n\n{% docs event_id %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs event_source %}\nApplication source for event (eg. Phoenix, Northstar)\n{% enddocs %}\n\n{% docs event_datetime %}\nWhen the event occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs event_name %}\nName of the event (eg. northstar_submitted_register, https://docs.google.com/spreadsheets/d/1lm-fGrIm85nUTxSojqyCt_Ehmm1zEbViFhKpxcJiz1A/edit#gid=406441516)\n{% enddocs %}\n\n{% docs event_type %}\nType of event (pv = 'Page View', se = 'Structured Event')\n{% enddocs %}\n\n{% docs host %}\nURL host where event occurred (eg. www.dosomething.org or identity.dosomething.org)\n{% enddocs %}\n\n{% docs path %}\nURL path event occurred at (eg. /login or /us/campaigns/huddle-for-heroes)\n{% enddocs %}\n\n{% docs query_parameters %}\nOptional query parameters for the request (eg. query=huddle)\n{% enddocs %}\n\n{% docs se_category %}\nCategory of event (eg. focused_field, authentication) - Custom structured event\n{% enddocs %}\n\n{% docs se_action %}\nAction performed / event name (eg. form_submitted, action_failed) - Custom structured event\n{% enddocs %}\n\n{% docs se_label %}\nThe object of the action (eg. first_name, register, voter_reg_status) - Custom structured event\n{% enddocs %}\n\n{% docs session_id %}\nUnique identifier of the user's session\n{% enddocs %}\n\n{% docs session_counter %}\nHow many sessions a user has started\n{% enddocs %}\n\n{% docs browser_size %}\nWhich type of browser a user is using (eg. Mobile, Desktop)\n{% enddocs %}\n\n{% docs northstar_id %}\nThe Northstar ID of the user who generated the event\n{% enddocs %}\n\n{% docs device_id %}\nID of the device used\n{% enddocs %}\n\n{% docs referrer_host %}\nURL host of the referring site (eg. google.com)\n{% enddocs %}\n\n{% docs referrer_path %}\nURL path from referring site (eg. /10-stats-on-teen-drug-and-alcohol-use/)\n{% enddocs %}\n\n{% docs referrer_source %}\nReferrer source name (eg. Google, Facebook)\n{% enddocs %}\n\n{% docs utm_source %}\nTracks where the traffic is coming from. (eg. scholarship_listing, Facebook)\n{% enddocs %}\n\n{% docs utm_medium %}\nHow the traffic got to the platform (eg. referral, CPC)\n{% enddocs %}\n\n{% docs utm_campaign %}\nTracks which campaign the traffic was generated by. Shows up in Google Analytics as Campaign Name (eg. editorial_newsletter)\n{% enddocs %}\n\n{% docs url %}\nURL of campaign (eg. https://dosome.click/nyn5m7)\n{% enddocs %}\n\n{% docs modal_type %}\nNULL or SURVEY_MODAL\n{% enddocs %}\n\n{% docs landing_datetime %}\nWhen the session started in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs ending_datetime %}\nWhen the session ended in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs session_duration_seconds %}\nSession duration in seconds\n{% enddocs %}\n\n{% docs num_pages_views %}\nNumber of pages viewed in session\n{% enddocs %}\n\n{% docs landing_page %}\nFirst page the user viewed in the session (eg. /us/facts/11-facts-about-bp-oil-spill)\n{% enddocs %}\n\n{% docs exit_page %}\n\"Which page the user ended or exited their session from (eg. /us/campaigns/green-your-getaway)\"\n{% enddocs %}\n\n{% docs days_since_last_session %}\n\"Days since their last session.\"\n{% enddocs %}\n\n{% docs post_type %}\nType of post, (e.g. photo, voter-reg)\n{% enddocs %}\n\n{% docs noun %}\nNoun that corresponds to the item in the call to action that was delivered. (e.g. drawings, tweets)\n{% enddocs %}\n\n{% docs verb %}\nVerb corresponding to the action the user took. (e.g. shared, sent, taken)\n{% enddocs %}\n\n{% docs deleted_at %}\nDate time in UTC when a user deleted their post.\n{% enddocs %}\n\n{% docs _fivetran_deleted %}\nMarks rows that were deleted in the source table\n{% enddocs %}\n\n{% docs _fivetran_synced %}\n(UTC timestamp) keeps track of when each row was last successfully synced\n{% enddocs %}\n\n{% docs reportback %}\nWhether the post is a reportback \n{% enddocs %}\n\n{% docs active %}\nWhether the user is active \n{% enddocs %}\n\n{% docs anonymous %}\nWhether the user is anonymous when making the post \n{% enddocs %}\n\n{% docs callpower_campaign_id %}\nUnique ID corresponding to the Callpower campaign. Callpower allows users to record messages for their representatives.\n{% enddocs %}\n\n{% docs quiz %}\nWhether the post is a quiz \n{% enddocs %}\n\n{% docs action_type %}\nType of action the user took. (e.g. share-something, donate-something)\n{% enddocs %}\n\n{% docs online %}\nWhether the action is a online as opposed to IRL.\n{% enddocs %}\n\n{% docs time_commitment %}\nEstimated time required to do the action (e.g. 3.0+, <0.5)\n{% enddocs %}\n\n{% docs num_signups %}\nQuantity of campaign signups\n{% enddocs %}\n\n{% docs most_recent_signup %}\nTimestamp of the most recent signup in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs num_rbs %}\nQuantity of reportbacks for the user\n{% enddocs %}\n\n{% docs total_quantity %}\nTotal quantity of items in reportbacks\n{% enddocs %}\n\n{% docs most_recent_rb %}\nWhen the most recent reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs first_rb %}\nWhen the first reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs avg_time_betw_rbs %}\nCalculated average time between reportbacks.\n{% enddocs %}\n\n{% docs avg_days_next_action_after_rb %}\nCalculated average days until next action after reportback\n{% enddocs %}\n\n{% docs days_to_next_action_after_last_rb %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs most_recent_mam_action %}\nMost recent monthly active member qualifying action in UTC (eg. 2018-01-01 12:00:00).\n{% enddocs %}\n\n{% docs most_recent_email_open %}\nMost recent email open in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs most_recent_all_actions %}\nMost recent timestamp of any action in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs last_action_is_rb %}\nWhether the last action the user took was a reportback\n{% enddocs %}\n\n{% docs days_since_last_action %}\nDays since the user's last action\n{% enddocs %}\n\n{% docs time_to_first_rb %}\nHow much time after registering until the user's first reportback\n{% enddocs %}\n\n{% docs sms_unsubscribed_at %}\nTimestamp of when user unsubscribed from SMS messaging\n{% enddocs %}\n\n{% docs user_unsubscribed_at %}\nTimestamp of when user unsubscribed from email or sms\n{% enddocs %}\n\n{% docs voter_reg_acquisition %}\nWhether the user was an acquisition through voter registration efforts. \n{% enddocs %}\n\n{% docs last_logged_in %}\nDate time in UTC when user last logged in to Northstar\n{% enddocs %}\n\n{% docs last_accessed %}\nDate time in UTC when user last access the website\n{% enddocs %}\n\n{% docs last_messaged_at %}\nDate time in UTC when user was last sent a message via SMS or email\n{% enddocs %}\n\n{% docs facebook_id %}\nUser's facebook id\n{% enddocs %}\n\n{% docs mobile %}\nUsers's mobile phone number\n{% enddocs %}\n\n{% docs birthdate %}\nUser's birthdate\n{% enddocs %}\n\n{% docs first_name %}\nUser's first name\n{% enddocs %}\n\n{% docs last_name %}\nUser's last name\n{% enddocs %}\n\n{% docs voter_registration_status %}\nUser's registration status. (e.g. registration_complete, confirmed, uncertain) \n{% enddocs %}\n\n{% docs finish_with_state %}\nIf the registrant was eligible to use and passed through to complete their registration with their state\u2019s OVR system, it will be indicated in this field (direct quote from Rock-The-Vote documentation). Yes/No value in field.\n{% enddocs %}\n\n{% docs reportback_volume %}\nThis field returns 1 if non voter-reg action, since campaigns team only counts those a 1 reportback. If voter-reg action, we want to count quantity of post as number of registered voters.\n{% enddocs %}\n\n{% docs address_street_1 %}\nFirst line of user's street address\n{% enddocs %}\n\n{% docs address_street_2 %}\nSecond line of user's street address\n{% enddocs %}\n\n{% docs city %}\nUser's city\n{% enddocs %}\n\n{% docs state %}\nUser's state\n{% enddocs %}\n\n{% docs country %}\nUser's country\n{% enddocs %}\n\n{% docs language %}\nUser's language\n{% enddocs %}\n\n{% docs cio_status %}\nStatus of user from CIO. (e.g. customer_subscribed, customer_unsubscribed)\n{% enddocs %}\n\n{% docs cio_status_timestamp %}\nTimestamp when users's status was updated.\n{% enddocs %}\n\n{% docs sms_status %}\nCurrent SMS status. (e.g. undeliverable, unknown)\n{% enddocs %}\n\n{% docs source_detail %}\nDetails of the origin of the user. (e.g. tell_a_friend, other, opt_in_path/197981)\n{% enddocs %}\n\n{% docs badges %}\nWhether the user has any badges. \n{% enddocs %}\n\n{% docs refer_friends %}\nWhether the user is a part of the refer a friend campaign. \n{% enddocs %}\n\n{% docs subscribed_member %}\nWhether the user is subscribed. \n{% enddocs %}\n\n{% docs last_updated_at %}\nTimestamp when users's was updated.\n{% enddocs %}\n\n{% docs school_id %}\nUnique identifier for the user's school. This info comes from the school finder.\n{% enddocs %}\n\n{% docs newsletter_topic %}\nNewsletter topic. (e.g. community, lifestyle)\n{% enddocs %}\n\n{% docs user_agent %}\nFull user agent string for a user's browser (e.g. \"Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:24.0) Gecko/20100101 Firefox/24.0\")\n{% enddocs %}\n\n{% docs drupal_id %}\nOld Drupal user ID\n{% enddocs %}\n\n{% docs campaigns %}\nCampaigns a user is signed up for.\n{% enddocs %}\n\n{% docs audit %}\nA very useful field with data containing information about changes to a user, e.g. timestamps when the user subscribed and unsubscribed.\n{% enddocs %}\n\n{% docs voting_plan_status %}\nThe indication of the user's plan to vote, e.g. voting, not_voting, cant_vote\n{% enddocs %}\n\n{% docs voting_plan_time_of_day %}\nThe time of day when the user plans to vote, e.g morning, afternoon, evening\n{% enddocs %}\n\n{% docs voting_plan_method_of_transport %}\nHow the user plans to get to their polling place. e.g. walk, drive\n{% enddocs %}\n\n{% docs voting_plan_attending_with %}\nWith Whom the user plans to go voting, e.g. family, friends, alone\n{% enddocs %}\n\n{% docs feature_flags %}\nJSON containing info on features like badges and refer-a-friend.\n{% enddocs %}\n\n{% docs dbt_updated_at %}\nDBT snapshot table data. The updated_at timestamp of the source record when this snapshot row was inserted.\n{% enddocs %}\n\n{% docs dbt_scd_id %}\nDBT snapshot table data. A unique key generated for each snapshotted record.\n{% enddocs %}\n\n{% docs dbt_valid_from %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this snapshot row was first inserted\n{% enddocs %}\n\n{% docs dbt_valid_to %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this row row became invalidated.\n{% enddocs %}\n\n{% docs google_id %}\nUser's Google ID obtained from login.\n{% enddocs %}\n\n{% docs causes %}\nCauses in which a user is interested. e.g. animal welfare, education, mental_health\n{% enddocs %}\n\n{% docs email_subscription_status %}\nEmail subscription status of the user\n{% enddocs %}\n\n{% docs role %}\nUser's role, e.g. user, staff\n{% enddocs %}\n\n{% docs cio_backfilled %}\nWhether this user's data was backfilled from CIO\n{% enddocs %}\n\n{% docs addr_source %}\nWhere the user submitted their address, e.g. sms, GDPR\n{% enddocs %}\n\n{% docs email_subscription_topics %}\nEmail subscription topics correspond to categories in CIO in which the user is interested. e.g. lifestyle, community, scholarship\n{% enddocs %}\n\n{% docs sms_paused %}\nWhether we've paused sending sms messages to the user.\n{% enddocs %}\n\n\n\n\n", "name": "device_id", "unique_id": "ds_dbt.device_id", "block_contents": "ID of the device used"}, "ds_dbt.referrer_host": {"root_path": "/Users/mrich/projects/quasar/quasar/dbt", "resource_type": "docs", "path": "schema.md", "original_file_path": "models/schema.md", "package_name": "ds_dbt", "file_contents": "\n{% docs click_id %}\nThis is a unique identifier for each click\n{% enddocs %}\n\n{% docs click_time %}\nTimestamp when user clicked.\n{% enddocs %}\n\n{% docs shortened %}\nShortened URL\n{% enddocs %}\n\n{% docs target_url %}\nURL where the user will be directed\n{% enddocs %}\n\n{% docs broadcast_id %}\nID of the broadcast that generated the shortened URL\n{% enddocs %}\n\n{% docs source %}\nSource of the URL (e.g. SMS, web), origin of the post (e.g. phoenix-web, phoenix-ashes, sms), or source where user was acquired. (e.g. sms, phoenix-next)\n{% enddocs %}\n\n{% docs interaction_type %}\nHow the user interacted with the link (e.g. preview, click)\n{% enddocs %}\n\n{% docs id %}\nUnique identifier for the post\n{% enddocs %}\n\n{% docs type %}\nType of post (e.g. photo)\n{% enddocs %}\n\n{% docs action %}\nPost action (e.g. DefendDreamers_Nov9_CongressCalls, GunViolence2018_Feb15_ParklandResponse)\n{% enddocs %}\n\n{% docs status %}\nPost status (e.g. accepted, rejected)\n{% enddocs %}\n\n{% docs quantity %}\nNumerical quantity of items specified in the call to action (e.g. 10, 200)\n{% enddocs %}\n\n{% docs source_bucket %}\nGrouping bucket for origin of the post (e.g. web, sms) \n{% enddocs %}\n\n{% docs created_at %}\nWhen the item was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs updated_at %}\nWhen the item was updated in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs text %}\nText of the post (e.g. \"Zoo animals and a super hero trying to help too!\") \n{% enddocs %}\n\n{% docs signup_id %}\nUnique identifier for the signup \n{% enddocs %}\n\n{% docs post_class %}\nClass of the signup (e.g. \"photo - default\", \"phone-call - DefendDreamers_Jan16_BothBodies\")\n{% enddocs %}\n\n{% docs is_accepted %}\nWhether the post has been accepted to be displayed to the public on the website\n{% enddocs %}\n\n{% docs action_id %}\nInternal identifier of the action \n{% enddocs %}\n\n{% docs location %}\nLocation where the action takes place (e.g. US-NY)\n{% enddocs %}\n\n{% docs postal_code %}\nPostal code where the action takes place\n{% enddocs %}\n\n{% docs is_reportback %}\nWhether the post is a reportback. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs civic_action %}\nWhether the post is a Civic Action. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs scholarship_entry %}\nWhether the post is a Scholarship Entry. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs why_participated %}\nWhy the user participated in this action. Entered by the user.\n{% enddocs %}\n\n{% docs details %}\nDetails about the post. Contains contentfulId and other information (e.g. {\"campaignContentfulId\":\"6ATBgGEQEeJoIcxs1qbwaC\"})\n{% enddocs %}\n\n{% docs email %}\nEmail address of the user.\n{% enddocs %}\n\n{% docs source_details %}\nDetails about the source of the item. This is sometimes represented as a JSON object, and for other tables like Turbovote its represented as a string. (e.g. \"{\"contentful_id\":\"3CTLlXfbwtz1FOMpl31SKV\",\"utm_source\":\"scholarship_listing\",\"utm_medium\":\"referral\",\"utm_campaign\":\"fastweb_2019_08\"}\", newsletter_456)\n{% enddocs %}\n\n{% docs campaign_id %}\nThis is a unique identifier for the campaign\n{% enddocs %}\n\n{% docs campaign_run_id %}\nUnique identifier for the campaign run\n{% enddocs %}\n\n{% docs campaign_name %}\nName of the campaign\n{% enddocs %}\n\n{% docs campaign_cause %}\nCampaign cause (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_run_start_date %}\nStart date of the campaign run\n{% enddocs %}\n\n{% docs campaign_run_end_date %}\nEnd date of the campaign run\n{% enddocs %}\n\n{% docs campaign_created_date %}\nWhen the campaign was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs campaign_node_id %}\nInternal unique node id for the campaign\n{% enddocs %}\n\n{% docs campaign_node_id_title %}\nCampaign title\n{% enddocs %}\n\n{% docs campaign_run_id_title %}\nTitle of the campaign run\n{% enddocs %}\n\n{% docs campaign_action_type %}\nCampaign action type (eg. Make Something, Share Something)\n{% enddocs %}\n\n{% docs campaign_cause_type %}\nCampaign cause type (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_noun %}\nNoun applicable to the user's action\n{% enddocs %}\n\n{% docs campaign_verb %}\nVerb describing the action the user should take\n{% enddocs %}\n\n{% docs campaign_cta %}\nCampaign's call to action\n{% enddocs %}\n\n{% docs campaign_language %}\n\"Language in which the campaign is available\"\n{% enddocs %}\n\n{% docs agent_id %}\nIf set, the content type of the picture the member is sending us. Exp. image/png.\n{% enddocs %}\n\n{% docs attachment_content_type %}\nIf set, the handle of the Front agent this outbound support message is from.\n{% enddocs %}\n\n{% docs topic %}\nHolds a reference to the **last** campaign topic the member's conversation was in. This is useful to allow members to talk to Gambit and get quick responses (through Rivescript), without Gambit completely forgetting what state the member's interaction with a campaign topic was in.\n{% enddocs %}\n\n{% docs action_serial_id %}\nSerial id for the user's action. Depends on the source of the action. May be the bertly click id, sms message id, etc.\n{% enddocs %}\n\n{% docs channel %}\nChannel for the user's action. Depends on the source of the action. (e.g. web, sms)\n{% enddocs %}\n\n{% docs first_action_month %}\nMonth during which the user took their first action. \n{% enddocs %}\n\n{% docs event_id %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs event_source %}\nApplication source for event (eg. Phoenix, Northstar)\n{% enddocs %}\n\n{% docs event_datetime %}\nWhen the event occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs event_name %}\nName of the event (eg. northstar_submitted_register, https://docs.google.com/spreadsheets/d/1lm-fGrIm85nUTxSojqyCt_Ehmm1zEbViFhKpxcJiz1A/edit#gid=406441516)\n{% enddocs %}\n\n{% docs event_type %}\nType of event (pv = 'Page View', se = 'Structured Event')\n{% enddocs %}\n\n{% docs host %}\nURL host where event occurred (eg. www.dosomething.org or identity.dosomething.org)\n{% enddocs %}\n\n{% docs path %}\nURL path event occurred at (eg. /login or /us/campaigns/huddle-for-heroes)\n{% enddocs %}\n\n{% docs query_parameters %}\nOptional query parameters for the request (eg. query=huddle)\n{% enddocs %}\n\n{% docs se_category %}\nCategory of event (eg. focused_field, authentication) - Custom structured event\n{% enddocs %}\n\n{% docs se_action %}\nAction performed / event name (eg. form_submitted, action_failed) - Custom structured event\n{% enddocs %}\n\n{% docs se_label %}\nThe object of the action (eg. first_name, register, voter_reg_status) - Custom structured event\n{% enddocs %}\n\n{% docs session_id %}\nUnique identifier of the user's session\n{% enddocs %}\n\n{% docs session_counter %}\nHow many sessions a user has started\n{% enddocs %}\n\n{% docs browser_size %}\nWhich type of browser a user is using (eg. Mobile, Desktop)\n{% enddocs %}\n\n{% docs northstar_id %}\nThe Northstar ID of the user who generated the event\n{% enddocs %}\n\n{% docs device_id %}\nID of the device used\n{% enddocs %}\n\n{% docs referrer_host %}\nURL host of the referring site (eg. google.com)\n{% enddocs %}\n\n{% docs referrer_path %}\nURL path from referring site (eg. /10-stats-on-teen-drug-and-alcohol-use/)\n{% enddocs %}\n\n{% docs referrer_source %}\nReferrer source name (eg. Google, Facebook)\n{% enddocs %}\n\n{% docs utm_source %}\nTracks where the traffic is coming from. (eg. scholarship_listing, Facebook)\n{% enddocs %}\n\n{% docs utm_medium %}\nHow the traffic got to the platform (eg. referral, CPC)\n{% enddocs %}\n\n{% docs utm_campaign %}\nTracks which campaign the traffic was generated by. Shows up in Google Analytics as Campaign Name (eg. editorial_newsletter)\n{% enddocs %}\n\n{% docs url %}\nURL of campaign (eg. https://dosome.click/nyn5m7)\n{% enddocs %}\n\n{% docs modal_type %}\nNULL or SURVEY_MODAL\n{% enddocs %}\n\n{% docs landing_datetime %}\nWhen the session started in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs ending_datetime %}\nWhen the session ended in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs session_duration_seconds %}\nSession duration in seconds\n{% enddocs %}\n\n{% docs num_pages_views %}\nNumber of pages viewed in session\n{% enddocs %}\n\n{% docs landing_page %}\nFirst page the user viewed in the session (eg. /us/facts/11-facts-about-bp-oil-spill)\n{% enddocs %}\n\n{% docs exit_page %}\n\"Which page the user ended or exited their session from (eg. /us/campaigns/green-your-getaway)\"\n{% enddocs %}\n\n{% docs days_since_last_session %}\n\"Days since their last session.\"\n{% enddocs %}\n\n{% docs post_type %}\nType of post, (e.g. photo, voter-reg)\n{% enddocs %}\n\n{% docs noun %}\nNoun that corresponds to the item in the call to action that was delivered. (e.g. drawings, tweets)\n{% enddocs %}\n\n{% docs verb %}\nVerb corresponding to the action the user took. (e.g. shared, sent, taken)\n{% enddocs %}\n\n{% docs deleted_at %}\nDate time in UTC when a user deleted their post.\n{% enddocs %}\n\n{% docs _fivetran_deleted %}\nMarks rows that were deleted in the source table\n{% enddocs %}\n\n{% docs _fivetran_synced %}\n(UTC timestamp) keeps track of when each row was last successfully synced\n{% enddocs %}\n\n{% docs reportback %}\nWhether the post is a reportback \n{% enddocs %}\n\n{% docs active %}\nWhether the user is active \n{% enddocs %}\n\n{% docs anonymous %}\nWhether the user is anonymous when making the post \n{% enddocs %}\n\n{% docs callpower_campaign_id %}\nUnique ID corresponding to the Callpower campaign. Callpower allows users to record messages for their representatives.\n{% enddocs %}\n\n{% docs quiz %}\nWhether the post is a quiz \n{% enddocs %}\n\n{% docs action_type %}\nType of action the user took. (e.g. share-something, donate-something)\n{% enddocs %}\n\n{% docs online %}\nWhether the action is a online as opposed to IRL.\n{% enddocs %}\n\n{% docs time_commitment %}\nEstimated time required to do the action (e.g. 3.0+, <0.5)\n{% enddocs %}\n\n{% docs num_signups %}\nQuantity of campaign signups\n{% enddocs %}\n\n{% docs most_recent_signup %}\nTimestamp of the most recent signup in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs num_rbs %}\nQuantity of reportbacks for the user\n{% enddocs %}\n\n{% docs total_quantity %}\nTotal quantity of items in reportbacks\n{% enddocs %}\n\n{% docs most_recent_rb %}\nWhen the most recent reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs first_rb %}\nWhen the first reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs avg_time_betw_rbs %}\nCalculated average time between reportbacks.\n{% enddocs %}\n\n{% docs avg_days_next_action_after_rb %}\nCalculated average days until next action after reportback\n{% enddocs %}\n\n{% docs days_to_next_action_after_last_rb %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs most_recent_mam_action %}\nMost recent monthly active member qualifying action in UTC (eg. 2018-01-01 12:00:00).\n{% enddocs %}\n\n{% docs most_recent_email_open %}\nMost recent email open in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs most_recent_all_actions %}\nMost recent timestamp of any action in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs last_action_is_rb %}\nWhether the last action the user took was a reportback\n{% enddocs %}\n\n{% docs days_since_last_action %}\nDays since the user's last action\n{% enddocs %}\n\n{% docs time_to_first_rb %}\nHow much time after registering until the user's first reportback\n{% enddocs %}\n\n{% docs sms_unsubscribed_at %}\nTimestamp of when user unsubscribed from SMS messaging\n{% enddocs %}\n\n{% docs user_unsubscribed_at %}\nTimestamp of when user unsubscribed from email or sms\n{% enddocs %}\n\n{% docs voter_reg_acquisition %}\nWhether the user was an acquisition through voter registration efforts. \n{% enddocs %}\n\n{% docs last_logged_in %}\nDate time in UTC when user last logged in to Northstar\n{% enddocs %}\n\n{% docs last_accessed %}\nDate time in UTC when user last access the website\n{% enddocs %}\n\n{% docs last_messaged_at %}\nDate time in UTC when user was last sent a message via SMS or email\n{% enddocs %}\n\n{% docs facebook_id %}\nUser's facebook id\n{% enddocs %}\n\n{% docs mobile %}\nUsers's mobile phone number\n{% enddocs %}\n\n{% docs birthdate %}\nUser's birthdate\n{% enddocs %}\n\n{% docs first_name %}\nUser's first name\n{% enddocs %}\n\n{% docs last_name %}\nUser's last name\n{% enddocs %}\n\n{% docs voter_registration_status %}\nUser's registration status. (e.g. registration_complete, confirmed, uncertain) \n{% enddocs %}\n\n{% docs finish_with_state %}\nIf the registrant was eligible to use and passed through to complete their registration with their state\u2019s OVR system, it will be indicated in this field (direct quote from Rock-The-Vote documentation). Yes/No value in field.\n{% enddocs %}\n\n{% docs reportback_volume %}\nThis field returns 1 if non voter-reg action, since campaigns team only counts those a 1 reportback. If voter-reg action, we want to count quantity of post as number of registered voters.\n{% enddocs %}\n\n{% docs address_street_1 %}\nFirst line of user's street address\n{% enddocs %}\n\n{% docs address_street_2 %}\nSecond line of user's street address\n{% enddocs %}\n\n{% docs city %}\nUser's city\n{% enddocs %}\n\n{% docs state %}\nUser's state\n{% enddocs %}\n\n{% docs country %}\nUser's country\n{% enddocs %}\n\n{% docs language %}\nUser's language\n{% enddocs %}\n\n{% docs cio_status %}\nStatus of user from CIO. (e.g. customer_subscribed, customer_unsubscribed)\n{% enddocs %}\n\n{% docs cio_status_timestamp %}\nTimestamp when users's status was updated.\n{% enddocs %}\n\n{% docs sms_status %}\nCurrent SMS status. (e.g. undeliverable, unknown)\n{% enddocs %}\n\n{% docs source_detail %}\nDetails of the origin of the user. (e.g. tell_a_friend, other, opt_in_path/197981)\n{% enddocs %}\n\n{% docs badges %}\nWhether the user has any badges. \n{% enddocs %}\n\n{% docs refer_friends %}\nWhether the user is a part of the refer a friend campaign. \n{% enddocs %}\n\n{% docs subscribed_member %}\nWhether the user is subscribed. \n{% enddocs %}\n\n{% docs last_updated_at %}\nTimestamp when users's was updated.\n{% enddocs %}\n\n{% docs school_id %}\nUnique identifier for the user's school. This info comes from the school finder.\n{% enddocs %}\n\n{% docs newsletter_topic %}\nNewsletter topic. (e.g. community, lifestyle)\n{% enddocs %}\n\n{% docs user_agent %}\nFull user agent string for a user's browser (e.g. \"Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:24.0) Gecko/20100101 Firefox/24.0\")\n{% enddocs %}\n\n{% docs drupal_id %}\nOld Drupal user ID\n{% enddocs %}\n\n{% docs campaigns %}\nCampaigns a user is signed up for.\n{% enddocs %}\n\n{% docs audit %}\nA very useful field with data containing information about changes to a user, e.g. timestamps when the user subscribed and unsubscribed.\n{% enddocs %}\n\n{% docs voting_plan_status %}\nThe indication of the user's plan to vote, e.g. voting, not_voting, cant_vote\n{% enddocs %}\n\n{% docs voting_plan_time_of_day %}\nThe time of day when the user plans to vote, e.g morning, afternoon, evening\n{% enddocs %}\n\n{% docs voting_plan_method_of_transport %}\nHow the user plans to get to their polling place. e.g. walk, drive\n{% enddocs %}\n\n{% docs voting_plan_attending_with %}\nWith Whom the user plans to go voting, e.g. family, friends, alone\n{% enddocs %}\n\n{% docs feature_flags %}\nJSON containing info on features like badges and refer-a-friend.\n{% enddocs %}\n\n{% docs dbt_updated_at %}\nDBT snapshot table data. The updated_at timestamp of the source record when this snapshot row was inserted.\n{% enddocs %}\n\n{% docs dbt_scd_id %}\nDBT snapshot table data. A unique key generated for each snapshotted record.\n{% enddocs %}\n\n{% docs dbt_valid_from %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this snapshot row was first inserted\n{% enddocs %}\n\n{% docs dbt_valid_to %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this row row became invalidated.\n{% enddocs %}\n\n{% docs google_id %}\nUser's Google ID obtained from login.\n{% enddocs %}\n\n{% docs causes %}\nCauses in which a user is interested. e.g. animal welfare, education, mental_health\n{% enddocs %}\n\n{% docs email_subscription_status %}\nEmail subscription status of the user\n{% enddocs %}\n\n{% docs role %}\nUser's role, e.g. user, staff\n{% enddocs %}\n\n{% docs cio_backfilled %}\nWhether this user's data was backfilled from CIO\n{% enddocs %}\n\n{% docs addr_source %}\nWhere the user submitted their address, e.g. sms, GDPR\n{% enddocs %}\n\n{% docs email_subscription_topics %}\nEmail subscription topics correspond to categories in CIO in which the user is interested. e.g. lifestyle, community, scholarship\n{% enddocs %}\n\n{% docs sms_paused %}\nWhether we've paused sending sms messages to the user.\n{% enddocs %}\n\n\n\n\n", "name": "referrer_host", "unique_id": "ds_dbt.referrer_host", "block_contents": "URL host of the referring site (eg. google.com)"}, "ds_dbt.referrer_path": {"root_path": "/Users/mrich/projects/quasar/quasar/dbt", "resource_type": "docs", "path": "schema.md", "original_file_path": "models/schema.md", "package_name": "ds_dbt", "file_contents": "\n{% docs click_id %}\nThis is a unique identifier for each click\n{% enddocs %}\n\n{% docs click_time %}\nTimestamp when user clicked.\n{% enddocs %}\n\n{% docs shortened %}\nShortened URL\n{% enddocs %}\n\n{% docs target_url %}\nURL where the user will be directed\n{% enddocs %}\n\n{% docs broadcast_id %}\nID of the broadcast that generated the shortened URL\n{% enddocs %}\n\n{% docs source %}\nSource of the URL (e.g. SMS, web), origin of the post (e.g. phoenix-web, phoenix-ashes, sms), or source where user was acquired. (e.g. sms, phoenix-next)\n{% enddocs %}\n\n{% docs interaction_type %}\nHow the user interacted with the link (e.g. preview, click)\n{% enddocs %}\n\n{% docs id %}\nUnique identifier for the post\n{% enddocs %}\n\n{% docs type %}\nType of post (e.g. photo)\n{% enddocs %}\n\n{% docs action %}\nPost action (e.g. DefendDreamers_Nov9_CongressCalls, GunViolence2018_Feb15_ParklandResponse)\n{% enddocs %}\n\n{% docs status %}\nPost status (e.g. accepted, rejected)\n{% enddocs %}\n\n{% docs quantity %}\nNumerical quantity of items specified in the call to action (e.g. 10, 200)\n{% enddocs %}\n\n{% docs source_bucket %}\nGrouping bucket for origin of the post (e.g. web, sms) \n{% enddocs %}\n\n{% docs created_at %}\nWhen the item was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs updated_at %}\nWhen the item was updated in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs text %}\nText of the post (e.g. \"Zoo animals and a super hero trying to help too!\") \n{% enddocs %}\n\n{% docs signup_id %}\nUnique identifier for the signup \n{% enddocs %}\n\n{% docs post_class %}\nClass of the signup (e.g. \"photo - default\", \"phone-call - DefendDreamers_Jan16_BothBodies\")\n{% enddocs %}\n\n{% docs is_accepted %}\nWhether the post has been accepted to be displayed to the public on the website\n{% enddocs %}\n\n{% docs action_id %}\nInternal identifier of the action \n{% enddocs %}\n\n{% docs location %}\nLocation where the action takes place (e.g. US-NY)\n{% enddocs %}\n\n{% docs postal_code %}\nPostal code where the action takes place\n{% enddocs %}\n\n{% docs is_reportback %}\nWhether the post is a reportback. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs civic_action %}\nWhether the post is a Civic Action. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs scholarship_entry %}\nWhether the post is a Scholarship Entry. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs why_participated %}\nWhy the user participated in this action. Entered by the user.\n{% enddocs %}\n\n{% docs details %}\nDetails about the post. Contains contentfulId and other information (e.g. {\"campaignContentfulId\":\"6ATBgGEQEeJoIcxs1qbwaC\"})\n{% enddocs %}\n\n{% docs email %}\nEmail address of the user.\n{% enddocs %}\n\n{% docs source_details %}\nDetails about the source of the item. This is sometimes represented as a JSON object, and for other tables like Turbovote its represented as a string. (e.g. \"{\"contentful_id\":\"3CTLlXfbwtz1FOMpl31SKV\",\"utm_source\":\"scholarship_listing\",\"utm_medium\":\"referral\",\"utm_campaign\":\"fastweb_2019_08\"}\", newsletter_456)\n{% enddocs %}\n\n{% docs campaign_id %}\nThis is a unique identifier for the campaign\n{% enddocs %}\n\n{% docs campaign_run_id %}\nUnique identifier for the campaign run\n{% enddocs %}\n\n{% docs campaign_name %}\nName of the campaign\n{% enddocs %}\n\n{% docs campaign_cause %}\nCampaign cause (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_run_start_date %}\nStart date of the campaign run\n{% enddocs %}\n\n{% docs campaign_run_end_date %}\nEnd date of the campaign run\n{% enddocs %}\n\n{% docs campaign_created_date %}\nWhen the campaign was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs campaign_node_id %}\nInternal unique node id for the campaign\n{% enddocs %}\n\n{% docs campaign_node_id_title %}\nCampaign title\n{% enddocs %}\n\n{% docs campaign_run_id_title %}\nTitle of the campaign run\n{% enddocs %}\n\n{% docs campaign_action_type %}\nCampaign action type (eg. Make Something, Share Something)\n{% enddocs %}\n\n{% docs campaign_cause_type %}\nCampaign cause type (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_noun %}\nNoun applicable to the user's action\n{% enddocs %}\n\n{% docs campaign_verb %}\nVerb describing the action the user should take\n{% enddocs %}\n\n{% docs campaign_cta %}\nCampaign's call to action\n{% enddocs %}\n\n{% docs campaign_language %}\n\"Language in which the campaign is available\"\n{% enddocs %}\n\n{% docs agent_id %}\nIf set, the content type of the picture the member is sending us. Exp. image/png.\n{% enddocs %}\n\n{% docs attachment_content_type %}\nIf set, the handle of the Front agent this outbound support message is from.\n{% enddocs %}\n\n{% docs topic %}\nHolds a reference to the **last** campaign topic the member's conversation was in. This is useful to allow members to talk to Gambit and get quick responses (through Rivescript), without Gambit completely forgetting what state the member's interaction with a campaign topic was in.\n{% enddocs %}\n\n{% docs action_serial_id %}\nSerial id for the user's action. Depends on the source of the action. May be the bertly click id, sms message id, etc.\n{% enddocs %}\n\n{% docs channel %}\nChannel for the user's action. Depends on the source of the action. (e.g. web, sms)\n{% enddocs %}\n\n{% docs first_action_month %}\nMonth during which the user took their first action. \n{% enddocs %}\n\n{% docs event_id %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs event_source %}\nApplication source for event (eg. Phoenix, Northstar)\n{% enddocs %}\n\n{% docs event_datetime %}\nWhen the event occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs event_name %}\nName of the event (eg. northstar_submitted_register, https://docs.google.com/spreadsheets/d/1lm-fGrIm85nUTxSojqyCt_Ehmm1zEbViFhKpxcJiz1A/edit#gid=406441516)\n{% enddocs %}\n\n{% docs event_type %}\nType of event (pv = 'Page View', se = 'Structured Event')\n{% enddocs %}\n\n{% docs host %}\nURL host where event occurred (eg. www.dosomething.org or identity.dosomething.org)\n{% enddocs %}\n\n{% docs path %}\nURL path event occurred at (eg. /login or /us/campaigns/huddle-for-heroes)\n{% enddocs %}\n\n{% docs query_parameters %}\nOptional query parameters for the request (eg. query=huddle)\n{% enddocs %}\n\n{% docs se_category %}\nCategory of event (eg. focused_field, authentication) - Custom structured event\n{% enddocs %}\n\n{% docs se_action %}\nAction performed / event name (eg. form_submitted, action_failed) - Custom structured event\n{% enddocs %}\n\n{% docs se_label %}\nThe object of the action (eg. first_name, register, voter_reg_status) - Custom structured event\n{% enddocs %}\n\n{% docs session_id %}\nUnique identifier of the user's session\n{% enddocs %}\n\n{% docs session_counter %}\nHow many sessions a user has started\n{% enddocs %}\n\n{% docs browser_size %}\nWhich type of browser a user is using (eg. Mobile, Desktop)\n{% enddocs %}\n\n{% docs northstar_id %}\nThe Northstar ID of the user who generated the event\n{% enddocs %}\n\n{% docs device_id %}\nID of the device used\n{% enddocs %}\n\n{% docs referrer_host %}\nURL host of the referring site (eg. google.com)\n{% enddocs %}\n\n{% docs referrer_path %}\nURL path from referring site (eg. /10-stats-on-teen-drug-and-alcohol-use/)\n{% enddocs %}\n\n{% docs referrer_source %}\nReferrer source name (eg. Google, Facebook)\n{% enddocs %}\n\n{% docs utm_source %}\nTracks where the traffic is coming from. (eg. scholarship_listing, Facebook)\n{% enddocs %}\n\n{% docs utm_medium %}\nHow the traffic got to the platform (eg. referral, CPC)\n{% enddocs %}\n\n{% docs utm_campaign %}\nTracks which campaign the traffic was generated by. Shows up in Google Analytics as Campaign Name (eg. editorial_newsletter)\n{% enddocs %}\n\n{% docs url %}\nURL of campaign (eg. https://dosome.click/nyn5m7)\n{% enddocs %}\n\n{% docs modal_type %}\nNULL or SURVEY_MODAL\n{% enddocs %}\n\n{% docs landing_datetime %}\nWhen the session started in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs ending_datetime %}\nWhen the session ended in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs session_duration_seconds %}\nSession duration in seconds\n{% enddocs %}\n\n{% docs num_pages_views %}\nNumber of pages viewed in session\n{% enddocs %}\n\n{% docs landing_page %}\nFirst page the user viewed in the session (eg. /us/facts/11-facts-about-bp-oil-spill)\n{% enddocs %}\n\n{% docs exit_page %}\n\"Which page the user ended or exited their session from (eg. /us/campaigns/green-your-getaway)\"\n{% enddocs %}\n\n{% docs days_since_last_session %}\n\"Days since their last session.\"\n{% enddocs %}\n\n{% docs post_type %}\nType of post, (e.g. photo, voter-reg)\n{% enddocs %}\n\n{% docs noun %}\nNoun that corresponds to the item in the call to action that was delivered. (e.g. drawings, tweets)\n{% enddocs %}\n\n{% docs verb %}\nVerb corresponding to the action the user took. (e.g. shared, sent, taken)\n{% enddocs %}\n\n{% docs deleted_at %}\nDate time in UTC when a user deleted their post.\n{% enddocs %}\n\n{% docs _fivetran_deleted %}\nMarks rows that were deleted in the source table\n{% enddocs %}\n\n{% docs _fivetran_synced %}\n(UTC timestamp) keeps track of when each row was last successfully synced\n{% enddocs %}\n\n{% docs reportback %}\nWhether the post is a reportback \n{% enddocs %}\n\n{% docs active %}\nWhether the user is active \n{% enddocs %}\n\n{% docs anonymous %}\nWhether the user is anonymous when making the post \n{% enddocs %}\n\n{% docs callpower_campaign_id %}\nUnique ID corresponding to the Callpower campaign. Callpower allows users to record messages for their representatives.\n{% enddocs %}\n\n{% docs quiz %}\nWhether the post is a quiz \n{% enddocs %}\n\n{% docs action_type %}\nType of action the user took. (e.g. share-something, donate-something)\n{% enddocs %}\n\n{% docs online %}\nWhether the action is a online as opposed to IRL.\n{% enddocs %}\n\n{% docs time_commitment %}\nEstimated time required to do the action (e.g. 3.0+, <0.5)\n{% enddocs %}\n\n{% docs num_signups %}\nQuantity of campaign signups\n{% enddocs %}\n\n{% docs most_recent_signup %}\nTimestamp of the most recent signup in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs num_rbs %}\nQuantity of reportbacks for the user\n{% enddocs %}\n\n{% docs total_quantity %}\nTotal quantity of items in reportbacks\n{% enddocs %}\n\n{% docs most_recent_rb %}\nWhen the most recent reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs first_rb %}\nWhen the first reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs avg_time_betw_rbs %}\nCalculated average time between reportbacks.\n{% enddocs %}\n\n{% docs avg_days_next_action_after_rb %}\nCalculated average days until next action after reportback\n{% enddocs %}\n\n{% docs days_to_next_action_after_last_rb %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs most_recent_mam_action %}\nMost recent monthly active member qualifying action in UTC (eg. 2018-01-01 12:00:00).\n{% enddocs %}\n\n{% docs most_recent_email_open %}\nMost recent email open in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs most_recent_all_actions %}\nMost recent timestamp of any action in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs last_action_is_rb %}\nWhether the last action the user took was a reportback\n{% enddocs %}\n\n{% docs days_since_last_action %}\nDays since the user's last action\n{% enddocs %}\n\n{% docs time_to_first_rb %}\nHow much time after registering until the user's first reportback\n{% enddocs %}\n\n{% docs sms_unsubscribed_at %}\nTimestamp of when user unsubscribed from SMS messaging\n{% enddocs %}\n\n{% docs user_unsubscribed_at %}\nTimestamp of when user unsubscribed from email or sms\n{% enddocs %}\n\n{% docs voter_reg_acquisition %}\nWhether the user was an acquisition through voter registration efforts. \n{% enddocs %}\n\n{% docs last_logged_in %}\nDate time in UTC when user last logged in to Northstar\n{% enddocs %}\n\n{% docs last_accessed %}\nDate time in UTC when user last access the website\n{% enddocs %}\n\n{% docs last_messaged_at %}\nDate time in UTC when user was last sent a message via SMS or email\n{% enddocs %}\n\n{% docs facebook_id %}\nUser's facebook id\n{% enddocs %}\n\n{% docs mobile %}\nUsers's mobile phone number\n{% enddocs %}\n\n{% docs birthdate %}\nUser's birthdate\n{% enddocs %}\n\n{% docs first_name %}\nUser's first name\n{% enddocs %}\n\n{% docs last_name %}\nUser's last name\n{% enddocs %}\n\n{% docs voter_registration_status %}\nUser's registration status. (e.g. registration_complete, confirmed, uncertain) \n{% enddocs %}\n\n{% docs finish_with_state %}\nIf the registrant was eligible to use and passed through to complete their registration with their state\u2019s OVR system, it will be indicated in this field (direct quote from Rock-The-Vote documentation). Yes/No value in field.\n{% enddocs %}\n\n{% docs reportback_volume %}\nThis field returns 1 if non voter-reg action, since campaigns team only counts those a 1 reportback. If voter-reg action, we want to count quantity of post as number of registered voters.\n{% enddocs %}\n\n{% docs address_street_1 %}\nFirst line of user's street address\n{% enddocs %}\n\n{% docs address_street_2 %}\nSecond line of user's street address\n{% enddocs %}\n\n{% docs city %}\nUser's city\n{% enddocs %}\n\n{% docs state %}\nUser's state\n{% enddocs %}\n\n{% docs country %}\nUser's country\n{% enddocs %}\n\n{% docs language %}\nUser's language\n{% enddocs %}\n\n{% docs cio_status %}\nStatus of user from CIO. (e.g. customer_subscribed, customer_unsubscribed)\n{% enddocs %}\n\n{% docs cio_status_timestamp %}\nTimestamp when users's status was updated.\n{% enddocs %}\n\n{% docs sms_status %}\nCurrent SMS status. (e.g. undeliverable, unknown)\n{% enddocs %}\n\n{% docs source_detail %}\nDetails of the origin of the user. (e.g. tell_a_friend, other, opt_in_path/197981)\n{% enddocs %}\n\n{% docs badges %}\nWhether the user has any badges. \n{% enddocs %}\n\n{% docs refer_friends %}\nWhether the user is a part of the refer a friend campaign. \n{% enddocs %}\n\n{% docs subscribed_member %}\nWhether the user is subscribed. \n{% enddocs %}\n\n{% docs last_updated_at %}\nTimestamp when users's was updated.\n{% enddocs %}\n\n{% docs school_id %}\nUnique identifier for the user's school. This info comes from the school finder.\n{% enddocs %}\n\n{% docs newsletter_topic %}\nNewsletter topic. (e.g. community, lifestyle)\n{% enddocs %}\n\n{% docs user_agent %}\nFull user agent string for a user's browser (e.g. \"Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:24.0) Gecko/20100101 Firefox/24.0\")\n{% enddocs %}\n\n{% docs drupal_id %}\nOld Drupal user ID\n{% enddocs %}\n\n{% docs campaigns %}\nCampaigns a user is signed up for.\n{% enddocs %}\n\n{% docs audit %}\nA very useful field with data containing information about changes to a user, e.g. timestamps when the user subscribed and unsubscribed.\n{% enddocs %}\n\n{% docs voting_plan_status %}\nThe indication of the user's plan to vote, e.g. voting, not_voting, cant_vote\n{% enddocs %}\n\n{% docs voting_plan_time_of_day %}\nThe time of day when the user plans to vote, e.g morning, afternoon, evening\n{% enddocs %}\n\n{% docs voting_plan_method_of_transport %}\nHow the user plans to get to their polling place. e.g. walk, drive\n{% enddocs %}\n\n{% docs voting_plan_attending_with %}\nWith Whom the user plans to go voting, e.g. family, friends, alone\n{% enddocs %}\n\n{% docs feature_flags %}\nJSON containing info on features like badges and refer-a-friend.\n{% enddocs %}\n\n{% docs dbt_updated_at %}\nDBT snapshot table data. The updated_at timestamp of the source record when this snapshot row was inserted.\n{% enddocs %}\n\n{% docs dbt_scd_id %}\nDBT snapshot table data. A unique key generated for each snapshotted record.\n{% enddocs %}\n\n{% docs dbt_valid_from %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this snapshot row was first inserted\n{% enddocs %}\n\n{% docs dbt_valid_to %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this row row became invalidated.\n{% enddocs %}\n\n{% docs google_id %}\nUser's Google ID obtained from login.\n{% enddocs %}\n\n{% docs causes %}\nCauses in which a user is interested. e.g. animal welfare, education, mental_health\n{% enddocs %}\n\n{% docs email_subscription_status %}\nEmail subscription status of the user\n{% enddocs %}\n\n{% docs role %}\nUser's role, e.g. user, staff\n{% enddocs %}\n\n{% docs cio_backfilled %}\nWhether this user's data was backfilled from CIO\n{% enddocs %}\n\n{% docs addr_source %}\nWhere the user submitted their address, e.g. sms, GDPR\n{% enddocs %}\n\n{% docs email_subscription_topics %}\nEmail subscription topics correspond to categories in CIO in which the user is interested. e.g. lifestyle, community, scholarship\n{% enddocs %}\n\n{% docs sms_paused %}\nWhether we've paused sending sms messages to the user.\n{% enddocs %}\n\n\n\n\n", "name": "referrer_path", "unique_id": "ds_dbt.referrer_path", "block_contents": "URL path from referring site (eg. /10-stats-on-teen-drug-and-alcohol-use/)"}, "ds_dbt.referrer_source": {"root_path": "/Users/mrich/projects/quasar/quasar/dbt", "resource_type": "docs", "path": "schema.md", "original_file_path": "models/schema.md", "package_name": "ds_dbt", "file_contents": "\n{% docs click_id %}\nThis is a unique identifier for each click\n{% enddocs %}\n\n{% docs click_time %}\nTimestamp when user clicked.\n{% enddocs %}\n\n{% docs shortened %}\nShortened URL\n{% enddocs %}\n\n{% docs target_url %}\nURL where the user will be directed\n{% enddocs %}\n\n{% docs broadcast_id %}\nID of the broadcast that generated the shortened URL\n{% enddocs %}\n\n{% docs source %}\nSource of the URL (e.g. SMS, web), origin of the post (e.g. phoenix-web, phoenix-ashes, sms), or source where user was acquired. (e.g. sms, phoenix-next)\n{% enddocs %}\n\n{% docs interaction_type %}\nHow the user interacted with the link (e.g. preview, click)\n{% enddocs %}\n\n{% docs id %}\nUnique identifier for the post\n{% enddocs %}\n\n{% docs type %}\nType of post (e.g. photo)\n{% enddocs %}\n\n{% docs action %}\nPost action (e.g. DefendDreamers_Nov9_CongressCalls, GunViolence2018_Feb15_ParklandResponse)\n{% enddocs %}\n\n{% docs status %}\nPost status (e.g. accepted, rejected)\n{% enddocs %}\n\n{% docs quantity %}\nNumerical quantity of items specified in the call to action (e.g. 10, 200)\n{% enddocs %}\n\n{% docs source_bucket %}\nGrouping bucket for origin of the post (e.g. web, sms) \n{% enddocs %}\n\n{% docs created_at %}\nWhen the item was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs updated_at %}\nWhen the item was updated in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs text %}\nText of the post (e.g. \"Zoo animals and a super hero trying to help too!\") \n{% enddocs %}\n\n{% docs signup_id %}\nUnique identifier for the signup \n{% enddocs %}\n\n{% docs post_class %}\nClass of the signup (e.g. \"photo - default\", \"phone-call - DefendDreamers_Jan16_BothBodies\")\n{% enddocs %}\n\n{% docs is_accepted %}\nWhether the post has been accepted to be displayed to the public on the website\n{% enddocs %}\n\n{% docs action_id %}\nInternal identifier of the action \n{% enddocs %}\n\n{% docs location %}\nLocation where the action takes place (e.g. US-NY)\n{% enddocs %}\n\n{% docs postal_code %}\nPostal code where the action takes place\n{% enddocs %}\n\n{% docs is_reportback %}\nWhether the post is a reportback. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs civic_action %}\nWhether the post is a Civic Action. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs scholarship_entry %}\nWhether the post is a Scholarship Entry. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs why_participated %}\nWhy the user participated in this action. Entered by the user.\n{% enddocs %}\n\n{% docs details %}\nDetails about the post. Contains contentfulId and other information (e.g. {\"campaignContentfulId\":\"6ATBgGEQEeJoIcxs1qbwaC\"})\n{% enddocs %}\n\n{% docs email %}\nEmail address of the user.\n{% enddocs %}\n\n{% docs source_details %}\nDetails about the source of the item. This is sometimes represented as a JSON object, and for other tables like Turbovote its represented as a string. (e.g. \"{\"contentful_id\":\"3CTLlXfbwtz1FOMpl31SKV\",\"utm_source\":\"scholarship_listing\",\"utm_medium\":\"referral\",\"utm_campaign\":\"fastweb_2019_08\"}\", newsletter_456)\n{% enddocs %}\n\n{% docs campaign_id %}\nThis is a unique identifier for the campaign\n{% enddocs %}\n\n{% docs campaign_run_id %}\nUnique identifier for the campaign run\n{% enddocs %}\n\n{% docs campaign_name %}\nName of the campaign\n{% enddocs %}\n\n{% docs campaign_cause %}\nCampaign cause (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_run_start_date %}\nStart date of the campaign run\n{% enddocs %}\n\n{% docs campaign_run_end_date %}\nEnd date of the campaign run\n{% enddocs %}\n\n{% docs campaign_created_date %}\nWhen the campaign was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs campaign_node_id %}\nInternal unique node id for the campaign\n{% enddocs %}\n\n{% docs campaign_node_id_title %}\nCampaign title\n{% enddocs %}\n\n{% docs campaign_run_id_title %}\nTitle of the campaign run\n{% enddocs %}\n\n{% docs campaign_action_type %}\nCampaign action type (eg. Make Something, Share Something)\n{% enddocs %}\n\n{% docs campaign_cause_type %}\nCampaign cause type (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_noun %}\nNoun applicable to the user's action\n{% enddocs %}\n\n{% docs campaign_verb %}\nVerb describing the action the user should take\n{% enddocs %}\n\n{% docs campaign_cta %}\nCampaign's call to action\n{% enddocs %}\n\n{% docs campaign_language %}\n\"Language in which the campaign is available\"\n{% enddocs %}\n\n{% docs agent_id %}\nIf set, the content type of the picture the member is sending us. Exp. image/png.\n{% enddocs %}\n\n{% docs attachment_content_type %}\nIf set, the handle of the Front agent this outbound support message is from.\n{% enddocs %}\n\n{% docs topic %}\nHolds a reference to the **last** campaign topic the member's conversation was in. This is useful to allow members to talk to Gambit and get quick responses (through Rivescript), without Gambit completely forgetting what state the member's interaction with a campaign topic was in.\n{% enddocs %}\n\n{% docs action_serial_id %}\nSerial id for the user's action. Depends on the source of the action. May be the bertly click id, sms message id, etc.\n{% enddocs %}\n\n{% docs channel %}\nChannel for the user's action. Depends on the source of the action. (e.g. web, sms)\n{% enddocs %}\n\n{% docs first_action_month %}\nMonth during which the user took their first action. \n{% enddocs %}\n\n{% docs event_id %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs event_source %}\nApplication source for event (eg. Phoenix, Northstar)\n{% enddocs %}\n\n{% docs event_datetime %}\nWhen the event occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs event_name %}\nName of the event (eg. northstar_submitted_register, https://docs.google.com/spreadsheets/d/1lm-fGrIm85nUTxSojqyCt_Ehmm1zEbViFhKpxcJiz1A/edit#gid=406441516)\n{% enddocs %}\n\n{% docs event_type %}\nType of event (pv = 'Page View', se = 'Structured Event')\n{% enddocs %}\n\n{% docs host %}\nURL host where event occurred (eg. www.dosomething.org or identity.dosomething.org)\n{% enddocs %}\n\n{% docs path %}\nURL path event occurred at (eg. /login or /us/campaigns/huddle-for-heroes)\n{% enddocs %}\n\n{% docs query_parameters %}\nOptional query parameters for the request (eg. query=huddle)\n{% enddocs %}\n\n{% docs se_category %}\nCategory of event (eg. focused_field, authentication) - Custom structured event\n{% enddocs %}\n\n{% docs se_action %}\nAction performed / event name (eg. form_submitted, action_failed) - Custom structured event\n{% enddocs %}\n\n{% docs se_label %}\nThe object of the action (eg. first_name, register, voter_reg_status) - Custom structured event\n{% enddocs %}\n\n{% docs session_id %}\nUnique identifier of the user's session\n{% enddocs %}\n\n{% docs session_counter %}\nHow many sessions a user has started\n{% enddocs %}\n\n{% docs browser_size %}\nWhich type of browser a user is using (eg. Mobile, Desktop)\n{% enddocs %}\n\n{% docs northstar_id %}\nThe Northstar ID of the user who generated the event\n{% enddocs %}\n\n{% docs device_id %}\nID of the device used\n{% enddocs %}\n\n{% docs referrer_host %}\nURL host of the referring site (eg. google.com)\n{% enddocs %}\n\n{% docs referrer_path %}\nURL path from referring site (eg. /10-stats-on-teen-drug-and-alcohol-use/)\n{% enddocs %}\n\n{% docs referrer_source %}\nReferrer source name (eg. Google, Facebook)\n{% enddocs %}\n\n{% docs utm_source %}\nTracks where the traffic is coming from. (eg. scholarship_listing, Facebook)\n{% enddocs %}\n\n{% docs utm_medium %}\nHow the traffic got to the platform (eg. referral, CPC)\n{% enddocs %}\n\n{% docs utm_campaign %}\nTracks which campaign the traffic was generated by. Shows up in Google Analytics as Campaign Name (eg. editorial_newsletter)\n{% enddocs %}\n\n{% docs url %}\nURL of campaign (eg. https://dosome.click/nyn5m7)\n{% enddocs %}\n\n{% docs modal_type %}\nNULL or SURVEY_MODAL\n{% enddocs %}\n\n{% docs landing_datetime %}\nWhen the session started in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs ending_datetime %}\nWhen the session ended in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs session_duration_seconds %}\nSession duration in seconds\n{% enddocs %}\n\n{% docs num_pages_views %}\nNumber of pages viewed in session\n{% enddocs %}\n\n{% docs landing_page %}\nFirst page the user viewed in the session (eg. /us/facts/11-facts-about-bp-oil-spill)\n{% enddocs %}\n\n{% docs exit_page %}\n\"Which page the user ended or exited their session from (eg. /us/campaigns/green-your-getaway)\"\n{% enddocs %}\n\n{% docs days_since_last_session %}\n\"Days since their last session.\"\n{% enddocs %}\n\n{% docs post_type %}\nType of post, (e.g. photo, voter-reg)\n{% enddocs %}\n\n{% docs noun %}\nNoun that corresponds to the item in the call to action that was delivered. (e.g. drawings, tweets)\n{% enddocs %}\n\n{% docs verb %}\nVerb corresponding to the action the user took. (e.g. shared, sent, taken)\n{% enddocs %}\n\n{% docs deleted_at %}\nDate time in UTC when a user deleted their post.\n{% enddocs %}\n\n{% docs _fivetran_deleted %}\nMarks rows that were deleted in the source table\n{% enddocs %}\n\n{% docs _fivetran_synced %}\n(UTC timestamp) keeps track of when each row was last successfully synced\n{% enddocs %}\n\n{% docs reportback %}\nWhether the post is a reportback \n{% enddocs %}\n\n{% docs active %}\nWhether the user is active \n{% enddocs %}\n\n{% docs anonymous %}\nWhether the user is anonymous when making the post \n{% enddocs %}\n\n{% docs callpower_campaign_id %}\nUnique ID corresponding to the Callpower campaign. Callpower allows users to record messages for their representatives.\n{% enddocs %}\n\n{% docs quiz %}\nWhether the post is a quiz \n{% enddocs %}\n\n{% docs action_type %}\nType of action the user took. (e.g. share-something, donate-something)\n{% enddocs %}\n\n{% docs online %}\nWhether the action is a online as opposed to IRL.\n{% enddocs %}\n\n{% docs time_commitment %}\nEstimated time required to do the action (e.g. 3.0+, <0.5)\n{% enddocs %}\n\n{% docs num_signups %}\nQuantity of campaign signups\n{% enddocs %}\n\n{% docs most_recent_signup %}\nTimestamp of the most recent signup in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs num_rbs %}\nQuantity of reportbacks for the user\n{% enddocs %}\n\n{% docs total_quantity %}\nTotal quantity of items in reportbacks\n{% enddocs %}\n\n{% docs most_recent_rb %}\nWhen the most recent reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs first_rb %}\nWhen the first reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs avg_time_betw_rbs %}\nCalculated average time between reportbacks.\n{% enddocs %}\n\n{% docs avg_days_next_action_after_rb %}\nCalculated average days until next action after reportback\n{% enddocs %}\n\n{% docs days_to_next_action_after_last_rb %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs most_recent_mam_action %}\nMost recent monthly active member qualifying action in UTC (eg. 2018-01-01 12:00:00).\n{% enddocs %}\n\n{% docs most_recent_email_open %}\nMost recent email open in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs most_recent_all_actions %}\nMost recent timestamp of any action in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs last_action_is_rb %}\nWhether the last action the user took was a reportback\n{% enddocs %}\n\n{% docs days_since_last_action %}\nDays since the user's last action\n{% enddocs %}\n\n{% docs time_to_first_rb %}\nHow much time after registering until the user's first reportback\n{% enddocs %}\n\n{% docs sms_unsubscribed_at %}\nTimestamp of when user unsubscribed from SMS messaging\n{% enddocs %}\n\n{% docs user_unsubscribed_at %}\nTimestamp of when user unsubscribed from email or sms\n{% enddocs %}\n\n{% docs voter_reg_acquisition %}\nWhether the user was an acquisition through voter registration efforts. \n{% enddocs %}\n\n{% docs last_logged_in %}\nDate time in UTC when user last logged in to Northstar\n{% enddocs %}\n\n{% docs last_accessed %}\nDate time in UTC when user last access the website\n{% enddocs %}\n\n{% docs last_messaged_at %}\nDate time in UTC when user was last sent a message via SMS or email\n{% enddocs %}\n\n{% docs facebook_id %}\nUser's facebook id\n{% enddocs %}\n\n{% docs mobile %}\nUsers's mobile phone number\n{% enddocs %}\n\n{% docs birthdate %}\nUser's birthdate\n{% enddocs %}\n\n{% docs first_name %}\nUser's first name\n{% enddocs %}\n\n{% docs last_name %}\nUser's last name\n{% enddocs %}\n\n{% docs voter_registration_status %}\nUser's registration status. (e.g. registration_complete, confirmed, uncertain) \n{% enddocs %}\n\n{% docs finish_with_state %}\nIf the registrant was eligible to use and passed through to complete their registration with their state\u2019s OVR system, it will be indicated in this field (direct quote from Rock-The-Vote documentation). Yes/No value in field.\n{% enddocs %}\n\n{% docs reportback_volume %}\nThis field returns 1 if non voter-reg action, since campaigns team only counts those a 1 reportback. If voter-reg action, we want to count quantity of post as number of registered voters.\n{% enddocs %}\n\n{% docs address_street_1 %}\nFirst line of user's street address\n{% enddocs %}\n\n{% docs address_street_2 %}\nSecond line of user's street address\n{% enddocs %}\n\n{% docs city %}\nUser's city\n{% enddocs %}\n\n{% docs state %}\nUser's state\n{% enddocs %}\n\n{% docs country %}\nUser's country\n{% enddocs %}\n\n{% docs language %}\nUser's language\n{% enddocs %}\n\n{% docs cio_status %}\nStatus of user from CIO. (e.g. customer_subscribed, customer_unsubscribed)\n{% enddocs %}\n\n{% docs cio_status_timestamp %}\nTimestamp when users's status was updated.\n{% enddocs %}\n\n{% docs sms_status %}\nCurrent SMS status. (e.g. undeliverable, unknown)\n{% enddocs %}\n\n{% docs source_detail %}\nDetails of the origin of the user. (e.g. tell_a_friend, other, opt_in_path/197981)\n{% enddocs %}\n\n{% docs badges %}\nWhether the user has any badges. \n{% enddocs %}\n\n{% docs refer_friends %}\nWhether the user is a part of the refer a friend campaign. \n{% enddocs %}\n\n{% docs subscribed_member %}\nWhether the user is subscribed. \n{% enddocs %}\n\n{% docs last_updated_at %}\nTimestamp when users's was updated.\n{% enddocs %}\n\n{% docs school_id %}\nUnique identifier for the user's school. This info comes from the school finder.\n{% enddocs %}\n\n{% docs newsletter_topic %}\nNewsletter topic. (e.g. community, lifestyle)\n{% enddocs %}\n\n{% docs user_agent %}\nFull user agent string for a user's browser (e.g. \"Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:24.0) Gecko/20100101 Firefox/24.0\")\n{% enddocs %}\n\n{% docs drupal_id %}\nOld Drupal user ID\n{% enddocs %}\n\n{% docs campaigns %}\nCampaigns a user is signed up for.\n{% enddocs %}\n\n{% docs audit %}\nA very useful field with data containing information about changes to a user, e.g. timestamps when the user subscribed and unsubscribed.\n{% enddocs %}\n\n{% docs voting_plan_status %}\nThe indication of the user's plan to vote, e.g. voting, not_voting, cant_vote\n{% enddocs %}\n\n{% docs voting_plan_time_of_day %}\nThe time of day when the user plans to vote, e.g morning, afternoon, evening\n{% enddocs %}\n\n{% docs voting_plan_method_of_transport %}\nHow the user plans to get to their polling place. e.g. walk, drive\n{% enddocs %}\n\n{% docs voting_plan_attending_with %}\nWith Whom the user plans to go voting, e.g. family, friends, alone\n{% enddocs %}\n\n{% docs feature_flags %}\nJSON containing info on features like badges and refer-a-friend.\n{% enddocs %}\n\n{% docs dbt_updated_at %}\nDBT snapshot table data. The updated_at timestamp of the source record when this snapshot row was inserted.\n{% enddocs %}\n\n{% docs dbt_scd_id %}\nDBT snapshot table data. A unique key generated for each snapshotted record.\n{% enddocs %}\n\n{% docs dbt_valid_from %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this snapshot row was first inserted\n{% enddocs %}\n\n{% docs dbt_valid_to %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this row row became invalidated.\n{% enddocs %}\n\n{% docs google_id %}\nUser's Google ID obtained from login.\n{% enddocs %}\n\n{% docs causes %}\nCauses in which a user is interested. e.g. animal welfare, education, mental_health\n{% enddocs %}\n\n{% docs email_subscription_status %}\nEmail subscription status of the user\n{% enddocs %}\n\n{% docs role %}\nUser's role, e.g. user, staff\n{% enddocs %}\n\n{% docs cio_backfilled %}\nWhether this user's data was backfilled from CIO\n{% enddocs %}\n\n{% docs addr_source %}\nWhere the user submitted their address, e.g. sms, GDPR\n{% enddocs %}\n\n{% docs email_subscription_topics %}\nEmail subscription topics correspond to categories in CIO in which the user is interested. e.g. lifestyle, community, scholarship\n{% enddocs %}\n\n{% docs sms_paused %}\nWhether we've paused sending sms messages to the user.\n{% enddocs %}\n\n\n\n\n", "name": "referrer_source", "unique_id": "ds_dbt.referrer_source", "block_contents": "Referrer source name (eg. Google, Facebook)"}, "ds_dbt.utm_source": {"root_path": "/Users/mrich/projects/quasar/quasar/dbt", "resource_type": "docs", "path": "schema.md", "original_file_path": "models/schema.md", "package_name": "ds_dbt", "file_contents": "\n{% docs click_id %}\nThis is a unique identifier for each click\n{% enddocs %}\n\n{% docs click_time %}\nTimestamp when user clicked.\n{% enddocs %}\n\n{% docs shortened %}\nShortened URL\n{% enddocs %}\n\n{% docs target_url %}\nURL where the user will be directed\n{% enddocs %}\n\n{% docs broadcast_id %}\nID of the broadcast that generated the shortened URL\n{% enddocs %}\n\n{% docs source %}\nSource of the URL (e.g. SMS, web), origin of the post (e.g. phoenix-web, phoenix-ashes, sms), or source where user was acquired. (e.g. sms, phoenix-next)\n{% enddocs %}\n\n{% docs interaction_type %}\nHow the user interacted with the link (e.g. preview, click)\n{% enddocs %}\n\n{% docs id %}\nUnique identifier for the post\n{% enddocs %}\n\n{% docs type %}\nType of post (e.g. photo)\n{% enddocs %}\n\n{% docs action %}\nPost action (e.g. DefendDreamers_Nov9_CongressCalls, GunViolence2018_Feb15_ParklandResponse)\n{% enddocs %}\n\n{% docs status %}\nPost status (e.g. accepted, rejected)\n{% enddocs %}\n\n{% docs quantity %}\nNumerical quantity of items specified in the call to action (e.g. 10, 200)\n{% enddocs %}\n\n{% docs source_bucket %}\nGrouping bucket for origin of the post (e.g. web, sms) \n{% enddocs %}\n\n{% docs created_at %}\nWhen the item was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs updated_at %}\nWhen the item was updated in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs text %}\nText of the post (e.g. \"Zoo animals and a super hero trying to help too!\") \n{% enddocs %}\n\n{% docs signup_id %}\nUnique identifier for the signup \n{% enddocs %}\n\n{% docs post_class %}\nClass of the signup (e.g. \"photo - default\", \"phone-call - DefendDreamers_Jan16_BothBodies\")\n{% enddocs %}\n\n{% docs is_accepted %}\nWhether the post has been accepted to be displayed to the public on the website\n{% enddocs %}\n\n{% docs action_id %}\nInternal identifier of the action \n{% enddocs %}\n\n{% docs location %}\nLocation where the action takes place (e.g. US-NY)\n{% enddocs %}\n\n{% docs postal_code %}\nPostal code where the action takes place\n{% enddocs %}\n\n{% docs is_reportback %}\nWhether the post is a reportback. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs civic_action %}\nWhether the post is a Civic Action. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs scholarship_entry %}\nWhether the post is a Scholarship Entry. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs why_participated %}\nWhy the user participated in this action. Entered by the user.\n{% enddocs %}\n\n{% docs details %}\nDetails about the post. Contains contentfulId and other information (e.g. {\"campaignContentfulId\":\"6ATBgGEQEeJoIcxs1qbwaC\"})\n{% enddocs %}\n\n{% docs email %}\nEmail address of the user.\n{% enddocs %}\n\n{% docs source_details %}\nDetails about the source of the item. This is sometimes represented as a JSON object, and for other tables like Turbovote its represented as a string. (e.g. \"{\"contentful_id\":\"3CTLlXfbwtz1FOMpl31SKV\",\"utm_source\":\"scholarship_listing\",\"utm_medium\":\"referral\",\"utm_campaign\":\"fastweb_2019_08\"}\", newsletter_456)\n{% enddocs %}\n\n{% docs campaign_id %}\nThis is a unique identifier for the campaign\n{% enddocs %}\n\n{% docs campaign_run_id %}\nUnique identifier for the campaign run\n{% enddocs %}\n\n{% docs campaign_name %}\nName of the campaign\n{% enddocs %}\n\n{% docs campaign_cause %}\nCampaign cause (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_run_start_date %}\nStart date of the campaign run\n{% enddocs %}\n\n{% docs campaign_run_end_date %}\nEnd date of the campaign run\n{% enddocs %}\n\n{% docs campaign_created_date %}\nWhen the campaign was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs campaign_node_id %}\nInternal unique node id for the campaign\n{% enddocs %}\n\n{% docs campaign_node_id_title %}\nCampaign title\n{% enddocs %}\n\n{% docs campaign_run_id_title %}\nTitle of the campaign run\n{% enddocs %}\n\n{% docs campaign_action_type %}\nCampaign action type (eg. Make Something, Share Something)\n{% enddocs %}\n\n{% docs campaign_cause_type %}\nCampaign cause type (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_noun %}\nNoun applicable to the user's action\n{% enddocs %}\n\n{% docs campaign_verb %}\nVerb describing the action the user should take\n{% enddocs %}\n\n{% docs campaign_cta %}\nCampaign's call to action\n{% enddocs %}\n\n{% docs campaign_language %}\n\"Language in which the campaign is available\"\n{% enddocs %}\n\n{% docs agent_id %}\nIf set, the content type of the picture the member is sending us. Exp. image/png.\n{% enddocs %}\n\n{% docs attachment_content_type %}\nIf set, the handle of the Front agent this outbound support message is from.\n{% enddocs %}\n\n{% docs topic %}\nHolds a reference to the **last** campaign topic the member's conversation was in. This is useful to allow members to talk to Gambit and get quick responses (through Rivescript), without Gambit completely forgetting what state the member's interaction with a campaign topic was in.\n{% enddocs %}\n\n{% docs action_serial_id %}\nSerial id for the user's action. Depends on the source of the action. May be the bertly click id, sms message id, etc.\n{% enddocs %}\n\n{% docs channel %}\nChannel for the user's action. Depends on the source of the action. (e.g. web, sms)\n{% enddocs %}\n\n{% docs first_action_month %}\nMonth during which the user took their first action. \n{% enddocs %}\n\n{% docs event_id %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs event_source %}\nApplication source for event (eg. Phoenix, Northstar)\n{% enddocs %}\n\n{% docs event_datetime %}\nWhen the event occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs event_name %}\nName of the event (eg. northstar_submitted_register, https://docs.google.com/spreadsheets/d/1lm-fGrIm85nUTxSojqyCt_Ehmm1zEbViFhKpxcJiz1A/edit#gid=406441516)\n{% enddocs %}\n\n{% docs event_type %}\nType of event (pv = 'Page View', se = 'Structured Event')\n{% enddocs %}\n\n{% docs host %}\nURL host where event occurred (eg. www.dosomething.org or identity.dosomething.org)\n{% enddocs %}\n\n{% docs path %}\nURL path event occurred at (eg. /login or /us/campaigns/huddle-for-heroes)\n{% enddocs %}\n\n{% docs query_parameters %}\nOptional query parameters for the request (eg. query=huddle)\n{% enddocs %}\n\n{% docs se_category %}\nCategory of event (eg. focused_field, authentication) - Custom structured event\n{% enddocs %}\n\n{% docs se_action %}\nAction performed / event name (eg. form_submitted, action_failed) - Custom structured event\n{% enddocs %}\n\n{% docs se_label %}\nThe object of the action (eg. first_name, register, voter_reg_status) - Custom structured event\n{% enddocs %}\n\n{% docs session_id %}\nUnique identifier of the user's session\n{% enddocs %}\n\n{% docs session_counter %}\nHow many sessions a user has started\n{% enddocs %}\n\n{% docs browser_size %}\nWhich type of browser a user is using (eg. Mobile, Desktop)\n{% enddocs %}\n\n{% docs northstar_id %}\nThe Northstar ID of the user who generated the event\n{% enddocs %}\n\n{% docs device_id %}\nID of the device used\n{% enddocs %}\n\n{% docs referrer_host %}\nURL host of the referring site (eg. google.com)\n{% enddocs %}\n\n{% docs referrer_path %}\nURL path from referring site (eg. /10-stats-on-teen-drug-and-alcohol-use/)\n{% enddocs %}\n\n{% docs referrer_source %}\nReferrer source name (eg. Google, Facebook)\n{% enddocs %}\n\n{% docs utm_source %}\nTracks where the traffic is coming from. (eg. scholarship_listing, Facebook)\n{% enddocs %}\n\n{% docs utm_medium %}\nHow the traffic got to the platform (eg. referral, CPC)\n{% enddocs %}\n\n{% docs utm_campaign %}\nTracks which campaign the traffic was generated by. Shows up in Google Analytics as Campaign Name (eg. editorial_newsletter)\n{% enddocs %}\n\n{% docs url %}\nURL of campaign (eg. https://dosome.click/nyn5m7)\n{% enddocs %}\n\n{% docs modal_type %}\nNULL or SURVEY_MODAL\n{% enddocs %}\n\n{% docs landing_datetime %}\nWhen the session started in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs ending_datetime %}\nWhen the session ended in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs session_duration_seconds %}\nSession duration in seconds\n{% enddocs %}\n\n{% docs num_pages_views %}\nNumber of pages viewed in session\n{% enddocs %}\n\n{% docs landing_page %}\nFirst page the user viewed in the session (eg. /us/facts/11-facts-about-bp-oil-spill)\n{% enddocs %}\n\n{% docs exit_page %}\n\"Which page the user ended or exited their session from (eg. /us/campaigns/green-your-getaway)\"\n{% enddocs %}\n\n{% docs days_since_last_session %}\n\"Days since their last session.\"\n{% enddocs %}\n\n{% docs post_type %}\nType of post, (e.g. photo, voter-reg)\n{% enddocs %}\n\n{% docs noun %}\nNoun that corresponds to the item in the call to action that was delivered. (e.g. drawings, tweets)\n{% enddocs %}\n\n{% docs verb %}\nVerb corresponding to the action the user took. (e.g. shared, sent, taken)\n{% enddocs %}\n\n{% docs deleted_at %}\nDate time in UTC when a user deleted their post.\n{% enddocs %}\n\n{% docs _fivetran_deleted %}\nMarks rows that were deleted in the source table\n{% enddocs %}\n\n{% docs _fivetran_synced %}\n(UTC timestamp) keeps track of when each row was last successfully synced\n{% enddocs %}\n\n{% docs reportback %}\nWhether the post is a reportback \n{% enddocs %}\n\n{% docs active %}\nWhether the user is active \n{% enddocs %}\n\n{% docs anonymous %}\nWhether the user is anonymous when making the post \n{% enddocs %}\n\n{% docs callpower_campaign_id %}\nUnique ID corresponding to the Callpower campaign. Callpower allows users to record messages for their representatives.\n{% enddocs %}\n\n{% docs quiz %}\nWhether the post is a quiz \n{% enddocs %}\n\n{% docs action_type %}\nType of action the user took. (e.g. share-something, donate-something)\n{% enddocs %}\n\n{% docs online %}\nWhether the action is a online as opposed to IRL.\n{% enddocs %}\n\n{% docs time_commitment %}\nEstimated time required to do the action (e.g. 3.0+, <0.5)\n{% enddocs %}\n\n{% docs num_signups %}\nQuantity of campaign signups\n{% enddocs %}\n\n{% docs most_recent_signup %}\nTimestamp of the most recent signup in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs num_rbs %}\nQuantity of reportbacks for the user\n{% enddocs %}\n\n{% docs total_quantity %}\nTotal quantity of items in reportbacks\n{% enddocs %}\n\n{% docs most_recent_rb %}\nWhen the most recent reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs first_rb %}\nWhen the first reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs avg_time_betw_rbs %}\nCalculated average time between reportbacks.\n{% enddocs %}\n\n{% docs avg_days_next_action_after_rb %}\nCalculated average days until next action after reportback\n{% enddocs %}\n\n{% docs days_to_next_action_after_last_rb %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs most_recent_mam_action %}\nMost recent monthly active member qualifying action in UTC (eg. 2018-01-01 12:00:00).\n{% enddocs %}\n\n{% docs most_recent_email_open %}\nMost recent email open in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs most_recent_all_actions %}\nMost recent timestamp of any action in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs last_action_is_rb %}\nWhether the last action the user took was a reportback\n{% enddocs %}\n\n{% docs days_since_last_action %}\nDays since the user's last action\n{% enddocs %}\n\n{% docs time_to_first_rb %}\nHow much time after registering until the user's first reportback\n{% enddocs %}\n\n{% docs sms_unsubscribed_at %}\nTimestamp of when user unsubscribed from SMS messaging\n{% enddocs %}\n\n{% docs user_unsubscribed_at %}\nTimestamp of when user unsubscribed from email or sms\n{% enddocs %}\n\n{% docs voter_reg_acquisition %}\nWhether the user was an acquisition through voter registration efforts. \n{% enddocs %}\n\n{% docs last_logged_in %}\nDate time in UTC when user last logged in to Northstar\n{% enddocs %}\n\n{% docs last_accessed %}\nDate time in UTC when user last access the website\n{% enddocs %}\n\n{% docs last_messaged_at %}\nDate time in UTC when user was last sent a message via SMS or email\n{% enddocs %}\n\n{% docs facebook_id %}\nUser's facebook id\n{% enddocs %}\n\n{% docs mobile %}\nUsers's mobile phone number\n{% enddocs %}\n\n{% docs birthdate %}\nUser's birthdate\n{% enddocs %}\n\n{% docs first_name %}\nUser's first name\n{% enddocs %}\n\n{% docs last_name %}\nUser's last name\n{% enddocs %}\n\n{% docs voter_registration_status %}\nUser's registration status. (e.g. registration_complete, confirmed, uncertain) \n{% enddocs %}\n\n{% docs finish_with_state %}\nIf the registrant was eligible to use and passed through to complete their registration with their state\u2019s OVR system, it will be indicated in this field (direct quote from Rock-The-Vote documentation). Yes/No value in field.\n{% enddocs %}\n\n{% docs reportback_volume %}\nThis field returns 1 if non voter-reg action, since campaigns team only counts those a 1 reportback. If voter-reg action, we want to count quantity of post as number of registered voters.\n{% enddocs %}\n\n{% docs address_street_1 %}\nFirst line of user's street address\n{% enddocs %}\n\n{% docs address_street_2 %}\nSecond line of user's street address\n{% enddocs %}\n\n{% docs city %}\nUser's city\n{% enddocs %}\n\n{% docs state %}\nUser's state\n{% enddocs %}\n\n{% docs country %}\nUser's country\n{% enddocs %}\n\n{% docs language %}\nUser's language\n{% enddocs %}\n\n{% docs cio_status %}\nStatus of user from CIO. (e.g. customer_subscribed, customer_unsubscribed)\n{% enddocs %}\n\n{% docs cio_status_timestamp %}\nTimestamp when users's status was updated.\n{% enddocs %}\n\n{% docs sms_status %}\nCurrent SMS status. (e.g. undeliverable, unknown)\n{% enddocs %}\n\n{% docs source_detail %}\nDetails of the origin of the user. (e.g. tell_a_friend, other, opt_in_path/197981)\n{% enddocs %}\n\n{% docs badges %}\nWhether the user has any badges. \n{% enddocs %}\n\n{% docs refer_friends %}\nWhether the user is a part of the refer a friend campaign. \n{% enddocs %}\n\n{% docs subscribed_member %}\nWhether the user is subscribed. \n{% enddocs %}\n\n{% docs last_updated_at %}\nTimestamp when users's was updated.\n{% enddocs %}\n\n{% docs school_id %}\nUnique identifier for the user's school. This info comes from the school finder.\n{% enddocs %}\n\n{% docs newsletter_topic %}\nNewsletter topic. (e.g. community, lifestyle)\n{% enddocs %}\n\n{% docs user_agent %}\nFull user agent string for a user's browser (e.g. \"Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:24.0) Gecko/20100101 Firefox/24.0\")\n{% enddocs %}\n\n{% docs drupal_id %}\nOld Drupal user ID\n{% enddocs %}\n\n{% docs campaigns %}\nCampaigns a user is signed up for.\n{% enddocs %}\n\n{% docs audit %}\nA very useful field with data containing information about changes to a user, e.g. timestamps when the user subscribed and unsubscribed.\n{% enddocs %}\n\n{% docs voting_plan_status %}\nThe indication of the user's plan to vote, e.g. voting, not_voting, cant_vote\n{% enddocs %}\n\n{% docs voting_plan_time_of_day %}\nThe time of day when the user plans to vote, e.g morning, afternoon, evening\n{% enddocs %}\n\n{% docs voting_plan_method_of_transport %}\nHow the user plans to get to their polling place. e.g. walk, drive\n{% enddocs %}\n\n{% docs voting_plan_attending_with %}\nWith Whom the user plans to go voting, e.g. family, friends, alone\n{% enddocs %}\n\n{% docs feature_flags %}\nJSON containing info on features like badges and refer-a-friend.\n{% enddocs %}\n\n{% docs dbt_updated_at %}\nDBT snapshot table data. The updated_at timestamp of the source record when this snapshot row was inserted.\n{% enddocs %}\n\n{% docs dbt_scd_id %}\nDBT snapshot table data. A unique key generated for each snapshotted record.\n{% enddocs %}\n\n{% docs dbt_valid_from %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this snapshot row was first inserted\n{% enddocs %}\n\n{% docs dbt_valid_to %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this row row became invalidated.\n{% enddocs %}\n\n{% docs google_id %}\nUser's Google ID obtained from login.\n{% enddocs %}\n\n{% docs causes %}\nCauses in which a user is interested. e.g. animal welfare, education, mental_health\n{% enddocs %}\n\n{% docs email_subscription_status %}\nEmail subscription status of the user\n{% enddocs %}\n\n{% docs role %}\nUser's role, e.g. user, staff\n{% enddocs %}\n\n{% docs cio_backfilled %}\nWhether this user's data was backfilled from CIO\n{% enddocs %}\n\n{% docs addr_source %}\nWhere the user submitted their address, e.g. sms, GDPR\n{% enddocs %}\n\n{% docs email_subscription_topics %}\nEmail subscription topics correspond to categories in CIO in which the user is interested. e.g. lifestyle, community, scholarship\n{% enddocs %}\n\n{% docs sms_paused %}\nWhether we've paused sending sms messages to the user.\n{% enddocs %}\n\n\n\n\n", "name": "utm_source", "unique_id": "ds_dbt.utm_source", "block_contents": "Tracks where the traffic is coming from. (eg. scholarship_listing, Facebook)"}, "ds_dbt.utm_medium": {"root_path": "/Users/mrich/projects/quasar/quasar/dbt", "resource_type": "docs", "path": "schema.md", "original_file_path": "models/schema.md", "package_name": "ds_dbt", "file_contents": "\n{% docs click_id %}\nThis is a unique identifier for each click\n{% enddocs %}\n\n{% docs click_time %}\nTimestamp when user clicked.\n{% enddocs %}\n\n{% docs shortened %}\nShortened URL\n{% enddocs %}\n\n{% docs target_url %}\nURL where the user will be directed\n{% enddocs %}\n\n{% docs broadcast_id %}\nID of the broadcast that generated the shortened URL\n{% enddocs %}\n\n{% docs source %}\nSource of the URL (e.g. SMS, web), origin of the post (e.g. phoenix-web, phoenix-ashes, sms), or source where user was acquired. (e.g. sms, phoenix-next)\n{% enddocs %}\n\n{% docs interaction_type %}\nHow the user interacted with the link (e.g. preview, click)\n{% enddocs %}\n\n{% docs id %}\nUnique identifier for the post\n{% enddocs %}\n\n{% docs type %}\nType of post (e.g. photo)\n{% enddocs %}\n\n{% docs action %}\nPost action (e.g. DefendDreamers_Nov9_CongressCalls, GunViolence2018_Feb15_ParklandResponse)\n{% enddocs %}\n\n{% docs status %}\nPost status (e.g. accepted, rejected)\n{% enddocs %}\n\n{% docs quantity %}\nNumerical quantity of items specified in the call to action (e.g. 10, 200)\n{% enddocs %}\n\n{% docs source_bucket %}\nGrouping bucket for origin of the post (e.g. web, sms) \n{% enddocs %}\n\n{% docs created_at %}\nWhen the item was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs updated_at %}\nWhen the item was updated in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs text %}\nText of the post (e.g. \"Zoo animals and a super hero trying to help too!\") \n{% enddocs %}\n\n{% docs signup_id %}\nUnique identifier for the signup \n{% enddocs %}\n\n{% docs post_class %}\nClass of the signup (e.g. \"photo - default\", \"phone-call - DefendDreamers_Jan16_BothBodies\")\n{% enddocs %}\n\n{% docs is_accepted %}\nWhether the post has been accepted to be displayed to the public on the website\n{% enddocs %}\n\n{% docs action_id %}\nInternal identifier of the action \n{% enddocs %}\n\n{% docs location %}\nLocation where the action takes place (e.g. US-NY)\n{% enddocs %}\n\n{% docs postal_code %}\nPostal code where the action takes place\n{% enddocs %}\n\n{% docs is_reportback %}\nWhether the post is a reportback. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs civic_action %}\nWhether the post is a Civic Action. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs scholarship_entry %}\nWhether the post is a Scholarship Entry. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs why_participated %}\nWhy the user participated in this action. Entered by the user.\n{% enddocs %}\n\n{% docs details %}\nDetails about the post. Contains contentfulId and other information (e.g. {\"campaignContentfulId\":\"6ATBgGEQEeJoIcxs1qbwaC\"})\n{% enddocs %}\n\n{% docs email %}\nEmail address of the user.\n{% enddocs %}\n\n{% docs source_details %}\nDetails about the source of the item. This is sometimes represented as a JSON object, and for other tables like Turbovote its represented as a string. (e.g. \"{\"contentful_id\":\"3CTLlXfbwtz1FOMpl31SKV\",\"utm_source\":\"scholarship_listing\",\"utm_medium\":\"referral\",\"utm_campaign\":\"fastweb_2019_08\"}\", newsletter_456)\n{% enddocs %}\n\n{% docs campaign_id %}\nThis is a unique identifier for the campaign\n{% enddocs %}\n\n{% docs campaign_run_id %}\nUnique identifier for the campaign run\n{% enddocs %}\n\n{% docs campaign_name %}\nName of the campaign\n{% enddocs %}\n\n{% docs campaign_cause %}\nCampaign cause (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_run_start_date %}\nStart date of the campaign run\n{% enddocs %}\n\n{% docs campaign_run_end_date %}\nEnd date of the campaign run\n{% enddocs %}\n\n{% docs campaign_created_date %}\nWhen the campaign was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs campaign_node_id %}\nInternal unique node id for the campaign\n{% enddocs %}\n\n{% docs campaign_node_id_title %}\nCampaign title\n{% enddocs %}\n\n{% docs campaign_run_id_title %}\nTitle of the campaign run\n{% enddocs %}\n\n{% docs campaign_action_type %}\nCampaign action type (eg. Make Something, Share Something)\n{% enddocs %}\n\n{% docs campaign_cause_type %}\nCampaign cause type (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_noun %}\nNoun applicable to the user's action\n{% enddocs %}\n\n{% docs campaign_verb %}\nVerb describing the action the user should take\n{% enddocs %}\n\n{% docs campaign_cta %}\nCampaign's call to action\n{% enddocs %}\n\n{% docs campaign_language %}\n\"Language in which the campaign is available\"\n{% enddocs %}\n\n{% docs agent_id %}\nIf set, the content type of the picture the member is sending us. Exp. image/png.\n{% enddocs %}\n\n{% docs attachment_content_type %}\nIf set, the handle of the Front agent this outbound support message is from.\n{% enddocs %}\n\n{% docs topic %}\nHolds a reference to the **last** campaign topic the member's conversation was in. This is useful to allow members to talk to Gambit and get quick responses (through Rivescript), without Gambit completely forgetting what state the member's interaction with a campaign topic was in.\n{% enddocs %}\n\n{% docs action_serial_id %}\nSerial id for the user's action. Depends on the source of the action. May be the bertly click id, sms message id, etc.\n{% enddocs %}\n\n{% docs channel %}\nChannel for the user's action. Depends on the source of the action. (e.g. web, sms)\n{% enddocs %}\n\n{% docs first_action_month %}\nMonth during which the user took their first action. \n{% enddocs %}\n\n{% docs event_id %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs event_source %}\nApplication source for event (eg. Phoenix, Northstar)\n{% enddocs %}\n\n{% docs event_datetime %}\nWhen the event occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs event_name %}\nName of the event (eg. northstar_submitted_register, https://docs.google.com/spreadsheets/d/1lm-fGrIm85nUTxSojqyCt_Ehmm1zEbViFhKpxcJiz1A/edit#gid=406441516)\n{% enddocs %}\n\n{% docs event_type %}\nType of event (pv = 'Page View', se = 'Structured Event')\n{% enddocs %}\n\n{% docs host %}\nURL host where event occurred (eg. www.dosomething.org or identity.dosomething.org)\n{% enddocs %}\n\n{% docs path %}\nURL path event occurred at (eg. /login or /us/campaigns/huddle-for-heroes)\n{% enddocs %}\n\n{% docs query_parameters %}\nOptional query parameters for the request (eg. query=huddle)\n{% enddocs %}\n\n{% docs se_category %}\nCategory of event (eg. focused_field, authentication) - Custom structured event\n{% enddocs %}\n\n{% docs se_action %}\nAction performed / event name (eg. form_submitted, action_failed) - Custom structured event\n{% enddocs %}\n\n{% docs se_label %}\nThe object of the action (eg. first_name, register, voter_reg_status) - Custom structured event\n{% enddocs %}\n\n{% docs session_id %}\nUnique identifier of the user's session\n{% enddocs %}\n\n{% docs session_counter %}\nHow many sessions a user has started\n{% enddocs %}\n\n{% docs browser_size %}\nWhich type of browser a user is using (eg. Mobile, Desktop)\n{% enddocs %}\n\n{% docs northstar_id %}\nThe Northstar ID of the user who generated the event\n{% enddocs %}\n\n{% docs device_id %}\nID of the device used\n{% enddocs %}\n\n{% docs referrer_host %}\nURL host of the referring site (eg. google.com)\n{% enddocs %}\n\n{% docs referrer_path %}\nURL path from referring site (eg. /10-stats-on-teen-drug-and-alcohol-use/)\n{% enddocs %}\n\n{% docs referrer_source %}\nReferrer source name (eg. Google, Facebook)\n{% enddocs %}\n\n{% docs utm_source %}\nTracks where the traffic is coming from. (eg. scholarship_listing, Facebook)\n{% enddocs %}\n\n{% docs utm_medium %}\nHow the traffic got to the platform (eg. referral, CPC)\n{% enddocs %}\n\n{% docs utm_campaign %}\nTracks which campaign the traffic was generated by. Shows up in Google Analytics as Campaign Name (eg. editorial_newsletter)\n{% enddocs %}\n\n{% docs url %}\nURL of campaign (eg. https://dosome.click/nyn5m7)\n{% enddocs %}\n\n{% docs modal_type %}\nNULL or SURVEY_MODAL\n{% enddocs %}\n\n{% docs landing_datetime %}\nWhen the session started in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs ending_datetime %}\nWhen the session ended in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs session_duration_seconds %}\nSession duration in seconds\n{% enddocs %}\n\n{% docs num_pages_views %}\nNumber of pages viewed in session\n{% enddocs %}\n\n{% docs landing_page %}\nFirst page the user viewed in the session (eg. /us/facts/11-facts-about-bp-oil-spill)\n{% enddocs %}\n\n{% docs exit_page %}\n\"Which page the user ended or exited their session from (eg. /us/campaigns/green-your-getaway)\"\n{% enddocs %}\n\n{% docs days_since_last_session %}\n\"Days since their last session.\"\n{% enddocs %}\n\n{% docs post_type %}\nType of post, (e.g. photo, voter-reg)\n{% enddocs %}\n\n{% docs noun %}\nNoun that corresponds to the item in the call to action that was delivered. (e.g. drawings, tweets)\n{% enddocs %}\n\n{% docs verb %}\nVerb corresponding to the action the user took. (e.g. shared, sent, taken)\n{% enddocs %}\n\n{% docs deleted_at %}\nDate time in UTC when a user deleted their post.\n{% enddocs %}\n\n{% docs _fivetran_deleted %}\nMarks rows that were deleted in the source table\n{% enddocs %}\n\n{% docs _fivetran_synced %}\n(UTC timestamp) keeps track of when each row was last successfully synced\n{% enddocs %}\n\n{% docs reportback %}\nWhether the post is a reportback \n{% enddocs %}\n\n{% docs active %}\nWhether the user is active \n{% enddocs %}\n\n{% docs anonymous %}\nWhether the user is anonymous when making the post \n{% enddocs %}\n\n{% docs callpower_campaign_id %}\nUnique ID corresponding to the Callpower campaign. Callpower allows users to record messages for their representatives.\n{% enddocs %}\n\n{% docs quiz %}\nWhether the post is a quiz \n{% enddocs %}\n\n{% docs action_type %}\nType of action the user took. (e.g. share-something, donate-something)\n{% enddocs %}\n\n{% docs online %}\nWhether the action is a online as opposed to IRL.\n{% enddocs %}\n\n{% docs time_commitment %}\nEstimated time required to do the action (e.g. 3.0+, <0.5)\n{% enddocs %}\n\n{% docs num_signups %}\nQuantity of campaign signups\n{% enddocs %}\n\n{% docs most_recent_signup %}\nTimestamp of the most recent signup in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs num_rbs %}\nQuantity of reportbacks for the user\n{% enddocs %}\n\n{% docs total_quantity %}\nTotal quantity of items in reportbacks\n{% enddocs %}\n\n{% docs most_recent_rb %}\nWhen the most recent reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs first_rb %}\nWhen the first reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs avg_time_betw_rbs %}\nCalculated average time between reportbacks.\n{% enddocs %}\n\n{% docs avg_days_next_action_after_rb %}\nCalculated average days until next action after reportback\n{% enddocs %}\n\n{% docs days_to_next_action_after_last_rb %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs most_recent_mam_action %}\nMost recent monthly active member qualifying action in UTC (eg. 2018-01-01 12:00:00).\n{% enddocs %}\n\n{% docs most_recent_email_open %}\nMost recent email open in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs most_recent_all_actions %}\nMost recent timestamp of any action in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs last_action_is_rb %}\nWhether the last action the user took was a reportback\n{% enddocs %}\n\n{% docs days_since_last_action %}\nDays since the user's last action\n{% enddocs %}\n\n{% docs time_to_first_rb %}\nHow much time after registering until the user's first reportback\n{% enddocs %}\n\n{% docs sms_unsubscribed_at %}\nTimestamp of when user unsubscribed from SMS messaging\n{% enddocs %}\n\n{% docs user_unsubscribed_at %}\nTimestamp of when user unsubscribed from email or sms\n{% enddocs %}\n\n{% docs voter_reg_acquisition %}\nWhether the user was an acquisition through voter registration efforts. \n{% enddocs %}\n\n{% docs last_logged_in %}\nDate time in UTC when user last logged in to Northstar\n{% enddocs %}\n\n{% docs last_accessed %}\nDate time in UTC when user last access the website\n{% enddocs %}\n\n{% docs last_messaged_at %}\nDate time in UTC when user was last sent a message via SMS or email\n{% enddocs %}\n\n{% docs facebook_id %}\nUser's facebook id\n{% enddocs %}\n\n{% docs mobile %}\nUsers's mobile phone number\n{% enddocs %}\n\n{% docs birthdate %}\nUser's birthdate\n{% enddocs %}\n\n{% docs first_name %}\nUser's first name\n{% enddocs %}\n\n{% docs last_name %}\nUser's last name\n{% enddocs %}\n\n{% docs voter_registration_status %}\nUser's registration status. (e.g. registration_complete, confirmed, uncertain) \n{% enddocs %}\n\n{% docs finish_with_state %}\nIf the registrant was eligible to use and passed through to complete their registration with their state\u2019s OVR system, it will be indicated in this field (direct quote from Rock-The-Vote documentation). Yes/No value in field.\n{% enddocs %}\n\n{% docs reportback_volume %}\nThis field returns 1 if non voter-reg action, since campaigns team only counts those a 1 reportback. If voter-reg action, we want to count quantity of post as number of registered voters.\n{% enddocs %}\n\n{% docs address_street_1 %}\nFirst line of user's street address\n{% enddocs %}\n\n{% docs address_street_2 %}\nSecond line of user's street address\n{% enddocs %}\n\n{% docs city %}\nUser's city\n{% enddocs %}\n\n{% docs state %}\nUser's state\n{% enddocs %}\n\n{% docs country %}\nUser's country\n{% enddocs %}\n\n{% docs language %}\nUser's language\n{% enddocs %}\n\n{% docs cio_status %}\nStatus of user from CIO. (e.g. customer_subscribed, customer_unsubscribed)\n{% enddocs %}\n\n{% docs cio_status_timestamp %}\nTimestamp when users's status was updated.\n{% enddocs %}\n\n{% docs sms_status %}\nCurrent SMS status. (e.g. undeliverable, unknown)\n{% enddocs %}\n\n{% docs source_detail %}\nDetails of the origin of the user. (e.g. tell_a_friend, other, opt_in_path/197981)\n{% enddocs %}\n\n{% docs badges %}\nWhether the user has any badges. \n{% enddocs %}\n\n{% docs refer_friends %}\nWhether the user is a part of the refer a friend campaign. \n{% enddocs %}\n\n{% docs subscribed_member %}\nWhether the user is subscribed. \n{% enddocs %}\n\n{% docs last_updated_at %}\nTimestamp when users's was updated.\n{% enddocs %}\n\n{% docs school_id %}\nUnique identifier for the user's school. This info comes from the school finder.\n{% enddocs %}\n\n{% docs newsletter_topic %}\nNewsletter topic. (e.g. community, lifestyle)\n{% enddocs %}\n\n{% docs user_agent %}\nFull user agent string for a user's browser (e.g. \"Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:24.0) Gecko/20100101 Firefox/24.0\")\n{% enddocs %}\n\n{% docs drupal_id %}\nOld Drupal user ID\n{% enddocs %}\n\n{% docs campaigns %}\nCampaigns a user is signed up for.\n{% enddocs %}\n\n{% docs audit %}\nA very useful field with data containing information about changes to a user, e.g. timestamps when the user subscribed and unsubscribed.\n{% enddocs %}\n\n{% docs voting_plan_status %}\nThe indication of the user's plan to vote, e.g. voting, not_voting, cant_vote\n{% enddocs %}\n\n{% docs voting_plan_time_of_day %}\nThe time of day when the user plans to vote, e.g morning, afternoon, evening\n{% enddocs %}\n\n{% docs voting_plan_method_of_transport %}\nHow the user plans to get to their polling place. e.g. walk, drive\n{% enddocs %}\n\n{% docs voting_plan_attending_with %}\nWith Whom the user plans to go voting, e.g. family, friends, alone\n{% enddocs %}\n\n{% docs feature_flags %}\nJSON containing info on features like badges and refer-a-friend.\n{% enddocs %}\n\n{% docs dbt_updated_at %}\nDBT snapshot table data. The updated_at timestamp of the source record when this snapshot row was inserted.\n{% enddocs %}\n\n{% docs dbt_scd_id %}\nDBT snapshot table data. A unique key generated for each snapshotted record.\n{% enddocs %}\n\n{% docs dbt_valid_from %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this snapshot row was first inserted\n{% enddocs %}\n\n{% docs dbt_valid_to %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this row row became invalidated.\n{% enddocs %}\n\n{% docs google_id %}\nUser's Google ID obtained from login.\n{% enddocs %}\n\n{% docs causes %}\nCauses in which a user is interested. e.g. animal welfare, education, mental_health\n{% enddocs %}\n\n{% docs email_subscription_status %}\nEmail subscription status of the user\n{% enddocs %}\n\n{% docs role %}\nUser's role, e.g. user, staff\n{% enddocs %}\n\n{% docs cio_backfilled %}\nWhether this user's data was backfilled from CIO\n{% enddocs %}\n\n{% docs addr_source %}\nWhere the user submitted their address, e.g. sms, GDPR\n{% enddocs %}\n\n{% docs email_subscription_topics %}\nEmail subscription topics correspond to categories in CIO in which the user is interested. e.g. lifestyle, community, scholarship\n{% enddocs %}\n\n{% docs sms_paused %}\nWhether we've paused sending sms messages to the user.\n{% enddocs %}\n\n\n\n\n", "name": "utm_medium", "unique_id": "ds_dbt.utm_medium", "block_contents": "How the traffic got to the platform (eg. referral, CPC)"}, "ds_dbt.utm_campaign": {"root_path": "/Users/mrich/projects/quasar/quasar/dbt", "resource_type": "docs", "path": "schema.md", "original_file_path": "models/schema.md", "package_name": "ds_dbt", "file_contents": "\n{% docs click_id %}\nThis is a unique identifier for each click\n{% enddocs %}\n\n{% docs click_time %}\nTimestamp when user clicked.\n{% enddocs %}\n\n{% docs shortened %}\nShortened URL\n{% enddocs %}\n\n{% docs target_url %}\nURL where the user will be directed\n{% enddocs %}\n\n{% docs broadcast_id %}\nID of the broadcast that generated the shortened URL\n{% enddocs %}\n\n{% docs source %}\nSource of the URL (e.g. SMS, web), origin of the post (e.g. phoenix-web, phoenix-ashes, sms), or source where user was acquired. (e.g. sms, phoenix-next)\n{% enddocs %}\n\n{% docs interaction_type %}\nHow the user interacted with the link (e.g. preview, click)\n{% enddocs %}\n\n{% docs id %}\nUnique identifier for the post\n{% enddocs %}\n\n{% docs type %}\nType of post (e.g. photo)\n{% enddocs %}\n\n{% docs action %}\nPost action (e.g. DefendDreamers_Nov9_CongressCalls, GunViolence2018_Feb15_ParklandResponse)\n{% enddocs %}\n\n{% docs status %}\nPost status (e.g. accepted, rejected)\n{% enddocs %}\n\n{% docs quantity %}\nNumerical quantity of items specified in the call to action (e.g. 10, 200)\n{% enddocs %}\n\n{% docs source_bucket %}\nGrouping bucket for origin of the post (e.g. web, sms) \n{% enddocs %}\n\n{% docs created_at %}\nWhen the item was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs updated_at %}\nWhen the item was updated in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs text %}\nText of the post (e.g. \"Zoo animals and a super hero trying to help too!\") \n{% enddocs %}\n\n{% docs signup_id %}\nUnique identifier for the signup \n{% enddocs %}\n\n{% docs post_class %}\nClass of the signup (e.g. \"photo - default\", \"phone-call - DefendDreamers_Jan16_BothBodies\")\n{% enddocs %}\n\n{% docs is_accepted %}\nWhether the post has been accepted to be displayed to the public on the website\n{% enddocs %}\n\n{% docs action_id %}\nInternal identifier of the action \n{% enddocs %}\n\n{% docs location %}\nLocation where the action takes place (e.g. US-NY)\n{% enddocs %}\n\n{% docs postal_code %}\nPostal code where the action takes place\n{% enddocs %}\n\n{% docs is_reportback %}\nWhether the post is a reportback. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs civic_action %}\nWhether the post is a Civic Action. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs scholarship_entry %}\nWhether the post is a Scholarship Entry. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs why_participated %}\nWhy the user participated in this action. Entered by the user.\n{% enddocs %}\n\n{% docs details %}\nDetails about the post. Contains contentfulId and other information (e.g. {\"campaignContentfulId\":\"6ATBgGEQEeJoIcxs1qbwaC\"})\n{% enddocs %}\n\n{% docs email %}\nEmail address of the user.\n{% enddocs %}\n\n{% docs source_details %}\nDetails about the source of the item. This is sometimes represented as a JSON object, and for other tables like Turbovote its represented as a string. (e.g. \"{\"contentful_id\":\"3CTLlXfbwtz1FOMpl31SKV\",\"utm_source\":\"scholarship_listing\",\"utm_medium\":\"referral\",\"utm_campaign\":\"fastweb_2019_08\"}\", newsletter_456)\n{% enddocs %}\n\n{% docs campaign_id %}\nThis is a unique identifier for the campaign\n{% enddocs %}\n\n{% docs campaign_run_id %}\nUnique identifier for the campaign run\n{% enddocs %}\n\n{% docs campaign_name %}\nName of the campaign\n{% enddocs %}\n\n{% docs campaign_cause %}\nCampaign cause (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_run_start_date %}\nStart date of the campaign run\n{% enddocs %}\n\n{% docs campaign_run_end_date %}\nEnd date of the campaign run\n{% enddocs %}\n\n{% docs campaign_created_date %}\nWhen the campaign was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs campaign_node_id %}\nInternal unique node id for the campaign\n{% enddocs %}\n\n{% docs campaign_node_id_title %}\nCampaign title\n{% enddocs %}\n\n{% docs campaign_run_id_title %}\nTitle of the campaign run\n{% enddocs %}\n\n{% docs campaign_action_type %}\nCampaign action type (eg. Make Something, Share Something)\n{% enddocs %}\n\n{% docs campaign_cause_type %}\nCampaign cause type (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_noun %}\nNoun applicable to the user's action\n{% enddocs %}\n\n{% docs campaign_verb %}\nVerb describing the action the user should take\n{% enddocs %}\n\n{% docs campaign_cta %}\nCampaign's call to action\n{% enddocs %}\n\n{% docs campaign_language %}\n\"Language in which the campaign is available\"\n{% enddocs %}\n\n{% docs agent_id %}\nIf set, the content type of the picture the member is sending us. Exp. image/png.\n{% enddocs %}\n\n{% docs attachment_content_type %}\nIf set, the handle of the Front agent this outbound support message is from.\n{% enddocs %}\n\n{% docs topic %}\nHolds a reference to the **last** campaign topic the member's conversation was in. This is useful to allow members to talk to Gambit and get quick responses (through Rivescript), without Gambit completely forgetting what state the member's interaction with a campaign topic was in.\n{% enddocs %}\n\n{% docs action_serial_id %}\nSerial id for the user's action. Depends on the source of the action. May be the bertly click id, sms message id, etc.\n{% enddocs %}\n\n{% docs channel %}\nChannel for the user's action. Depends on the source of the action. (e.g. web, sms)\n{% enddocs %}\n\n{% docs first_action_month %}\nMonth during which the user took their first action. \n{% enddocs %}\n\n{% docs event_id %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs event_source %}\nApplication source for event (eg. Phoenix, Northstar)\n{% enddocs %}\n\n{% docs event_datetime %}\nWhen the event occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs event_name %}\nName of the event (eg. northstar_submitted_register, https://docs.google.com/spreadsheets/d/1lm-fGrIm85nUTxSojqyCt_Ehmm1zEbViFhKpxcJiz1A/edit#gid=406441516)\n{% enddocs %}\n\n{% docs event_type %}\nType of event (pv = 'Page View', se = 'Structured Event')\n{% enddocs %}\n\n{% docs host %}\nURL host where event occurred (eg. www.dosomething.org or identity.dosomething.org)\n{% enddocs %}\n\n{% docs path %}\nURL path event occurred at (eg. /login or /us/campaigns/huddle-for-heroes)\n{% enddocs %}\n\n{% docs query_parameters %}\nOptional query parameters for the request (eg. query=huddle)\n{% enddocs %}\n\n{% docs se_category %}\nCategory of event (eg. focused_field, authentication) - Custom structured event\n{% enddocs %}\n\n{% docs se_action %}\nAction performed / event name (eg. form_submitted, action_failed) - Custom structured event\n{% enddocs %}\n\n{% docs se_label %}\nThe object of the action (eg. first_name, register, voter_reg_status) - Custom structured event\n{% enddocs %}\n\n{% docs session_id %}\nUnique identifier of the user's session\n{% enddocs %}\n\n{% docs session_counter %}\nHow many sessions a user has started\n{% enddocs %}\n\n{% docs browser_size %}\nWhich type of browser a user is using (eg. Mobile, Desktop)\n{% enddocs %}\n\n{% docs northstar_id %}\nThe Northstar ID of the user who generated the event\n{% enddocs %}\n\n{% docs device_id %}\nID of the device used\n{% enddocs %}\n\n{% docs referrer_host %}\nURL host of the referring site (eg. google.com)\n{% enddocs %}\n\n{% docs referrer_path %}\nURL path from referring site (eg. /10-stats-on-teen-drug-and-alcohol-use/)\n{% enddocs %}\n\n{% docs referrer_source %}\nReferrer source name (eg. Google, Facebook)\n{% enddocs %}\n\n{% docs utm_source %}\nTracks where the traffic is coming from. (eg. scholarship_listing, Facebook)\n{% enddocs %}\n\n{% docs utm_medium %}\nHow the traffic got to the platform (eg. referral, CPC)\n{% enddocs %}\n\n{% docs utm_campaign %}\nTracks which campaign the traffic was generated by. Shows up in Google Analytics as Campaign Name (eg. editorial_newsletter)\n{% enddocs %}\n\n{% docs url %}\nURL of campaign (eg. https://dosome.click/nyn5m7)\n{% enddocs %}\n\n{% docs modal_type %}\nNULL or SURVEY_MODAL\n{% enddocs %}\n\n{% docs landing_datetime %}\nWhen the session started in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs ending_datetime %}\nWhen the session ended in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs session_duration_seconds %}\nSession duration in seconds\n{% enddocs %}\n\n{% docs num_pages_views %}\nNumber of pages viewed in session\n{% enddocs %}\n\n{% docs landing_page %}\nFirst page the user viewed in the session (eg. /us/facts/11-facts-about-bp-oil-spill)\n{% enddocs %}\n\n{% docs exit_page %}\n\"Which page the user ended or exited their session from (eg. /us/campaigns/green-your-getaway)\"\n{% enddocs %}\n\n{% docs days_since_last_session %}\n\"Days since their last session.\"\n{% enddocs %}\n\n{% docs post_type %}\nType of post, (e.g. photo, voter-reg)\n{% enddocs %}\n\n{% docs noun %}\nNoun that corresponds to the item in the call to action that was delivered. (e.g. drawings, tweets)\n{% enddocs %}\n\n{% docs verb %}\nVerb corresponding to the action the user took. (e.g. shared, sent, taken)\n{% enddocs %}\n\n{% docs deleted_at %}\nDate time in UTC when a user deleted their post.\n{% enddocs %}\n\n{% docs _fivetran_deleted %}\nMarks rows that were deleted in the source table\n{% enddocs %}\n\n{% docs _fivetran_synced %}\n(UTC timestamp) keeps track of when each row was last successfully synced\n{% enddocs %}\n\n{% docs reportback %}\nWhether the post is a reportback \n{% enddocs %}\n\n{% docs active %}\nWhether the user is active \n{% enddocs %}\n\n{% docs anonymous %}\nWhether the user is anonymous when making the post \n{% enddocs %}\n\n{% docs callpower_campaign_id %}\nUnique ID corresponding to the Callpower campaign. Callpower allows users to record messages for their representatives.\n{% enddocs %}\n\n{% docs quiz %}\nWhether the post is a quiz \n{% enddocs %}\n\n{% docs action_type %}\nType of action the user took. (e.g. share-something, donate-something)\n{% enddocs %}\n\n{% docs online %}\nWhether the action is a online as opposed to IRL.\n{% enddocs %}\n\n{% docs time_commitment %}\nEstimated time required to do the action (e.g. 3.0+, <0.5)\n{% enddocs %}\n\n{% docs num_signups %}\nQuantity of campaign signups\n{% enddocs %}\n\n{% docs most_recent_signup %}\nTimestamp of the most recent signup in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs num_rbs %}\nQuantity of reportbacks for the user\n{% enddocs %}\n\n{% docs total_quantity %}\nTotal quantity of items in reportbacks\n{% enddocs %}\n\n{% docs most_recent_rb %}\nWhen the most recent reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs first_rb %}\nWhen the first reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs avg_time_betw_rbs %}\nCalculated average time between reportbacks.\n{% enddocs %}\n\n{% docs avg_days_next_action_after_rb %}\nCalculated average days until next action after reportback\n{% enddocs %}\n\n{% docs days_to_next_action_after_last_rb %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs most_recent_mam_action %}\nMost recent monthly active member qualifying action in UTC (eg. 2018-01-01 12:00:00).\n{% enddocs %}\n\n{% docs most_recent_email_open %}\nMost recent email open in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs most_recent_all_actions %}\nMost recent timestamp of any action in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs last_action_is_rb %}\nWhether the last action the user took was a reportback\n{% enddocs %}\n\n{% docs days_since_last_action %}\nDays since the user's last action\n{% enddocs %}\n\n{% docs time_to_first_rb %}\nHow much time after registering until the user's first reportback\n{% enddocs %}\n\n{% docs sms_unsubscribed_at %}\nTimestamp of when user unsubscribed from SMS messaging\n{% enddocs %}\n\n{% docs user_unsubscribed_at %}\nTimestamp of when user unsubscribed from email or sms\n{% enddocs %}\n\n{% docs voter_reg_acquisition %}\nWhether the user was an acquisition through voter registration efforts. \n{% enddocs %}\n\n{% docs last_logged_in %}\nDate time in UTC when user last logged in to Northstar\n{% enddocs %}\n\n{% docs last_accessed %}\nDate time in UTC when user last access the website\n{% enddocs %}\n\n{% docs last_messaged_at %}\nDate time in UTC when user was last sent a message via SMS or email\n{% enddocs %}\n\n{% docs facebook_id %}\nUser's facebook id\n{% enddocs %}\n\n{% docs mobile %}\nUsers's mobile phone number\n{% enddocs %}\n\n{% docs birthdate %}\nUser's birthdate\n{% enddocs %}\n\n{% docs first_name %}\nUser's first name\n{% enddocs %}\n\n{% docs last_name %}\nUser's last name\n{% enddocs %}\n\n{% docs voter_registration_status %}\nUser's registration status. (e.g. registration_complete, confirmed, uncertain) \n{% enddocs %}\n\n{% docs finish_with_state %}\nIf the registrant was eligible to use and passed through to complete their registration with their state\u2019s OVR system, it will be indicated in this field (direct quote from Rock-The-Vote documentation). Yes/No value in field.\n{% enddocs %}\n\n{% docs reportback_volume %}\nThis field returns 1 if non voter-reg action, since campaigns team only counts those a 1 reportback. If voter-reg action, we want to count quantity of post as number of registered voters.\n{% enddocs %}\n\n{% docs address_street_1 %}\nFirst line of user's street address\n{% enddocs %}\n\n{% docs address_street_2 %}\nSecond line of user's street address\n{% enddocs %}\n\n{% docs city %}\nUser's city\n{% enddocs %}\n\n{% docs state %}\nUser's state\n{% enddocs %}\n\n{% docs country %}\nUser's country\n{% enddocs %}\n\n{% docs language %}\nUser's language\n{% enddocs %}\n\n{% docs cio_status %}\nStatus of user from CIO. (e.g. customer_subscribed, customer_unsubscribed)\n{% enddocs %}\n\n{% docs cio_status_timestamp %}\nTimestamp when users's status was updated.\n{% enddocs %}\n\n{% docs sms_status %}\nCurrent SMS status. (e.g. undeliverable, unknown)\n{% enddocs %}\n\n{% docs source_detail %}\nDetails of the origin of the user. (e.g. tell_a_friend, other, opt_in_path/197981)\n{% enddocs %}\n\n{% docs badges %}\nWhether the user has any badges. \n{% enddocs %}\n\n{% docs refer_friends %}\nWhether the user is a part of the refer a friend campaign. \n{% enddocs %}\n\n{% docs subscribed_member %}\nWhether the user is subscribed. \n{% enddocs %}\n\n{% docs last_updated_at %}\nTimestamp when users's was updated.\n{% enddocs %}\n\n{% docs school_id %}\nUnique identifier for the user's school. This info comes from the school finder.\n{% enddocs %}\n\n{% docs newsletter_topic %}\nNewsletter topic. (e.g. community, lifestyle)\n{% enddocs %}\n\n{% docs user_agent %}\nFull user agent string for a user's browser (e.g. \"Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:24.0) Gecko/20100101 Firefox/24.0\")\n{% enddocs %}\n\n{% docs drupal_id %}\nOld Drupal user ID\n{% enddocs %}\n\n{% docs campaigns %}\nCampaigns a user is signed up for.\n{% enddocs %}\n\n{% docs audit %}\nA very useful field with data containing information about changes to a user, e.g. timestamps when the user subscribed and unsubscribed.\n{% enddocs %}\n\n{% docs voting_plan_status %}\nThe indication of the user's plan to vote, e.g. voting, not_voting, cant_vote\n{% enddocs %}\n\n{% docs voting_plan_time_of_day %}\nThe time of day when the user plans to vote, e.g morning, afternoon, evening\n{% enddocs %}\n\n{% docs voting_plan_method_of_transport %}\nHow the user plans to get to their polling place. e.g. walk, drive\n{% enddocs %}\n\n{% docs voting_plan_attending_with %}\nWith Whom the user plans to go voting, e.g. family, friends, alone\n{% enddocs %}\n\n{% docs feature_flags %}\nJSON containing info on features like badges and refer-a-friend.\n{% enddocs %}\n\n{% docs dbt_updated_at %}\nDBT snapshot table data. The updated_at timestamp of the source record when this snapshot row was inserted.\n{% enddocs %}\n\n{% docs dbt_scd_id %}\nDBT snapshot table data. A unique key generated for each snapshotted record.\n{% enddocs %}\n\n{% docs dbt_valid_from %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this snapshot row was first inserted\n{% enddocs %}\n\n{% docs dbt_valid_to %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this row row became invalidated.\n{% enddocs %}\n\n{% docs google_id %}\nUser's Google ID obtained from login.\n{% enddocs %}\n\n{% docs causes %}\nCauses in which a user is interested. e.g. animal welfare, education, mental_health\n{% enddocs %}\n\n{% docs email_subscription_status %}\nEmail subscription status of the user\n{% enddocs %}\n\n{% docs role %}\nUser's role, e.g. user, staff\n{% enddocs %}\n\n{% docs cio_backfilled %}\nWhether this user's data was backfilled from CIO\n{% enddocs %}\n\n{% docs addr_source %}\nWhere the user submitted their address, e.g. sms, GDPR\n{% enddocs %}\n\n{% docs email_subscription_topics %}\nEmail subscription topics correspond to categories in CIO in which the user is interested. e.g. lifestyle, community, scholarship\n{% enddocs %}\n\n{% docs sms_paused %}\nWhether we've paused sending sms messages to the user.\n{% enddocs %}\n\n\n\n\n", "name": "utm_campaign", "unique_id": "ds_dbt.utm_campaign", "block_contents": "Tracks which campaign the traffic was generated by. Shows up in Google Analytics as Campaign Name (eg. editorial_newsletter)"}, "ds_dbt.url": {"root_path": "/Users/mrich/projects/quasar/quasar/dbt", "resource_type": "docs", "path": "schema.md", "original_file_path": "models/schema.md", "package_name": "ds_dbt", "file_contents": "\n{% docs click_id %}\nThis is a unique identifier for each click\n{% enddocs %}\n\n{% docs click_time %}\nTimestamp when user clicked.\n{% enddocs %}\n\n{% docs shortened %}\nShortened URL\n{% enddocs %}\n\n{% docs target_url %}\nURL where the user will be directed\n{% enddocs %}\n\n{% docs broadcast_id %}\nID of the broadcast that generated the shortened URL\n{% enddocs %}\n\n{% docs source %}\nSource of the URL (e.g. SMS, web), origin of the post (e.g. phoenix-web, phoenix-ashes, sms), or source where user was acquired. (e.g. sms, phoenix-next)\n{% enddocs %}\n\n{% docs interaction_type %}\nHow the user interacted with the link (e.g. preview, click)\n{% enddocs %}\n\n{% docs id %}\nUnique identifier for the post\n{% enddocs %}\n\n{% docs type %}\nType of post (e.g. photo)\n{% enddocs %}\n\n{% docs action %}\nPost action (e.g. DefendDreamers_Nov9_CongressCalls, GunViolence2018_Feb15_ParklandResponse)\n{% enddocs %}\n\n{% docs status %}\nPost status (e.g. accepted, rejected)\n{% enddocs %}\n\n{% docs quantity %}\nNumerical quantity of items specified in the call to action (e.g. 10, 200)\n{% enddocs %}\n\n{% docs source_bucket %}\nGrouping bucket for origin of the post (e.g. web, sms) \n{% enddocs %}\n\n{% docs created_at %}\nWhen the item was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs updated_at %}\nWhen the item was updated in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs text %}\nText of the post (e.g. \"Zoo animals and a super hero trying to help too!\") \n{% enddocs %}\n\n{% docs signup_id %}\nUnique identifier for the signup \n{% enddocs %}\n\n{% docs post_class %}\nClass of the signup (e.g. \"photo - default\", \"phone-call - DefendDreamers_Jan16_BothBodies\")\n{% enddocs %}\n\n{% docs is_accepted %}\nWhether the post has been accepted to be displayed to the public on the website\n{% enddocs %}\n\n{% docs action_id %}\nInternal identifier of the action \n{% enddocs %}\n\n{% docs location %}\nLocation where the action takes place (e.g. US-NY)\n{% enddocs %}\n\n{% docs postal_code %}\nPostal code where the action takes place\n{% enddocs %}\n\n{% docs is_reportback %}\nWhether the post is a reportback. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs civic_action %}\nWhether the post is a Civic Action. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs scholarship_entry %}\nWhether the post is a Scholarship Entry. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs why_participated %}\nWhy the user participated in this action. Entered by the user.\n{% enddocs %}\n\n{% docs details %}\nDetails about the post. Contains contentfulId and other information (e.g. {\"campaignContentfulId\":\"6ATBgGEQEeJoIcxs1qbwaC\"})\n{% enddocs %}\n\n{% docs email %}\nEmail address of the user.\n{% enddocs %}\n\n{% docs source_details %}\nDetails about the source of the item. This is sometimes represented as a JSON object, and for other tables like Turbovote its represented as a string. (e.g. \"{\"contentful_id\":\"3CTLlXfbwtz1FOMpl31SKV\",\"utm_source\":\"scholarship_listing\",\"utm_medium\":\"referral\",\"utm_campaign\":\"fastweb_2019_08\"}\", newsletter_456)\n{% enddocs %}\n\n{% docs campaign_id %}\nThis is a unique identifier for the campaign\n{% enddocs %}\n\n{% docs campaign_run_id %}\nUnique identifier for the campaign run\n{% enddocs %}\n\n{% docs campaign_name %}\nName of the campaign\n{% enddocs %}\n\n{% docs campaign_cause %}\nCampaign cause (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_run_start_date %}\nStart date of the campaign run\n{% enddocs %}\n\n{% docs campaign_run_end_date %}\nEnd date of the campaign run\n{% enddocs %}\n\n{% docs campaign_created_date %}\nWhen the campaign was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs campaign_node_id %}\nInternal unique node id for the campaign\n{% enddocs %}\n\n{% docs campaign_node_id_title %}\nCampaign title\n{% enddocs %}\n\n{% docs campaign_run_id_title %}\nTitle of the campaign run\n{% enddocs %}\n\n{% docs campaign_action_type %}\nCampaign action type (eg. Make Something, Share Something)\n{% enddocs %}\n\n{% docs campaign_cause_type %}\nCampaign cause type (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_noun %}\nNoun applicable to the user's action\n{% enddocs %}\n\n{% docs campaign_verb %}\nVerb describing the action the user should take\n{% enddocs %}\n\n{% docs campaign_cta %}\nCampaign's call to action\n{% enddocs %}\n\n{% docs campaign_language %}\n\"Language in which the campaign is available\"\n{% enddocs %}\n\n{% docs agent_id %}\nIf set, the content type of the picture the member is sending us. Exp. image/png.\n{% enddocs %}\n\n{% docs attachment_content_type %}\nIf set, the handle of the Front agent this outbound support message is from.\n{% enddocs %}\n\n{% docs topic %}\nHolds a reference to the **last** campaign topic the member's conversation was in. This is useful to allow members to talk to Gambit and get quick responses (through Rivescript), without Gambit completely forgetting what state the member's interaction with a campaign topic was in.\n{% enddocs %}\n\n{% docs action_serial_id %}\nSerial id for the user's action. Depends on the source of the action. May be the bertly click id, sms message id, etc.\n{% enddocs %}\n\n{% docs channel %}\nChannel for the user's action. Depends on the source of the action. (e.g. web, sms)\n{% enddocs %}\n\n{% docs first_action_month %}\nMonth during which the user took their first action. \n{% enddocs %}\n\n{% docs event_id %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs event_source %}\nApplication source for event (eg. Phoenix, Northstar)\n{% enddocs %}\n\n{% docs event_datetime %}\nWhen the event occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs event_name %}\nName of the event (eg. northstar_submitted_register, https://docs.google.com/spreadsheets/d/1lm-fGrIm85nUTxSojqyCt_Ehmm1zEbViFhKpxcJiz1A/edit#gid=406441516)\n{% enddocs %}\n\n{% docs event_type %}\nType of event (pv = 'Page View', se = 'Structured Event')\n{% enddocs %}\n\n{% docs host %}\nURL host where event occurred (eg. www.dosomething.org or identity.dosomething.org)\n{% enddocs %}\n\n{% docs path %}\nURL path event occurred at (eg. /login or /us/campaigns/huddle-for-heroes)\n{% enddocs %}\n\n{% docs query_parameters %}\nOptional query parameters for the request (eg. query=huddle)\n{% enddocs %}\n\n{% docs se_category %}\nCategory of event (eg. focused_field, authentication) - Custom structured event\n{% enddocs %}\n\n{% docs se_action %}\nAction performed / event name (eg. form_submitted, action_failed) - Custom structured event\n{% enddocs %}\n\n{% docs se_label %}\nThe object of the action (eg. first_name, register, voter_reg_status) - Custom structured event\n{% enddocs %}\n\n{% docs session_id %}\nUnique identifier of the user's session\n{% enddocs %}\n\n{% docs session_counter %}\nHow many sessions a user has started\n{% enddocs %}\n\n{% docs browser_size %}\nWhich type of browser a user is using (eg. Mobile, Desktop)\n{% enddocs %}\n\n{% docs northstar_id %}\nThe Northstar ID of the user who generated the event\n{% enddocs %}\n\n{% docs device_id %}\nID of the device used\n{% enddocs %}\n\n{% docs referrer_host %}\nURL host of the referring site (eg. google.com)\n{% enddocs %}\n\n{% docs referrer_path %}\nURL path from referring site (eg. /10-stats-on-teen-drug-and-alcohol-use/)\n{% enddocs %}\n\n{% docs referrer_source %}\nReferrer source name (eg. Google, Facebook)\n{% enddocs %}\n\n{% docs utm_source %}\nTracks where the traffic is coming from. (eg. scholarship_listing, Facebook)\n{% enddocs %}\n\n{% docs utm_medium %}\nHow the traffic got to the platform (eg. referral, CPC)\n{% enddocs %}\n\n{% docs utm_campaign %}\nTracks which campaign the traffic was generated by. Shows up in Google Analytics as Campaign Name (eg. editorial_newsletter)\n{% enddocs %}\n\n{% docs url %}\nURL of campaign (eg. https://dosome.click/nyn5m7)\n{% enddocs %}\n\n{% docs modal_type %}\nNULL or SURVEY_MODAL\n{% enddocs %}\n\n{% docs landing_datetime %}\nWhen the session started in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs ending_datetime %}\nWhen the session ended in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs session_duration_seconds %}\nSession duration in seconds\n{% enddocs %}\n\n{% docs num_pages_views %}\nNumber of pages viewed in session\n{% enddocs %}\n\n{% docs landing_page %}\nFirst page the user viewed in the session (eg. /us/facts/11-facts-about-bp-oil-spill)\n{% enddocs %}\n\n{% docs exit_page %}\n\"Which page the user ended or exited their session from (eg. /us/campaigns/green-your-getaway)\"\n{% enddocs %}\n\n{% docs days_since_last_session %}\n\"Days since their last session.\"\n{% enddocs %}\n\n{% docs post_type %}\nType of post, (e.g. photo, voter-reg)\n{% enddocs %}\n\n{% docs noun %}\nNoun that corresponds to the item in the call to action that was delivered. (e.g. drawings, tweets)\n{% enddocs %}\n\n{% docs verb %}\nVerb corresponding to the action the user took. (e.g. shared, sent, taken)\n{% enddocs %}\n\n{% docs deleted_at %}\nDate time in UTC when a user deleted their post.\n{% enddocs %}\n\n{% docs _fivetran_deleted %}\nMarks rows that were deleted in the source table\n{% enddocs %}\n\n{% docs _fivetran_synced %}\n(UTC timestamp) keeps track of when each row was last successfully synced\n{% enddocs %}\n\n{% docs reportback %}\nWhether the post is a reportback \n{% enddocs %}\n\n{% docs active %}\nWhether the user is active \n{% enddocs %}\n\n{% docs anonymous %}\nWhether the user is anonymous when making the post \n{% enddocs %}\n\n{% docs callpower_campaign_id %}\nUnique ID corresponding to the Callpower campaign. Callpower allows users to record messages for their representatives.\n{% enddocs %}\n\n{% docs quiz %}\nWhether the post is a quiz \n{% enddocs %}\n\n{% docs action_type %}\nType of action the user took. (e.g. share-something, donate-something)\n{% enddocs %}\n\n{% docs online %}\nWhether the action is a online as opposed to IRL.\n{% enddocs %}\n\n{% docs time_commitment %}\nEstimated time required to do the action (e.g. 3.0+, <0.5)\n{% enddocs %}\n\n{% docs num_signups %}\nQuantity of campaign signups\n{% enddocs %}\n\n{% docs most_recent_signup %}\nTimestamp of the most recent signup in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs num_rbs %}\nQuantity of reportbacks for the user\n{% enddocs %}\n\n{% docs total_quantity %}\nTotal quantity of items in reportbacks\n{% enddocs %}\n\n{% docs most_recent_rb %}\nWhen the most recent reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs first_rb %}\nWhen the first reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs avg_time_betw_rbs %}\nCalculated average time between reportbacks.\n{% enddocs %}\n\n{% docs avg_days_next_action_after_rb %}\nCalculated average days until next action after reportback\n{% enddocs %}\n\n{% docs days_to_next_action_after_last_rb %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs most_recent_mam_action %}\nMost recent monthly active member qualifying action in UTC (eg. 2018-01-01 12:00:00).\n{% enddocs %}\n\n{% docs most_recent_email_open %}\nMost recent email open in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs most_recent_all_actions %}\nMost recent timestamp of any action in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs last_action_is_rb %}\nWhether the last action the user took was a reportback\n{% enddocs %}\n\n{% docs days_since_last_action %}\nDays since the user's last action\n{% enddocs %}\n\n{% docs time_to_first_rb %}\nHow much time after registering until the user's first reportback\n{% enddocs %}\n\n{% docs sms_unsubscribed_at %}\nTimestamp of when user unsubscribed from SMS messaging\n{% enddocs %}\n\n{% docs user_unsubscribed_at %}\nTimestamp of when user unsubscribed from email or sms\n{% enddocs %}\n\n{% docs voter_reg_acquisition %}\nWhether the user was an acquisition through voter registration efforts. \n{% enddocs %}\n\n{% docs last_logged_in %}\nDate time in UTC when user last logged in to Northstar\n{% enddocs %}\n\n{% docs last_accessed %}\nDate time in UTC when user last access the website\n{% enddocs %}\n\n{% docs last_messaged_at %}\nDate time in UTC when user was last sent a message via SMS or email\n{% enddocs %}\n\n{% docs facebook_id %}\nUser's facebook id\n{% enddocs %}\n\n{% docs mobile %}\nUsers's mobile phone number\n{% enddocs %}\n\n{% docs birthdate %}\nUser's birthdate\n{% enddocs %}\n\n{% docs first_name %}\nUser's first name\n{% enddocs %}\n\n{% docs last_name %}\nUser's last name\n{% enddocs %}\n\n{% docs voter_registration_status %}\nUser's registration status. (e.g. registration_complete, confirmed, uncertain) \n{% enddocs %}\n\n{% docs finish_with_state %}\nIf the registrant was eligible to use and passed through to complete their registration with their state\u2019s OVR system, it will be indicated in this field (direct quote from Rock-The-Vote documentation). Yes/No value in field.\n{% enddocs %}\n\n{% docs reportback_volume %}\nThis field returns 1 if non voter-reg action, since campaigns team only counts those a 1 reportback. If voter-reg action, we want to count quantity of post as number of registered voters.\n{% enddocs %}\n\n{% docs address_street_1 %}\nFirst line of user's street address\n{% enddocs %}\n\n{% docs address_street_2 %}\nSecond line of user's street address\n{% enddocs %}\n\n{% docs city %}\nUser's city\n{% enddocs %}\n\n{% docs state %}\nUser's state\n{% enddocs %}\n\n{% docs country %}\nUser's country\n{% enddocs %}\n\n{% docs language %}\nUser's language\n{% enddocs %}\n\n{% docs cio_status %}\nStatus of user from CIO. (e.g. customer_subscribed, customer_unsubscribed)\n{% enddocs %}\n\n{% docs cio_status_timestamp %}\nTimestamp when users's status was updated.\n{% enddocs %}\n\n{% docs sms_status %}\nCurrent SMS status. (e.g. undeliverable, unknown)\n{% enddocs %}\n\n{% docs source_detail %}\nDetails of the origin of the user. (e.g. tell_a_friend, other, opt_in_path/197981)\n{% enddocs %}\n\n{% docs badges %}\nWhether the user has any badges. \n{% enddocs %}\n\n{% docs refer_friends %}\nWhether the user is a part of the refer a friend campaign. \n{% enddocs %}\n\n{% docs subscribed_member %}\nWhether the user is subscribed. \n{% enddocs %}\n\n{% docs last_updated_at %}\nTimestamp when users's was updated.\n{% enddocs %}\n\n{% docs school_id %}\nUnique identifier for the user's school. This info comes from the school finder.\n{% enddocs %}\n\n{% docs newsletter_topic %}\nNewsletter topic. (e.g. community, lifestyle)\n{% enddocs %}\n\n{% docs user_agent %}\nFull user agent string for a user's browser (e.g. \"Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:24.0) Gecko/20100101 Firefox/24.0\")\n{% enddocs %}\n\n{% docs drupal_id %}\nOld Drupal user ID\n{% enddocs %}\n\n{% docs campaigns %}\nCampaigns a user is signed up for.\n{% enddocs %}\n\n{% docs audit %}\nA very useful field with data containing information about changes to a user, e.g. timestamps when the user subscribed and unsubscribed.\n{% enddocs %}\n\n{% docs voting_plan_status %}\nThe indication of the user's plan to vote, e.g. voting, not_voting, cant_vote\n{% enddocs %}\n\n{% docs voting_plan_time_of_day %}\nThe time of day when the user plans to vote, e.g morning, afternoon, evening\n{% enddocs %}\n\n{% docs voting_plan_method_of_transport %}\nHow the user plans to get to their polling place. e.g. walk, drive\n{% enddocs %}\n\n{% docs voting_plan_attending_with %}\nWith Whom the user plans to go voting, e.g. family, friends, alone\n{% enddocs %}\n\n{% docs feature_flags %}\nJSON containing info on features like badges and refer-a-friend.\n{% enddocs %}\n\n{% docs dbt_updated_at %}\nDBT snapshot table data. The updated_at timestamp of the source record when this snapshot row was inserted.\n{% enddocs %}\n\n{% docs dbt_scd_id %}\nDBT snapshot table data. A unique key generated for each snapshotted record.\n{% enddocs %}\n\n{% docs dbt_valid_from %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this snapshot row was first inserted\n{% enddocs %}\n\n{% docs dbt_valid_to %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this row row became invalidated.\n{% enddocs %}\n\n{% docs google_id %}\nUser's Google ID obtained from login.\n{% enddocs %}\n\n{% docs causes %}\nCauses in which a user is interested. e.g. animal welfare, education, mental_health\n{% enddocs %}\n\n{% docs email_subscription_status %}\nEmail subscription status of the user\n{% enddocs %}\n\n{% docs role %}\nUser's role, e.g. user, staff\n{% enddocs %}\n\n{% docs cio_backfilled %}\nWhether this user's data was backfilled from CIO\n{% enddocs %}\n\n{% docs addr_source %}\nWhere the user submitted their address, e.g. sms, GDPR\n{% enddocs %}\n\n{% docs email_subscription_topics %}\nEmail subscription topics correspond to categories in CIO in which the user is interested. e.g. lifestyle, community, scholarship\n{% enddocs %}\n\n{% docs sms_paused %}\nWhether we've paused sending sms messages to the user.\n{% enddocs %}\n\n\n\n\n", "name": "url", "unique_id": "ds_dbt.url", "block_contents": "URL of campaign (eg. https://dosome.click/nyn5m7)"}, "ds_dbt.modal_type": {"root_path": "/Users/mrich/projects/quasar/quasar/dbt", "resource_type": "docs", "path": "schema.md", "original_file_path": "models/schema.md", "package_name": "ds_dbt", "file_contents": "\n{% docs click_id %}\nThis is a unique identifier for each click\n{% enddocs %}\n\n{% docs click_time %}\nTimestamp when user clicked.\n{% enddocs %}\n\n{% docs shortened %}\nShortened URL\n{% enddocs %}\n\n{% docs target_url %}\nURL where the user will be directed\n{% enddocs %}\n\n{% docs broadcast_id %}\nID of the broadcast that generated the shortened URL\n{% enddocs %}\n\n{% docs source %}\nSource of the URL (e.g. SMS, web), origin of the post (e.g. phoenix-web, phoenix-ashes, sms), or source where user was acquired. (e.g. sms, phoenix-next)\n{% enddocs %}\n\n{% docs interaction_type %}\nHow the user interacted with the link (e.g. preview, click)\n{% enddocs %}\n\n{% docs id %}\nUnique identifier for the post\n{% enddocs %}\n\n{% docs type %}\nType of post (e.g. photo)\n{% enddocs %}\n\n{% docs action %}\nPost action (e.g. DefendDreamers_Nov9_CongressCalls, GunViolence2018_Feb15_ParklandResponse)\n{% enddocs %}\n\n{% docs status %}\nPost status (e.g. accepted, rejected)\n{% enddocs %}\n\n{% docs quantity %}\nNumerical quantity of items specified in the call to action (e.g. 10, 200)\n{% enddocs %}\n\n{% docs source_bucket %}\nGrouping bucket for origin of the post (e.g. web, sms) \n{% enddocs %}\n\n{% docs created_at %}\nWhen the item was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs updated_at %}\nWhen the item was updated in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs text %}\nText of the post (e.g. \"Zoo animals and a super hero trying to help too!\") \n{% enddocs %}\n\n{% docs signup_id %}\nUnique identifier for the signup \n{% enddocs %}\n\n{% docs post_class %}\nClass of the signup (e.g. \"photo - default\", \"phone-call - DefendDreamers_Jan16_BothBodies\")\n{% enddocs %}\n\n{% docs is_accepted %}\nWhether the post has been accepted to be displayed to the public on the website\n{% enddocs %}\n\n{% docs action_id %}\nInternal identifier of the action \n{% enddocs %}\n\n{% docs location %}\nLocation where the action takes place (e.g. US-NY)\n{% enddocs %}\n\n{% docs postal_code %}\nPostal code where the action takes place\n{% enddocs %}\n\n{% docs is_reportback %}\nWhether the post is a reportback. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs civic_action %}\nWhether the post is a Civic Action. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs scholarship_entry %}\nWhether the post is a Scholarship Entry. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs why_participated %}\nWhy the user participated in this action. Entered by the user.\n{% enddocs %}\n\n{% docs details %}\nDetails about the post. Contains contentfulId and other information (e.g. {\"campaignContentfulId\":\"6ATBgGEQEeJoIcxs1qbwaC\"})\n{% enddocs %}\n\n{% docs email %}\nEmail address of the user.\n{% enddocs %}\n\n{% docs source_details %}\nDetails about the source of the item. This is sometimes represented as a JSON object, and for other tables like Turbovote its represented as a string. (e.g. \"{\"contentful_id\":\"3CTLlXfbwtz1FOMpl31SKV\",\"utm_source\":\"scholarship_listing\",\"utm_medium\":\"referral\",\"utm_campaign\":\"fastweb_2019_08\"}\", newsletter_456)\n{% enddocs %}\n\n{% docs campaign_id %}\nThis is a unique identifier for the campaign\n{% enddocs %}\n\n{% docs campaign_run_id %}\nUnique identifier for the campaign run\n{% enddocs %}\n\n{% docs campaign_name %}\nName of the campaign\n{% enddocs %}\n\n{% docs campaign_cause %}\nCampaign cause (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_run_start_date %}\nStart date of the campaign run\n{% enddocs %}\n\n{% docs campaign_run_end_date %}\nEnd date of the campaign run\n{% enddocs %}\n\n{% docs campaign_created_date %}\nWhen the campaign was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs campaign_node_id %}\nInternal unique node id for the campaign\n{% enddocs %}\n\n{% docs campaign_node_id_title %}\nCampaign title\n{% enddocs %}\n\n{% docs campaign_run_id_title %}\nTitle of the campaign run\n{% enddocs %}\n\n{% docs campaign_action_type %}\nCampaign action type (eg. Make Something, Share Something)\n{% enddocs %}\n\n{% docs campaign_cause_type %}\nCampaign cause type (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_noun %}\nNoun applicable to the user's action\n{% enddocs %}\n\n{% docs campaign_verb %}\nVerb describing the action the user should take\n{% enddocs %}\n\n{% docs campaign_cta %}\nCampaign's call to action\n{% enddocs %}\n\n{% docs campaign_language %}\n\"Language in which the campaign is available\"\n{% enddocs %}\n\n{% docs agent_id %}\nIf set, the content type of the picture the member is sending us. Exp. image/png.\n{% enddocs %}\n\n{% docs attachment_content_type %}\nIf set, the handle of the Front agent this outbound support message is from.\n{% enddocs %}\n\n{% docs topic %}\nHolds a reference to the **last** campaign topic the member's conversation was in. This is useful to allow members to talk to Gambit and get quick responses (through Rivescript), without Gambit completely forgetting what state the member's interaction with a campaign topic was in.\n{% enddocs %}\n\n{% docs action_serial_id %}\nSerial id for the user's action. Depends on the source of the action. May be the bertly click id, sms message id, etc.\n{% enddocs %}\n\n{% docs channel %}\nChannel for the user's action. Depends on the source of the action. (e.g. web, sms)\n{% enddocs %}\n\n{% docs first_action_month %}\nMonth during which the user took their first action. \n{% enddocs %}\n\n{% docs event_id %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs event_source %}\nApplication source for event (eg. Phoenix, Northstar)\n{% enddocs %}\n\n{% docs event_datetime %}\nWhen the event occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs event_name %}\nName of the event (eg. northstar_submitted_register, https://docs.google.com/spreadsheets/d/1lm-fGrIm85nUTxSojqyCt_Ehmm1zEbViFhKpxcJiz1A/edit#gid=406441516)\n{% enddocs %}\n\n{% docs event_type %}\nType of event (pv = 'Page View', se = 'Structured Event')\n{% enddocs %}\n\n{% docs host %}\nURL host where event occurred (eg. www.dosomething.org or identity.dosomething.org)\n{% enddocs %}\n\n{% docs path %}\nURL path event occurred at (eg. /login or /us/campaigns/huddle-for-heroes)\n{% enddocs %}\n\n{% docs query_parameters %}\nOptional query parameters for the request (eg. query=huddle)\n{% enddocs %}\n\n{% docs se_category %}\nCategory of event (eg. focused_field, authentication) - Custom structured event\n{% enddocs %}\n\n{% docs se_action %}\nAction performed / event name (eg. form_submitted, action_failed) - Custom structured event\n{% enddocs %}\n\n{% docs se_label %}\nThe object of the action (eg. first_name, register, voter_reg_status) - Custom structured event\n{% enddocs %}\n\n{% docs session_id %}\nUnique identifier of the user's session\n{% enddocs %}\n\n{% docs session_counter %}\nHow many sessions a user has started\n{% enddocs %}\n\n{% docs browser_size %}\nWhich type of browser a user is using (eg. Mobile, Desktop)\n{% enddocs %}\n\n{% docs northstar_id %}\nThe Northstar ID of the user who generated the event\n{% enddocs %}\n\n{% docs device_id %}\nID of the device used\n{% enddocs %}\n\n{% docs referrer_host %}\nURL host of the referring site (eg. google.com)\n{% enddocs %}\n\n{% docs referrer_path %}\nURL path from referring site (eg. /10-stats-on-teen-drug-and-alcohol-use/)\n{% enddocs %}\n\n{% docs referrer_source %}\nReferrer source name (eg. Google, Facebook)\n{% enddocs %}\n\n{% docs utm_source %}\nTracks where the traffic is coming from. (eg. scholarship_listing, Facebook)\n{% enddocs %}\n\n{% docs utm_medium %}\nHow the traffic got to the platform (eg. referral, CPC)\n{% enddocs %}\n\n{% docs utm_campaign %}\nTracks which campaign the traffic was generated by. Shows up in Google Analytics as Campaign Name (eg. editorial_newsletter)\n{% enddocs %}\n\n{% docs url %}\nURL of campaign (eg. https://dosome.click/nyn5m7)\n{% enddocs %}\n\n{% docs modal_type %}\nNULL or SURVEY_MODAL\n{% enddocs %}\n\n{% docs landing_datetime %}\nWhen the session started in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs ending_datetime %}\nWhen the session ended in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs session_duration_seconds %}\nSession duration in seconds\n{% enddocs %}\n\n{% docs num_pages_views %}\nNumber of pages viewed in session\n{% enddocs %}\n\n{% docs landing_page %}\nFirst page the user viewed in the session (eg. /us/facts/11-facts-about-bp-oil-spill)\n{% enddocs %}\n\n{% docs exit_page %}\n\"Which page the user ended or exited their session from (eg. /us/campaigns/green-your-getaway)\"\n{% enddocs %}\n\n{% docs days_since_last_session %}\n\"Days since their last session.\"\n{% enddocs %}\n\n{% docs post_type %}\nType of post, (e.g. photo, voter-reg)\n{% enddocs %}\n\n{% docs noun %}\nNoun that corresponds to the item in the call to action that was delivered. (e.g. drawings, tweets)\n{% enddocs %}\n\n{% docs verb %}\nVerb corresponding to the action the user took. (e.g. shared, sent, taken)\n{% enddocs %}\n\n{% docs deleted_at %}\nDate time in UTC when a user deleted their post.\n{% enddocs %}\n\n{% docs _fivetran_deleted %}\nMarks rows that were deleted in the source table\n{% enddocs %}\n\n{% docs _fivetran_synced %}\n(UTC timestamp) keeps track of when each row was last successfully synced\n{% enddocs %}\n\n{% docs reportback %}\nWhether the post is a reportback \n{% enddocs %}\n\n{% docs active %}\nWhether the user is active \n{% enddocs %}\n\n{% docs anonymous %}\nWhether the user is anonymous when making the post \n{% enddocs %}\n\n{% docs callpower_campaign_id %}\nUnique ID corresponding to the Callpower campaign. Callpower allows users to record messages for their representatives.\n{% enddocs %}\n\n{% docs quiz %}\nWhether the post is a quiz \n{% enddocs %}\n\n{% docs action_type %}\nType of action the user took. (e.g. share-something, donate-something)\n{% enddocs %}\n\n{% docs online %}\nWhether the action is a online as opposed to IRL.\n{% enddocs %}\n\n{% docs time_commitment %}\nEstimated time required to do the action (e.g. 3.0+, <0.5)\n{% enddocs %}\n\n{% docs num_signups %}\nQuantity of campaign signups\n{% enddocs %}\n\n{% docs most_recent_signup %}\nTimestamp of the most recent signup in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs num_rbs %}\nQuantity of reportbacks for the user\n{% enddocs %}\n\n{% docs total_quantity %}\nTotal quantity of items in reportbacks\n{% enddocs %}\n\n{% docs most_recent_rb %}\nWhen the most recent reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs first_rb %}\nWhen the first reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs avg_time_betw_rbs %}\nCalculated average time between reportbacks.\n{% enddocs %}\n\n{% docs avg_days_next_action_after_rb %}\nCalculated average days until next action after reportback\n{% enddocs %}\n\n{% docs days_to_next_action_after_last_rb %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs most_recent_mam_action %}\nMost recent monthly active member qualifying action in UTC (eg. 2018-01-01 12:00:00).\n{% enddocs %}\n\n{% docs most_recent_email_open %}\nMost recent email open in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs most_recent_all_actions %}\nMost recent timestamp of any action in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs last_action_is_rb %}\nWhether the last action the user took was a reportback\n{% enddocs %}\n\n{% docs days_since_last_action %}\nDays since the user's last action\n{% enddocs %}\n\n{% docs time_to_first_rb %}\nHow much time after registering until the user's first reportback\n{% enddocs %}\n\n{% docs sms_unsubscribed_at %}\nTimestamp of when user unsubscribed from SMS messaging\n{% enddocs %}\n\n{% docs user_unsubscribed_at %}\nTimestamp of when user unsubscribed from email or sms\n{% enddocs %}\n\n{% docs voter_reg_acquisition %}\nWhether the user was an acquisition through voter registration efforts. \n{% enddocs %}\n\n{% docs last_logged_in %}\nDate time in UTC when user last logged in to Northstar\n{% enddocs %}\n\n{% docs last_accessed %}\nDate time in UTC when user last access the website\n{% enddocs %}\n\n{% docs last_messaged_at %}\nDate time in UTC when user was last sent a message via SMS or email\n{% enddocs %}\n\n{% docs facebook_id %}\nUser's facebook id\n{% enddocs %}\n\n{% docs mobile %}\nUsers's mobile phone number\n{% enddocs %}\n\n{% docs birthdate %}\nUser's birthdate\n{% enddocs %}\n\n{% docs first_name %}\nUser's first name\n{% enddocs %}\n\n{% docs last_name %}\nUser's last name\n{% enddocs %}\n\n{% docs voter_registration_status %}\nUser's registration status. (e.g. registration_complete, confirmed, uncertain) \n{% enddocs %}\n\n{% docs finish_with_state %}\nIf the registrant was eligible to use and passed through to complete their registration with their state\u2019s OVR system, it will be indicated in this field (direct quote from Rock-The-Vote documentation). Yes/No value in field.\n{% enddocs %}\n\n{% docs reportback_volume %}\nThis field returns 1 if non voter-reg action, since campaigns team only counts those a 1 reportback. If voter-reg action, we want to count quantity of post as number of registered voters.\n{% enddocs %}\n\n{% docs address_street_1 %}\nFirst line of user's street address\n{% enddocs %}\n\n{% docs address_street_2 %}\nSecond line of user's street address\n{% enddocs %}\n\n{% docs city %}\nUser's city\n{% enddocs %}\n\n{% docs state %}\nUser's state\n{% enddocs %}\n\n{% docs country %}\nUser's country\n{% enddocs %}\n\n{% docs language %}\nUser's language\n{% enddocs %}\n\n{% docs cio_status %}\nStatus of user from CIO. (e.g. customer_subscribed, customer_unsubscribed)\n{% enddocs %}\n\n{% docs cio_status_timestamp %}\nTimestamp when users's status was updated.\n{% enddocs %}\n\n{% docs sms_status %}\nCurrent SMS status. (e.g. undeliverable, unknown)\n{% enddocs %}\n\n{% docs source_detail %}\nDetails of the origin of the user. (e.g. tell_a_friend, other, opt_in_path/197981)\n{% enddocs %}\n\n{% docs badges %}\nWhether the user has any badges. \n{% enddocs %}\n\n{% docs refer_friends %}\nWhether the user is a part of the refer a friend campaign. \n{% enddocs %}\n\n{% docs subscribed_member %}\nWhether the user is subscribed. \n{% enddocs %}\n\n{% docs last_updated_at %}\nTimestamp when users's was updated.\n{% enddocs %}\n\n{% docs school_id %}\nUnique identifier for the user's school. This info comes from the school finder.\n{% enddocs %}\n\n{% docs newsletter_topic %}\nNewsletter topic. (e.g. community, lifestyle)\n{% enddocs %}\n\n{% docs user_agent %}\nFull user agent string for a user's browser (e.g. \"Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:24.0) Gecko/20100101 Firefox/24.0\")\n{% enddocs %}\n\n{% docs drupal_id %}\nOld Drupal user ID\n{% enddocs %}\n\n{% docs campaigns %}\nCampaigns a user is signed up for.\n{% enddocs %}\n\n{% docs audit %}\nA very useful field with data containing information about changes to a user, e.g. timestamps when the user subscribed and unsubscribed.\n{% enddocs %}\n\n{% docs voting_plan_status %}\nThe indication of the user's plan to vote, e.g. voting, not_voting, cant_vote\n{% enddocs %}\n\n{% docs voting_plan_time_of_day %}\nThe time of day when the user plans to vote, e.g morning, afternoon, evening\n{% enddocs %}\n\n{% docs voting_plan_method_of_transport %}\nHow the user plans to get to their polling place. e.g. walk, drive\n{% enddocs %}\n\n{% docs voting_plan_attending_with %}\nWith Whom the user plans to go voting, e.g. family, friends, alone\n{% enddocs %}\n\n{% docs feature_flags %}\nJSON containing info on features like badges and refer-a-friend.\n{% enddocs %}\n\n{% docs dbt_updated_at %}\nDBT snapshot table data. The updated_at timestamp of the source record when this snapshot row was inserted.\n{% enddocs %}\n\n{% docs dbt_scd_id %}\nDBT snapshot table data. A unique key generated for each snapshotted record.\n{% enddocs %}\n\n{% docs dbt_valid_from %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this snapshot row was first inserted\n{% enddocs %}\n\n{% docs dbt_valid_to %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this row row became invalidated.\n{% enddocs %}\n\n{% docs google_id %}\nUser's Google ID obtained from login.\n{% enddocs %}\n\n{% docs causes %}\nCauses in which a user is interested. e.g. animal welfare, education, mental_health\n{% enddocs %}\n\n{% docs email_subscription_status %}\nEmail subscription status of the user\n{% enddocs %}\n\n{% docs role %}\nUser's role, e.g. user, staff\n{% enddocs %}\n\n{% docs cio_backfilled %}\nWhether this user's data was backfilled from CIO\n{% enddocs %}\n\n{% docs addr_source %}\nWhere the user submitted their address, e.g. sms, GDPR\n{% enddocs %}\n\n{% docs email_subscription_topics %}\nEmail subscription topics correspond to categories in CIO in which the user is interested. e.g. lifestyle, community, scholarship\n{% enddocs %}\n\n{% docs sms_paused %}\nWhether we've paused sending sms messages to the user.\n{% enddocs %}\n\n\n\n\n", "name": "modal_type", "unique_id": "ds_dbt.modal_type", "block_contents": "NULL or SURVEY_MODAL"}, "ds_dbt.landing_datetime": {"root_path": "/Users/mrich/projects/quasar/quasar/dbt", "resource_type": "docs", "path": "schema.md", "original_file_path": "models/schema.md", "package_name": "ds_dbt", "file_contents": "\n{% docs click_id %}\nThis is a unique identifier for each click\n{% enddocs %}\n\n{% docs click_time %}\nTimestamp when user clicked.\n{% enddocs %}\n\n{% docs shortened %}\nShortened URL\n{% enddocs %}\n\n{% docs target_url %}\nURL where the user will be directed\n{% enddocs %}\n\n{% docs broadcast_id %}\nID of the broadcast that generated the shortened URL\n{% enddocs %}\n\n{% docs source %}\nSource of the URL (e.g. SMS, web), origin of the post (e.g. phoenix-web, phoenix-ashes, sms), or source where user was acquired. (e.g. sms, phoenix-next)\n{% enddocs %}\n\n{% docs interaction_type %}\nHow the user interacted with the link (e.g. preview, click)\n{% enddocs %}\n\n{% docs id %}\nUnique identifier for the post\n{% enddocs %}\n\n{% docs type %}\nType of post (e.g. photo)\n{% enddocs %}\n\n{% docs action %}\nPost action (e.g. DefendDreamers_Nov9_CongressCalls, GunViolence2018_Feb15_ParklandResponse)\n{% enddocs %}\n\n{% docs status %}\nPost status (e.g. accepted, rejected)\n{% enddocs %}\n\n{% docs quantity %}\nNumerical quantity of items specified in the call to action (e.g. 10, 200)\n{% enddocs %}\n\n{% docs source_bucket %}\nGrouping bucket for origin of the post (e.g. web, sms) \n{% enddocs %}\n\n{% docs created_at %}\nWhen the item was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs updated_at %}\nWhen the item was updated in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs text %}\nText of the post (e.g. \"Zoo animals and a super hero trying to help too!\") \n{% enddocs %}\n\n{% docs signup_id %}\nUnique identifier for the signup \n{% enddocs %}\n\n{% docs post_class %}\nClass of the signup (e.g. \"photo - default\", \"phone-call - DefendDreamers_Jan16_BothBodies\")\n{% enddocs %}\n\n{% docs is_accepted %}\nWhether the post has been accepted to be displayed to the public on the website\n{% enddocs %}\n\n{% docs action_id %}\nInternal identifier of the action \n{% enddocs %}\n\n{% docs location %}\nLocation where the action takes place (e.g. US-NY)\n{% enddocs %}\n\n{% docs postal_code %}\nPostal code where the action takes place\n{% enddocs %}\n\n{% docs is_reportback %}\nWhether the post is a reportback. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs civic_action %}\nWhether the post is a Civic Action. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs scholarship_entry %}\nWhether the post is a Scholarship Entry. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs why_participated %}\nWhy the user participated in this action. Entered by the user.\n{% enddocs %}\n\n{% docs details %}\nDetails about the post. Contains contentfulId and other information (e.g. {\"campaignContentfulId\":\"6ATBgGEQEeJoIcxs1qbwaC\"})\n{% enddocs %}\n\n{% docs email %}\nEmail address of the user.\n{% enddocs %}\n\n{% docs source_details %}\nDetails about the source of the item. This is sometimes represented as a JSON object, and for other tables like Turbovote its represented as a string. (e.g. \"{\"contentful_id\":\"3CTLlXfbwtz1FOMpl31SKV\",\"utm_source\":\"scholarship_listing\",\"utm_medium\":\"referral\",\"utm_campaign\":\"fastweb_2019_08\"}\", newsletter_456)\n{% enddocs %}\n\n{% docs campaign_id %}\nThis is a unique identifier for the campaign\n{% enddocs %}\n\n{% docs campaign_run_id %}\nUnique identifier for the campaign run\n{% enddocs %}\n\n{% docs campaign_name %}\nName of the campaign\n{% enddocs %}\n\n{% docs campaign_cause %}\nCampaign cause (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_run_start_date %}\nStart date of the campaign run\n{% enddocs %}\n\n{% docs campaign_run_end_date %}\nEnd date of the campaign run\n{% enddocs %}\n\n{% docs campaign_created_date %}\nWhen the campaign was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs campaign_node_id %}\nInternal unique node id for the campaign\n{% enddocs %}\n\n{% docs campaign_node_id_title %}\nCampaign title\n{% enddocs %}\n\n{% docs campaign_run_id_title %}\nTitle of the campaign run\n{% enddocs %}\n\n{% docs campaign_action_type %}\nCampaign action type (eg. Make Something, Share Something)\n{% enddocs %}\n\n{% docs campaign_cause_type %}\nCampaign cause type (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_noun %}\nNoun applicable to the user's action\n{% enddocs %}\n\n{% docs campaign_verb %}\nVerb describing the action the user should take\n{% enddocs %}\n\n{% docs campaign_cta %}\nCampaign's call to action\n{% enddocs %}\n\n{% docs campaign_language %}\n\"Language in which the campaign is available\"\n{% enddocs %}\n\n{% docs agent_id %}\nIf set, the content type of the picture the member is sending us. Exp. image/png.\n{% enddocs %}\n\n{% docs attachment_content_type %}\nIf set, the handle of the Front agent this outbound support message is from.\n{% enddocs %}\n\n{% docs topic %}\nHolds a reference to the **last** campaign topic the member's conversation was in. This is useful to allow members to talk to Gambit and get quick responses (through Rivescript), without Gambit completely forgetting what state the member's interaction with a campaign topic was in.\n{% enddocs %}\n\n{% docs action_serial_id %}\nSerial id for the user's action. Depends on the source of the action. May be the bertly click id, sms message id, etc.\n{% enddocs %}\n\n{% docs channel %}\nChannel for the user's action. Depends on the source of the action. (e.g. web, sms)\n{% enddocs %}\n\n{% docs first_action_month %}\nMonth during which the user took their first action. \n{% enddocs %}\n\n{% docs event_id %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs event_source %}\nApplication source for event (eg. Phoenix, Northstar)\n{% enddocs %}\n\n{% docs event_datetime %}\nWhen the event occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs event_name %}\nName of the event (eg. northstar_submitted_register, https://docs.google.com/spreadsheets/d/1lm-fGrIm85nUTxSojqyCt_Ehmm1zEbViFhKpxcJiz1A/edit#gid=406441516)\n{% enddocs %}\n\n{% docs event_type %}\nType of event (pv = 'Page View', se = 'Structured Event')\n{% enddocs %}\n\n{% docs host %}\nURL host where event occurred (eg. www.dosomething.org or identity.dosomething.org)\n{% enddocs %}\n\n{% docs path %}\nURL path event occurred at (eg. /login or /us/campaigns/huddle-for-heroes)\n{% enddocs %}\n\n{% docs query_parameters %}\nOptional query parameters for the request (eg. query=huddle)\n{% enddocs %}\n\n{% docs se_category %}\nCategory of event (eg. focused_field, authentication) - Custom structured event\n{% enddocs %}\n\n{% docs se_action %}\nAction performed / event name (eg. form_submitted, action_failed) - Custom structured event\n{% enddocs %}\n\n{% docs se_label %}\nThe object of the action (eg. first_name, register, voter_reg_status) - Custom structured event\n{% enddocs %}\n\n{% docs session_id %}\nUnique identifier of the user's session\n{% enddocs %}\n\n{% docs session_counter %}\nHow many sessions a user has started\n{% enddocs %}\n\n{% docs browser_size %}\nWhich type of browser a user is using (eg. Mobile, Desktop)\n{% enddocs %}\n\n{% docs northstar_id %}\nThe Northstar ID of the user who generated the event\n{% enddocs %}\n\n{% docs device_id %}\nID of the device used\n{% enddocs %}\n\n{% docs referrer_host %}\nURL host of the referring site (eg. google.com)\n{% enddocs %}\n\n{% docs referrer_path %}\nURL path from referring site (eg. /10-stats-on-teen-drug-and-alcohol-use/)\n{% enddocs %}\n\n{% docs referrer_source %}\nReferrer source name (eg. Google, Facebook)\n{% enddocs %}\n\n{% docs utm_source %}\nTracks where the traffic is coming from. (eg. scholarship_listing, Facebook)\n{% enddocs %}\n\n{% docs utm_medium %}\nHow the traffic got to the platform (eg. referral, CPC)\n{% enddocs %}\n\n{% docs utm_campaign %}\nTracks which campaign the traffic was generated by. Shows up in Google Analytics as Campaign Name (eg. editorial_newsletter)\n{% enddocs %}\n\n{% docs url %}\nURL of campaign (eg. https://dosome.click/nyn5m7)\n{% enddocs %}\n\n{% docs modal_type %}\nNULL or SURVEY_MODAL\n{% enddocs %}\n\n{% docs landing_datetime %}\nWhen the session started in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs ending_datetime %}\nWhen the session ended in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs session_duration_seconds %}\nSession duration in seconds\n{% enddocs %}\n\n{% docs num_pages_views %}\nNumber of pages viewed in session\n{% enddocs %}\n\n{% docs landing_page %}\nFirst page the user viewed in the session (eg. /us/facts/11-facts-about-bp-oil-spill)\n{% enddocs %}\n\n{% docs exit_page %}\n\"Which page the user ended or exited their session from (eg. /us/campaigns/green-your-getaway)\"\n{% enddocs %}\n\n{% docs days_since_last_session %}\n\"Days since their last session.\"\n{% enddocs %}\n\n{% docs post_type %}\nType of post, (e.g. photo, voter-reg)\n{% enddocs %}\n\n{% docs noun %}\nNoun that corresponds to the item in the call to action that was delivered. (e.g. drawings, tweets)\n{% enddocs %}\n\n{% docs verb %}\nVerb corresponding to the action the user took. (e.g. shared, sent, taken)\n{% enddocs %}\n\n{% docs deleted_at %}\nDate time in UTC when a user deleted their post.\n{% enddocs %}\n\n{% docs _fivetran_deleted %}\nMarks rows that were deleted in the source table\n{% enddocs %}\n\n{% docs _fivetran_synced %}\n(UTC timestamp) keeps track of when each row was last successfully synced\n{% enddocs %}\n\n{% docs reportback %}\nWhether the post is a reportback \n{% enddocs %}\n\n{% docs active %}\nWhether the user is active \n{% enddocs %}\n\n{% docs anonymous %}\nWhether the user is anonymous when making the post \n{% enddocs %}\n\n{% docs callpower_campaign_id %}\nUnique ID corresponding to the Callpower campaign. Callpower allows users to record messages for their representatives.\n{% enddocs %}\n\n{% docs quiz %}\nWhether the post is a quiz \n{% enddocs %}\n\n{% docs action_type %}\nType of action the user took. (e.g. share-something, donate-something)\n{% enddocs %}\n\n{% docs online %}\nWhether the action is a online as opposed to IRL.\n{% enddocs %}\n\n{% docs time_commitment %}\nEstimated time required to do the action (e.g. 3.0+, <0.5)\n{% enddocs %}\n\n{% docs num_signups %}\nQuantity of campaign signups\n{% enddocs %}\n\n{% docs most_recent_signup %}\nTimestamp of the most recent signup in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs num_rbs %}\nQuantity of reportbacks for the user\n{% enddocs %}\n\n{% docs total_quantity %}\nTotal quantity of items in reportbacks\n{% enddocs %}\n\n{% docs most_recent_rb %}\nWhen the most recent reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs first_rb %}\nWhen the first reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs avg_time_betw_rbs %}\nCalculated average time between reportbacks.\n{% enddocs %}\n\n{% docs avg_days_next_action_after_rb %}\nCalculated average days until next action after reportback\n{% enddocs %}\n\n{% docs days_to_next_action_after_last_rb %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs most_recent_mam_action %}\nMost recent monthly active member qualifying action in UTC (eg. 2018-01-01 12:00:00).\n{% enddocs %}\n\n{% docs most_recent_email_open %}\nMost recent email open in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs most_recent_all_actions %}\nMost recent timestamp of any action in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs last_action_is_rb %}\nWhether the last action the user took was a reportback\n{% enddocs %}\n\n{% docs days_since_last_action %}\nDays since the user's last action\n{% enddocs %}\n\n{% docs time_to_first_rb %}\nHow much time after registering until the user's first reportback\n{% enddocs %}\n\n{% docs sms_unsubscribed_at %}\nTimestamp of when user unsubscribed from SMS messaging\n{% enddocs %}\n\n{% docs user_unsubscribed_at %}\nTimestamp of when user unsubscribed from email or sms\n{% enddocs %}\n\n{% docs voter_reg_acquisition %}\nWhether the user was an acquisition through voter registration efforts. \n{% enddocs %}\n\n{% docs last_logged_in %}\nDate time in UTC when user last logged in to Northstar\n{% enddocs %}\n\n{% docs last_accessed %}\nDate time in UTC when user last access the website\n{% enddocs %}\n\n{% docs last_messaged_at %}\nDate time in UTC when user was last sent a message via SMS or email\n{% enddocs %}\n\n{% docs facebook_id %}\nUser's facebook id\n{% enddocs %}\n\n{% docs mobile %}\nUsers's mobile phone number\n{% enddocs %}\n\n{% docs birthdate %}\nUser's birthdate\n{% enddocs %}\n\n{% docs first_name %}\nUser's first name\n{% enddocs %}\n\n{% docs last_name %}\nUser's last name\n{% enddocs %}\n\n{% docs voter_registration_status %}\nUser's registration status. (e.g. registration_complete, confirmed, uncertain) \n{% enddocs %}\n\n{% docs finish_with_state %}\nIf the registrant was eligible to use and passed through to complete their registration with their state\u2019s OVR system, it will be indicated in this field (direct quote from Rock-The-Vote documentation). Yes/No value in field.\n{% enddocs %}\n\n{% docs reportback_volume %}\nThis field returns 1 if non voter-reg action, since campaigns team only counts those a 1 reportback. If voter-reg action, we want to count quantity of post as number of registered voters.\n{% enddocs %}\n\n{% docs address_street_1 %}\nFirst line of user's street address\n{% enddocs %}\n\n{% docs address_street_2 %}\nSecond line of user's street address\n{% enddocs %}\n\n{% docs city %}\nUser's city\n{% enddocs %}\n\n{% docs state %}\nUser's state\n{% enddocs %}\n\n{% docs country %}\nUser's country\n{% enddocs %}\n\n{% docs language %}\nUser's language\n{% enddocs %}\n\n{% docs cio_status %}\nStatus of user from CIO. (e.g. customer_subscribed, customer_unsubscribed)\n{% enddocs %}\n\n{% docs cio_status_timestamp %}\nTimestamp when users's status was updated.\n{% enddocs %}\n\n{% docs sms_status %}\nCurrent SMS status. (e.g. undeliverable, unknown)\n{% enddocs %}\n\n{% docs source_detail %}\nDetails of the origin of the user. (e.g. tell_a_friend, other, opt_in_path/197981)\n{% enddocs %}\n\n{% docs badges %}\nWhether the user has any badges. \n{% enddocs %}\n\n{% docs refer_friends %}\nWhether the user is a part of the refer a friend campaign. \n{% enddocs %}\n\n{% docs subscribed_member %}\nWhether the user is subscribed. \n{% enddocs %}\n\n{% docs last_updated_at %}\nTimestamp when users's was updated.\n{% enddocs %}\n\n{% docs school_id %}\nUnique identifier for the user's school. This info comes from the school finder.\n{% enddocs %}\n\n{% docs newsletter_topic %}\nNewsletter topic. (e.g. community, lifestyle)\n{% enddocs %}\n\n{% docs user_agent %}\nFull user agent string for a user's browser (e.g. \"Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:24.0) Gecko/20100101 Firefox/24.0\")\n{% enddocs %}\n\n{% docs drupal_id %}\nOld Drupal user ID\n{% enddocs %}\n\n{% docs campaigns %}\nCampaigns a user is signed up for.\n{% enddocs %}\n\n{% docs audit %}\nA very useful field with data containing information about changes to a user, e.g. timestamps when the user subscribed and unsubscribed.\n{% enddocs %}\n\n{% docs voting_plan_status %}\nThe indication of the user's plan to vote, e.g. voting, not_voting, cant_vote\n{% enddocs %}\n\n{% docs voting_plan_time_of_day %}\nThe time of day when the user plans to vote, e.g morning, afternoon, evening\n{% enddocs %}\n\n{% docs voting_plan_method_of_transport %}\nHow the user plans to get to their polling place. e.g. walk, drive\n{% enddocs %}\n\n{% docs voting_plan_attending_with %}\nWith Whom the user plans to go voting, e.g. family, friends, alone\n{% enddocs %}\n\n{% docs feature_flags %}\nJSON containing info on features like badges and refer-a-friend.\n{% enddocs %}\n\n{% docs dbt_updated_at %}\nDBT snapshot table data. The updated_at timestamp of the source record when this snapshot row was inserted.\n{% enddocs %}\n\n{% docs dbt_scd_id %}\nDBT snapshot table data. A unique key generated for each snapshotted record.\n{% enddocs %}\n\n{% docs dbt_valid_from %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this snapshot row was first inserted\n{% enddocs %}\n\n{% docs dbt_valid_to %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this row row became invalidated.\n{% enddocs %}\n\n{% docs google_id %}\nUser's Google ID obtained from login.\n{% enddocs %}\n\n{% docs causes %}\nCauses in which a user is interested. e.g. animal welfare, education, mental_health\n{% enddocs %}\n\n{% docs email_subscription_status %}\nEmail subscription status of the user\n{% enddocs %}\n\n{% docs role %}\nUser's role, e.g. user, staff\n{% enddocs %}\n\n{% docs cio_backfilled %}\nWhether this user's data was backfilled from CIO\n{% enddocs %}\n\n{% docs addr_source %}\nWhere the user submitted their address, e.g. sms, GDPR\n{% enddocs %}\n\n{% docs email_subscription_topics %}\nEmail subscription topics correspond to categories in CIO in which the user is interested. e.g. lifestyle, community, scholarship\n{% enddocs %}\n\n{% docs sms_paused %}\nWhether we've paused sending sms messages to the user.\n{% enddocs %}\n\n\n\n\n", "name": "landing_datetime", "unique_id": "ds_dbt.landing_datetime", "block_contents": "When the session started in UTC (eg. 2018-01-01 12:00:00)"}, "ds_dbt.ending_datetime": {"root_path": "/Users/mrich/projects/quasar/quasar/dbt", "resource_type": "docs", "path": "schema.md", "original_file_path": "models/schema.md", "package_name": "ds_dbt", "file_contents": "\n{% docs click_id %}\nThis is a unique identifier for each click\n{% enddocs %}\n\n{% docs click_time %}\nTimestamp when user clicked.\n{% enddocs %}\n\n{% docs shortened %}\nShortened URL\n{% enddocs %}\n\n{% docs target_url %}\nURL where the user will be directed\n{% enddocs %}\n\n{% docs broadcast_id %}\nID of the broadcast that generated the shortened URL\n{% enddocs %}\n\n{% docs source %}\nSource of the URL (e.g. SMS, web), origin of the post (e.g. phoenix-web, phoenix-ashes, sms), or source where user was acquired. (e.g. sms, phoenix-next)\n{% enddocs %}\n\n{% docs interaction_type %}\nHow the user interacted with the link (e.g. preview, click)\n{% enddocs %}\n\n{% docs id %}\nUnique identifier for the post\n{% enddocs %}\n\n{% docs type %}\nType of post (e.g. photo)\n{% enddocs %}\n\n{% docs action %}\nPost action (e.g. DefendDreamers_Nov9_CongressCalls, GunViolence2018_Feb15_ParklandResponse)\n{% enddocs %}\n\n{% docs status %}\nPost status (e.g. accepted, rejected)\n{% enddocs %}\n\n{% docs quantity %}\nNumerical quantity of items specified in the call to action (e.g. 10, 200)\n{% enddocs %}\n\n{% docs source_bucket %}\nGrouping bucket for origin of the post (e.g. web, sms) \n{% enddocs %}\n\n{% docs created_at %}\nWhen the item was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs updated_at %}\nWhen the item was updated in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs text %}\nText of the post (e.g. \"Zoo animals and a super hero trying to help too!\") \n{% enddocs %}\n\n{% docs signup_id %}\nUnique identifier for the signup \n{% enddocs %}\n\n{% docs post_class %}\nClass of the signup (e.g. \"photo - default\", \"phone-call - DefendDreamers_Jan16_BothBodies\")\n{% enddocs %}\n\n{% docs is_accepted %}\nWhether the post has been accepted to be displayed to the public on the website\n{% enddocs %}\n\n{% docs action_id %}\nInternal identifier of the action \n{% enddocs %}\n\n{% docs location %}\nLocation where the action takes place (e.g. US-NY)\n{% enddocs %}\n\n{% docs postal_code %}\nPostal code where the action takes place\n{% enddocs %}\n\n{% docs is_reportback %}\nWhether the post is a reportback. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs civic_action %}\nWhether the post is a Civic Action. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs scholarship_entry %}\nWhether the post is a Scholarship Entry. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs why_participated %}\nWhy the user participated in this action. Entered by the user.\n{% enddocs %}\n\n{% docs details %}\nDetails about the post. Contains contentfulId and other information (e.g. {\"campaignContentfulId\":\"6ATBgGEQEeJoIcxs1qbwaC\"})\n{% enddocs %}\n\n{% docs email %}\nEmail address of the user.\n{% enddocs %}\n\n{% docs source_details %}\nDetails about the source of the item. This is sometimes represented as a JSON object, and for other tables like Turbovote its represented as a string. (e.g. \"{\"contentful_id\":\"3CTLlXfbwtz1FOMpl31SKV\",\"utm_source\":\"scholarship_listing\",\"utm_medium\":\"referral\",\"utm_campaign\":\"fastweb_2019_08\"}\", newsletter_456)\n{% enddocs %}\n\n{% docs campaign_id %}\nThis is a unique identifier for the campaign\n{% enddocs %}\n\n{% docs campaign_run_id %}\nUnique identifier for the campaign run\n{% enddocs %}\n\n{% docs campaign_name %}\nName of the campaign\n{% enddocs %}\n\n{% docs campaign_cause %}\nCampaign cause (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_run_start_date %}\nStart date of the campaign run\n{% enddocs %}\n\n{% docs campaign_run_end_date %}\nEnd date of the campaign run\n{% enddocs %}\n\n{% docs campaign_created_date %}\nWhen the campaign was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs campaign_node_id %}\nInternal unique node id for the campaign\n{% enddocs %}\n\n{% docs campaign_node_id_title %}\nCampaign title\n{% enddocs %}\n\n{% docs campaign_run_id_title %}\nTitle of the campaign run\n{% enddocs %}\n\n{% docs campaign_action_type %}\nCampaign action type (eg. Make Something, Share Something)\n{% enddocs %}\n\n{% docs campaign_cause_type %}\nCampaign cause type (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_noun %}\nNoun applicable to the user's action\n{% enddocs %}\n\n{% docs campaign_verb %}\nVerb describing the action the user should take\n{% enddocs %}\n\n{% docs campaign_cta %}\nCampaign's call to action\n{% enddocs %}\n\n{% docs campaign_language %}\n\"Language in which the campaign is available\"\n{% enddocs %}\n\n{% docs agent_id %}\nIf set, the content type of the picture the member is sending us. Exp. image/png.\n{% enddocs %}\n\n{% docs attachment_content_type %}\nIf set, the handle of the Front agent this outbound support message is from.\n{% enddocs %}\n\n{% docs topic %}\nHolds a reference to the **last** campaign topic the member's conversation was in. This is useful to allow members to talk to Gambit and get quick responses (through Rivescript), without Gambit completely forgetting what state the member's interaction with a campaign topic was in.\n{% enddocs %}\n\n{% docs action_serial_id %}\nSerial id for the user's action. Depends on the source of the action. May be the bertly click id, sms message id, etc.\n{% enddocs %}\n\n{% docs channel %}\nChannel for the user's action. Depends on the source of the action. (e.g. web, sms)\n{% enddocs %}\n\n{% docs first_action_month %}\nMonth during which the user took their first action. \n{% enddocs %}\n\n{% docs event_id %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs event_source %}\nApplication source for event (eg. Phoenix, Northstar)\n{% enddocs %}\n\n{% docs event_datetime %}\nWhen the event occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs event_name %}\nName of the event (eg. northstar_submitted_register, https://docs.google.com/spreadsheets/d/1lm-fGrIm85nUTxSojqyCt_Ehmm1zEbViFhKpxcJiz1A/edit#gid=406441516)\n{% enddocs %}\n\n{% docs event_type %}\nType of event (pv = 'Page View', se = 'Structured Event')\n{% enddocs %}\n\n{% docs host %}\nURL host where event occurred (eg. www.dosomething.org or identity.dosomething.org)\n{% enddocs %}\n\n{% docs path %}\nURL path event occurred at (eg. /login or /us/campaigns/huddle-for-heroes)\n{% enddocs %}\n\n{% docs query_parameters %}\nOptional query parameters for the request (eg. query=huddle)\n{% enddocs %}\n\n{% docs se_category %}\nCategory of event (eg. focused_field, authentication) - Custom structured event\n{% enddocs %}\n\n{% docs se_action %}\nAction performed / event name (eg. form_submitted, action_failed) - Custom structured event\n{% enddocs %}\n\n{% docs se_label %}\nThe object of the action (eg. first_name, register, voter_reg_status) - Custom structured event\n{% enddocs %}\n\n{% docs session_id %}\nUnique identifier of the user's session\n{% enddocs %}\n\n{% docs session_counter %}\nHow many sessions a user has started\n{% enddocs %}\n\n{% docs browser_size %}\nWhich type of browser a user is using (eg. Mobile, Desktop)\n{% enddocs %}\n\n{% docs northstar_id %}\nThe Northstar ID of the user who generated the event\n{% enddocs %}\n\n{% docs device_id %}\nID of the device used\n{% enddocs %}\n\n{% docs referrer_host %}\nURL host of the referring site (eg. google.com)\n{% enddocs %}\n\n{% docs referrer_path %}\nURL path from referring site (eg. /10-stats-on-teen-drug-and-alcohol-use/)\n{% enddocs %}\n\n{% docs referrer_source %}\nReferrer source name (eg. Google, Facebook)\n{% enddocs %}\n\n{% docs utm_source %}\nTracks where the traffic is coming from. (eg. scholarship_listing, Facebook)\n{% enddocs %}\n\n{% docs utm_medium %}\nHow the traffic got to the platform (eg. referral, CPC)\n{% enddocs %}\n\n{% docs utm_campaign %}\nTracks which campaign the traffic was generated by. Shows up in Google Analytics as Campaign Name (eg. editorial_newsletter)\n{% enddocs %}\n\n{% docs url %}\nURL of campaign (eg. https://dosome.click/nyn5m7)\n{% enddocs %}\n\n{% docs modal_type %}\nNULL or SURVEY_MODAL\n{% enddocs %}\n\n{% docs landing_datetime %}\nWhen the session started in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs ending_datetime %}\nWhen the session ended in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs session_duration_seconds %}\nSession duration in seconds\n{% enddocs %}\n\n{% docs num_pages_views %}\nNumber of pages viewed in session\n{% enddocs %}\n\n{% docs landing_page %}\nFirst page the user viewed in the session (eg. /us/facts/11-facts-about-bp-oil-spill)\n{% enddocs %}\n\n{% docs exit_page %}\n\"Which page the user ended or exited their session from (eg. /us/campaigns/green-your-getaway)\"\n{% enddocs %}\n\n{% docs days_since_last_session %}\n\"Days since their last session.\"\n{% enddocs %}\n\n{% docs post_type %}\nType of post, (e.g. photo, voter-reg)\n{% enddocs %}\n\n{% docs noun %}\nNoun that corresponds to the item in the call to action that was delivered. (e.g. drawings, tweets)\n{% enddocs %}\n\n{% docs verb %}\nVerb corresponding to the action the user took. (e.g. shared, sent, taken)\n{% enddocs %}\n\n{% docs deleted_at %}\nDate time in UTC when a user deleted their post.\n{% enddocs %}\n\n{% docs _fivetran_deleted %}\nMarks rows that were deleted in the source table\n{% enddocs %}\n\n{% docs _fivetran_synced %}\n(UTC timestamp) keeps track of when each row was last successfully synced\n{% enddocs %}\n\n{% docs reportback %}\nWhether the post is a reportback \n{% enddocs %}\n\n{% docs active %}\nWhether the user is active \n{% enddocs %}\n\n{% docs anonymous %}\nWhether the user is anonymous when making the post \n{% enddocs %}\n\n{% docs callpower_campaign_id %}\nUnique ID corresponding to the Callpower campaign. Callpower allows users to record messages for their representatives.\n{% enddocs %}\n\n{% docs quiz %}\nWhether the post is a quiz \n{% enddocs %}\n\n{% docs action_type %}\nType of action the user took. (e.g. share-something, donate-something)\n{% enddocs %}\n\n{% docs online %}\nWhether the action is a online as opposed to IRL.\n{% enddocs %}\n\n{% docs time_commitment %}\nEstimated time required to do the action (e.g. 3.0+, <0.5)\n{% enddocs %}\n\n{% docs num_signups %}\nQuantity of campaign signups\n{% enddocs %}\n\n{% docs most_recent_signup %}\nTimestamp of the most recent signup in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs num_rbs %}\nQuantity of reportbacks for the user\n{% enddocs %}\n\n{% docs total_quantity %}\nTotal quantity of items in reportbacks\n{% enddocs %}\n\n{% docs most_recent_rb %}\nWhen the most recent reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs first_rb %}\nWhen the first reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs avg_time_betw_rbs %}\nCalculated average time between reportbacks.\n{% enddocs %}\n\n{% docs avg_days_next_action_after_rb %}\nCalculated average days until next action after reportback\n{% enddocs %}\n\n{% docs days_to_next_action_after_last_rb %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs most_recent_mam_action %}\nMost recent monthly active member qualifying action in UTC (eg. 2018-01-01 12:00:00).\n{% enddocs %}\n\n{% docs most_recent_email_open %}\nMost recent email open in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs most_recent_all_actions %}\nMost recent timestamp of any action in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs last_action_is_rb %}\nWhether the last action the user took was a reportback\n{% enddocs %}\n\n{% docs days_since_last_action %}\nDays since the user's last action\n{% enddocs %}\n\n{% docs time_to_first_rb %}\nHow much time after registering until the user's first reportback\n{% enddocs %}\n\n{% docs sms_unsubscribed_at %}\nTimestamp of when user unsubscribed from SMS messaging\n{% enddocs %}\n\n{% docs user_unsubscribed_at %}\nTimestamp of when user unsubscribed from email or sms\n{% enddocs %}\n\n{% docs voter_reg_acquisition %}\nWhether the user was an acquisition through voter registration efforts. \n{% enddocs %}\n\n{% docs last_logged_in %}\nDate time in UTC when user last logged in to Northstar\n{% enddocs %}\n\n{% docs last_accessed %}\nDate time in UTC when user last access the website\n{% enddocs %}\n\n{% docs last_messaged_at %}\nDate time in UTC when user was last sent a message via SMS or email\n{% enddocs %}\n\n{% docs facebook_id %}\nUser's facebook id\n{% enddocs %}\n\n{% docs mobile %}\nUsers's mobile phone number\n{% enddocs %}\n\n{% docs birthdate %}\nUser's birthdate\n{% enddocs %}\n\n{% docs first_name %}\nUser's first name\n{% enddocs %}\n\n{% docs last_name %}\nUser's last name\n{% enddocs %}\n\n{% docs voter_registration_status %}\nUser's registration status. (e.g. registration_complete, confirmed, uncertain) \n{% enddocs %}\n\n{% docs finish_with_state %}\nIf the registrant was eligible to use and passed through to complete their registration with their state\u2019s OVR system, it will be indicated in this field (direct quote from Rock-The-Vote documentation). Yes/No value in field.\n{% enddocs %}\n\n{% docs reportback_volume %}\nThis field returns 1 if non voter-reg action, since campaigns team only counts those a 1 reportback. If voter-reg action, we want to count quantity of post as number of registered voters.\n{% enddocs %}\n\n{% docs address_street_1 %}\nFirst line of user's street address\n{% enddocs %}\n\n{% docs address_street_2 %}\nSecond line of user's street address\n{% enddocs %}\n\n{% docs city %}\nUser's city\n{% enddocs %}\n\n{% docs state %}\nUser's state\n{% enddocs %}\n\n{% docs country %}\nUser's country\n{% enddocs %}\n\n{% docs language %}\nUser's language\n{% enddocs %}\n\n{% docs cio_status %}\nStatus of user from CIO. (e.g. customer_subscribed, customer_unsubscribed)\n{% enddocs %}\n\n{% docs cio_status_timestamp %}\nTimestamp when users's status was updated.\n{% enddocs %}\n\n{% docs sms_status %}\nCurrent SMS status. (e.g. undeliverable, unknown)\n{% enddocs %}\n\n{% docs source_detail %}\nDetails of the origin of the user. (e.g. tell_a_friend, other, opt_in_path/197981)\n{% enddocs %}\n\n{% docs badges %}\nWhether the user has any badges. \n{% enddocs %}\n\n{% docs refer_friends %}\nWhether the user is a part of the refer a friend campaign. \n{% enddocs %}\n\n{% docs subscribed_member %}\nWhether the user is subscribed. \n{% enddocs %}\n\n{% docs last_updated_at %}\nTimestamp when users's was updated.\n{% enddocs %}\n\n{% docs school_id %}\nUnique identifier for the user's school. This info comes from the school finder.\n{% enddocs %}\n\n{% docs newsletter_topic %}\nNewsletter topic. (e.g. community, lifestyle)\n{% enddocs %}\n\n{% docs user_agent %}\nFull user agent string for a user's browser (e.g. \"Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:24.0) Gecko/20100101 Firefox/24.0\")\n{% enddocs %}\n\n{% docs drupal_id %}\nOld Drupal user ID\n{% enddocs %}\n\n{% docs campaigns %}\nCampaigns a user is signed up for.\n{% enddocs %}\n\n{% docs audit %}\nA very useful field with data containing information about changes to a user, e.g. timestamps when the user subscribed and unsubscribed.\n{% enddocs %}\n\n{% docs voting_plan_status %}\nThe indication of the user's plan to vote, e.g. voting, not_voting, cant_vote\n{% enddocs %}\n\n{% docs voting_plan_time_of_day %}\nThe time of day when the user plans to vote, e.g morning, afternoon, evening\n{% enddocs %}\n\n{% docs voting_plan_method_of_transport %}\nHow the user plans to get to their polling place. e.g. walk, drive\n{% enddocs %}\n\n{% docs voting_plan_attending_with %}\nWith Whom the user plans to go voting, e.g. family, friends, alone\n{% enddocs %}\n\n{% docs feature_flags %}\nJSON containing info on features like badges and refer-a-friend.\n{% enddocs %}\n\n{% docs dbt_updated_at %}\nDBT snapshot table data. The updated_at timestamp of the source record when this snapshot row was inserted.\n{% enddocs %}\n\n{% docs dbt_scd_id %}\nDBT snapshot table data. A unique key generated for each snapshotted record.\n{% enddocs %}\n\n{% docs dbt_valid_from %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this snapshot row was first inserted\n{% enddocs %}\n\n{% docs dbt_valid_to %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this row row became invalidated.\n{% enddocs %}\n\n{% docs google_id %}\nUser's Google ID obtained from login.\n{% enddocs %}\n\n{% docs causes %}\nCauses in which a user is interested. e.g. animal welfare, education, mental_health\n{% enddocs %}\n\n{% docs email_subscription_status %}\nEmail subscription status of the user\n{% enddocs %}\n\n{% docs role %}\nUser's role, e.g. user, staff\n{% enddocs %}\n\n{% docs cio_backfilled %}\nWhether this user's data was backfilled from CIO\n{% enddocs %}\n\n{% docs addr_source %}\nWhere the user submitted their address, e.g. sms, GDPR\n{% enddocs %}\n\n{% docs email_subscription_topics %}\nEmail subscription topics correspond to categories in CIO in which the user is interested. e.g. lifestyle, community, scholarship\n{% enddocs %}\n\n{% docs sms_paused %}\nWhether we've paused sending sms messages to the user.\n{% enddocs %}\n\n\n\n\n", "name": "ending_datetime", "unique_id": "ds_dbt.ending_datetime", "block_contents": "When the session ended in UTC (eg. 2018-01-01 12:00:00)"}, "ds_dbt.session_duration_seconds": {"root_path": "/Users/mrich/projects/quasar/quasar/dbt", "resource_type": "docs", "path": "schema.md", "original_file_path": "models/schema.md", "package_name": "ds_dbt", "file_contents": "\n{% docs click_id %}\nThis is a unique identifier for each click\n{% enddocs %}\n\n{% docs click_time %}\nTimestamp when user clicked.\n{% enddocs %}\n\n{% docs shortened %}\nShortened URL\n{% enddocs %}\n\n{% docs target_url %}\nURL where the user will be directed\n{% enddocs %}\n\n{% docs broadcast_id %}\nID of the broadcast that generated the shortened URL\n{% enddocs %}\n\n{% docs source %}\nSource of the URL (e.g. SMS, web), origin of the post (e.g. phoenix-web, phoenix-ashes, sms), or source where user was acquired. (e.g. sms, phoenix-next)\n{% enddocs %}\n\n{% docs interaction_type %}\nHow the user interacted with the link (e.g. preview, click)\n{% enddocs %}\n\n{% docs id %}\nUnique identifier for the post\n{% enddocs %}\n\n{% docs type %}\nType of post (e.g. photo)\n{% enddocs %}\n\n{% docs action %}\nPost action (e.g. DefendDreamers_Nov9_CongressCalls, GunViolence2018_Feb15_ParklandResponse)\n{% enddocs %}\n\n{% docs status %}\nPost status (e.g. accepted, rejected)\n{% enddocs %}\n\n{% docs quantity %}\nNumerical quantity of items specified in the call to action (e.g. 10, 200)\n{% enddocs %}\n\n{% docs source_bucket %}\nGrouping bucket for origin of the post (e.g. web, sms) \n{% enddocs %}\n\n{% docs created_at %}\nWhen the item was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs updated_at %}\nWhen the item was updated in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs text %}\nText of the post (e.g. \"Zoo animals and a super hero trying to help too!\") \n{% enddocs %}\n\n{% docs signup_id %}\nUnique identifier for the signup \n{% enddocs %}\n\n{% docs post_class %}\nClass of the signup (e.g. \"photo - default\", \"phone-call - DefendDreamers_Jan16_BothBodies\")\n{% enddocs %}\n\n{% docs is_accepted %}\nWhether the post has been accepted to be displayed to the public on the website\n{% enddocs %}\n\n{% docs action_id %}\nInternal identifier of the action \n{% enddocs %}\n\n{% docs location %}\nLocation where the action takes place (e.g. US-NY)\n{% enddocs %}\n\n{% docs postal_code %}\nPostal code where the action takes place\n{% enddocs %}\n\n{% docs is_reportback %}\nWhether the post is a reportback. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs civic_action %}\nWhether the post is a Civic Action. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs scholarship_entry %}\nWhether the post is a Scholarship Entry. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs why_participated %}\nWhy the user participated in this action. Entered by the user.\n{% enddocs %}\n\n{% docs details %}\nDetails about the post. Contains contentfulId and other information (e.g. {\"campaignContentfulId\":\"6ATBgGEQEeJoIcxs1qbwaC\"})\n{% enddocs %}\n\n{% docs email %}\nEmail address of the user.\n{% enddocs %}\n\n{% docs source_details %}\nDetails about the source of the item. This is sometimes represented as a JSON object, and for other tables like Turbovote its represented as a string. (e.g. \"{\"contentful_id\":\"3CTLlXfbwtz1FOMpl31SKV\",\"utm_source\":\"scholarship_listing\",\"utm_medium\":\"referral\",\"utm_campaign\":\"fastweb_2019_08\"}\", newsletter_456)\n{% enddocs %}\n\n{% docs campaign_id %}\nThis is a unique identifier for the campaign\n{% enddocs %}\n\n{% docs campaign_run_id %}\nUnique identifier for the campaign run\n{% enddocs %}\n\n{% docs campaign_name %}\nName of the campaign\n{% enddocs %}\n\n{% docs campaign_cause %}\nCampaign cause (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_run_start_date %}\nStart date of the campaign run\n{% enddocs %}\n\n{% docs campaign_run_end_date %}\nEnd date of the campaign run\n{% enddocs %}\n\n{% docs campaign_created_date %}\nWhen the campaign was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs campaign_node_id %}\nInternal unique node id for the campaign\n{% enddocs %}\n\n{% docs campaign_node_id_title %}\nCampaign title\n{% enddocs %}\n\n{% docs campaign_run_id_title %}\nTitle of the campaign run\n{% enddocs %}\n\n{% docs campaign_action_type %}\nCampaign action type (eg. Make Something, Share Something)\n{% enddocs %}\n\n{% docs campaign_cause_type %}\nCampaign cause type (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_noun %}\nNoun applicable to the user's action\n{% enddocs %}\n\n{% docs campaign_verb %}\nVerb describing the action the user should take\n{% enddocs %}\n\n{% docs campaign_cta %}\nCampaign's call to action\n{% enddocs %}\n\n{% docs campaign_language %}\n\"Language in which the campaign is available\"\n{% enddocs %}\n\n{% docs agent_id %}\nIf set, the content type of the picture the member is sending us. Exp. image/png.\n{% enddocs %}\n\n{% docs attachment_content_type %}\nIf set, the handle of the Front agent this outbound support message is from.\n{% enddocs %}\n\n{% docs topic %}\nHolds a reference to the **last** campaign topic the member's conversation was in. This is useful to allow members to talk to Gambit and get quick responses (through Rivescript), without Gambit completely forgetting what state the member's interaction with a campaign topic was in.\n{% enddocs %}\n\n{% docs action_serial_id %}\nSerial id for the user's action. Depends on the source of the action. May be the bertly click id, sms message id, etc.\n{% enddocs %}\n\n{% docs channel %}\nChannel for the user's action. Depends on the source of the action. (e.g. web, sms)\n{% enddocs %}\n\n{% docs first_action_month %}\nMonth during which the user took their first action. \n{% enddocs %}\n\n{% docs event_id %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs event_source %}\nApplication source for event (eg. Phoenix, Northstar)\n{% enddocs %}\n\n{% docs event_datetime %}\nWhen the event occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs event_name %}\nName of the event (eg. northstar_submitted_register, https://docs.google.com/spreadsheets/d/1lm-fGrIm85nUTxSojqyCt_Ehmm1zEbViFhKpxcJiz1A/edit#gid=406441516)\n{% enddocs %}\n\n{% docs event_type %}\nType of event (pv = 'Page View', se = 'Structured Event')\n{% enddocs %}\n\n{% docs host %}\nURL host where event occurred (eg. www.dosomething.org or identity.dosomething.org)\n{% enddocs %}\n\n{% docs path %}\nURL path event occurred at (eg. /login or /us/campaigns/huddle-for-heroes)\n{% enddocs %}\n\n{% docs query_parameters %}\nOptional query parameters for the request (eg. query=huddle)\n{% enddocs %}\n\n{% docs se_category %}\nCategory of event (eg. focused_field, authentication) - Custom structured event\n{% enddocs %}\n\n{% docs se_action %}\nAction performed / event name (eg. form_submitted, action_failed) - Custom structured event\n{% enddocs %}\n\n{% docs se_label %}\nThe object of the action (eg. first_name, register, voter_reg_status) - Custom structured event\n{% enddocs %}\n\n{% docs session_id %}\nUnique identifier of the user's session\n{% enddocs %}\n\n{% docs session_counter %}\nHow many sessions a user has started\n{% enddocs %}\n\n{% docs browser_size %}\nWhich type of browser a user is using (eg. Mobile, Desktop)\n{% enddocs %}\n\n{% docs northstar_id %}\nThe Northstar ID of the user who generated the event\n{% enddocs %}\n\n{% docs device_id %}\nID of the device used\n{% enddocs %}\n\n{% docs referrer_host %}\nURL host of the referring site (eg. google.com)\n{% enddocs %}\n\n{% docs referrer_path %}\nURL path from referring site (eg. /10-stats-on-teen-drug-and-alcohol-use/)\n{% enddocs %}\n\n{% docs referrer_source %}\nReferrer source name (eg. Google, Facebook)\n{% enddocs %}\n\n{% docs utm_source %}\nTracks where the traffic is coming from. (eg. scholarship_listing, Facebook)\n{% enddocs %}\n\n{% docs utm_medium %}\nHow the traffic got to the platform (eg. referral, CPC)\n{% enddocs %}\n\n{% docs utm_campaign %}\nTracks which campaign the traffic was generated by. Shows up in Google Analytics as Campaign Name (eg. editorial_newsletter)\n{% enddocs %}\n\n{% docs url %}\nURL of campaign (eg. https://dosome.click/nyn5m7)\n{% enddocs %}\n\n{% docs modal_type %}\nNULL or SURVEY_MODAL\n{% enddocs %}\n\n{% docs landing_datetime %}\nWhen the session started in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs ending_datetime %}\nWhen the session ended in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs session_duration_seconds %}\nSession duration in seconds\n{% enddocs %}\n\n{% docs num_pages_views %}\nNumber of pages viewed in session\n{% enddocs %}\n\n{% docs landing_page %}\nFirst page the user viewed in the session (eg. /us/facts/11-facts-about-bp-oil-spill)\n{% enddocs %}\n\n{% docs exit_page %}\n\"Which page the user ended or exited their session from (eg. /us/campaigns/green-your-getaway)\"\n{% enddocs %}\n\n{% docs days_since_last_session %}\n\"Days since their last session.\"\n{% enddocs %}\n\n{% docs post_type %}\nType of post, (e.g. photo, voter-reg)\n{% enddocs %}\n\n{% docs noun %}\nNoun that corresponds to the item in the call to action that was delivered. (e.g. drawings, tweets)\n{% enddocs %}\n\n{% docs verb %}\nVerb corresponding to the action the user took. (e.g. shared, sent, taken)\n{% enddocs %}\n\n{% docs deleted_at %}\nDate time in UTC when a user deleted their post.\n{% enddocs %}\n\n{% docs _fivetran_deleted %}\nMarks rows that were deleted in the source table\n{% enddocs %}\n\n{% docs _fivetran_synced %}\n(UTC timestamp) keeps track of when each row was last successfully synced\n{% enddocs %}\n\n{% docs reportback %}\nWhether the post is a reportback \n{% enddocs %}\n\n{% docs active %}\nWhether the user is active \n{% enddocs %}\n\n{% docs anonymous %}\nWhether the user is anonymous when making the post \n{% enddocs %}\n\n{% docs callpower_campaign_id %}\nUnique ID corresponding to the Callpower campaign. Callpower allows users to record messages for their representatives.\n{% enddocs %}\n\n{% docs quiz %}\nWhether the post is a quiz \n{% enddocs %}\n\n{% docs action_type %}\nType of action the user took. (e.g. share-something, donate-something)\n{% enddocs %}\n\n{% docs online %}\nWhether the action is a online as opposed to IRL.\n{% enddocs %}\n\n{% docs time_commitment %}\nEstimated time required to do the action (e.g. 3.0+, <0.5)\n{% enddocs %}\n\n{% docs num_signups %}\nQuantity of campaign signups\n{% enddocs %}\n\n{% docs most_recent_signup %}\nTimestamp of the most recent signup in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs num_rbs %}\nQuantity of reportbacks for the user\n{% enddocs %}\n\n{% docs total_quantity %}\nTotal quantity of items in reportbacks\n{% enddocs %}\n\n{% docs most_recent_rb %}\nWhen the most recent reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs first_rb %}\nWhen the first reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs avg_time_betw_rbs %}\nCalculated average time between reportbacks.\n{% enddocs %}\n\n{% docs avg_days_next_action_after_rb %}\nCalculated average days until next action after reportback\n{% enddocs %}\n\n{% docs days_to_next_action_after_last_rb %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs most_recent_mam_action %}\nMost recent monthly active member qualifying action in UTC (eg. 2018-01-01 12:00:00).\n{% enddocs %}\n\n{% docs most_recent_email_open %}\nMost recent email open in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs most_recent_all_actions %}\nMost recent timestamp of any action in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs last_action_is_rb %}\nWhether the last action the user took was a reportback\n{% enddocs %}\n\n{% docs days_since_last_action %}\nDays since the user's last action\n{% enddocs %}\n\n{% docs time_to_first_rb %}\nHow much time after registering until the user's first reportback\n{% enddocs %}\n\n{% docs sms_unsubscribed_at %}\nTimestamp of when user unsubscribed from SMS messaging\n{% enddocs %}\n\n{% docs user_unsubscribed_at %}\nTimestamp of when user unsubscribed from email or sms\n{% enddocs %}\n\n{% docs voter_reg_acquisition %}\nWhether the user was an acquisition through voter registration efforts. \n{% enddocs %}\n\n{% docs last_logged_in %}\nDate time in UTC when user last logged in to Northstar\n{% enddocs %}\n\n{% docs last_accessed %}\nDate time in UTC when user last access the website\n{% enddocs %}\n\n{% docs last_messaged_at %}\nDate time in UTC when user was last sent a message via SMS or email\n{% enddocs %}\n\n{% docs facebook_id %}\nUser's facebook id\n{% enddocs %}\n\n{% docs mobile %}\nUsers's mobile phone number\n{% enddocs %}\n\n{% docs birthdate %}\nUser's birthdate\n{% enddocs %}\n\n{% docs first_name %}\nUser's first name\n{% enddocs %}\n\n{% docs last_name %}\nUser's last name\n{% enddocs %}\n\n{% docs voter_registration_status %}\nUser's registration status. (e.g. registration_complete, confirmed, uncertain) \n{% enddocs %}\n\n{% docs finish_with_state %}\nIf the registrant was eligible to use and passed through to complete their registration with their state\u2019s OVR system, it will be indicated in this field (direct quote from Rock-The-Vote documentation). Yes/No value in field.\n{% enddocs %}\n\n{% docs reportback_volume %}\nThis field returns 1 if non voter-reg action, since campaigns team only counts those a 1 reportback. If voter-reg action, we want to count quantity of post as number of registered voters.\n{% enddocs %}\n\n{% docs address_street_1 %}\nFirst line of user's street address\n{% enddocs %}\n\n{% docs address_street_2 %}\nSecond line of user's street address\n{% enddocs %}\n\n{% docs city %}\nUser's city\n{% enddocs %}\n\n{% docs state %}\nUser's state\n{% enddocs %}\n\n{% docs country %}\nUser's country\n{% enddocs %}\n\n{% docs language %}\nUser's language\n{% enddocs %}\n\n{% docs cio_status %}\nStatus of user from CIO. (e.g. customer_subscribed, customer_unsubscribed)\n{% enddocs %}\n\n{% docs cio_status_timestamp %}\nTimestamp when users's status was updated.\n{% enddocs %}\n\n{% docs sms_status %}\nCurrent SMS status. (e.g. undeliverable, unknown)\n{% enddocs %}\n\n{% docs source_detail %}\nDetails of the origin of the user. (e.g. tell_a_friend, other, opt_in_path/197981)\n{% enddocs %}\n\n{% docs badges %}\nWhether the user has any badges. \n{% enddocs %}\n\n{% docs refer_friends %}\nWhether the user is a part of the refer a friend campaign. \n{% enddocs %}\n\n{% docs subscribed_member %}\nWhether the user is subscribed. \n{% enddocs %}\n\n{% docs last_updated_at %}\nTimestamp when users's was updated.\n{% enddocs %}\n\n{% docs school_id %}\nUnique identifier for the user's school. This info comes from the school finder.\n{% enddocs %}\n\n{% docs newsletter_topic %}\nNewsletter topic. (e.g. community, lifestyle)\n{% enddocs %}\n\n{% docs user_agent %}\nFull user agent string for a user's browser (e.g. \"Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:24.0) Gecko/20100101 Firefox/24.0\")\n{% enddocs %}\n\n{% docs drupal_id %}\nOld Drupal user ID\n{% enddocs %}\n\n{% docs campaigns %}\nCampaigns a user is signed up for.\n{% enddocs %}\n\n{% docs audit %}\nA very useful field with data containing information about changes to a user, e.g. timestamps when the user subscribed and unsubscribed.\n{% enddocs %}\n\n{% docs voting_plan_status %}\nThe indication of the user's plan to vote, e.g. voting, not_voting, cant_vote\n{% enddocs %}\n\n{% docs voting_plan_time_of_day %}\nThe time of day when the user plans to vote, e.g morning, afternoon, evening\n{% enddocs %}\n\n{% docs voting_plan_method_of_transport %}\nHow the user plans to get to their polling place. e.g. walk, drive\n{% enddocs %}\n\n{% docs voting_plan_attending_with %}\nWith Whom the user plans to go voting, e.g. family, friends, alone\n{% enddocs %}\n\n{% docs feature_flags %}\nJSON containing info on features like badges and refer-a-friend.\n{% enddocs %}\n\n{% docs dbt_updated_at %}\nDBT snapshot table data. The updated_at timestamp of the source record when this snapshot row was inserted.\n{% enddocs %}\n\n{% docs dbt_scd_id %}\nDBT snapshot table data. A unique key generated for each snapshotted record.\n{% enddocs %}\n\n{% docs dbt_valid_from %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this snapshot row was first inserted\n{% enddocs %}\n\n{% docs dbt_valid_to %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this row row became invalidated.\n{% enddocs %}\n\n{% docs google_id %}\nUser's Google ID obtained from login.\n{% enddocs %}\n\n{% docs causes %}\nCauses in which a user is interested. e.g. animal welfare, education, mental_health\n{% enddocs %}\n\n{% docs email_subscription_status %}\nEmail subscription status of the user\n{% enddocs %}\n\n{% docs role %}\nUser's role, e.g. user, staff\n{% enddocs %}\n\n{% docs cio_backfilled %}\nWhether this user's data was backfilled from CIO\n{% enddocs %}\n\n{% docs addr_source %}\nWhere the user submitted their address, e.g. sms, GDPR\n{% enddocs %}\n\n{% docs email_subscription_topics %}\nEmail subscription topics correspond to categories in CIO in which the user is interested. e.g. lifestyle, community, scholarship\n{% enddocs %}\n\n{% docs sms_paused %}\nWhether we've paused sending sms messages to the user.\n{% enddocs %}\n\n\n\n\n", "name": "session_duration_seconds", "unique_id": "ds_dbt.session_duration_seconds", "block_contents": "Session duration in seconds"}, "ds_dbt.num_pages_views": {"root_path": "/Users/mrich/projects/quasar/quasar/dbt", "resource_type": "docs", "path": "schema.md", "original_file_path": "models/schema.md", "package_name": "ds_dbt", "file_contents": "\n{% docs click_id %}\nThis is a unique identifier for each click\n{% enddocs %}\n\n{% docs click_time %}\nTimestamp when user clicked.\n{% enddocs %}\n\n{% docs shortened %}\nShortened URL\n{% enddocs %}\n\n{% docs target_url %}\nURL where the user will be directed\n{% enddocs %}\n\n{% docs broadcast_id %}\nID of the broadcast that generated the shortened URL\n{% enddocs %}\n\n{% docs source %}\nSource of the URL (e.g. SMS, web), origin of the post (e.g. phoenix-web, phoenix-ashes, sms), or source where user was acquired. (e.g. sms, phoenix-next)\n{% enddocs %}\n\n{% docs interaction_type %}\nHow the user interacted with the link (e.g. preview, click)\n{% enddocs %}\n\n{% docs id %}\nUnique identifier for the post\n{% enddocs %}\n\n{% docs type %}\nType of post (e.g. photo)\n{% enddocs %}\n\n{% docs action %}\nPost action (e.g. DefendDreamers_Nov9_CongressCalls, GunViolence2018_Feb15_ParklandResponse)\n{% enddocs %}\n\n{% docs status %}\nPost status (e.g. accepted, rejected)\n{% enddocs %}\n\n{% docs quantity %}\nNumerical quantity of items specified in the call to action (e.g. 10, 200)\n{% enddocs %}\n\n{% docs source_bucket %}\nGrouping bucket for origin of the post (e.g. web, sms) \n{% enddocs %}\n\n{% docs created_at %}\nWhen the item was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs updated_at %}\nWhen the item was updated in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs text %}\nText of the post (e.g. \"Zoo animals and a super hero trying to help too!\") \n{% enddocs %}\n\n{% docs signup_id %}\nUnique identifier for the signup \n{% enddocs %}\n\n{% docs post_class %}\nClass of the signup (e.g. \"photo - default\", \"phone-call - DefendDreamers_Jan16_BothBodies\")\n{% enddocs %}\n\n{% docs is_accepted %}\nWhether the post has been accepted to be displayed to the public on the website\n{% enddocs %}\n\n{% docs action_id %}\nInternal identifier of the action \n{% enddocs %}\n\n{% docs location %}\nLocation where the action takes place (e.g. US-NY)\n{% enddocs %}\n\n{% docs postal_code %}\nPostal code where the action takes place\n{% enddocs %}\n\n{% docs is_reportback %}\nWhether the post is a reportback. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs civic_action %}\nWhether the post is a Civic Action. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs scholarship_entry %}\nWhether the post is a Scholarship Entry. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs why_participated %}\nWhy the user participated in this action. Entered by the user.\n{% enddocs %}\n\n{% docs details %}\nDetails about the post. Contains contentfulId and other information (e.g. {\"campaignContentfulId\":\"6ATBgGEQEeJoIcxs1qbwaC\"})\n{% enddocs %}\n\n{% docs email %}\nEmail address of the user.\n{% enddocs %}\n\n{% docs source_details %}\nDetails about the source of the item. This is sometimes represented as a JSON object, and for other tables like Turbovote its represented as a string. (e.g. \"{\"contentful_id\":\"3CTLlXfbwtz1FOMpl31SKV\",\"utm_source\":\"scholarship_listing\",\"utm_medium\":\"referral\",\"utm_campaign\":\"fastweb_2019_08\"}\", newsletter_456)\n{% enddocs %}\n\n{% docs campaign_id %}\nThis is a unique identifier for the campaign\n{% enddocs %}\n\n{% docs campaign_run_id %}\nUnique identifier for the campaign run\n{% enddocs %}\n\n{% docs campaign_name %}\nName of the campaign\n{% enddocs %}\n\n{% docs campaign_cause %}\nCampaign cause (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_run_start_date %}\nStart date of the campaign run\n{% enddocs %}\n\n{% docs campaign_run_end_date %}\nEnd date of the campaign run\n{% enddocs %}\n\n{% docs campaign_created_date %}\nWhen the campaign was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs campaign_node_id %}\nInternal unique node id for the campaign\n{% enddocs %}\n\n{% docs campaign_node_id_title %}\nCampaign title\n{% enddocs %}\n\n{% docs campaign_run_id_title %}\nTitle of the campaign run\n{% enddocs %}\n\n{% docs campaign_action_type %}\nCampaign action type (eg. Make Something, Share Something)\n{% enddocs %}\n\n{% docs campaign_cause_type %}\nCampaign cause type (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_noun %}\nNoun applicable to the user's action\n{% enddocs %}\n\n{% docs campaign_verb %}\nVerb describing the action the user should take\n{% enddocs %}\n\n{% docs campaign_cta %}\nCampaign's call to action\n{% enddocs %}\n\n{% docs campaign_language %}\n\"Language in which the campaign is available\"\n{% enddocs %}\n\n{% docs agent_id %}\nIf set, the content type of the picture the member is sending us. Exp. image/png.\n{% enddocs %}\n\n{% docs attachment_content_type %}\nIf set, the handle of the Front agent this outbound support message is from.\n{% enddocs %}\n\n{% docs topic %}\nHolds a reference to the **last** campaign topic the member's conversation was in. This is useful to allow members to talk to Gambit and get quick responses (through Rivescript), without Gambit completely forgetting what state the member's interaction with a campaign topic was in.\n{% enddocs %}\n\n{% docs action_serial_id %}\nSerial id for the user's action. Depends on the source of the action. May be the bertly click id, sms message id, etc.\n{% enddocs %}\n\n{% docs channel %}\nChannel for the user's action. Depends on the source of the action. (e.g. web, sms)\n{% enddocs %}\n\n{% docs first_action_month %}\nMonth during which the user took their first action. \n{% enddocs %}\n\n{% docs event_id %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs event_source %}\nApplication source for event (eg. Phoenix, Northstar)\n{% enddocs %}\n\n{% docs event_datetime %}\nWhen the event occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs event_name %}\nName of the event (eg. northstar_submitted_register, https://docs.google.com/spreadsheets/d/1lm-fGrIm85nUTxSojqyCt_Ehmm1zEbViFhKpxcJiz1A/edit#gid=406441516)\n{% enddocs %}\n\n{% docs event_type %}\nType of event (pv = 'Page View', se = 'Structured Event')\n{% enddocs %}\n\n{% docs host %}\nURL host where event occurred (eg. www.dosomething.org or identity.dosomething.org)\n{% enddocs %}\n\n{% docs path %}\nURL path event occurred at (eg. /login or /us/campaigns/huddle-for-heroes)\n{% enddocs %}\n\n{% docs query_parameters %}\nOptional query parameters for the request (eg. query=huddle)\n{% enddocs %}\n\n{% docs se_category %}\nCategory of event (eg. focused_field, authentication) - Custom structured event\n{% enddocs %}\n\n{% docs se_action %}\nAction performed / event name (eg. form_submitted, action_failed) - Custom structured event\n{% enddocs %}\n\n{% docs se_label %}\nThe object of the action (eg. first_name, register, voter_reg_status) - Custom structured event\n{% enddocs %}\n\n{% docs session_id %}\nUnique identifier of the user's session\n{% enddocs %}\n\n{% docs session_counter %}\nHow many sessions a user has started\n{% enddocs %}\n\n{% docs browser_size %}\nWhich type of browser a user is using (eg. Mobile, Desktop)\n{% enddocs %}\n\n{% docs northstar_id %}\nThe Northstar ID of the user who generated the event\n{% enddocs %}\n\n{% docs device_id %}\nID of the device used\n{% enddocs %}\n\n{% docs referrer_host %}\nURL host of the referring site (eg. google.com)\n{% enddocs %}\n\n{% docs referrer_path %}\nURL path from referring site (eg. /10-stats-on-teen-drug-and-alcohol-use/)\n{% enddocs %}\n\n{% docs referrer_source %}\nReferrer source name (eg. Google, Facebook)\n{% enddocs %}\n\n{% docs utm_source %}\nTracks where the traffic is coming from. (eg. scholarship_listing, Facebook)\n{% enddocs %}\n\n{% docs utm_medium %}\nHow the traffic got to the platform (eg. referral, CPC)\n{% enddocs %}\n\n{% docs utm_campaign %}\nTracks which campaign the traffic was generated by. Shows up in Google Analytics as Campaign Name (eg. editorial_newsletter)\n{% enddocs %}\n\n{% docs url %}\nURL of campaign (eg. https://dosome.click/nyn5m7)\n{% enddocs %}\n\n{% docs modal_type %}\nNULL or SURVEY_MODAL\n{% enddocs %}\n\n{% docs landing_datetime %}\nWhen the session started in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs ending_datetime %}\nWhen the session ended in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs session_duration_seconds %}\nSession duration in seconds\n{% enddocs %}\n\n{% docs num_pages_views %}\nNumber of pages viewed in session\n{% enddocs %}\n\n{% docs landing_page %}\nFirst page the user viewed in the session (eg. /us/facts/11-facts-about-bp-oil-spill)\n{% enddocs %}\n\n{% docs exit_page %}\n\"Which page the user ended or exited their session from (eg. /us/campaigns/green-your-getaway)\"\n{% enddocs %}\n\n{% docs days_since_last_session %}\n\"Days since their last session.\"\n{% enddocs %}\n\n{% docs post_type %}\nType of post, (e.g. photo, voter-reg)\n{% enddocs %}\n\n{% docs noun %}\nNoun that corresponds to the item in the call to action that was delivered. (e.g. drawings, tweets)\n{% enddocs %}\n\n{% docs verb %}\nVerb corresponding to the action the user took. (e.g. shared, sent, taken)\n{% enddocs %}\n\n{% docs deleted_at %}\nDate time in UTC when a user deleted their post.\n{% enddocs %}\n\n{% docs _fivetran_deleted %}\nMarks rows that were deleted in the source table\n{% enddocs %}\n\n{% docs _fivetran_synced %}\n(UTC timestamp) keeps track of when each row was last successfully synced\n{% enddocs %}\n\n{% docs reportback %}\nWhether the post is a reportback \n{% enddocs %}\n\n{% docs active %}\nWhether the user is active \n{% enddocs %}\n\n{% docs anonymous %}\nWhether the user is anonymous when making the post \n{% enddocs %}\n\n{% docs callpower_campaign_id %}\nUnique ID corresponding to the Callpower campaign. Callpower allows users to record messages for their representatives.\n{% enddocs %}\n\n{% docs quiz %}\nWhether the post is a quiz \n{% enddocs %}\n\n{% docs action_type %}\nType of action the user took. (e.g. share-something, donate-something)\n{% enddocs %}\n\n{% docs online %}\nWhether the action is a online as opposed to IRL.\n{% enddocs %}\n\n{% docs time_commitment %}\nEstimated time required to do the action (e.g. 3.0+, <0.5)\n{% enddocs %}\n\n{% docs num_signups %}\nQuantity of campaign signups\n{% enddocs %}\n\n{% docs most_recent_signup %}\nTimestamp of the most recent signup in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs num_rbs %}\nQuantity of reportbacks for the user\n{% enddocs %}\n\n{% docs total_quantity %}\nTotal quantity of items in reportbacks\n{% enddocs %}\n\n{% docs most_recent_rb %}\nWhen the most recent reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs first_rb %}\nWhen the first reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs avg_time_betw_rbs %}\nCalculated average time between reportbacks.\n{% enddocs %}\n\n{% docs avg_days_next_action_after_rb %}\nCalculated average days until next action after reportback\n{% enddocs %}\n\n{% docs days_to_next_action_after_last_rb %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs most_recent_mam_action %}\nMost recent monthly active member qualifying action in UTC (eg. 2018-01-01 12:00:00).\n{% enddocs %}\n\n{% docs most_recent_email_open %}\nMost recent email open in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs most_recent_all_actions %}\nMost recent timestamp of any action in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs last_action_is_rb %}\nWhether the last action the user took was a reportback\n{% enddocs %}\n\n{% docs days_since_last_action %}\nDays since the user's last action\n{% enddocs %}\n\n{% docs time_to_first_rb %}\nHow much time after registering until the user's first reportback\n{% enddocs %}\n\n{% docs sms_unsubscribed_at %}\nTimestamp of when user unsubscribed from SMS messaging\n{% enddocs %}\n\n{% docs user_unsubscribed_at %}\nTimestamp of when user unsubscribed from email or sms\n{% enddocs %}\n\n{% docs voter_reg_acquisition %}\nWhether the user was an acquisition through voter registration efforts. \n{% enddocs %}\n\n{% docs last_logged_in %}\nDate time in UTC when user last logged in to Northstar\n{% enddocs %}\n\n{% docs last_accessed %}\nDate time in UTC when user last access the website\n{% enddocs %}\n\n{% docs last_messaged_at %}\nDate time in UTC when user was last sent a message via SMS or email\n{% enddocs %}\n\n{% docs facebook_id %}\nUser's facebook id\n{% enddocs %}\n\n{% docs mobile %}\nUsers's mobile phone number\n{% enddocs %}\n\n{% docs birthdate %}\nUser's birthdate\n{% enddocs %}\n\n{% docs first_name %}\nUser's first name\n{% enddocs %}\n\n{% docs last_name %}\nUser's last name\n{% enddocs %}\n\n{% docs voter_registration_status %}\nUser's registration status. (e.g. registration_complete, confirmed, uncertain) \n{% enddocs %}\n\n{% docs finish_with_state %}\nIf the registrant was eligible to use and passed through to complete their registration with their state\u2019s OVR system, it will be indicated in this field (direct quote from Rock-The-Vote documentation). Yes/No value in field.\n{% enddocs %}\n\n{% docs reportback_volume %}\nThis field returns 1 if non voter-reg action, since campaigns team only counts those a 1 reportback. If voter-reg action, we want to count quantity of post as number of registered voters.\n{% enddocs %}\n\n{% docs address_street_1 %}\nFirst line of user's street address\n{% enddocs %}\n\n{% docs address_street_2 %}\nSecond line of user's street address\n{% enddocs %}\n\n{% docs city %}\nUser's city\n{% enddocs %}\n\n{% docs state %}\nUser's state\n{% enddocs %}\n\n{% docs country %}\nUser's country\n{% enddocs %}\n\n{% docs language %}\nUser's language\n{% enddocs %}\n\n{% docs cio_status %}\nStatus of user from CIO. (e.g. customer_subscribed, customer_unsubscribed)\n{% enddocs %}\n\n{% docs cio_status_timestamp %}\nTimestamp when users's status was updated.\n{% enddocs %}\n\n{% docs sms_status %}\nCurrent SMS status. (e.g. undeliverable, unknown)\n{% enddocs %}\n\n{% docs source_detail %}\nDetails of the origin of the user. (e.g. tell_a_friend, other, opt_in_path/197981)\n{% enddocs %}\n\n{% docs badges %}\nWhether the user has any badges. \n{% enddocs %}\n\n{% docs refer_friends %}\nWhether the user is a part of the refer a friend campaign. \n{% enddocs %}\n\n{% docs subscribed_member %}\nWhether the user is subscribed. \n{% enddocs %}\n\n{% docs last_updated_at %}\nTimestamp when users's was updated.\n{% enddocs %}\n\n{% docs school_id %}\nUnique identifier for the user's school. This info comes from the school finder.\n{% enddocs %}\n\n{% docs newsletter_topic %}\nNewsletter topic. (e.g. community, lifestyle)\n{% enddocs %}\n\n{% docs user_agent %}\nFull user agent string for a user's browser (e.g. \"Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:24.0) Gecko/20100101 Firefox/24.0\")\n{% enddocs %}\n\n{% docs drupal_id %}\nOld Drupal user ID\n{% enddocs %}\n\n{% docs campaigns %}\nCampaigns a user is signed up for.\n{% enddocs %}\n\n{% docs audit %}\nA very useful field with data containing information about changes to a user, e.g. timestamps when the user subscribed and unsubscribed.\n{% enddocs %}\n\n{% docs voting_plan_status %}\nThe indication of the user's plan to vote, e.g. voting, not_voting, cant_vote\n{% enddocs %}\n\n{% docs voting_plan_time_of_day %}\nThe time of day when the user plans to vote, e.g morning, afternoon, evening\n{% enddocs %}\n\n{% docs voting_plan_method_of_transport %}\nHow the user plans to get to their polling place. e.g. walk, drive\n{% enddocs %}\n\n{% docs voting_plan_attending_with %}\nWith Whom the user plans to go voting, e.g. family, friends, alone\n{% enddocs %}\n\n{% docs feature_flags %}\nJSON containing info on features like badges and refer-a-friend.\n{% enddocs %}\n\n{% docs dbt_updated_at %}\nDBT snapshot table data. The updated_at timestamp of the source record when this snapshot row was inserted.\n{% enddocs %}\n\n{% docs dbt_scd_id %}\nDBT snapshot table data. A unique key generated for each snapshotted record.\n{% enddocs %}\n\n{% docs dbt_valid_from %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this snapshot row was first inserted\n{% enddocs %}\n\n{% docs dbt_valid_to %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this row row became invalidated.\n{% enddocs %}\n\n{% docs google_id %}\nUser's Google ID obtained from login.\n{% enddocs %}\n\n{% docs causes %}\nCauses in which a user is interested. e.g. animal welfare, education, mental_health\n{% enddocs %}\n\n{% docs email_subscription_status %}\nEmail subscription status of the user\n{% enddocs %}\n\n{% docs role %}\nUser's role, e.g. user, staff\n{% enddocs %}\n\n{% docs cio_backfilled %}\nWhether this user's data was backfilled from CIO\n{% enddocs %}\n\n{% docs addr_source %}\nWhere the user submitted their address, e.g. sms, GDPR\n{% enddocs %}\n\n{% docs email_subscription_topics %}\nEmail subscription topics correspond to categories in CIO in which the user is interested. e.g. lifestyle, community, scholarship\n{% enddocs %}\n\n{% docs sms_paused %}\nWhether we've paused sending sms messages to the user.\n{% enddocs %}\n\n\n\n\n", "name": "num_pages_views", "unique_id": "ds_dbt.num_pages_views", "block_contents": "Number of pages viewed in session"}, "ds_dbt.landing_page": {"root_path": "/Users/mrich/projects/quasar/quasar/dbt", "resource_type": "docs", "path": "schema.md", "original_file_path": "models/schema.md", "package_name": "ds_dbt", "file_contents": "\n{% docs click_id %}\nThis is a unique identifier for each click\n{% enddocs %}\n\n{% docs click_time %}\nTimestamp when user clicked.\n{% enddocs %}\n\n{% docs shortened %}\nShortened URL\n{% enddocs %}\n\n{% docs target_url %}\nURL where the user will be directed\n{% enddocs %}\n\n{% docs broadcast_id %}\nID of the broadcast that generated the shortened URL\n{% enddocs %}\n\n{% docs source %}\nSource of the URL (e.g. SMS, web), origin of the post (e.g. phoenix-web, phoenix-ashes, sms), or source where user was acquired. (e.g. sms, phoenix-next)\n{% enddocs %}\n\n{% docs interaction_type %}\nHow the user interacted with the link (e.g. preview, click)\n{% enddocs %}\n\n{% docs id %}\nUnique identifier for the post\n{% enddocs %}\n\n{% docs type %}\nType of post (e.g. photo)\n{% enddocs %}\n\n{% docs action %}\nPost action (e.g. DefendDreamers_Nov9_CongressCalls, GunViolence2018_Feb15_ParklandResponse)\n{% enddocs %}\n\n{% docs status %}\nPost status (e.g. accepted, rejected)\n{% enddocs %}\n\n{% docs quantity %}\nNumerical quantity of items specified in the call to action (e.g. 10, 200)\n{% enddocs %}\n\n{% docs source_bucket %}\nGrouping bucket for origin of the post (e.g. web, sms) \n{% enddocs %}\n\n{% docs created_at %}\nWhen the item was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs updated_at %}\nWhen the item was updated in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs text %}\nText of the post (e.g. \"Zoo animals and a super hero trying to help too!\") \n{% enddocs %}\n\n{% docs signup_id %}\nUnique identifier for the signup \n{% enddocs %}\n\n{% docs post_class %}\nClass of the signup (e.g. \"photo - default\", \"phone-call - DefendDreamers_Jan16_BothBodies\")\n{% enddocs %}\n\n{% docs is_accepted %}\nWhether the post has been accepted to be displayed to the public on the website\n{% enddocs %}\n\n{% docs action_id %}\nInternal identifier of the action \n{% enddocs %}\n\n{% docs location %}\nLocation where the action takes place (e.g. US-NY)\n{% enddocs %}\n\n{% docs postal_code %}\nPostal code where the action takes place\n{% enddocs %}\n\n{% docs is_reportback %}\nWhether the post is a reportback. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs civic_action %}\nWhether the post is a Civic Action. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs scholarship_entry %}\nWhether the post is a Scholarship Entry. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs why_participated %}\nWhy the user participated in this action. Entered by the user.\n{% enddocs %}\n\n{% docs details %}\nDetails about the post. Contains contentfulId and other information (e.g. {\"campaignContentfulId\":\"6ATBgGEQEeJoIcxs1qbwaC\"})\n{% enddocs %}\n\n{% docs email %}\nEmail address of the user.\n{% enddocs %}\n\n{% docs source_details %}\nDetails about the source of the item. This is sometimes represented as a JSON object, and for other tables like Turbovote its represented as a string. (e.g. \"{\"contentful_id\":\"3CTLlXfbwtz1FOMpl31SKV\",\"utm_source\":\"scholarship_listing\",\"utm_medium\":\"referral\",\"utm_campaign\":\"fastweb_2019_08\"}\", newsletter_456)\n{% enddocs %}\n\n{% docs campaign_id %}\nThis is a unique identifier for the campaign\n{% enddocs %}\n\n{% docs campaign_run_id %}\nUnique identifier for the campaign run\n{% enddocs %}\n\n{% docs campaign_name %}\nName of the campaign\n{% enddocs %}\n\n{% docs campaign_cause %}\nCampaign cause (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_run_start_date %}\nStart date of the campaign run\n{% enddocs %}\n\n{% docs campaign_run_end_date %}\nEnd date of the campaign run\n{% enddocs %}\n\n{% docs campaign_created_date %}\nWhen the campaign was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs campaign_node_id %}\nInternal unique node id for the campaign\n{% enddocs %}\n\n{% docs campaign_node_id_title %}\nCampaign title\n{% enddocs %}\n\n{% docs campaign_run_id_title %}\nTitle of the campaign run\n{% enddocs %}\n\n{% docs campaign_action_type %}\nCampaign action type (eg. Make Something, Share Something)\n{% enddocs %}\n\n{% docs campaign_cause_type %}\nCampaign cause type (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_noun %}\nNoun applicable to the user's action\n{% enddocs %}\n\n{% docs campaign_verb %}\nVerb describing the action the user should take\n{% enddocs %}\n\n{% docs campaign_cta %}\nCampaign's call to action\n{% enddocs %}\n\n{% docs campaign_language %}\n\"Language in which the campaign is available\"\n{% enddocs %}\n\n{% docs agent_id %}\nIf set, the content type of the picture the member is sending us. Exp. image/png.\n{% enddocs %}\n\n{% docs attachment_content_type %}\nIf set, the handle of the Front agent this outbound support message is from.\n{% enddocs %}\n\n{% docs topic %}\nHolds a reference to the **last** campaign topic the member's conversation was in. This is useful to allow members to talk to Gambit and get quick responses (through Rivescript), without Gambit completely forgetting what state the member's interaction with a campaign topic was in.\n{% enddocs %}\n\n{% docs action_serial_id %}\nSerial id for the user's action. Depends on the source of the action. May be the bertly click id, sms message id, etc.\n{% enddocs %}\n\n{% docs channel %}\nChannel for the user's action. Depends on the source of the action. (e.g. web, sms)\n{% enddocs %}\n\n{% docs first_action_month %}\nMonth during which the user took their first action. \n{% enddocs %}\n\n{% docs event_id %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs event_source %}\nApplication source for event (eg. Phoenix, Northstar)\n{% enddocs %}\n\n{% docs event_datetime %}\nWhen the event occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs event_name %}\nName of the event (eg. northstar_submitted_register, https://docs.google.com/spreadsheets/d/1lm-fGrIm85nUTxSojqyCt_Ehmm1zEbViFhKpxcJiz1A/edit#gid=406441516)\n{% enddocs %}\n\n{% docs event_type %}\nType of event (pv = 'Page View', se = 'Structured Event')\n{% enddocs %}\n\n{% docs host %}\nURL host where event occurred (eg. www.dosomething.org or identity.dosomething.org)\n{% enddocs %}\n\n{% docs path %}\nURL path event occurred at (eg. /login or /us/campaigns/huddle-for-heroes)\n{% enddocs %}\n\n{% docs query_parameters %}\nOptional query parameters for the request (eg. query=huddle)\n{% enddocs %}\n\n{% docs se_category %}\nCategory of event (eg. focused_field, authentication) - Custom structured event\n{% enddocs %}\n\n{% docs se_action %}\nAction performed / event name (eg. form_submitted, action_failed) - Custom structured event\n{% enddocs %}\n\n{% docs se_label %}\nThe object of the action (eg. first_name, register, voter_reg_status) - Custom structured event\n{% enddocs %}\n\n{% docs session_id %}\nUnique identifier of the user's session\n{% enddocs %}\n\n{% docs session_counter %}\nHow many sessions a user has started\n{% enddocs %}\n\n{% docs browser_size %}\nWhich type of browser a user is using (eg. Mobile, Desktop)\n{% enddocs %}\n\n{% docs northstar_id %}\nThe Northstar ID of the user who generated the event\n{% enddocs %}\n\n{% docs device_id %}\nID of the device used\n{% enddocs %}\n\n{% docs referrer_host %}\nURL host of the referring site (eg. google.com)\n{% enddocs %}\n\n{% docs referrer_path %}\nURL path from referring site (eg. /10-stats-on-teen-drug-and-alcohol-use/)\n{% enddocs %}\n\n{% docs referrer_source %}\nReferrer source name (eg. Google, Facebook)\n{% enddocs %}\n\n{% docs utm_source %}\nTracks where the traffic is coming from. (eg. scholarship_listing, Facebook)\n{% enddocs %}\n\n{% docs utm_medium %}\nHow the traffic got to the platform (eg. referral, CPC)\n{% enddocs %}\n\n{% docs utm_campaign %}\nTracks which campaign the traffic was generated by. Shows up in Google Analytics as Campaign Name (eg. editorial_newsletter)\n{% enddocs %}\n\n{% docs url %}\nURL of campaign (eg. https://dosome.click/nyn5m7)\n{% enddocs %}\n\n{% docs modal_type %}\nNULL or SURVEY_MODAL\n{% enddocs %}\n\n{% docs landing_datetime %}\nWhen the session started in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs ending_datetime %}\nWhen the session ended in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs session_duration_seconds %}\nSession duration in seconds\n{% enddocs %}\n\n{% docs num_pages_views %}\nNumber of pages viewed in session\n{% enddocs %}\n\n{% docs landing_page %}\nFirst page the user viewed in the session (eg. /us/facts/11-facts-about-bp-oil-spill)\n{% enddocs %}\n\n{% docs exit_page %}\n\"Which page the user ended or exited their session from (eg. /us/campaigns/green-your-getaway)\"\n{% enddocs %}\n\n{% docs days_since_last_session %}\n\"Days since their last session.\"\n{% enddocs %}\n\n{% docs post_type %}\nType of post, (e.g. photo, voter-reg)\n{% enddocs %}\n\n{% docs noun %}\nNoun that corresponds to the item in the call to action that was delivered. (e.g. drawings, tweets)\n{% enddocs %}\n\n{% docs verb %}\nVerb corresponding to the action the user took. (e.g. shared, sent, taken)\n{% enddocs %}\n\n{% docs deleted_at %}\nDate time in UTC when a user deleted their post.\n{% enddocs %}\n\n{% docs _fivetran_deleted %}\nMarks rows that were deleted in the source table\n{% enddocs %}\n\n{% docs _fivetran_synced %}\n(UTC timestamp) keeps track of when each row was last successfully synced\n{% enddocs %}\n\n{% docs reportback %}\nWhether the post is a reportback \n{% enddocs %}\n\n{% docs active %}\nWhether the user is active \n{% enddocs %}\n\n{% docs anonymous %}\nWhether the user is anonymous when making the post \n{% enddocs %}\n\n{% docs callpower_campaign_id %}\nUnique ID corresponding to the Callpower campaign. Callpower allows users to record messages for their representatives.\n{% enddocs %}\n\n{% docs quiz %}\nWhether the post is a quiz \n{% enddocs %}\n\n{% docs action_type %}\nType of action the user took. (e.g. share-something, donate-something)\n{% enddocs %}\n\n{% docs online %}\nWhether the action is a online as opposed to IRL.\n{% enddocs %}\n\n{% docs time_commitment %}\nEstimated time required to do the action (e.g. 3.0+, <0.5)\n{% enddocs %}\n\n{% docs num_signups %}\nQuantity of campaign signups\n{% enddocs %}\n\n{% docs most_recent_signup %}\nTimestamp of the most recent signup in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs num_rbs %}\nQuantity of reportbacks for the user\n{% enddocs %}\n\n{% docs total_quantity %}\nTotal quantity of items in reportbacks\n{% enddocs %}\n\n{% docs most_recent_rb %}\nWhen the most recent reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs first_rb %}\nWhen the first reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs avg_time_betw_rbs %}\nCalculated average time between reportbacks.\n{% enddocs %}\n\n{% docs avg_days_next_action_after_rb %}\nCalculated average days until next action after reportback\n{% enddocs %}\n\n{% docs days_to_next_action_after_last_rb %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs most_recent_mam_action %}\nMost recent monthly active member qualifying action in UTC (eg. 2018-01-01 12:00:00).\n{% enddocs %}\n\n{% docs most_recent_email_open %}\nMost recent email open in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs most_recent_all_actions %}\nMost recent timestamp of any action in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs last_action_is_rb %}\nWhether the last action the user took was a reportback\n{% enddocs %}\n\n{% docs days_since_last_action %}\nDays since the user's last action\n{% enddocs %}\n\n{% docs time_to_first_rb %}\nHow much time after registering until the user's first reportback\n{% enddocs %}\n\n{% docs sms_unsubscribed_at %}\nTimestamp of when user unsubscribed from SMS messaging\n{% enddocs %}\n\n{% docs user_unsubscribed_at %}\nTimestamp of when user unsubscribed from email or sms\n{% enddocs %}\n\n{% docs voter_reg_acquisition %}\nWhether the user was an acquisition through voter registration efforts. \n{% enddocs %}\n\n{% docs last_logged_in %}\nDate time in UTC when user last logged in to Northstar\n{% enddocs %}\n\n{% docs last_accessed %}\nDate time in UTC when user last access the website\n{% enddocs %}\n\n{% docs last_messaged_at %}\nDate time in UTC when user was last sent a message via SMS or email\n{% enddocs %}\n\n{% docs facebook_id %}\nUser's facebook id\n{% enddocs %}\n\n{% docs mobile %}\nUsers's mobile phone number\n{% enddocs %}\n\n{% docs birthdate %}\nUser's birthdate\n{% enddocs %}\n\n{% docs first_name %}\nUser's first name\n{% enddocs %}\n\n{% docs last_name %}\nUser's last name\n{% enddocs %}\n\n{% docs voter_registration_status %}\nUser's registration status. (e.g. registration_complete, confirmed, uncertain) \n{% enddocs %}\n\n{% docs finish_with_state %}\nIf the registrant was eligible to use and passed through to complete their registration with their state\u2019s OVR system, it will be indicated in this field (direct quote from Rock-The-Vote documentation). Yes/No value in field.\n{% enddocs %}\n\n{% docs reportback_volume %}\nThis field returns 1 if non voter-reg action, since campaigns team only counts those a 1 reportback. If voter-reg action, we want to count quantity of post as number of registered voters.\n{% enddocs %}\n\n{% docs address_street_1 %}\nFirst line of user's street address\n{% enddocs %}\n\n{% docs address_street_2 %}\nSecond line of user's street address\n{% enddocs %}\n\n{% docs city %}\nUser's city\n{% enddocs %}\n\n{% docs state %}\nUser's state\n{% enddocs %}\n\n{% docs country %}\nUser's country\n{% enddocs %}\n\n{% docs language %}\nUser's language\n{% enddocs %}\n\n{% docs cio_status %}\nStatus of user from CIO. (e.g. customer_subscribed, customer_unsubscribed)\n{% enddocs %}\n\n{% docs cio_status_timestamp %}\nTimestamp when users's status was updated.\n{% enddocs %}\n\n{% docs sms_status %}\nCurrent SMS status. (e.g. undeliverable, unknown)\n{% enddocs %}\n\n{% docs source_detail %}\nDetails of the origin of the user. (e.g. tell_a_friend, other, opt_in_path/197981)\n{% enddocs %}\n\n{% docs badges %}\nWhether the user has any badges. \n{% enddocs %}\n\n{% docs refer_friends %}\nWhether the user is a part of the refer a friend campaign. \n{% enddocs %}\n\n{% docs subscribed_member %}\nWhether the user is subscribed. \n{% enddocs %}\n\n{% docs last_updated_at %}\nTimestamp when users's was updated.\n{% enddocs %}\n\n{% docs school_id %}\nUnique identifier for the user's school. This info comes from the school finder.\n{% enddocs %}\n\n{% docs newsletter_topic %}\nNewsletter topic. (e.g. community, lifestyle)\n{% enddocs %}\n\n{% docs user_agent %}\nFull user agent string for a user's browser (e.g. \"Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:24.0) Gecko/20100101 Firefox/24.0\")\n{% enddocs %}\n\n{% docs drupal_id %}\nOld Drupal user ID\n{% enddocs %}\n\n{% docs campaigns %}\nCampaigns a user is signed up for.\n{% enddocs %}\n\n{% docs audit %}\nA very useful field with data containing information about changes to a user, e.g. timestamps when the user subscribed and unsubscribed.\n{% enddocs %}\n\n{% docs voting_plan_status %}\nThe indication of the user's plan to vote, e.g. voting, not_voting, cant_vote\n{% enddocs %}\n\n{% docs voting_plan_time_of_day %}\nThe time of day when the user plans to vote, e.g morning, afternoon, evening\n{% enddocs %}\n\n{% docs voting_plan_method_of_transport %}\nHow the user plans to get to their polling place. e.g. walk, drive\n{% enddocs %}\n\n{% docs voting_plan_attending_with %}\nWith Whom the user plans to go voting, e.g. family, friends, alone\n{% enddocs %}\n\n{% docs feature_flags %}\nJSON containing info on features like badges and refer-a-friend.\n{% enddocs %}\n\n{% docs dbt_updated_at %}\nDBT snapshot table data. The updated_at timestamp of the source record when this snapshot row was inserted.\n{% enddocs %}\n\n{% docs dbt_scd_id %}\nDBT snapshot table data. A unique key generated for each snapshotted record.\n{% enddocs %}\n\n{% docs dbt_valid_from %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this snapshot row was first inserted\n{% enddocs %}\n\n{% docs dbt_valid_to %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this row row became invalidated.\n{% enddocs %}\n\n{% docs google_id %}\nUser's Google ID obtained from login.\n{% enddocs %}\n\n{% docs causes %}\nCauses in which a user is interested. e.g. animal welfare, education, mental_health\n{% enddocs %}\n\n{% docs email_subscription_status %}\nEmail subscription status of the user\n{% enddocs %}\n\n{% docs role %}\nUser's role, e.g. user, staff\n{% enddocs %}\n\n{% docs cio_backfilled %}\nWhether this user's data was backfilled from CIO\n{% enddocs %}\n\n{% docs addr_source %}\nWhere the user submitted their address, e.g. sms, GDPR\n{% enddocs %}\n\n{% docs email_subscription_topics %}\nEmail subscription topics correspond to categories in CIO in which the user is interested. e.g. lifestyle, community, scholarship\n{% enddocs %}\n\n{% docs sms_paused %}\nWhether we've paused sending sms messages to the user.\n{% enddocs %}\n\n\n\n\n", "name": "landing_page", "unique_id": "ds_dbt.landing_page", "block_contents": "First page the user viewed in the session (eg. /us/facts/11-facts-about-bp-oil-spill)"}, "ds_dbt.exit_page": {"root_path": "/Users/mrich/projects/quasar/quasar/dbt", "resource_type": "docs", "path": "schema.md", "original_file_path": "models/schema.md", "package_name": "ds_dbt", "file_contents": "\n{% docs click_id %}\nThis is a unique identifier for each click\n{% enddocs %}\n\n{% docs click_time %}\nTimestamp when user clicked.\n{% enddocs %}\n\n{% docs shortened %}\nShortened URL\n{% enddocs %}\n\n{% docs target_url %}\nURL where the user will be directed\n{% enddocs %}\n\n{% docs broadcast_id %}\nID of the broadcast that generated the shortened URL\n{% enddocs %}\n\n{% docs source %}\nSource of the URL (e.g. SMS, web), origin of the post (e.g. phoenix-web, phoenix-ashes, sms), or source where user was acquired. (e.g. sms, phoenix-next)\n{% enddocs %}\n\n{% docs interaction_type %}\nHow the user interacted with the link (e.g. preview, click)\n{% enddocs %}\n\n{% docs id %}\nUnique identifier for the post\n{% enddocs %}\n\n{% docs type %}\nType of post (e.g. photo)\n{% enddocs %}\n\n{% docs action %}\nPost action (e.g. DefendDreamers_Nov9_CongressCalls, GunViolence2018_Feb15_ParklandResponse)\n{% enddocs %}\n\n{% docs status %}\nPost status (e.g. accepted, rejected)\n{% enddocs %}\n\n{% docs quantity %}\nNumerical quantity of items specified in the call to action (e.g. 10, 200)\n{% enddocs %}\n\n{% docs source_bucket %}\nGrouping bucket for origin of the post (e.g. web, sms) \n{% enddocs %}\n\n{% docs created_at %}\nWhen the item was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs updated_at %}\nWhen the item was updated in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs text %}\nText of the post (e.g. \"Zoo animals and a super hero trying to help too!\") \n{% enddocs %}\n\n{% docs signup_id %}\nUnique identifier for the signup \n{% enddocs %}\n\n{% docs post_class %}\nClass of the signup (e.g. \"photo - default\", \"phone-call - DefendDreamers_Jan16_BothBodies\")\n{% enddocs %}\n\n{% docs is_accepted %}\nWhether the post has been accepted to be displayed to the public on the website\n{% enddocs %}\n\n{% docs action_id %}\nInternal identifier of the action \n{% enddocs %}\n\n{% docs location %}\nLocation where the action takes place (e.g. US-NY)\n{% enddocs %}\n\n{% docs postal_code %}\nPostal code where the action takes place\n{% enddocs %}\n\n{% docs is_reportback %}\nWhether the post is a reportback. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs civic_action %}\nWhether the post is a Civic Action. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs scholarship_entry %}\nWhether the post is a Scholarship Entry. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs why_participated %}\nWhy the user participated in this action. Entered by the user.\n{% enddocs %}\n\n{% docs details %}\nDetails about the post. Contains contentfulId and other information (e.g. {\"campaignContentfulId\":\"6ATBgGEQEeJoIcxs1qbwaC\"})\n{% enddocs %}\n\n{% docs email %}\nEmail address of the user.\n{% enddocs %}\n\n{% docs source_details %}\nDetails about the source of the item. This is sometimes represented as a JSON object, and for other tables like Turbovote its represented as a string. (e.g. \"{\"contentful_id\":\"3CTLlXfbwtz1FOMpl31SKV\",\"utm_source\":\"scholarship_listing\",\"utm_medium\":\"referral\",\"utm_campaign\":\"fastweb_2019_08\"}\", newsletter_456)\n{% enddocs %}\n\n{% docs campaign_id %}\nThis is a unique identifier for the campaign\n{% enddocs %}\n\n{% docs campaign_run_id %}\nUnique identifier for the campaign run\n{% enddocs %}\n\n{% docs campaign_name %}\nName of the campaign\n{% enddocs %}\n\n{% docs campaign_cause %}\nCampaign cause (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_run_start_date %}\nStart date of the campaign run\n{% enddocs %}\n\n{% docs campaign_run_end_date %}\nEnd date of the campaign run\n{% enddocs %}\n\n{% docs campaign_created_date %}\nWhen the campaign was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs campaign_node_id %}\nInternal unique node id for the campaign\n{% enddocs %}\n\n{% docs campaign_node_id_title %}\nCampaign title\n{% enddocs %}\n\n{% docs campaign_run_id_title %}\nTitle of the campaign run\n{% enddocs %}\n\n{% docs campaign_action_type %}\nCampaign action type (eg. Make Something, Share Something)\n{% enddocs %}\n\n{% docs campaign_cause_type %}\nCampaign cause type (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_noun %}\nNoun applicable to the user's action\n{% enddocs %}\n\n{% docs campaign_verb %}\nVerb describing the action the user should take\n{% enddocs %}\n\n{% docs campaign_cta %}\nCampaign's call to action\n{% enddocs %}\n\n{% docs campaign_language %}\n\"Language in which the campaign is available\"\n{% enddocs %}\n\n{% docs agent_id %}\nIf set, the content type of the picture the member is sending us. Exp. image/png.\n{% enddocs %}\n\n{% docs attachment_content_type %}\nIf set, the handle of the Front agent this outbound support message is from.\n{% enddocs %}\n\n{% docs topic %}\nHolds a reference to the **last** campaign topic the member's conversation was in. This is useful to allow members to talk to Gambit and get quick responses (through Rivescript), without Gambit completely forgetting what state the member's interaction with a campaign topic was in.\n{% enddocs %}\n\n{% docs action_serial_id %}\nSerial id for the user's action. Depends on the source of the action. May be the bertly click id, sms message id, etc.\n{% enddocs %}\n\n{% docs channel %}\nChannel for the user's action. Depends on the source of the action. (e.g. web, sms)\n{% enddocs %}\n\n{% docs first_action_month %}\nMonth during which the user took their first action. \n{% enddocs %}\n\n{% docs event_id %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs event_source %}\nApplication source for event (eg. Phoenix, Northstar)\n{% enddocs %}\n\n{% docs event_datetime %}\nWhen the event occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs event_name %}\nName of the event (eg. northstar_submitted_register, https://docs.google.com/spreadsheets/d/1lm-fGrIm85nUTxSojqyCt_Ehmm1zEbViFhKpxcJiz1A/edit#gid=406441516)\n{% enddocs %}\n\n{% docs event_type %}\nType of event (pv = 'Page View', se = 'Structured Event')\n{% enddocs %}\n\n{% docs host %}\nURL host where event occurred (eg. www.dosomething.org or identity.dosomething.org)\n{% enddocs %}\n\n{% docs path %}\nURL path event occurred at (eg. /login or /us/campaigns/huddle-for-heroes)\n{% enddocs %}\n\n{% docs query_parameters %}\nOptional query parameters for the request (eg. query=huddle)\n{% enddocs %}\n\n{% docs se_category %}\nCategory of event (eg. focused_field, authentication) - Custom structured event\n{% enddocs %}\n\n{% docs se_action %}\nAction performed / event name (eg. form_submitted, action_failed) - Custom structured event\n{% enddocs %}\n\n{% docs se_label %}\nThe object of the action (eg. first_name, register, voter_reg_status) - Custom structured event\n{% enddocs %}\n\n{% docs session_id %}\nUnique identifier of the user's session\n{% enddocs %}\n\n{% docs session_counter %}\nHow many sessions a user has started\n{% enddocs %}\n\n{% docs browser_size %}\nWhich type of browser a user is using (eg. Mobile, Desktop)\n{% enddocs %}\n\n{% docs northstar_id %}\nThe Northstar ID of the user who generated the event\n{% enddocs %}\n\n{% docs device_id %}\nID of the device used\n{% enddocs %}\n\n{% docs referrer_host %}\nURL host of the referring site (eg. google.com)\n{% enddocs %}\n\n{% docs referrer_path %}\nURL path from referring site (eg. /10-stats-on-teen-drug-and-alcohol-use/)\n{% enddocs %}\n\n{% docs referrer_source %}\nReferrer source name (eg. Google, Facebook)\n{% enddocs %}\n\n{% docs utm_source %}\nTracks where the traffic is coming from. (eg. scholarship_listing, Facebook)\n{% enddocs %}\n\n{% docs utm_medium %}\nHow the traffic got to the platform (eg. referral, CPC)\n{% enddocs %}\n\n{% docs utm_campaign %}\nTracks which campaign the traffic was generated by. Shows up in Google Analytics as Campaign Name (eg. editorial_newsletter)\n{% enddocs %}\n\n{% docs url %}\nURL of campaign (eg. https://dosome.click/nyn5m7)\n{% enddocs %}\n\n{% docs modal_type %}\nNULL or SURVEY_MODAL\n{% enddocs %}\n\n{% docs landing_datetime %}\nWhen the session started in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs ending_datetime %}\nWhen the session ended in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs session_duration_seconds %}\nSession duration in seconds\n{% enddocs %}\n\n{% docs num_pages_views %}\nNumber of pages viewed in session\n{% enddocs %}\n\n{% docs landing_page %}\nFirst page the user viewed in the session (eg. /us/facts/11-facts-about-bp-oil-spill)\n{% enddocs %}\n\n{% docs exit_page %}\n\"Which page the user ended or exited their session from (eg. /us/campaigns/green-your-getaway)\"\n{% enddocs %}\n\n{% docs days_since_last_session %}\n\"Days since their last session.\"\n{% enddocs %}\n\n{% docs post_type %}\nType of post, (e.g. photo, voter-reg)\n{% enddocs %}\n\n{% docs noun %}\nNoun that corresponds to the item in the call to action that was delivered. (e.g. drawings, tweets)\n{% enddocs %}\n\n{% docs verb %}\nVerb corresponding to the action the user took. (e.g. shared, sent, taken)\n{% enddocs %}\n\n{% docs deleted_at %}\nDate time in UTC when a user deleted their post.\n{% enddocs %}\n\n{% docs _fivetran_deleted %}\nMarks rows that were deleted in the source table\n{% enddocs %}\n\n{% docs _fivetran_synced %}\n(UTC timestamp) keeps track of when each row was last successfully synced\n{% enddocs %}\n\n{% docs reportback %}\nWhether the post is a reportback \n{% enddocs %}\n\n{% docs active %}\nWhether the user is active \n{% enddocs %}\n\n{% docs anonymous %}\nWhether the user is anonymous when making the post \n{% enddocs %}\n\n{% docs callpower_campaign_id %}\nUnique ID corresponding to the Callpower campaign. Callpower allows users to record messages for their representatives.\n{% enddocs %}\n\n{% docs quiz %}\nWhether the post is a quiz \n{% enddocs %}\n\n{% docs action_type %}\nType of action the user took. (e.g. share-something, donate-something)\n{% enddocs %}\n\n{% docs online %}\nWhether the action is a online as opposed to IRL.\n{% enddocs %}\n\n{% docs time_commitment %}\nEstimated time required to do the action (e.g. 3.0+, <0.5)\n{% enddocs %}\n\n{% docs num_signups %}\nQuantity of campaign signups\n{% enddocs %}\n\n{% docs most_recent_signup %}\nTimestamp of the most recent signup in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs num_rbs %}\nQuantity of reportbacks for the user\n{% enddocs %}\n\n{% docs total_quantity %}\nTotal quantity of items in reportbacks\n{% enddocs %}\n\n{% docs most_recent_rb %}\nWhen the most recent reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs first_rb %}\nWhen the first reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs avg_time_betw_rbs %}\nCalculated average time between reportbacks.\n{% enddocs %}\n\n{% docs avg_days_next_action_after_rb %}\nCalculated average days until next action after reportback\n{% enddocs %}\n\n{% docs days_to_next_action_after_last_rb %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs most_recent_mam_action %}\nMost recent monthly active member qualifying action in UTC (eg. 2018-01-01 12:00:00).\n{% enddocs %}\n\n{% docs most_recent_email_open %}\nMost recent email open in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs most_recent_all_actions %}\nMost recent timestamp of any action in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs last_action_is_rb %}\nWhether the last action the user took was a reportback\n{% enddocs %}\n\n{% docs days_since_last_action %}\nDays since the user's last action\n{% enddocs %}\n\n{% docs time_to_first_rb %}\nHow much time after registering until the user's first reportback\n{% enddocs %}\n\n{% docs sms_unsubscribed_at %}\nTimestamp of when user unsubscribed from SMS messaging\n{% enddocs %}\n\n{% docs user_unsubscribed_at %}\nTimestamp of when user unsubscribed from email or sms\n{% enddocs %}\n\n{% docs voter_reg_acquisition %}\nWhether the user was an acquisition through voter registration efforts. \n{% enddocs %}\n\n{% docs last_logged_in %}\nDate time in UTC when user last logged in to Northstar\n{% enddocs %}\n\n{% docs last_accessed %}\nDate time in UTC when user last access the website\n{% enddocs %}\n\n{% docs last_messaged_at %}\nDate time in UTC when user was last sent a message via SMS or email\n{% enddocs %}\n\n{% docs facebook_id %}\nUser's facebook id\n{% enddocs %}\n\n{% docs mobile %}\nUsers's mobile phone number\n{% enddocs %}\n\n{% docs birthdate %}\nUser's birthdate\n{% enddocs %}\n\n{% docs first_name %}\nUser's first name\n{% enddocs %}\n\n{% docs last_name %}\nUser's last name\n{% enddocs %}\n\n{% docs voter_registration_status %}\nUser's registration status. (e.g. registration_complete, confirmed, uncertain) \n{% enddocs %}\n\n{% docs finish_with_state %}\nIf the registrant was eligible to use and passed through to complete their registration with their state\u2019s OVR system, it will be indicated in this field (direct quote from Rock-The-Vote documentation). Yes/No value in field.\n{% enddocs %}\n\n{% docs reportback_volume %}\nThis field returns 1 if non voter-reg action, since campaigns team only counts those a 1 reportback. If voter-reg action, we want to count quantity of post as number of registered voters.\n{% enddocs %}\n\n{% docs address_street_1 %}\nFirst line of user's street address\n{% enddocs %}\n\n{% docs address_street_2 %}\nSecond line of user's street address\n{% enddocs %}\n\n{% docs city %}\nUser's city\n{% enddocs %}\n\n{% docs state %}\nUser's state\n{% enddocs %}\n\n{% docs country %}\nUser's country\n{% enddocs %}\n\n{% docs language %}\nUser's language\n{% enddocs %}\n\n{% docs cio_status %}\nStatus of user from CIO. (e.g. customer_subscribed, customer_unsubscribed)\n{% enddocs %}\n\n{% docs cio_status_timestamp %}\nTimestamp when users's status was updated.\n{% enddocs %}\n\n{% docs sms_status %}\nCurrent SMS status. (e.g. undeliverable, unknown)\n{% enddocs %}\n\n{% docs source_detail %}\nDetails of the origin of the user. (e.g. tell_a_friend, other, opt_in_path/197981)\n{% enddocs %}\n\n{% docs badges %}\nWhether the user has any badges. \n{% enddocs %}\n\n{% docs refer_friends %}\nWhether the user is a part of the refer a friend campaign. \n{% enddocs %}\n\n{% docs subscribed_member %}\nWhether the user is subscribed. \n{% enddocs %}\n\n{% docs last_updated_at %}\nTimestamp when users's was updated.\n{% enddocs %}\n\n{% docs school_id %}\nUnique identifier for the user's school. This info comes from the school finder.\n{% enddocs %}\n\n{% docs newsletter_topic %}\nNewsletter topic. (e.g. community, lifestyle)\n{% enddocs %}\n\n{% docs user_agent %}\nFull user agent string for a user's browser (e.g. \"Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:24.0) Gecko/20100101 Firefox/24.0\")\n{% enddocs %}\n\n{% docs drupal_id %}\nOld Drupal user ID\n{% enddocs %}\n\n{% docs campaigns %}\nCampaigns a user is signed up for.\n{% enddocs %}\n\n{% docs audit %}\nA very useful field with data containing information about changes to a user, e.g. timestamps when the user subscribed and unsubscribed.\n{% enddocs %}\n\n{% docs voting_plan_status %}\nThe indication of the user's plan to vote, e.g. voting, not_voting, cant_vote\n{% enddocs %}\n\n{% docs voting_plan_time_of_day %}\nThe time of day when the user plans to vote, e.g morning, afternoon, evening\n{% enddocs %}\n\n{% docs voting_plan_method_of_transport %}\nHow the user plans to get to their polling place. e.g. walk, drive\n{% enddocs %}\n\n{% docs voting_plan_attending_with %}\nWith Whom the user plans to go voting, e.g. family, friends, alone\n{% enddocs %}\n\n{% docs feature_flags %}\nJSON containing info on features like badges and refer-a-friend.\n{% enddocs %}\n\n{% docs dbt_updated_at %}\nDBT snapshot table data. The updated_at timestamp of the source record when this snapshot row was inserted.\n{% enddocs %}\n\n{% docs dbt_scd_id %}\nDBT snapshot table data. A unique key generated for each snapshotted record.\n{% enddocs %}\n\n{% docs dbt_valid_from %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this snapshot row was first inserted\n{% enddocs %}\n\n{% docs dbt_valid_to %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this row row became invalidated.\n{% enddocs %}\n\n{% docs google_id %}\nUser's Google ID obtained from login.\n{% enddocs %}\n\n{% docs causes %}\nCauses in which a user is interested. e.g. animal welfare, education, mental_health\n{% enddocs %}\n\n{% docs email_subscription_status %}\nEmail subscription status of the user\n{% enddocs %}\n\n{% docs role %}\nUser's role, e.g. user, staff\n{% enddocs %}\n\n{% docs cio_backfilled %}\nWhether this user's data was backfilled from CIO\n{% enddocs %}\n\n{% docs addr_source %}\nWhere the user submitted their address, e.g. sms, GDPR\n{% enddocs %}\n\n{% docs email_subscription_topics %}\nEmail subscription topics correspond to categories in CIO in which the user is interested. e.g. lifestyle, community, scholarship\n{% enddocs %}\n\n{% docs sms_paused %}\nWhether we've paused sending sms messages to the user.\n{% enddocs %}\n\n\n\n\n", "name": "exit_page", "unique_id": "ds_dbt.exit_page", "block_contents": "\"Which page the user ended or exited their session from (eg. /us/campaigns/green-your-getaway)\""}, "ds_dbt.days_since_last_session": {"root_path": "/Users/mrich/projects/quasar/quasar/dbt", "resource_type": "docs", "path": "schema.md", "original_file_path": "models/schema.md", "package_name": "ds_dbt", "file_contents": "\n{% docs click_id %}\nThis is a unique identifier for each click\n{% enddocs %}\n\n{% docs click_time %}\nTimestamp when user clicked.\n{% enddocs %}\n\n{% docs shortened %}\nShortened URL\n{% enddocs %}\n\n{% docs target_url %}\nURL where the user will be directed\n{% enddocs %}\n\n{% docs broadcast_id %}\nID of the broadcast that generated the shortened URL\n{% enddocs %}\n\n{% docs source %}\nSource of the URL (e.g. SMS, web), origin of the post (e.g. phoenix-web, phoenix-ashes, sms), or source where user was acquired. (e.g. sms, phoenix-next)\n{% enddocs %}\n\n{% docs interaction_type %}\nHow the user interacted with the link (e.g. preview, click)\n{% enddocs %}\n\n{% docs id %}\nUnique identifier for the post\n{% enddocs %}\n\n{% docs type %}\nType of post (e.g. photo)\n{% enddocs %}\n\n{% docs action %}\nPost action (e.g. DefendDreamers_Nov9_CongressCalls, GunViolence2018_Feb15_ParklandResponse)\n{% enddocs %}\n\n{% docs status %}\nPost status (e.g. accepted, rejected)\n{% enddocs %}\n\n{% docs quantity %}\nNumerical quantity of items specified in the call to action (e.g. 10, 200)\n{% enddocs %}\n\n{% docs source_bucket %}\nGrouping bucket for origin of the post (e.g. web, sms) \n{% enddocs %}\n\n{% docs created_at %}\nWhen the item was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs updated_at %}\nWhen the item was updated in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs text %}\nText of the post (e.g. \"Zoo animals and a super hero trying to help too!\") \n{% enddocs %}\n\n{% docs signup_id %}\nUnique identifier for the signup \n{% enddocs %}\n\n{% docs post_class %}\nClass of the signup (e.g. \"photo - default\", \"phone-call - DefendDreamers_Jan16_BothBodies\")\n{% enddocs %}\n\n{% docs is_accepted %}\nWhether the post has been accepted to be displayed to the public on the website\n{% enddocs %}\n\n{% docs action_id %}\nInternal identifier of the action \n{% enddocs %}\n\n{% docs location %}\nLocation where the action takes place (e.g. US-NY)\n{% enddocs %}\n\n{% docs postal_code %}\nPostal code where the action takes place\n{% enddocs %}\n\n{% docs is_reportback %}\nWhether the post is a reportback. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs civic_action %}\nWhether the post is a Civic Action. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs scholarship_entry %}\nWhether the post is a Scholarship Entry. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs why_participated %}\nWhy the user participated in this action. Entered by the user.\n{% enddocs %}\n\n{% docs details %}\nDetails about the post. Contains contentfulId and other information (e.g. {\"campaignContentfulId\":\"6ATBgGEQEeJoIcxs1qbwaC\"})\n{% enddocs %}\n\n{% docs email %}\nEmail address of the user.\n{% enddocs %}\n\n{% docs source_details %}\nDetails about the source of the item. This is sometimes represented as a JSON object, and for other tables like Turbovote its represented as a string. (e.g. \"{\"contentful_id\":\"3CTLlXfbwtz1FOMpl31SKV\",\"utm_source\":\"scholarship_listing\",\"utm_medium\":\"referral\",\"utm_campaign\":\"fastweb_2019_08\"}\", newsletter_456)\n{% enddocs %}\n\n{% docs campaign_id %}\nThis is a unique identifier for the campaign\n{% enddocs %}\n\n{% docs campaign_run_id %}\nUnique identifier for the campaign run\n{% enddocs %}\n\n{% docs campaign_name %}\nName of the campaign\n{% enddocs %}\n\n{% docs campaign_cause %}\nCampaign cause (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_run_start_date %}\nStart date of the campaign run\n{% enddocs %}\n\n{% docs campaign_run_end_date %}\nEnd date of the campaign run\n{% enddocs %}\n\n{% docs campaign_created_date %}\nWhen the campaign was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs campaign_node_id %}\nInternal unique node id for the campaign\n{% enddocs %}\n\n{% docs campaign_node_id_title %}\nCampaign title\n{% enddocs %}\n\n{% docs campaign_run_id_title %}\nTitle of the campaign run\n{% enddocs %}\n\n{% docs campaign_action_type %}\nCampaign action type (eg. Make Something, Share Something)\n{% enddocs %}\n\n{% docs campaign_cause_type %}\nCampaign cause type (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_noun %}\nNoun applicable to the user's action\n{% enddocs %}\n\n{% docs campaign_verb %}\nVerb describing the action the user should take\n{% enddocs %}\n\n{% docs campaign_cta %}\nCampaign's call to action\n{% enddocs %}\n\n{% docs campaign_language %}\n\"Language in which the campaign is available\"\n{% enddocs %}\n\n{% docs agent_id %}\nIf set, the content type of the picture the member is sending us. Exp. image/png.\n{% enddocs %}\n\n{% docs attachment_content_type %}\nIf set, the handle of the Front agent this outbound support message is from.\n{% enddocs %}\n\n{% docs topic %}\nHolds a reference to the **last** campaign topic the member's conversation was in. This is useful to allow members to talk to Gambit and get quick responses (through Rivescript), without Gambit completely forgetting what state the member's interaction with a campaign topic was in.\n{% enddocs %}\n\n{% docs action_serial_id %}\nSerial id for the user's action. Depends on the source of the action. May be the bertly click id, sms message id, etc.\n{% enddocs %}\n\n{% docs channel %}\nChannel for the user's action. Depends on the source of the action. (e.g. web, sms)\n{% enddocs %}\n\n{% docs first_action_month %}\nMonth during which the user took their first action. \n{% enddocs %}\n\n{% docs event_id %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs event_source %}\nApplication source for event (eg. Phoenix, Northstar)\n{% enddocs %}\n\n{% docs event_datetime %}\nWhen the event occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs event_name %}\nName of the event (eg. northstar_submitted_register, https://docs.google.com/spreadsheets/d/1lm-fGrIm85nUTxSojqyCt_Ehmm1zEbViFhKpxcJiz1A/edit#gid=406441516)\n{% enddocs %}\n\n{% docs event_type %}\nType of event (pv = 'Page View', se = 'Structured Event')\n{% enddocs %}\n\n{% docs host %}\nURL host where event occurred (eg. www.dosomething.org or identity.dosomething.org)\n{% enddocs %}\n\n{% docs path %}\nURL path event occurred at (eg. /login or /us/campaigns/huddle-for-heroes)\n{% enddocs %}\n\n{% docs query_parameters %}\nOptional query parameters for the request (eg. query=huddle)\n{% enddocs %}\n\n{% docs se_category %}\nCategory of event (eg. focused_field, authentication) - Custom structured event\n{% enddocs %}\n\n{% docs se_action %}\nAction performed / event name (eg. form_submitted, action_failed) - Custom structured event\n{% enddocs %}\n\n{% docs se_label %}\nThe object of the action (eg. first_name, register, voter_reg_status) - Custom structured event\n{% enddocs %}\n\n{% docs session_id %}\nUnique identifier of the user's session\n{% enddocs %}\n\n{% docs session_counter %}\nHow many sessions a user has started\n{% enddocs %}\n\n{% docs browser_size %}\nWhich type of browser a user is using (eg. Mobile, Desktop)\n{% enddocs %}\n\n{% docs northstar_id %}\nThe Northstar ID of the user who generated the event\n{% enddocs %}\n\n{% docs device_id %}\nID of the device used\n{% enddocs %}\n\n{% docs referrer_host %}\nURL host of the referring site (eg. google.com)\n{% enddocs %}\n\n{% docs referrer_path %}\nURL path from referring site (eg. /10-stats-on-teen-drug-and-alcohol-use/)\n{% enddocs %}\n\n{% docs referrer_source %}\nReferrer source name (eg. Google, Facebook)\n{% enddocs %}\n\n{% docs utm_source %}\nTracks where the traffic is coming from. (eg. scholarship_listing, Facebook)\n{% enddocs %}\n\n{% docs utm_medium %}\nHow the traffic got to the platform (eg. referral, CPC)\n{% enddocs %}\n\n{% docs utm_campaign %}\nTracks which campaign the traffic was generated by. Shows up in Google Analytics as Campaign Name (eg. editorial_newsletter)\n{% enddocs %}\n\n{% docs url %}\nURL of campaign (eg. https://dosome.click/nyn5m7)\n{% enddocs %}\n\n{% docs modal_type %}\nNULL or SURVEY_MODAL\n{% enddocs %}\n\n{% docs landing_datetime %}\nWhen the session started in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs ending_datetime %}\nWhen the session ended in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs session_duration_seconds %}\nSession duration in seconds\n{% enddocs %}\n\n{% docs num_pages_views %}\nNumber of pages viewed in session\n{% enddocs %}\n\n{% docs landing_page %}\nFirst page the user viewed in the session (eg. /us/facts/11-facts-about-bp-oil-spill)\n{% enddocs %}\n\n{% docs exit_page %}\n\"Which page the user ended or exited their session from (eg. /us/campaigns/green-your-getaway)\"\n{% enddocs %}\n\n{% docs days_since_last_session %}\n\"Days since their last session.\"\n{% enddocs %}\n\n{% docs post_type %}\nType of post, (e.g. photo, voter-reg)\n{% enddocs %}\n\n{% docs noun %}\nNoun that corresponds to the item in the call to action that was delivered. (e.g. drawings, tweets)\n{% enddocs %}\n\n{% docs verb %}\nVerb corresponding to the action the user took. (e.g. shared, sent, taken)\n{% enddocs %}\n\n{% docs deleted_at %}\nDate time in UTC when a user deleted their post.\n{% enddocs %}\n\n{% docs _fivetran_deleted %}\nMarks rows that were deleted in the source table\n{% enddocs %}\n\n{% docs _fivetran_synced %}\n(UTC timestamp) keeps track of when each row was last successfully synced\n{% enddocs %}\n\n{% docs reportback %}\nWhether the post is a reportback \n{% enddocs %}\n\n{% docs active %}\nWhether the user is active \n{% enddocs %}\n\n{% docs anonymous %}\nWhether the user is anonymous when making the post \n{% enddocs %}\n\n{% docs callpower_campaign_id %}\nUnique ID corresponding to the Callpower campaign. Callpower allows users to record messages for their representatives.\n{% enddocs %}\n\n{% docs quiz %}\nWhether the post is a quiz \n{% enddocs %}\n\n{% docs action_type %}\nType of action the user took. (e.g. share-something, donate-something)\n{% enddocs %}\n\n{% docs online %}\nWhether the action is a online as opposed to IRL.\n{% enddocs %}\n\n{% docs time_commitment %}\nEstimated time required to do the action (e.g. 3.0+, <0.5)\n{% enddocs %}\n\n{% docs num_signups %}\nQuantity of campaign signups\n{% enddocs %}\n\n{% docs most_recent_signup %}\nTimestamp of the most recent signup in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs num_rbs %}\nQuantity of reportbacks for the user\n{% enddocs %}\n\n{% docs total_quantity %}\nTotal quantity of items in reportbacks\n{% enddocs %}\n\n{% docs most_recent_rb %}\nWhen the most recent reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs first_rb %}\nWhen the first reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs avg_time_betw_rbs %}\nCalculated average time between reportbacks.\n{% enddocs %}\n\n{% docs avg_days_next_action_after_rb %}\nCalculated average days until next action after reportback\n{% enddocs %}\n\n{% docs days_to_next_action_after_last_rb %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs most_recent_mam_action %}\nMost recent monthly active member qualifying action in UTC (eg. 2018-01-01 12:00:00).\n{% enddocs %}\n\n{% docs most_recent_email_open %}\nMost recent email open in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs most_recent_all_actions %}\nMost recent timestamp of any action in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs last_action_is_rb %}\nWhether the last action the user took was a reportback\n{% enddocs %}\n\n{% docs days_since_last_action %}\nDays since the user's last action\n{% enddocs %}\n\n{% docs time_to_first_rb %}\nHow much time after registering until the user's first reportback\n{% enddocs %}\n\n{% docs sms_unsubscribed_at %}\nTimestamp of when user unsubscribed from SMS messaging\n{% enddocs %}\n\n{% docs user_unsubscribed_at %}\nTimestamp of when user unsubscribed from email or sms\n{% enddocs %}\n\n{% docs voter_reg_acquisition %}\nWhether the user was an acquisition through voter registration efforts. \n{% enddocs %}\n\n{% docs last_logged_in %}\nDate time in UTC when user last logged in to Northstar\n{% enddocs %}\n\n{% docs last_accessed %}\nDate time in UTC when user last access the website\n{% enddocs %}\n\n{% docs last_messaged_at %}\nDate time in UTC when user was last sent a message via SMS or email\n{% enddocs %}\n\n{% docs facebook_id %}\nUser's facebook id\n{% enddocs %}\n\n{% docs mobile %}\nUsers's mobile phone number\n{% enddocs %}\n\n{% docs birthdate %}\nUser's birthdate\n{% enddocs %}\n\n{% docs first_name %}\nUser's first name\n{% enddocs %}\n\n{% docs last_name %}\nUser's last name\n{% enddocs %}\n\n{% docs voter_registration_status %}\nUser's registration status. (e.g. registration_complete, confirmed, uncertain) \n{% enddocs %}\n\n{% docs finish_with_state %}\nIf the registrant was eligible to use and passed through to complete their registration with their state\u2019s OVR system, it will be indicated in this field (direct quote from Rock-The-Vote documentation). Yes/No value in field.\n{% enddocs %}\n\n{% docs reportback_volume %}\nThis field returns 1 if non voter-reg action, since campaigns team only counts those a 1 reportback. If voter-reg action, we want to count quantity of post as number of registered voters.\n{% enddocs %}\n\n{% docs address_street_1 %}\nFirst line of user's street address\n{% enddocs %}\n\n{% docs address_street_2 %}\nSecond line of user's street address\n{% enddocs %}\n\n{% docs city %}\nUser's city\n{% enddocs %}\n\n{% docs state %}\nUser's state\n{% enddocs %}\n\n{% docs country %}\nUser's country\n{% enddocs %}\n\n{% docs language %}\nUser's language\n{% enddocs %}\n\n{% docs cio_status %}\nStatus of user from CIO. (e.g. customer_subscribed, customer_unsubscribed)\n{% enddocs %}\n\n{% docs cio_status_timestamp %}\nTimestamp when users's status was updated.\n{% enddocs %}\n\n{% docs sms_status %}\nCurrent SMS status. (e.g. undeliverable, unknown)\n{% enddocs %}\n\n{% docs source_detail %}\nDetails of the origin of the user. (e.g. tell_a_friend, other, opt_in_path/197981)\n{% enddocs %}\n\n{% docs badges %}\nWhether the user has any badges. \n{% enddocs %}\n\n{% docs refer_friends %}\nWhether the user is a part of the refer a friend campaign. \n{% enddocs %}\n\n{% docs subscribed_member %}\nWhether the user is subscribed. \n{% enddocs %}\n\n{% docs last_updated_at %}\nTimestamp when users's was updated.\n{% enddocs %}\n\n{% docs school_id %}\nUnique identifier for the user's school. This info comes from the school finder.\n{% enddocs %}\n\n{% docs newsletter_topic %}\nNewsletter topic. (e.g. community, lifestyle)\n{% enddocs %}\n\n{% docs user_agent %}\nFull user agent string for a user's browser (e.g. \"Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:24.0) Gecko/20100101 Firefox/24.0\")\n{% enddocs %}\n\n{% docs drupal_id %}\nOld Drupal user ID\n{% enddocs %}\n\n{% docs campaigns %}\nCampaigns a user is signed up for.\n{% enddocs %}\n\n{% docs audit %}\nA very useful field with data containing information about changes to a user, e.g. timestamps when the user subscribed and unsubscribed.\n{% enddocs %}\n\n{% docs voting_plan_status %}\nThe indication of the user's plan to vote, e.g. voting, not_voting, cant_vote\n{% enddocs %}\n\n{% docs voting_plan_time_of_day %}\nThe time of day when the user plans to vote, e.g morning, afternoon, evening\n{% enddocs %}\n\n{% docs voting_plan_method_of_transport %}\nHow the user plans to get to their polling place. e.g. walk, drive\n{% enddocs %}\n\n{% docs voting_plan_attending_with %}\nWith Whom the user plans to go voting, e.g. family, friends, alone\n{% enddocs %}\n\n{% docs feature_flags %}\nJSON containing info on features like badges and refer-a-friend.\n{% enddocs %}\n\n{% docs dbt_updated_at %}\nDBT snapshot table data. The updated_at timestamp of the source record when this snapshot row was inserted.\n{% enddocs %}\n\n{% docs dbt_scd_id %}\nDBT snapshot table data. A unique key generated for each snapshotted record.\n{% enddocs %}\n\n{% docs dbt_valid_from %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this snapshot row was first inserted\n{% enddocs %}\n\n{% docs dbt_valid_to %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this row row became invalidated.\n{% enddocs %}\n\n{% docs google_id %}\nUser's Google ID obtained from login.\n{% enddocs %}\n\n{% docs causes %}\nCauses in which a user is interested. e.g. animal welfare, education, mental_health\n{% enddocs %}\n\n{% docs email_subscription_status %}\nEmail subscription status of the user\n{% enddocs %}\n\n{% docs role %}\nUser's role, e.g. user, staff\n{% enddocs %}\n\n{% docs cio_backfilled %}\nWhether this user's data was backfilled from CIO\n{% enddocs %}\n\n{% docs addr_source %}\nWhere the user submitted their address, e.g. sms, GDPR\n{% enddocs %}\n\n{% docs email_subscription_topics %}\nEmail subscription topics correspond to categories in CIO in which the user is interested. e.g. lifestyle, community, scholarship\n{% enddocs %}\n\n{% docs sms_paused %}\nWhether we've paused sending sms messages to the user.\n{% enddocs %}\n\n\n\n\n", "name": "days_since_last_session", "unique_id": "ds_dbt.days_since_last_session", "block_contents": "\"Days since their last session.\""}, "ds_dbt.post_type": {"root_path": "/Users/mrich/projects/quasar/quasar/dbt", "resource_type": "docs", "path": "schema.md", "original_file_path": "models/schema.md", "package_name": "ds_dbt", "file_contents": "\n{% docs click_id %}\nThis is a unique identifier for each click\n{% enddocs %}\n\n{% docs click_time %}\nTimestamp when user clicked.\n{% enddocs %}\n\n{% docs shortened %}\nShortened URL\n{% enddocs %}\n\n{% docs target_url %}\nURL where the user will be directed\n{% enddocs %}\n\n{% docs broadcast_id %}\nID of the broadcast that generated the shortened URL\n{% enddocs %}\n\n{% docs source %}\nSource of the URL (e.g. SMS, web), origin of the post (e.g. phoenix-web, phoenix-ashes, sms), or source where user was acquired. (e.g. sms, phoenix-next)\n{% enddocs %}\n\n{% docs interaction_type %}\nHow the user interacted with the link (e.g. preview, click)\n{% enddocs %}\n\n{% docs id %}\nUnique identifier for the post\n{% enddocs %}\n\n{% docs type %}\nType of post (e.g. photo)\n{% enddocs %}\n\n{% docs action %}\nPost action (e.g. DefendDreamers_Nov9_CongressCalls, GunViolence2018_Feb15_ParklandResponse)\n{% enddocs %}\n\n{% docs status %}\nPost status (e.g. accepted, rejected)\n{% enddocs %}\n\n{% docs quantity %}\nNumerical quantity of items specified in the call to action (e.g. 10, 200)\n{% enddocs %}\n\n{% docs source_bucket %}\nGrouping bucket for origin of the post (e.g. web, sms) \n{% enddocs %}\n\n{% docs created_at %}\nWhen the item was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs updated_at %}\nWhen the item was updated in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs text %}\nText of the post (e.g. \"Zoo animals and a super hero trying to help too!\") \n{% enddocs %}\n\n{% docs signup_id %}\nUnique identifier for the signup \n{% enddocs %}\n\n{% docs post_class %}\nClass of the signup (e.g. \"photo - default\", \"phone-call - DefendDreamers_Jan16_BothBodies\")\n{% enddocs %}\n\n{% docs is_accepted %}\nWhether the post has been accepted to be displayed to the public on the website\n{% enddocs %}\n\n{% docs action_id %}\nInternal identifier of the action \n{% enddocs %}\n\n{% docs location %}\nLocation where the action takes place (e.g. US-NY)\n{% enddocs %}\n\n{% docs postal_code %}\nPostal code where the action takes place\n{% enddocs %}\n\n{% docs is_reportback %}\nWhether the post is a reportback. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs civic_action %}\nWhether the post is a Civic Action. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs scholarship_entry %}\nWhether the post is a Scholarship Entry. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs why_participated %}\nWhy the user participated in this action. Entered by the user.\n{% enddocs %}\n\n{% docs details %}\nDetails about the post. Contains contentfulId and other information (e.g. {\"campaignContentfulId\":\"6ATBgGEQEeJoIcxs1qbwaC\"})\n{% enddocs %}\n\n{% docs email %}\nEmail address of the user.\n{% enddocs %}\n\n{% docs source_details %}\nDetails about the source of the item. This is sometimes represented as a JSON object, and for other tables like Turbovote its represented as a string. (e.g. \"{\"contentful_id\":\"3CTLlXfbwtz1FOMpl31SKV\",\"utm_source\":\"scholarship_listing\",\"utm_medium\":\"referral\",\"utm_campaign\":\"fastweb_2019_08\"}\", newsletter_456)\n{% enddocs %}\n\n{% docs campaign_id %}\nThis is a unique identifier for the campaign\n{% enddocs %}\n\n{% docs campaign_run_id %}\nUnique identifier for the campaign run\n{% enddocs %}\n\n{% docs campaign_name %}\nName of the campaign\n{% enddocs %}\n\n{% docs campaign_cause %}\nCampaign cause (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_run_start_date %}\nStart date of the campaign run\n{% enddocs %}\n\n{% docs campaign_run_end_date %}\nEnd date of the campaign run\n{% enddocs %}\n\n{% docs campaign_created_date %}\nWhen the campaign was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs campaign_node_id %}\nInternal unique node id for the campaign\n{% enddocs %}\n\n{% docs campaign_node_id_title %}\nCampaign title\n{% enddocs %}\n\n{% docs campaign_run_id_title %}\nTitle of the campaign run\n{% enddocs %}\n\n{% docs campaign_action_type %}\nCampaign action type (eg. Make Something, Share Something)\n{% enddocs %}\n\n{% docs campaign_cause_type %}\nCampaign cause type (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_noun %}\nNoun applicable to the user's action\n{% enddocs %}\n\n{% docs campaign_verb %}\nVerb describing the action the user should take\n{% enddocs %}\n\n{% docs campaign_cta %}\nCampaign's call to action\n{% enddocs %}\n\n{% docs campaign_language %}\n\"Language in which the campaign is available\"\n{% enddocs %}\n\n{% docs agent_id %}\nIf set, the content type of the picture the member is sending us. Exp. image/png.\n{% enddocs %}\n\n{% docs attachment_content_type %}\nIf set, the handle of the Front agent this outbound support message is from.\n{% enddocs %}\n\n{% docs topic %}\nHolds a reference to the **last** campaign topic the member's conversation was in. This is useful to allow members to talk to Gambit and get quick responses (through Rivescript), without Gambit completely forgetting what state the member's interaction with a campaign topic was in.\n{% enddocs %}\n\n{% docs action_serial_id %}\nSerial id for the user's action. Depends on the source of the action. May be the bertly click id, sms message id, etc.\n{% enddocs %}\n\n{% docs channel %}\nChannel for the user's action. Depends on the source of the action. (e.g. web, sms)\n{% enddocs %}\n\n{% docs first_action_month %}\nMonth during which the user took their first action. \n{% enddocs %}\n\n{% docs event_id %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs event_source %}\nApplication source for event (eg. Phoenix, Northstar)\n{% enddocs %}\n\n{% docs event_datetime %}\nWhen the event occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs event_name %}\nName of the event (eg. northstar_submitted_register, https://docs.google.com/spreadsheets/d/1lm-fGrIm85nUTxSojqyCt_Ehmm1zEbViFhKpxcJiz1A/edit#gid=406441516)\n{% enddocs %}\n\n{% docs event_type %}\nType of event (pv = 'Page View', se = 'Structured Event')\n{% enddocs %}\n\n{% docs host %}\nURL host where event occurred (eg. www.dosomething.org or identity.dosomething.org)\n{% enddocs %}\n\n{% docs path %}\nURL path event occurred at (eg. /login or /us/campaigns/huddle-for-heroes)\n{% enddocs %}\n\n{% docs query_parameters %}\nOptional query parameters for the request (eg. query=huddle)\n{% enddocs %}\n\n{% docs se_category %}\nCategory of event (eg. focused_field, authentication) - Custom structured event\n{% enddocs %}\n\n{% docs se_action %}\nAction performed / event name (eg. form_submitted, action_failed) - Custom structured event\n{% enddocs %}\n\n{% docs se_label %}\nThe object of the action (eg. first_name, register, voter_reg_status) - Custom structured event\n{% enddocs %}\n\n{% docs session_id %}\nUnique identifier of the user's session\n{% enddocs %}\n\n{% docs session_counter %}\nHow many sessions a user has started\n{% enddocs %}\n\n{% docs browser_size %}\nWhich type of browser a user is using (eg. Mobile, Desktop)\n{% enddocs %}\n\n{% docs northstar_id %}\nThe Northstar ID of the user who generated the event\n{% enddocs %}\n\n{% docs device_id %}\nID of the device used\n{% enddocs %}\n\n{% docs referrer_host %}\nURL host of the referring site (eg. google.com)\n{% enddocs %}\n\n{% docs referrer_path %}\nURL path from referring site (eg. /10-stats-on-teen-drug-and-alcohol-use/)\n{% enddocs %}\n\n{% docs referrer_source %}\nReferrer source name (eg. Google, Facebook)\n{% enddocs %}\n\n{% docs utm_source %}\nTracks where the traffic is coming from. (eg. scholarship_listing, Facebook)\n{% enddocs %}\n\n{% docs utm_medium %}\nHow the traffic got to the platform (eg. referral, CPC)\n{% enddocs %}\n\n{% docs utm_campaign %}\nTracks which campaign the traffic was generated by. Shows up in Google Analytics as Campaign Name (eg. editorial_newsletter)\n{% enddocs %}\n\n{% docs url %}\nURL of campaign (eg. https://dosome.click/nyn5m7)\n{% enddocs %}\n\n{% docs modal_type %}\nNULL or SURVEY_MODAL\n{% enddocs %}\n\n{% docs landing_datetime %}\nWhen the session started in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs ending_datetime %}\nWhen the session ended in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs session_duration_seconds %}\nSession duration in seconds\n{% enddocs %}\n\n{% docs num_pages_views %}\nNumber of pages viewed in session\n{% enddocs %}\n\n{% docs landing_page %}\nFirst page the user viewed in the session (eg. /us/facts/11-facts-about-bp-oil-spill)\n{% enddocs %}\n\n{% docs exit_page %}\n\"Which page the user ended or exited their session from (eg. /us/campaigns/green-your-getaway)\"\n{% enddocs %}\n\n{% docs days_since_last_session %}\n\"Days since their last session.\"\n{% enddocs %}\n\n{% docs post_type %}\nType of post, (e.g. photo, voter-reg)\n{% enddocs %}\n\n{% docs noun %}\nNoun that corresponds to the item in the call to action that was delivered. (e.g. drawings, tweets)\n{% enddocs %}\n\n{% docs verb %}\nVerb corresponding to the action the user took. (e.g. shared, sent, taken)\n{% enddocs %}\n\n{% docs deleted_at %}\nDate time in UTC when a user deleted their post.\n{% enddocs %}\n\n{% docs _fivetran_deleted %}\nMarks rows that were deleted in the source table\n{% enddocs %}\n\n{% docs _fivetran_synced %}\n(UTC timestamp) keeps track of when each row was last successfully synced\n{% enddocs %}\n\n{% docs reportback %}\nWhether the post is a reportback \n{% enddocs %}\n\n{% docs active %}\nWhether the user is active \n{% enddocs %}\n\n{% docs anonymous %}\nWhether the user is anonymous when making the post \n{% enddocs %}\n\n{% docs callpower_campaign_id %}\nUnique ID corresponding to the Callpower campaign. Callpower allows users to record messages for their representatives.\n{% enddocs %}\n\n{% docs quiz %}\nWhether the post is a quiz \n{% enddocs %}\n\n{% docs action_type %}\nType of action the user took. (e.g. share-something, donate-something)\n{% enddocs %}\n\n{% docs online %}\nWhether the action is a online as opposed to IRL.\n{% enddocs %}\n\n{% docs time_commitment %}\nEstimated time required to do the action (e.g. 3.0+, <0.5)\n{% enddocs %}\n\n{% docs num_signups %}\nQuantity of campaign signups\n{% enddocs %}\n\n{% docs most_recent_signup %}\nTimestamp of the most recent signup in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs num_rbs %}\nQuantity of reportbacks for the user\n{% enddocs %}\n\n{% docs total_quantity %}\nTotal quantity of items in reportbacks\n{% enddocs %}\n\n{% docs most_recent_rb %}\nWhen the most recent reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs first_rb %}\nWhen the first reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs avg_time_betw_rbs %}\nCalculated average time between reportbacks.\n{% enddocs %}\n\n{% docs avg_days_next_action_after_rb %}\nCalculated average days until next action after reportback\n{% enddocs %}\n\n{% docs days_to_next_action_after_last_rb %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs most_recent_mam_action %}\nMost recent monthly active member qualifying action in UTC (eg. 2018-01-01 12:00:00).\n{% enddocs %}\n\n{% docs most_recent_email_open %}\nMost recent email open in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs most_recent_all_actions %}\nMost recent timestamp of any action in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs last_action_is_rb %}\nWhether the last action the user took was a reportback\n{% enddocs %}\n\n{% docs days_since_last_action %}\nDays since the user's last action\n{% enddocs %}\n\n{% docs time_to_first_rb %}\nHow much time after registering until the user's first reportback\n{% enddocs %}\n\n{% docs sms_unsubscribed_at %}\nTimestamp of when user unsubscribed from SMS messaging\n{% enddocs %}\n\n{% docs user_unsubscribed_at %}\nTimestamp of when user unsubscribed from email or sms\n{% enddocs %}\n\n{% docs voter_reg_acquisition %}\nWhether the user was an acquisition through voter registration efforts. \n{% enddocs %}\n\n{% docs last_logged_in %}\nDate time in UTC when user last logged in to Northstar\n{% enddocs %}\n\n{% docs last_accessed %}\nDate time in UTC when user last access the website\n{% enddocs %}\n\n{% docs last_messaged_at %}\nDate time in UTC when user was last sent a message via SMS or email\n{% enddocs %}\n\n{% docs facebook_id %}\nUser's facebook id\n{% enddocs %}\n\n{% docs mobile %}\nUsers's mobile phone number\n{% enddocs %}\n\n{% docs birthdate %}\nUser's birthdate\n{% enddocs %}\n\n{% docs first_name %}\nUser's first name\n{% enddocs %}\n\n{% docs last_name %}\nUser's last name\n{% enddocs %}\n\n{% docs voter_registration_status %}\nUser's registration status. (e.g. registration_complete, confirmed, uncertain) \n{% enddocs %}\n\n{% docs finish_with_state %}\nIf the registrant was eligible to use and passed through to complete their registration with their state\u2019s OVR system, it will be indicated in this field (direct quote from Rock-The-Vote documentation). Yes/No value in field.\n{% enddocs %}\n\n{% docs reportback_volume %}\nThis field returns 1 if non voter-reg action, since campaigns team only counts those a 1 reportback. If voter-reg action, we want to count quantity of post as number of registered voters.\n{% enddocs %}\n\n{% docs address_street_1 %}\nFirst line of user's street address\n{% enddocs %}\n\n{% docs address_street_2 %}\nSecond line of user's street address\n{% enddocs %}\n\n{% docs city %}\nUser's city\n{% enddocs %}\n\n{% docs state %}\nUser's state\n{% enddocs %}\n\n{% docs country %}\nUser's country\n{% enddocs %}\n\n{% docs language %}\nUser's language\n{% enddocs %}\n\n{% docs cio_status %}\nStatus of user from CIO. (e.g. customer_subscribed, customer_unsubscribed)\n{% enddocs %}\n\n{% docs cio_status_timestamp %}\nTimestamp when users's status was updated.\n{% enddocs %}\n\n{% docs sms_status %}\nCurrent SMS status. (e.g. undeliverable, unknown)\n{% enddocs %}\n\n{% docs source_detail %}\nDetails of the origin of the user. (e.g. tell_a_friend, other, opt_in_path/197981)\n{% enddocs %}\n\n{% docs badges %}\nWhether the user has any badges. \n{% enddocs %}\n\n{% docs refer_friends %}\nWhether the user is a part of the refer a friend campaign. \n{% enddocs %}\n\n{% docs subscribed_member %}\nWhether the user is subscribed. \n{% enddocs %}\n\n{% docs last_updated_at %}\nTimestamp when users's was updated.\n{% enddocs %}\n\n{% docs school_id %}\nUnique identifier for the user's school. This info comes from the school finder.\n{% enddocs %}\n\n{% docs newsletter_topic %}\nNewsletter topic. (e.g. community, lifestyle)\n{% enddocs %}\n\n{% docs user_agent %}\nFull user agent string for a user's browser (e.g. \"Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:24.0) Gecko/20100101 Firefox/24.0\")\n{% enddocs %}\n\n{% docs drupal_id %}\nOld Drupal user ID\n{% enddocs %}\n\n{% docs campaigns %}\nCampaigns a user is signed up for.\n{% enddocs %}\n\n{% docs audit %}\nA very useful field with data containing information about changes to a user, e.g. timestamps when the user subscribed and unsubscribed.\n{% enddocs %}\n\n{% docs voting_plan_status %}\nThe indication of the user's plan to vote, e.g. voting, not_voting, cant_vote\n{% enddocs %}\n\n{% docs voting_plan_time_of_day %}\nThe time of day when the user plans to vote, e.g morning, afternoon, evening\n{% enddocs %}\n\n{% docs voting_plan_method_of_transport %}\nHow the user plans to get to their polling place. e.g. walk, drive\n{% enddocs %}\n\n{% docs voting_plan_attending_with %}\nWith Whom the user plans to go voting, e.g. family, friends, alone\n{% enddocs %}\n\n{% docs feature_flags %}\nJSON containing info on features like badges and refer-a-friend.\n{% enddocs %}\n\n{% docs dbt_updated_at %}\nDBT snapshot table data. The updated_at timestamp of the source record when this snapshot row was inserted.\n{% enddocs %}\n\n{% docs dbt_scd_id %}\nDBT snapshot table data. A unique key generated for each snapshotted record.\n{% enddocs %}\n\n{% docs dbt_valid_from %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this snapshot row was first inserted\n{% enddocs %}\n\n{% docs dbt_valid_to %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this row row became invalidated.\n{% enddocs %}\n\n{% docs google_id %}\nUser's Google ID obtained from login.\n{% enddocs %}\n\n{% docs causes %}\nCauses in which a user is interested. e.g. animal welfare, education, mental_health\n{% enddocs %}\n\n{% docs email_subscription_status %}\nEmail subscription status of the user\n{% enddocs %}\n\n{% docs role %}\nUser's role, e.g. user, staff\n{% enddocs %}\n\n{% docs cio_backfilled %}\nWhether this user's data was backfilled from CIO\n{% enddocs %}\n\n{% docs addr_source %}\nWhere the user submitted their address, e.g. sms, GDPR\n{% enddocs %}\n\n{% docs email_subscription_topics %}\nEmail subscription topics correspond to categories in CIO in which the user is interested. e.g. lifestyle, community, scholarship\n{% enddocs %}\n\n{% docs sms_paused %}\nWhether we've paused sending sms messages to the user.\n{% enddocs %}\n\n\n\n\n", "name": "post_type", "unique_id": "ds_dbt.post_type", "block_contents": "Type of post, (e.g. photo, voter-reg)"}, "ds_dbt.noun": {"root_path": "/Users/mrich/projects/quasar/quasar/dbt", "resource_type": "docs", "path": "schema.md", "original_file_path": "models/schema.md", "package_name": "ds_dbt", "file_contents": "\n{% docs click_id %}\nThis is a unique identifier for each click\n{% enddocs %}\n\n{% docs click_time %}\nTimestamp when user clicked.\n{% enddocs %}\n\n{% docs shortened %}\nShortened URL\n{% enddocs %}\n\n{% docs target_url %}\nURL where the user will be directed\n{% enddocs %}\n\n{% docs broadcast_id %}\nID of the broadcast that generated the shortened URL\n{% enddocs %}\n\n{% docs source %}\nSource of the URL (e.g. SMS, web), origin of the post (e.g. phoenix-web, phoenix-ashes, sms), or source where user was acquired. (e.g. sms, phoenix-next)\n{% enddocs %}\n\n{% docs interaction_type %}\nHow the user interacted with the link (e.g. preview, click)\n{% enddocs %}\n\n{% docs id %}\nUnique identifier for the post\n{% enddocs %}\n\n{% docs type %}\nType of post (e.g. photo)\n{% enddocs %}\n\n{% docs action %}\nPost action (e.g. DefendDreamers_Nov9_CongressCalls, GunViolence2018_Feb15_ParklandResponse)\n{% enddocs %}\n\n{% docs status %}\nPost status (e.g. accepted, rejected)\n{% enddocs %}\n\n{% docs quantity %}\nNumerical quantity of items specified in the call to action (e.g. 10, 200)\n{% enddocs %}\n\n{% docs source_bucket %}\nGrouping bucket for origin of the post (e.g. web, sms) \n{% enddocs %}\n\n{% docs created_at %}\nWhen the item was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs updated_at %}\nWhen the item was updated in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs text %}\nText of the post (e.g. \"Zoo animals and a super hero trying to help too!\") \n{% enddocs %}\n\n{% docs signup_id %}\nUnique identifier for the signup \n{% enddocs %}\n\n{% docs post_class %}\nClass of the signup (e.g. \"photo - default\", \"phone-call - DefendDreamers_Jan16_BothBodies\")\n{% enddocs %}\n\n{% docs is_accepted %}\nWhether the post has been accepted to be displayed to the public on the website\n{% enddocs %}\n\n{% docs action_id %}\nInternal identifier of the action \n{% enddocs %}\n\n{% docs location %}\nLocation where the action takes place (e.g. US-NY)\n{% enddocs %}\n\n{% docs postal_code %}\nPostal code where the action takes place\n{% enddocs %}\n\n{% docs is_reportback %}\nWhether the post is a reportback. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs civic_action %}\nWhether the post is a Civic Action. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs scholarship_entry %}\nWhether the post is a Scholarship Entry. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs why_participated %}\nWhy the user participated in this action. Entered by the user.\n{% enddocs %}\n\n{% docs details %}\nDetails about the post. Contains contentfulId and other information (e.g. {\"campaignContentfulId\":\"6ATBgGEQEeJoIcxs1qbwaC\"})\n{% enddocs %}\n\n{% docs email %}\nEmail address of the user.\n{% enddocs %}\n\n{% docs source_details %}\nDetails about the source of the item. This is sometimes represented as a JSON object, and for other tables like Turbovote its represented as a string. (e.g. \"{\"contentful_id\":\"3CTLlXfbwtz1FOMpl31SKV\",\"utm_source\":\"scholarship_listing\",\"utm_medium\":\"referral\",\"utm_campaign\":\"fastweb_2019_08\"}\", newsletter_456)\n{% enddocs %}\n\n{% docs campaign_id %}\nThis is a unique identifier for the campaign\n{% enddocs %}\n\n{% docs campaign_run_id %}\nUnique identifier for the campaign run\n{% enddocs %}\n\n{% docs campaign_name %}\nName of the campaign\n{% enddocs %}\n\n{% docs campaign_cause %}\nCampaign cause (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_run_start_date %}\nStart date of the campaign run\n{% enddocs %}\n\n{% docs campaign_run_end_date %}\nEnd date of the campaign run\n{% enddocs %}\n\n{% docs campaign_created_date %}\nWhen the campaign was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs campaign_node_id %}\nInternal unique node id for the campaign\n{% enddocs %}\n\n{% docs campaign_node_id_title %}\nCampaign title\n{% enddocs %}\n\n{% docs campaign_run_id_title %}\nTitle of the campaign run\n{% enddocs %}\n\n{% docs campaign_action_type %}\nCampaign action type (eg. Make Something, Share Something)\n{% enddocs %}\n\n{% docs campaign_cause_type %}\nCampaign cause type (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_noun %}\nNoun applicable to the user's action\n{% enddocs %}\n\n{% docs campaign_verb %}\nVerb describing the action the user should take\n{% enddocs %}\n\n{% docs campaign_cta %}\nCampaign's call to action\n{% enddocs %}\n\n{% docs campaign_language %}\n\"Language in which the campaign is available\"\n{% enddocs %}\n\n{% docs agent_id %}\nIf set, the content type of the picture the member is sending us. Exp. image/png.\n{% enddocs %}\n\n{% docs attachment_content_type %}\nIf set, the handle of the Front agent this outbound support message is from.\n{% enddocs %}\n\n{% docs topic %}\nHolds a reference to the **last** campaign topic the member's conversation was in. This is useful to allow members to talk to Gambit and get quick responses (through Rivescript), without Gambit completely forgetting what state the member's interaction with a campaign topic was in.\n{% enddocs %}\n\n{% docs action_serial_id %}\nSerial id for the user's action. Depends on the source of the action. May be the bertly click id, sms message id, etc.\n{% enddocs %}\n\n{% docs channel %}\nChannel for the user's action. Depends on the source of the action. (e.g. web, sms)\n{% enddocs %}\n\n{% docs first_action_month %}\nMonth during which the user took their first action. \n{% enddocs %}\n\n{% docs event_id %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs event_source %}\nApplication source for event (eg. Phoenix, Northstar)\n{% enddocs %}\n\n{% docs event_datetime %}\nWhen the event occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs event_name %}\nName of the event (eg. northstar_submitted_register, https://docs.google.com/spreadsheets/d/1lm-fGrIm85nUTxSojqyCt_Ehmm1zEbViFhKpxcJiz1A/edit#gid=406441516)\n{% enddocs %}\n\n{% docs event_type %}\nType of event (pv = 'Page View', se = 'Structured Event')\n{% enddocs %}\n\n{% docs host %}\nURL host where event occurred (eg. www.dosomething.org or identity.dosomething.org)\n{% enddocs %}\n\n{% docs path %}\nURL path event occurred at (eg. /login or /us/campaigns/huddle-for-heroes)\n{% enddocs %}\n\n{% docs query_parameters %}\nOptional query parameters for the request (eg. query=huddle)\n{% enddocs %}\n\n{% docs se_category %}\nCategory of event (eg. focused_field, authentication) - Custom structured event\n{% enddocs %}\n\n{% docs se_action %}\nAction performed / event name (eg. form_submitted, action_failed) - Custom structured event\n{% enddocs %}\n\n{% docs se_label %}\nThe object of the action (eg. first_name, register, voter_reg_status) - Custom structured event\n{% enddocs %}\n\n{% docs session_id %}\nUnique identifier of the user's session\n{% enddocs %}\n\n{% docs session_counter %}\nHow many sessions a user has started\n{% enddocs %}\n\n{% docs browser_size %}\nWhich type of browser a user is using (eg. Mobile, Desktop)\n{% enddocs %}\n\n{% docs northstar_id %}\nThe Northstar ID of the user who generated the event\n{% enddocs %}\n\n{% docs device_id %}\nID of the device used\n{% enddocs %}\n\n{% docs referrer_host %}\nURL host of the referring site (eg. google.com)\n{% enddocs %}\n\n{% docs referrer_path %}\nURL path from referring site (eg. /10-stats-on-teen-drug-and-alcohol-use/)\n{% enddocs %}\n\n{% docs referrer_source %}\nReferrer source name (eg. Google, Facebook)\n{% enddocs %}\n\n{% docs utm_source %}\nTracks where the traffic is coming from. (eg. scholarship_listing, Facebook)\n{% enddocs %}\n\n{% docs utm_medium %}\nHow the traffic got to the platform (eg. referral, CPC)\n{% enddocs %}\n\n{% docs utm_campaign %}\nTracks which campaign the traffic was generated by. Shows up in Google Analytics as Campaign Name (eg. editorial_newsletter)\n{% enddocs %}\n\n{% docs url %}\nURL of campaign (eg. https://dosome.click/nyn5m7)\n{% enddocs %}\n\n{% docs modal_type %}\nNULL or SURVEY_MODAL\n{% enddocs %}\n\n{% docs landing_datetime %}\nWhen the session started in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs ending_datetime %}\nWhen the session ended in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs session_duration_seconds %}\nSession duration in seconds\n{% enddocs %}\n\n{% docs num_pages_views %}\nNumber of pages viewed in session\n{% enddocs %}\n\n{% docs landing_page %}\nFirst page the user viewed in the session (eg. /us/facts/11-facts-about-bp-oil-spill)\n{% enddocs %}\n\n{% docs exit_page %}\n\"Which page the user ended or exited their session from (eg. /us/campaigns/green-your-getaway)\"\n{% enddocs %}\n\n{% docs days_since_last_session %}\n\"Days since their last session.\"\n{% enddocs %}\n\n{% docs post_type %}\nType of post, (e.g. photo, voter-reg)\n{% enddocs %}\n\n{% docs noun %}\nNoun that corresponds to the item in the call to action that was delivered. (e.g. drawings, tweets)\n{% enddocs %}\n\n{% docs verb %}\nVerb corresponding to the action the user took. (e.g. shared, sent, taken)\n{% enddocs %}\n\n{% docs deleted_at %}\nDate time in UTC when a user deleted their post.\n{% enddocs %}\n\n{% docs _fivetran_deleted %}\nMarks rows that were deleted in the source table\n{% enddocs %}\n\n{% docs _fivetran_synced %}\n(UTC timestamp) keeps track of when each row was last successfully synced\n{% enddocs %}\n\n{% docs reportback %}\nWhether the post is a reportback \n{% enddocs %}\n\n{% docs active %}\nWhether the user is active \n{% enddocs %}\n\n{% docs anonymous %}\nWhether the user is anonymous when making the post \n{% enddocs %}\n\n{% docs callpower_campaign_id %}\nUnique ID corresponding to the Callpower campaign. Callpower allows users to record messages for their representatives.\n{% enddocs %}\n\n{% docs quiz %}\nWhether the post is a quiz \n{% enddocs %}\n\n{% docs action_type %}\nType of action the user took. (e.g. share-something, donate-something)\n{% enddocs %}\n\n{% docs online %}\nWhether the action is a online as opposed to IRL.\n{% enddocs %}\n\n{% docs time_commitment %}\nEstimated time required to do the action (e.g. 3.0+, <0.5)\n{% enddocs %}\n\n{% docs num_signups %}\nQuantity of campaign signups\n{% enddocs %}\n\n{% docs most_recent_signup %}\nTimestamp of the most recent signup in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs num_rbs %}\nQuantity of reportbacks for the user\n{% enddocs %}\n\n{% docs total_quantity %}\nTotal quantity of items in reportbacks\n{% enddocs %}\n\n{% docs most_recent_rb %}\nWhen the most recent reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs first_rb %}\nWhen the first reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs avg_time_betw_rbs %}\nCalculated average time between reportbacks.\n{% enddocs %}\n\n{% docs avg_days_next_action_after_rb %}\nCalculated average days until next action after reportback\n{% enddocs %}\n\n{% docs days_to_next_action_after_last_rb %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs most_recent_mam_action %}\nMost recent monthly active member qualifying action in UTC (eg. 2018-01-01 12:00:00).\n{% enddocs %}\n\n{% docs most_recent_email_open %}\nMost recent email open in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs most_recent_all_actions %}\nMost recent timestamp of any action in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs last_action_is_rb %}\nWhether the last action the user took was a reportback\n{% enddocs %}\n\n{% docs days_since_last_action %}\nDays since the user's last action\n{% enddocs %}\n\n{% docs time_to_first_rb %}\nHow much time after registering until the user's first reportback\n{% enddocs %}\n\n{% docs sms_unsubscribed_at %}\nTimestamp of when user unsubscribed from SMS messaging\n{% enddocs %}\n\n{% docs user_unsubscribed_at %}\nTimestamp of when user unsubscribed from email or sms\n{% enddocs %}\n\n{% docs voter_reg_acquisition %}\nWhether the user was an acquisition through voter registration efforts. \n{% enddocs %}\n\n{% docs last_logged_in %}\nDate time in UTC when user last logged in to Northstar\n{% enddocs %}\n\n{% docs last_accessed %}\nDate time in UTC when user last access the website\n{% enddocs %}\n\n{% docs last_messaged_at %}\nDate time in UTC when user was last sent a message via SMS or email\n{% enddocs %}\n\n{% docs facebook_id %}\nUser's facebook id\n{% enddocs %}\n\n{% docs mobile %}\nUsers's mobile phone number\n{% enddocs %}\n\n{% docs birthdate %}\nUser's birthdate\n{% enddocs %}\n\n{% docs first_name %}\nUser's first name\n{% enddocs %}\n\n{% docs last_name %}\nUser's last name\n{% enddocs %}\n\n{% docs voter_registration_status %}\nUser's registration status. (e.g. registration_complete, confirmed, uncertain) \n{% enddocs %}\n\n{% docs finish_with_state %}\nIf the registrant was eligible to use and passed through to complete their registration with their state\u2019s OVR system, it will be indicated in this field (direct quote from Rock-The-Vote documentation). Yes/No value in field.\n{% enddocs %}\n\n{% docs reportback_volume %}\nThis field returns 1 if non voter-reg action, since campaigns team only counts those a 1 reportback. If voter-reg action, we want to count quantity of post as number of registered voters.\n{% enddocs %}\n\n{% docs address_street_1 %}\nFirst line of user's street address\n{% enddocs %}\n\n{% docs address_street_2 %}\nSecond line of user's street address\n{% enddocs %}\n\n{% docs city %}\nUser's city\n{% enddocs %}\n\n{% docs state %}\nUser's state\n{% enddocs %}\n\n{% docs country %}\nUser's country\n{% enddocs %}\n\n{% docs language %}\nUser's language\n{% enddocs %}\n\n{% docs cio_status %}\nStatus of user from CIO. (e.g. customer_subscribed, customer_unsubscribed)\n{% enddocs %}\n\n{% docs cio_status_timestamp %}\nTimestamp when users's status was updated.\n{% enddocs %}\n\n{% docs sms_status %}\nCurrent SMS status. (e.g. undeliverable, unknown)\n{% enddocs %}\n\n{% docs source_detail %}\nDetails of the origin of the user. (e.g. tell_a_friend, other, opt_in_path/197981)\n{% enddocs %}\n\n{% docs badges %}\nWhether the user has any badges. \n{% enddocs %}\n\n{% docs refer_friends %}\nWhether the user is a part of the refer a friend campaign. \n{% enddocs %}\n\n{% docs subscribed_member %}\nWhether the user is subscribed. \n{% enddocs %}\n\n{% docs last_updated_at %}\nTimestamp when users's was updated.\n{% enddocs %}\n\n{% docs school_id %}\nUnique identifier for the user's school. This info comes from the school finder.\n{% enddocs %}\n\n{% docs newsletter_topic %}\nNewsletter topic. (e.g. community, lifestyle)\n{% enddocs %}\n\n{% docs user_agent %}\nFull user agent string for a user's browser (e.g. \"Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:24.0) Gecko/20100101 Firefox/24.0\")\n{% enddocs %}\n\n{% docs drupal_id %}\nOld Drupal user ID\n{% enddocs %}\n\n{% docs campaigns %}\nCampaigns a user is signed up for.\n{% enddocs %}\n\n{% docs audit %}\nA very useful field with data containing information about changes to a user, e.g. timestamps when the user subscribed and unsubscribed.\n{% enddocs %}\n\n{% docs voting_plan_status %}\nThe indication of the user's plan to vote, e.g. voting, not_voting, cant_vote\n{% enddocs %}\n\n{% docs voting_plan_time_of_day %}\nThe time of day when the user plans to vote, e.g morning, afternoon, evening\n{% enddocs %}\n\n{% docs voting_plan_method_of_transport %}\nHow the user plans to get to their polling place. e.g. walk, drive\n{% enddocs %}\n\n{% docs voting_plan_attending_with %}\nWith Whom the user plans to go voting, e.g. family, friends, alone\n{% enddocs %}\n\n{% docs feature_flags %}\nJSON containing info on features like badges and refer-a-friend.\n{% enddocs %}\n\n{% docs dbt_updated_at %}\nDBT snapshot table data. The updated_at timestamp of the source record when this snapshot row was inserted.\n{% enddocs %}\n\n{% docs dbt_scd_id %}\nDBT snapshot table data. A unique key generated for each snapshotted record.\n{% enddocs %}\n\n{% docs dbt_valid_from %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this snapshot row was first inserted\n{% enddocs %}\n\n{% docs dbt_valid_to %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this row row became invalidated.\n{% enddocs %}\n\n{% docs google_id %}\nUser's Google ID obtained from login.\n{% enddocs %}\n\n{% docs causes %}\nCauses in which a user is interested. e.g. animal welfare, education, mental_health\n{% enddocs %}\n\n{% docs email_subscription_status %}\nEmail subscription status of the user\n{% enddocs %}\n\n{% docs role %}\nUser's role, e.g. user, staff\n{% enddocs %}\n\n{% docs cio_backfilled %}\nWhether this user's data was backfilled from CIO\n{% enddocs %}\n\n{% docs addr_source %}\nWhere the user submitted their address, e.g. sms, GDPR\n{% enddocs %}\n\n{% docs email_subscription_topics %}\nEmail subscription topics correspond to categories in CIO in which the user is interested. e.g. lifestyle, community, scholarship\n{% enddocs %}\n\n{% docs sms_paused %}\nWhether we've paused sending sms messages to the user.\n{% enddocs %}\n\n\n\n\n", "name": "noun", "unique_id": "ds_dbt.noun", "block_contents": "Noun that corresponds to the item in the call to action that was delivered. (e.g. drawings, tweets)"}, "ds_dbt.verb": {"root_path": "/Users/mrich/projects/quasar/quasar/dbt", "resource_type": "docs", "path": "schema.md", "original_file_path": "models/schema.md", "package_name": "ds_dbt", "file_contents": "\n{% docs click_id %}\nThis is a unique identifier for each click\n{% enddocs %}\n\n{% docs click_time %}\nTimestamp when user clicked.\n{% enddocs %}\n\n{% docs shortened %}\nShortened URL\n{% enddocs %}\n\n{% docs target_url %}\nURL where the user will be directed\n{% enddocs %}\n\n{% docs broadcast_id %}\nID of the broadcast that generated the shortened URL\n{% enddocs %}\n\n{% docs source %}\nSource of the URL (e.g. SMS, web), origin of the post (e.g. phoenix-web, phoenix-ashes, sms), or source where user was acquired. (e.g. sms, phoenix-next)\n{% enddocs %}\n\n{% docs interaction_type %}\nHow the user interacted with the link (e.g. preview, click)\n{% enddocs %}\n\n{% docs id %}\nUnique identifier for the post\n{% enddocs %}\n\n{% docs type %}\nType of post (e.g. photo)\n{% enddocs %}\n\n{% docs action %}\nPost action (e.g. DefendDreamers_Nov9_CongressCalls, GunViolence2018_Feb15_ParklandResponse)\n{% enddocs %}\n\n{% docs status %}\nPost status (e.g. accepted, rejected)\n{% enddocs %}\n\n{% docs quantity %}\nNumerical quantity of items specified in the call to action (e.g. 10, 200)\n{% enddocs %}\n\n{% docs source_bucket %}\nGrouping bucket for origin of the post (e.g. web, sms) \n{% enddocs %}\n\n{% docs created_at %}\nWhen the item was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs updated_at %}\nWhen the item was updated in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs text %}\nText of the post (e.g. \"Zoo animals and a super hero trying to help too!\") \n{% enddocs %}\n\n{% docs signup_id %}\nUnique identifier for the signup \n{% enddocs %}\n\n{% docs post_class %}\nClass of the signup (e.g. \"photo - default\", \"phone-call - DefendDreamers_Jan16_BothBodies\")\n{% enddocs %}\n\n{% docs is_accepted %}\nWhether the post has been accepted to be displayed to the public on the website\n{% enddocs %}\n\n{% docs action_id %}\nInternal identifier of the action \n{% enddocs %}\n\n{% docs location %}\nLocation where the action takes place (e.g. US-NY)\n{% enddocs %}\n\n{% docs postal_code %}\nPostal code where the action takes place\n{% enddocs %}\n\n{% docs is_reportback %}\nWhether the post is a reportback. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs civic_action %}\nWhether the post is a Civic Action. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs scholarship_entry %}\nWhether the post is a Scholarship Entry. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs why_participated %}\nWhy the user participated in this action. Entered by the user.\n{% enddocs %}\n\n{% docs details %}\nDetails about the post. Contains contentfulId and other information (e.g. {\"campaignContentfulId\":\"6ATBgGEQEeJoIcxs1qbwaC\"})\n{% enddocs %}\n\n{% docs email %}\nEmail address of the user.\n{% enddocs %}\n\n{% docs source_details %}\nDetails about the source of the item. This is sometimes represented as a JSON object, and for other tables like Turbovote its represented as a string. (e.g. \"{\"contentful_id\":\"3CTLlXfbwtz1FOMpl31SKV\",\"utm_source\":\"scholarship_listing\",\"utm_medium\":\"referral\",\"utm_campaign\":\"fastweb_2019_08\"}\", newsletter_456)\n{% enddocs %}\n\n{% docs campaign_id %}\nThis is a unique identifier for the campaign\n{% enddocs %}\n\n{% docs campaign_run_id %}\nUnique identifier for the campaign run\n{% enddocs %}\n\n{% docs campaign_name %}\nName of the campaign\n{% enddocs %}\n\n{% docs campaign_cause %}\nCampaign cause (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_run_start_date %}\nStart date of the campaign run\n{% enddocs %}\n\n{% docs campaign_run_end_date %}\nEnd date of the campaign run\n{% enddocs %}\n\n{% docs campaign_created_date %}\nWhen the campaign was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs campaign_node_id %}\nInternal unique node id for the campaign\n{% enddocs %}\n\n{% docs campaign_node_id_title %}\nCampaign title\n{% enddocs %}\n\n{% docs campaign_run_id_title %}\nTitle of the campaign run\n{% enddocs %}\n\n{% docs campaign_action_type %}\nCampaign action type (eg. Make Something, Share Something)\n{% enddocs %}\n\n{% docs campaign_cause_type %}\nCampaign cause type (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_noun %}\nNoun applicable to the user's action\n{% enddocs %}\n\n{% docs campaign_verb %}\nVerb describing the action the user should take\n{% enddocs %}\n\n{% docs campaign_cta %}\nCampaign's call to action\n{% enddocs %}\n\n{% docs campaign_language %}\n\"Language in which the campaign is available\"\n{% enddocs %}\n\n{% docs agent_id %}\nIf set, the content type of the picture the member is sending us. Exp. image/png.\n{% enddocs %}\n\n{% docs attachment_content_type %}\nIf set, the handle of the Front agent this outbound support message is from.\n{% enddocs %}\n\n{% docs topic %}\nHolds a reference to the **last** campaign topic the member's conversation was in. This is useful to allow members to talk to Gambit and get quick responses (through Rivescript), without Gambit completely forgetting what state the member's interaction with a campaign topic was in.\n{% enddocs %}\n\n{% docs action_serial_id %}\nSerial id for the user's action. Depends on the source of the action. May be the bertly click id, sms message id, etc.\n{% enddocs %}\n\n{% docs channel %}\nChannel for the user's action. Depends on the source of the action. (e.g. web, sms)\n{% enddocs %}\n\n{% docs first_action_month %}\nMonth during which the user took their first action. \n{% enddocs %}\n\n{% docs event_id %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs event_source %}\nApplication source for event (eg. Phoenix, Northstar)\n{% enddocs %}\n\n{% docs event_datetime %}\nWhen the event occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs event_name %}\nName of the event (eg. northstar_submitted_register, https://docs.google.com/spreadsheets/d/1lm-fGrIm85nUTxSojqyCt_Ehmm1zEbViFhKpxcJiz1A/edit#gid=406441516)\n{% enddocs %}\n\n{% docs event_type %}\nType of event (pv = 'Page View', se = 'Structured Event')\n{% enddocs %}\n\n{% docs host %}\nURL host where event occurred (eg. www.dosomething.org or identity.dosomething.org)\n{% enddocs %}\n\n{% docs path %}\nURL path event occurred at (eg. /login or /us/campaigns/huddle-for-heroes)\n{% enddocs %}\n\n{% docs query_parameters %}\nOptional query parameters for the request (eg. query=huddle)\n{% enddocs %}\n\n{% docs se_category %}\nCategory of event (eg. focused_field, authentication) - Custom structured event\n{% enddocs %}\n\n{% docs se_action %}\nAction performed / event name (eg. form_submitted, action_failed) - Custom structured event\n{% enddocs %}\n\n{% docs se_label %}\nThe object of the action (eg. first_name, register, voter_reg_status) - Custom structured event\n{% enddocs %}\n\n{% docs session_id %}\nUnique identifier of the user's session\n{% enddocs %}\n\n{% docs session_counter %}\nHow many sessions a user has started\n{% enddocs %}\n\n{% docs browser_size %}\nWhich type of browser a user is using (eg. Mobile, Desktop)\n{% enddocs %}\n\n{% docs northstar_id %}\nThe Northstar ID of the user who generated the event\n{% enddocs %}\n\n{% docs device_id %}\nID of the device used\n{% enddocs %}\n\n{% docs referrer_host %}\nURL host of the referring site (eg. google.com)\n{% enddocs %}\n\n{% docs referrer_path %}\nURL path from referring site (eg. /10-stats-on-teen-drug-and-alcohol-use/)\n{% enddocs %}\n\n{% docs referrer_source %}\nReferrer source name (eg. Google, Facebook)\n{% enddocs %}\n\n{% docs utm_source %}\nTracks where the traffic is coming from. (eg. scholarship_listing, Facebook)\n{% enddocs %}\n\n{% docs utm_medium %}\nHow the traffic got to the platform (eg. referral, CPC)\n{% enddocs %}\n\n{% docs utm_campaign %}\nTracks which campaign the traffic was generated by. Shows up in Google Analytics as Campaign Name (eg. editorial_newsletter)\n{% enddocs %}\n\n{% docs url %}\nURL of campaign (eg. https://dosome.click/nyn5m7)\n{% enddocs %}\n\n{% docs modal_type %}\nNULL or SURVEY_MODAL\n{% enddocs %}\n\n{% docs landing_datetime %}\nWhen the session started in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs ending_datetime %}\nWhen the session ended in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs session_duration_seconds %}\nSession duration in seconds\n{% enddocs %}\n\n{% docs num_pages_views %}\nNumber of pages viewed in session\n{% enddocs %}\n\n{% docs landing_page %}\nFirst page the user viewed in the session (eg. /us/facts/11-facts-about-bp-oil-spill)\n{% enddocs %}\n\n{% docs exit_page %}\n\"Which page the user ended or exited their session from (eg. /us/campaigns/green-your-getaway)\"\n{% enddocs %}\n\n{% docs days_since_last_session %}\n\"Days since their last session.\"\n{% enddocs %}\n\n{% docs post_type %}\nType of post, (e.g. photo, voter-reg)\n{% enddocs %}\n\n{% docs noun %}\nNoun that corresponds to the item in the call to action that was delivered. (e.g. drawings, tweets)\n{% enddocs %}\n\n{% docs verb %}\nVerb corresponding to the action the user took. (e.g. shared, sent, taken)\n{% enddocs %}\n\n{% docs deleted_at %}\nDate time in UTC when a user deleted their post.\n{% enddocs %}\n\n{% docs _fivetran_deleted %}\nMarks rows that were deleted in the source table\n{% enddocs %}\n\n{% docs _fivetran_synced %}\n(UTC timestamp) keeps track of when each row was last successfully synced\n{% enddocs %}\n\n{% docs reportback %}\nWhether the post is a reportback \n{% enddocs %}\n\n{% docs active %}\nWhether the user is active \n{% enddocs %}\n\n{% docs anonymous %}\nWhether the user is anonymous when making the post \n{% enddocs %}\n\n{% docs callpower_campaign_id %}\nUnique ID corresponding to the Callpower campaign. Callpower allows users to record messages for their representatives.\n{% enddocs %}\n\n{% docs quiz %}\nWhether the post is a quiz \n{% enddocs %}\n\n{% docs action_type %}\nType of action the user took. (e.g. share-something, donate-something)\n{% enddocs %}\n\n{% docs online %}\nWhether the action is a online as opposed to IRL.\n{% enddocs %}\n\n{% docs time_commitment %}\nEstimated time required to do the action (e.g. 3.0+, <0.5)\n{% enddocs %}\n\n{% docs num_signups %}\nQuantity of campaign signups\n{% enddocs %}\n\n{% docs most_recent_signup %}\nTimestamp of the most recent signup in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs num_rbs %}\nQuantity of reportbacks for the user\n{% enddocs %}\n\n{% docs total_quantity %}\nTotal quantity of items in reportbacks\n{% enddocs %}\n\n{% docs most_recent_rb %}\nWhen the most recent reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs first_rb %}\nWhen the first reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs avg_time_betw_rbs %}\nCalculated average time between reportbacks.\n{% enddocs %}\n\n{% docs avg_days_next_action_after_rb %}\nCalculated average days until next action after reportback\n{% enddocs %}\n\n{% docs days_to_next_action_after_last_rb %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs most_recent_mam_action %}\nMost recent monthly active member qualifying action in UTC (eg. 2018-01-01 12:00:00).\n{% enddocs %}\n\n{% docs most_recent_email_open %}\nMost recent email open in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs most_recent_all_actions %}\nMost recent timestamp of any action in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs last_action_is_rb %}\nWhether the last action the user took was a reportback\n{% enddocs %}\n\n{% docs days_since_last_action %}\nDays since the user's last action\n{% enddocs %}\n\n{% docs time_to_first_rb %}\nHow much time after registering until the user's first reportback\n{% enddocs %}\n\n{% docs sms_unsubscribed_at %}\nTimestamp of when user unsubscribed from SMS messaging\n{% enddocs %}\n\n{% docs user_unsubscribed_at %}\nTimestamp of when user unsubscribed from email or sms\n{% enddocs %}\n\n{% docs voter_reg_acquisition %}\nWhether the user was an acquisition through voter registration efforts. \n{% enddocs %}\n\n{% docs last_logged_in %}\nDate time in UTC when user last logged in to Northstar\n{% enddocs %}\n\n{% docs last_accessed %}\nDate time in UTC when user last access the website\n{% enddocs %}\n\n{% docs last_messaged_at %}\nDate time in UTC when user was last sent a message via SMS or email\n{% enddocs %}\n\n{% docs facebook_id %}\nUser's facebook id\n{% enddocs %}\n\n{% docs mobile %}\nUsers's mobile phone number\n{% enddocs %}\n\n{% docs birthdate %}\nUser's birthdate\n{% enddocs %}\n\n{% docs first_name %}\nUser's first name\n{% enddocs %}\n\n{% docs last_name %}\nUser's last name\n{% enddocs %}\n\n{% docs voter_registration_status %}\nUser's registration status. (e.g. registration_complete, confirmed, uncertain) \n{% enddocs %}\n\n{% docs finish_with_state %}\nIf the registrant was eligible to use and passed through to complete their registration with their state\u2019s OVR system, it will be indicated in this field (direct quote from Rock-The-Vote documentation). Yes/No value in field.\n{% enddocs %}\n\n{% docs reportback_volume %}\nThis field returns 1 if non voter-reg action, since campaigns team only counts those a 1 reportback. If voter-reg action, we want to count quantity of post as number of registered voters.\n{% enddocs %}\n\n{% docs address_street_1 %}\nFirst line of user's street address\n{% enddocs %}\n\n{% docs address_street_2 %}\nSecond line of user's street address\n{% enddocs %}\n\n{% docs city %}\nUser's city\n{% enddocs %}\n\n{% docs state %}\nUser's state\n{% enddocs %}\n\n{% docs country %}\nUser's country\n{% enddocs %}\n\n{% docs language %}\nUser's language\n{% enddocs %}\n\n{% docs cio_status %}\nStatus of user from CIO. (e.g. customer_subscribed, customer_unsubscribed)\n{% enddocs %}\n\n{% docs cio_status_timestamp %}\nTimestamp when users's status was updated.\n{% enddocs %}\n\n{% docs sms_status %}\nCurrent SMS status. (e.g. undeliverable, unknown)\n{% enddocs %}\n\n{% docs source_detail %}\nDetails of the origin of the user. (e.g. tell_a_friend, other, opt_in_path/197981)\n{% enddocs %}\n\n{% docs badges %}\nWhether the user has any badges. \n{% enddocs %}\n\n{% docs refer_friends %}\nWhether the user is a part of the refer a friend campaign. \n{% enddocs %}\n\n{% docs subscribed_member %}\nWhether the user is subscribed. \n{% enddocs %}\n\n{% docs last_updated_at %}\nTimestamp when users's was updated.\n{% enddocs %}\n\n{% docs school_id %}\nUnique identifier for the user's school. This info comes from the school finder.\n{% enddocs %}\n\n{% docs newsletter_topic %}\nNewsletter topic. (e.g. community, lifestyle)\n{% enddocs %}\n\n{% docs user_agent %}\nFull user agent string for a user's browser (e.g. \"Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:24.0) Gecko/20100101 Firefox/24.0\")\n{% enddocs %}\n\n{% docs drupal_id %}\nOld Drupal user ID\n{% enddocs %}\n\n{% docs campaigns %}\nCampaigns a user is signed up for.\n{% enddocs %}\n\n{% docs audit %}\nA very useful field with data containing information about changes to a user, e.g. timestamps when the user subscribed and unsubscribed.\n{% enddocs %}\n\n{% docs voting_plan_status %}\nThe indication of the user's plan to vote, e.g. voting, not_voting, cant_vote\n{% enddocs %}\n\n{% docs voting_plan_time_of_day %}\nThe time of day when the user plans to vote, e.g morning, afternoon, evening\n{% enddocs %}\n\n{% docs voting_plan_method_of_transport %}\nHow the user plans to get to their polling place. e.g. walk, drive\n{% enddocs %}\n\n{% docs voting_plan_attending_with %}\nWith Whom the user plans to go voting, e.g. family, friends, alone\n{% enddocs %}\n\n{% docs feature_flags %}\nJSON containing info on features like badges and refer-a-friend.\n{% enddocs %}\n\n{% docs dbt_updated_at %}\nDBT snapshot table data. The updated_at timestamp of the source record when this snapshot row was inserted.\n{% enddocs %}\n\n{% docs dbt_scd_id %}\nDBT snapshot table data. A unique key generated for each snapshotted record.\n{% enddocs %}\n\n{% docs dbt_valid_from %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this snapshot row was first inserted\n{% enddocs %}\n\n{% docs dbt_valid_to %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this row row became invalidated.\n{% enddocs %}\n\n{% docs google_id %}\nUser's Google ID obtained from login.\n{% enddocs %}\n\n{% docs causes %}\nCauses in which a user is interested. e.g. animal welfare, education, mental_health\n{% enddocs %}\n\n{% docs email_subscription_status %}\nEmail subscription status of the user\n{% enddocs %}\n\n{% docs role %}\nUser's role, e.g. user, staff\n{% enddocs %}\n\n{% docs cio_backfilled %}\nWhether this user's data was backfilled from CIO\n{% enddocs %}\n\n{% docs addr_source %}\nWhere the user submitted their address, e.g. sms, GDPR\n{% enddocs %}\n\n{% docs email_subscription_topics %}\nEmail subscription topics correspond to categories in CIO in which the user is interested. e.g. lifestyle, community, scholarship\n{% enddocs %}\n\n{% docs sms_paused %}\nWhether we've paused sending sms messages to the user.\n{% enddocs %}\n\n\n\n\n", "name": "verb", "unique_id": "ds_dbt.verb", "block_contents": "Verb corresponding to the action the user took. (e.g. shared, sent, taken)"}, "ds_dbt.deleted_at": {"root_path": "/Users/mrich/projects/quasar/quasar/dbt", "resource_type": "docs", "path": "schema.md", "original_file_path": "models/schema.md", "package_name": "ds_dbt", "file_contents": "\n{% docs click_id %}\nThis is a unique identifier for each click\n{% enddocs %}\n\n{% docs click_time %}\nTimestamp when user clicked.\n{% enddocs %}\n\n{% docs shortened %}\nShortened URL\n{% enddocs %}\n\n{% docs target_url %}\nURL where the user will be directed\n{% enddocs %}\n\n{% docs broadcast_id %}\nID of the broadcast that generated the shortened URL\n{% enddocs %}\n\n{% docs source %}\nSource of the URL (e.g. SMS, web), origin of the post (e.g. phoenix-web, phoenix-ashes, sms), or source where user was acquired. (e.g. sms, phoenix-next)\n{% enddocs %}\n\n{% docs interaction_type %}\nHow the user interacted with the link (e.g. preview, click)\n{% enddocs %}\n\n{% docs id %}\nUnique identifier for the post\n{% enddocs %}\n\n{% docs type %}\nType of post (e.g. photo)\n{% enddocs %}\n\n{% docs action %}\nPost action (e.g. DefendDreamers_Nov9_CongressCalls, GunViolence2018_Feb15_ParklandResponse)\n{% enddocs %}\n\n{% docs status %}\nPost status (e.g. accepted, rejected)\n{% enddocs %}\n\n{% docs quantity %}\nNumerical quantity of items specified in the call to action (e.g. 10, 200)\n{% enddocs %}\n\n{% docs source_bucket %}\nGrouping bucket for origin of the post (e.g. web, sms) \n{% enddocs %}\n\n{% docs created_at %}\nWhen the item was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs updated_at %}\nWhen the item was updated in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs text %}\nText of the post (e.g. \"Zoo animals and a super hero trying to help too!\") \n{% enddocs %}\n\n{% docs signup_id %}\nUnique identifier for the signup \n{% enddocs %}\n\n{% docs post_class %}\nClass of the signup (e.g. \"photo - default\", \"phone-call - DefendDreamers_Jan16_BothBodies\")\n{% enddocs %}\n\n{% docs is_accepted %}\nWhether the post has been accepted to be displayed to the public on the website\n{% enddocs %}\n\n{% docs action_id %}\nInternal identifier of the action \n{% enddocs %}\n\n{% docs location %}\nLocation where the action takes place (e.g. US-NY)\n{% enddocs %}\n\n{% docs postal_code %}\nPostal code where the action takes place\n{% enddocs %}\n\n{% docs is_reportback %}\nWhether the post is a reportback. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs civic_action %}\nWhether the post is a Civic Action. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs scholarship_entry %}\nWhether the post is a Scholarship Entry. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs why_participated %}\nWhy the user participated in this action. Entered by the user.\n{% enddocs %}\n\n{% docs details %}\nDetails about the post. Contains contentfulId and other information (e.g. {\"campaignContentfulId\":\"6ATBgGEQEeJoIcxs1qbwaC\"})\n{% enddocs %}\n\n{% docs email %}\nEmail address of the user.\n{% enddocs %}\n\n{% docs source_details %}\nDetails about the source of the item. This is sometimes represented as a JSON object, and for other tables like Turbovote its represented as a string. (e.g. \"{\"contentful_id\":\"3CTLlXfbwtz1FOMpl31SKV\",\"utm_source\":\"scholarship_listing\",\"utm_medium\":\"referral\",\"utm_campaign\":\"fastweb_2019_08\"}\", newsletter_456)\n{% enddocs %}\n\n{% docs campaign_id %}\nThis is a unique identifier for the campaign\n{% enddocs %}\n\n{% docs campaign_run_id %}\nUnique identifier for the campaign run\n{% enddocs %}\n\n{% docs campaign_name %}\nName of the campaign\n{% enddocs %}\n\n{% docs campaign_cause %}\nCampaign cause (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_run_start_date %}\nStart date of the campaign run\n{% enddocs %}\n\n{% docs campaign_run_end_date %}\nEnd date of the campaign run\n{% enddocs %}\n\n{% docs campaign_created_date %}\nWhen the campaign was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs campaign_node_id %}\nInternal unique node id for the campaign\n{% enddocs %}\n\n{% docs campaign_node_id_title %}\nCampaign title\n{% enddocs %}\n\n{% docs campaign_run_id_title %}\nTitle of the campaign run\n{% enddocs %}\n\n{% docs campaign_action_type %}\nCampaign action type (eg. Make Something, Share Something)\n{% enddocs %}\n\n{% docs campaign_cause_type %}\nCampaign cause type (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_noun %}\nNoun applicable to the user's action\n{% enddocs %}\n\n{% docs campaign_verb %}\nVerb describing the action the user should take\n{% enddocs %}\n\n{% docs campaign_cta %}\nCampaign's call to action\n{% enddocs %}\n\n{% docs campaign_language %}\n\"Language in which the campaign is available\"\n{% enddocs %}\n\n{% docs agent_id %}\nIf set, the content type of the picture the member is sending us. Exp. image/png.\n{% enddocs %}\n\n{% docs attachment_content_type %}\nIf set, the handle of the Front agent this outbound support message is from.\n{% enddocs %}\n\n{% docs topic %}\nHolds a reference to the **last** campaign topic the member's conversation was in. This is useful to allow members to talk to Gambit and get quick responses (through Rivescript), without Gambit completely forgetting what state the member's interaction with a campaign topic was in.\n{% enddocs %}\n\n{% docs action_serial_id %}\nSerial id for the user's action. Depends on the source of the action. May be the bertly click id, sms message id, etc.\n{% enddocs %}\n\n{% docs channel %}\nChannel for the user's action. Depends on the source of the action. (e.g. web, sms)\n{% enddocs %}\n\n{% docs first_action_month %}\nMonth during which the user took their first action. \n{% enddocs %}\n\n{% docs event_id %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs event_source %}\nApplication source for event (eg. Phoenix, Northstar)\n{% enddocs %}\n\n{% docs event_datetime %}\nWhen the event occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs event_name %}\nName of the event (eg. northstar_submitted_register, https://docs.google.com/spreadsheets/d/1lm-fGrIm85nUTxSojqyCt_Ehmm1zEbViFhKpxcJiz1A/edit#gid=406441516)\n{% enddocs %}\n\n{% docs event_type %}\nType of event (pv = 'Page View', se = 'Structured Event')\n{% enddocs %}\n\n{% docs host %}\nURL host where event occurred (eg. www.dosomething.org or identity.dosomething.org)\n{% enddocs %}\n\n{% docs path %}\nURL path event occurred at (eg. /login or /us/campaigns/huddle-for-heroes)\n{% enddocs %}\n\n{% docs query_parameters %}\nOptional query parameters for the request (eg. query=huddle)\n{% enddocs %}\n\n{% docs se_category %}\nCategory of event (eg. focused_field, authentication) - Custom structured event\n{% enddocs %}\n\n{% docs se_action %}\nAction performed / event name (eg. form_submitted, action_failed) - Custom structured event\n{% enddocs %}\n\n{% docs se_label %}\nThe object of the action (eg. first_name, register, voter_reg_status) - Custom structured event\n{% enddocs %}\n\n{% docs session_id %}\nUnique identifier of the user's session\n{% enddocs %}\n\n{% docs session_counter %}\nHow many sessions a user has started\n{% enddocs %}\n\n{% docs browser_size %}\nWhich type of browser a user is using (eg. Mobile, Desktop)\n{% enddocs %}\n\n{% docs northstar_id %}\nThe Northstar ID of the user who generated the event\n{% enddocs %}\n\n{% docs device_id %}\nID of the device used\n{% enddocs %}\n\n{% docs referrer_host %}\nURL host of the referring site (eg. google.com)\n{% enddocs %}\n\n{% docs referrer_path %}\nURL path from referring site (eg. /10-stats-on-teen-drug-and-alcohol-use/)\n{% enddocs %}\n\n{% docs referrer_source %}\nReferrer source name (eg. Google, Facebook)\n{% enddocs %}\n\n{% docs utm_source %}\nTracks where the traffic is coming from. (eg. scholarship_listing, Facebook)\n{% enddocs %}\n\n{% docs utm_medium %}\nHow the traffic got to the platform (eg. referral, CPC)\n{% enddocs %}\n\n{% docs utm_campaign %}\nTracks which campaign the traffic was generated by. Shows up in Google Analytics as Campaign Name (eg. editorial_newsletter)\n{% enddocs %}\n\n{% docs url %}\nURL of campaign (eg. https://dosome.click/nyn5m7)\n{% enddocs %}\n\n{% docs modal_type %}\nNULL or SURVEY_MODAL\n{% enddocs %}\n\n{% docs landing_datetime %}\nWhen the session started in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs ending_datetime %}\nWhen the session ended in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs session_duration_seconds %}\nSession duration in seconds\n{% enddocs %}\n\n{% docs num_pages_views %}\nNumber of pages viewed in session\n{% enddocs %}\n\n{% docs landing_page %}\nFirst page the user viewed in the session (eg. /us/facts/11-facts-about-bp-oil-spill)\n{% enddocs %}\n\n{% docs exit_page %}\n\"Which page the user ended or exited their session from (eg. /us/campaigns/green-your-getaway)\"\n{% enddocs %}\n\n{% docs days_since_last_session %}\n\"Days since their last session.\"\n{% enddocs %}\n\n{% docs post_type %}\nType of post, (e.g. photo, voter-reg)\n{% enddocs %}\n\n{% docs noun %}\nNoun that corresponds to the item in the call to action that was delivered. (e.g. drawings, tweets)\n{% enddocs %}\n\n{% docs verb %}\nVerb corresponding to the action the user took. (e.g. shared, sent, taken)\n{% enddocs %}\n\n{% docs deleted_at %}\nDate time in UTC when a user deleted their post.\n{% enddocs %}\n\n{% docs _fivetran_deleted %}\nMarks rows that were deleted in the source table\n{% enddocs %}\n\n{% docs _fivetran_synced %}\n(UTC timestamp) keeps track of when each row was last successfully synced\n{% enddocs %}\n\n{% docs reportback %}\nWhether the post is a reportback \n{% enddocs %}\n\n{% docs active %}\nWhether the user is active \n{% enddocs %}\n\n{% docs anonymous %}\nWhether the user is anonymous when making the post \n{% enddocs %}\n\n{% docs callpower_campaign_id %}\nUnique ID corresponding to the Callpower campaign. Callpower allows users to record messages for their representatives.\n{% enddocs %}\n\n{% docs quiz %}\nWhether the post is a quiz \n{% enddocs %}\n\n{% docs action_type %}\nType of action the user took. (e.g. share-something, donate-something)\n{% enddocs %}\n\n{% docs online %}\nWhether the action is a online as opposed to IRL.\n{% enddocs %}\n\n{% docs time_commitment %}\nEstimated time required to do the action (e.g. 3.0+, <0.5)\n{% enddocs %}\n\n{% docs num_signups %}\nQuantity of campaign signups\n{% enddocs %}\n\n{% docs most_recent_signup %}\nTimestamp of the most recent signup in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs num_rbs %}\nQuantity of reportbacks for the user\n{% enddocs %}\n\n{% docs total_quantity %}\nTotal quantity of items in reportbacks\n{% enddocs %}\n\n{% docs most_recent_rb %}\nWhen the most recent reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs first_rb %}\nWhen the first reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs avg_time_betw_rbs %}\nCalculated average time between reportbacks.\n{% enddocs %}\n\n{% docs avg_days_next_action_after_rb %}\nCalculated average days until next action after reportback\n{% enddocs %}\n\n{% docs days_to_next_action_after_last_rb %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs most_recent_mam_action %}\nMost recent monthly active member qualifying action in UTC (eg. 2018-01-01 12:00:00).\n{% enddocs %}\n\n{% docs most_recent_email_open %}\nMost recent email open in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs most_recent_all_actions %}\nMost recent timestamp of any action in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs last_action_is_rb %}\nWhether the last action the user took was a reportback\n{% enddocs %}\n\n{% docs days_since_last_action %}\nDays since the user's last action\n{% enddocs %}\n\n{% docs time_to_first_rb %}\nHow much time after registering until the user's first reportback\n{% enddocs %}\n\n{% docs sms_unsubscribed_at %}\nTimestamp of when user unsubscribed from SMS messaging\n{% enddocs %}\n\n{% docs user_unsubscribed_at %}\nTimestamp of when user unsubscribed from email or sms\n{% enddocs %}\n\n{% docs voter_reg_acquisition %}\nWhether the user was an acquisition through voter registration efforts. \n{% enddocs %}\n\n{% docs last_logged_in %}\nDate time in UTC when user last logged in to Northstar\n{% enddocs %}\n\n{% docs last_accessed %}\nDate time in UTC when user last access the website\n{% enddocs %}\n\n{% docs last_messaged_at %}\nDate time in UTC when user was last sent a message via SMS or email\n{% enddocs %}\n\n{% docs facebook_id %}\nUser's facebook id\n{% enddocs %}\n\n{% docs mobile %}\nUsers's mobile phone number\n{% enddocs %}\n\n{% docs birthdate %}\nUser's birthdate\n{% enddocs %}\n\n{% docs first_name %}\nUser's first name\n{% enddocs %}\n\n{% docs last_name %}\nUser's last name\n{% enddocs %}\n\n{% docs voter_registration_status %}\nUser's registration status. (e.g. registration_complete, confirmed, uncertain) \n{% enddocs %}\n\n{% docs finish_with_state %}\nIf the registrant was eligible to use and passed through to complete their registration with their state\u2019s OVR system, it will be indicated in this field (direct quote from Rock-The-Vote documentation). Yes/No value in field.\n{% enddocs %}\n\n{% docs reportback_volume %}\nThis field returns 1 if non voter-reg action, since campaigns team only counts those a 1 reportback. If voter-reg action, we want to count quantity of post as number of registered voters.\n{% enddocs %}\n\n{% docs address_street_1 %}\nFirst line of user's street address\n{% enddocs %}\n\n{% docs address_street_2 %}\nSecond line of user's street address\n{% enddocs %}\n\n{% docs city %}\nUser's city\n{% enddocs %}\n\n{% docs state %}\nUser's state\n{% enddocs %}\n\n{% docs country %}\nUser's country\n{% enddocs %}\n\n{% docs language %}\nUser's language\n{% enddocs %}\n\n{% docs cio_status %}\nStatus of user from CIO. (e.g. customer_subscribed, customer_unsubscribed)\n{% enddocs %}\n\n{% docs cio_status_timestamp %}\nTimestamp when users's status was updated.\n{% enddocs %}\n\n{% docs sms_status %}\nCurrent SMS status. (e.g. undeliverable, unknown)\n{% enddocs %}\n\n{% docs source_detail %}\nDetails of the origin of the user. (e.g. tell_a_friend, other, opt_in_path/197981)\n{% enddocs %}\n\n{% docs badges %}\nWhether the user has any badges. \n{% enddocs %}\n\n{% docs refer_friends %}\nWhether the user is a part of the refer a friend campaign. \n{% enddocs %}\n\n{% docs subscribed_member %}\nWhether the user is subscribed. \n{% enddocs %}\n\n{% docs last_updated_at %}\nTimestamp when users's was updated.\n{% enddocs %}\n\n{% docs school_id %}\nUnique identifier for the user's school. This info comes from the school finder.\n{% enddocs %}\n\n{% docs newsletter_topic %}\nNewsletter topic. (e.g. community, lifestyle)\n{% enddocs %}\n\n{% docs user_agent %}\nFull user agent string for a user's browser (e.g. \"Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:24.0) Gecko/20100101 Firefox/24.0\")\n{% enddocs %}\n\n{% docs drupal_id %}\nOld Drupal user ID\n{% enddocs %}\n\n{% docs campaigns %}\nCampaigns a user is signed up for.\n{% enddocs %}\n\n{% docs audit %}\nA very useful field with data containing information about changes to a user, e.g. timestamps when the user subscribed and unsubscribed.\n{% enddocs %}\n\n{% docs voting_plan_status %}\nThe indication of the user's plan to vote, e.g. voting, not_voting, cant_vote\n{% enddocs %}\n\n{% docs voting_plan_time_of_day %}\nThe time of day when the user plans to vote, e.g morning, afternoon, evening\n{% enddocs %}\n\n{% docs voting_plan_method_of_transport %}\nHow the user plans to get to their polling place. e.g. walk, drive\n{% enddocs %}\n\n{% docs voting_plan_attending_with %}\nWith Whom the user plans to go voting, e.g. family, friends, alone\n{% enddocs %}\n\n{% docs feature_flags %}\nJSON containing info on features like badges and refer-a-friend.\n{% enddocs %}\n\n{% docs dbt_updated_at %}\nDBT snapshot table data. The updated_at timestamp of the source record when this snapshot row was inserted.\n{% enddocs %}\n\n{% docs dbt_scd_id %}\nDBT snapshot table data. A unique key generated for each snapshotted record.\n{% enddocs %}\n\n{% docs dbt_valid_from %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this snapshot row was first inserted\n{% enddocs %}\n\n{% docs dbt_valid_to %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this row row became invalidated.\n{% enddocs %}\n\n{% docs google_id %}\nUser's Google ID obtained from login.\n{% enddocs %}\n\n{% docs causes %}\nCauses in which a user is interested. e.g. animal welfare, education, mental_health\n{% enddocs %}\n\n{% docs email_subscription_status %}\nEmail subscription status of the user\n{% enddocs %}\n\n{% docs role %}\nUser's role, e.g. user, staff\n{% enddocs %}\n\n{% docs cio_backfilled %}\nWhether this user's data was backfilled from CIO\n{% enddocs %}\n\n{% docs addr_source %}\nWhere the user submitted their address, e.g. sms, GDPR\n{% enddocs %}\n\n{% docs email_subscription_topics %}\nEmail subscription topics correspond to categories in CIO in which the user is interested. e.g. lifestyle, community, scholarship\n{% enddocs %}\n\n{% docs sms_paused %}\nWhether we've paused sending sms messages to the user.\n{% enddocs %}\n\n\n\n\n", "name": "deleted_at", "unique_id": "ds_dbt.deleted_at", "block_contents": "Date time in UTC when a user deleted their post."}, "ds_dbt._fivetran_deleted": {"root_path": "/Users/mrich/projects/quasar/quasar/dbt", "resource_type": "docs", "path": "schema.md", "original_file_path": "models/schema.md", "package_name": "ds_dbt", "file_contents": "\n{% docs click_id %}\nThis is a unique identifier for each click\n{% enddocs %}\n\n{% docs click_time %}\nTimestamp when user clicked.\n{% enddocs %}\n\n{% docs shortened %}\nShortened URL\n{% enddocs %}\n\n{% docs target_url %}\nURL where the user will be directed\n{% enddocs %}\n\n{% docs broadcast_id %}\nID of the broadcast that generated the shortened URL\n{% enddocs %}\n\n{% docs source %}\nSource of the URL (e.g. SMS, web), origin of the post (e.g. phoenix-web, phoenix-ashes, sms), or source where user was acquired. (e.g. sms, phoenix-next)\n{% enddocs %}\n\n{% docs interaction_type %}\nHow the user interacted with the link (e.g. preview, click)\n{% enddocs %}\n\n{% docs id %}\nUnique identifier for the post\n{% enddocs %}\n\n{% docs type %}\nType of post (e.g. photo)\n{% enddocs %}\n\n{% docs action %}\nPost action (e.g. DefendDreamers_Nov9_CongressCalls, GunViolence2018_Feb15_ParklandResponse)\n{% enddocs %}\n\n{% docs status %}\nPost status (e.g. accepted, rejected)\n{% enddocs %}\n\n{% docs quantity %}\nNumerical quantity of items specified in the call to action (e.g. 10, 200)\n{% enddocs %}\n\n{% docs source_bucket %}\nGrouping bucket for origin of the post (e.g. web, sms) \n{% enddocs %}\n\n{% docs created_at %}\nWhen the item was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs updated_at %}\nWhen the item was updated in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs text %}\nText of the post (e.g. \"Zoo animals and a super hero trying to help too!\") \n{% enddocs %}\n\n{% docs signup_id %}\nUnique identifier for the signup \n{% enddocs %}\n\n{% docs post_class %}\nClass of the signup (e.g. \"photo - default\", \"phone-call - DefendDreamers_Jan16_BothBodies\")\n{% enddocs %}\n\n{% docs is_accepted %}\nWhether the post has been accepted to be displayed to the public on the website\n{% enddocs %}\n\n{% docs action_id %}\nInternal identifier of the action \n{% enddocs %}\n\n{% docs location %}\nLocation where the action takes place (e.g. US-NY)\n{% enddocs %}\n\n{% docs postal_code %}\nPostal code where the action takes place\n{% enddocs %}\n\n{% docs is_reportback %}\nWhether the post is a reportback. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs civic_action %}\nWhether the post is a Civic Action. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs scholarship_entry %}\nWhether the post is a Scholarship Entry. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs why_participated %}\nWhy the user participated in this action. Entered by the user.\n{% enddocs %}\n\n{% docs details %}\nDetails about the post. Contains contentfulId and other information (e.g. {\"campaignContentfulId\":\"6ATBgGEQEeJoIcxs1qbwaC\"})\n{% enddocs %}\n\n{% docs email %}\nEmail address of the user.\n{% enddocs %}\n\n{% docs source_details %}\nDetails about the source of the item. This is sometimes represented as a JSON object, and for other tables like Turbovote its represented as a string. (e.g. \"{\"contentful_id\":\"3CTLlXfbwtz1FOMpl31SKV\",\"utm_source\":\"scholarship_listing\",\"utm_medium\":\"referral\",\"utm_campaign\":\"fastweb_2019_08\"}\", newsletter_456)\n{% enddocs %}\n\n{% docs campaign_id %}\nThis is a unique identifier for the campaign\n{% enddocs %}\n\n{% docs campaign_run_id %}\nUnique identifier for the campaign run\n{% enddocs %}\n\n{% docs campaign_name %}\nName of the campaign\n{% enddocs %}\n\n{% docs campaign_cause %}\nCampaign cause (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_run_start_date %}\nStart date of the campaign run\n{% enddocs %}\n\n{% docs campaign_run_end_date %}\nEnd date of the campaign run\n{% enddocs %}\n\n{% docs campaign_created_date %}\nWhen the campaign was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs campaign_node_id %}\nInternal unique node id for the campaign\n{% enddocs %}\n\n{% docs campaign_node_id_title %}\nCampaign title\n{% enddocs %}\n\n{% docs campaign_run_id_title %}\nTitle of the campaign run\n{% enddocs %}\n\n{% docs campaign_action_type %}\nCampaign action type (eg. Make Something, Share Something)\n{% enddocs %}\n\n{% docs campaign_cause_type %}\nCampaign cause type (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_noun %}\nNoun applicable to the user's action\n{% enddocs %}\n\n{% docs campaign_verb %}\nVerb describing the action the user should take\n{% enddocs %}\n\n{% docs campaign_cta %}\nCampaign's call to action\n{% enddocs %}\n\n{% docs campaign_language %}\n\"Language in which the campaign is available\"\n{% enddocs %}\n\n{% docs agent_id %}\nIf set, the content type of the picture the member is sending us. Exp. image/png.\n{% enddocs %}\n\n{% docs attachment_content_type %}\nIf set, the handle of the Front agent this outbound support message is from.\n{% enddocs %}\n\n{% docs topic %}\nHolds a reference to the **last** campaign topic the member's conversation was in. This is useful to allow members to talk to Gambit and get quick responses (through Rivescript), without Gambit completely forgetting what state the member's interaction with a campaign topic was in.\n{% enddocs %}\n\n{% docs action_serial_id %}\nSerial id for the user's action. Depends on the source of the action. May be the bertly click id, sms message id, etc.\n{% enddocs %}\n\n{% docs channel %}\nChannel for the user's action. Depends on the source of the action. (e.g. web, sms)\n{% enddocs %}\n\n{% docs first_action_month %}\nMonth during which the user took their first action. \n{% enddocs %}\n\n{% docs event_id %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs event_source %}\nApplication source for event (eg. Phoenix, Northstar)\n{% enddocs %}\n\n{% docs event_datetime %}\nWhen the event occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs event_name %}\nName of the event (eg. northstar_submitted_register, https://docs.google.com/spreadsheets/d/1lm-fGrIm85nUTxSojqyCt_Ehmm1zEbViFhKpxcJiz1A/edit#gid=406441516)\n{% enddocs %}\n\n{% docs event_type %}\nType of event (pv = 'Page View', se = 'Structured Event')\n{% enddocs %}\n\n{% docs host %}\nURL host where event occurred (eg. www.dosomething.org or identity.dosomething.org)\n{% enddocs %}\n\n{% docs path %}\nURL path event occurred at (eg. /login or /us/campaigns/huddle-for-heroes)\n{% enddocs %}\n\n{% docs query_parameters %}\nOptional query parameters for the request (eg. query=huddle)\n{% enddocs %}\n\n{% docs se_category %}\nCategory of event (eg. focused_field, authentication) - Custom structured event\n{% enddocs %}\n\n{% docs se_action %}\nAction performed / event name (eg. form_submitted, action_failed) - Custom structured event\n{% enddocs %}\n\n{% docs se_label %}\nThe object of the action (eg. first_name, register, voter_reg_status) - Custom structured event\n{% enddocs %}\n\n{% docs session_id %}\nUnique identifier of the user's session\n{% enddocs %}\n\n{% docs session_counter %}\nHow many sessions a user has started\n{% enddocs %}\n\n{% docs browser_size %}\nWhich type of browser a user is using (eg. Mobile, Desktop)\n{% enddocs %}\n\n{% docs northstar_id %}\nThe Northstar ID of the user who generated the event\n{% enddocs %}\n\n{% docs device_id %}\nID of the device used\n{% enddocs %}\n\n{% docs referrer_host %}\nURL host of the referring site (eg. google.com)\n{% enddocs %}\n\n{% docs referrer_path %}\nURL path from referring site (eg. /10-stats-on-teen-drug-and-alcohol-use/)\n{% enddocs %}\n\n{% docs referrer_source %}\nReferrer source name (eg. Google, Facebook)\n{% enddocs %}\n\n{% docs utm_source %}\nTracks where the traffic is coming from. (eg. scholarship_listing, Facebook)\n{% enddocs %}\n\n{% docs utm_medium %}\nHow the traffic got to the platform (eg. referral, CPC)\n{% enddocs %}\n\n{% docs utm_campaign %}\nTracks which campaign the traffic was generated by. Shows up in Google Analytics as Campaign Name (eg. editorial_newsletter)\n{% enddocs %}\n\n{% docs url %}\nURL of campaign (eg. https://dosome.click/nyn5m7)\n{% enddocs %}\n\n{% docs modal_type %}\nNULL or SURVEY_MODAL\n{% enddocs %}\n\n{% docs landing_datetime %}\nWhen the session started in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs ending_datetime %}\nWhen the session ended in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs session_duration_seconds %}\nSession duration in seconds\n{% enddocs %}\n\n{% docs num_pages_views %}\nNumber of pages viewed in session\n{% enddocs %}\n\n{% docs landing_page %}\nFirst page the user viewed in the session (eg. /us/facts/11-facts-about-bp-oil-spill)\n{% enddocs %}\n\n{% docs exit_page %}\n\"Which page the user ended or exited their session from (eg. /us/campaigns/green-your-getaway)\"\n{% enddocs %}\n\n{% docs days_since_last_session %}\n\"Days since their last session.\"\n{% enddocs %}\n\n{% docs post_type %}\nType of post, (e.g. photo, voter-reg)\n{% enddocs %}\n\n{% docs noun %}\nNoun that corresponds to the item in the call to action that was delivered. (e.g. drawings, tweets)\n{% enddocs %}\n\n{% docs verb %}\nVerb corresponding to the action the user took. (e.g. shared, sent, taken)\n{% enddocs %}\n\n{% docs deleted_at %}\nDate time in UTC when a user deleted their post.\n{% enddocs %}\n\n{% docs _fivetran_deleted %}\nMarks rows that were deleted in the source table\n{% enddocs %}\n\n{% docs _fivetran_synced %}\n(UTC timestamp) keeps track of when each row was last successfully synced\n{% enddocs %}\n\n{% docs reportback %}\nWhether the post is a reportback \n{% enddocs %}\n\n{% docs active %}\nWhether the user is active \n{% enddocs %}\n\n{% docs anonymous %}\nWhether the user is anonymous when making the post \n{% enddocs %}\n\n{% docs callpower_campaign_id %}\nUnique ID corresponding to the Callpower campaign. Callpower allows users to record messages for their representatives.\n{% enddocs %}\n\n{% docs quiz %}\nWhether the post is a quiz \n{% enddocs %}\n\n{% docs action_type %}\nType of action the user took. (e.g. share-something, donate-something)\n{% enddocs %}\n\n{% docs online %}\nWhether the action is a online as opposed to IRL.\n{% enddocs %}\n\n{% docs time_commitment %}\nEstimated time required to do the action (e.g. 3.0+, <0.5)\n{% enddocs %}\n\n{% docs num_signups %}\nQuantity of campaign signups\n{% enddocs %}\n\n{% docs most_recent_signup %}\nTimestamp of the most recent signup in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs num_rbs %}\nQuantity of reportbacks for the user\n{% enddocs %}\n\n{% docs total_quantity %}\nTotal quantity of items in reportbacks\n{% enddocs %}\n\n{% docs most_recent_rb %}\nWhen the most recent reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs first_rb %}\nWhen the first reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs avg_time_betw_rbs %}\nCalculated average time between reportbacks.\n{% enddocs %}\n\n{% docs avg_days_next_action_after_rb %}\nCalculated average days until next action after reportback\n{% enddocs %}\n\n{% docs days_to_next_action_after_last_rb %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs most_recent_mam_action %}\nMost recent monthly active member qualifying action in UTC (eg. 2018-01-01 12:00:00).\n{% enddocs %}\n\n{% docs most_recent_email_open %}\nMost recent email open in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs most_recent_all_actions %}\nMost recent timestamp of any action in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs last_action_is_rb %}\nWhether the last action the user took was a reportback\n{% enddocs %}\n\n{% docs days_since_last_action %}\nDays since the user's last action\n{% enddocs %}\n\n{% docs time_to_first_rb %}\nHow much time after registering until the user's first reportback\n{% enddocs %}\n\n{% docs sms_unsubscribed_at %}\nTimestamp of when user unsubscribed from SMS messaging\n{% enddocs %}\n\n{% docs user_unsubscribed_at %}\nTimestamp of when user unsubscribed from email or sms\n{% enddocs %}\n\n{% docs voter_reg_acquisition %}\nWhether the user was an acquisition through voter registration efforts. \n{% enddocs %}\n\n{% docs last_logged_in %}\nDate time in UTC when user last logged in to Northstar\n{% enddocs %}\n\n{% docs last_accessed %}\nDate time in UTC when user last access the website\n{% enddocs %}\n\n{% docs last_messaged_at %}\nDate time in UTC when user was last sent a message via SMS or email\n{% enddocs %}\n\n{% docs facebook_id %}\nUser's facebook id\n{% enddocs %}\n\n{% docs mobile %}\nUsers's mobile phone number\n{% enddocs %}\n\n{% docs birthdate %}\nUser's birthdate\n{% enddocs %}\n\n{% docs first_name %}\nUser's first name\n{% enddocs %}\n\n{% docs last_name %}\nUser's last name\n{% enddocs %}\n\n{% docs voter_registration_status %}\nUser's registration status. (e.g. registration_complete, confirmed, uncertain) \n{% enddocs %}\n\n{% docs finish_with_state %}\nIf the registrant was eligible to use and passed through to complete their registration with their state\u2019s OVR system, it will be indicated in this field (direct quote from Rock-The-Vote documentation). Yes/No value in field.\n{% enddocs %}\n\n{% docs reportback_volume %}\nThis field returns 1 if non voter-reg action, since campaigns team only counts those a 1 reportback. If voter-reg action, we want to count quantity of post as number of registered voters.\n{% enddocs %}\n\n{% docs address_street_1 %}\nFirst line of user's street address\n{% enddocs %}\n\n{% docs address_street_2 %}\nSecond line of user's street address\n{% enddocs %}\n\n{% docs city %}\nUser's city\n{% enddocs %}\n\n{% docs state %}\nUser's state\n{% enddocs %}\n\n{% docs country %}\nUser's country\n{% enddocs %}\n\n{% docs language %}\nUser's language\n{% enddocs %}\n\n{% docs cio_status %}\nStatus of user from CIO. (e.g. customer_subscribed, customer_unsubscribed)\n{% enddocs %}\n\n{% docs cio_status_timestamp %}\nTimestamp when users's status was updated.\n{% enddocs %}\n\n{% docs sms_status %}\nCurrent SMS status. (e.g. undeliverable, unknown)\n{% enddocs %}\n\n{% docs source_detail %}\nDetails of the origin of the user. (e.g. tell_a_friend, other, opt_in_path/197981)\n{% enddocs %}\n\n{% docs badges %}\nWhether the user has any badges. \n{% enddocs %}\n\n{% docs refer_friends %}\nWhether the user is a part of the refer a friend campaign. \n{% enddocs %}\n\n{% docs subscribed_member %}\nWhether the user is subscribed. \n{% enddocs %}\n\n{% docs last_updated_at %}\nTimestamp when users's was updated.\n{% enddocs %}\n\n{% docs school_id %}\nUnique identifier for the user's school. This info comes from the school finder.\n{% enddocs %}\n\n{% docs newsletter_topic %}\nNewsletter topic. (e.g. community, lifestyle)\n{% enddocs %}\n\n{% docs user_agent %}\nFull user agent string for a user's browser (e.g. \"Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:24.0) Gecko/20100101 Firefox/24.0\")\n{% enddocs %}\n\n{% docs drupal_id %}\nOld Drupal user ID\n{% enddocs %}\n\n{% docs campaigns %}\nCampaigns a user is signed up for.\n{% enddocs %}\n\n{% docs audit %}\nA very useful field with data containing information about changes to a user, e.g. timestamps when the user subscribed and unsubscribed.\n{% enddocs %}\n\n{% docs voting_plan_status %}\nThe indication of the user's plan to vote, e.g. voting, not_voting, cant_vote\n{% enddocs %}\n\n{% docs voting_plan_time_of_day %}\nThe time of day when the user plans to vote, e.g morning, afternoon, evening\n{% enddocs %}\n\n{% docs voting_plan_method_of_transport %}\nHow the user plans to get to their polling place. e.g. walk, drive\n{% enddocs %}\n\n{% docs voting_plan_attending_with %}\nWith Whom the user plans to go voting, e.g. family, friends, alone\n{% enddocs %}\n\n{% docs feature_flags %}\nJSON containing info on features like badges and refer-a-friend.\n{% enddocs %}\n\n{% docs dbt_updated_at %}\nDBT snapshot table data. The updated_at timestamp of the source record when this snapshot row was inserted.\n{% enddocs %}\n\n{% docs dbt_scd_id %}\nDBT snapshot table data. A unique key generated for each snapshotted record.\n{% enddocs %}\n\n{% docs dbt_valid_from %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this snapshot row was first inserted\n{% enddocs %}\n\n{% docs dbt_valid_to %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this row row became invalidated.\n{% enddocs %}\n\n{% docs google_id %}\nUser's Google ID obtained from login.\n{% enddocs %}\n\n{% docs causes %}\nCauses in which a user is interested. e.g. animal welfare, education, mental_health\n{% enddocs %}\n\n{% docs email_subscription_status %}\nEmail subscription status of the user\n{% enddocs %}\n\n{% docs role %}\nUser's role, e.g. user, staff\n{% enddocs %}\n\n{% docs cio_backfilled %}\nWhether this user's data was backfilled from CIO\n{% enddocs %}\n\n{% docs addr_source %}\nWhere the user submitted their address, e.g. sms, GDPR\n{% enddocs %}\n\n{% docs email_subscription_topics %}\nEmail subscription topics correspond to categories in CIO in which the user is interested. e.g. lifestyle, community, scholarship\n{% enddocs %}\n\n{% docs sms_paused %}\nWhether we've paused sending sms messages to the user.\n{% enddocs %}\n\n\n\n\n", "name": "_fivetran_deleted", "unique_id": "ds_dbt._fivetran_deleted", "block_contents": "Marks rows that were deleted in the source table"}, "ds_dbt._fivetran_synced": {"root_path": "/Users/mrich/projects/quasar/quasar/dbt", "resource_type": "docs", "path": "schema.md", "original_file_path": "models/schema.md", "package_name": "ds_dbt", "file_contents": "\n{% docs click_id %}\nThis is a unique identifier for each click\n{% enddocs %}\n\n{% docs click_time %}\nTimestamp when user clicked.\n{% enddocs %}\n\n{% docs shortened %}\nShortened URL\n{% enddocs %}\n\n{% docs target_url %}\nURL where the user will be directed\n{% enddocs %}\n\n{% docs broadcast_id %}\nID of the broadcast that generated the shortened URL\n{% enddocs %}\n\n{% docs source %}\nSource of the URL (e.g. SMS, web), origin of the post (e.g. phoenix-web, phoenix-ashes, sms), or source where user was acquired. (e.g. sms, phoenix-next)\n{% enddocs %}\n\n{% docs interaction_type %}\nHow the user interacted with the link (e.g. preview, click)\n{% enddocs %}\n\n{% docs id %}\nUnique identifier for the post\n{% enddocs %}\n\n{% docs type %}\nType of post (e.g. photo)\n{% enddocs %}\n\n{% docs action %}\nPost action (e.g. DefendDreamers_Nov9_CongressCalls, GunViolence2018_Feb15_ParklandResponse)\n{% enddocs %}\n\n{% docs status %}\nPost status (e.g. accepted, rejected)\n{% enddocs %}\n\n{% docs quantity %}\nNumerical quantity of items specified in the call to action (e.g. 10, 200)\n{% enddocs %}\n\n{% docs source_bucket %}\nGrouping bucket for origin of the post (e.g. web, sms) \n{% enddocs %}\n\n{% docs created_at %}\nWhen the item was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs updated_at %}\nWhen the item was updated in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs text %}\nText of the post (e.g. \"Zoo animals and a super hero trying to help too!\") \n{% enddocs %}\n\n{% docs signup_id %}\nUnique identifier for the signup \n{% enddocs %}\n\n{% docs post_class %}\nClass of the signup (e.g. \"photo - default\", \"phone-call - DefendDreamers_Jan16_BothBodies\")\n{% enddocs %}\n\n{% docs is_accepted %}\nWhether the post has been accepted to be displayed to the public on the website\n{% enddocs %}\n\n{% docs action_id %}\nInternal identifier of the action \n{% enddocs %}\n\n{% docs location %}\nLocation where the action takes place (e.g. US-NY)\n{% enddocs %}\n\n{% docs postal_code %}\nPostal code where the action takes place\n{% enddocs %}\n\n{% docs is_reportback %}\nWhether the post is a reportback. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs civic_action %}\nWhether the post is a Civic Action. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs scholarship_entry %}\nWhether the post is a Scholarship Entry. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs why_participated %}\nWhy the user participated in this action. Entered by the user.\n{% enddocs %}\n\n{% docs details %}\nDetails about the post. Contains contentfulId and other information (e.g. {\"campaignContentfulId\":\"6ATBgGEQEeJoIcxs1qbwaC\"})\n{% enddocs %}\n\n{% docs email %}\nEmail address of the user.\n{% enddocs %}\n\n{% docs source_details %}\nDetails about the source of the item. This is sometimes represented as a JSON object, and for other tables like Turbovote its represented as a string. (e.g. \"{\"contentful_id\":\"3CTLlXfbwtz1FOMpl31SKV\",\"utm_source\":\"scholarship_listing\",\"utm_medium\":\"referral\",\"utm_campaign\":\"fastweb_2019_08\"}\", newsletter_456)\n{% enddocs %}\n\n{% docs campaign_id %}\nThis is a unique identifier for the campaign\n{% enddocs %}\n\n{% docs campaign_run_id %}\nUnique identifier for the campaign run\n{% enddocs %}\n\n{% docs campaign_name %}\nName of the campaign\n{% enddocs %}\n\n{% docs campaign_cause %}\nCampaign cause (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_run_start_date %}\nStart date of the campaign run\n{% enddocs %}\n\n{% docs campaign_run_end_date %}\nEnd date of the campaign run\n{% enddocs %}\n\n{% docs campaign_created_date %}\nWhen the campaign was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs campaign_node_id %}\nInternal unique node id for the campaign\n{% enddocs %}\n\n{% docs campaign_node_id_title %}\nCampaign title\n{% enddocs %}\n\n{% docs campaign_run_id_title %}\nTitle of the campaign run\n{% enddocs %}\n\n{% docs campaign_action_type %}\nCampaign action type (eg. Make Something, Share Something)\n{% enddocs %}\n\n{% docs campaign_cause_type %}\nCampaign cause type (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_noun %}\nNoun applicable to the user's action\n{% enddocs %}\n\n{% docs campaign_verb %}\nVerb describing the action the user should take\n{% enddocs %}\n\n{% docs campaign_cta %}\nCampaign's call to action\n{% enddocs %}\n\n{% docs campaign_language %}\n\"Language in which the campaign is available\"\n{% enddocs %}\n\n{% docs agent_id %}\nIf set, the content type of the picture the member is sending us. Exp. image/png.\n{% enddocs %}\n\n{% docs attachment_content_type %}\nIf set, the handle of the Front agent this outbound support message is from.\n{% enddocs %}\n\n{% docs topic %}\nHolds a reference to the **last** campaign topic the member's conversation was in. This is useful to allow members to talk to Gambit and get quick responses (through Rivescript), without Gambit completely forgetting what state the member's interaction with a campaign topic was in.\n{% enddocs %}\n\n{% docs action_serial_id %}\nSerial id for the user's action. Depends on the source of the action. May be the bertly click id, sms message id, etc.\n{% enddocs %}\n\n{% docs channel %}\nChannel for the user's action. Depends on the source of the action. (e.g. web, sms)\n{% enddocs %}\n\n{% docs first_action_month %}\nMonth during which the user took their first action. \n{% enddocs %}\n\n{% docs event_id %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs event_source %}\nApplication source for event (eg. Phoenix, Northstar)\n{% enddocs %}\n\n{% docs event_datetime %}\nWhen the event occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs event_name %}\nName of the event (eg. northstar_submitted_register, https://docs.google.com/spreadsheets/d/1lm-fGrIm85nUTxSojqyCt_Ehmm1zEbViFhKpxcJiz1A/edit#gid=406441516)\n{% enddocs %}\n\n{% docs event_type %}\nType of event (pv = 'Page View', se = 'Structured Event')\n{% enddocs %}\n\n{% docs host %}\nURL host where event occurred (eg. www.dosomething.org or identity.dosomething.org)\n{% enddocs %}\n\n{% docs path %}\nURL path event occurred at (eg. /login or /us/campaigns/huddle-for-heroes)\n{% enddocs %}\n\n{% docs query_parameters %}\nOptional query parameters for the request (eg. query=huddle)\n{% enddocs %}\n\n{% docs se_category %}\nCategory of event (eg. focused_field, authentication) - Custom structured event\n{% enddocs %}\n\n{% docs se_action %}\nAction performed / event name (eg. form_submitted, action_failed) - Custom structured event\n{% enddocs %}\n\n{% docs se_label %}\nThe object of the action (eg. first_name, register, voter_reg_status) - Custom structured event\n{% enddocs %}\n\n{% docs session_id %}\nUnique identifier of the user's session\n{% enddocs %}\n\n{% docs session_counter %}\nHow many sessions a user has started\n{% enddocs %}\n\n{% docs browser_size %}\nWhich type of browser a user is using (eg. Mobile, Desktop)\n{% enddocs %}\n\n{% docs northstar_id %}\nThe Northstar ID of the user who generated the event\n{% enddocs %}\n\n{% docs device_id %}\nID of the device used\n{% enddocs %}\n\n{% docs referrer_host %}\nURL host of the referring site (eg. google.com)\n{% enddocs %}\n\n{% docs referrer_path %}\nURL path from referring site (eg. /10-stats-on-teen-drug-and-alcohol-use/)\n{% enddocs %}\n\n{% docs referrer_source %}\nReferrer source name (eg. Google, Facebook)\n{% enddocs %}\n\n{% docs utm_source %}\nTracks where the traffic is coming from. (eg. scholarship_listing, Facebook)\n{% enddocs %}\n\n{% docs utm_medium %}\nHow the traffic got to the platform (eg. referral, CPC)\n{% enddocs %}\n\n{% docs utm_campaign %}\nTracks which campaign the traffic was generated by. Shows up in Google Analytics as Campaign Name (eg. editorial_newsletter)\n{% enddocs %}\n\n{% docs url %}\nURL of campaign (eg. https://dosome.click/nyn5m7)\n{% enddocs %}\n\n{% docs modal_type %}\nNULL or SURVEY_MODAL\n{% enddocs %}\n\n{% docs landing_datetime %}\nWhen the session started in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs ending_datetime %}\nWhen the session ended in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs session_duration_seconds %}\nSession duration in seconds\n{% enddocs %}\n\n{% docs num_pages_views %}\nNumber of pages viewed in session\n{% enddocs %}\n\n{% docs landing_page %}\nFirst page the user viewed in the session (eg. /us/facts/11-facts-about-bp-oil-spill)\n{% enddocs %}\n\n{% docs exit_page %}\n\"Which page the user ended or exited their session from (eg. /us/campaigns/green-your-getaway)\"\n{% enddocs %}\n\n{% docs days_since_last_session %}\n\"Days since their last session.\"\n{% enddocs %}\n\n{% docs post_type %}\nType of post, (e.g. photo, voter-reg)\n{% enddocs %}\n\n{% docs noun %}\nNoun that corresponds to the item in the call to action that was delivered. (e.g. drawings, tweets)\n{% enddocs %}\n\n{% docs verb %}\nVerb corresponding to the action the user took. (e.g. shared, sent, taken)\n{% enddocs %}\n\n{% docs deleted_at %}\nDate time in UTC when a user deleted their post.\n{% enddocs %}\n\n{% docs _fivetran_deleted %}\nMarks rows that were deleted in the source table\n{% enddocs %}\n\n{% docs _fivetran_synced %}\n(UTC timestamp) keeps track of when each row was last successfully synced\n{% enddocs %}\n\n{% docs reportback %}\nWhether the post is a reportback \n{% enddocs %}\n\n{% docs active %}\nWhether the user is active \n{% enddocs %}\n\n{% docs anonymous %}\nWhether the user is anonymous when making the post \n{% enddocs %}\n\n{% docs callpower_campaign_id %}\nUnique ID corresponding to the Callpower campaign. Callpower allows users to record messages for their representatives.\n{% enddocs %}\n\n{% docs quiz %}\nWhether the post is a quiz \n{% enddocs %}\n\n{% docs action_type %}\nType of action the user took. (e.g. share-something, donate-something)\n{% enddocs %}\n\n{% docs online %}\nWhether the action is a online as opposed to IRL.\n{% enddocs %}\n\n{% docs time_commitment %}\nEstimated time required to do the action (e.g. 3.0+, <0.5)\n{% enddocs %}\n\n{% docs num_signups %}\nQuantity of campaign signups\n{% enddocs %}\n\n{% docs most_recent_signup %}\nTimestamp of the most recent signup in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs num_rbs %}\nQuantity of reportbacks for the user\n{% enddocs %}\n\n{% docs total_quantity %}\nTotal quantity of items in reportbacks\n{% enddocs %}\n\n{% docs most_recent_rb %}\nWhen the most recent reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs first_rb %}\nWhen the first reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs avg_time_betw_rbs %}\nCalculated average time between reportbacks.\n{% enddocs %}\n\n{% docs avg_days_next_action_after_rb %}\nCalculated average days until next action after reportback\n{% enddocs %}\n\n{% docs days_to_next_action_after_last_rb %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs most_recent_mam_action %}\nMost recent monthly active member qualifying action in UTC (eg. 2018-01-01 12:00:00).\n{% enddocs %}\n\n{% docs most_recent_email_open %}\nMost recent email open in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs most_recent_all_actions %}\nMost recent timestamp of any action in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs last_action_is_rb %}\nWhether the last action the user took was a reportback\n{% enddocs %}\n\n{% docs days_since_last_action %}\nDays since the user's last action\n{% enddocs %}\n\n{% docs time_to_first_rb %}\nHow much time after registering until the user's first reportback\n{% enddocs %}\n\n{% docs sms_unsubscribed_at %}\nTimestamp of when user unsubscribed from SMS messaging\n{% enddocs %}\n\n{% docs user_unsubscribed_at %}\nTimestamp of when user unsubscribed from email or sms\n{% enddocs %}\n\n{% docs voter_reg_acquisition %}\nWhether the user was an acquisition through voter registration efforts. \n{% enddocs %}\n\n{% docs last_logged_in %}\nDate time in UTC when user last logged in to Northstar\n{% enddocs %}\n\n{% docs last_accessed %}\nDate time in UTC when user last access the website\n{% enddocs %}\n\n{% docs last_messaged_at %}\nDate time in UTC when user was last sent a message via SMS or email\n{% enddocs %}\n\n{% docs facebook_id %}\nUser's facebook id\n{% enddocs %}\n\n{% docs mobile %}\nUsers's mobile phone number\n{% enddocs %}\n\n{% docs birthdate %}\nUser's birthdate\n{% enddocs %}\n\n{% docs first_name %}\nUser's first name\n{% enddocs %}\n\n{% docs last_name %}\nUser's last name\n{% enddocs %}\n\n{% docs voter_registration_status %}\nUser's registration status. (e.g. registration_complete, confirmed, uncertain) \n{% enddocs %}\n\n{% docs finish_with_state %}\nIf the registrant was eligible to use and passed through to complete their registration with their state\u2019s OVR system, it will be indicated in this field (direct quote from Rock-The-Vote documentation). Yes/No value in field.\n{% enddocs %}\n\n{% docs reportback_volume %}\nThis field returns 1 if non voter-reg action, since campaigns team only counts those a 1 reportback. If voter-reg action, we want to count quantity of post as number of registered voters.\n{% enddocs %}\n\n{% docs address_street_1 %}\nFirst line of user's street address\n{% enddocs %}\n\n{% docs address_street_2 %}\nSecond line of user's street address\n{% enddocs %}\n\n{% docs city %}\nUser's city\n{% enddocs %}\n\n{% docs state %}\nUser's state\n{% enddocs %}\n\n{% docs country %}\nUser's country\n{% enddocs %}\n\n{% docs language %}\nUser's language\n{% enddocs %}\n\n{% docs cio_status %}\nStatus of user from CIO. (e.g. customer_subscribed, customer_unsubscribed)\n{% enddocs %}\n\n{% docs cio_status_timestamp %}\nTimestamp when users's status was updated.\n{% enddocs %}\n\n{% docs sms_status %}\nCurrent SMS status. (e.g. undeliverable, unknown)\n{% enddocs %}\n\n{% docs source_detail %}\nDetails of the origin of the user. (e.g. tell_a_friend, other, opt_in_path/197981)\n{% enddocs %}\n\n{% docs badges %}\nWhether the user has any badges. \n{% enddocs %}\n\n{% docs refer_friends %}\nWhether the user is a part of the refer a friend campaign. \n{% enddocs %}\n\n{% docs subscribed_member %}\nWhether the user is subscribed. \n{% enddocs %}\n\n{% docs last_updated_at %}\nTimestamp when users's was updated.\n{% enddocs %}\n\n{% docs school_id %}\nUnique identifier for the user's school. This info comes from the school finder.\n{% enddocs %}\n\n{% docs newsletter_topic %}\nNewsletter topic. (e.g. community, lifestyle)\n{% enddocs %}\n\n{% docs user_agent %}\nFull user agent string for a user's browser (e.g. \"Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:24.0) Gecko/20100101 Firefox/24.0\")\n{% enddocs %}\n\n{% docs drupal_id %}\nOld Drupal user ID\n{% enddocs %}\n\n{% docs campaigns %}\nCampaigns a user is signed up for.\n{% enddocs %}\n\n{% docs audit %}\nA very useful field with data containing information about changes to a user, e.g. timestamps when the user subscribed and unsubscribed.\n{% enddocs %}\n\n{% docs voting_plan_status %}\nThe indication of the user's plan to vote, e.g. voting, not_voting, cant_vote\n{% enddocs %}\n\n{% docs voting_plan_time_of_day %}\nThe time of day when the user plans to vote, e.g morning, afternoon, evening\n{% enddocs %}\n\n{% docs voting_plan_method_of_transport %}\nHow the user plans to get to their polling place. e.g. walk, drive\n{% enddocs %}\n\n{% docs voting_plan_attending_with %}\nWith Whom the user plans to go voting, e.g. family, friends, alone\n{% enddocs %}\n\n{% docs feature_flags %}\nJSON containing info on features like badges and refer-a-friend.\n{% enddocs %}\n\n{% docs dbt_updated_at %}\nDBT snapshot table data. The updated_at timestamp of the source record when this snapshot row was inserted.\n{% enddocs %}\n\n{% docs dbt_scd_id %}\nDBT snapshot table data. A unique key generated for each snapshotted record.\n{% enddocs %}\n\n{% docs dbt_valid_from %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this snapshot row was first inserted\n{% enddocs %}\n\n{% docs dbt_valid_to %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this row row became invalidated.\n{% enddocs %}\n\n{% docs google_id %}\nUser's Google ID obtained from login.\n{% enddocs %}\n\n{% docs causes %}\nCauses in which a user is interested. e.g. animal welfare, education, mental_health\n{% enddocs %}\n\n{% docs email_subscription_status %}\nEmail subscription status of the user\n{% enddocs %}\n\n{% docs role %}\nUser's role, e.g. user, staff\n{% enddocs %}\n\n{% docs cio_backfilled %}\nWhether this user's data was backfilled from CIO\n{% enddocs %}\n\n{% docs addr_source %}\nWhere the user submitted their address, e.g. sms, GDPR\n{% enddocs %}\n\n{% docs email_subscription_topics %}\nEmail subscription topics correspond to categories in CIO in which the user is interested. e.g. lifestyle, community, scholarship\n{% enddocs %}\n\n{% docs sms_paused %}\nWhether we've paused sending sms messages to the user.\n{% enddocs %}\n\n\n\n\n", "name": "_fivetran_synced", "unique_id": "ds_dbt._fivetran_synced", "block_contents": "(UTC timestamp) keeps track of when each row was last successfully synced"}, "ds_dbt.reportback": {"root_path": "/Users/mrich/projects/quasar/quasar/dbt", "resource_type": "docs", "path": "schema.md", "original_file_path": "models/schema.md", "package_name": "ds_dbt", "file_contents": "\n{% docs click_id %}\nThis is a unique identifier for each click\n{% enddocs %}\n\n{% docs click_time %}\nTimestamp when user clicked.\n{% enddocs %}\n\n{% docs shortened %}\nShortened URL\n{% enddocs %}\n\n{% docs target_url %}\nURL where the user will be directed\n{% enddocs %}\n\n{% docs broadcast_id %}\nID of the broadcast that generated the shortened URL\n{% enddocs %}\n\n{% docs source %}\nSource of the URL (e.g. SMS, web), origin of the post (e.g. phoenix-web, phoenix-ashes, sms), or source where user was acquired. (e.g. sms, phoenix-next)\n{% enddocs %}\n\n{% docs interaction_type %}\nHow the user interacted with the link (e.g. preview, click)\n{% enddocs %}\n\n{% docs id %}\nUnique identifier for the post\n{% enddocs %}\n\n{% docs type %}\nType of post (e.g. photo)\n{% enddocs %}\n\n{% docs action %}\nPost action (e.g. DefendDreamers_Nov9_CongressCalls, GunViolence2018_Feb15_ParklandResponse)\n{% enddocs %}\n\n{% docs status %}\nPost status (e.g. accepted, rejected)\n{% enddocs %}\n\n{% docs quantity %}\nNumerical quantity of items specified in the call to action (e.g. 10, 200)\n{% enddocs %}\n\n{% docs source_bucket %}\nGrouping bucket for origin of the post (e.g. web, sms) \n{% enddocs %}\n\n{% docs created_at %}\nWhen the item was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs updated_at %}\nWhen the item was updated in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs text %}\nText of the post (e.g. \"Zoo animals and a super hero trying to help too!\") \n{% enddocs %}\n\n{% docs signup_id %}\nUnique identifier for the signup \n{% enddocs %}\n\n{% docs post_class %}\nClass of the signup (e.g. \"photo - default\", \"phone-call - DefendDreamers_Jan16_BothBodies\")\n{% enddocs %}\n\n{% docs is_accepted %}\nWhether the post has been accepted to be displayed to the public on the website\n{% enddocs %}\n\n{% docs action_id %}\nInternal identifier of the action \n{% enddocs %}\n\n{% docs location %}\nLocation where the action takes place (e.g. US-NY)\n{% enddocs %}\n\n{% docs postal_code %}\nPostal code where the action takes place\n{% enddocs %}\n\n{% docs is_reportback %}\nWhether the post is a reportback. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs civic_action %}\nWhether the post is a Civic Action. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs scholarship_entry %}\nWhether the post is a Scholarship Entry. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs why_participated %}\nWhy the user participated in this action. Entered by the user.\n{% enddocs %}\n\n{% docs details %}\nDetails about the post. Contains contentfulId and other information (e.g. {\"campaignContentfulId\":\"6ATBgGEQEeJoIcxs1qbwaC\"})\n{% enddocs %}\n\n{% docs email %}\nEmail address of the user.\n{% enddocs %}\n\n{% docs source_details %}\nDetails about the source of the item. This is sometimes represented as a JSON object, and for other tables like Turbovote its represented as a string. (e.g. \"{\"contentful_id\":\"3CTLlXfbwtz1FOMpl31SKV\",\"utm_source\":\"scholarship_listing\",\"utm_medium\":\"referral\",\"utm_campaign\":\"fastweb_2019_08\"}\", newsletter_456)\n{% enddocs %}\n\n{% docs campaign_id %}\nThis is a unique identifier for the campaign\n{% enddocs %}\n\n{% docs campaign_run_id %}\nUnique identifier for the campaign run\n{% enddocs %}\n\n{% docs campaign_name %}\nName of the campaign\n{% enddocs %}\n\n{% docs campaign_cause %}\nCampaign cause (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_run_start_date %}\nStart date of the campaign run\n{% enddocs %}\n\n{% docs campaign_run_end_date %}\nEnd date of the campaign run\n{% enddocs %}\n\n{% docs campaign_created_date %}\nWhen the campaign was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs campaign_node_id %}\nInternal unique node id for the campaign\n{% enddocs %}\n\n{% docs campaign_node_id_title %}\nCampaign title\n{% enddocs %}\n\n{% docs campaign_run_id_title %}\nTitle of the campaign run\n{% enddocs %}\n\n{% docs campaign_action_type %}\nCampaign action type (eg. Make Something, Share Something)\n{% enddocs %}\n\n{% docs campaign_cause_type %}\nCampaign cause type (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_noun %}\nNoun applicable to the user's action\n{% enddocs %}\n\n{% docs campaign_verb %}\nVerb describing the action the user should take\n{% enddocs %}\n\n{% docs campaign_cta %}\nCampaign's call to action\n{% enddocs %}\n\n{% docs campaign_language %}\n\"Language in which the campaign is available\"\n{% enddocs %}\n\n{% docs agent_id %}\nIf set, the content type of the picture the member is sending us. Exp. image/png.\n{% enddocs %}\n\n{% docs attachment_content_type %}\nIf set, the handle of the Front agent this outbound support message is from.\n{% enddocs %}\n\n{% docs topic %}\nHolds a reference to the **last** campaign topic the member's conversation was in. This is useful to allow members to talk to Gambit and get quick responses (through Rivescript), without Gambit completely forgetting what state the member's interaction with a campaign topic was in.\n{% enddocs %}\n\n{% docs action_serial_id %}\nSerial id for the user's action. Depends on the source of the action. May be the bertly click id, sms message id, etc.\n{% enddocs %}\n\n{% docs channel %}\nChannel for the user's action. Depends on the source of the action. (e.g. web, sms)\n{% enddocs %}\n\n{% docs first_action_month %}\nMonth during which the user took their first action. \n{% enddocs %}\n\n{% docs event_id %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs event_source %}\nApplication source for event (eg. Phoenix, Northstar)\n{% enddocs %}\n\n{% docs event_datetime %}\nWhen the event occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs event_name %}\nName of the event (eg. northstar_submitted_register, https://docs.google.com/spreadsheets/d/1lm-fGrIm85nUTxSojqyCt_Ehmm1zEbViFhKpxcJiz1A/edit#gid=406441516)\n{% enddocs %}\n\n{% docs event_type %}\nType of event (pv = 'Page View', se = 'Structured Event')\n{% enddocs %}\n\n{% docs host %}\nURL host where event occurred (eg. www.dosomething.org or identity.dosomething.org)\n{% enddocs %}\n\n{% docs path %}\nURL path event occurred at (eg. /login or /us/campaigns/huddle-for-heroes)\n{% enddocs %}\n\n{% docs query_parameters %}\nOptional query parameters for the request (eg. query=huddle)\n{% enddocs %}\n\n{% docs se_category %}\nCategory of event (eg. focused_field, authentication) - Custom structured event\n{% enddocs %}\n\n{% docs se_action %}\nAction performed / event name (eg. form_submitted, action_failed) - Custom structured event\n{% enddocs %}\n\n{% docs se_label %}\nThe object of the action (eg. first_name, register, voter_reg_status) - Custom structured event\n{% enddocs %}\n\n{% docs session_id %}\nUnique identifier of the user's session\n{% enddocs %}\n\n{% docs session_counter %}\nHow many sessions a user has started\n{% enddocs %}\n\n{% docs browser_size %}\nWhich type of browser a user is using (eg. Mobile, Desktop)\n{% enddocs %}\n\n{% docs northstar_id %}\nThe Northstar ID of the user who generated the event\n{% enddocs %}\n\n{% docs device_id %}\nID of the device used\n{% enddocs %}\n\n{% docs referrer_host %}\nURL host of the referring site (eg. google.com)\n{% enddocs %}\n\n{% docs referrer_path %}\nURL path from referring site (eg. /10-stats-on-teen-drug-and-alcohol-use/)\n{% enddocs %}\n\n{% docs referrer_source %}\nReferrer source name (eg. Google, Facebook)\n{% enddocs %}\n\n{% docs utm_source %}\nTracks where the traffic is coming from. (eg. scholarship_listing, Facebook)\n{% enddocs %}\n\n{% docs utm_medium %}\nHow the traffic got to the platform (eg. referral, CPC)\n{% enddocs %}\n\n{% docs utm_campaign %}\nTracks which campaign the traffic was generated by. Shows up in Google Analytics as Campaign Name (eg. editorial_newsletter)\n{% enddocs %}\n\n{% docs url %}\nURL of campaign (eg. https://dosome.click/nyn5m7)\n{% enddocs %}\n\n{% docs modal_type %}\nNULL or SURVEY_MODAL\n{% enddocs %}\n\n{% docs landing_datetime %}\nWhen the session started in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs ending_datetime %}\nWhen the session ended in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs session_duration_seconds %}\nSession duration in seconds\n{% enddocs %}\n\n{% docs num_pages_views %}\nNumber of pages viewed in session\n{% enddocs %}\n\n{% docs landing_page %}\nFirst page the user viewed in the session (eg. /us/facts/11-facts-about-bp-oil-spill)\n{% enddocs %}\n\n{% docs exit_page %}\n\"Which page the user ended or exited their session from (eg. /us/campaigns/green-your-getaway)\"\n{% enddocs %}\n\n{% docs days_since_last_session %}\n\"Days since their last session.\"\n{% enddocs %}\n\n{% docs post_type %}\nType of post, (e.g. photo, voter-reg)\n{% enddocs %}\n\n{% docs noun %}\nNoun that corresponds to the item in the call to action that was delivered. (e.g. drawings, tweets)\n{% enddocs %}\n\n{% docs verb %}\nVerb corresponding to the action the user took. (e.g. shared, sent, taken)\n{% enddocs %}\n\n{% docs deleted_at %}\nDate time in UTC when a user deleted their post.\n{% enddocs %}\n\n{% docs _fivetran_deleted %}\nMarks rows that were deleted in the source table\n{% enddocs %}\n\n{% docs _fivetran_synced %}\n(UTC timestamp) keeps track of when each row was last successfully synced\n{% enddocs %}\n\n{% docs reportback %}\nWhether the post is a reportback \n{% enddocs %}\n\n{% docs active %}\nWhether the user is active \n{% enddocs %}\n\n{% docs anonymous %}\nWhether the user is anonymous when making the post \n{% enddocs %}\n\n{% docs callpower_campaign_id %}\nUnique ID corresponding to the Callpower campaign. Callpower allows users to record messages for their representatives.\n{% enddocs %}\n\n{% docs quiz %}\nWhether the post is a quiz \n{% enddocs %}\n\n{% docs action_type %}\nType of action the user took. (e.g. share-something, donate-something)\n{% enddocs %}\n\n{% docs online %}\nWhether the action is a online as opposed to IRL.\n{% enddocs %}\n\n{% docs time_commitment %}\nEstimated time required to do the action (e.g. 3.0+, <0.5)\n{% enddocs %}\n\n{% docs num_signups %}\nQuantity of campaign signups\n{% enddocs %}\n\n{% docs most_recent_signup %}\nTimestamp of the most recent signup in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs num_rbs %}\nQuantity of reportbacks for the user\n{% enddocs %}\n\n{% docs total_quantity %}\nTotal quantity of items in reportbacks\n{% enddocs %}\n\n{% docs most_recent_rb %}\nWhen the most recent reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs first_rb %}\nWhen the first reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs avg_time_betw_rbs %}\nCalculated average time between reportbacks.\n{% enddocs %}\n\n{% docs avg_days_next_action_after_rb %}\nCalculated average days until next action after reportback\n{% enddocs %}\n\n{% docs days_to_next_action_after_last_rb %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs most_recent_mam_action %}\nMost recent monthly active member qualifying action in UTC (eg. 2018-01-01 12:00:00).\n{% enddocs %}\n\n{% docs most_recent_email_open %}\nMost recent email open in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs most_recent_all_actions %}\nMost recent timestamp of any action in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs last_action_is_rb %}\nWhether the last action the user took was a reportback\n{% enddocs %}\n\n{% docs days_since_last_action %}\nDays since the user's last action\n{% enddocs %}\n\n{% docs time_to_first_rb %}\nHow much time after registering until the user's first reportback\n{% enddocs %}\n\n{% docs sms_unsubscribed_at %}\nTimestamp of when user unsubscribed from SMS messaging\n{% enddocs %}\n\n{% docs user_unsubscribed_at %}\nTimestamp of when user unsubscribed from email or sms\n{% enddocs %}\n\n{% docs voter_reg_acquisition %}\nWhether the user was an acquisition through voter registration efforts. \n{% enddocs %}\n\n{% docs last_logged_in %}\nDate time in UTC when user last logged in to Northstar\n{% enddocs %}\n\n{% docs last_accessed %}\nDate time in UTC when user last access the website\n{% enddocs %}\n\n{% docs last_messaged_at %}\nDate time in UTC when user was last sent a message via SMS or email\n{% enddocs %}\n\n{% docs facebook_id %}\nUser's facebook id\n{% enddocs %}\n\n{% docs mobile %}\nUsers's mobile phone number\n{% enddocs %}\n\n{% docs birthdate %}\nUser's birthdate\n{% enddocs %}\n\n{% docs first_name %}\nUser's first name\n{% enddocs %}\n\n{% docs last_name %}\nUser's last name\n{% enddocs %}\n\n{% docs voter_registration_status %}\nUser's registration status. (e.g. registration_complete, confirmed, uncertain) \n{% enddocs %}\n\n{% docs finish_with_state %}\nIf the registrant was eligible to use and passed through to complete their registration with their state\u2019s OVR system, it will be indicated in this field (direct quote from Rock-The-Vote documentation). Yes/No value in field.\n{% enddocs %}\n\n{% docs reportback_volume %}\nThis field returns 1 if non voter-reg action, since campaigns team only counts those a 1 reportback. If voter-reg action, we want to count quantity of post as number of registered voters.\n{% enddocs %}\n\n{% docs address_street_1 %}\nFirst line of user's street address\n{% enddocs %}\n\n{% docs address_street_2 %}\nSecond line of user's street address\n{% enddocs %}\n\n{% docs city %}\nUser's city\n{% enddocs %}\n\n{% docs state %}\nUser's state\n{% enddocs %}\n\n{% docs country %}\nUser's country\n{% enddocs %}\n\n{% docs language %}\nUser's language\n{% enddocs %}\n\n{% docs cio_status %}\nStatus of user from CIO. (e.g. customer_subscribed, customer_unsubscribed)\n{% enddocs %}\n\n{% docs cio_status_timestamp %}\nTimestamp when users's status was updated.\n{% enddocs %}\n\n{% docs sms_status %}\nCurrent SMS status. (e.g. undeliverable, unknown)\n{% enddocs %}\n\n{% docs source_detail %}\nDetails of the origin of the user. (e.g. tell_a_friend, other, opt_in_path/197981)\n{% enddocs %}\n\n{% docs badges %}\nWhether the user has any badges. \n{% enddocs %}\n\n{% docs refer_friends %}\nWhether the user is a part of the refer a friend campaign. \n{% enddocs %}\n\n{% docs subscribed_member %}\nWhether the user is subscribed. \n{% enddocs %}\n\n{% docs last_updated_at %}\nTimestamp when users's was updated.\n{% enddocs %}\n\n{% docs school_id %}\nUnique identifier for the user's school. This info comes from the school finder.\n{% enddocs %}\n\n{% docs newsletter_topic %}\nNewsletter topic. (e.g. community, lifestyle)\n{% enddocs %}\n\n{% docs user_agent %}\nFull user agent string for a user's browser (e.g. \"Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:24.0) Gecko/20100101 Firefox/24.0\")\n{% enddocs %}\n\n{% docs drupal_id %}\nOld Drupal user ID\n{% enddocs %}\n\n{% docs campaigns %}\nCampaigns a user is signed up for.\n{% enddocs %}\n\n{% docs audit %}\nA very useful field with data containing information about changes to a user, e.g. timestamps when the user subscribed and unsubscribed.\n{% enddocs %}\n\n{% docs voting_plan_status %}\nThe indication of the user's plan to vote, e.g. voting, not_voting, cant_vote\n{% enddocs %}\n\n{% docs voting_plan_time_of_day %}\nThe time of day when the user plans to vote, e.g morning, afternoon, evening\n{% enddocs %}\n\n{% docs voting_plan_method_of_transport %}\nHow the user plans to get to their polling place. e.g. walk, drive\n{% enddocs %}\n\n{% docs voting_plan_attending_with %}\nWith Whom the user plans to go voting, e.g. family, friends, alone\n{% enddocs %}\n\n{% docs feature_flags %}\nJSON containing info on features like badges and refer-a-friend.\n{% enddocs %}\n\n{% docs dbt_updated_at %}\nDBT snapshot table data. The updated_at timestamp of the source record when this snapshot row was inserted.\n{% enddocs %}\n\n{% docs dbt_scd_id %}\nDBT snapshot table data. A unique key generated for each snapshotted record.\n{% enddocs %}\n\n{% docs dbt_valid_from %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this snapshot row was first inserted\n{% enddocs %}\n\n{% docs dbt_valid_to %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this row row became invalidated.\n{% enddocs %}\n\n{% docs google_id %}\nUser's Google ID obtained from login.\n{% enddocs %}\n\n{% docs causes %}\nCauses in which a user is interested. e.g. animal welfare, education, mental_health\n{% enddocs %}\n\n{% docs email_subscription_status %}\nEmail subscription status of the user\n{% enddocs %}\n\n{% docs role %}\nUser's role, e.g. user, staff\n{% enddocs %}\n\n{% docs cio_backfilled %}\nWhether this user's data was backfilled from CIO\n{% enddocs %}\n\n{% docs addr_source %}\nWhere the user submitted their address, e.g. sms, GDPR\n{% enddocs %}\n\n{% docs email_subscription_topics %}\nEmail subscription topics correspond to categories in CIO in which the user is interested. e.g. lifestyle, community, scholarship\n{% enddocs %}\n\n{% docs sms_paused %}\nWhether we've paused sending sms messages to the user.\n{% enddocs %}\n\n\n\n\n", "name": "reportback", "unique_id": "ds_dbt.reportback", "block_contents": "Whether the post is a reportback"}, "ds_dbt.active": {"root_path": "/Users/mrich/projects/quasar/quasar/dbt", "resource_type": "docs", "path": "schema.md", "original_file_path": "models/schema.md", "package_name": "ds_dbt", "file_contents": "\n{% docs click_id %}\nThis is a unique identifier for each click\n{% enddocs %}\n\n{% docs click_time %}\nTimestamp when user clicked.\n{% enddocs %}\n\n{% docs shortened %}\nShortened URL\n{% enddocs %}\n\n{% docs target_url %}\nURL where the user will be directed\n{% enddocs %}\n\n{% docs broadcast_id %}\nID of the broadcast that generated the shortened URL\n{% enddocs %}\n\n{% docs source %}\nSource of the URL (e.g. SMS, web), origin of the post (e.g. phoenix-web, phoenix-ashes, sms), or source where user was acquired. (e.g. sms, phoenix-next)\n{% enddocs %}\n\n{% docs interaction_type %}\nHow the user interacted with the link (e.g. preview, click)\n{% enddocs %}\n\n{% docs id %}\nUnique identifier for the post\n{% enddocs %}\n\n{% docs type %}\nType of post (e.g. photo)\n{% enddocs %}\n\n{% docs action %}\nPost action (e.g. DefendDreamers_Nov9_CongressCalls, GunViolence2018_Feb15_ParklandResponse)\n{% enddocs %}\n\n{% docs status %}\nPost status (e.g. accepted, rejected)\n{% enddocs %}\n\n{% docs quantity %}\nNumerical quantity of items specified in the call to action (e.g. 10, 200)\n{% enddocs %}\n\n{% docs source_bucket %}\nGrouping bucket for origin of the post (e.g. web, sms) \n{% enddocs %}\n\n{% docs created_at %}\nWhen the item was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs updated_at %}\nWhen the item was updated in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs text %}\nText of the post (e.g. \"Zoo animals and a super hero trying to help too!\") \n{% enddocs %}\n\n{% docs signup_id %}\nUnique identifier for the signup \n{% enddocs %}\n\n{% docs post_class %}\nClass of the signup (e.g. \"photo - default\", \"phone-call - DefendDreamers_Jan16_BothBodies\")\n{% enddocs %}\n\n{% docs is_accepted %}\nWhether the post has been accepted to be displayed to the public on the website\n{% enddocs %}\n\n{% docs action_id %}\nInternal identifier of the action \n{% enddocs %}\n\n{% docs location %}\nLocation where the action takes place (e.g. US-NY)\n{% enddocs %}\n\n{% docs postal_code %}\nPostal code where the action takes place\n{% enddocs %}\n\n{% docs is_reportback %}\nWhether the post is a reportback. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs civic_action %}\nWhether the post is a Civic Action. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs scholarship_entry %}\nWhether the post is a Scholarship Entry. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs why_participated %}\nWhy the user participated in this action. Entered by the user.\n{% enddocs %}\n\n{% docs details %}\nDetails about the post. Contains contentfulId and other information (e.g. {\"campaignContentfulId\":\"6ATBgGEQEeJoIcxs1qbwaC\"})\n{% enddocs %}\n\n{% docs email %}\nEmail address of the user.\n{% enddocs %}\n\n{% docs source_details %}\nDetails about the source of the item. This is sometimes represented as a JSON object, and for other tables like Turbovote its represented as a string. (e.g. \"{\"contentful_id\":\"3CTLlXfbwtz1FOMpl31SKV\",\"utm_source\":\"scholarship_listing\",\"utm_medium\":\"referral\",\"utm_campaign\":\"fastweb_2019_08\"}\", newsletter_456)\n{% enddocs %}\n\n{% docs campaign_id %}\nThis is a unique identifier for the campaign\n{% enddocs %}\n\n{% docs campaign_run_id %}\nUnique identifier for the campaign run\n{% enddocs %}\n\n{% docs campaign_name %}\nName of the campaign\n{% enddocs %}\n\n{% docs campaign_cause %}\nCampaign cause (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_run_start_date %}\nStart date of the campaign run\n{% enddocs %}\n\n{% docs campaign_run_end_date %}\nEnd date of the campaign run\n{% enddocs %}\n\n{% docs campaign_created_date %}\nWhen the campaign was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs campaign_node_id %}\nInternal unique node id for the campaign\n{% enddocs %}\n\n{% docs campaign_node_id_title %}\nCampaign title\n{% enddocs %}\n\n{% docs campaign_run_id_title %}\nTitle of the campaign run\n{% enddocs %}\n\n{% docs campaign_action_type %}\nCampaign action type (eg. Make Something, Share Something)\n{% enddocs %}\n\n{% docs campaign_cause_type %}\nCampaign cause type (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_noun %}\nNoun applicable to the user's action\n{% enddocs %}\n\n{% docs campaign_verb %}\nVerb describing the action the user should take\n{% enddocs %}\n\n{% docs campaign_cta %}\nCampaign's call to action\n{% enddocs %}\n\n{% docs campaign_language %}\n\"Language in which the campaign is available\"\n{% enddocs %}\n\n{% docs agent_id %}\nIf set, the content type of the picture the member is sending us. Exp. image/png.\n{% enddocs %}\n\n{% docs attachment_content_type %}\nIf set, the handle of the Front agent this outbound support message is from.\n{% enddocs %}\n\n{% docs topic %}\nHolds a reference to the **last** campaign topic the member's conversation was in. This is useful to allow members to talk to Gambit and get quick responses (through Rivescript), without Gambit completely forgetting what state the member's interaction with a campaign topic was in.\n{% enddocs %}\n\n{% docs action_serial_id %}\nSerial id for the user's action. Depends on the source of the action. May be the bertly click id, sms message id, etc.\n{% enddocs %}\n\n{% docs channel %}\nChannel for the user's action. Depends on the source of the action. (e.g. web, sms)\n{% enddocs %}\n\n{% docs first_action_month %}\nMonth during which the user took their first action. \n{% enddocs %}\n\n{% docs event_id %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs event_source %}\nApplication source for event (eg. Phoenix, Northstar)\n{% enddocs %}\n\n{% docs event_datetime %}\nWhen the event occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs event_name %}\nName of the event (eg. northstar_submitted_register, https://docs.google.com/spreadsheets/d/1lm-fGrIm85nUTxSojqyCt_Ehmm1zEbViFhKpxcJiz1A/edit#gid=406441516)\n{% enddocs %}\n\n{% docs event_type %}\nType of event (pv = 'Page View', se = 'Structured Event')\n{% enddocs %}\n\n{% docs host %}\nURL host where event occurred (eg. www.dosomething.org or identity.dosomething.org)\n{% enddocs %}\n\n{% docs path %}\nURL path event occurred at (eg. /login or /us/campaigns/huddle-for-heroes)\n{% enddocs %}\n\n{% docs query_parameters %}\nOptional query parameters for the request (eg. query=huddle)\n{% enddocs %}\n\n{% docs se_category %}\nCategory of event (eg. focused_field, authentication) - Custom structured event\n{% enddocs %}\n\n{% docs se_action %}\nAction performed / event name (eg. form_submitted, action_failed) - Custom structured event\n{% enddocs %}\n\n{% docs se_label %}\nThe object of the action (eg. first_name, register, voter_reg_status) - Custom structured event\n{% enddocs %}\n\n{% docs session_id %}\nUnique identifier of the user's session\n{% enddocs %}\n\n{% docs session_counter %}\nHow many sessions a user has started\n{% enddocs %}\n\n{% docs browser_size %}\nWhich type of browser a user is using (eg. Mobile, Desktop)\n{% enddocs %}\n\n{% docs northstar_id %}\nThe Northstar ID of the user who generated the event\n{% enddocs %}\n\n{% docs device_id %}\nID of the device used\n{% enddocs %}\n\n{% docs referrer_host %}\nURL host of the referring site (eg. google.com)\n{% enddocs %}\n\n{% docs referrer_path %}\nURL path from referring site (eg. /10-stats-on-teen-drug-and-alcohol-use/)\n{% enddocs %}\n\n{% docs referrer_source %}\nReferrer source name (eg. Google, Facebook)\n{% enddocs %}\n\n{% docs utm_source %}\nTracks where the traffic is coming from. (eg. scholarship_listing, Facebook)\n{% enddocs %}\n\n{% docs utm_medium %}\nHow the traffic got to the platform (eg. referral, CPC)\n{% enddocs %}\n\n{% docs utm_campaign %}\nTracks which campaign the traffic was generated by. Shows up in Google Analytics as Campaign Name (eg. editorial_newsletter)\n{% enddocs %}\n\n{% docs url %}\nURL of campaign (eg. https://dosome.click/nyn5m7)\n{% enddocs %}\n\n{% docs modal_type %}\nNULL or SURVEY_MODAL\n{% enddocs %}\n\n{% docs landing_datetime %}\nWhen the session started in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs ending_datetime %}\nWhen the session ended in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs session_duration_seconds %}\nSession duration in seconds\n{% enddocs %}\n\n{% docs num_pages_views %}\nNumber of pages viewed in session\n{% enddocs %}\n\n{% docs landing_page %}\nFirst page the user viewed in the session (eg. /us/facts/11-facts-about-bp-oil-spill)\n{% enddocs %}\n\n{% docs exit_page %}\n\"Which page the user ended or exited their session from (eg. /us/campaigns/green-your-getaway)\"\n{% enddocs %}\n\n{% docs days_since_last_session %}\n\"Days since their last session.\"\n{% enddocs %}\n\n{% docs post_type %}\nType of post, (e.g. photo, voter-reg)\n{% enddocs %}\n\n{% docs noun %}\nNoun that corresponds to the item in the call to action that was delivered. (e.g. drawings, tweets)\n{% enddocs %}\n\n{% docs verb %}\nVerb corresponding to the action the user took. (e.g. shared, sent, taken)\n{% enddocs %}\n\n{% docs deleted_at %}\nDate time in UTC when a user deleted their post.\n{% enddocs %}\n\n{% docs _fivetran_deleted %}\nMarks rows that were deleted in the source table\n{% enddocs %}\n\n{% docs _fivetran_synced %}\n(UTC timestamp) keeps track of when each row was last successfully synced\n{% enddocs %}\n\n{% docs reportback %}\nWhether the post is a reportback \n{% enddocs %}\n\n{% docs active %}\nWhether the user is active \n{% enddocs %}\n\n{% docs anonymous %}\nWhether the user is anonymous when making the post \n{% enddocs %}\n\n{% docs callpower_campaign_id %}\nUnique ID corresponding to the Callpower campaign. Callpower allows users to record messages for their representatives.\n{% enddocs %}\n\n{% docs quiz %}\nWhether the post is a quiz \n{% enddocs %}\n\n{% docs action_type %}\nType of action the user took. (e.g. share-something, donate-something)\n{% enddocs %}\n\n{% docs online %}\nWhether the action is a online as opposed to IRL.\n{% enddocs %}\n\n{% docs time_commitment %}\nEstimated time required to do the action (e.g. 3.0+, <0.5)\n{% enddocs %}\n\n{% docs num_signups %}\nQuantity of campaign signups\n{% enddocs %}\n\n{% docs most_recent_signup %}\nTimestamp of the most recent signup in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs num_rbs %}\nQuantity of reportbacks for the user\n{% enddocs %}\n\n{% docs total_quantity %}\nTotal quantity of items in reportbacks\n{% enddocs %}\n\n{% docs most_recent_rb %}\nWhen the most recent reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs first_rb %}\nWhen the first reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs avg_time_betw_rbs %}\nCalculated average time between reportbacks.\n{% enddocs %}\n\n{% docs avg_days_next_action_after_rb %}\nCalculated average days until next action after reportback\n{% enddocs %}\n\n{% docs days_to_next_action_after_last_rb %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs most_recent_mam_action %}\nMost recent monthly active member qualifying action in UTC (eg. 2018-01-01 12:00:00).\n{% enddocs %}\n\n{% docs most_recent_email_open %}\nMost recent email open in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs most_recent_all_actions %}\nMost recent timestamp of any action in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs last_action_is_rb %}\nWhether the last action the user took was a reportback\n{% enddocs %}\n\n{% docs days_since_last_action %}\nDays since the user's last action\n{% enddocs %}\n\n{% docs time_to_first_rb %}\nHow much time after registering until the user's first reportback\n{% enddocs %}\n\n{% docs sms_unsubscribed_at %}\nTimestamp of when user unsubscribed from SMS messaging\n{% enddocs %}\n\n{% docs user_unsubscribed_at %}\nTimestamp of when user unsubscribed from email or sms\n{% enddocs %}\n\n{% docs voter_reg_acquisition %}\nWhether the user was an acquisition through voter registration efforts. \n{% enddocs %}\n\n{% docs last_logged_in %}\nDate time in UTC when user last logged in to Northstar\n{% enddocs %}\n\n{% docs last_accessed %}\nDate time in UTC when user last access the website\n{% enddocs %}\n\n{% docs last_messaged_at %}\nDate time in UTC when user was last sent a message via SMS or email\n{% enddocs %}\n\n{% docs facebook_id %}\nUser's facebook id\n{% enddocs %}\n\n{% docs mobile %}\nUsers's mobile phone number\n{% enddocs %}\n\n{% docs birthdate %}\nUser's birthdate\n{% enddocs %}\n\n{% docs first_name %}\nUser's first name\n{% enddocs %}\n\n{% docs last_name %}\nUser's last name\n{% enddocs %}\n\n{% docs voter_registration_status %}\nUser's registration status. (e.g. registration_complete, confirmed, uncertain) \n{% enddocs %}\n\n{% docs finish_with_state %}\nIf the registrant was eligible to use and passed through to complete their registration with their state\u2019s OVR system, it will be indicated in this field (direct quote from Rock-The-Vote documentation). Yes/No value in field.\n{% enddocs %}\n\n{% docs reportback_volume %}\nThis field returns 1 if non voter-reg action, since campaigns team only counts those a 1 reportback. If voter-reg action, we want to count quantity of post as number of registered voters.\n{% enddocs %}\n\n{% docs address_street_1 %}\nFirst line of user's street address\n{% enddocs %}\n\n{% docs address_street_2 %}\nSecond line of user's street address\n{% enddocs %}\n\n{% docs city %}\nUser's city\n{% enddocs %}\n\n{% docs state %}\nUser's state\n{% enddocs %}\n\n{% docs country %}\nUser's country\n{% enddocs %}\n\n{% docs language %}\nUser's language\n{% enddocs %}\n\n{% docs cio_status %}\nStatus of user from CIO. (e.g. customer_subscribed, customer_unsubscribed)\n{% enddocs %}\n\n{% docs cio_status_timestamp %}\nTimestamp when users's status was updated.\n{% enddocs %}\n\n{% docs sms_status %}\nCurrent SMS status. (e.g. undeliverable, unknown)\n{% enddocs %}\n\n{% docs source_detail %}\nDetails of the origin of the user. (e.g. tell_a_friend, other, opt_in_path/197981)\n{% enddocs %}\n\n{% docs badges %}\nWhether the user has any badges. \n{% enddocs %}\n\n{% docs refer_friends %}\nWhether the user is a part of the refer a friend campaign. \n{% enddocs %}\n\n{% docs subscribed_member %}\nWhether the user is subscribed. \n{% enddocs %}\n\n{% docs last_updated_at %}\nTimestamp when users's was updated.\n{% enddocs %}\n\n{% docs school_id %}\nUnique identifier for the user's school. This info comes from the school finder.\n{% enddocs %}\n\n{% docs newsletter_topic %}\nNewsletter topic. (e.g. community, lifestyle)\n{% enddocs %}\n\n{% docs user_agent %}\nFull user agent string for a user's browser (e.g. \"Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:24.0) Gecko/20100101 Firefox/24.0\")\n{% enddocs %}\n\n{% docs drupal_id %}\nOld Drupal user ID\n{% enddocs %}\n\n{% docs campaigns %}\nCampaigns a user is signed up for.\n{% enddocs %}\n\n{% docs audit %}\nA very useful field with data containing information about changes to a user, e.g. timestamps when the user subscribed and unsubscribed.\n{% enddocs %}\n\n{% docs voting_plan_status %}\nThe indication of the user's plan to vote, e.g. voting, not_voting, cant_vote\n{% enddocs %}\n\n{% docs voting_plan_time_of_day %}\nThe time of day when the user plans to vote, e.g morning, afternoon, evening\n{% enddocs %}\n\n{% docs voting_plan_method_of_transport %}\nHow the user plans to get to their polling place. e.g. walk, drive\n{% enddocs %}\n\n{% docs voting_plan_attending_with %}\nWith Whom the user plans to go voting, e.g. family, friends, alone\n{% enddocs %}\n\n{% docs feature_flags %}\nJSON containing info on features like badges and refer-a-friend.\n{% enddocs %}\n\n{% docs dbt_updated_at %}\nDBT snapshot table data. The updated_at timestamp of the source record when this snapshot row was inserted.\n{% enddocs %}\n\n{% docs dbt_scd_id %}\nDBT snapshot table data. A unique key generated for each snapshotted record.\n{% enddocs %}\n\n{% docs dbt_valid_from %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this snapshot row was first inserted\n{% enddocs %}\n\n{% docs dbt_valid_to %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this row row became invalidated.\n{% enddocs %}\n\n{% docs google_id %}\nUser's Google ID obtained from login.\n{% enddocs %}\n\n{% docs causes %}\nCauses in which a user is interested. e.g. animal welfare, education, mental_health\n{% enddocs %}\n\n{% docs email_subscription_status %}\nEmail subscription status of the user\n{% enddocs %}\n\n{% docs role %}\nUser's role, e.g. user, staff\n{% enddocs %}\n\n{% docs cio_backfilled %}\nWhether this user's data was backfilled from CIO\n{% enddocs %}\n\n{% docs addr_source %}\nWhere the user submitted their address, e.g. sms, GDPR\n{% enddocs %}\n\n{% docs email_subscription_topics %}\nEmail subscription topics correspond to categories in CIO in which the user is interested. e.g. lifestyle, community, scholarship\n{% enddocs %}\n\n{% docs sms_paused %}\nWhether we've paused sending sms messages to the user.\n{% enddocs %}\n\n\n\n\n", "name": "active", "unique_id": "ds_dbt.active", "block_contents": "Whether the user is active"}, "ds_dbt.anonymous": {"root_path": "/Users/mrich/projects/quasar/quasar/dbt", "resource_type": "docs", "path": "schema.md", "original_file_path": "models/schema.md", "package_name": "ds_dbt", "file_contents": "\n{% docs click_id %}\nThis is a unique identifier for each click\n{% enddocs %}\n\n{% docs click_time %}\nTimestamp when user clicked.\n{% enddocs %}\n\n{% docs shortened %}\nShortened URL\n{% enddocs %}\n\n{% docs target_url %}\nURL where the user will be directed\n{% enddocs %}\n\n{% docs broadcast_id %}\nID of the broadcast that generated the shortened URL\n{% enddocs %}\n\n{% docs source %}\nSource of the URL (e.g. SMS, web), origin of the post (e.g. phoenix-web, phoenix-ashes, sms), or source where user was acquired. (e.g. sms, phoenix-next)\n{% enddocs %}\n\n{% docs interaction_type %}\nHow the user interacted with the link (e.g. preview, click)\n{% enddocs %}\n\n{% docs id %}\nUnique identifier for the post\n{% enddocs %}\n\n{% docs type %}\nType of post (e.g. photo)\n{% enddocs %}\n\n{% docs action %}\nPost action (e.g. DefendDreamers_Nov9_CongressCalls, GunViolence2018_Feb15_ParklandResponse)\n{% enddocs %}\n\n{% docs status %}\nPost status (e.g. accepted, rejected)\n{% enddocs %}\n\n{% docs quantity %}\nNumerical quantity of items specified in the call to action (e.g. 10, 200)\n{% enddocs %}\n\n{% docs source_bucket %}\nGrouping bucket for origin of the post (e.g. web, sms) \n{% enddocs %}\n\n{% docs created_at %}\nWhen the item was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs updated_at %}\nWhen the item was updated in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs text %}\nText of the post (e.g. \"Zoo animals and a super hero trying to help too!\") \n{% enddocs %}\n\n{% docs signup_id %}\nUnique identifier for the signup \n{% enddocs %}\n\n{% docs post_class %}\nClass of the signup (e.g. \"photo - default\", \"phone-call - DefendDreamers_Jan16_BothBodies\")\n{% enddocs %}\n\n{% docs is_accepted %}\nWhether the post has been accepted to be displayed to the public on the website\n{% enddocs %}\n\n{% docs action_id %}\nInternal identifier of the action \n{% enddocs %}\n\n{% docs location %}\nLocation where the action takes place (e.g. US-NY)\n{% enddocs %}\n\n{% docs postal_code %}\nPostal code where the action takes place\n{% enddocs %}\n\n{% docs is_reportback %}\nWhether the post is a reportback. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs civic_action %}\nWhether the post is a Civic Action. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs scholarship_entry %}\nWhether the post is a Scholarship Entry. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs why_participated %}\nWhy the user participated in this action. Entered by the user.\n{% enddocs %}\n\n{% docs details %}\nDetails about the post. Contains contentfulId and other information (e.g. {\"campaignContentfulId\":\"6ATBgGEQEeJoIcxs1qbwaC\"})\n{% enddocs %}\n\n{% docs email %}\nEmail address of the user.\n{% enddocs %}\n\n{% docs source_details %}\nDetails about the source of the item. This is sometimes represented as a JSON object, and for other tables like Turbovote its represented as a string. (e.g. \"{\"contentful_id\":\"3CTLlXfbwtz1FOMpl31SKV\",\"utm_source\":\"scholarship_listing\",\"utm_medium\":\"referral\",\"utm_campaign\":\"fastweb_2019_08\"}\", newsletter_456)\n{% enddocs %}\n\n{% docs campaign_id %}\nThis is a unique identifier for the campaign\n{% enddocs %}\n\n{% docs campaign_run_id %}\nUnique identifier for the campaign run\n{% enddocs %}\n\n{% docs campaign_name %}\nName of the campaign\n{% enddocs %}\n\n{% docs campaign_cause %}\nCampaign cause (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_run_start_date %}\nStart date of the campaign run\n{% enddocs %}\n\n{% docs campaign_run_end_date %}\nEnd date of the campaign run\n{% enddocs %}\n\n{% docs campaign_created_date %}\nWhen the campaign was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs campaign_node_id %}\nInternal unique node id for the campaign\n{% enddocs %}\n\n{% docs campaign_node_id_title %}\nCampaign title\n{% enddocs %}\n\n{% docs campaign_run_id_title %}\nTitle of the campaign run\n{% enddocs %}\n\n{% docs campaign_action_type %}\nCampaign action type (eg. Make Something, Share Something)\n{% enddocs %}\n\n{% docs campaign_cause_type %}\nCampaign cause type (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_noun %}\nNoun applicable to the user's action\n{% enddocs %}\n\n{% docs campaign_verb %}\nVerb describing the action the user should take\n{% enddocs %}\n\n{% docs campaign_cta %}\nCampaign's call to action\n{% enddocs %}\n\n{% docs campaign_language %}\n\"Language in which the campaign is available\"\n{% enddocs %}\n\n{% docs agent_id %}\nIf set, the content type of the picture the member is sending us. Exp. image/png.\n{% enddocs %}\n\n{% docs attachment_content_type %}\nIf set, the handle of the Front agent this outbound support message is from.\n{% enddocs %}\n\n{% docs topic %}\nHolds a reference to the **last** campaign topic the member's conversation was in. This is useful to allow members to talk to Gambit and get quick responses (through Rivescript), without Gambit completely forgetting what state the member's interaction with a campaign topic was in.\n{% enddocs %}\n\n{% docs action_serial_id %}\nSerial id for the user's action. Depends on the source of the action. May be the bertly click id, sms message id, etc.\n{% enddocs %}\n\n{% docs channel %}\nChannel for the user's action. Depends on the source of the action. (e.g. web, sms)\n{% enddocs %}\n\n{% docs first_action_month %}\nMonth during which the user took their first action. \n{% enddocs %}\n\n{% docs event_id %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs event_source %}\nApplication source for event (eg. Phoenix, Northstar)\n{% enddocs %}\n\n{% docs event_datetime %}\nWhen the event occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs event_name %}\nName of the event (eg. northstar_submitted_register, https://docs.google.com/spreadsheets/d/1lm-fGrIm85nUTxSojqyCt_Ehmm1zEbViFhKpxcJiz1A/edit#gid=406441516)\n{% enddocs %}\n\n{% docs event_type %}\nType of event (pv = 'Page View', se = 'Structured Event')\n{% enddocs %}\n\n{% docs host %}\nURL host where event occurred (eg. www.dosomething.org or identity.dosomething.org)\n{% enddocs %}\n\n{% docs path %}\nURL path event occurred at (eg. /login or /us/campaigns/huddle-for-heroes)\n{% enddocs %}\n\n{% docs query_parameters %}\nOptional query parameters for the request (eg. query=huddle)\n{% enddocs %}\n\n{% docs se_category %}\nCategory of event (eg. focused_field, authentication) - Custom structured event\n{% enddocs %}\n\n{% docs se_action %}\nAction performed / event name (eg. form_submitted, action_failed) - Custom structured event\n{% enddocs %}\n\n{% docs se_label %}\nThe object of the action (eg. first_name, register, voter_reg_status) - Custom structured event\n{% enddocs %}\n\n{% docs session_id %}\nUnique identifier of the user's session\n{% enddocs %}\n\n{% docs session_counter %}\nHow many sessions a user has started\n{% enddocs %}\n\n{% docs browser_size %}\nWhich type of browser a user is using (eg. Mobile, Desktop)\n{% enddocs %}\n\n{% docs northstar_id %}\nThe Northstar ID of the user who generated the event\n{% enddocs %}\n\n{% docs device_id %}\nID of the device used\n{% enddocs %}\n\n{% docs referrer_host %}\nURL host of the referring site (eg. google.com)\n{% enddocs %}\n\n{% docs referrer_path %}\nURL path from referring site (eg. /10-stats-on-teen-drug-and-alcohol-use/)\n{% enddocs %}\n\n{% docs referrer_source %}\nReferrer source name (eg. Google, Facebook)\n{% enddocs %}\n\n{% docs utm_source %}\nTracks where the traffic is coming from. (eg. scholarship_listing, Facebook)\n{% enddocs %}\n\n{% docs utm_medium %}\nHow the traffic got to the platform (eg. referral, CPC)\n{% enddocs %}\n\n{% docs utm_campaign %}\nTracks which campaign the traffic was generated by. Shows up in Google Analytics as Campaign Name (eg. editorial_newsletter)\n{% enddocs %}\n\n{% docs url %}\nURL of campaign (eg. https://dosome.click/nyn5m7)\n{% enddocs %}\n\n{% docs modal_type %}\nNULL or SURVEY_MODAL\n{% enddocs %}\n\n{% docs landing_datetime %}\nWhen the session started in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs ending_datetime %}\nWhen the session ended in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs session_duration_seconds %}\nSession duration in seconds\n{% enddocs %}\n\n{% docs num_pages_views %}\nNumber of pages viewed in session\n{% enddocs %}\n\n{% docs landing_page %}\nFirst page the user viewed in the session (eg. /us/facts/11-facts-about-bp-oil-spill)\n{% enddocs %}\n\n{% docs exit_page %}\n\"Which page the user ended or exited their session from (eg. /us/campaigns/green-your-getaway)\"\n{% enddocs %}\n\n{% docs days_since_last_session %}\n\"Days since their last session.\"\n{% enddocs %}\n\n{% docs post_type %}\nType of post, (e.g. photo, voter-reg)\n{% enddocs %}\n\n{% docs noun %}\nNoun that corresponds to the item in the call to action that was delivered. (e.g. drawings, tweets)\n{% enddocs %}\n\n{% docs verb %}\nVerb corresponding to the action the user took. (e.g. shared, sent, taken)\n{% enddocs %}\n\n{% docs deleted_at %}\nDate time in UTC when a user deleted their post.\n{% enddocs %}\n\n{% docs _fivetran_deleted %}\nMarks rows that were deleted in the source table\n{% enddocs %}\n\n{% docs _fivetran_synced %}\n(UTC timestamp) keeps track of when each row was last successfully synced\n{% enddocs %}\n\n{% docs reportback %}\nWhether the post is a reportback \n{% enddocs %}\n\n{% docs active %}\nWhether the user is active \n{% enddocs %}\n\n{% docs anonymous %}\nWhether the user is anonymous when making the post \n{% enddocs %}\n\n{% docs callpower_campaign_id %}\nUnique ID corresponding to the Callpower campaign. Callpower allows users to record messages for their representatives.\n{% enddocs %}\n\n{% docs quiz %}\nWhether the post is a quiz \n{% enddocs %}\n\n{% docs action_type %}\nType of action the user took. (e.g. share-something, donate-something)\n{% enddocs %}\n\n{% docs online %}\nWhether the action is a online as opposed to IRL.\n{% enddocs %}\n\n{% docs time_commitment %}\nEstimated time required to do the action (e.g. 3.0+, <0.5)\n{% enddocs %}\n\n{% docs num_signups %}\nQuantity of campaign signups\n{% enddocs %}\n\n{% docs most_recent_signup %}\nTimestamp of the most recent signup in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs num_rbs %}\nQuantity of reportbacks for the user\n{% enddocs %}\n\n{% docs total_quantity %}\nTotal quantity of items in reportbacks\n{% enddocs %}\n\n{% docs most_recent_rb %}\nWhen the most recent reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs first_rb %}\nWhen the first reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs avg_time_betw_rbs %}\nCalculated average time between reportbacks.\n{% enddocs %}\n\n{% docs avg_days_next_action_after_rb %}\nCalculated average days until next action after reportback\n{% enddocs %}\n\n{% docs days_to_next_action_after_last_rb %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs most_recent_mam_action %}\nMost recent monthly active member qualifying action in UTC (eg. 2018-01-01 12:00:00).\n{% enddocs %}\n\n{% docs most_recent_email_open %}\nMost recent email open in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs most_recent_all_actions %}\nMost recent timestamp of any action in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs last_action_is_rb %}\nWhether the last action the user took was a reportback\n{% enddocs %}\n\n{% docs days_since_last_action %}\nDays since the user's last action\n{% enddocs %}\n\n{% docs time_to_first_rb %}\nHow much time after registering until the user's first reportback\n{% enddocs %}\n\n{% docs sms_unsubscribed_at %}\nTimestamp of when user unsubscribed from SMS messaging\n{% enddocs %}\n\n{% docs user_unsubscribed_at %}\nTimestamp of when user unsubscribed from email or sms\n{% enddocs %}\n\n{% docs voter_reg_acquisition %}\nWhether the user was an acquisition through voter registration efforts. \n{% enddocs %}\n\n{% docs last_logged_in %}\nDate time in UTC when user last logged in to Northstar\n{% enddocs %}\n\n{% docs last_accessed %}\nDate time in UTC when user last access the website\n{% enddocs %}\n\n{% docs last_messaged_at %}\nDate time in UTC when user was last sent a message via SMS or email\n{% enddocs %}\n\n{% docs facebook_id %}\nUser's facebook id\n{% enddocs %}\n\n{% docs mobile %}\nUsers's mobile phone number\n{% enddocs %}\n\n{% docs birthdate %}\nUser's birthdate\n{% enddocs %}\n\n{% docs first_name %}\nUser's first name\n{% enddocs %}\n\n{% docs last_name %}\nUser's last name\n{% enddocs %}\n\n{% docs voter_registration_status %}\nUser's registration status. (e.g. registration_complete, confirmed, uncertain) \n{% enddocs %}\n\n{% docs finish_with_state %}\nIf the registrant was eligible to use and passed through to complete their registration with their state\u2019s OVR system, it will be indicated in this field (direct quote from Rock-The-Vote documentation). Yes/No value in field.\n{% enddocs %}\n\n{% docs reportback_volume %}\nThis field returns 1 if non voter-reg action, since campaigns team only counts those a 1 reportback. If voter-reg action, we want to count quantity of post as number of registered voters.\n{% enddocs %}\n\n{% docs address_street_1 %}\nFirst line of user's street address\n{% enddocs %}\n\n{% docs address_street_2 %}\nSecond line of user's street address\n{% enddocs %}\n\n{% docs city %}\nUser's city\n{% enddocs %}\n\n{% docs state %}\nUser's state\n{% enddocs %}\n\n{% docs country %}\nUser's country\n{% enddocs %}\n\n{% docs language %}\nUser's language\n{% enddocs %}\n\n{% docs cio_status %}\nStatus of user from CIO. (e.g. customer_subscribed, customer_unsubscribed)\n{% enddocs %}\n\n{% docs cio_status_timestamp %}\nTimestamp when users's status was updated.\n{% enddocs %}\n\n{% docs sms_status %}\nCurrent SMS status. (e.g. undeliverable, unknown)\n{% enddocs %}\n\n{% docs source_detail %}\nDetails of the origin of the user. (e.g. tell_a_friend, other, opt_in_path/197981)\n{% enddocs %}\n\n{% docs badges %}\nWhether the user has any badges. \n{% enddocs %}\n\n{% docs refer_friends %}\nWhether the user is a part of the refer a friend campaign. \n{% enddocs %}\n\n{% docs subscribed_member %}\nWhether the user is subscribed. \n{% enddocs %}\n\n{% docs last_updated_at %}\nTimestamp when users's was updated.\n{% enddocs %}\n\n{% docs school_id %}\nUnique identifier for the user's school. This info comes from the school finder.\n{% enddocs %}\n\n{% docs newsletter_topic %}\nNewsletter topic. (e.g. community, lifestyle)\n{% enddocs %}\n\n{% docs user_agent %}\nFull user agent string for a user's browser (e.g. \"Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:24.0) Gecko/20100101 Firefox/24.0\")\n{% enddocs %}\n\n{% docs drupal_id %}\nOld Drupal user ID\n{% enddocs %}\n\n{% docs campaigns %}\nCampaigns a user is signed up for.\n{% enddocs %}\n\n{% docs audit %}\nA very useful field with data containing information about changes to a user, e.g. timestamps when the user subscribed and unsubscribed.\n{% enddocs %}\n\n{% docs voting_plan_status %}\nThe indication of the user's plan to vote, e.g. voting, not_voting, cant_vote\n{% enddocs %}\n\n{% docs voting_plan_time_of_day %}\nThe time of day when the user plans to vote, e.g morning, afternoon, evening\n{% enddocs %}\n\n{% docs voting_plan_method_of_transport %}\nHow the user plans to get to their polling place. e.g. walk, drive\n{% enddocs %}\n\n{% docs voting_plan_attending_with %}\nWith Whom the user plans to go voting, e.g. family, friends, alone\n{% enddocs %}\n\n{% docs feature_flags %}\nJSON containing info on features like badges and refer-a-friend.\n{% enddocs %}\n\n{% docs dbt_updated_at %}\nDBT snapshot table data. The updated_at timestamp of the source record when this snapshot row was inserted.\n{% enddocs %}\n\n{% docs dbt_scd_id %}\nDBT snapshot table data. A unique key generated for each snapshotted record.\n{% enddocs %}\n\n{% docs dbt_valid_from %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this snapshot row was first inserted\n{% enddocs %}\n\n{% docs dbt_valid_to %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this row row became invalidated.\n{% enddocs %}\n\n{% docs google_id %}\nUser's Google ID obtained from login.\n{% enddocs %}\n\n{% docs causes %}\nCauses in which a user is interested. e.g. animal welfare, education, mental_health\n{% enddocs %}\n\n{% docs email_subscription_status %}\nEmail subscription status of the user\n{% enddocs %}\n\n{% docs role %}\nUser's role, e.g. user, staff\n{% enddocs %}\n\n{% docs cio_backfilled %}\nWhether this user's data was backfilled from CIO\n{% enddocs %}\n\n{% docs addr_source %}\nWhere the user submitted their address, e.g. sms, GDPR\n{% enddocs %}\n\n{% docs email_subscription_topics %}\nEmail subscription topics correspond to categories in CIO in which the user is interested. e.g. lifestyle, community, scholarship\n{% enddocs %}\n\n{% docs sms_paused %}\nWhether we've paused sending sms messages to the user.\n{% enddocs %}\n\n\n\n\n", "name": "anonymous", "unique_id": "ds_dbt.anonymous", "block_contents": "Whether the user is anonymous when making the post"}, "ds_dbt.callpower_campaign_id": {"root_path": "/Users/mrich/projects/quasar/quasar/dbt", "resource_type": "docs", "path": "schema.md", "original_file_path": "models/schema.md", "package_name": "ds_dbt", "file_contents": "\n{% docs click_id %}\nThis is a unique identifier for each click\n{% enddocs %}\n\n{% docs click_time %}\nTimestamp when user clicked.\n{% enddocs %}\n\n{% docs shortened %}\nShortened URL\n{% enddocs %}\n\n{% docs target_url %}\nURL where the user will be directed\n{% enddocs %}\n\n{% docs broadcast_id %}\nID of the broadcast that generated the shortened URL\n{% enddocs %}\n\n{% docs source %}\nSource of the URL (e.g. SMS, web), origin of the post (e.g. phoenix-web, phoenix-ashes, sms), or source where user was acquired. (e.g. sms, phoenix-next)\n{% enddocs %}\n\n{% docs interaction_type %}\nHow the user interacted with the link (e.g. preview, click)\n{% enddocs %}\n\n{% docs id %}\nUnique identifier for the post\n{% enddocs %}\n\n{% docs type %}\nType of post (e.g. photo)\n{% enddocs %}\n\n{% docs action %}\nPost action (e.g. DefendDreamers_Nov9_CongressCalls, GunViolence2018_Feb15_ParklandResponse)\n{% enddocs %}\n\n{% docs status %}\nPost status (e.g. accepted, rejected)\n{% enddocs %}\n\n{% docs quantity %}\nNumerical quantity of items specified in the call to action (e.g. 10, 200)\n{% enddocs %}\n\n{% docs source_bucket %}\nGrouping bucket for origin of the post (e.g. web, sms) \n{% enddocs %}\n\n{% docs created_at %}\nWhen the item was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs updated_at %}\nWhen the item was updated in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs text %}\nText of the post (e.g. \"Zoo animals and a super hero trying to help too!\") \n{% enddocs %}\n\n{% docs signup_id %}\nUnique identifier for the signup \n{% enddocs %}\n\n{% docs post_class %}\nClass of the signup (e.g. \"photo - default\", \"phone-call - DefendDreamers_Jan16_BothBodies\")\n{% enddocs %}\n\n{% docs is_accepted %}\nWhether the post has been accepted to be displayed to the public on the website\n{% enddocs %}\n\n{% docs action_id %}\nInternal identifier of the action \n{% enddocs %}\n\n{% docs location %}\nLocation where the action takes place (e.g. US-NY)\n{% enddocs %}\n\n{% docs postal_code %}\nPostal code where the action takes place\n{% enddocs %}\n\n{% docs is_reportback %}\nWhether the post is a reportback. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs civic_action %}\nWhether the post is a Civic Action. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs scholarship_entry %}\nWhether the post is a Scholarship Entry. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs why_participated %}\nWhy the user participated in this action. Entered by the user.\n{% enddocs %}\n\n{% docs details %}\nDetails about the post. Contains contentfulId and other information (e.g. {\"campaignContentfulId\":\"6ATBgGEQEeJoIcxs1qbwaC\"})\n{% enddocs %}\n\n{% docs email %}\nEmail address of the user.\n{% enddocs %}\n\n{% docs source_details %}\nDetails about the source of the item. This is sometimes represented as a JSON object, and for other tables like Turbovote its represented as a string. (e.g. \"{\"contentful_id\":\"3CTLlXfbwtz1FOMpl31SKV\",\"utm_source\":\"scholarship_listing\",\"utm_medium\":\"referral\",\"utm_campaign\":\"fastweb_2019_08\"}\", newsletter_456)\n{% enddocs %}\n\n{% docs campaign_id %}\nThis is a unique identifier for the campaign\n{% enddocs %}\n\n{% docs campaign_run_id %}\nUnique identifier for the campaign run\n{% enddocs %}\n\n{% docs campaign_name %}\nName of the campaign\n{% enddocs %}\n\n{% docs campaign_cause %}\nCampaign cause (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_run_start_date %}\nStart date of the campaign run\n{% enddocs %}\n\n{% docs campaign_run_end_date %}\nEnd date of the campaign run\n{% enddocs %}\n\n{% docs campaign_created_date %}\nWhen the campaign was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs campaign_node_id %}\nInternal unique node id for the campaign\n{% enddocs %}\n\n{% docs campaign_node_id_title %}\nCampaign title\n{% enddocs %}\n\n{% docs campaign_run_id_title %}\nTitle of the campaign run\n{% enddocs %}\n\n{% docs campaign_action_type %}\nCampaign action type (eg. Make Something, Share Something)\n{% enddocs %}\n\n{% docs campaign_cause_type %}\nCampaign cause type (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_noun %}\nNoun applicable to the user's action\n{% enddocs %}\n\n{% docs campaign_verb %}\nVerb describing the action the user should take\n{% enddocs %}\n\n{% docs campaign_cta %}\nCampaign's call to action\n{% enddocs %}\n\n{% docs campaign_language %}\n\"Language in which the campaign is available\"\n{% enddocs %}\n\n{% docs agent_id %}\nIf set, the content type of the picture the member is sending us. Exp. image/png.\n{% enddocs %}\n\n{% docs attachment_content_type %}\nIf set, the handle of the Front agent this outbound support message is from.\n{% enddocs %}\n\n{% docs topic %}\nHolds a reference to the **last** campaign topic the member's conversation was in. This is useful to allow members to talk to Gambit and get quick responses (through Rivescript), without Gambit completely forgetting what state the member's interaction with a campaign topic was in.\n{% enddocs %}\n\n{% docs action_serial_id %}\nSerial id for the user's action. Depends on the source of the action. May be the bertly click id, sms message id, etc.\n{% enddocs %}\n\n{% docs channel %}\nChannel for the user's action. Depends on the source of the action. (e.g. web, sms)\n{% enddocs %}\n\n{% docs first_action_month %}\nMonth during which the user took their first action. \n{% enddocs %}\n\n{% docs event_id %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs event_source %}\nApplication source for event (eg. Phoenix, Northstar)\n{% enddocs %}\n\n{% docs event_datetime %}\nWhen the event occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs event_name %}\nName of the event (eg. northstar_submitted_register, https://docs.google.com/spreadsheets/d/1lm-fGrIm85nUTxSojqyCt_Ehmm1zEbViFhKpxcJiz1A/edit#gid=406441516)\n{% enddocs %}\n\n{% docs event_type %}\nType of event (pv = 'Page View', se = 'Structured Event')\n{% enddocs %}\n\n{% docs host %}\nURL host where event occurred (eg. www.dosomething.org or identity.dosomething.org)\n{% enddocs %}\n\n{% docs path %}\nURL path event occurred at (eg. /login or /us/campaigns/huddle-for-heroes)\n{% enddocs %}\n\n{% docs query_parameters %}\nOptional query parameters for the request (eg. query=huddle)\n{% enddocs %}\n\n{% docs se_category %}\nCategory of event (eg. focused_field, authentication) - Custom structured event\n{% enddocs %}\n\n{% docs se_action %}\nAction performed / event name (eg. form_submitted, action_failed) - Custom structured event\n{% enddocs %}\n\n{% docs se_label %}\nThe object of the action (eg. first_name, register, voter_reg_status) - Custom structured event\n{% enddocs %}\n\n{% docs session_id %}\nUnique identifier of the user's session\n{% enddocs %}\n\n{% docs session_counter %}\nHow many sessions a user has started\n{% enddocs %}\n\n{% docs browser_size %}\nWhich type of browser a user is using (eg. Mobile, Desktop)\n{% enddocs %}\n\n{% docs northstar_id %}\nThe Northstar ID of the user who generated the event\n{% enddocs %}\n\n{% docs device_id %}\nID of the device used\n{% enddocs %}\n\n{% docs referrer_host %}\nURL host of the referring site (eg. google.com)\n{% enddocs %}\n\n{% docs referrer_path %}\nURL path from referring site (eg. /10-stats-on-teen-drug-and-alcohol-use/)\n{% enddocs %}\n\n{% docs referrer_source %}\nReferrer source name (eg. Google, Facebook)\n{% enddocs %}\n\n{% docs utm_source %}\nTracks where the traffic is coming from. (eg. scholarship_listing, Facebook)\n{% enddocs %}\n\n{% docs utm_medium %}\nHow the traffic got to the platform (eg. referral, CPC)\n{% enddocs %}\n\n{% docs utm_campaign %}\nTracks which campaign the traffic was generated by. Shows up in Google Analytics as Campaign Name (eg. editorial_newsletter)\n{% enddocs %}\n\n{% docs url %}\nURL of campaign (eg. https://dosome.click/nyn5m7)\n{% enddocs %}\n\n{% docs modal_type %}\nNULL or SURVEY_MODAL\n{% enddocs %}\n\n{% docs landing_datetime %}\nWhen the session started in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs ending_datetime %}\nWhen the session ended in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs session_duration_seconds %}\nSession duration in seconds\n{% enddocs %}\n\n{% docs num_pages_views %}\nNumber of pages viewed in session\n{% enddocs %}\n\n{% docs landing_page %}\nFirst page the user viewed in the session (eg. /us/facts/11-facts-about-bp-oil-spill)\n{% enddocs %}\n\n{% docs exit_page %}\n\"Which page the user ended or exited their session from (eg. /us/campaigns/green-your-getaway)\"\n{% enddocs %}\n\n{% docs days_since_last_session %}\n\"Days since their last session.\"\n{% enddocs %}\n\n{% docs post_type %}\nType of post, (e.g. photo, voter-reg)\n{% enddocs %}\n\n{% docs noun %}\nNoun that corresponds to the item in the call to action that was delivered. (e.g. drawings, tweets)\n{% enddocs %}\n\n{% docs verb %}\nVerb corresponding to the action the user took. (e.g. shared, sent, taken)\n{% enddocs %}\n\n{% docs deleted_at %}\nDate time in UTC when a user deleted their post.\n{% enddocs %}\n\n{% docs _fivetran_deleted %}\nMarks rows that were deleted in the source table\n{% enddocs %}\n\n{% docs _fivetran_synced %}\n(UTC timestamp) keeps track of when each row was last successfully synced\n{% enddocs %}\n\n{% docs reportback %}\nWhether the post is a reportback \n{% enddocs %}\n\n{% docs active %}\nWhether the user is active \n{% enddocs %}\n\n{% docs anonymous %}\nWhether the user is anonymous when making the post \n{% enddocs %}\n\n{% docs callpower_campaign_id %}\nUnique ID corresponding to the Callpower campaign. Callpower allows users to record messages for their representatives.\n{% enddocs %}\n\n{% docs quiz %}\nWhether the post is a quiz \n{% enddocs %}\n\n{% docs action_type %}\nType of action the user took. (e.g. share-something, donate-something)\n{% enddocs %}\n\n{% docs online %}\nWhether the action is a online as opposed to IRL.\n{% enddocs %}\n\n{% docs time_commitment %}\nEstimated time required to do the action (e.g. 3.0+, <0.5)\n{% enddocs %}\n\n{% docs num_signups %}\nQuantity of campaign signups\n{% enddocs %}\n\n{% docs most_recent_signup %}\nTimestamp of the most recent signup in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs num_rbs %}\nQuantity of reportbacks for the user\n{% enddocs %}\n\n{% docs total_quantity %}\nTotal quantity of items in reportbacks\n{% enddocs %}\n\n{% docs most_recent_rb %}\nWhen the most recent reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs first_rb %}\nWhen the first reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs avg_time_betw_rbs %}\nCalculated average time between reportbacks.\n{% enddocs %}\n\n{% docs avg_days_next_action_after_rb %}\nCalculated average days until next action after reportback\n{% enddocs %}\n\n{% docs days_to_next_action_after_last_rb %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs most_recent_mam_action %}\nMost recent monthly active member qualifying action in UTC (eg. 2018-01-01 12:00:00).\n{% enddocs %}\n\n{% docs most_recent_email_open %}\nMost recent email open in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs most_recent_all_actions %}\nMost recent timestamp of any action in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs last_action_is_rb %}\nWhether the last action the user took was a reportback\n{% enddocs %}\n\n{% docs days_since_last_action %}\nDays since the user's last action\n{% enddocs %}\n\n{% docs time_to_first_rb %}\nHow much time after registering until the user's first reportback\n{% enddocs %}\n\n{% docs sms_unsubscribed_at %}\nTimestamp of when user unsubscribed from SMS messaging\n{% enddocs %}\n\n{% docs user_unsubscribed_at %}\nTimestamp of when user unsubscribed from email or sms\n{% enddocs %}\n\n{% docs voter_reg_acquisition %}\nWhether the user was an acquisition through voter registration efforts. \n{% enddocs %}\n\n{% docs last_logged_in %}\nDate time in UTC when user last logged in to Northstar\n{% enddocs %}\n\n{% docs last_accessed %}\nDate time in UTC when user last access the website\n{% enddocs %}\n\n{% docs last_messaged_at %}\nDate time in UTC when user was last sent a message via SMS or email\n{% enddocs %}\n\n{% docs facebook_id %}\nUser's facebook id\n{% enddocs %}\n\n{% docs mobile %}\nUsers's mobile phone number\n{% enddocs %}\n\n{% docs birthdate %}\nUser's birthdate\n{% enddocs %}\n\n{% docs first_name %}\nUser's first name\n{% enddocs %}\n\n{% docs last_name %}\nUser's last name\n{% enddocs %}\n\n{% docs voter_registration_status %}\nUser's registration status. (e.g. registration_complete, confirmed, uncertain) \n{% enddocs %}\n\n{% docs finish_with_state %}\nIf the registrant was eligible to use and passed through to complete their registration with their state\u2019s OVR system, it will be indicated in this field (direct quote from Rock-The-Vote documentation). Yes/No value in field.\n{% enddocs %}\n\n{% docs reportback_volume %}\nThis field returns 1 if non voter-reg action, since campaigns team only counts those a 1 reportback. If voter-reg action, we want to count quantity of post as number of registered voters.\n{% enddocs %}\n\n{% docs address_street_1 %}\nFirst line of user's street address\n{% enddocs %}\n\n{% docs address_street_2 %}\nSecond line of user's street address\n{% enddocs %}\n\n{% docs city %}\nUser's city\n{% enddocs %}\n\n{% docs state %}\nUser's state\n{% enddocs %}\n\n{% docs country %}\nUser's country\n{% enddocs %}\n\n{% docs language %}\nUser's language\n{% enddocs %}\n\n{% docs cio_status %}\nStatus of user from CIO. (e.g. customer_subscribed, customer_unsubscribed)\n{% enddocs %}\n\n{% docs cio_status_timestamp %}\nTimestamp when users's status was updated.\n{% enddocs %}\n\n{% docs sms_status %}\nCurrent SMS status. (e.g. undeliverable, unknown)\n{% enddocs %}\n\n{% docs source_detail %}\nDetails of the origin of the user. (e.g. tell_a_friend, other, opt_in_path/197981)\n{% enddocs %}\n\n{% docs badges %}\nWhether the user has any badges. \n{% enddocs %}\n\n{% docs refer_friends %}\nWhether the user is a part of the refer a friend campaign. \n{% enddocs %}\n\n{% docs subscribed_member %}\nWhether the user is subscribed. \n{% enddocs %}\n\n{% docs last_updated_at %}\nTimestamp when users's was updated.\n{% enddocs %}\n\n{% docs school_id %}\nUnique identifier for the user's school. This info comes from the school finder.\n{% enddocs %}\n\n{% docs newsletter_topic %}\nNewsletter topic. (e.g. community, lifestyle)\n{% enddocs %}\n\n{% docs user_agent %}\nFull user agent string for a user's browser (e.g. \"Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:24.0) Gecko/20100101 Firefox/24.0\")\n{% enddocs %}\n\n{% docs drupal_id %}\nOld Drupal user ID\n{% enddocs %}\n\n{% docs campaigns %}\nCampaigns a user is signed up for.\n{% enddocs %}\n\n{% docs audit %}\nA very useful field with data containing information about changes to a user, e.g. timestamps when the user subscribed and unsubscribed.\n{% enddocs %}\n\n{% docs voting_plan_status %}\nThe indication of the user's plan to vote, e.g. voting, not_voting, cant_vote\n{% enddocs %}\n\n{% docs voting_plan_time_of_day %}\nThe time of day when the user plans to vote, e.g morning, afternoon, evening\n{% enddocs %}\n\n{% docs voting_plan_method_of_transport %}\nHow the user plans to get to their polling place. e.g. walk, drive\n{% enddocs %}\n\n{% docs voting_plan_attending_with %}\nWith Whom the user plans to go voting, e.g. family, friends, alone\n{% enddocs %}\n\n{% docs feature_flags %}\nJSON containing info on features like badges and refer-a-friend.\n{% enddocs %}\n\n{% docs dbt_updated_at %}\nDBT snapshot table data. The updated_at timestamp of the source record when this snapshot row was inserted.\n{% enddocs %}\n\n{% docs dbt_scd_id %}\nDBT snapshot table data. A unique key generated for each snapshotted record.\n{% enddocs %}\n\n{% docs dbt_valid_from %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this snapshot row was first inserted\n{% enddocs %}\n\n{% docs dbt_valid_to %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this row row became invalidated.\n{% enddocs %}\n\n{% docs google_id %}\nUser's Google ID obtained from login.\n{% enddocs %}\n\n{% docs causes %}\nCauses in which a user is interested. e.g. animal welfare, education, mental_health\n{% enddocs %}\n\n{% docs email_subscription_status %}\nEmail subscription status of the user\n{% enddocs %}\n\n{% docs role %}\nUser's role, e.g. user, staff\n{% enddocs %}\n\n{% docs cio_backfilled %}\nWhether this user's data was backfilled from CIO\n{% enddocs %}\n\n{% docs addr_source %}\nWhere the user submitted their address, e.g. sms, GDPR\n{% enddocs %}\n\n{% docs email_subscription_topics %}\nEmail subscription topics correspond to categories in CIO in which the user is interested. e.g. lifestyle, community, scholarship\n{% enddocs %}\n\n{% docs sms_paused %}\nWhether we've paused sending sms messages to the user.\n{% enddocs %}\n\n\n\n\n", "name": "callpower_campaign_id", "unique_id": "ds_dbt.callpower_campaign_id", "block_contents": "Unique ID corresponding to the Callpower campaign. Callpower allows users to record messages for their representatives."}, "ds_dbt.quiz": {"root_path": "/Users/mrich/projects/quasar/quasar/dbt", "resource_type": "docs", "path": "schema.md", "original_file_path": "models/schema.md", "package_name": "ds_dbt", "file_contents": "\n{% docs click_id %}\nThis is a unique identifier for each click\n{% enddocs %}\n\n{% docs click_time %}\nTimestamp when user clicked.\n{% enddocs %}\n\n{% docs shortened %}\nShortened URL\n{% enddocs %}\n\n{% docs target_url %}\nURL where the user will be directed\n{% enddocs %}\n\n{% docs broadcast_id %}\nID of the broadcast that generated the shortened URL\n{% enddocs %}\n\n{% docs source %}\nSource of the URL (e.g. SMS, web), origin of the post (e.g. phoenix-web, phoenix-ashes, sms), or source where user was acquired. (e.g. sms, phoenix-next)\n{% enddocs %}\n\n{% docs interaction_type %}\nHow the user interacted with the link (e.g. preview, click)\n{% enddocs %}\n\n{% docs id %}\nUnique identifier for the post\n{% enddocs %}\n\n{% docs type %}\nType of post (e.g. photo)\n{% enddocs %}\n\n{% docs action %}\nPost action (e.g. DefendDreamers_Nov9_CongressCalls, GunViolence2018_Feb15_ParklandResponse)\n{% enddocs %}\n\n{% docs status %}\nPost status (e.g. accepted, rejected)\n{% enddocs %}\n\n{% docs quantity %}\nNumerical quantity of items specified in the call to action (e.g. 10, 200)\n{% enddocs %}\n\n{% docs source_bucket %}\nGrouping bucket for origin of the post (e.g. web, sms) \n{% enddocs %}\n\n{% docs created_at %}\nWhen the item was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs updated_at %}\nWhen the item was updated in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs text %}\nText of the post (e.g. \"Zoo animals and a super hero trying to help too!\") \n{% enddocs %}\n\n{% docs signup_id %}\nUnique identifier for the signup \n{% enddocs %}\n\n{% docs post_class %}\nClass of the signup (e.g. \"photo - default\", \"phone-call - DefendDreamers_Jan16_BothBodies\")\n{% enddocs %}\n\n{% docs is_accepted %}\nWhether the post has been accepted to be displayed to the public on the website\n{% enddocs %}\n\n{% docs action_id %}\nInternal identifier of the action \n{% enddocs %}\n\n{% docs location %}\nLocation where the action takes place (e.g. US-NY)\n{% enddocs %}\n\n{% docs postal_code %}\nPostal code where the action takes place\n{% enddocs %}\n\n{% docs is_reportback %}\nWhether the post is a reportback. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs civic_action %}\nWhether the post is a Civic Action. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs scholarship_entry %}\nWhether the post is a Scholarship Entry. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs why_participated %}\nWhy the user participated in this action. Entered by the user.\n{% enddocs %}\n\n{% docs details %}\nDetails about the post. Contains contentfulId and other information (e.g. {\"campaignContentfulId\":\"6ATBgGEQEeJoIcxs1qbwaC\"})\n{% enddocs %}\n\n{% docs email %}\nEmail address of the user.\n{% enddocs %}\n\n{% docs source_details %}\nDetails about the source of the item. This is sometimes represented as a JSON object, and for other tables like Turbovote its represented as a string. (e.g. \"{\"contentful_id\":\"3CTLlXfbwtz1FOMpl31SKV\",\"utm_source\":\"scholarship_listing\",\"utm_medium\":\"referral\",\"utm_campaign\":\"fastweb_2019_08\"}\", newsletter_456)\n{% enddocs %}\n\n{% docs campaign_id %}\nThis is a unique identifier for the campaign\n{% enddocs %}\n\n{% docs campaign_run_id %}\nUnique identifier for the campaign run\n{% enddocs %}\n\n{% docs campaign_name %}\nName of the campaign\n{% enddocs %}\n\n{% docs campaign_cause %}\nCampaign cause (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_run_start_date %}\nStart date of the campaign run\n{% enddocs %}\n\n{% docs campaign_run_end_date %}\nEnd date of the campaign run\n{% enddocs %}\n\n{% docs campaign_created_date %}\nWhen the campaign was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs campaign_node_id %}\nInternal unique node id for the campaign\n{% enddocs %}\n\n{% docs campaign_node_id_title %}\nCampaign title\n{% enddocs %}\n\n{% docs campaign_run_id_title %}\nTitle of the campaign run\n{% enddocs %}\n\n{% docs campaign_action_type %}\nCampaign action type (eg. Make Something, Share Something)\n{% enddocs %}\n\n{% docs campaign_cause_type %}\nCampaign cause type (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_noun %}\nNoun applicable to the user's action\n{% enddocs %}\n\n{% docs campaign_verb %}\nVerb describing the action the user should take\n{% enddocs %}\n\n{% docs campaign_cta %}\nCampaign's call to action\n{% enddocs %}\n\n{% docs campaign_language %}\n\"Language in which the campaign is available\"\n{% enddocs %}\n\n{% docs agent_id %}\nIf set, the content type of the picture the member is sending us. Exp. image/png.\n{% enddocs %}\n\n{% docs attachment_content_type %}\nIf set, the handle of the Front agent this outbound support message is from.\n{% enddocs %}\n\n{% docs topic %}\nHolds a reference to the **last** campaign topic the member's conversation was in. This is useful to allow members to talk to Gambit and get quick responses (through Rivescript), without Gambit completely forgetting what state the member's interaction with a campaign topic was in.\n{% enddocs %}\n\n{% docs action_serial_id %}\nSerial id for the user's action. Depends on the source of the action. May be the bertly click id, sms message id, etc.\n{% enddocs %}\n\n{% docs channel %}\nChannel for the user's action. Depends on the source of the action. (e.g. web, sms)\n{% enddocs %}\n\n{% docs first_action_month %}\nMonth during which the user took their first action. \n{% enddocs %}\n\n{% docs event_id %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs event_source %}\nApplication source for event (eg. Phoenix, Northstar)\n{% enddocs %}\n\n{% docs event_datetime %}\nWhen the event occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs event_name %}\nName of the event (eg. northstar_submitted_register, https://docs.google.com/spreadsheets/d/1lm-fGrIm85nUTxSojqyCt_Ehmm1zEbViFhKpxcJiz1A/edit#gid=406441516)\n{% enddocs %}\n\n{% docs event_type %}\nType of event (pv = 'Page View', se = 'Structured Event')\n{% enddocs %}\n\n{% docs host %}\nURL host where event occurred (eg. www.dosomething.org or identity.dosomething.org)\n{% enddocs %}\n\n{% docs path %}\nURL path event occurred at (eg. /login or /us/campaigns/huddle-for-heroes)\n{% enddocs %}\n\n{% docs query_parameters %}\nOptional query parameters for the request (eg. query=huddle)\n{% enddocs %}\n\n{% docs se_category %}\nCategory of event (eg. focused_field, authentication) - Custom structured event\n{% enddocs %}\n\n{% docs se_action %}\nAction performed / event name (eg. form_submitted, action_failed) - Custom structured event\n{% enddocs %}\n\n{% docs se_label %}\nThe object of the action (eg. first_name, register, voter_reg_status) - Custom structured event\n{% enddocs %}\n\n{% docs session_id %}\nUnique identifier of the user's session\n{% enddocs %}\n\n{% docs session_counter %}\nHow many sessions a user has started\n{% enddocs %}\n\n{% docs browser_size %}\nWhich type of browser a user is using (eg. Mobile, Desktop)\n{% enddocs %}\n\n{% docs northstar_id %}\nThe Northstar ID of the user who generated the event\n{% enddocs %}\n\n{% docs device_id %}\nID of the device used\n{% enddocs %}\n\n{% docs referrer_host %}\nURL host of the referring site (eg. google.com)\n{% enddocs %}\n\n{% docs referrer_path %}\nURL path from referring site (eg. /10-stats-on-teen-drug-and-alcohol-use/)\n{% enddocs %}\n\n{% docs referrer_source %}\nReferrer source name (eg. Google, Facebook)\n{% enddocs %}\n\n{% docs utm_source %}\nTracks where the traffic is coming from. (eg. scholarship_listing, Facebook)\n{% enddocs %}\n\n{% docs utm_medium %}\nHow the traffic got to the platform (eg. referral, CPC)\n{% enddocs %}\n\n{% docs utm_campaign %}\nTracks which campaign the traffic was generated by. Shows up in Google Analytics as Campaign Name (eg. editorial_newsletter)\n{% enddocs %}\n\n{% docs url %}\nURL of campaign (eg. https://dosome.click/nyn5m7)\n{% enddocs %}\n\n{% docs modal_type %}\nNULL or SURVEY_MODAL\n{% enddocs %}\n\n{% docs landing_datetime %}\nWhen the session started in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs ending_datetime %}\nWhen the session ended in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs session_duration_seconds %}\nSession duration in seconds\n{% enddocs %}\n\n{% docs num_pages_views %}\nNumber of pages viewed in session\n{% enddocs %}\n\n{% docs landing_page %}\nFirst page the user viewed in the session (eg. /us/facts/11-facts-about-bp-oil-spill)\n{% enddocs %}\n\n{% docs exit_page %}\n\"Which page the user ended or exited their session from (eg. /us/campaigns/green-your-getaway)\"\n{% enddocs %}\n\n{% docs days_since_last_session %}\n\"Days since their last session.\"\n{% enddocs %}\n\n{% docs post_type %}\nType of post, (e.g. photo, voter-reg)\n{% enddocs %}\n\n{% docs noun %}\nNoun that corresponds to the item in the call to action that was delivered. (e.g. drawings, tweets)\n{% enddocs %}\n\n{% docs verb %}\nVerb corresponding to the action the user took. (e.g. shared, sent, taken)\n{% enddocs %}\n\n{% docs deleted_at %}\nDate time in UTC when a user deleted their post.\n{% enddocs %}\n\n{% docs _fivetran_deleted %}\nMarks rows that were deleted in the source table\n{% enddocs %}\n\n{% docs _fivetran_synced %}\n(UTC timestamp) keeps track of when each row was last successfully synced\n{% enddocs %}\n\n{% docs reportback %}\nWhether the post is a reportback \n{% enddocs %}\n\n{% docs active %}\nWhether the user is active \n{% enddocs %}\n\n{% docs anonymous %}\nWhether the user is anonymous when making the post \n{% enddocs %}\n\n{% docs callpower_campaign_id %}\nUnique ID corresponding to the Callpower campaign. Callpower allows users to record messages for their representatives.\n{% enddocs %}\n\n{% docs quiz %}\nWhether the post is a quiz \n{% enddocs %}\n\n{% docs action_type %}\nType of action the user took. (e.g. share-something, donate-something)\n{% enddocs %}\n\n{% docs online %}\nWhether the action is a online as opposed to IRL.\n{% enddocs %}\n\n{% docs time_commitment %}\nEstimated time required to do the action (e.g. 3.0+, <0.5)\n{% enddocs %}\n\n{% docs num_signups %}\nQuantity of campaign signups\n{% enddocs %}\n\n{% docs most_recent_signup %}\nTimestamp of the most recent signup in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs num_rbs %}\nQuantity of reportbacks for the user\n{% enddocs %}\n\n{% docs total_quantity %}\nTotal quantity of items in reportbacks\n{% enddocs %}\n\n{% docs most_recent_rb %}\nWhen the most recent reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs first_rb %}\nWhen the first reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs avg_time_betw_rbs %}\nCalculated average time between reportbacks.\n{% enddocs %}\n\n{% docs avg_days_next_action_after_rb %}\nCalculated average days until next action after reportback\n{% enddocs %}\n\n{% docs days_to_next_action_after_last_rb %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs most_recent_mam_action %}\nMost recent monthly active member qualifying action in UTC (eg. 2018-01-01 12:00:00).\n{% enddocs %}\n\n{% docs most_recent_email_open %}\nMost recent email open in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs most_recent_all_actions %}\nMost recent timestamp of any action in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs last_action_is_rb %}\nWhether the last action the user took was a reportback\n{% enddocs %}\n\n{% docs days_since_last_action %}\nDays since the user's last action\n{% enddocs %}\n\n{% docs time_to_first_rb %}\nHow much time after registering until the user's first reportback\n{% enddocs %}\n\n{% docs sms_unsubscribed_at %}\nTimestamp of when user unsubscribed from SMS messaging\n{% enddocs %}\n\n{% docs user_unsubscribed_at %}\nTimestamp of when user unsubscribed from email or sms\n{% enddocs %}\n\n{% docs voter_reg_acquisition %}\nWhether the user was an acquisition through voter registration efforts. \n{% enddocs %}\n\n{% docs last_logged_in %}\nDate time in UTC when user last logged in to Northstar\n{% enddocs %}\n\n{% docs last_accessed %}\nDate time in UTC when user last access the website\n{% enddocs %}\n\n{% docs last_messaged_at %}\nDate time in UTC when user was last sent a message via SMS or email\n{% enddocs %}\n\n{% docs facebook_id %}\nUser's facebook id\n{% enddocs %}\n\n{% docs mobile %}\nUsers's mobile phone number\n{% enddocs %}\n\n{% docs birthdate %}\nUser's birthdate\n{% enddocs %}\n\n{% docs first_name %}\nUser's first name\n{% enddocs %}\n\n{% docs last_name %}\nUser's last name\n{% enddocs %}\n\n{% docs voter_registration_status %}\nUser's registration status. (e.g. registration_complete, confirmed, uncertain) \n{% enddocs %}\n\n{% docs finish_with_state %}\nIf the registrant was eligible to use and passed through to complete their registration with their state\u2019s OVR system, it will be indicated in this field (direct quote from Rock-The-Vote documentation). Yes/No value in field.\n{% enddocs %}\n\n{% docs reportback_volume %}\nThis field returns 1 if non voter-reg action, since campaigns team only counts those a 1 reportback. If voter-reg action, we want to count quantity of post as number of registered voters.\n{% enddocs %}\n\n{% docs address_street_1 %}\nFirst line of user's street address\n{% enddocs %}\n\n{% docs address_street_2 %}\nSecond line of user's street address\n{% enddocs %}\n\n{% docs city %}\nUser's city\n{% enddocs %}\n\n{% docs state %}\nUser's state\n{% enddocs %}\n\n{% docs country %}\nUser's country\n{% enddocs %}\n\n{% docs language %}\nUser's language\n{% enddocs %}\n\n{% docs cio_status %}\nStatus of user from CIO. (e.g. customer_subscribed, customer_unsubscribed)\n{% enddocs %}\n\n{% docs cio_status_timestamp %}\nTimestamp when users's status was updated.\n{% enddocs %}\n\n{% docs sms_status %}\nCurrent SMS status. (e.g. undeliverable, unknown)\n{% enddocs %}\n\n{% docs source_detail %}\nDetails of the origin of the user. (e.g. tell_a_friend, other, opt_in_path/197981)\n{% enddocs %}\n\n{% docs badges %}\nWhether the user has any badges. \n{% enddocs %}\n\n{% docs refer_friends %}\nWhether the user is a part of the refer a friend campaign. \n{% enddocs %}\n\n{% docs subscribed_member %}\nWhether the user is subscribed. \n{% enddocs %}\n\n{% docs last_updated_at %}\nTimestamp when users's was updated.\n{% enddocs %}\n\n{% docs school_id %}\nUnique identifier for the user's school. This info comes from the school finder.\n{% enddocs %}\n\n{% docs newsletter_topic %}\nNewsletter topic. (e.g. community, lifestyle)\n{% enddocs %}\n\n{% docs user_agent %}\nFull user agent string for a user's browser (e.g. \"Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:24.0) Gecko/20100101 Firefox/24.0\")\n{% enddocs %}\n\n{% docs drupal_id %}\nOld Drupal user ID\n{% enddocs %}\n\n{% docs campaigns %}\nCampaigns a user is signed up for.\n{% enddocs %}\n\n{% docs audit %}\nA very useful field with data containing information about changes to a user, e.g. timestamps when the user subscribed and unsubscribed.\n{% enddocs %}\n\n{% docs voting_plan_status %}\nThe indication of the user's plan to vote, e.g. voting, not_voting, cant_vote\n{% enddocs %}\n\n{% docs voting_plan_time_of_day %}\nThe time of day when the user plans to vote, e.g morning, afternoon, evening\n{% enddocs %}\n\n{% docs voting_plan_method_of_transport %}\nHow the user plans to get to their polling place. e.g. walk, drive\n{% enddocs %}\n\n{% docs voting_plan_attending_with %}\nWith Whom the user plans to go voting, e.g. family, friends, alone\n{% enddocs %}\n\n{% docs feature_flags %}\nJSON containing info on features like badges and refer-a-friend.\n{% enddocs %}\n\n{% docs dbt_updated_at %}\nDBT snapshot table data. The updated_at timestamp of the source record when this snapshot row was inserted.\n{% enddocs %}\n\n{% docs dbt_scd_id %}\nDBT snapshot table data. A unique key generated for each snapshotted record.\n{% enddocs %}\n\n{% docs dbt_valid_from %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this snapshot row was first inserted\n{% enddocs %}\n\n{% docs dbt_valid_to %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this row row became invalidated.\n{% enddocs %}\n\n{% docs google_id %}\nUser's Google ID obtained from login.\n{% enddocs %}\n\n{% docs causes %}\nCauses in which a user is interested. e.g. animal welfare, education, mental_health\n{% enddocs %}\n\n{% docs email_subscription_status %}\nEmail subscription status of the user\n{% enddocs %}\n\n{% docs role %}\nUser's role, e.g. user, staff\n{% enddocs %}\n\n{% docs cio_backfilled %}\nWhether this user's data was backfilled from CIO\n{% enddocs %}\n\n{% docs addr_source %}\nWhere the user submitted their address, e.g. sms, GDPR\n{% enddocs %}\n\n{% docs email_subscription_topics %}\nEmail subscription topics correspond to categories in CIO in which the user is interested. e.g. lifestyle, community, scholarship\n{% enddocs %}\n\n{% docs sms_paused %}\nWhether we've paused sending sms messages to the user.\n{% enddocs %}\n\n\n\n\n", "name": "quiz", "unique_id": "ds_dbt.quiz", "block_contents": "Whether the post is a quiz"}, "ds_dbt.action_type": {"root_path": "/Users/mrich/projects/quasar/quasar/dbt", "resource_type": "docs", "path": "schema.md", "original_file_path": "models/schema.md", "package_name": "ds_dbt", "file_contents": "\n{% docs click_id %}\nThis is a unique identifier for each click\n{% enddocs %}\n\n{% docs click_time %}\nTimestamp when user clicked.\n{% enddocs %}\n\n{% docs shortened %}\nShortened URL\n{% enddocs %}\n\n{% docs target_url %}\nURL where the user will be directed\n{% enddocs %}\n\n{% docs broadcast_id %}\nID of the broadcast that generated the shortened URL\n{% enddocs %}\n\n{% docs source %}\nSource of the URL (e.g. SMS, web), origin of the post (e.g. phoenix-web, phoenix-ashes, sms), or source where user was acquired. (e.g. sms, phoenix-next)\n{% enddocs %}\n\n{% docs interaction_type %}\nHow the user interacted with the link (e.g. preview, click)\n{% enddocs %}\n\n{% docs id %}\nUnique identifier for the post\n{% enddocs %}\n\n{% docs type %}\nType of post (e.g. photo)\n{% enddocs %}\n\n{% docs action %}\nPost action (e.g. DefendDreamers_Nov9_CongressCalls, GunViolence2018_Feb15_ParklandResponse)\n{% enddocs %}\n\n{% docs status %}\nPost status (e.g. accepted, rejected)\n{% enddocs %}\n\n{% docs quantity %}\nNumerical quantity of items specified in the call to action (e.g. 10, 200)\n{% enddocs %}\n\n{% docs source_bucket %}\nGrouping bucket for origin of the post (e.g. web, sms) \n{% enddocs %}\n\n{% docs created_at %}\nWhen the item was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs updated_at %}\nWhen the item was updated in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs text %}\nText of the post (e.g. \"Zoo animals and a super hero trying to help too!\") \n{% enddocs %}\n\n{% docs signup_id %}\nUnique identifier for the signup \n{% enddocs %}\n\n{% docs post_class %}\nClass of the signup (e.g. \"photo - default\", \"phone-call - DefendDreamers_Jan16_BothBodies\")\n{% enddocs %}\n\n{% docs is_accepted %}\nWhether the post has been accepted to be displayed to the public on the website\n{% enddocs %}\n\n{% docs action_id %}\nInternal identifier of the action \n{% enddocs %}\n\n{% docs location %}\nLocation where the action takes place (e.g. US-NY)\n{% enddocs %}\n\n{% docs postal_code %}\nPostal code where the action takes place\n{% enddocs %}\n\n{% docs is_reportback %}\nWhether the post is a reportback. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs civic_action %}\nWhether the post is a Civic Action. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs scholarship_entry %}\nWhether the post is a Scholarship Entry. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs why_participated %}\nWhy the user participated in this action. Entered by the user.\n{% enddocs %}\n\n{% docs details %}\nDetails about the post. Contains contentfulId and other information (e.g. {\"campaignContentfulId\":\"6ATBgGEQEeJoIcxs1qbwaC\"})\n{% enddocs %}\n\n{% docs email %}\nEmail address of the user.\n{% enddocs %}\n\n{% docs source_details %}\nDetails about the source of the item. This is sometimes represented as a JSON object, and for other tables like Turbovote its represented as a string. (e.g. \"{\"contentful_id\":\"3CTLlXfbwtz1FOMpl31SKV\",\"utm_source\":\"scholarship_listing\",\"utm_medium\":\"referral\",\"utm_campaign\":\"fastweb_2019_08\"}\", newsletter_456)\n{% enddocs %}\n\n{% docs campaign_id %}\nThis is a unique identifier for the campaign\n{% enddocs %}\n\n{% docs campaign_run_id %}\nUnique identifier for the campaign run\n{% enddocs %}\n\n{% docs campaign_name %}\nName of the campaign\n{% enddocs %}\n\n{% docs campaign_cause %}\nCampaign cause (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_run_start_date %}\nStart date of the campaign run\n{% enddocs %}\n\n{% docs campaign_run_end_date %}\nEnd date of the campaign run\n{% enddocs %}\n\n{% docs campaign_created_date %}\nWhen the campaign was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs campaign_node_id %}\nInternal unique node id for the campaign\n{% enddocs %}\n\n{% docs campaign_node_id_title %}\nCampaign title\n{% enddocs %}\n\n{% docs campaign_run_id_title %}\nTitle of the campaign run\n{% enddocs %}\n\n{% docs campaign_action_type %}\nCampaign action type (eg. Make Something, Share Something)\n{% enddocs %}\n\n{% docs campaign_cause_type %}\nCampaign cause type (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_noun %}\nNoun applicable to the user's action\n{% enddocs %}\n\n{% docs campaign_verb %}\nVerb describing the action the user should take\n{% enddocs %}\n\n{% docs campaign_cta %}\nCampaign's call to action\n{% enddocs %}\n\n{% docs campaign_language %}\n\"Language in which the campaign is available\"\n{% enddocs %}\n\n{% docs agent_id %}\nIf set, the content type of the picture the member is sending us. Exp. image/png.\n{% enddocs %}\n\n{% docs attachment_content_type %}\nIf set, the handle of the Front agent this outbound support message is from.\n{% enddocs %}\n\n{% docs topic %}\nHolds a reference to the **last** campaign topic the member's conversation was in. This is useful to allow members to talk to Gambit and get quick responses (through Rivescript), without Gambit completely forgetting what state the member's interaction with a campaign topic was in.\n{% enddocs %}\n\n{% docs action_serial_id %}\nSerial id for the user's action. Depends on the source of the action. May be the bertly click id, sms message id, etc.\n{% enddocs %}\n\n{% docs channel %}\nChannel for the user's action. Depends on the source of the action. (e.g. web, sms)\n{% enddocs %}\n\n{% docs first_action_month %}\nMonth during which the user took their first action. \n{% enddocs %}\n\n{% docs event_id %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs event_source %}\nApplication source for event (eg. Phoenix, Northstar)\n{% enddocs %}\n\n{% docs event_datetime %}\nWhen the event occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs event_name %}\nName of the event (eg. northstar_submitted_register, https://docs.google.com/spreadsheets/d/1lm-fGrIm85nUTxSojqyCt_Ehmm1zEbViFhKpxcJiz1A/edit#gid=406441516)\n{% enddocs %}\n\n{% docs event_type %}\nType of event (pv = 'Page View', se = 'Structured Event')\n{% enddocs %}\n\n{% docs host %}\nURL host where event occurred (eg. www.dosomething.org or identity.dosomething.org)\n{% enddocs %}\n\n{% docs path %}\nURL path event occurred at (eg. /login or /us/campaigns/huddle-for-heroes)\n{% enddocs %}\n\n{% docs query_parameters %}\nOptional query parameters for the request (eg. query=huddle)\n{% enddocs %}\n\n{% docs se_category %}\nCategory of event (eg. focused_field, authentication) - Custom structured event\n{% enddocs %}\n\n{% docs se_action %}\nAction performed / event name (eg. form_submitted, action_failed) - Custom structured event\n{% enddocs %}\n\n{% docs se_label %}\nThe object of the action (eg. first_name, register, voter_reg_status) - Custom structured event\n{% enddocs %}\n\n{% docs session_id %}\nUnique identifier of the user's session\n{% enddocs %}\n\n{% docs session_counter %}\nHow many sessions a user has started\n{% enddocs %}\n\n{% docs browser_size %}\nWhich type of browser a user is using (eg. Mobile, Desktop)\n{% enddocs %}\n\n{% docs northstar_id %}\nThe Northstar ID of the user who generated the event\n{% enddocs %}\n\n{% docs device_id %}\nID of the device used\n{% enddocs %}\n\n{% docs referrer_host %}\nURL host of the referring site (eg. google.com)\n{% enddocs %}\n\n{% docs referrer_path %}\nURL path from referring site (eg. /10-stats-on-teen-drug-and-alcohol-use/)\n{% enddocs %}\n\n{% docs referrer_source %}\nReferrer source name (eg. Google, Facebook)\n{% enddocs %}\n\n{% docs utm_source %}\nTracks where the traffic is coming from. (eg. scholarship_listing, Facebook)\n{% enddocs %}\n\n{% docs utm_medium %}\nHow the traffic got to the platform (eg. referral, CPC)\n{% enddocs %}\n\n{% docs utm_campaign %}\nTracks which campaign the traffic was generated by. Shows up in Google Analytics as Campaign Name (eg. editorial_newsletter)\n{% enddocs %}\n\n{% docs url %}\nURL of campaign (eg. https://dosome.click/nyn5m7)\n{% enddocs %}\n\n{% docs modal_type %}\nNULL or SURVEY_MODAL\n{% enddocs %}\n\n{% docs landing_datetime %}\nWhen the session started in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs ending_datetime %}\nWhen the session ended in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs session_duration_seconds %}\nSession duration in seconds\n{% enddocs %}\n\n{% docs num_pages_views %}\nNumber of pages viewed in session\n{% enddocs %}\n\n{% docs landing_page %}\nFirst page the user viewed in the session (eg. /us/facts/11-facts-about-bp-oil-spill)\n{% enddocs %}\n\n{% docs exit_page %}\n\"Which page the user ended or exited their session from (eg. /us/campaigns/green-your-getaway)\"\n{% enddocs %}\n\n{% docs days_since_last_session %}\n\"Days since their last session.\"\n{% enddocs %}\n\n{% docs post_type %}\nType of post, (e.g. photo, voter-reg)\n{% enddocs %}\n\n{% docs noun %}\nNoun that corresponds to the item in the call to action that was delivered. (e.g. drawings, tweets)\n{% enddocs %}\n\n{% docs verb %}\nVerb corresponding to the action the user took. (e.g. shared, sent, taken)\n{% enddocs %}\n\n{% docs deleted_at %}\nDate time in UTC when a user deleted their post.\n{% enddocs %}\n\n{% docs _fivetran_deleted %}\nMarks rows that were deleted in the source table\n{% enddocs %}\n\n{% docs _fivetran_synced %}\n(UTC timestamp) keeps track of when each row was last successfully synced\n{% enddocs %}\n\n{% docs reportback %}\nWhether the post is a reportback \n{% enddocs %}\n\n{% docs active %}\nWhether the user is active \n{% enddocs %}\n\n{% docs anonymous %}\nWhether the user is anonymous when making the post \n{% enddocs %}\n\n{% docs callpower_campaign_id %}\nUnique ID corresponding to the Callpower campaign. Callpower allows users to record messages for their representatives.\n{% enddocs %}\n\n{% docs quiz %}\nWhether the post is a quiz \n{% enddocs %}\n\n{% docs action_type %}\nType of action the user took. (e.g. share-something, donate-something)\n{% enddocs %}\n\n{% docs online %}\nWhether the action is a online as opposed to IRL.\n{% enddocs %}\n\n{% docs time_commitment %}\nEstimated time required to do the action (e.g. 3.0+, <0.5)\n{% enddocs %}\n\n{% docs num_signups %}\nQuantity of campaign signups\n{% enddocs %}\n\n{% docs most_recent_signup %}\nTimestamp of the most recent signup in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs num_rbs %}\nQuantity of reportbacks for the user\n{% enddocs %}\n\n{% docs total_quantity %}\nTotal quantity of items in reportbacks\n{% enddocs %}\n\n{% docs most_recent_rb %}\nWhen the most recent reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs first_rb %}\nWhen the first reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs avg_time_betw_rbs %}\nCalculated average time between reportbacks.\n{% enddocs %}\n\n{% docs avg_days_next_action_after_rb %}\nCalculated average days until next action after reportback\n{% enddocs %}\n\n{% docs days_to_next_action_after_last_rb %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs most_recent_mam_action %}\nMost recent monthly active member qualifying action in UTC (eg. 2018-01-01 12:00:00).\n{% enddocs %}\n\n{% docs most_recent_email_open %}\nMost recent email open in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs most_recent_all_actions %}\nMost recent timestamp of any action in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs last_action_is_rb %}\nWhether the last action the user took was a reportback\n{% enddocs %}\n\n{% docs days_since_last_action %}\nDays since the user's last action\n{% enddocs %}\n\n{% docs time_to_first_rb %}\nHow much time after registering until the user's first reportback\n{% enddocs %}\n\n{% docs sms_unsubscribed_at %}\nTimestamp of when user unsubscribed from SMS messaging\n{% enddocs %}\n\n{% docs user_unsubscribed_at %}\nTimestamp of when user unsubscribed from email or sms\n{% enddocs %}\n\n{% docs voter_reg_acquisition %}\nWhether the user was an acquisition through voter registration efforts. \n{% enddocs %}\n\n{% docs last_logged_in %}\nDate time in UTC when user last logged in to Northstar\n{% enddocs %}\n\n{% docs last_accessed %}\nDate time in UTC when user last access the website\n{% enddocs %}\n\n{% docs last_messaged_at %}\nDate time in UTC when user was last sent a message via SMS or email\n{% enddocs %}\n\n{% docs facebook_id %}\nUser's facebook id\n{% enddocs %}\n\n{% docs mobile %}\nUsers's mobile phone number\n{% enddocs %}\n\n{% docs birthdate %}\nUser's birthdate\n{% enddocs %}\n\n{% docs first_name %}\nUser's first name\n{% enddocs %}\n\n{% docs last_name %}\nUser's last name\n{% enddocs %}\n\n{% docs voter_registration_status %}\nUser's registration status. (e.g. registration_complete, confirmed, uncertain) \n{% enddocs %}\n\n{% docs finish_with_state %}\nIf the registrant was eligible to use and passed through to complete their registration with their state\u2019s OVR system, it will be indicated in this field (direct quote from Rock-The-Vote documentation). Yes/No value in field.\n{% enddocs %}\n\n{% docs reportback_volume %}\nThis field returns 1 if non voter-reg action, since campaigns team only counts those a 1 reportback. If voter-reg action, we want to count quantity of post as number of registered voters.\n{% enddocs %}\n\n{% docs address_street_1 %}\nFirst line of user's street address\n{% enddocs %}\n\n{% docs address_street_2 %}\nSecond line of user's street address\n{% enddocs %}\n\n{% docs city %}\nUser's city\n{% enddocs %}\n\n{% docs state %}\nUser's state\n{% enddocs %}\n\n{% docs country %}\nUser's country\n{% enddocs %}\n\n{% docs language %}\nUser's language\n{% enddocs %}\n\n{% docs cio_status %}\nStatus of user from CIO. (e.g. customer_subscribed, customer_unsubscribed)\n{% enddocs %}\n\n{% docs cio_status_timestamp %}\nTimestamp when users's status was updated.\n{% enddocs %}\n\n{% docs sms_status %}\nCurrent SMS status. (e.g. undeliverable, unknown)\n{% enddocs %}\n\n{% docs source_detail %}\nDetails of the origin of the user. (e.g. tell_a_friend, other, opt_in_path/197981)\n{% enddocs %}\n\n{% docs badges %}\nWhether the user has any badges. \n{% enddocs %}\n\n{% docs refer_friends %}\nWhether the user is a part of the refer a friend campaign. \n{% enddocs %}\n\n{% docs subscribed_member %}\nWhether the user is subscribed. \n{% enddocs %}\n\n{% docs last_updated_at %}\nTimestamp when users's was updated.\n{% enddocs %}\n\n{% docs school_id %}\nUnique identifier for the user's school. This info comes from the school finder.\n{% enddocs %}\n\n{% docs newsletter_topic %}\nNewsletter topic. (e.g. community, lifestyle)\n{% enddocs %}\n\n{% docs user_agent %}\nFull user agent string for a user's browser (e.g. \"Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:24.0) Gecko/20100101 Firefox/24.0\")\n{% enddocs %}\n\n{% docs drupal_id %}\nOld Drupal user ID\n{% enddocs %}\n\n{% docs campaigns %}\nCampaigns a user is signed up for.\n{% enddocs %}\n\n{% docs audit %}\nA very useful field with data containing information about changes to a user, e.g. timestamps when the user subscribed and unsubscribed.\n{% enddocs %}\n\n{% docs voting_plan_status %}\nThe indication of the user's plan to vote, e.g. voting, not_voting, cant_vote\n{% enddocs %}\n\n{% docs voting_plan_time_of_day %}\nThe time of day when the user plans to vote, e.g morning, afternoon, evening\n{% enddocs %}\n\n{% docs voting_plan_method_of_transport %}\nHow the user plans to get to their polling place. e.g. walk, drive\n{% enddocs %}\n\n{% docs voting_plan_attending_with %}\nWith Whom the user plans to go voting, e.g. family, friends, alone\n{% enddocs %}\n\n{% docs feature_flags %}\nJSON containing info on features like badges and refer-a-friend.\n{% enddocs %}\n\n{% docs dbt_updated_at %}\nDBT snapshot table data. The updated_at timestamp of the source record when this snapshot row was inserted.\n{% enddocs %}\n\n{% docs dbt_scd_id %}\nDBT snapshot table data. A unique key generated for each snapshotted record.\n{% enddocs %}\n\n{% docs dbt_valid_from %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this snapshot row was first inserted\n{% enddocs %}\n\n{% docs dbt_valid_to %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this row row became invalidated.\n{% enddocs %}\n\n{% docs google_id %}\nUser's Google ID obtained from login.\n{% enddocs %}\n\n{% docs causes %}\nCauses in which a user is interested. e.g. animal welfare, education, mental_health\n{% enddocs %}\n\n{% docs email_subscription_status %}\nEmail subscription status of the user\n{% enddocs %}\n\n{% docs role %}\nUser's role, e.g. user, staff\n{% enddocs %}\n\n{% docs cio_backfilled %}\nWhether this user's data was backfilled from CIO\n{% enddocs %}\n\n{% docs addr_source %}\nWhere the user submitted their address, e.g. sms, GDPR\n{% enddocs %}\n\n{% docs email_subscription_topics %}\nEmail subscription topics correspond to categories in CIO in which the user is interested. e.g. lifestyle, community, scholarship\n{% enddocs %}\n\n{% docs sms_paused %}\nWhether we've paused sending sms messages to the user.\n{% enddocs %}\n\n\n\n\n", "name": "action_type", "unique_id": "ds_dbt.action_type", "block_contents": "Type of action the user took. (e.g. share-something, donate-something)"}, "ds_dbt.online": {"root_path": "/Users/mrich/projects/quasar/quasar/dbt", "resource_type": "docs", "path": "schema.md", "original_file_path": "models/schema.md", "package_name": "ds_dbt", "file_contents": "\n{% docs click_id %}\nThis is a unique identifier for each click\n{% enddocs %}\n\n{% docs click_time %}\nTimestamp when user clicked.\n{% enddocs %}\n\n{% docs shortened %}\nShortened URL\n{% enddocs %}\n\n{% docs target_url %}\nURL where the user will be directed\n{% enddocs %}\n\n{% docs broadcast_id %}\nID of the broadcast that generated the shortened URL\n{% enddocs %}\n\n{% docs source %}\nSource of the URL (e.g. SMS, web), origin of the post (e.g. phoenix-web, phoenix-ashes, sms), or source where user was acquired. (e.g. sms, phoenix-next)\n{% enddocs %}\n\n{% docs interaction_type %}\nHow the user interacted with the link (e.g. preview, click)\n{% enddocs %}\n\n{% docs id %}\nUnique identifier for the post\n{% enddocs %}\n\n{% docs type %}\nType of post (e.g. photo)\n{% enddocs %}\n\n{% docs action %}\nPost action (e.g. DefendDreamers_Nov9_CongressCalls, GunViolence2018_Feb15_ParklandResponse)\n{% enddocs %}\n\n{% docs status %}\nPost status (e.g. accepted, rejected)\n{% enddocs %}\n\n{% docs quantity %}\nNumerical quantity of items specified in the call to action (e.g. 10, 200)\n{% enddocs %}\n\n{% docs source_bucket %}\nGrouping bucket for origin of the post (e.g. web, sms) \n{% enddocs %}\n\n{% docs created_at %}\nWhen the item was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs updated_at %}\nWhen the item was updated in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs text %}\nText of the post (e.g. \"Zoo animals and a super hero trying to help too!\") \n{% enddocs %}\n\n{% docs signup_id %}\nUnique identifier for the signup \n{% enddocs %}\n\n{% docs post_class %}\nClass of the signup (e.g. \"photo - default\", \"phone-call - DefendDreamers_Jan16_BothBodies\")\n{% enddocs %}\n\n{% docs is_accepted %}\nWhether the post has been accepted to be displayed to the public on the website\n{% enddocs %}\n\n{% docs action_id %}\nInternal identifier of the action \n{% enddocs %}\n\n{% docs location %}\nLocation where the action takes place (e.g. US-NY)\n{% enddocs %}\n\n{% docs postal_code %}\nPostal code where the action takes place\n{% enddocs %}\n\n{% docs is_reportback %}\nWhether the post is a reportback. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs civic_action %}\nWhether the post is a Civic Action. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs scholarship_entry %}\nWhether the post is a Scholarship Entry. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs why_participated %}\nWhy the user participated in this action. Entered by the user.\n{% enddocs %}\n\n{% docs details %}\nDetails about the post. Contains contentfulId and other information (e.g. {\"campaignContentfulId\":\"6ATBgGEQEeJoIcxs1qbwaC\"})\n{% enddocs %}\n\n{% docs email %}\nEmail address of the user.\n{% enddocs %}\n\n{% docs source_details %}\nDetails about the source of the item. This is sometimes represented as a JSON object, and for other tables like Turbovote its represented as a string. (e.g. \"{\"contentful_id\":\"3CTLlXfbwtz1FOMpl31SKV\",\"utm_source\":\"scholarship_listing\",\"utm_medium\":\"referral\",\"utm_campaign\":\"fastweb_2019_08\"}\", newsletter_456)\n{% enddocs %}\n\n{% docs campaign_id %}\nThis is a unique identifier for the campaign\n{% enddocs %}\n\n{% docs campaign_run_id %}\nUnique identifier for the campaign run\n{% enddocs %}\n\n{% docs campaign_name %}\nName of the campaign\n{% enddocs %}\n\n{% docs campaign_cause %}\nCampaign cause (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_run_start_date %}\nStart date of the campaign run\n{% enddocs %}\n\n{% docs campaign_run_end_date %}\nEnd date of the campaign run\n{% enddocs %}\n\n{% docs campaign_created_date %}\nWhen the campaign was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs campaign_node_id %}\nInternal unique node id for the campaign\n{% enddocs %}\n\n{% docs campaign_node_id_title %}\nCampaign title\n{% enddocs %}\n\n{% docs campaign_run_id_title %}\nTitle of the campaign run\n{% enddocs %}\n\n{% docs campaign_action_type %}\nCampaign action type (eg. Make Something, Share Something)\n{% enddocs %}\n\n{% docs campaign_cause_type %}\nCampaign cause type (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_noun %}\nNoun applicable to the user's action\n{% enddocs %}\n\n{% docs campaign_verb %}\nVerb describing the action the user should take\n{% enddocs %}\n\n{% docs campaign_cta %}\nCampaign's call to action\n{% enddocs %}\n\n{% docs campaign_language %}\n\"Language in which the campaign is available\"\n{% enddocs %}\n\n{% docs agent_id %}\nIf set, the content type of the picture the member is sending us. Exp. image/png.\n{% enddocs %}\n\n{% docs attachment_content_type %}\nIf set, the handle of the Front agent this outbound support message is from.\n{% enddocs %}\n\n{% docs topic %}\nHolds a reference to the **last** campaign topic the member's conversation was in. This is useful to allow members to talk to Gambit and get quick responses (through Rivescript), without Gambit completely forgetting what state the member's interaction with a campaign topic was in.\n{% enddocs %}\n\n{% docs action_serial_id %}\nSerial id for the user's action. Depends on the source of the action. May be the bertly click id, sms message id, etc.\n{% enddocs %}\n\n{% docs channel %}\nChannel for the user's action. Depends on the source of the action. (e.g. web, sms)\n{% enddocs %}\n\n{% docs first_action_month %}\nMonth during which the user took their first action. \n{% enddocs %}\n\n{% docs event_id %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs event_source %}\nApplication source for event (eg. Phoenix, Northstar)\n{% enddocs %}\n\n{% docs event_datetime %}\nWhen the event occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs event_name %}\nName of the event (eg. northstar_submitted_register, https://docs.google.com/spreadsheets/d/1lm-fGrIm85nUTxSojqyCt_Ehmm1zEbViFhKpxcJiz1A/edit#gid=406441516)\n{% enddocs %}\n\n{% docs event_type %}\nType of event (pv = 'Page View', se = 'Structured Event')\n{% enddocs %}\n\n{% docs host %}\nURL host where event occurred (eg. www.dosomething.org or identity.dosomething.org)\n{% enddocs %}\n\n{% docs path %}\nURL path event occurred at (eg. /login or /us/campaigns/huddle-for-heroes)\n{% enddocs %}\n\n{% docs query_parameters %}\nOptional query parameters for the request (eg. query=huddle)\n{% enddocs %}\n\n{% docs se_category %}\nCategory of event (eg. focused_field, authentication) - Custom structured event\n{% enddocs %}\n\n{% docs se_action %}\nAction performed / event name (eg. form_submitted, action_failed) - Custom structured event\n{% enddocs %}\n\n{% docs se_label %}\nThe object of the action (eg. first_name, register, voter_reg_status) - Custom structured event\n{% enddocs %}\n\n{% docs session_id %}\nUnique identifier of the user's session\n{% enddocs %}\n\n{% docs session_counter %}\nHow many sessions a user has started\n{% enddocs %}\n\n{% docs browser_size %}\nWhich type of browser a user is using (eg. Mobile, Desktop)\n{% enddocs %}\n\n{% docs northstar_id %}\nThe Northstar ID of the user who generated the event\n{% enddocs %}\n\n{% docs device_id %}\nID of the device used\n{% enddocs %}\n\n{% docs referrer_host %}\nURL host of the referring site (eg. google.com)\n{% enddocs %}\n\n{% docs referrer_path %}\nURL path from referring site (eg. /10-stats-on-teen-drug-and-alcohol-use/)\n{% enddocs %}\n\n{% docs referrer_source %}\nReferrer source name (eg. Google, Facebook)\n{% enddocs %}\n\n{% docs utm_source %}\nTracks where the traffic is coming from. (eg. scholarship_listing, Facebook)\n{% enddocs %}\n\n{% docs utm_medium %}\nHow the traffic got to the platform (eg. referral, CPC)\n{% enddocs %}\n\n{% docs utm_campaign %}\nTracks which campaign the traffic was generated by. Shows up in Google Analytics as Campaign Name (eg. editorial_newsletter)\n{% enddocs %}\n\n{% docs url %}\nURL of campaign (eg. https://dosome.click/nyn5m7)\n{% enddocs %}\n\n{% docs modal_type %}\nNULL or SURVEY_MODAL\n{% enddocs %}\n\n{% docs landing_datetime %}\nWhen the session started in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs ending_datetime %}\nWhen the session ended in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs session_duration_seconds %}\nSession duration in seconds\n{% enddocs %}\n\n{% docs num_pages_views %}\nNumber of pages viewed in session\n{% enddocs %}\n\n{% docs landing_page %}\nFirst page the user viewed in the session (eg. /us/facts/11-facts-about-bp-oil-spill)\n{% enddocs %}\n\n{% docs exit_page %}\n\"Which page the user ended or exited their session from (eg. /us/campaigns/green-your-getaway)\"\n{% enddocs %}\n\n{% docs days_since_last_session %}\n\"Days since their last session.\"\n{% enddocs %}\n\n{% docs post_type %}\nType of post, (e.g. photo, voter-reg)\n{% enddocs %}\n\n{% docs noun %}\nNoun that corresponds to the item in the call to action that was delivered. (e.g. drawings, tweets)\n{% enddocs %}\n\n{% docs verb %}\nVerb corresponding to the action the user took. (e.g. shared, sent, taken)\n{% enddocs %}\n\n{% docs deleted_at %}\nDate time in UTC when a user deleted their post.\n{% enddocs %}\n\n{% docs _fivetran_deleted %}\nMarks rows that were deleted in the source table\n{% enddocs %}\n\n{% docs _fivetran_synced %}\n(UTC timestamp) keeps track of when each row was last successfully synced\n{% enddocs %}\n\n{% docs reportback %}\nWhether the post is a reportback \n{% enddocs %}\n\n{% docs active %}\nWhether the user is active \n{% enddocs %}\n\n{% docs anonymous %}\nWhether the user is anonymous when making the post \n{% enddocs %}\n\n{% docs callpower_campaign_id %}\nUnique ID corresponding to the Callpower campaign. Callpower allows users to record messages for their representatives.\n{% enddocs %}\n\n{% docs quiz %}\nWhether the post is a quiz \n{% enddocs %}\n\n{% docs action_type %}\nType of action the user took. (e.g. share-something, donate-something)\n{% enddocs %}\n\n{% docs online %}\nWhether the action is a online as opposed to IRL.\n{% enddocs %}\n\n{% docs time_commitment %}\nEstimated time required to do the action (e.g. 3.0+, <0.5)\n{% enddocs %}\n\n{% docs num_signups %}\nQuantity of campaign signups\n{% enddocs %}\n\n{% docs most_recent_signup %}\nTimestamp of the most recent signup in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs num_rbs %}\nQuantity of reportbacks for the user\n{% enddocs %}\n\n{% docs total_quantity %}\nTotal quantity of items in reportbacks\n{% enddocs %}\n\n{% docs most_recent_rb %}\nWhen the most recent reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs first_rb %}\nWhen the first reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs avg_time_betw_rbs %}\nCalculated average time between reportbacks.\n{% enddocs %}\n\n{% docs avg_days_next_action_after_rb %}\nCalculated average days until next action after reportback\n{% enddocs %}\n\n{% docs days_to_next_action_after_last_rb %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs most_recent_mam_action %}\nMost recent monthly active member qualifying action in UTC (eg. 2018-01-01 12:00:00).\n{% enddocs %}\n\n{% docs most_recent_email_open %}\nMost recent email open in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs most_recent_all_actions %}\nMost recent timestamp of any action in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs last_action_is_rb %}\nWhether the last action the user took was a reportback\n{% enddocs %}\n\n{% docs days_since_last_action %}\nDays since the user's last action\n{% enddocs %}\n\n{% docs time_to_first_rb %}\nHow much time after registering until the user's first reportback\n{% enddocs %}\n\n{% docs sms_unsubscribed_at %}\nTimestamp of when user unsubscribed from SMS messaging\n{% enddocs %}\n\n{% docs user_unsubscribed_at %}\nTimestamp of when user unsubscribed from email or sms\n{% enddocs %}\n\n{% docs voter_reg_acquisition %}\nWhether the user was an acquisition through voter registration efforts. \n{% enddocs %}\n\n{% docs last_logged_in %}\nDate time in UTC when user last logged in to Northstar\n{% enddocs %}\n\n{% docs last_accessed %}\nDate time in UTC when user last access the website\n{% enddocs %}\n\n{% docs last_messaged_at %}\nDate time in UTC when user was last sent a message via SMS or email\n{% enddocs %}\n\n{% docs facebook_id %}\nUser's facebook id\n{% enddocs %}\n\n{% docs mobile %}\nUsers's mobile phone number\n{% enddocs %}\n\n{% docs birthdate %}\nUser's birthdate\n{% enddocs %}\n\n{% docs first_name %}\nUser's first name\n{% enddocs %}\n\n{% docs last_name %}\nUser's last name\n{% enddocs %}\n\n{% docs voter_registration_status %}\nUser's registration status. (e.g. registration_complete, confirmed, uncertain) \n{% enddocs %}\n\n{% docs finish_with_state %}\nIf the registrant was eligible to use and passed through to complete their registration with their state\u2019s OVR system, it will be indicated in this field (direct quote from Rock-The-Vote documentation). Yes/No value in field.\n{% enddocs %}\n\n{% docs reportback_volume %}\nThis field returns 1 if non voter-reg action, since campaigns team only counts those a 1 reportback. If voter-reg action, we want to count quantity of post as number of registered voters.\n{% enddocs %}\n\n{% docs address_street_1 %}\nFirst line of user's street address\n{% enddocs %}\n\n{% docs address_street_2 %}\nSecond line of user's street address\n{% enddocs %}\n\n{% docs city %}\nUser's city\n{% enddocs %}\n\n{% docs state %}\nUser's state\n{% enddocs %}\n\n{% docs country %}\nUser's country\n{% enddocs %}\n\n{% docs language %}\nUser's language\n{% enddocs %}\n\n{% docs cio_status %}\nStatus of user from CIO. (e.g. customer_subscribed, customer_unsubscribed)\n{% enddocs %}\n\n{% docs cio_status_timestamp %}\nTimestamp when users's status was updated.\n{% enddocs %}\n\n{% docs sms_status %}\nCurrent SMS status. (e.g. undeliverable, unknown)\n{% enddocs %}\n\n{% docs source_detail %}\nDetails of the origin of the user. (e.g. tell_a_friend, other, opt_in_path/197981)\n{% enddocs %}\n\n{% docs badges %}\nWhether the user has any badges. \n{% enddocs %}\n\n{% docs refer_friends %}\nWhether the user is a part of the refer a friend campaign. \n{% enddocs %}\n\n{% docs subscribed_member %}\nWhether the user is subscribed. \n{% enddocs %}\n\n{% docs last_updated_at %}\nTimestamp when users's was updated.\n{% enddocs %}\n\n{% docs school_id %}\nUnique identifier for the user's school. This info comes from the school finder.\n{% enddocs %}\n\n{% docs newsletter_topic %}\nNewsletter topic. (e.g. community, lifestyle)\n{% enddocs %}\n\n{% docs user_agent %}\nFull user agent string for a user's browser (e.g. \"Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:24.0) Gecko/20100101 Firefox/24.0\")\n{% enddocs %}\n\n{% docs drupal_id %}\nOld Drupal user ID\n{% enddocs %}\n\n{% docs campaigns %}\nCampaigns a user is signed up for.\n{% enddocs %}\n\n{% docs audit %}\nA very useful field with data containing information about changes to a user, e.g. timestamps when the user subscribed and unsubscribed.\n{% enddocs %}\n\n{% docs voting_plan_status %}\nThe indication of the user's plan to vote, e.g. voting, not_voting, cant_vote\n{% enddocs %}\n\n{% docs voting_plan_time_of_day %}\nThe time of day when the user plans to vote, e.g morning, afternoon, evening\n{% enddocs %}\n\n{% docs voting_plan_method_of_transport %}\nHow the user plans to get to their polling place. e.g. walk, drive\n{% enddocs %}\n\n{% docs voting_plan_attending_with %}\nWith Whom the user plans to go voting, e.g. family, friends, alone\n{% enddocs %}\n\n{% docs feature_flags %}\nJSON containing info on features like badges and refer-a-friend.\n{% enddocs %}\n\n{% docs dbt_updated_at %}\nDBT snapshot table data. The updated_at timestamp of the source record when this snapshot row was inserted.\n{% enddocs %}\n\n{% docs dbt_scd_id %}\nDBT snapshot table data. A unique key generated for each snapshotted record.\n{% enddocs %}\n\n{% docs dbt_valid_from %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this snapshot row was first inserted\n{% enddocs %}\n\n{% docs dbt_valid_to %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this row row became invalidated.\n{% enddocs %}\n\n{% docs google_id %}\nUser's Google ID obtained from login.\n{% enddocs %}\n\n{% docs causes %}\nCauses in which a user is interested. e.g. animal welfare, education, mental_health\n{% enddocs %}\n\n{% docs email_subscription_status %}\nEmail subscription status of the user\n{% enddocs %}\n\n{% docs role %}\nUser's role, e.g. user, staff\n{% enddocs %}\n\n{% docs cio_backfilled %}\nWhether this user's data was backfilled from CIO\n{% enddocs %}\n\n{% docs addr_source %}\nWhere the user submitted their address, e.g. sms, GDPR\n{% enddocs %}\n\n{% docs email_subscription_topics %}\nEmail subscription topics correspond to categories in CIO in which the user is interested. e.g. lifestyle, community, scholarship\n{% enddocs %}\n\n{% docs sms_paused %}\nWhether we've paused sending sms messages to the user.\n{% enddocs %}\n\n\n\n\n", "name": "online", "unique_id": "ds_dbt.online", "block_contents": "Whether the action is a online as opposed to IRL."}, "ds_dbt.time_commitment": {"root_path": "/Users/mrich/projects/quasar/quasar/dbt", "resource_type": "docs", "path": "schema.md", "original_file_path": "models/schema.md", "package_name": "ds_dbt", "file_contents": "\n{% docs click_id %}\nThis is a unique identifier for each click\n{% enddocs %}\n\n{% docs click_time %}\nTimestamp when user clicked.\n{% enddocs %}\n\n{% docs shortened %}\nShortened URL\n{% enddocs %}\n\n{% docs target_url %}\nURL where the user will be directed\n{% enddocs %}\n\n{% docs broadcast_id %}\nID of the broadcast that generated the shortened URL\n{% enddocs %}\n\n{% docs source %}\nSource of the URL (e.g. SMS, web), origin of the post (e.g. phoenix-web, phoenix-ashes, sms), or source where user was acquired. (e.g. sms, phoenix-next)\n{% enddocs %}\n\n{% docs interaction_type %}\nHow the user interacted with the link (e.g. preview, click)\n{% enddocs %}\n\n{% docs id %}\nUnique identifier for the post\n{% enddocs %}\n\n{% docs type %}\nType of post (e.g. photo)\n{% enddocs %}\n\n{% docs action %}\nPost action (e.g. DefendDreamers_Nov9_CongressCalls, GunViolence2018_Feb15_ParklandResponse)\n{% enddocs %}\n\n{% docs status %}\nPost status (e.g. accepted, rejected)\n{% enddocs %}\n\n{% docs quantity %}\nNumerical quantity of items specified in the call to action (e.g. 10, 200)\n{% enddocs %}\n\n{% docs source_bucket %}\nGrouping bucket for origin of the post (e.g. web, sms) \n{% enddocs %}\n\n{% docs created_at %}\nWhen the item was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs updated_at %}\nWhen the item was updated in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs text %}\nText of the post (e.g. \"Zoo animals and a super hero trying to help too!\") \n{% enddocs %}\n\n{% docs signup_id %}\nUnique identifier for the signup \n{% enddocs %}\n\n{% docs post_class %}\nClass of the signup (e.g. \"photo - default\", \"phone-call - DefendDreamers_Jan16_BothBodies\")\n{% enddocs %}\n\n{% docs is_accepted %}\nWhether the post has been accepted to be displayed to the public on the website\n{% enddocs %}\n\n{% docs action_id %}\nInternal identifier of the action \n{% enddocs %}\n\n{% docs location %}\nLocation where the action takes place (e.g. US-NY)\n{% enddocs %}\n\n{% docs postal_code %}\nPostal code where the action takes place\n{% enddocs %}\n\n{% docs is_reportback %}\nWhether the post is a reportback. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs civic_action %}\nWhether the post is a Civic Action. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs scholarship_entry %}\nWhether the post is a Scholarship Entry. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs why_participated %}\nWhy the user participated in this action. Entered by the user.\n{% enddocs %}\n\n{% docs details %}\nDetails about the post. Contains contentfulId and other information (e.g. {\"campaignContentfulId\":\"6ATBgGEQEeJoIcxs1qbwaC\"})\n{% enddocs %}\n\n{% docs email %}\nEmail address of the user.\n{% enddocs %}\n\n{% docs source_details %}\nDetails about the source of the item. This is sometimes represented as a JSON object, and for other tables like Turbovote its represented as a string. (e.g. \"{\"contentful_id\":\"3CTLlXfbwtz1FOMpl31SKV\",\"utm_source\":\"scholarship_listing\",\"utm_medium\":\"referral\",\"utm_campaign\":\"fastweb_2019_08\"}\", newsletter_456)\n{% enddocs %}\n\n{% docs campaign_id %}\nThis is a unique identifier for the campaign\n{% enddocs %}\n\n{% docs campaign_run_id %}\nUnique identifier for the campaign run\n{% enddocs %}\n\n{% docs campaign_name %}\nName of the campaign\n{% enddocs %}\n\n{% docs campaign_cause %}\nCampaign cause (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_run_start_date %}\nStart date of the campaign run\n{% enddocs %}\n\n{% docs campaign_run_end_date %}\nEnd date of the campaign run\n{% enddocs %}\n\n{% docs campaign_created_date %}\nWhen the campaign was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs campaign_node_id %}\nInternal unique node id for the campaign\n{% enddocs %}\n\n{% docs campaign_node_id_title %}\nCampaign title\n{% enddocs %}\n\n{% docs campaign_run_id_title %}\nTitle of the campaign run\n{% enddocs %}\n\n{% docs campaign_action_type %}\nCampaign action type (eg. Make Something, Share Something)\n{% enddocs %}\n\n{% docs campaign_cause_type %}\nCampaign cause type (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_noun %}\nNoun applicable to the user's action\n{% enddocs %}\n\n{% docs campaign_verb %}\nVerb describing the action the user should take\n{% enddocs %}\n\n{% docs campaign_cta %}\nCampaign's call to action\n{% enddocs %}\n\n{% docs campaign_language %}\n\"Language in which the campaign is available\"\n{% enddocs %}\n\n{% docs agent_id %}\nIf set, the content type of the picture the member is sending us. Exp. image/png.\n{% enddocs %}\n\n{% docs attachment_content_type %}\nIf set, the handle of the Front agent this outbound support message is from.\n{% enddocs %}\n\n{% docs topic %}\nHolds a reference to the **last** campaign topic the member's conversation was in. This is useful to allow members to talk to Gambit and get quick responses (through Rivescript), without Gambit completely forgetting what state the member's interaction with a campaign topic was in.\n{% enddocs %}\n\n{% docs action_serial_id %}\nSerial id for the user's action. Depends on the source of the action. May be the bertly click id, sms message id, etc.\n{% enddocs %}\n\n{% docs channel %}\nChannel for the user's action. Depends on the source of the action. (e.g. web, sms)\n{% enddocs %}\n\n{% docs first_action_month %}\nMonth during which the user took their first action. \n{% enddocs %}\n\n{% docs event_id %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs event_source %}\nApplication source for event (eg. Phoenix, Northstar)\n{% enddocs %}\n\n{% docs event_datetime %}\nWhen the event occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs event_name %}\nName of the event (eg. northstar_submitted_register, https://docs.google.com/spreadsheets/d/1lm-fGrIm85nUTxSojqyCt_Ehmm1zEbViFhKpxcJiz1A/edit#gid=406441516)\n{% enddocs %}\n\n{% docs event_type %}\nType of event (pv = 'Page View', se = 'Structured Event')\n{% enddocs %}\n\n{% docs host %}\nURL host where event occurred (eg. www.dosomething.org or identity.dosomething.org)\n{% enddocs %}\n\n{% docs path %}\nURL path event occurred at (eg. /login or /us/campaigns/huddle-for-heroes)\n{% enddocs %}\n\n{% docs query_parameters %}\nOptional query parameters for the request (eg. query=huddle)\n{% enddocs %}\n\n{% docs se_category %}\nCategory of event (eg. focused_field, authentication) - Custom structured event\n{% enddocs %}\n\n{% docs se_action %}\nAction performed / event name (eg. form_submitted, action_failed) - Custom structured event\n{% enddocs %}\n\n{% docs se_label %}\nThe object of the action (eg. first_name, register, voter_reg_status) - Custom structured event\n{% enddocs %}\n\n{% docs session_id %}\nUnique identifier of the user's session\n{% enddocs %}\n\n{% docs session_counter %}\nHow many sessions a user has started\n{% enddocs %}\n\n{% docs browser_size %}\nWhich type of browser a user is using (eg. Mobile, Desktop)\n{% enddocs %}\n\n{% docs northstar_id %}\nThe Northstar ID of the user who generated the event\n{% enddocs %}\n\n{% docs device_id %}\nID of the device used\n{% enddocs %}\n\n{% docs referrer_host %}\nURL host of the referring site (eg. google.com)\n{% enddocs %}\n\n{% docs referrer_path %}\nURL path from referring site (eg. /10-stats-on-teen-drug-and-alcohol-use/)\n{% enddocs %}\n\n{% docs referrer_source %}\nReferrer source name (eg. Google, Facebook)\n{% enddocs %}\n\n{% docs utm_source %}\nTracks where the traffic is coming from. (eg. scholarship_listing, Facebook)\n{% enddocs %}\n\n{% docs utm_medium %}\nHow the traffic got to the platform (eg. referral, CPC)\n{% enddocs %}\n\n{% docs utm_campaign %}\nTracks which campaign the traffic was generated by. Shows up in Google Analytics as Campaign Name (eg. editorial_newsletter)\n{% enddocs %}\n\n{% docs url %}\nURL of campaign (eg. https://dosome.click/nyn5m7)\n{% enddocs %}\n\n{% docs modal_type %}\nNULL or SURVEY_MODAL\n{% enddocs %}\n\n{% docs landing_datetime %}\nWhen the session started in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs ending_datetime %}\nWhen the session ended in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs session_duration_seconds %}\nSession duration in seconds\n{% enddocs %}\n\n{% docs num_pages_views %}\nNumber of pages viewed in session\n{% enddocs %}\n\n{% docs landing_page %}\nFirst page the user viewed in the session (eg. /us/facts/11-facts-about-bp-oil-spill)\n{% enddocs %}\n\n{% docs exit_page %}\n\"Which page the user ended or exited their session from (eg. /us/campaigns/green-your-getaway)\"\n{% enddocs %}\n\n{% docs days_since_last_session %}\n\"Days since their last session.\"\n{% enddocs %}\n\n{% docs post_type %}\nType of post, (e.g. photo, voter-reg)\n{% enddocs %}\n\n{% docs noun %}\nNoun that corresponds to the item in the call to action that was delivered. (e.g. drawings, tweets)\n{% enddocs %}\n\n{% docs verb %}\nVerb corresponding to the action the user took. (e.g. shared, sent, taken)\n{% enddocs %}\n\n{% docs deleted_at %}\nDate time in UTC when a user deleted their post.\n{% enddocs %}\n\n{% docs _fivetran_deleted %}\nMarks rows that were deleted in the source table\n{% enddocs %}\n\n{% docs _fivetran_synced %}\n(UTC timestamp) keeps track of when each row was last successfully synced\n{% enddocs %}\n\n{% docs reportback %}\nWhether the post is a reportback \n{% enddocs %}\n\n{% docs active %}\nWhether the user is active \n{% enddocs %}\n\n{% docs anonymous %}\nWhether the user is anonymous when making the post \n{% enddocs %}\n\n{% docs callpower_campaign_id %}\nUnique ID corresponding to the Callpower campaign. Callpower allows users to record messages for their representatives.\n{% enddocs %}\n\n{% docs quiz %}\nWhether the post is a quiz \n{% enddocs %}\n\n{% docs action_type %}\nType of action the user took. (e.g. share-something, donate-something)\n{% enddocs %}\n\n{% docs online %}\nWhether the action is a online as opposed to IRL.\n{% enddocs %}\n\n{% docs time_commitment %}\nEstimated time required to do the action (e.g. 3.0+, <0.5)\n{% enddocs %}\n\n{% docs num_signups %}\nQuantity of campaign signups\n{% enddocs %}\n\n{% docs most_recent_signup %}\nTimestamp of the most recent signup in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs num_rbs %}\nQuantity of reportbacks for the user\n{% enddocs %}\n\n{% docs total_quantity %}\nTotal quantity of items in reportbacks\n{% enddocs %}\n\n{% docs most_recent_rb %}\nWhen the most recent reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs first_rb %}\nWhen the first reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs avg_time_betw_rbs %}\nCalculated average time between reportbacks.\n{% enddocs %}\n\n{% docs avg_days_next_action_after_rb %}\nCalculated average days until next action after reportback\n{% enddocs %}\n\n{% docs days_to_next_action_after_last_rb %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs most_recent_mam_action %}\nMost recent monthly active member qualifying action in UTC (eg. 2018-01-01 12:00:00).\n{% enddocs %}\n\n{% docs most_recent_email_open %}\nMost recent email open in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs most_recent_all_actions %}\nMost recent timestamp of any action in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs last_action_is_rb %}\nWhether the last action the user took was a reportback\n{% enddocs %}\n\n{% docs days_since_last_action %}\nDays since the user's last action\n{% enddocs %}\n\n{% docs time_to_first_rb %}\nHow much time after registering until the user's first reportback\n{% enddocs %}\n\n{% docs sms_unsubscribed_at %}\nTimestamp of when user unsubscribed from SMS messaging\n{% enddocs %}\n\n{% docs user_unsubscribed_at %}\nTimestamp of when user unsubscribed from email or sms\n{% enddocs %}\n\n{% docs voter_reg_acquisition %}\nWhether the user was an acquisition through voter registration efforts. \n{% enddocs %}\n\n{% docs last_logged_in %}\nDate time in UTC when user last logged in to Northstar\n{% enddocs %}\n\n{% docs last_accessed %}\nDate time in UTC when user last access the website\n{% enddocs %}\n\n{% docs last_messaged_at %}\nDate time in UTC when user was last sent a message via SMS or email\n{% enddocs %}\n\n{% docs facebook_id %}\nUser's facebook id\n{% enddocs %}\n\n{% docs mobile %}\nUsers's mobile phone number\n{% enddocs %}\n\n{% docs birthdate %}\nUser's birthdate\n{% enddocs %}\n\n{% docs first_name %}\nUser's first name\n{% enddocs %}\n\n{% docs last_name %}\nUser's last name\n{% enddocs %}\n\n{% docs voter_registration_status %}\nUser's registration status. (e.g. registration_complete, confirmed, uncertain) \n{% enddocs %}\n\n{% docs finish_with_state %}\nIf the registrant was eligible to use and passed through to complete their registration with their state\u2019s OVR system, it will be indicated in this field (direct quote from Rock-The-Vote documentation). Yes/No value in field.\n{% enddocs %}\n\n{% docs reportback_volume %}\nThis field returns 1 if non voter-reg action, since campaigns team only counts those a 1 reportback. If voter-reg action, we want to count quantity of post as number of registered voters.\n{% enddocs %}\n\n{% docs address_street_1 %}\nFirst line of user's street address\n{% enddocs %}\n\n{% docs address_street_2 %}\nSecond line of user's street address\n{% enddocs %}\n\n{% docs city %}\nUser's city\n{% enddocs %}\n\n{% docs state %}\nUser's state\n{% enddocs %}\n\n{% docs country %}\nUser's country\n{% enddocs %}\n\n{% docs language %}\nUser's language\n{% enddocs %}\n\n{% docs cio_status %}\nStatus of user from CIO. (e.g. customer_subscribed, customer_unsubscribed)\n{% enddocs %}\n\n{% docs cio_status_timestamp %}\nTimestamp when users's status was updated.\n{% enddocs %}\n\n{% docs sms_status %}\nCurrent SMS status. (e.g. undeliverable, unknown)\n{% enddocs %}\n\n{% docs source_detail %}\nDetails of the origin of the user. (e.g. tell_a_friend, other, opt_in_path/197981)\n{% enddocs %}\n\n{% docs badges %}\nWhether the user has any badges. \n{% enddocs %}\n\n{% docs refer_friends %}\nWhether the user is a part of the refer a friend campaign. \n{% enddocs %}\n\n{% docs subscribed_member %}\nWhether the user is subscribed. \n{% enddocs %}\n\n{% docs last_updated_at %}\nTimestamp when users's was updated.\n{% enddocs %}\n\n{% docs school_id %}\nUnique identifier for the user's school. This info comes from the school finder.\n{% enddocs %}\n\n{% docs newsletter_topic %}\nNewsletter topic. (e.g. community, lifestyle)\n{% enddocs %}\n\n{% docs user_agent %}\nFull user agent string for a user's browser (e.g. \"Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:24.0) Gecko/20100101 Firefox/24.0\")\n{% enddocs %}\n\n{% docs drupal_id %}\nOld Drupal user ID\n{% enddocs %}\n\n{% docs campaigns %}\nCampaigns a user is signed up for.\n{% enddocs %}\n\n{% docs audit %}\nA very useful field with data containing information about changes to a user, e.g. timestamps when the user subscribed and unsubscribed.\n{% enddocs %}\n\n{% docs voting_plan_status %}\nThe indication of the user's plan to vote, e.g. voting, not_voting, cant_vote\n{% enddocs %}\n\n{% docs voting_plan_time_of_day %}\nThe time of day when the user plans to vote, e.g morning, afternoon, evening\n{% enddocs %}\n\n{% docs voting_plan_method_of_transport %}\nHow the user plans to get to their polling place. e.g. walk, drive\n{% enddocs %}\n\n{% docs voting_plan_attending_with %}\nWith Whom the user plans to go voting, e.g. family, friends, alone\n{% enddocs %}\n\n{% docs feature_flags %}\nJSON containing info on features like badges and refer-a-friend.\n{% enddocs %}\n\n{% docs dbt_updated_at %}\nDBT snapshot table data. The updated_at timestamp of the source record when this snapshot row was inserted.\n{% enddocs %}\n\n{% docs dbt_scd_id %}\nDBT snapshot table data. A unique key generated for each snapshotted record.\n{% enddocs %}\n\n{% docs dbt_valid_from %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this snapshot row was first inserted\n{% enddocs %}\n\n{% docs dbt_valid_to %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this row row became invalidated.\n{% enddocs %}\n\n{% docs google_id %}\nUser's Google ID obtained from login.\n{% enddocs %}\n\n{% docs causes %}\nCauses in which a user is interested. e.g. animal welfare, education, mental_health\n{% enddocs %}\n\n{% docs email_subscription_status %}\nEmail subscription status of the user\n{% enddocs %}\n\n{% docs role %}\nUser's role, e.g. user, staff\n{% enddocs %}\n\n{% docs cio_backfilled %}\nWhether this user's data was backfilled from CIO\n{% enddocs %}\n\n{% docs addr_source %}\nWhere the user submitted their address, e.g. sms, GDPR\n{% enddocs %}\n\n{% docs email_subscription_topics %}\nEmail subscription topics correspond to categories in CIO in which the user is interested. e.g. lifestyle, community, scholarship\n{% enddocs %}\n\n{% docs sms_paused %}\nWhether we've paused sending sms messages to the user.\n{% enddocs %}\n\n\n\n\n", "name": "time_commitment", "unique_id": "ds_dbt.time_commitment", "block_contents": "Estimated time required to do the action (e.g. 3.0+, <0.5)"}, "ds_dbt.num_signups": {"root_path": "/Users/mrich/projects/quasar/quasar/dbt", "resource_type": "docs", "path": "schema.md", "original_file_path": "models/schema.md", "package_name": "ds_dbt", "file_contents": "\n{% docs click_id %}\nThis is a unique identifier for each click\n{% enddocs %}\n\n{% docs click_time %}\nTimestamp when user clicked.\n{% enddocs %}\n\n{% docs shortened %}\nShortened URL\n{% enddocs %}\n\n{% docs target_url %}\nURL where the user will be directed\n{% enddocs %}\n\n{% docs broadcast_id %}\nID of the broadcast that generated the shortened URL\n{% enddocs %}\n\n{% docs source %}\nSource of the URL (e.g. SMS, web), origin of the post (e.g. phoenix-web, phoenix-ashes, sms), or source where user was acquired. (e.g. sms, phoenix-next)\n{% enddocs %}\n\n{% docs interaction_type %}\nHow the user interacted with the link (e.g. preview, click)\n{% enddocs %}\n\n{% docs id %}\nUnique identifier for the post\n{% enddocs %}\n\n{% docs type %}\nType of post (e.g. photo)\n{% enddocs %}\n\n{% docs action %}\nPost action (e.g. DefendDreamers_Nov9_CongressCalls, GunViolence2018_Feb15_ParklandResponse)\n{% enddocs %}\n\n{% docs status %}\nPost status (e.g. accepted, rejected)\n{% enddocs %}\n\n{% docs quantity %}\nNumerical quantity of items specified in the call to action (e.g. 10, 200)\n{% enddocs %}\n\n{% docs source_bucket %}\nGrouping bucket for origin of the post (e.g. web, sms) \n{% enddocs %}\n\n{% docs created_at %}\nWhen the item was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs updated_at %}\nWhen the item was updated in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs text %}\nText of the post (e.g. \"Zoo animals and a super hero trying to help too!\") \n{% enddocs %}\n\n{% docs signup_id %}\nUnique identifier for the signup \n{% enddocs %}\n\n{% docs post_class %}\nClass of the signup (e.g. \"photo - default\", \"phone-call - DefendDreamers_Jan16_BothBodies\")\n{% enddocs %}\n\n{% docs is_accepted %}\nWhether the post has been accepted to be displayed to the public on the website\n{% enddocs %}\n\n{% docs action_id %}\nInternal identifier of the action \n{% enddocs %}\n\n{% docs location %}\nLocation where the action takes place (e.g. US-NY)\n{% enddocs %}\n\n{% docs postal_code %}\nPostal code where the action takes place\n{% enddocs %}\n\n{% docs is_reportback %}\nWhether the post is a reportback. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs civic_action %}\nWhether the post is a Civic Action. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs scholarship_entry %}\nWhether the post is a Scholarship Entry. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs why_participated %}\nWhy the user participated in this action. Entered by the user.\n{% enddocs %}\n\n{% docs details %}\nDetails about the post. Contains contentfulId and other information (e.g. {\"campaignContentfulId\":\"6ATBgGEQEeJoIcxs1qbwaC\"})\n{% enddocs %}\n\n{% docs email %}\nEmail address of the user.\n{% enddocs %}\n\n{% docs source_details %}\nDetails about the source of the item. This is sometimes represented as a JSON object, and for other tables like Turbovote its represented as a string. (e.g. \"{\"contentful_id\":\"3CTLlXfbwtz1FOMpl31SKV\",\"utm_source\":\"scholarship_listing\",\"utm_medium\":\"referral\",\"utm_campaign\":\"fastweb_2019_08\"}\", newsletter_456)\n{% enddocs %}\n\n{% docs campaign_id %}\nThis is a unique identifier for the campaign\n{% enddocs %}\n\n{% docs campaign_run_id %}\nUnique identifier for the campaign run\n{% enddocs %}\n\n{% docs campaign_name %}\nName of the campaign\n{% enddocs %}\n\n{% docs campaign_cause %}\nCampaign cause (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_run_start_date %}\nStart date of the campaign run\n{% enddocs %}\n\n{% docs campaign_run_end_date %}\nEnd date of the campaign run\n{% enddocs %}\n\n{% docs campaign_created_date %}\nWhen the campaign was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs campaign_node_id %}\nInternal unique node id for the campaign\n{% enddocs %}\n\n{% docs campaign_node_id_title %}\nCampaign title\n{% enddocs %}\n\n{% docs campaign_run_id_title %}\nTitle of the campaign run\n{% enddocs %}\n\n{% docs campaign_action_type %}\nCampaign action type (eg. Make Something, Share Something)\n{% enddocs %}\n\n{% docs campaign_cause_type %}\nCampaign cause type (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_noun %}\nNoun applicable to the user's action\n{% enddocs %}\n\n{% docs campaign_verb %}\nVerb describing the action the user should take\n{% enddocs %}\n\n{% docs campaign_cta %}\nCampaign's call to action\n{% enddocs %}\n\n{% docs campaign_language %}\n\"Language in which the campaign is available\"\n{% enddocs %}\n\n{% docs agent_id %}\nIf set, the content type of the picture the member is sending us. Exp. image/png.\n{% enddocs %}\n\n{% docs attachment_content_type %}\nIf set, the handle of the Front agent this outbound support message is from.\n{% enddocs %}\n\n{% docs topic %}\nHolds a reference to the **last** campaign topic the member's conversation was in. This is useful to allow members to talk to Gambit and get quick responses (through Rivescript), without Gambit completely forgetting what state the member's interaction with a campaign topic was in.\n{% enddocs %}\n\n{% docs action_serial_id %}\nSerial id for the user's action. Depends on the source of the action. May be the bertly click id, sms message id, etc.\n{% enddocs %}\n\n{% docs channel %}\nChannel for the user's action. Depends on the source of the action. (e.g. web, sms)\n{% enddocs %}\n\n{% docs first_action_month %}\nMonth during which the user took their first action. \n{% enddocs %}\n\n{% docs event_id %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs event_source %}\nApplication source for event (eg. Phoenix, Northstar)\n{% enddocs %}\n\n{% docs event_datetime %}\nWhen the event occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs event_name %}\nName of the event (eg. northstar_submitted_register, https://docs.google.com/spreadsheets/d/1lm-fGrIm85nUTxSojqyCt_Ehmm1zEbViFhKpxcJiz1A/edit#gid=406441516)\n{% enddocs %}\n\n{% docs event_type %}\nType of event (pv = 'Page View', se = 'Structured Event')\n{% enddocs %}\n\n{% docs host %}\nURL host where event occurred (eg. www.dosomething.org or identity.dosomething.org)\n{% enddocs %}\n\n{% docs path %}\nURL path event occurred at (eg. /login or /us/campaigns/huddle-for-heroes)\n{% enddocs %}\n\n{% docs query_parameters %}\nOptional query parameters for the request (eg. query=huddle)\n{% enddocs %}\n\n{% docs se_category %}\nCategory of event (eg. focused_field, authentication) - Custom structured event\n{% enddocs %}\n\n{% docs se_action %}\nAction performed / event name (eg. form_submitted, action_failed) - Custom structured event\n{% enddocs %}\n\n{% docs se_label %}\nThe object of the action (eg. first_name, register, voter_reg_status) - Custom structured event\n{% enddocs %}\n\n{% docs session_id %}\nUnique identifier of the user's session\n{% enddocs %}\n\n{% docs session_counter %}\nHow many sessions a user has started\n{% enddocs %}\n\n{% docs browser_size %}\nWhich type of browser a user is using (eg. Mobile, Desktop)\n{% enddocs %}\n\n{% docs northstar_id %}\nThe Northstar ID of the user who generated the event\n{% enddocs %}\n\n{% docs device_id %}\nID of the device used\n{% enddocs %}\n\n{% docs referrer_host %}\nURL host of the referring site (eg. google.com)\n{% enddocs %}\n\n{% docs referrer_path %}\nURL path from referring site (eg. /10-stats-on-teen-drug-and-alcohol-use/)\n{% enddocs %}\n\n{% docs referrer_source %}\nReferrer source name (eg. Google, Facebook)\n{% enddocs %}\n\n{% docs utm_source %}\nTracks where the traffic is coming from. (eg. scholarship_listing, Facebook)\n{% enddocs %}\n\n{% docs utm_medium %}\nHow the traffic got to the platform (eg. referral, CPC)\n{% enddocs %}\n\n{% docs utm_campaign %}\nTracks which campaign the traffic was generated by. Shows up in Google Analytics as Campaign Name (eg. editorial_newsletter)\n{% enddocs %}\n\n{% docs url %}\nURL of campaign (eg. https://dosome.click/nyn5m7)\n{% enddocs %}\n\n{% docs modal_type %}\nNULL or SURVEY_MODAL\n{% enddocs %}\n\n{% docs landing_datetime %}\nWhen the session started in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs ending_datetime %}\nWhen the session ended in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs session_duration_seconds %}\nSession duration in seconds\n{% enddocs %}\n\n{% docs num_pages_views %}\nNumber of pages viewed in session\n{% enddocs %}\n\n{% docs landing_page %}\nFirst page the user viewed in the session (eg. /us/facts/11-facts-about-bp-oil-spill)\n{% enddocs %}\n\n{% docs exit_page %}\n\"Which page the user ended or exited their session from (eg. /us/campaigns/green-your-getaway)\"\n{% enddocs %}\n\n{% docs days_since_last_session %}\n\"Days since their last session.\"\n{% enddocs %}\n\n{% docs post_type %}\nType of post, (e.g. photo, voter-reg)\n{% enddocs %}\n\n{% docs noun %}\nNoun that corresponds to the item in the call to action that was delivered. (e.g. drawings, tweets)\n{% enddocs %}\n\n{% docs verb %}\nVerb corresponding to the action the user took. (e.g. shared, sent, taken)\n{% enddocs %}\n\n{% docs deleted_at %}\nDate time in UTC when a user deleted their post.\n{% enddocs %}\n\n{% docs _fivetran_deleted %}\nMarks rows that were deleted in the source table\n{% enddocs %}\n\n{% docs _fivetran_synced %}\n(UTC timestamp) keeps track of when each row was last successfully synced\n{% enddocs %}\n\n{% docs reportback %}\nWhether the post is a reportback \n{% enddocs %}\n\n{% docs active %}\nWhether the user is active \n{% enddocs %}\n\n{% docs anonymous %}\nWhether the user is anonymous when making the post \n{% enddocs %}\n\n{% docs callpower_campaign_id %}\nUnique ID corresponding to the Callpower campaign. Callpower allows users to record messages for their representatives.\n{% enddocs %}\n\n{% docs quiz %}\nWhether the post is a quiz \n{% enddocs %}\n\n{% docs action_type %}\nType of action the user took. (e.g. share-something, donate-something)\n{% enddocs %}\n\n{% docs online %}\nWhether the action is a online as opposed to IRL.\n{% enddocs %}\n\n{% docs time_commitment %}\nEstimated time required to do the action (e.g. 3.0+, <0.5)\n{% enddocs %}\n\n{% docs num_signups %}\nQuantity of campaign signups\n{% enddocs %}\n\n{% docs most_recent_signup %}\nTimestamp of the most recent signup in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs num_rbs %}\nQuantity of reportbacks for the user\n{% enddocs %}\n\n{% docs total_quantity %}\nTotal quantity of items in reportbacks\n{% enddocs %}\n\n{% docs most_recent_rb %}\nWhen the most recent reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs first_rb %}\nWhen the first reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs avg_time_betw_rbs %}\nCalculated average time between reportbacks.\n{% enddocs %}\n\n{% docs avg_days_next_action_after_rb %}\nCalculated average days until next action after reportback\n{% enddocs %}\n\n{% docs days_to_next_action_after_last_rb %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs most_recent_mam_action %}\nMost recent monthly active member qualifying action in UTC (eg. 2018-01-01 12:00:00).\n{% enddocs %}\n\n{% docs most_recent_email_open %}\nMost recent email open in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs most_recent_all_actions %}\nMost recent timestamp of any action in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs last_action_is_rb %}\nWhether the last action the user took was a reportback\n{% enddocs %}\n\n{% docs days_since_last_action %}\nDays since the user's last action\n{% enddocs %}\n\n{% docs time_to_first_rb %}\nHow much time after registering until the user's first reportback\n{% enddocs %}\n\n{% docs sms_unsubscribed_at %}\nTimestamp of when user unsubscribed from SMS messaging\n{% enddocs %}\n\n{% docs user_unsubscribed_at %}\nTimestamp of when user unsubscribed from email or sms\n{% enddocs %}\n\n{% docs voter_reg_acquisition %}\nWhether the user was an acquisition through voter registration efforts. \n{% enddocs %}\n\n{% docs last_logged_in %}\nDate time in UTC when user last logged in to Northstar\n{% enddocs %}\n\n{% docs last_accessed %}\nDate time in UTC when user last access the website\n{% enddocs %}\n\n{% docs last_messaged_at %}\nDate time in UTC when user was last sent a message via SMS or email\n{% enddocs %}\n\n{% docs facebook_id %}\nUser's facebook id\n{% enddocs %}\n\n{% docs mobile %}\nUsers's mobile phone number\n{% enddocs %}\n\n{% docs birthdate %}\nUser's birthdate\n{% enddocs %}\n\n{% docs first_name %}\nUser's first name\n{% enddocs %}\n\n{% docs last_name %}\nUser's last name\n{% enddocs %}\n\n{% docs voter_registration_status %}\nUser's registration status. (e.g. registration_complete, confirmed, uncertain) \n{% enddocs %}\n\n{% docs finish_with_state %}\nIf the registrant was eligible to use and passed through to complete their registration with their state\u2019s OVR system, it will be indicated in this field (direct quote from Rock-The-Vote documentation). Yes/No value in field.\n{% enddocs %}\n\n{% docs reportback_volume %}\nThis field returns 1 if non voter-reg action, since campaigns team only counts those a 1 reportback. If voter-reg action, we want to count quantity of post as number of registered voters.\n{% enddocs %}\n\n{% docs address_street_1 %}\nFirst line of user's street address\n{% enddocs %}\n\n{% docs address_street_2 %}\nSecond line of user's street address\n{% enddocs %}\n\n{% docs city %}\nUser's city\n{% enddocs %}\n\n{% docs state %}\nUser's state\n{% enddocs %}\n\n{% docs country %}\nUser's country\n{% enddocs %}\n\n{% docs language %}\nUser's language\n{% enddocs %}\n\n{% docs cio_status %}\nStatus of user from CIO. (e.g. customer_subscribed, customer_unsubscribed)\n{% enddocs %}\n\n{% docs cio_status_timestamp %}\nTimestamp when users's status was updated.\n{% enddocs %}\n\n{% docs sms_status %}\nCurrent SMS status. (e.g. undeliverable, unknown)\n{% enddocs %}\n\n{% docs source_detail %}\nDetails of the origin of the user. (e.g. tell_a_friend, other, opt_in_path/197981)\n{% enddocs %}\n\n{% docs badges %}\nWhether the user has any badges. \n{% enddocs %}\n\n{% docs refer_friends %}\nWhether the user is a part of the refer a friend campaign. \n{% enddocs %}\n\n{% docs subscribed_member %}\nWhether the user is subscribed. \n{% enddocs %}\n\n{% docs last_updated_at %}\nTimestamp when users's was updated.\n{% enddocs %}\n\n{% docs school_id %}\nUnique identifier for the user's school. This info comes from the school finder.\n{% enddocs %}\n\n{% docs newsletter_topic %}\nNewsletter topic. (e.g. community, lifestyle)\n{% enddocs %}\n\n{% docs user_agent %}\nFull user agent string for a user's browser (e.g. \"Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:24.0) Gecko/20100101 Firefox/24.0\")\n{% enddocs %}\n\n{% docs drupal_id %}\nOld Drupal user ID\n{% enddocs %}\n\n{% docs campaigns %}\nCampaigns a user is signed up for.\n{% enddocs %}\n\n{% docs audit %}\nA very useful field with data containing information about changes to a user, e.g. timestamps when the user subscribed and unsubscribed.\n{% enddocs %}\n\n{% docs voting_plan_status %}\nThe indication of the user's plan to vote, e.g. voting, not_voting, cant_vote\n{% enddocs %}\n\n{% docs voting_plan_time_of_day %}\nThe time of day when the user plans to vote, e.g morning, afternoon, evening\n{% enddocs %}\n\n{% docs voting_plan_method_of_transport %}\nHow the user plans to get to their polling place. e.g. walk, drive\n{% enddocs %}\n\n{% docs voting_plan_attending_with %}\nWith Whom the user plans to go voting, e.g. family, friends, alone\n{% enddocs %}\n\n{% docs feature_flags %}\nJSON containing info on features like badges and refer-a-friend.\n{% enddocs %}\n\n{% docs dbt_updated_at %}\nDBT snapshot table data. The updated_at timestamp of the source record when this snapshot row was inserted.\n{% enddocs %}\n\n{% docs dbt_scd_id %}\nDBT snapshot table data. A unique key generated for each snapshotted record.\n{% enddocs %}\n\n{% docs dbt_valid_from %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this snapshot row was first inserted\n{% enddocs %}\n\n{% docs dbt_valid_to %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this row row became invalidated.\n{% enddocs %}\n\n{% docs google_id %}\nUser's Google ID obtained from login.\n{% enddocs %}\n\n{% docs causes %}\nCauses in which a user is interested. e.g. animal welfare, education, mental_health\n{% enddocs %}\n\n{% docs email_subscription_status %}\nEmail subscription status of the user\n{% enddocs %}\n\n{% docs role %}\nUser's role, e.g. user, staff\n{% enddocs %}\n\n{% docs cio_backfilled %}\nWhether this user's data was backfilled from CIO\n{% enddocs %}\n\n{% docs addr_source %}\nWhere the user submitted their address, e.g. sms, GDPR\n{% enddocs %}\n\n{% docs email_subscription_topics %}\nEmail subscription topics correspond to categories in CIO in which the user is interested. e.g. lifestyle, community, scholarship\n{% enddocs %}\n\n{% docs sms_paused %}\nWhether we've paused sending sms messages to the user.\n{% enddocs %}\n\n\n\n\n", "name": "num_signups", "unique_id": "ds_dbt.num_signups", "block_contents": "Quantity of campaign signups"}, "ds_dbt.most_recent_signup": {"root_path": "/Users/mrich/projects/quasar/quasar/dbt", "resource_type": "docs", "path": "schema.md", "original_file_path": "models/schema.md", "package_name": "ds_dbt", "file_contents": "\n{% docs click_id %}\nThis is a unique identifier for each click\n{% enddocs %}\n\n{% docs click_time %}\nTimestamp when user clicked.\n{% enddocs %}\n\n{% docs shortened %}\nShortened URL\n{% enddocs %}\n\n{% docs target_url %}\nURL where the user will be directed\n{% enddocs %}\n\n{% docs broadcast_id %}\nID of the broadcast that generated the shortened URL\n{% enddocs %}\n\n{% docs source %}\nSource of the URL (e.g. SMS, web), origin of the post (e.g. phoenix-web, phoenix-ashes, sms), or source where user was acquired. (e.g. sms, phoenix-next)\n{% enddocs %}\n\n{% docs interaction_type %}\nHow the user interacted with the link (e.g. preview, click)\n{% enddocs %}\n\n{% docs id %}\nUnique identifier for the post\n{% enddocs %}\n\n{% docs type %}\nType of post (e.g. photo)\n{% enddocs %}\n\n{% docs action %}\nPost action (e.g. DefendDreamers_Nov9_CongressCalls, GunViolence2018_Feb15_ParklandResponse)\n{% enddocs %}\n\n{% docs status %}\nPost status (e.g. accepted, rejected)\n{% enddocs %}\n\n{% docs quantity %}\nNumerical quantity of items specified in the call to action (e.g. 10, 200)\n{% enddocs %}\n\n{% docs source_bucket %}\nGrouping bucket for origin of the post (e.g. web, sms) \n{% enddocs %}\n\n{% docs created_at %}\nWhen the item was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs updated_at %}\nWhen the item was updated in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs text %}\nText of the post (e.g. \"Zoo animals and a super hero trying to help too!\") \n{% enddocs %}\n\n{% docs signup_id %}\nUnique identifier for the signup \n{% enddocs %}\n\n{% docs post_class %}\nClass of the signup (e.g. \"photo - default\", \"phone-call - DefendDreamers_Jan16_BothBodies\")\n{% enddocs %}\n\n{% docs is_accepted %}\nWhether the post has been accepted to be displayed to the public on the website\n{% enddocs %}\n\n{% docs action_id %}\nInternal identifier of the action \n{% enddocs %}\n\n{% docs location %}\nLocation where the action takes place (e.g. US-NY)\n{% enddocs %}\n\n{% docs postal_code %}\nPostal code where the action takes place\n{% enddocs %}\n\n{% docs is_reportback %}\nWhether the post is a reportback. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs civic_action %}\nWhether the post is a Civic Action. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs scholarship_entry %}\nWhether the post is a Scholarship Entry. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs why_participated %}\nWhy the user participated in this action. Entered by the user.\n{% enddocs %}\n\n{% docs details %}\nDetails about the post. Contains contentfulId and other information (e.g. {\"campaignContentfulId\":\"6ATBgGEQEeJoIcxs1qbwaC\"})\n{% enddocs %}\n\n{% docs email %}\nEmail address of the user.\n{% enddocs %}\n\n{% docs source_details %}\nDetails about the source of the item. This is sometimes represented as a JSON object, and for other tables like Turbovote its represented as a string. (e.g. \"{\"contentful_id\":\"3CTLlXfbwtz1FOMpl31SKV\",\"utm_source\":\"scholarship_listing\",\"utm_medium\":\"referral\",\"utm_campaign\":\"fastweb_2019_08\"}\", newsletter_456)\n{% enddocs %}\n\n{% docs campaign_id %}\nThis is a unique identifier for the campaign\n{% enddocs %}\n\n{% docs campaign_run_id %}\nUnique identifier for the campaign run\n{% enddocs %}\n\n{% docs campaign_name %}\nName of the campaign\n{% enddocs %}\n\n{% docs campaign_cause %}\nCampaign cause (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_run_start_date %}\nStart date of the campaign run\n{% enddocs %}\n\n{% docs campaign_run_end_date %}\nEnd date of the campaign run\n{% enddocs %}\n\n{% docs campaign_created_date %}\nWhen the campaign was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs campaign_node_id %}\nInternal unique node id for the campaign\n{% enddocs %}\n\n{% docs campaign_node_id_title %}\nCampaign title\n{% enddocs %}\n\n{% docs campaign_run_id_title %}\nTitle of the campaign run\n{% enddocs %}\n\n{% docs campaign_action_type %}\nCampaign action type (eg. Make Something, Share Something)\n{% enddocs %}\n\n{% docs campaign_cause_type %}\nCampaign cause type (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_noun %}\nNoun applicable to the user's action\n{% enddocs %}\n\n{% docs campaign_verb %}\nVerb describing the action the user should take\n{% enddocs %}\n\n{% docs campaign_cta %}\nCampaign's call to action\n{% enddocs %}\n\n{% docs campaign_language %}\n\"Language in which the campaign is available\"\n{% enddocs %}\n\n{% docs agent_id %}\nIf set, the content type of the picture the member is sending us. Exp. image/png.\n{% enddocs %}\n\n{% docs attachment_content_type %}\nIf set, the handle of the Front agent this outbound support message is from.\n{% enddocs %}\n\n{% docs topic %}\nHolds a reference to the **last** campaign topic the member's conversation was in. This is useful to allow members to talk to Gambit and get quick responses (through Rivescript), without Gambit completely forgetting what state the member's interaction with a campaign topic was in.\n{% enddocs %}\n\n{% docs action_serial_id %}\nSerial id for the user's action. Depends on the source of the action. May be the bertly click id, sms message id, etc.\n{% enddocs %}\n\n{% docs channel %}\nChannel for the user's action. Depends on the source of the action. (e.g. web, sms)\n{% enddocs %}\n\n{% docs first_action_month %}\nMonth during which the user took their first action. \n{% enddocs %}\n\n{% docs event_id %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs event_source %}\nApplication source for event (eg. Phoenix, Northstar)\n{% enddocs %}\n\n{% docs event_datetime %}\nWhen the event occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs event_name %}\nName of the event (eg. northstar_submitted_register, https://docs.google.com/spreadsheets/d/1lm-fGrIm85nUTxSojqyCt_Ehmm1zEbViFhKpxcJiz1A/edit#gid=406441516)\n{% enddocs %}\n\n{% docs event_type %}\nType of event (pv = 'Page View', se = 'Structured Event')\n{% enddocs %}\n\n{% docs host %}\nURL host where event occurred (eg. www.dosomething.org or identity.dosomething.org)\n{% enddocs %}\n\n{% docs path %}\nURL path event occurred at (eg. /login or /us/campaigns/huddle-for-heroes)\n{% enddocs %}\n\n{% docs query_parameters %}\nOptional query parameters for the request (eg. query=huddle)\n{% enddocs %}\n\n{% docs se_category %}\nCategory of event (eg. focused_field, authentication) - Custom structured event\n{% enddocs %}\n\n{% docs se_action %}\nAction performed / event name (eg. form_submitted, action_failed) - Custom structured event\n{% enddocs %}\n\n{% docs se_label %}\nThe object of the action (eg. first_name, register, voter_reg_status) - Custom structured event\n{% enddocs %}\n\n{% docs session_id %}\nUnique identifier of the user's session\n{% enddocs %}\n\n{% docs session_counter %}\nHow many sessions a user has started\n{% enddocs %}\n\n{% docs browser_size %}\nWhich type of browser a user is using (eg. Mobile, Desktop)\n{% enddocs %}\n\n{% docs northstar_id %}\nThe Northstar ID of the user who generated the event\n{% enddocs %}\n\n{% docs device_id %}\nID of the device used\n{% enddocs %}\n\n{% docs referrer_host %}\nURL host of the referring site (eg. google.com)\n{% enddocs %}\n\n{% docs referrer_path %}\nURL path from referring site (eg. /10-stats-on-teen-drug-and-alcohol-use/)\n{% enddocs %}\n\n{% docs referrer_source %}\nReferrer source name (eg. Google, Facebook)\n{% enddocs %}\n\n{% docs utm_source %}\nTracks where the traffic is coming from. (eg. scholarship_listing, Facebook)\n{% enddocs %}\n\n{% docs utm_medium %}\nHow the traffic got to the platform (eg. referral, CPC)\n{% enddocs %}\n\n{% docs utm_campaign %}\nTracks which campaign the traffic was generated by. Shows up in Google Analytics as Campaign Name (eg. editorial_newsletter)\n{% enddocs %}\n\n{% docs url %}\nURL of campaign (eg. https://dosome.click/nyn5m7)\n{% enddocs %}\n\n{% docs modal_type %}\nNULL or SURVEY_MODAL\n{% enddocs %}\n\n{% docs landing_datetime %}\nWhen the session started in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs ending_datetime %}\nWhen the session ended in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs session_duration_seconds %}\nSession duration in seconds\n{% enddocs %}\n\n{% docs num_pages_views %}\nNumber of pages viewed in session\n{% enddocs %}\n\n{% docs landing_page %}\nFirst page the user viewed in the session (eg. /us/facts/11-facts-about-bp-oil-spill)\n{% enddocs %}\n\n{% docs exit_page %}\n\"Which page the user ended or exited their session from (eg. /us/campaigns/green-your-getaway)\"\n{% enddocs %}\n\n{% docs days_since_last_session %}\n\"Days since their last session.\"\n{% enddocs %}\n\n{% docs post_type %}\nType of post, (e.g. photo, voter-reg)\n{% enddocs %}\n\n{% docs noun %}\nNoun that corresponds to the item in the call to action that was delivered. (e.g. drawings, tweets)\n{% enddocs %}\n\n{% docs verb %}\nVerb corresponding to the action the user took. (e.g. shared, sent, taken)\n{% enddocs %}\n\n{% docs deleted_at %}\nDate time in UTC when a user deleted their post.\n{% enddocs %}\n\n{% docs _fivetran_deleted %}\nMarks rows that were deleted in the source table\n{% enddocs %}\n\n{% docs _fivetran_synced %}\n(UTC timestamp) keeps track of when each row was last successfully synced\n{% enddocs %}\n\n{% docs reportback %}\nWhether the post is a reportback \n{% enddocs %}\n\n{% docs active %}\nWhether the user is active \n{% enddocs %}\n\n{% docs anonymous %}\nWhether the user is anonymous when making the post \n{% enddocs %}\n\n{% docs callpower_campaign_id %}\nUnique ID corresponding to the Callpower campaign. Callpower allows users to record messages for their representatives.\n{% enddocs %}\n\n{% docs quiz %}\nWhether the post is a quiz \n{% enddocs %}\n\n{% docs action_type %}\nType of action the user took. (e.g. share-something, donate-something)\n{% enddocs %}\n\n{% docs online %}\nWhether the action is a online as opposed to IRL.\n{% enddocs %}\n\n{% docs time_commitment %}\nEstimated time required to do the action (e.g. 3.0+, <0.5)\n{% enddocs %}\n\n{% docs num_signups %}\nQuantity of campaign signups\n{% enddocs %}\n\n{% docs most_recent_signup %}\nTimestamp of the most recent signup in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs num_rbs %}\nQuantity of reportbacks for the user\n{% enddocs %}\n\n{% docs total_quantity %}\nTotal quantity of items in reportbacks\n{% enddocs %}\n\n{% docs most_recent_rb %}\nWhen the most recent reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs first_rb %}\nWhen the first reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs avg_time_betw_rbs %}\nCalculated average time between reportbacks.\n{% enddocs %}\n\n{% docs avg_days_next_action_after_rb %}\nCalculated average days until next action after reportback\n{% enddocs %}\n\n{% docs days_to_next_action_after_last_rb %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs most_recent_mam_action %}\nMost recent monthly active member qualifying action in UTC (eg. 2018-01-01 12:00:00).\n{% enddocs %}\n\n{% docs most_recent_email_open %}\nMost recent email open in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs most_recent_all_actions %}\nMost recent timestamp of any action in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs last_action_is_rb %}\nWhether the last action the user took was a reportback\n{% enddocs %}\n\n{% docs days_since_last_action %}\nDays since the user's last action\n{% enddocs %}\n\n{% docs time_to_first_rb %}\nHow much time after registering until the user's first reportback\n{% enddocs %}\n\n{% docs sms_unsubscribed_at %}\nTimestamp of when user unsubscribed from SMS messaging\n{% enddocs %}\n\n{% docs user_unsubscribed_at %}\nTimestamp of when user unsubscribed from email or sms\n{% enddocs %}\n\n{% docs voter_reg_acquisition %}\nWhether the user was an acquisition through voter registration efforts. \n{% enddocs %}\n\n{% docs last_logged_in %}\nDate time in UTC when user last logged in to Northstar\n{% enddocs %}\n\n{% docs last_accessed %}\nDate time in UTC when user last access the website\n{% enddocs %}\n\n{% docs last_messaged_at %}\nDate time in UTC when user was last sent a message via SMS or email\n{% enddocs %}\n\n{% docs facebook_id %}\nUser's facebook id\n{% enddocs %}\n\n{% docs mobile %}\nUsers's mobile phone number\n{% enddocs %}\n\n{% docs birthdate %}\nUser's birthdate\n{% enddocs %}\n\n{% docs first_name %}\nUser's first name\n{% enddocs %}\n\n{% docs last_name %}\nUser's last name\n{% enddocs %}\n\n{% docs voter_registration_status %}\nUser's registration status. (e.g. registration_complete, confirmed, uncertain) \n{% enddocs %}\n\n{% docs finish_with_state %}\nIf the registrant was eligible to use and passed through to complete their registration with their state\u2019s OVR system, it will be indicated in this field (direct quote from Rock-The-Vote documentation). Yes/No value in field.\n{% enddocs %}\n\n{% docs reportback_volume %}\nThis field returns 1 if non voter-reg action, since campaigns team only counts those a 1 reportback. If voter-reg action, we want to count quantity of post as number of registered voters.\n{% enddocs %}\n\n{% docs address_street_1 %}\nFirst line of user's street address\n{% enddocs %}\n\n{% docs address_street_2 %}\nSecond line of user's street address\n{% enddocs %}\n\n{% docs city %}\nUser's city\n{% enddocs %}\n\n{% docs state %}\nUser's state\n{% enddocs %}\n\n{% docs country %}\nUser's country\n{% enddocs %}\n\n{% docs language %}\nUser's language\n{% enddocs %}\n\n{% docs cio_status %}\nStatus of user from CIO. (e.g. customer_subscribed, customer_unsubscribed)\n{% enddocs %}\n\n{% docs cio_status_timestamp %}\nTimestamp when users's status was updated.\n{% enddocs %}\n\n{% docs sms_status %}\nCurrent SMS status. (e.g. undeliverable, unknown)\n{% enddocs %}\n\n{% docs source_detail %}\nDetails of the origin of the user. (e.g. tell_a_friend, other, opt_in_path/197981)\n{% enddocs %}\n\n{% docs badges %}\nWhether the user has any badges. \n{% enddocs %}\n\n{% docs refer_friends %}\nWhether the user is a part of the refer a friend campaign. \n{% enddocs %}\n\n{% docs subscribed_member %}\nWhether the user is subscribed. \n{% enddocs %}\n\n{% docs last_updated_at %}\nTimestamp when users's was updated.\n{% enddocs %}\n\n{% docs school_id %}\nUnique identifier for the user's school. This info comes from the school finder.\n{% enddocs %}\n\n{% docs newsletter_topic %}\nNewsletter topic. (e.g. community, lifestyle)\n{% enddocs %}\n\n{% docs user_agent %}\nFull user agent string for a user's browser (e.g. \"Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:24.0) Gecko/20100101 Firefox/24.0\")\n{% enddocs %}\n\n{% docs drupal_id %}\nOld Drupal user ID\n{% enddocs %}\n\n{% docs campaigns %}\nCampaigns a user is signed up for.\n{% enddocs %}\n\n{% docs audit %}\nA very useful field with data containing information about changes to a user, e.g. timestamps when the user subscribed and unsubscribed.\n{% enddocs %}\n\n{% docs voting_plan_status %}\nThe indication of the user's plan to vote, e.g. voting, not_voting, cant_vote\n{% enddocs %}\n\n{% docs voting_plan_time_of_day %}\nThe time of day when the user plans to vote, e.g morning, afternoon, evening\n{% enddocs %}\n\n{% docs voting_plan_method_of_transport %}\nHow the user plans to get to their polling place. e.g. walk, drive\n{% enddocs %}\n\n{% docs voting_plan_attending_with %}\nWith Whom the user plans to go voting, e.g. family, friends, alone\n{% enddocs %}\n\n{% docs feature_flags %}\nJSON containing info on features like badges and refer-a-friend.\n{% enddocs %}\n\n{% docs dbt_updated_at %}\nDBT snapshot table data. The updated_at timestamp of the source record when this snapshot row was inserted.\n{% enddocs %}\n\n{% docs dbt_scd_id %}\nDBT snapshot table data. A unique key generated for each snapshotted record.\n{% enddocs %}\n\n{% docs dbt_valid_from %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this snapshot row was first inserted\n{% enddocs %}\n\n{% docs dbt_valid_to %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this row row became invalidated.\n{% enddocs %}\n\n{% docs google_id %}\nUser's Google ID obtained from login.\n{% enddocs %}\n\n{% docs causes %}\nCauses in which a user is interested. e.g. animal welfare, education, mental_health\n{% enddocs %}\n\n{% docs email_subscription_status %}\nEmail subscription status of the user\n{% enddocs %}\n\n{% docs role %}\nUser's role, e.g. user, staff\n{% enddocs %}\n\n{% docs cio_backfilled %}\nWhether this user's data was backfilled from CIO\n{% enddocs %}\n\n{% docs addr_source %}\nWhere the user submitted their address, e.g. sms, GDPR\n{% enddocs %}\n\n{% docs email_subscription_topics %}\nEmail subscription topics correspond to categories in CIO in which the user is interested. e.g. lifestyle, community, scholarship\n{% enddocs %}\n\n{% docs sms_paused %}\nWhether we've paused sending sms messages to the user.\n{% enddocs %}\n\n\n\n\n", "name": "most_recent_signup", "unique_id": "ds_dbt.most_recent_signup", "block_contents": "Timestamp of the most recent signup in UTC (eg. 2018-01-01 12:00:00)"}, "ds_dbt.num_rbs": {"root_path": "/Users/mrich/projects/quasar/quasar/dbt", "resource_type": "docs", "path": "schema.md", "original_file_path": "models/schema.md", "package_name": "ds_dbt", "file_contents": "\n{% docs click_id %}\nThis is a unique identifier for each click\n{% enddocs %}\n\n{% docs click_time %}\nTimestamp when user clicked.\n{% enddocs %}\n\n{% docs shortened %}\nShortened URL\n{% enddocs %}\n\n{% docs target_url %}\nURL where the user will be directed\n{% enddocs %}\n\n{% docs broadcast_id %}\nID of the broadcast that generated the shortened URL\n{% enddocs %}\n\n{% docs source %}\nSource of the URL (e.g. SMS, web), origin of the post (e.g. phoenix-web, phoenix-ashes, sms), or source where user was acquired. (e.g. sms, phoenix-next)\n{% enddocs %}\n\n{% docs interaction_type %}\nHow the user interacted with the link (e.g. preview, click)\n{% enddocs %}\n\n{% docs id %}\nUnique identifier for the post\n{% enddocs %}\n\n{% docs type %}\nType of post (e.g. photo)\n{% enddocs %}\n\n{% docs action %}\nPost action (e.g. DefendDreamers_Nov9_CongressCalls, GunViolence2018_Feb15_ParklandResponse)\n{% enddocs %}\n\n{% docs status %}\nPost status (e.g. accepted, rejected)\n{% enddocs %}\n\n{% docs quantity %}\nNumerical quantity of items specified in the call to action (e.g. 10, 200)\n{% enddocs %}\n\n{% docs source_bucket %}\nGrouping bucket for origin of the post (e.g. web, sms) \n{% enddocs %}\n\n{% docs created_at %}\nWhen the item was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs updated_at %}\nWhen the item was updated in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs text %}\nText of the post (e.g. \"Zoo animals and a super hero trying to help too!\") \n{% enddocs %}\n\n{% docs signup_id %}\nUnique identifier for the signup \n{% enddocs %}\n\n{% docs post_class %}\nClass of the signup (e.g. \"photo - default\", \"phone-call - DefendDreamers_Jan16_BothBodies\")\n{% enddocs %}\n\n{% docs is_accepted %}\nWhether the post has been accepted to be displayed to the public on the website\n{% enddocs %}\n\n{% docs action_id %}\nInternal identifier of the action \n{% enddocs %}\n\n{% docs location %}\nLocation where the action takes place (e.g. US-NY)\n{% enddocs %}\n\n{% docs postal_code %}\nPostal code where the action takes place\n{% enddocs %}\n\n{% docs is_reportback %}\nWhether the post is a reportback. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs civic_action %}\nWhether the post is a Civic Action. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs scholarship_entry %}\nWhether the post is a Scholarship Entry. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs why_participated %}\nWhy the user participated in this action. Entered by the user.\n{% enddocs %}\n\n{% docs details %}\nDetails about the post. Contains contentfulId and other information (e.g. {\"campaignContentfulId\":\"6ATBgGEQEeJoIcxs1qbwaC\"})\n{% enddocs %}\n\n{% docs email %}\nEmail address of the user.\n{% enddocs %}\n\n{% docs source_details %}\nDetails about the source of the item. This is sometimes represented as a JSON object, and for other tables like Turbovote its represented as a string. (e.g. \"{\"contentful_id\":\"3CTLlXfbwtz1FOMpl31SKV\",\"utm_source\":\"scholarship_listing\",\"utm_medium\":\"referral\",\"utm_campaign\":\"fastweb_2019_08\"}\", newsletter_456)\n{% enddocs %}\n\n{% docs campaign_id %}\nThis is a unique identifier for the campaign\n{% enddocs %}\n\n{% docs campaign_run_id %}\nUnique identifier for the campaign run\n{% enddocs %}\n\n{% docs campaign_name %}\nName of the campaign\n{% enddocs %}\n\n{% docs campaign_cause %}\nCampaign cause (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_run_start_date %}\nStart date of the campaign run\n{% enddocs %}\n\n{% docs campaign_run_end_date %}\nEnd date of the campaign run\n{% enddocs %}\n\n{% docs campaign_created_date %}\nWhen the campaign was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs campaign_node_id %}\nInternal unique node id for the campaign\n{% enddocs %}\n\n{% docs campaign_node_id_title %}\nCampaign title\n{% enddocs %}\n\n{% docs campaign_run_id_title %}\nTitle of the campaign run\n{% enddocs %}\n\n{% docs campaign_action_type %}\nCampaign action type (eg. Make Something, Share Something)\n{% enddocs %}\n\n{% docs campaign_cause_type %}\nCampaign cause type (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_noun %}\nNoun applicable to the user's action\n{% enddocs %}\n\n{% docs campaign_verb %}\nVerb describing the action the user should take\n{% enddocs %}\n\n{% docs campaign_cta %}\nCampaign's call to action\n{% enddocs %}\n\n{% docs campaign_language %}\n\"Language in which the campaign is available\"\n{% enddocs %}\n\n{% docs agent_id %}\nIf set, the content type of the picture the member is sending us. Exp. image/png.\n{% enddocs %}\n\n{% docs attachment_content_type %}\nIf set, the handle of the Front agent this outbound support message is from.\n{% enddocs %}\n\n{% docs topic %}\nHolds a reference to the **last** campaign topic the member's conversation was in. This is useful to allow members to talk to Gambit and get quick responses (through Rivescript), without Gambit completely forgetting what state the member's interaction with a campaign topic was in.\n{% enddocs %}\n\n{% docs action_serial_id %}\nSerial id for the user's action. Depends on the source of the action. May be the bertly click id, sms message id, etc.\n{% enddocs %}\n\n{% docs channel %}\nChannel for the user's action. Depends on the source of the action. (e.g. web, sms)\n{% enddocs %}\n\n{% docs first_action_month %}\nMonth during which the user took their first action. \n{% enddocs %}\n\n{% docs event_id %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs event_source %}\nApplication source for event (eg. Phoenix, Northstar)\n{% enddocs %}\n\n{% docs event_datetime %}\nWhen the event occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs event_name %}\nName of the event (eg. northstar_submitted_register, https://docs.google.com/spreadsheets/d/1lm-fGrIm85nUTxSojqyCt_Ehmm1zEbViFhKpxcJiz1A/edit#gid=406441516)\n{% enddocs %}\n\n{% docs event_type %}\nType of event (pv = 'Page View', se = 'Structured Event')\n{% enddocs %}\n\n{% docs host %}\nURL host where event occurred (eg. www.dosomething.org or identity.dosomething.org)\n{% enddocs %}\n\n{% docs path %}\nURL path event occurred at (eg. /login or /us/campaigns/huddle-for-heroes)\n{% enddocs %}\n\n{% docs query_parameters %}\nOptional query parameters for the request (eg. query=huddle)\n{% enddocs %}\n\n{% docs se_category %}\nCategory of event (eg. focused_field, authentication) - Custom structured event\n{% enddocs %}\n\n{% docs se_action %}\nAction performed / event name (eg. form_submitted, action_failed) - Custom structured event\n{% enddocs %}\n\n{% docs se_label %}\nThe object of the action (eg. first_name, register, voter_reg_status) - Custom structured event\n{% enddocs %}\n\n{% docs session_id %}\nUnique identifier of the user's session\n{% enddocs %}\n\n{% docs session_counter %}\nHow many sessions a user has started\n{% enddocs %}\n\n{% docs browser_size %}\nWhich type of browser a user is using (eg. Mobile, Desktop)\n{% enddocs %}\n\n{% docs northstar_id %}\nThe Northstar ID of the user who generated the event\n{% enddocs %}\n\n{% docs device_id %}\nID of the device used\n{% enddocs %}\n\n{% docs referrer_host %}\nURL host of the referring site (eg. google.com)\n{% enddocs %}\n\n{% docs referrer_path %}\nURL path from referring site (eg. /10-stats-on-teen-drug-and-alcohol-use/)\n{% enddocs %}\n\n{% docs referrer_source %}\nReferrer source name (eg. Google, Facebook)\n{% enddocs %}\n\n{% docs utm_source %}\nTracks where the traffic is coming from. (eg. scholarship_listing, Facebook)\n{% enddocs %}\n\n{% docs utm_medium %}\nHow the traffic got to the platform (eg. referral, CPC)\n{% enddocs %}\n\n{% docs utm_campaign %}\nTracks which campaign the traffic was generated by. Shows up in Google Analytics as Campaign Name (eg. editorial_newsletter)\n{% enddocs %}\n\n{% docs url %}\nURL of campaign (eg. https://dosome.click/nyn5m7)\n{% enddocs %}\n\n{% docs modal_type %}\nNULL or SURVEY_MODAL\n{% enddocs %}\n\n{% docs landing_datetime %}\nWhen the session started in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs ending_datetime %}\nWhen the session ended in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs session_duration_seconds %}\nSession duration in seconds\n{% enddocs %}\n\n{% docs num_pages_views %}\nNumber of pages viewed in session\n{% enddocs %}\n\n{% docs landing_page %}\nFirst page the user viewed in the session (eg. /us/facts/11-facts-about-bp-oil-spill)\n{% enddocs %}\n\n{% docs exit_page %}\n\"Which page the user ended or exited their session from (eg. /us/campaigns/green-your-getaway)\"\n{% enddocs %}\n\n{% docs days_since_last_session %}\n\"Days since their last session.\"\n{% enddocs %}\n\n{% docs post_type %}\nType of post, (e.g. photo, voter-reg)\n{% enddocs %}\n\n{% docs noun %}\nNoun that corresponds to the item in the call to action that was delivered. (e.g. drawings, tweets)\n{% enddocs %}\n\n{% docs verb %}\nVerb corresponding to the action the user took. (e.g. shared, sent, taken)\n{% enddocs %}\n\n{% docs deleted_at %}\nDate time in UTC when a user deleted their post.\n{% enddocs %}\n\n{% docs _fivetran_deleted %}\nMarks rows that were deleted in the source table\n{% enddocs %}\n\n{% docs _fivetran_synced %}\n(UTC timestamp) keeps track of when each row was last successfully synced\n{% enddocs %}\n\n{% docs reportback %}\nWhether the post is a reportback \n{% enddocs %}\n\n{% docs active %}\nWhether the user is active \n{% enddocs %}\n\n{% docs anonymous %}\nWhether the user is anonymous when making the post \n{% enddocs %}\n\n{% docs callpower_campaign_id %}\nUnique ID corresponding to the Callpower campaign. Callpower allows users to record messages for their representatives.\n{% enddocs %}\n\n{% docs quiz %}\nWhether the post is a quiz \n{% enddocs %}\n\n{% docs action_type %}\nType of action the user took. (e.g. share-something, donate-something)\n{% enddocs %}\n\n{% docs online %}\nWhether the action is a online as opposed to IRL.\n{% enddocs %}\n\n{% docs time_commitment %}\nEstimated time required to do the action (e.g. 3.0+, <0.5)\n{% enddocs %}\n\n{% docs num_signups %}\nQuantity of campaign signups\n{% enddocs %}\n\n{% docs most_recent_signup %}\nTimestamp of the most recent signup in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs num_rbs %}\nQuantity of reportbacks for the user\n{% enddocs %}\n\n{% docs total_quantity %}\nTotal quantity of items in reportbacks\n{% enddocs %}\n\n{% docs most_recent_rb %}\nWhen the most recent reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs first_rb %}\nWhen the first reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs avg_time_betw_rbs %}\nCalculated average time between reportbacks.\n{% enddocs %}\n\n{% docs avg_days_next_action_after_rb %}\nCalculated average days until next action after reportback\n{% enddocs %}\n\n{% docs days_to_next_action_after_last_rb %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs most_recent_mam_action %}\nMost recent monthly active member qualifying action in UTC (eg. 2018-01-01 12:00:00).\n{% enddocs %}\n\n{% docs most_recent_email_open %}\nMost recent email open in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs most_recent_all_actions %}\nMost recent timestamp of any action in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs last_action_is_rb %}\nWhether the last action the user took was a reportback\n{% enddocs %}\n\n{% docs days_since_last_action %}\nDays since the user's last action\n{% enddocs %}\n\n{% docs time_to_first_rb %}\nHow much time after registering until the user's first reportback\n{% enddocs %}\n\n{% docs sms_unsubscribed_at %}\nTimestamp of when user unsubscribed from SMS messaging\n{% enddocs %}\n\n{% docs user_unsubscribed_at %}\nTimestamp of when user unsubscribed from email or sms\n{% enddocs %}\n\n{% docs voter_reg_acquisition %}\nWhether the user was an acquisition through voter registration efforts. \n{% enddocs %}\n\n{% docs last_logged_in %}\nDate time in UTC when user last logged in to Northstar\n{% enddocs %}\n\n{% docs last_accessed %}\nDate time in UTC when user last access the website\n{% enddocs %}\n\n{% docs last_messaged_at %}\nDate time in UTC when user was last sent a message via SMS or email\n{% enddocs %}\n\n{% docs facebook_id %}\nUser's facebook id\n{% enddocs %}\n\n{% docs mobile %}\nUsers's mobile phone number\n{% enddocs %}\n\n{% docs birthdate %}\nUser's birthdate\n{% enddocs %}\n\n{% docs first_name %}\nUser's first name\n{% enddocs %}\n\n{% docs last_name %}\nUser's last name\n{% enddocs %}\n\n{% docs voter_registration_status %}\nUser's registration status. (e.g. registration_complete, confirmed, uncertain) \n{% enddocs %}\n\n{% docs finish_with_state %}\nIf the registrant was eligible to use and passed through to complete their registration with their state\u2019s OVR system, it will be indicated in this field (direct quote from Rock-The-Vote documentation). Yes/No value in field.\n{% enddocs %}\n\n{% docs reportback_volume %}\nThis field returns 1 if non voter-reg action, since campaigns team only counts those a 1 reportback. If voter-reg action, we want to count quantity of post as number of registered voters.\n{% enddocs %}\n\n{% docs address_street_1 %}\nFirst line of user's street address\n{% enddocs %}\n\n{% docs address_street_2 %}\nSecond line of user's street address\n{% enddocs %}\n\n{% docs city %}\nUser's city\n{% enddocs %}\n\n{% docs state %}\nUser's state\n{% enddocs %}\n\n{% docs country %}\nUser's country\n{% enddocs %}\n\n{% docs language %}\nUser's language\n{% enddocs %}\n\n{% docs cio_status %}\nStatus of user from CIO. (e.g. customer_subscribed, customer_unsubscribed)\n{% enddocs %}\n\n{% docs cio_status_timestamp %}\nTimestamp when users's status was updated.\n{% enddocs %}\n\n{% docs sms_status %}\nCurrent SMS status. (e.g. undeliverable, unknown)\n{% enddocs %}\n\n{% docs source_detail %}\nDetails of the origin of the user. (e.g. tell_a_friend, other, opt_in_path/197981)\n{% enddocs %}\n\n{% docs badges %}\nWhether the user has any badges. \n{% enddocs %}\n\n{% docs refer_friends %}\nWhether the user is a part of the refer a friend campaign. \n{% enddocs %}\n\n{% docs subscribed_member %}\nWhether the user is subscribed. \n{% enddocs %}\n\n{% docs last_updated_at %}\nTimestamp when users's was updated.\n{% enddocs %}\n\n{% docs school_id %}\nUnique identifier for the user's school. This info comes from the school finder.\n{% enddocs %}\n\n{% docs newsletter_topic %}\nNewsletter topic. (e.g. community, lifestyle)\n{% enddocs %}\n\n{% docs user_agent %}\nFull user agent string for a user's browser (e.g. \"Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:24.0) Gecko/20100101 Firefox/24.0\")\n{% enddocs %}\n\n{% docs drupal_id %}\nOld Drupal user ID\n{% enddocs %}\n\n{% docs campaigns %}\nCampaigns a user is signed up for.\n{% enddocs %}\n\n{% docs audit %}\nA very useful field with data containing information about changes to a user, e.g. timestamps when the user subscribed and unsubscribed.\n{% enddocs %}\n\n{% docs voting_plan_status %}\nThe indication of the user's plan to vote, e.g. voting, not_voting, cant_vote\n{% enddocs %}\n\n{% docs voting_plan_time_of_day %}\nThe time of day when the user plans to vote, e.g morning, afternoon, evening\n{% enddocs %}\n\n{% docs voting_plan_method_of_transport %}\nHow the user plans to get to their polling place. e.g. walk, drive\n{% enddocs %}\n\n{% docs voting_plan_attending_with %}\nWith Whom the user plans to go voting, e.g. family, friends, alone\n{% enddocs %}\n\n{% docs feature_flags %}\nJSON containing info on features like badges and refer-a-friend.\n{% enddocs %}\n\n{% docs dbt_updated_at %}\nDBT snapshot table data. The updated_at timestamp of the source record when this snapshot row was inserted.\n{% enddocs %}\n\n{% docs dbt_scd_id %}\nDBT snapshot table data. A unique key generated for each snapshotted record.\n{% enddocs %}\n\n{% docs dbt_valid_from %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this snapshot row was first inserted\n{% enddocs %}\n\n{% docs dbt_valid_to %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this row row became invalidated.\n{% enddocs %}\n\n{% docs google_id %}\nUser's Google ID obtained from login.\n{% enddocs %}\n\n{% docs causes %}\nCauses in which a user is interested. e.g. animal welfare, education, mental_health\n{% enddocs %}\n\n{% docs email_subscription_status %}\nEmail subscription status of the user\n{% enddocs %}\n\n{% docs role %}\nUser's role, e.g. user, staff\n{% enddocs %}\n\n{% docs cio_backfilled %}\nWhether this user's data was backfilled from CIO\n{% enddocs %}\n\n{% docs addr_source %}\nWhere the user submitted their address, e.g. sms, GDPR\n{% enddocs %}\n\n{% docs email_subscription_topics %}\nEmail subscription topics correspond to categories in CIO in which the user is interested. e.g. lifestyle, community, scholarship\n{% enddocs %}\n\n{% docs sms_paused %}\nWhether we've paused sending sms messages to the user.\n{% enddocs %}\n\n\n\n\n", "name": "num_rbs", "unique_id": "ds_dbt.num_rbs", "block_contents": "Quantity of reportbacks for the user"}, "ds_dbt.total_quantity": {"root_path": "/Users/mrich/projects/quasar/quasar/dbt", "resource_type": "docs", "path": "schema.md", "original_file_path": "models/schema.md", "package_name": "ds_dbt", "file_contents": "\n{% docs click_id %}\nThis is a unique identifier for each click\n{% enddocs %}\n\n{% docs click_time %}\nTimestamp when user clicked.\n{% enddocs %}\n\n{% docs shortened %}\nShortened URL\n{% enddocs %}\n\n{% docs target_url %}\nURL where the user will be directed\n{% enddocs %}\n\n{% docs broadcast_id %}\nID of the broadcast that generated the shortened URL\n{% enddocs %}\n\n{% docs source %}\nSource of the URL (e.g. SMS, web), origin of the post (e.g. phoenix-web, phoenix-ashes, sms), or source where user was acquired. (e.g. sms, phoenix-next)\n{% enddocs %}\n\n{% docs interaction_type %}\nHow the user interacted with the link (e.g. preview, click)\n{% enddocs %}\n\n{% docs id %}\nUnique identifier for the post\n{% enddocs %}\n\n{% docs type %}\nType of post (e.g. photo)\n{% enddocs %}\n\n{% docs action %}\nPost action (e.g. DefendDreamers_Nov9_CongressCalls, GunViolence2018_Feb15_ParklandResponse)\n{% enddocs %}\n\n{% docs status %}\nPost status (e.g. accepted, rejected)\n{% enddocs %}\n\n{% docs quantity %}\nNumerical quantity of items specified in the call to action (e.g. 10, 200)\n{% enddocs %}\n\n{% docs source_bucket %}\nGrouping bucket for origin of the post (e.g. web, sms) \n{% enddocs %}\n\n{% docs created_at %}\nWhen the item was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs updated_at %}\nWhen the item was updated in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs text %}\nText of the post (e.g. \"Zoo animals and a super hero trying to help too!\") \n{% enddocs %}\n\n{% docs signup_id %}\nUnique identifier for the signup \n{% enddocs %}\n\n{% docs post_class %}\nClass of the signup (e.g. \"photo - default\", \"phone-call - DefendDreamers_Jan16_BothBodies\")\n{% enddocs %}\n\n{% docs is_accepted %}\nWhether the post has been accepted to be displayed to the public on the website\n{% enddocs %}\n\n{% docs action_id %}\nInternal identifier of the action \n{% enddocs %}\n\n{% docs location %}\nLocation where the action takes place (e.g. US-NY)\n{% enddocs %}\n\n{% docs postal_code %}\nPostal code where the action takes place\n{% enddocs %}\n\n{% docs is_reportback %}\nWhether the post is a reportback. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs civic_action %}\nWhether the post is a Civic Action. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs scholarship_entry %}\nWhether the post is a Scholarship Entry. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs why_participated %}\nWhy the user participated in this action. Entered by the user.\n{% enddocs %}\n\n{% docs details %}\nDetails about the post. Contains contentfulId and other information (e.g. {\"campaignContentfulId\":\"6ATBgGEQEeJoIcxs1qbwaC\"})\n{% enddocs %}\n\n{% docs email %}\nEmail address of the user.\n{% enddocs %}\n\n{% docs source_details %}\nDetails about the source of the item. This is sometimes represented as a JSON object, and for other tables like Turbovote its represented as a string. (e.g. \"{\"contentful_id\":\"3CTLlXfbwtz1FOMpl31SKV\",\"utm_source\":\"scholarship_listing\",\"utm_medium\":\"referral\",\"utm_campaign\":\"fastweb_2019_08\"}\", newsletter_456)\n{% enddocs %}\n\n{% docs campaign_id %}\nThis is a unique identifier for the campaign\n{% enddocs %}\n\n{% docs campaign_run_id %}\nUnique identifier for the campaign run\n{% enddocs %}\n\n{% docs campaign_name %}\nName of the campaign\n{% enddocs %}\n\n{% docs campaign_cause %}\nCampaign cause (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_run_start_date %}\nStart date of the campaign run\n{% enddocs %}\n\n{% docs campaign_run_end_date %}\nEnd date of the campaign run\n{% enddocs %}\n\n{% docs campaign_created_date %}\nWhen the campaign was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs campaign_node_id %}\nInternal unique node id for the campaign\n{% enddocs %}\n\n{% docs campaign_node_id_title %}\nCampaign title\n{% enddocs %}\n\n{% docs campaign_run_id_title %}\nTitle of the campaign run\n{% enddocs %}\n\n{% docs campaign_action_type %}\nCampaign action type (eg. Make Something, Share Something)\n{% enddocs %}\n\n{% docs campaign_cause_type %}\nCampaign cause type (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_noun %}\nNoun applicable to the user's action\n{% enddocs %}\n\n{% docs campaign_verb %}\nVerb describing the action the user should take\n{% enddocs %}\n\n{% docs campaign_cta %}\nCampaign's call to action\n{% enddocs %}\n\n{% docs campaign_language %}\n\"Language in which the campaign is available\"\n{% enddocs %}\n\n{% docs agent_id %}\nIf set, the content type of the picture the member is sending us. Exp. image/png.\n{% enddocs %}\n\n{% docs attachment_content_type %}\nIf set, the handle of the Front agent this outbound support message is from.\n{% enddocs %}\n\n{% docs topic %}\nHolds a reference to the **last** campaign topic the member's conversation was in. This is useful to allow members to talk to Gambit and get quick responses (through Rivescript), without Gambit completely forgetting what state the member's interaction with a campaign topic was in.\n{% enddocs %}\n\n{% docs action_serial_id %}\nSerial id for the user's action. Depends on the source of the action. May be the bertly click id, sms message id, etc.\n{% enddocs %}\n\n{% docs channel %}\nChannel for the user's action. Depends on the source of the action. (e.g. web, sms)\n{% enddocs %}\n\n{% docs first_action_month %}\nMonth during which the user took their first action. \n{% enddocs %}\n\n{% docs event_id %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs event_source %}\nApplication source for event (eg. Phoenix, Northstar)\n{% enddocs %}\n\n{% docs event_datetime %}\nWhen the event occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs event_name %}\nName of the event (eg. northstar_submitted_register, https://docs.google.com/spreadsheets/d/1lm-fGrIm85nUTxSojqyCt_Ehmm1zEbViFhKpxcJiz1A/edit#gid=406441516)\n{% enddocs %}\n\n{% docs event_type %}\nType of event (pv = 'Page View', se = 'Structured Event')\n{% enddocs %}\n\n{% docs host %}\nURL host where event occurred (eg. www.dosomething.org or identity.dosomething.org)\n{% enddocs %}\n\n{% docs path %}\nURL path event occurred at (eg. /login or /us/campaigns/huddle-for-heroes)\n{% enddocs %}\n\n{% docs query_parameters %}\nOptional query parameters for the request (eg. query=huddle)\n{% enddocs %}\n\n{% docs se_category %}\nCategory of event (eg. focused_field, authentication) - Custom structured event\n{% enddocs %}\n\n{% docs se_action %}\nAction performed / event name (eg. form_submitted, action_failed) - Custom structured event\n{% enddocs %}\n\n{% docs se_label %}\nThe object of the action (eg. first_name, register, voter_reg_status) - Custom structured event\n{% enddocs %}\n\n{% docs session_id %}\nUnique identifier of the user's session\n{% enddocs %}\n\n{% docs session_counter %}\nHow many sessions a user has started\n{% enddocs %}\n\n{% docs browser_size %}\nWhich type of browser a user is using (eg. Mobile, Desktop)\n{% enddocs %}\n\n{% docs northstar_id %}\nThe Northstar ID of the user who generated the event\n{% enddocs %}\n\n{% docs device_id %}\nID of the device used\n{% enddocs %}\n\n{% docs referrer_host %}\nURL host of the referring site (eg. google.com)\n{% enddocs %}\n\n{% docs referrer_path %}\nURL path from referring site (eg. /10-stats-on-teen-drug-and-alcohol-use/)\n{% enddocs %}\n\n{% docs referrer_source %}\nReferrer source name (eg. Google, Facebook)\n{% enddocs %}\n\n{% docs utm_source %}\nTracks where the traffic is coming from. (eg. scholarship_listing, Facebook)\n{% enddocs %}\n\n{% docs utm_medium %}\nHow the traffic got to the platform (eg. referral, CPC)\n{% enddocs %}\n\n{% docs utm_campaign %}\nTracks which campaign the traffic was generated by. Shows up in Google Analytics as Campaign Name (eg. editorial_newsletter)\n{% enddocs %}\n\n{% docs url %}\nURL of campaign (eg. https://dosome.click/nyn5m7)\n{% enddocs %}\n\n{% docs modal_type %}\nNULL or SURVEY_MODAL\n{% enddocs %}\n\n{% docs landing_datetime %}\nWhen the session started in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs ending_datetime %}\nWhen the session ended in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs session_duration_seconds %}\nSession duration in seconds\n{% enddocs %}\n\n{% docs num_pages_views %}\nNumber of pages viewed in session\n{% enddocs %}\n\n{% docs landing_page %}\nFirst page the user viewed in the session (eg. /us/facts/11-facts-about-bp-oil-spill)\n{% enddocs %}\n\n{% docs exit_page %}\n\"Which page the user ended or exited their session from (eg. /us/campaigns/green-your-getaway)\"\n{% enddocs %}\n\n{% docs days_since_last_session %}\n\"Days since their last session.\"\n{% enddocs %}\n\n{% docs post_type %}\nType of post, (e.g. photo, voter-reg)\n{% enddocs %}\n\n{% docs noun %}\nNoun that corresponds to the item in the call to action that was delivered. (e.g. drawings, tweets)\n{% enddocs %}\n\n{% docs verb %}\nVerb corresponding to the action the user took. (e.g. shared, sent, taken)\n{% enddocs %}\n\n{% docs deleted_at %}\nDate time in UTC when a user deleted their post.\n{% enddocs %}\n\n{% docs _fivetran_deleted %}\nMarks rows that were deleted in the source table\n{% enddocs %}\n\n{% docs _fivetran_synced %}\n(UTC timestamp) keeps track of when each row was last successfully synced\n{% enddocs %}\n\n{% docs reportback %}\nWhether the post is a reportback \n{% enddocs %}\n\n{% docs active %}\nWhether the user is active \n{% enddocs %}\n\n{% docs anonymous %}\nWhether the user is anonymous when making the post \n{% enddocs %}\n\n{% docs callpower_campaign_id %}\nUnique ID corresponding to the Callpower campaign. Callpower allows users to record messages for their representatives.\n{% enddocs %}\n\n{% docs quiz %}\nWhether the post is a quiz \n{% enddocs %}\n\n{% docs action_type %}\nType of action the user took. (e.g. share-something, donate-something)\n{% enddocs %}\n\n{% docs online %}\nWhether the action is a online as opposed to IRL.\n{% enddocs %}\n\n{% docs time_commitment %}\nEstimated time required to do the action (e.g. 3.0+, <0.5)\n{% enddocs %}\n\n{% docs num_signups %}\nQuantity of campaign signups\n{% enddocs %}\n\n{% docs most_recent_signup %}\nTimestamp of the most recent signup in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs num_rbs %}\nQuantity of reportbacks for the user\n{% enddocs %}\n\n{% docs total_quantity %}\nTotal quantity of items in reportbacks\n{% enddocs %}\n\n{% docs most_recent_rb %}\nWhen the most recent reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs first_rb %}\nWhen the first reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs avg_time_betw_rbs %}\nCalculated average time between reportbacks.\n{% enddocs %}\n\n{% docs avg_days_next_action_after_rb %}\nCalculated average days until next action after reportback\n{% enddocs %}\n\n{% docs days_to_next_action_after_last_rb %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs most_recent_mam_action %}\nMost recent monthly active member qualifying action in UTC (eg. 2018-01-01 12:00:00).\n{% enddocs %}\n\n{% docs most_recent_email_open %}\nMost recent email open in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs most_recent_all_actions %}\nMost recent timestamp of any action in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs last_action_is_rb %}\nWhether the last action the user took was a reportback\n{% enddocs %}\n\n{% docs days_since_last_action %}\nDays since the user's last action\n{% enddocs %}\n\n{% docs time_to_first_rb %}\nHow much time after registering until the user's first reportback\n{% enddocs %}\n\n{% docs sms_unsubscribed_at %}\nTimestamp of when user unsubscribed from SMS messaging\n{% enddocs %}\n\n{% docs user_unsubscribed_at %}\nTimestamp of when user unsubscribed from email or sms\n{% enddocs %}\n\n{% docs voter_reg_acquisition %}\nWhether the user was an acquisition through voter registration efforts. \n{% enddocs %}\n\n{% docs last_logged_in %}\nDate time in UTC when user last logged in to Northstar\n{% enddocs %}\n\n{% docs last_accessed %}\nDate time in UTC when user last access the website\n{% enddocs %}\n\n{% docs last_messaged_at %}\nDate time in UTC when user was last sent a message via SMS or email\n{% enddocs %}\n\n{% docs facebook_id %}\nUser's facebook id\n{% enddocs %}\n\n{% docs mobile %}\nUsers's mobile phone number\n{% enddocs %}\n\n{% docs birthdate %}\nUser's birthdate\n{% enddocs %}\n\n{% docs first_name %}\nUser's first name\n{% enddocs %}\n\n{% docs last_name %}\nUser's last name\n{% enddocs %}\n\n{% docs voter_registration_status %}\nUser's registration status. (e.g. registration_complete, confirmed, uncertain) \n{% enddocs %}\n\n{% docs finish_with_state %}\nIf the registrant was eligible to use and passed through to complete their registration with their state\u2019s OVR system, it will be indicated in this field (direct quote from Rock-The-Vote documentation). Yes/No value in field.\n{% enddocs %}\n\n{% docs reportback_volume %}\nThis field returns 1 if non voter-reg action, since campaigns team only counts those a 1 reportback. If voter-reg action, we want to count quantity of post as number of registered voters.\n{% enddocs %}\n\n{% docs address_street_1 %}\nFirst line of user's street address\n{% enddocs %}\n\n{% docs address_street_2 %}\nSecond line of user's street address\n{% enddocs %}\n\n{% docs city %}\nUser's city\n{% enddocs %}\n\n{% docs state %}\nUser's state\n{% enddocs %}\n\n{% docs country %}\nUser's country\n{% enddocs %}\n\n{% docs language %}\nUser's language\n{% enddocs %}\n\n{% docs cio_status %}\nStatus of user from CIO. (e.g. customer_subscribed, customer_unsubscribed)\n{% enddocs %}\n\n{% docs cio_status_timestamp %}\nTimestamp when users's status was updated.\n{% enddocs %}\n\n{% docs sms_status %}\nCurrent SMS status. (e.g. undeliverable, unknown)\n{% enddocs %}\n\n{% docs source_detail %}\nDetails of the origin of the user. (e.g. tell_a_friend, other, opt_in_path/197981)\n{% enddocs %}\n\n{% docs badges %}\nWhether the user has any badges. \n{% enddocs %}\n\n{% docs refer_friends %}\nWhether the user is a part of the refer a friend campaign. \n{% enddocs %}\n\n{% docs subscribed_member %}\nWhether the user is subscribed. \n{% enddocs %}\n\n{% docs last_updated_at %}\nTimestamp when users's was updated.\n{% enddocs %}\n\n{% docs school_id %}\nUnique identifier for the user's school. This info comes from the school finder.\n{% enddocs %}\n\n{% docs newsletter_topic %}\nNewsletter topic. (e.g. community, lifestyle)\n{% enddocs %}\n\n{% docs user_agent %}\nFull user agent string for a user's browser (e.g. \"Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:24.0) Gecko/20100101 Firefox/24.0\")\n{% enddocs %}\n\n{% docs drupal_id %}\nOld Drupal user ID\n{% enddocs %}\n\n{% docs campaigns %}\nCampaigns a user is signed up for.\n{% enddocs %}\n\n{% docs audit %}\nA very useful field with data containing information about changes to a user, e.g. timestamps when the user subscribed and unsubscribed.\n{% enddocs %}\n\n{% docs voting_plan_status %}\nThe indication of the user's plan to vote, e.g. voting, not_voting, cant_vote\n{% enddocs %}\n\n{% docs voting_plan_time_of_day %}\nThe time of day when the user plans to vote, e.g morning, afternoon, evening\n{% enddocs %}\n\n{% docs voting_plan_method_of_transport %}\nHow the user plans to get to their polling place. e.g. walk, drive\n{% enddocs %}\n\n{% docs voting_plan_attending_with %}\nWith Whom the user plans to go voting, e.g. family, friends, alone\n{% enddocs %}\n\n{% docs feature_flags %}\nJSON containing info on features like badges and refer-a-friend.\n{% enddocs %}\n\n{% docs dbt_updated_at %}\nDBT snapshot table data. The updated_at timestamp of the source record when this snapshot row was inserted.\n{% enddocs %}\n\n{% docs dbt_scd_id %}\nDBT snapshot table data. A unique key generated for each snapshotted record.\n{% enddocs %}\n\n{% docs dbt_valid_from %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this snapshot row was first inserted\n{% enddocs %}\n\n{% docs dbt_valid_to %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this row row became invalidated.\n{% enddocs %}\n\n{% docs google_id %}\nUser's Google ID obtained from login.\n{% enddocs %}\n\n{% docs causes %}\nCauses in which a user is interested. e.g. animal welfare, education, mental_health\n{% enddocs %}\n\n{% docs email_subscription_status %}\nEmail subscription status of the user\n{% enddocs %}\n\n{% docs role %}\nUser's role, e.g. user, staff\n{% enddocs %}\n\n{% docs cio_backfilled %}\nWhether this user's data was backfilled from CIO\n{% enddocs %}\n\n{% docs addr_source %}\nWhere the user submitted their address, e.g. sms, GDPR\n{% enddocs %}\n\n{% docs email_subscription_topics %}\nEmail subscription topics correspond to categories in CIO in which the user is interested. e.g. lifestyle, community, scholarship\n{% enddocs %}\n\n{% docs sms_paused %}\nWhether we've paused sending sms messages to the user.\n{% enddocs %}\n\n\n\n\n", "name": "total_quantity", "unique_id": "ds_dbt.total_quantity", "block_contents": "Total quantity of items in reportbacks"}, "ds_dbt.most_recent_rb": {"root_path": "/Users/mrich/projects/quasar/quasar/dbt", "resource_type": "docs", "path": "schema.md", "original_file_path": "models/schema.md", "package_name": "ds_dbt", "file_contents": "\n{% docs click_id %}\nThis is a unique identifier for each click\n{% enddocs %}\n\n{% docs click_time %}\nTimestamp when user clicked.\n{% enddocs %}\n\n{% docs shortened %}\nShortened URL\n{% enddocs %}\n\n{% docs target_url %}\nURL where the user will be directed\n{% enddocs %}\n\n{% docs broadcast_id %}\nID of the broadcast that generated the shortened URL\n{% enddocs %}\n\n{% docs source %}\nSource of the URL (e.g. SMS, web), origin of the post (e.g. phoenix-web, phoenix-ashes, sms), or source where user was acquired. (e.g. sms, phoenix-next)\n{% enddocs %}\n\n{% docs interaction_type %}\nHow the user interacted with the link (e.g. preview, click)\n{% enddocs %}\n\n{% docs id %}\nUnique identifier for the post\n{% enddocs %}\n\n{% docs type %}\nType of post (e.g. photo)\n{% enddocs %}\n\n{% docs action %}\nPost action (e.g. DefendDreamers_Nov9_CongressCalls, GunViolence2018_Feb15_ParklandResponse)\n{% enddocs %}\n\n{% docs status %}\nPost status (e.g. accepted, rejected)\n{% enddocs %}\n\n{% docs quantity %}\nNumerical quantity of items specified in the call to action (e.g. 10, 200)\n{% enddocs %}\n\n{% docs source_bucket %}\nGrouping bucket for origin of the post (e.g. web, sms) \n{% enddocs %}\n\n{% docs created_at %}\nWhen the item was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs updated_at %}\nWhen the item was updated in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs text %}\nText of the post (e.g. \"Zoo animals and a super hero trying to help too!\") \n{% enddocs %}\n\n{% docs signup_id %}\nUnique identifier for the signup \n{% enddocs %}\n\n{% docs post_class %}\nClass of the signup (e.g. \"photo - default\", \"phone-call - DefendDreamers_Jan16_BothBodies\")\n{% enddocs %}\n\n{% docs is_accepted %}\nWhether the post has been accepted to be displayed to the public on the website\n{% enddocs %}\n\n{% docs action_id %}\nInternal identifier of the action \n{% enddocs %}\n\n{% docs location %}\nLocation where the action takes place (e.g. US-NY)\n{% enddocs %}\n\n{% docs postal_code %}\nPostal code where the action takes place\n{% enddocs %}\n\n{% docs is_reportback %}\nWhether the post is a reportback. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs civic_action %}\nWhether the post is a Civic Action. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs scholarship_entry %}\nWhether the post is a Scholarship Entry. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs why_participated %}\nWhy the user participated in this action. Entered by the user.\n{% enddocs %}\n\n{% docs details %}\nDetails about the post. Contains contentfulId and other information (e.g. {\"campaignContentfulId\":\"6ATBgGEQEeJoIcxs1qbwaC\"})\n{% enddocs %}\n\n{% docs email %}\nEmail address of the user.\n{% enddocs %}\n\n{% docs source_details %}\nDetails about the source of the item. This is sometimes represented as a JSON object, and for other tables like Turbovote its represented as a string. (e.g. \"{\"contentful_id\":\"3CTLlXfbwtz1FOMpl31SKV\",\"utm_source\":\"scholarship_listing\",\"utm_medium\":\"referral\",\"utm_campaign\":\"fastweb_2019_08\"}\", newsletter_456)\n{% enddocs %}\n\n{% docs campaign_id %}\nThis is a unique identifier for the campaign\n{% enddocs %}\n\n{% docs campaign_run_id %}\nUnique identifier for the campaign run\n{% enddocs %}\n\n{% docs campaign_name %}\nName of the campaign\n{% enddocs %}\n\n{% docs campaign_cause %}\nCampaign cause (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_run_start_date %}\nStart date of the campaign run\n{% enddocs %}\n\n{% docs campaign_run_end_date %}\nEnd date of the campaign run\n{% enddocs %}\n\n{% docs campaign_created_date %}\nWhen the campaign was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs campaign_node_id %}\nInternal unique node id for the campaign\n{% enddocs %}\n\n{% docs campaign_node_id_title %}\nCampaign title\n{% enddocs %}\n\n{% docs campaign_run_id_title %}\nTitle of the campaign run\n{% enddocs %}\n\n{% docs campaign_action_type %}\nCampaign action type (eg. Make Something, Share Something)\n{% enddocs %}\n\n{% docs campaign_cause_type %}\nCampaign cause type (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_noun %}\nNoun applicable to the user's action\n{% enddocs %}\n\n{% docs campaign_verb %}\nVerb describing the action the user should take\n{% enddocs %}\n\n{% docs campaign_cta %}\nCampaign's call to action\n{% enddocs %}\n\n{% docs campaign_language %}\n\"Language in which the campaign is available\"\n{% enddocs %}\n\n{% docs agent_id %}\nIf set, the content type of the picture the member is sending us. Exp. image/png.\n{% enddocs %}\n\n{% docs attachment_content_type %}\nIf set, the handle of the Front agent this outbound support message is from.\n{% enddocs %}\n\n{% docs topic %}\nHolds a reference to the **last** campaign topic the member's conversation was in. This is useful to allow members to talk to Gambit and get quick responses (through Rivescript), without Gambit completely forgetting what state the member's interaction with a campaign topic was in.\n{% enddocs %}\n\n{% docs action_serial_id %}\nSerial id for the user's action. Depends on the source of the action. May be the bertly click id, sms message id, etc.\n{% enddocs %}\n\n{% docs channel %}\nChannel for the user's action. Depends on the source of the action. (e.g. web, sms)\n{% enddocs %}\n\n{% docs first_action_month %}\nMonth during which the user took their first action. \n{% enddocs %}\n\n{% docs event_id %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs event_source %}\nApplication source for event (eg. Phoenix, Northstar)\n{% enddocs %}\n\n{% docs event_datetime %}\nWhen the event occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs event_name %}\nName of the event (eg. northstar_submitted_register, https://docs.google.com/spreadsheets/d/1lm-fGrIm85nUTxSojqyCt_Ehmm1zEbViFhKpxcJiz1A/edit#gid=406441516)\n{% enddocs %}\n\n{% docs event_type %}\nType of event (pv = 'Page View', se = 'Structured Event')\n{% enddocs %}\n\n{% docs host %}\nURL host where event occurred (eg. www.dosomething.org or identity.dosomething.org)\n{% enddocs %}\n\n{% docs path %}\nURL path event occurred at (eg. /login or /us/campaigns/huddle-for-heroes)\n{% enddocs %}\n\n{% docs query_parameters %}\nOptional query parameters for the request (eg. query=huddle)\n{% enddocs %}\n\n{% docs se_category %}\nCategory of event (eg. focused_field, authentication) - Custom structured event\n{% enddocs %}\n\n{% docs se_action %}\nAction performed / event name (eg. form_submitted, action_failed) - Custom structured event\n{% enddocs %}\n\n{% docs se_label %}\nThe object of the action (eg. first_name, register, voter_reg_status) - Custom structured event\n{% enddocs %}\n\n{% docs session_id %}\nUnique identifier of the user's session\n{% enddocs %}\n\n{% docs session_counter %}\nHow many sessions a user has started\n{% enddocs %}\n\n{% docs browser_size %}\nWhich type of browser a user is using (eg. Mobile, Desktop)\n{% enddocs %}\n\n{% docs northstar_id %}\nThe Northstar ID of the user who generated the event\n{% enddocs %}\n\n{% docs device_id %}\nID of the device used\n{% enddocs %}\n\n{% docs referrer_host %}\nURL host of the referring site (eg. google.com)\n{% enddocs %}\n\n{% docs referrer_path %}\nURL path from referring site (eg. /10-stats-on-teen-drug-and-alcohol-use/)\n{% enddocs %}\n\n{% docs referrer_source %}\nReferrer source name (eg. Google, Facebook)\n{% enddocs %}\n\n{% docs utm_source %}\nTracks where the traffic is coming from. (eg. scholarship_listing, Facebook)\n{% enddocs %}\n\n{% docs utm_medium %}\nHow the traffic got to the platform (eg. referral, CPC)\n{% enddocs %}\n\n{% docs utm_campaign %}\nTracks which campaign the traffic was generated by. Shows up in Google Analytics as Campaign Name (eg. editorial_newsletter)\n{% enddocs %}\n\n{% docs url %}\nURL of campaign (eg. https://dosome.click/nyn5m7)\n{% enddocs %}\n\n{% docs modal_type %}\nNULL or SURVEY_MODAL\n{% enddocs %}\n\n{% docs landing_datetime %}\nWhen the session started in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs ending_datetime %}\nWhen the session ended in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs session_duration_seconds %}\nSession duration in seconds\n{% enddocs %}\n\n{% docs num_pages_views %}\nNumber of pages viewed in session\n{% enddocs %}\n\n{% docs landing_page %}\nFirst page the user viewed in the session (eg. /us/facts/11-facts-about-bp-oil-spill)\n{% enddocs %}\n\n{% docs exit_page %}\n\"Which page the user ended or exited their session from (eg. /us/campaigns/green-your-getaway)\"\n{% enddocs %}\n\n{% docs days_since_last_session %}\n\"Days since their last session.\"\n{% enddocs %}\n\n{% docs post_type %}\nType of post, (e.g. photo, voter-reg)\n{% enddocs %}\n\n{% docs noun %}\nNoun that corresponds to the item in the call to action that was delivered. (e.g. drawings, tweets)\n{% enddocs %}\n\n{% docs verb %}\nVerb corresponding to the action the user took. (e.g. shared, sent, taken)\n{% enddocs %}\n\n{% docs deleted_at %}\nDate time in UTC when a user deleted their post.\n{% enddocs %}\n\n{% docs _fivetran_deleted %}\nMarks rows that were deleted in the source table\n{% enddocs %}\n\n{% docs _fivetran_synced %}\n(UTC timestamp) keeps track of when each row was last successfully synced\n{% enddocs %}\n\n{% docs reportback %}\nWhether the post is a reportback \n{% enddocs %}\n\n{% docs active %}\nWhether the user is active \n{% enddocs %}\n\n{% docs anonymous %}\nWhether the user is anonymous when making the post \n{% enddocs %}\n\n{% docs callpower_campaign_id %}\nUnique ID corresponding to the Callpower campaign. Callpower allows users to record messages for their representatives.\n{% enddocs %}\n\n{% docs quiz %}\nWhether the post is a quiz \n{% enddocs %}\n\n{% docs action_type %}\nType of action the user took. (e.g. share-something, donate-something)\n{% enddocs %}\n\n{% docs online %}\nWhether the action is a online as opposed to IRL.\n{% enddocs %}\n\n{% docs time_commitment %}\nEstimated time required to do the action (e.g. 3.0+, <0.5)\n{% enddocs %}\n\n{% docs num_signups %}\nQuantity of campaign signups\n{% enddocs %}\n\n{% docs most_recent_signup %}\nTimestamp of the most recent signup in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs num_rbs %}\nQuantity of reportbacks for the user\n{% enddocs %}\n\n{% docs total_quantity %}\nTotal quantity of items in reportbacks\n{% enddocs %}\n\n{% docs most_recent_rb %}\nWhen the most recent reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs first_rb %}\nWhen the first reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs avg_time_betw_rbs %}\nCalculated average time between reportbacks.\n{% enddocs %}\n\n{% docs avg_days_next_action_after_rb %}\nCalculated average days until next action after reportback\n{% enddocs %}\n\n{% docs days_to_next_action_after_last_rb %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs most_recent_mam_action %}\nMost recent monthly active member qualifying action in UTC (eg. 2018-01-01 12:00:00).\n{% enddocs %}\n\n{% docs most_recent_email_open %}\nMost recent email open in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs most_recent_all_actions %}\nMost recent timestamp of any action in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs last_action_is_rb %}\nWhether the last action the user took was a reportback\n{% enddocs %}\n\n{% docs days_since_last_action %}\nDays since the user's last action\n{% enddocs %}\n\n{% docs time_to_first_rb %}\nHow much time after registering until the user's first reportback\n{% enddocs %}\n\n{% docs sms_unsubscribed_at %}\nTimestamp of when user unsubscribed from SMS messaging\n{% enddocs %}\n\n{% docs user_unsubscribed_at %}\nTimestamp of when user unsubscribed from email or sms\n{% enddocs %}\n\n{% docs voter_reg_acquisition %}\nWhether the user was an acquisition through voter registration efforts. \n{% enddocs %}\n\n{% docs last_logged_in %}\nDate time in UTC when user last logged in to Northstar\n{% enddocs %}\n\n{% docs last_accessed %}\nDate time in UTC when user last access the website\n{% enddocs %}\n\n{% docs last_messaged_at %}\nDate time in UTC when user was last sent a message via SMS or email\n{% enddocs %}\n\n{% docs facebook_id %}\nUser's facebook id\n{% enddocs %}\n\n{% docs mobile %}\nUsers's mobile phone number\n{% enddocs %}\n\n{% docs birthdate %}\nUser's birthdate\n{% enddocs %}\n\n{% docs first_name %}\nUser's first name\n{% enddocs %}\n\n{% docs last_name %}\nUser's last name\n{% enddocs %}\n\n{% docs voter_registration_status %}\nUser's registration status. (e.g. registration_complete, confirmed, uncertain) \n{% enddocs %}\n\n{% docs finish_with_state %}\nIf the registrant was eligible to use and passed through to complete their registration with their state\u2019s OVR system, it will be indicated in this field (direct quote from Rock-The-Vote documentation). Yes/No value in field.\n{% enddocs %}\n\n{% docs reportback_volume %}\nThis field returns 1 if non voter-reg action, since campaigns team only counts those a 1 reportback. If voter-reg action, we want to count quantity of post as number of registered voters.\n{% enddocs %}\n\n{% docs address_street_1 %}\nFirst line of user's street address\n{% enddocs %}\n\n{% docs address_street_2 %}\nSecond line of user's street address\n{% enddocs %}\n\n{% docs city %}\nUser's city\n{% enddocs %}\n\n{% docs state %}\nUser's state\n{% enddocs %}\n\n{% docs country %}\nUser's country\n{% enddocs %}\n\n{% docs language %}\nUser's language\n{% enddocs %}\n\n{% docs cio_status %}\nStatus of user from CIO. (e.g. customer_subscribed, customer_unsubscribed)\n{% enddocs %}\n\n{% docs cio_status_timestamp %}\nTimestamp when users's status was updated.\n{% enddocs %}\n\n{% docs sms_status %}\nCurrent SMS status. (e.g. undeliverable, unknown)\n{% enddocs %}\n\n{% docs source_detail %}\nDetails of the origin of the user. (e.g. tell_a_friend, other, opt_in_path/197981)\n{% enddocs %}\n\n{% docs badges %}\nWhether the user has any badges. \n{% enddocs %}\n\n{% docs refer_friends %}\nWhether the user is a part of the refer a friend campaign. \n{% enddocs %}\n\n{% docs subscribed_member %}\nWhether the user is subscribed. \n{% enddocs %}\n\n{% docs last_updated_at %}\nTimestamp when users's was updated.\n{% enddocs %}\n\n{% docs school_id %}\nUnique identifier for the user's school. This info comes from the school finder.\n{% enddocs %}\n\n{% docs newsletter_topic %}\nNewsletter topic. (e.g. community, lifestyle)\n{% enddocs %}\n\n{% docs user_agent %}\nFull user agent string for a user's browser (e.g. \"Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:24.0) Gecko/20100101 Firefox/24.0\")\n{% enddocs %}\n\n{% docs drupal_id %}\nOld Drupal user ID\n{% enddocs %}\n\n{% docs campaigns %}\nCampaigns a user is signed up for.\n{% enddocs %}\n\n{% docs audit %}\nA very useful field with data containing information about changes to a user, e.g. timestamps when the user subscribed and unsubscribed.\n{% enddocs %}\n\n{% docs voting_plan_status %}\nThe indication of the user's plan to vote, e.g. voting, not_voting, cant_vote\n{% enddocs %}\n\n{% docs voting_plan_time_of_day %}\nThe time of day when the user plans to vote, e.g morning, afternoon, evening\n{% enddocs %}\n\n{% docs voting_plan_method_of_transport %}\nHow the user plans to get to their polling place. e.g. walk, drive\n{% enddocs %}\n\n{% docs voting_plan_attending_with %}\nWith Whom the user plans to go voting, e.g. family, friends, alone\n{% enddocs %}\n\n{% docs feature_flags %}\nJSON containing info on features like badges and refer-a-friend.\n{% enddocs %}\n\n{% docs dbt_updated_at %}\nDBT snapshot table data. The updated_at timestamp of the source record when this snapshot row was inserted.\n{% enddocs %}\n\n{% docs dbt_scd_id %}\nDBT snapshot table data. A unique key generated for each snapshotted record.\n{% enddocs %}\n\n{% docs dbt_valid_from %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this snapshot row was first inserted\n{% enddocs %}\n\n{% docs dbt_valid_to %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this row row became invalidated.\n{% enddocs %}\n\n{% docs google_id %}\nUser's Google ID obtained from login.\n{% enddocs %}\n\n{% docs causes %}\nCauses in which a user is interested. e.g. animal welfare, education, mental_health\n{% enddocs %}\n\n{% docs email_subscription_status %}\nEmail subscription status of the user\n{% enddocs %}\n\n{% docs role %}\nUser's role, e.g. user, staff\n{% enddocs %}\n\n{% docs cio_backfilled %}\nWhether this user's data was backfilled from CIO\n{% enddocs %}\n\n{% docs addr_source %}\nWhere the user submitted their address, e.g. sms, GDPR\n{% enddocs %}\n\n{% docs email_subscription_topics %}\nEmail subscription topics correspond to categories in CIO in which the user is interested. e.g. lifestyle, community, scholarship\n{% enddocs %}\n\n{% docs sms_paused %}\nWhether we've paused sending sms messages to the user.\n{% enddocs %}\n\n\n\n\n", "name": "most_recent_rb", "unique_id": "ds_dbt.most_recent_rb", "block_contents": "When the most recent reportback occurred in UTC (eg. 2018-01-01 12:00:00)"}, "ds_dbt.first_rb": {"root_path": "/Users/mrich/projects/quasar/quasar/dbt", "resource_type": "docs", "path": "schema.md", "original_file_path": "models/schema.md", "package_name": "ds_dbt", "file_contents": "\n{% docs click_id %}\nThis is a unique identifier for each click\n{% enddocs %}\n\n{% docs click_time %}\nTimestamp when user clicked.\n{% enddocs %}\n\n{% docs shortened %}\nShortened URL\n{% enddocs %}\n\n{% docs target_url %}\nURL where the user will be directed\n{% enddocs %}\n\n{% docs broadcast_id %}\nID of the broadcast that generated the shortened URL\n{% enddocs %}\n\n{% docs source %}\nSource of the URL (e.g. SMS, web), origin of the post (e.g. phoenix-web, phoenix-ashes, sms), or source where user was acquired. (e.g. sms, phoenix-next)\n{% enddocs %}\n\n{% docs interaction_type %}\nHow the user interacted with the link (e.g. preview, click)\n{% enddocs %}\n\n{% docs id %}\nUnique identifier for the post\n{% enddocs %}\n\n{% docs type %}\nType of post (e.g. photo)\n{% enddocs %}\n\n{% docs action %}\nPost action (e.g. DefendDreamers_Nov9_CongressCalls, GunViolence2018_Feb15_ParklandResponse)\n{% enddocs %}\n\n{% docs status %}\nPost status (e.g. accepted, rejected)\n{% enddocs %}\n\n{% docs quantity %}\nNumerical quantity of items specified in the call to action (e.g. 10, 200)\n{% enddocs %}\n\n{% docs source_bucket %}\nGrouping bucket for origin of the post (e.g. web, sms) \n{% enddocs %}\n\n{% docs created_at %}\nWhen the item was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs updated_at %}\nWhen the item was updated in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs text %}\nText of the post (e.g. \"Zoo animals and a super hero trying to help too!\") \n{% enddocs %}\n\n{% docs signup_id %}\nUnique identifier for the signup \n{% enddocs %}\n\n{% docs post_class %}\nClass of the signup (e.g. \"photo - default\", \"phone-call - DefendDreamers_Jan16_BothBodies\")\n{% enddocs %}\n\n{% docs is_accepted %}\nWhether the post has been accepted to be displayed to the public on the website\n{% enddocs %}\n\n{% docs action_id %}\nInternal identifier of the action \n{% enddocs %}\n\n{% docs location %}\nLocation where the action takes place (e.g. US-NY)\n{% enddocs %}\n\n{% docs postal_code %}\nPostal code where the action takes place\n{% enddocs %}\n\n{% docs is_reportback %}\nWhether the post is a reportback. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs civic_action %}\nWhether the post is a Civic Action. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs scholarship_entry %}\nWhether the post is a Scholarship Entry. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs why_participated %}\nWhy the user participated in this action. Entered by the user.\n{% enddocs %}\n\n{% docs details %}\nDetails about the post. Contains contentfulId and other information (e.g. {\"campaignContentfulId\":\"6ATBgGEQEeJoIcxs1qbwaC\"})\n{% enddocs %}\n\n{% docs email %}\nEmail address of the user.\n{% enddocs %}\n\n{% docs source_details %}\nDetails about the source of the item. This is sometimes represented as a JSON object, and for other tables like Turbovote its represented as a string. (e.g. \"{\"contentful_id\":\"3CTLlXfbwtz1FOMpl31SKV\",\"utm_source\":\"scholarship_listing\",\"utm_medium\":\"referral\",\"utm_campaign\":\"fastweb_2019_08\"}\", newsletter_456)\n{% enddocs %}\n\n{% docs campaign_id %}\nThis is a unique identifier for the campaign\n{% enddocs %}\n\n{% docs campaign_run_id %}\nUnique identifier for the campaign run\n{% enddocs %}\n\n{% docs campaign_name %}\nName of the campaign\n{% enddocs %}\n\n{% docs campaign_cause %}\nCampaign cause (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_run_start_date %}\nStart date of the campaign run\n{% enddocs %}\n\n{% docs campaign_run_end_date %}\nEnd date of the campaign run\n{% enddocs %}\n\n{% docs campaign_created_date %}\nWhen the campaign was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs campaign_node_id %}\nInternal unique node id for the campaign\n{% enddocs %}\n\n{% docs campaign_node_id_title %}\nCampaign title\n{% enddocs %}\n\n{% docs campaign_run_id_title %}\nTitle of the campaign run\n{% enddocs %}\n\n{% docs campaign_action_type %}\nCampaign action type (eg. Make Something, Share Something)\n{% enddocs %}\n\n{% docs campaign_cause_type %}\nCampaign cause type (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_noun %}\nNoun applicable to the user's action\n{% enddocs %}\n\n{% docs campaign_verb %}\nVerb describing the action the user should take\n{% enddocs %}\n\n{% docs campaign_cta %}\nCampaign's call to action\n{% enddocs %}\n\n{% docs campaign_language %}\n\"Language in which the campaign is available\"\n{% enddocs %}\n\n{% docs agent_id %}\nIf set, the content type of the picture the member is sending us. Exp. image/png.\n{% enddocs %}\n\n{% docs attachment_content_type %}\nIf set, the handle of the Front agent this outbound support message is from.\n{% enddocs %}\n\n{% docs topic %}\nHolds a reference to the **last** campaign topic the member's conversation was in. This is useful to allow members to talk to Gambit and get quick responses (through Rivescript), without Gambit completely forgetting what state the member's interaction with a campaign topic was in.\n{% enddocs %}\n\n{% docs action_serial_id %}\nSerial id for the user's action. Depends on the source of the action. May be the bertly click id, sms message id, etc.\n{% enddocs %}\n\n{% docs channel %}\nChannel for the user's action. Depends on the source of the action. (e.g. web, sms)\n{% enddocs %}\n\n{% docs first_action_month %}\nMonth during which the user took their first action. \n{% enddocs %}\n\n{% docs event_id %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs event_source %}\nApplication source for event (eg. Phoenix, Northstar)\n{% enddocs %}\n\n{% docs event_datetime %}\nWhen the event occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs event_name %}\nName of the event (eg. northstar_submitted_register, https://docs.google.com/spreadsheets/d/1lm-fGrIm85nUTxSojqyCt_Ehmm1zEbViFhKpxcJiz1A/edit#gid=406441516)\n{% enddocs %}\n\n{% docs event_type %}\nType of event (pv = 'Page View', se = 'Structured Event')\n{% enddocs %}\n\n{% docs host %}\nURL host where event occurred (eg. www.dosomething.org or identity.dosomething.org)\n{% enddocs %}\n\n{% docs path %}\nURL path event occurred at (eg. /login or /us/campaigns/huddle-for-heroes)\n{% enddocs %}\n\n{% docs query_parameters %}\nOptional query parameters for the request (eg. query=huddle)\n{% enddocs %}\n\n{% docs se_category %}\nCategory of event (eg. focused_field, authentication) - Custom structured event\n{% enddocs %}\n\n{% docs se_action %}\nAction performed / event name (eg. form_submitted, action_failed) - Custom structured event\n{% enddocs %}\n\n{% docs se_label %}\nThe object of the action (eg. first_name, register, voter_reg_status) - Custom structured event\n{% enddocs %}\n\n{% docs session_id %}\nUnique identifier of the user's session\n{% enddocs %}\n\n{% docs session_counter %}\nHow many sessions a user has started\n{% enddocs %}\n\n{% docs browser_size %}\nWhich type of browser a user is using (eg. Mobile, Desktop)\n{% enddocs %}\n\n{% docs northstar_id %}\nThe Northstar ID of the user who generated the event\n{% enddocs %}\n\n{% docs device_id %}\nID of the device used\n{% enddocs %}\n\n{% docs referrer_host %}\nURL host of the referring site (eg. google.com)\n{% enddocs %}\n\n{% docs referrer_path %}\nURL path from referring site (eg. /10-stats-on-teen-drug-and-alcohol-use/)\n{% enddocs %}\n\n{% docs referrer_source %}\nReferrer source name (eg. Google, Facebook)\n{% enddocs %}\n\n{% docs utm_source %}\nTracks where the traffic is coming from. (eg. scholarship_listing, Facebook)\n{% enddocs %}\n\n{% docs utm_medium %}\nHow the traffic got to the platform (eg. referral, CPC)\n{% enddocs %}\n\n{% docs utm_campaign %}\nTracks which campaign the traffic was generated by. Shows up in Google Analytics as Campaign Name (eg. editorial_newsletter)\n{% enddocs %}\n\n{% docs url %}\nURL of campaign (eg. https://dosome.click/nyn5m7)\n{% enddocs %}\n\n{% docs modal_type %}\nNULL or SURVEY_MODAL\n{% enddocs %}\n\n{% docs landing_datetime %}\nWhen the session started in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs ending_datetime %}\nWhen the session ended in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs session_duration_seconds %}\nSession duration in seconds\n{% enddocs %}\n\n{% docs num_pages_views %}\nNumber of pages viewed in session\n{% enddocs %}\n\n{% docs landing_page %}\nFirst page the user viewed in the session (eg. /us/facts/11-facts-about-bp-oil-spill)\n{% enddocs %}\n\n{% docs exit_page %}\n\"Which page the user ended or exited their session from (eg. /us/campaigns/green-your-getaway)\"\n{% enddocs %}\n\n{% docs days_since_last_session %}\n\"Days since their last session.\"\n{% enddocs %}\n\n{% docs post_type %}\nType of post, (e.g. photo, voter-reg)\n{% enddocs %}\n\n{% docs noun %}\nNoun that corresponds to the item in the call to action that was delivered. (e.g. drawings, tweets)\n{% enddocs %}\n\n{% docs verb %}\nVerb corresponding to the action the user took. (e.g. shared, sent, taken)\n{% enddocs %}\n\n{% docs deleted_at %}\nDate time in UTC when a user deleted their post.\n{% enddocs %}\n\n{% docs _fivetran_deleted %}\nMarks rows that were deleted in the source table\n{% enddocs %}\n\n{% docs _fivetran_synced %}\n(UTC timestamp) keeps track of when each row was last successfully synced\n{% enddocs %}\n\n{% docs reportback %}\nWhether the post is a reportback \n{% enddocs %}\n\n{% docs active %}\nWhether the user is active \n{% enddocs %}\n\n{% docs anonymous %}\nWhether the user is anonymous when making the post \n{% enddocs %}\n\n{% docs callpower_campaign_id %}\nUnique ID corresponding to the Callpower campaign. Callpower allows users to record messages for their representatives.\n{% enddocs %}\n\n{% docs quiz %}\nWhether the post is a quiz \n{% enddocs %}\n\n{% docs action_type %}\nType of action the user took. (e.g. share-something, donate-something)\n{% enddocs %}\n\n{% docs online %}\nWhether the action is a online as opposed to IRL.\n{% enddocs %}\n\n{% docs time_commitment %}\nEstimated time required to do the action (e.g. 3.0+, <0.5)\n{% enddocs %}\n\n{% docs num_signups %}\nQuantity of campaign signups\n{% enddocs %}\n\n{% docs most_recent_signup %}\nTimestamp of the most recent signup in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs num_rbs %}\nQuantity of reportbacks for the user\n{% enddocs %}\n\n{% docs total_quantity %}\nTotal quantity of items in reportbacks\n{% enddocs %}\n\n{% docs most_recent_rb %}\nWhen the most recent reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs first_rb %}\nWhen the first reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs avg_time_betw_rbs %}\nCalculated average time between reportbacks.\n{% enddocs %}\n\n{% docs avg_days_next_action_after_rb %}\nCalculated average days until next action after reportback\n{% enddocs %}\n\n{% docs days_to_next_action_after_last_rb %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs most_recent_mam_action %}\nMost recent monthly active member qualifying action in UTC (eg. 2018-01-01 12:00:00).\n{% enddocs %}\n\n{% docs most_recent_email_open %}\nMost recent email open in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs most_recent_all_actions %}\nMost recent timestamp of any action in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs last_action_is_rb %}\nWhether the last action the user took was a reportback\n{% enddocs %}\n\n{% docs days_since_last_action %}\nDays since the user's last action\n{% enddocs %}\n\n{% docs time_to_first_rb %}\nHow much time after registering until the user's first reportback\n{% enddocs %}\n\n{% docs sms_unsubscribed_at %}\nTimestamp of when user unsubscribed from SMS messaging\n{% enddocs %}\n\n{% docs user_unsubscribed_at %}\nTimestamp of when user unsubscribed from email or sms\n{% enddocs %}\n\n{% docs voter_reg_acquisition %}\nWhether the user was an acquisition through voter registration efforts. \n{% enddocs %}\n\n{% docs last_logged_in %}\nDate time in UTC when user last logged in to Northstar\n{% enddocs %}\n\n{% docs last_accessed %}\nDate time in UTC when user last access the website\n{% enddocs %}\n\n{% docs last_messaged_at %}\nDate time in UTC when user was last sent a message via SMS or email\n{% enddocs %}\n\n{% docs facebook_id %}\nUser's facebook id\n{% enddocs %}\n\n{% docs mobile %}\nUsers's mobile phone number\n{% enddocs %}\n\n{% docs birthdate %}\nUser's birthdate\n{% enddocs %}\n\n{% docs first_name %}\nUser's first name\n{% enddocs %}\n\n{% docs last_name %}\nUser's last name\n{% enddocs %}\n\n{% docs voter_registration_status %}\nUser's registration status. (e.g. registration_complete, confirmed, uncertain) \n{% enddocs %}\n\n{% docs finish_with_state %}\nIf the registrant was eligible to use and passed through to complete their registration with their state\u2019s OVR system, it will be indicated in this field (direct quote from Rock-The-Vote documentation). Yes/No value in field.\n{% enddocs %}\n\n{% docs reportback_volume %}\nThis field returns 1 if non voter-reg action, since campaigns team only counts those a 1 reportback. If voter-reg action, we want to count quantity of post as number of registered voters.\n{% enddocs %}\n\n{% docs address_street_1 %}\nFirst line of user's street address\n{% enddocs %}\n\n{% docs address_street_2 %}\nSecond line of user's street address\n{% enddocs %}\n\n{% docs city %}\nUser's city\n{% enddocs %}\n\n{% docs state %}\nUser's state\n{% enddocs %}\n\n{% docs country %}\nUser's country\n{% enddocs %}\n\n{% docs language %}\nUser's language\n{% enddocs %}\n\n{% docs cio_status %}\nStatus of user from CIO. (e.g. customer_subscribed, customer_unsubscribed)\n{% enddocs %}\n\n{% docs cio_status_timestamp %}\nTimestamp when users's status was updated.\n{% enddocs %}\n\n{% docs sms_status %}\nCurrent SMS status. (e.g. undeliverable, unknown)\n{% enddocs %}\n\n{% docs source_detail %}\nDetails of the origin of the user. (e.g. tell_a_friend, other, opt_in_path/197981)\n{% enddocs %}\n\n{% docs badges %}\nWhether the user has any badges. \n{% enddocs %}\n\n{% docs refer_friends %}\nWhether the user is a part of the refer a friend campaign. \n{% enddocs %}\n\n{% docs subscribed_member %}\nWhether the user is subscribed. \n{% enddocs %}\n\n{% docs last_updated_at %}\nTimestamp when users's was updated.\n{% enddocs %}\n\n{% docs school_id %}\nUnique identifier for the user's school. This info comes from the school finder.\n{% enddocs %}\n\n{% docs newsletter_topic %}\nNewsletter topic. (e.g. community, lifestyle)\n{% enddocs %}\n\n{% docs user_agent %}\nFull user agent string for a user's browser (e.g. \"Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:24.0) Gecko/20100101 Firefox/24.0\")\n{% enddocs %}\n\n{% docs drupal_id %}\nOld Drupal user ID\n{% enddocs %}\n\n{% docs campaigns %}\nCampaigns a user is signed up for.\n{% enddocs %}\n\n{% docs audit %}\nA very useful field with data containing information about changes to a user, e.g. timestamps when the user subscribed and unsubscribed.\n{% enddocs %}\n\n{% docs voting_plan_status %}\nThe indication of the user's plan to vote, e.g. voting, not_voting, cant_vote\n{% enddocs %}\n\n{% docs voting_plan_time_of_day %}\nThe time of day when the user plans to vote, e.g morning, afternoon, evening\n{% enddocs %}\n\n{% docs voting_plan_method_of_transport %}\nHow the user plans to get to their polling place. e.g. walk, drive\n{% enddocs %}\n\n{% docs voting_plan_attending_with %}\nWith Whom the user plans to go voting, e.g. family, friends, alone\n{% enddocs %}\n\n{% docs feature_flags %}\nJSON containing info on features like badges and refer-a-friend.\n{% enddocs %}\n\n{% docs dbt_updated_at %}\nDBT snapshot table data. The updated_at timestamp of the source record when this snapshot row was inserted.\n{% enddocs %}\n\n{% docs dbt_scd_id %}\nDBT snapshot table data. A unique key generated for each snapshotted record.\n{% enddocs %}\n\n{% docs dbt_valid_from %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this snapshot row was first inserted\n{% enddocs %}\n\n{% docs dbt_valid_to %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this row row became invalidated.\n{% enddocs %}\n\n{% docs google_id %}\nUser's Google ID obtained from login.\n{% enddocs %}\n\n{% docs causes %}\nCauses in which a user is interested. e.g. animal welfare, education, mental_health\n{% enddocs %}\n\n{% docs email_subscription_status %}\nEmail subscription status of the user\n{% enddocs %}\n\n{% docs role %}\nUser's role, e.g. user, staff\n{% enddocs %}\n\n{% docs cio_backfilled %}\nWhether this user's data was backfilled from CIO\n{% enddocs %}\n\n{% docs addr_source %}\nWhere the user submitted their address, e.g. sms, GDPR\n{% enddocs %}\n\n{% docs email_subscription_topics %}\nEmail subscription topics correspond to categories in CIO in which the user is interested. e.g. lifestyle, community, scholarship\n{% enddocs %}\n\n{% docs sms_paused %}\nWhether we've paused sending sms messages to the user.\n{% enddocs %}\n\n\n\n\n", "name": "first_rb", "unique_id": "ds_dbt.first_rb", "block_contents": "When the first reportback occurred in UTC (eg. 2018-01-01 12:00:00)"}, "ds_dbt.avg_time_betw_rbs": {"root_path": "/Users/mrich/projects/quasar/quasar/dbt", "resource_type": "docs", "path": "schema.md", "original_file_path": "models/schema.md", "package_name": "ds_dbt", "file_contents": "\n{% docs click_id %}\nThis is a unique identifier for each click\n{% enddocs %}\n\n{% docs click_time %}\nTimestamp when user clicked.\n{% enddocs %}\n\n{% docs shortened %}\nShortened URL\n{% enddocs %}\n\n{% docs target_url %}\nURL where the user will be directed\n{% enddocs %}\n\n{% docs broadcast_id %}\nID of the broadcast that generated the shortened URL\n{% enddocs %}\n\n{% docs source %}\nSource of the URL (e.g. SMS, web), origin of the post (e.g. phoenix-web, phoenix-ashes, sms), or source where user was acquired. (e.g. sms, phoenix-next)\n{% enddocs %}\n\n{% docs interaction_type %}\nHow the user interacted with the link (e.g. preview, click)\n{% enddocs %}\n\n{% docs id %}\nUnique identifier for the post\n{% enddocs %}\n\n{% docs type %}\nType of post (e.g. photo)\n{% enddocs %}\n\n{% docs action %}\nPost action (e.g. DefendDreamers_Nov9_CongressCalls, GunViolence2018_Feb15_ParklandResponse)\n{% enddocs %}\n\n{% docs status %}\nPost status (e.g. accepted, rejected)\n{% enddocs %}\n\n{% docs quantity %}\nNumerical quantity of items specified in the call to action (e.g. 10, 200)\n{% enddocs %}\n\n{% docs source_bucket %}\nGrouping bucket for origin of the post (e.g. web, sms) \n{% enddocs %}\n\n{% docs created_at %}\nWhen the item was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs updated_at %}\nWhen the item was updated in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs text %}\nText of the post (e.g. \"Zoo animals and a super hero trying to help too!\") \n{% enddocs %}\n\n{% docs signup_id %}\nUnique identifier for the signup \n{% enddocs %}\n\n{% docs post_class %}\nClass of the signup (e.g. \"photo - default\", \"phone-call - DefendDreamers_Jan16_BothBodies\")\n{% enddocs %}\n\n{% docs is_accepted %}\nWhether the post has been accepted to be displayed to the public on the website\n{% enddocs %}\n\n{% docs action_id %}\nInternal identifier of the action \n{% enddocs %}\n\n{% docs location %}\nLocation where the action takes place (e.g. US-NY)\n{% enddocs %}\n\n{% docs postal_code %}\nPostal code where the action takes place\n{% enddocs %}\n\n{% docs is_reportback %}\nWhether the post is a reportback. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs civic_action %}\nWhether the post is a Civic Action. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs scholarship_entry %}\nWhether the post is a Scholarship Entry. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs why_participated %}\nWhy the user participated in this action. Entered by the user.\n{% enddocs %}\n\n{% docs details %}\nDetails about the post. Contains contentfulId and other information (e.g. {\"campaignContentfulId\":\"6ATBgGEQEeJoIcxs1qbwaC\"})\n{% enddocs %}\n\n{% docs email %}\nEmail address of the user.\n{% enddocs %}\n\n{% docs source_details %}\nDetails about the source of the item. This is sometimes represented as a JSON object, and for other tables like Turbovote its represented as a string. (e.g. \"{\"contentful_id\":\"3CTLlXfbwtz1FOMpl31SKV\",\"utm_source\":\"scholarship_listing\",\"utm_medium\":\"referral\",\"utm_campaign\":\"fastweb_2019_08\"}\", newsletter_456)\n{% enddocs %}\n\n{% docs campaign_id %}\nThis is a unique identifier for the campaign\n{% enddocs %}\n\n{% docs campaign_run_id %}\nUnique identifier for the campaign run\n{% enddocs %}\n\n{% docs campaign_name %}\nName of the campaign\n{% enddocs %}\n\n{% docs campaign_cause %}\nCampaign cause (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_run_start_date %}\nStart date of the campaign run\n{% enddocs %}\n\n{% docs campaign_run_end_date %}\nEnd date of the campaign run\n{% enddocs %}\n\n{% docs campaign_created_date %}\nWhen the campaign was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs campaign_node_id %}\nInternal unique node id for the campaign\n{% enddocs %}\n\n{% docs campaign_node_id_title %}\nCampaign title\n{% enddocs %}\n\n{% docs campaign_run_id_title %}\nTitle of the campaign run\n{% enddocs %}\n\n{% docs campaign_action_type %}\nCampaign action type (eg. Make Something, Share Something)\n{% enddocs %}\n\n{% docs campaign_cause_type %}\nCampaign cause type (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_noun %}\nNoun applicable to the user's action\n{% enddocs %}\n\n{% docs campaign_verb %}\nVerb describing the action the user should take\n{% enddocs %}\n\n{% docs campaign_cta %}\nCampaign's call to action\n{% enddocs %}\n\n{% docs campaign_language %}\n\"Language in which the campaign is available\"\n{% enddocs %}\n\n{% docs agent_id %}\nIf set, the content type of the picture the member is sending us. Exp. image/png.\n{% enddocs %}\n\n{% docs attachment_content_type %}\nIf set, the handle of the Front agent this outbound support message is from.\n{% enddocs %}\n\n{% docs topic %}\nHolds a reference to the **last** campaign topic the member's conversation was in. This is useful to allow members to talk to Gambit and get quick responses (through Rivescript), without Gambit completely forgetting what state the member's interaction with a campaign topic was in.\n{% enddocs %}\n\n{% docs action_serial_id %}\nSerial id for the user's action. Depends on the source of the action. May be the bertly click id, sms message id, etc.\n{% enddocs %}\n\n{% docs channel %}\nChannel for the user's action. Depends on the source of the action. (e.g. web, sms)\n{% enddocs %}\n\n{% docs first_action_month %}\nMonth during which the user took their first action. \n{% enddocs %}\n\n{% docs event_id %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs event_source %}\nApplication source for event (eg. Phoenix, Northstar)\n{% enddocs %}\n\n{% docs event_datetime %}\nWhen the event occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs event_name %}\nName of the event (eg. northstar_submitted_register, https://docs.google.com/spreadsheets/d/1lm-fGrIm85nUTxSojqyCt_Ehmm1zEbViFhKpxcJiz1A/edit#gid=406441516)\n{% enddocs %}\n\n{% docs event_type %}\nType of event (pv = 'Page View', se = 'Structured Event')\n{% enddocs %}\n\n{% docs host %}\nURL host where event occurred (eg. www.dosomething.org or identity.dosomething.org)\n{% enddocs %}\n\n{% docs path %}\nURL path event occurred at (eg. /login or /us/campaigns/huddle-for-heroes)\n{% enddocs %}\n\n{% docs query_parameters %}\nOptional query parameters for the request (eg. query=huddle)\n{% enddocs %}\n\n{% docs se_category %}\nCategory of event (eg. focused_field, authentication) - Custom structured event\n{% enddocs %}\n\n{% docs se_action %}\nAction performed / event name (eg. form_submitted, action_failed) - Custom structured event\n{% enddocs %}\n\n{% docs se_label %}\nThe object of the action (eg. first_name, register, voter_reg_status) - Custom structured event\n{% enddocs %}\n\n{% docs session_id %}\nUnique identifier of the user's session\n{% enddocs %}\n\n{% docs session_counter %}\nHow many sessions a user has started\n{% enddocs %}\n\n{% docs browser_size %}\nWhich type of browser a user is using (eg. Mobile, Desktop)\n{% enddocs %}\n\n{% docs northstar_id %}\nThe Northstar ID of the user who generated the event\n{% enddocs %}\n\n{% docs device_id %}\nID of the device used\n{% enddocs %}\n\n{% docs referrer_host %}\nURL host of the referring site (eg. google.com)\n{% enddocs %}\n\n{% docs referrer_path %}\nURL path from referring site (eg. /10-stats-on-teen-drug-and-alcohol-use/)\n{% enddocs %}\n\n{% docs referrer_source %}\nReferrer source name (eg. Google, Facebook)\n{% enddocs %}\n\n{% docs utm_source %}\nTracks where the traffic is coming from. (eg. scholarship_listing, Facebook)\n{% enddocs %}\n\n{% docs utm_medium %}\nHow the traffic got to the platform (eg. referral, CPC)\n{% enddocs %}\n\n{% docs utm_campaign %}\nTracks which campaign the traffic was generated by. Shows up in Google Analytics as Campaign Name (eg. editorial_newsletter)\n{% enddocs %}\n\n{% docs url %}\nURL of campaign (eg. https://dosome.click/nyn5m7)\n{% enddocs %}\n\n{% docs modal_type %}\nNULL or SURVEY_MODAL\n{% enddocs %}\n\n{% docs landing_datetime %}\nWhen the session started in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs ending_datetime %}\nWhen the session ended in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs session_duration_seconds %}\nSession duration in seconds\n{% enddocs %}\n\n{% docs num_pages_views %}\nNumber of pages viewed in session\n{% enddocs %}\n\n{% docs landing_page %}\nFirst page the user viewed in the session (eg. /us/facts/11-facts-about-bp-oil-spill)\n{% enddocs %}\n\n{% docs exit_page %}\n\"Which page the user ended or exited their session from (eg. /us/campaigns/green-your-getaway)\"\n{% enddocs %}\n\n{% docs days_since_last_session %}\n\"Days since their last session.\"\n{% enddocs %}\n\n{% docs post_type %}\nType of post, (e.g. photo, voter-reg)\n{% enddocs %}\n\n{% docs noun %}\nNoun that corresponds to the item in the call to action that was delivered. (e.g. drawings, tweets)\n{% enddocs %}\n\n{% docs verb %}\nVerb corresponding to the action the user took. (e.g. shared, sent, taken)\n{% enddocs %}\n\n{% docs deleted_at %}\nDate time in UTC when a user deleted their post.\n{% enddocs %}\n\n{% docs _fivetran_deleted %}\nMarks rows that were deleted in the source table\n{% enddocs %}\n\n{% docs _fivetran_synced %}\n(UTC timestamp) keeps track of when each row was last successfully synced\n{% enddocs %}\n\n{% docs reportback %}\nWhether the post is a reportback \n{% enddocs %}\n\n{% docs active %}\nWhether the user is active \n{% enddocs %}\n\n{% docs anonymous %}\nWhether the user is anonymous when making the post \n{% enddocs %}\n\n{% docs callpower_campaign_id %}\nUnique ID corresponding to the Callpower campaign. Callpower allows users to record messages for their representatives.\n{% enddocs %}\n\n{% docs quiz %}\nWhether the post is a quiz \n{% enddocs %}\n\n{% docs action_type %}\nType of action the user took. (e.g. share-something, donate-something)\n{% enddocs %}\n\n{% docs online %}\nWhether the action is a online as opposed to IRL.\n{% enddocs %}\n\n{% docs time_commitment %}\nEstimated time required to do the action (e.g. 3.0+, <0.5)\n{% enddocs %}\n\n{% docs num_signups %}\nQuantity of campaign signups\n{% enddocs %}\n\n{% docs most_recent_signup %}\nTimestamp of the most recent signup in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs num_rbs %}\nQuantity of reportbacks for the user\n{% enddocs %}\n\n{% docs total_quantity %}\nTotal quantity of items in reportbacks\n{% enddocs %}\n\n{% docs most_recent_rb %}\nWhen the most recent reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs first_rb %}\nWhen the first reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs avg_time_betw_rbs %}\nCalculated average time between reportbacks.\n{% enddocs %}\n\n{% docs avg_days_next_action_after_rb %}\nCalculated average days until next action after reportback\n{% enddocs %}\n\n{% docs days_to_next_action_after_last_rb %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs most_recent_mam_action %}\nMost recent monthly active member qualifying action in UTC (eg. 2018-01-01 12:00:00).\n{% enddocs %}\n\n{% docs most_recent_email_open %}\nMost recent email open in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs most_recent_all_actions %}\nMost recent timestamp of any action in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs last_action_is_rb %}\nWhether the last action the user took was a reportback\n{% enddocs %}\n\n{% docs days_since_last_action %}\nDays since the user's last action\n{% enddocs %}\n\n{% docs time_to_first_rb %}\nHow much time after registering until the user's first reportback\n{% enddocs %}\n\n{% docs sms_unsubscribed_at %}\nTimestamp of when user unsubscribed from SMS messaging\n{% enddocs %}\n\n{% docs user_unsubscribed_at %}\nTimestamp of when user unsubscribed from email or sms\n{% enddocs %}\n\n{% docs voter_reg_acquisition %}\nWhether the user was an acquisition through voter registration efforts. \n{% enddocs %}\n\n{% docs last_logged_in %}\nDate time in UTC when user last logged in to Northstar\n{% enddocs %}\n\n{% docs last_accessed %}\nDate time in UTC when user last access the website\n{% enddocs %}\n\n{% docs last_messaged_at %}\nDate time in UTC when user was last sent a message via SMS or email\n{% enddocs %}\n\n{% docs facebook_id %}\nUser's facebook id\n{% enddocs %}\n\n{% docs mobile %}\nUsers's mobile phone number\n{% enddocs %}\n\n{% docs birthdate %}\nUser's birthdate\n{% enddocs %}\n\n{% docs first_name %}\nUser's first name\n{% enddocs %}\n\n{% docs last_name %}\nUser's last name\n{% enddocs %}\n\n{% docs voter_registration_status %}\nUser's registration status. (e.g. registration_complete, confirmed, uncertain) \n{% enddocs %}\n\n{% docs finish_with_state %}\nIf the registrant was eligible to use and passed through to complete their registration with their state\u2019s OVR system, it will be indicated in this field (direct quote from Rock-The-Vote documentation). Yes/No value in field.\n{% enddocs %}\n\n{% docs reportback_volume %}\nThis field returns 1 if non voter-reg action, since campaigns team only counts those a 1 reportback. If voter-reg action, we want to count quantity of post as number of registered voters.\n{% enddocs %}\n\n{% docs address_street_1 %}\nFirst line of user's street address\n{% enddocs %}\n\n{% docs address_street_2 %}\nSecond line of user's street address\n{% enddocs %}\n\n{% docs city %}\nUser's city\n{% enddocs %}\n\n{% docs state %}\nUser's state\n{% enddocs %}\n\n{% docs country %}\nUser's country\n{% enddocs %}\n\n{% docs language %}\nUser's language\n{% enddocs %}\n\n{% docs cio_status %}\nStatus of user from CIO. (e.g. customer_subscribed, customer_unsubscribed)\n{% enddocs %}\n\n{% docs cio_status_timestamp %}\nTimestamp when users's status was updated.\n{% enddocs %}\n\n{% docs sms_status %}\nCurrent SMS status. (e.g. undeliverable, unknown)\n{% enddocs %}\n\n{% docs source_detail %}\nDetails of the origin of the user. (e.g. tell_a_friend, other, opt_in_path/197981)\n{% enddocs %}\n\n{% docs badges %}\nWhether the user has any badges. \n{% enddocs %}\n\n{% docs refer_friends %}\nWhether the user is a part of the refer a friend campaign. \n{% enddocs %}\n\n{% docs subscribed_member %}\nWhether the user is subscribed. \n{% enddocs %}\n\n{% docs last_updated_at %}\nTimestamp when users's was updated.\n{% enddocs %}\n\n{% docs school_id %}\nUnique identifier for the user's school. This info comes from the school finder.\n{% enddocs %}\n\n{% docs newsletter_topic %}\nNewsletter topic. (e.g. community, lifestyle)\n{% enddocs %}\n\n{% docs user_agent %}\nFull user agent string for a user's browser (e.g. \"Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:24.0) Gecko/20100101 Firefox/24.0\")\n{% enddocs %}\n\n{% docs drupal_id %}\nOld Drupal user ID\n{% enddocs %}\n\n{% docs campaigns %}\nCampaigns a user is signed up for.\n{% enddocs %}\n\n{% docs audit %}\nA very useful field with data containing information about changes to a user, e.g. timestamps when the user subscribed and unsubscribed.\n{% enddocs %}\n\n{% docs voting_plan_status %}\nThe indication of the user's plan to vote, e.g. voting, not_voting, cant_vote\n{% enddocs %}\n\n{% docs voting_plan_time_of_day %}\nThe time of day when the user plans to vote, e.g morning, afternoon, evening\n{% enddocs %}\n\n{% docs voting_plan_method_of_transport %}\nHow the user plans to get to their polling place. e.g. walk, drive\n{% enddocs %}\n\n{% docs voting_plan_attending_with %}\nWith Whom the user plans to go voting, e.g. family, friends, alone\n{% enddocs %}\n\n{% docs feature_flags %}\nJSON containing info on features like badges and refer-a-friend.\n{% enddocs %}\n\n{% docs dbt_updated_at %}\nDBT snapshot table data. The updated_at timestamp of the source record when this snapshot row was inserted.\n{% enddocs %}\n\n{% docs dbt_scd_id %}\nDBT snapshot table data. A unique key generated for each snapshotted record.\n{% enddocs %}\n\n{% docs dbt_valid_from %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this snapshot row was first inserted\n{% enddocs %}\n\n{% docs dbt_valid_to %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this row row became invalidated.\n{% enddocs %}\n\n{% docs google_id %}\nUser's Google ID obtained from login.\n{% enddocs %}\n\n{% docs causes %}\nCauses in which a user is interested. e.g. animal welfare, education, mental_health\n{% enddocs %}\n\n{% docs email_subscription_status %}\nEmail subscription status of the user\n{% enddocs %}\n\n{% docs role %}\nUser's role, e.g. user, staff\n{% enddocs %}\n\n{% docs cio_backfilled %}\nWhether this user's data was backfilled from CIO\n{% enddocs %}\n\n{% docs addr_source %}\nWhere the user submitted their address, e.g. sms, GDPR\n{% enddocs %}\n\n{% docs email_subscription_topics %}\nEmail subscription topics correspond to categories in CIO in which the user is interested. e.g. lifestyle, community, scholarship\n{% enddocs %}\n\n{% docs sms_paused %}\nWhether we've paused sending sms messages to the user.\n{% enddocs %}\n\n\n\n\n", "name": "avg_time_betw_rbs", "unique_id": "ds_dbt.avg_time_betw_rbs", "block_contents": "Calculated average time between reportbacks."}, "ds_dbt.avg_days_next_action_after_rb": {"root_path": "/Users/mrich/projects/quasar/quasar/dbt", "resource_type": "docs", "path": "schema.md", "original_file_path": "models/schema.md", "package_name": "ds_dbt", "file_contents": "\n{% docs click_id %}\nThis is a unique identifier for each click\n{% enddocs %}\n\n{% docs click_time %}\nTimestamp when user clicked.\n{% enddocs %}\n\n{% docs shortened %}\nShortened URL\n{% enddocs %}\n\n{% docs target_url %}\nURL where the user will be directed\n{% enddocs %}\n\n{% docs broadcast_id %}\nID of the broadcast that generated the shortened URL\n{% enddocs %}\n\n{% docs source %}\nSource of the URL (e.g. SMS, web), origin of the post (e.g. phoenix-web, phoenix-ashes, sms), or source where user was acquired. (e.g. sms, phoenix-next)\n{% enddocs %}\n\n{% docs interaction_type %}\nHow the user interacted with the link (e.g. preview, click)\n{% enddocs %}\n\n{% docs id %}\nUnique identifier for the post\n{% enddocs %}\n\n{% docs type %}\nType of post (e.g. photo)\n{% enddocs %}\n\n{% docs action %}\nPost action (e.g. DefendDreamers_Nov9_CongressCalls, GunViolence2018_Feb15_ParklandResponse)\n{% enddocs %}\n\n{% docs status %}\nPost status (e.g. accepted, rejected)\n{% enddocs %}\n\n{% docs quantity %}\nNumerical quantity of items specified in the call to action (e.g. 10, 200)\n{% enddocs %}\n\n{% docs source_bucket %}\nGrouping bucket for origin of the post (e.g. web, sms) \n{% enddocs %}\n\n{% docs created_at %}\nWhen the item was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs updated_at %}\nWhen the item was updated in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs text %}\nText of the post (e.g. \"Zoo animals and a super hero trying to help too!\") \n{% enddocs %}\n\n{% docs signup_id %}\nUnique identifier for the signup \n{% enddocs %}\n\n{% docs post_class %}\nClass of the signup (e.g. \"photo - default\", \"phone-call - DefendDreamers_Jan16_BothBodies\")\n{% enddocs %}\n\n{% docs is_accepted %}\nWhether the post has been accepted to be displayed to the public on the website\n{% enddocs %}\n\n{% docs action_id %}\nInternal identifier of the action \n{% enddocs %}\n\n{% docs location %}\nLocation where the action takes place (e.g. US-NY)\n{% enddocs %}\n\n{% docs postal_code %}\nPostal code where the action takes place\n{% enddocs %}\n\n{% docs is_reportback %}\nWhether the post is a reportback. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs civic_action %}\nWhether the post is a Civic Action. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs scholarship_entry %}\nWhether the post is a Scholarship Entry. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs why_participated %}\nWhy the user participated in this action. Entered by the user.\n{% enddocs %}\n\n{% docs details %}\nDetails about the post. Contains contentfulId and other information (e.g. {\"campaignContentfulId\":\"6ATBgGEQEeJoIcxs1qbwaC\"})\n{% enddocs %}\n\n{% docs email %}\nEmail address of the user.\n{% enddocs %}\n\n{% docs source_details %}\nDetails about the source of the item. This is sometimes represented as a JSON object, and for other tables like Turbovote its represented as a string. (e.g. \"{\"contentful_id\":\"3CTLlXfbwtz1FOMpl31SKV\",\"utm_source\":\"scholarship_listing\",\"utm_medium\":\"referral\",\"utm_campaign\":\"fastweb_2019_08\"}\", newsletter_456)\n{% enddocs %}\n\n{% docs campaign_id %}\nThis is a unique identifier for the campaign\n{% enddocs %}\n\n{% docs campaign_run_id %}\nUnique identifier for the campaign run\n{% enddocs %}\n\n{% docs campaign_name %}\nName of the campaign\n{% enddocs %}\n\n{% docs campaign_cause %}\nCampaign cause (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_run_start_date %}\nStart date of the campaign run\n{% enddocs %}\n\n{% docs campaign_run_end_date %}\nEnd date of the campaign run\n{% enddocs %}\n\n{% docs campaign_created_date %}\nWhen the campaign was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs campaign_node_id %}\nInternal unique node id for the campaign\n{% enddocs %}\n\n{% docs campaign_node_id_title %}\nCampaign title\n{% enddocs %}\n\n{% docs campaign_run_id_title %}\nTitle of the campaign run\n{% enddocs %}\n\n{% docs campaign_action_type %}\nCampaign action type (eg. Make Something, Share Something)\n{% enddocs %}\n\n{% docs campaign_cause_type %}\nCampaign cause type (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_noun %}\nNoun applicable to the user's action\n{% enddocs %}\n\n{% docs campaign_verb %}\nVerb describing the action the user should take\n{% enddocs %}\n\n{% docs campaign_cta %}\nCampaign's call to action\n{% enddocs %}\n\n{% docs campaign_language %}\n\"Language in which the campaign is available\"\n{% enddocs %}\n\n{% docs agent_id %}\nIf set, the content type of the picture the member is sending us. Exp. image/png.\n{% enddocs %}\n\n{% docs attachment_content_type %}\nIf set, the handle of the Front agent this outbound support message is from.\n{% enddocs %}\n\n{% docs topic %}\nHolds a reference to the **last** campaign topic the member's conversation was in. This is useful to allow members to talk to Gambit and get quick responses (through Rivescript), without Gambit completely forgetting what state the member's interaction with a campaign topic was in.\n{% enddocs %}\n\n{% docs action_serial_id %}\nSerial id for the user's action. Depends on the source of the action. May be the bertly click id, sms message id, etc.\n{% enddocs %}\n\n{% docs channel %}\nChannel for the user's action. Depends on the source of the action. (e.g. web, sms)\n{% enddocs %}\n\n{% docs first_action_month %}\nMonth during which the user took their first action. \n{% enddocs %}\n\n{% docs event_id %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs event_source %}\nApplication source for event (eg. Phoenix, Northstar)\n{% enddocs %}\n\n{% docs event_datetime %}\nWhen the event occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs event_name %}\nName of the event (eg. northstar_submitted_register, https://docs.google.com/spreadsheets/d/1lm-fGrIm85nUTxSojqyCt_Ehmm1zEbViFhKpxcJiz1A/edit#gid=406441516)\n{% enddocs %}\n\n{% docs event_type %}\nType of event (pv = 'Page View', se = 'Structured Event')\n{% enddocs %}\n\n{% docs host %}\nURL host where event occurred (eg. www.dosomething.org or identity.dosomething.org)\n{% enddocs %}\n\n{% docs path %}\nURL path event occurred at (eg. /login or /us/campaigns/huddle-for-heroes)\n{% enddocs %}\n\n{% docs query_parameters %}\nOptional query parameters for the request (eg. query=huddle)\n{% enddocs %}\n\n{% docs se_category %}\nCategory of event (eg. focused_field, authentication) - Custom structured event\n{% enddocs %}\n\n{% docs se_action %}\nAction performed / event name (eg. form_submitted, action_failed) - Custom structured event\n{% enddocs %}\n\n{% docs se_label %}\nThe object of the action (eg. first_name, register, voter_reg_status) - Custom structured event\n{% enddocs %}\n\n{% docs session_id %}\nUnique identifier of the user's session\n{% enddocs %}\n\n{% docs session_counter %}\nHow many sessions a user has started\n{% enddocs %}\n\n{% docs browser_size %}\nWhich type of browser a user is using (eg. Mobile, Desktop)\n{% enddocs %}\n\n{% docs northstar_id %}\nThe Northstar ID of the user who generated the event\n{% enddocs %}\n\n{% docs device_id %}\nID of the device used\n{% enddocs %}\n\n{% docs referrer_host %}\nURL host of the referring site (eg. google.com)\n{% enddocs %}\n\n{% docs referrer_path %}\nURL path from referring site (eg. /10-stats-on-teen-drug-and-alcohol-use/)\n{% enddocs %}\n\n{% docs referrer_source %}\nReferrer source name (eg. Google, Facebook)\n{% enddocs %}\n\n{% docs utm_source %}\nTracks where the traffic is coming from. (eg. scholarship_listing, Facebook)\n{% enddocs %}\n\n{% docs utm_medium %}\nHow the traffic got to the platform (eg. referral, CPC)\n{% enddocs %}\n\n{% docs utm_campaign %}\nTracks which campaign the traffic was generated by. Shows up in Google Analytics as Campaign Name (eg. editorial_newsletter)\n{% enddocs %}\n\n{% docs url %}\nURL of campaign (eg. https://dosome.click/nyn5m7)\n{% enddocs %}\n\n{% docs modal_type %}\nNULL or SURVEY_MODAL\n{% enddocs %}\n\n{% docs landing_datetime %}\nWhen the session started in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs ending_datetime %}\nWhen the session ended in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs session_duration_seconds %}\nSession duration in seconds\n{% enddocs %}\n\n{% docs num_pages_views %}\nNumber of pages viewed in session\n{% enddocs %}\n\n{% docs landing_page %}\nFirst page the user viewed in the session (eg. /us/facts/11-facts-about-bp-oil-spill)\n{% enddocs %}\n\n{% docs exit_page %}\n\"Which page the user ended or exited their session from (eg. /us/campaigns/green-your-getaway)\"\n{% enddocs %}\n\n{% docs days_since_last_session %}\n\"Days since their last session.\"\n{% enddocs %}\n\n{% docs post_type %}\nType of post, (e.g. photo, voter-reg)\n{% enddocs %}\n\n{% docs noun %}\nNoun that corresponds to the item in the call to action that was delivered. (e.g. drawings, tweets)\n{% enddocs %}\n\n{% docs verb %}\nVerb corresponding to the action the user took. (e.g. shared, sent, taken)\n{% enddocs %}\n\n{% docs deleted_at %}\nDate time in UTC when a user deleted their post.\n{% enddocs %}\n\n{% docs _fivetran_deleted %}\nMarks rows that were deleted in the source table\n{% enddocs %}\n\n{% docs _fivetran_synced %}\n(UTC timestamp) keeps track of when each row was last successfully synced\n{% enddocs %}\n\n{% docs reportback %}\nWhether the post is a reportback \n{% enddocs %}\n\n{% docs active %}\nWhether the user is active \n{% enddocs %}\n\n{% docs anonymous %}\nWhether the user is anonymous when making the post \n{% enddocs %}\n\n{% docs callpower_campaign_id %}\nUnique ID corresponding to the Callpower campaign. Callpower allows users to record messages for their representatives.\n{% enddocs %}\n\n{% docs quiz %}\nWhether the post is a quiz \n{% enddocs %}\n\n{% docs action_type %}\nType of action the user took. (e.g. share-something, donate-something)\n{% enddocs %}\n\n{% docs online %}\nWhether the action is a online as opposed to IRL.\n{% enddocs %}\n\n{% docs time_commitment %}\nEstimated time required to do the action (e.g. 3.0+, <0.5)\n{% enddocs %}\n\n{% docs num_signups %}\nQuantity of campaign signups\n{% enddocs %}\n\n{% docs most_recent_signup %}\nTimestamp of the most recent signup in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs num_rbs %}\nQuantity of reportbacks for the user\n{% enddocs %}\n\n{% docs total_quantity %}\nTotal quantity of items in reportbacks\n{% enddocs %}\n\n{% docs most_recent_rb %}\nWhen the most recent reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs first_rb %}\nWhen the first reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs avg_time_betw_rbs %}\nCalculated average time between reportbacks.\n{% enddocs %}\n\n{% docs avg_days_next_action_after_rb %}\nCalculated average days until next action after reportback\n{% enddocs %}\n\n{% docs days_to_next_action_after_last_rb %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs most_recent_mam_action %}\nMost recent monthly active member qualifying action in UTC (eg. 2018-01-01 12:00:00).\n{% enddocs %}\n\n{% docs most_recent_email_open %}\nMost recent email open in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs most_recent_all_actions %}\nMost recent timestamp of any action in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs last_action_is_rb %}\nWhether the last action the user took was a reportback\n{% enddocs %}\n\n{% docs days_since_last_action %}\nDays since the user's last action\n{% enddocs %}\n\n{% docs time_to_first_rb %}\nHow much time after registering until the user's first reportback\n{% enddocs %}\n\n{% docs sms_unsubscribed_at %}\nTimestamp of when user unsubscribed from SMS messaging\n{% enddocs %}\n\n{% docs user_unsubscribed_at %}\nTimestamp of when user unsubscribed from email or sms\n{% enddocs %}\n\n{% docs voter_reg_acquisition %}\nWhether the user was an acquisition through voter registration efforts. \n{% enddocs %}\n\n{% docs last_logged_in %}\nDate time in UTC when user last logged in to Northstar\n{% enddocs %}\n\n{% docs last_accessed %}\nDate time in UTC when user last access the website\n{% enddocs %}\n\n{% docs last_messaged_at %}\nDate time in UTC when user was last sent a message via SMS or email\n{% enddocs %}\n\n{% docs facebook_id %}\nUser's facebook id\n{% enddocs %}\n\n{% docs mobile %}\nUsers's mobile phone number\n{% enddocs %}\n\n{% docs birthdate %}\nUser's birthdate\n{% enddocs %}\n\n{% docs first_name %}\nUser's first name\n{% enddocs %}\n\n{% docs last_name %}\nUser's last name\n{% enddocs %}\n\n{% docs voter_registration_status %}\nUser's registration status. (e.g. registration_complete, confirmed, uncertain) \n{% enddocs %}\n\n{% docs finish_with_state %}\nIf the registrant was eligible to use and passed through to complete their registration with their state\u2019s OVR system, it will be indicated in this field (direct quote from Rock-The-Vote documentation). Yes/No value in field.\n{% enddocs %}\n\n{% docs reportback_volume %}\nThis field returns 1 if non voter-reg action, since campaigns team only counts those a 1 reportback. If voter-reg action, we want to count quantity of post as number of registered voters.\n{% enddocs %}\n\n{% docs address_street_1 %}\nFirst line of user's street address\n{% enddocs %}\n\n{% docs address_street_2 %}\nSecond line of user's street address\n{% enddocs %}\n\n{% docs city %}\nUser's city\n{% enddocs %}\n\n{% docs state %}\nUser's state\n{% enddocs %}\n\n{% docs country %}\nUser's country\n{% enddocs %}\n\n{% docs language %}\nUser's language\n{% enddocs %}\n\n{% docs cio_status %}\nStatus of user from CIO. (e.g. customer_subscribed, customer_unsubscribed)\n{% enddocs %}\n\n{% docs cio_status_timestamp %}\nTimestamp when users's status was updated.\n{% enddocs %}\n\n{% docs sms_status %}\nCurrent SMS status. (e.g. undeliverable, unknown)\n{% enddocs %}\n\n{% docs source_detail %}\nDetails of the origin of the user. (e.g. tell_a_friend, other, opt_in_path/197981)\n{% enddocs %}\n\n{% docs badges %}\nWhether the user has any badges. \n{% enddocs %}\n\n{% docs refer_friends %}\nWhether the user is a part of the refer a friend campaign. \n{% enddocs %}\n\n{% docs subscribed_member %}\nWhether the user is subscribed. \n{% enddocs %}\n\n{% docs last_updated_at %}\nTimestamp when users's was updated.\n{% enddocs %}\n\n{% docs school_id %}\nUnique identifier for the user's school. This info comes from the school finder.\n{% enddocs %}\n\n{% docs newsletter_topic %}\nNewsletter topic. (e.g. community, lifestyle)\n{% enddocs %}\n\n{% docs user_agent %}\nFull user agent string for a user's browser (e.g. \"Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:24.0) Gecko/20100101 Firefox/24.0\")\n{% enddocs %}\n\n{% docs drupal_id %}\nOld Drupal user ID\n{% enddocs %}\n\n{% docs campaigns %}\nCampaigns a user is signed up for.\n{% enddocs %}\n\n{% docs audit %}\nA very useful field with data containing information about changes to a user, e.g. timestamps when the user subscribed and unsubscribed.\n{% enddocs %}\n\n{% docs voting_plan_status %}\nThe indication of the user's plan to vote, e.g. voting, not_voting, cant_vote\n{% enddocs %}\n\n{% docs voting_plan_time_of_day %}\nThe time of day when the user plans to vote, e.g morning, afternoon, evening\n{% enddocs %}\n\n{% docs voting_plan_method_of_transport %}\nHow the user plans to get to their polling place. e.g. walk, drive\n{% enddocs %}\n\n{% docs voting_plan_attending_with %}\nWith Whom the user plans to go voting, e.g. family, friends, alone\n{% enddocs %}\n\n{% docs feature_flags %}\nJSON containing info on features like badges and refer-a-friend.\n{% enddocs %}\n\n{% docs dbt_updated_at %}\nDBT snapshot table data. The updated_at timestamp of the source record when this snapshot row was inserted.\n{% enddocs %}\n\n{% docs dbt_scd_id %}\nDBT snapshot table data. A unique key generated for each snapshotted record.\n{% enddocs %}\n\n{% docs dbt_valid_from %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this snapshot row was first inserted\n{% enddocs %}\n\n{% docs dbt_valid_to %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this row row became invalidated.\n{% enddocs %}\n\n{% docs google_id %}\nUser's Google ID obtained from login.\n{% enddocs %}\n\n{% docs causes %}\nCauses in which a user is interested. e.g. animal welfare, education, mental_health\n{% enddocs %}\n\n{% docs email_subscription_status %}\nEmail subscription status of the user\n{% enddocs %}\n\n{% docs role %}\nUser's role, e.g. user, staff\n{% enddocs %}\n\n{% docs cio_backfilled %}\nWhether this user's data was backfilled from CIO\n{% enddocs %}\n\n{% docs addr_source %}\nWhere the user submitted their address, e.g. sms, GDPR\n{% enddocs %}\n\n{% docs email_subscription_topics %}\nEmail subscription topics correspond to categories in CIO in which the user is interested. e.g. lifestyle, community, scholarship\n{% enddocs %}\n\n{% docs sms_paused %}\nWhether we've paused sending sms messages to the user.\n{% enddocs %}\n\n\n\n\n", "name": "avg_days_next_action_after_rb", "unique_id": "ds_dbt.avg_days_next_action_after_rb", "block_contents": "Calculated average days until next action after reportback"}, "ds_dbt.days_to_next_action_after_last_rb": {"root_path": "/Users/mrich/projects/quasar/quasar/dbt", "resource_type": "docs", "path": "schema.md", "original_file_path": "models/schema.md", "package_name": "ds_dbt", "file_contents": "\n{% docs click_id %}\nThis is a unique identifier for each click\n{% enddocs %}\n\n{% docs click_time %}\nTimestamp when user clicked.\n{% enddocs %}\n\n{% docs shortened %}\nShortened URL\n{% enddocs %}\n\n{% docs target_url %}\nURL where the user will be directed\n{% enddocs %}\n\n{% docs broadcast_id %}\nID of the broadcast that generated the shortened URL\n{% enddocs %}\n\n{% docs source %}\nSource of the URL (e.g. SMS, web), origin of the post (e.g. phoenix-web, phoenix-ashes, sms), or source where user was acquired. (e.g. sms, phoenix-next)\n{% enddocs %}\n\n{% docs interaction_type %}\nHow the user interacted with the link (e.g. preview, click)\n{% enddocs %}\n\n{% docs id %}\nUnique identifier for the post\n{% enddocs %}\n\n{% docs type %}\nType of post (e.g. photo)\n{% enddocs %}\n\n{% docs action %}\nPost action (e.g. DefendDreamers_Nov9_CongressCalls, GunViolence2018_Feb15_ParklandResponse)\n{% enddocs %}\n\n{% docs status %}\nPost status (e.g. accepted, rejected)\n{% enddocs %}\n\n{% docs quantity %}\nNumerical quantity of items specified in the call to action (e.g. 10, 200)\n{% enddocs %}\n\n{% docs source_bucket %}\nGrouping bucket for origin of the post (e.g. web, sms) \n{% enddocs %}\n\n{% docs created_at %}\nWhen the item was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs updated_at %}\nWhen the item was updated in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs text %}\nText of the post (e.g. \"Zoo animals and a super hero trying to help too!\") \n{% enddocs %}\n\n{% docs signup_id %}\nUnique identifier for the signup \n{% enddocs %}\n\n{% docs post_class %}\nClass of the signup (e.g. \"photo - default\", \"phone-call - DefendDreamers_Jan16_BothBodies\")\n{% enddocs %}\n\n{% docs is_accepted %}\nWhether the post has been accepted to be displayed to the public on the website\n{% enddocs %}\n\n{% docs action_id %}\nInternal identifier of the action \n{% enddocs %}\n\n{% docs location %}\nLocation where the action takes place (e.g. US-NY)\n{% enddocs %}\n\n{% docs postal_code %}\nPostal code where the action takes place\n{% enddocs %}\n\n{% docs is_reportback %}\nWhether the post is a reportback. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs civic_action %}\nWhether the post is a Civic Action. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs scholarship_entry %}\nWhether the post is a Scholarship Entry. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs why_participated %}\nWhy the user participated in this action. Entered by the user.\n{% enddocs %}\n\n{% docs details %}\nDetails about the post. Contains contentfulId and other information (e.g. {\"campaignContentfulId\":\"6ATBgGEQEeJoIcxs1qbwaC\"})\n{% enddocs %}\n\n{% docs email %}\nEmail address of the user.\n{% enddocs %}\n\n{% docs source_details %}\nDetails about the source of the item. This is sometimes represented as a JSON object, and for other tables like Turbovote its represented as a string. (e.g. \"{\"contentful_id\":\"3CTLlXfbwtz1FOMpl31SKV\",\"utm_source\":\"scholarship_listing\",\"utm_medium\":\"referral\",\"utm_campaign\":\"fastweb_2019_08\"}\", newsletter_456)\n{% enddocs %}\n\n{% docs campaign_id %}\nThis is a unique identifier for the campaign\n{% enddocs %}\n\n{% docs campaign_run_id %}\nUnique identifier for the campaign run\n{% enddocs %}\n\n{% docs campaign_name %}\nName of the campaign\n{% enddocs %}\n\n{% docs campaign_cause %}\nCampaign cause (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_run_start_date %}\nStart date of the campaign run\n{% enddocs %}\n\n{% docs campaign_run_end_date %}\nEnd date of the campaign run\n{% enddocs %}\n\n{% docs campaign_created_date %}\nWhen the campaign was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs campaign_node_id %}\nInternal unique node id for the campaign\n{% enddocs %}\n\n{% docs campaign_node_id_title %}\nCampaign title\n{% enddocs %}\n\n{% docs campaign_run_id_title %}\nTitle of the campaign run\n{% enddocs %}\n\n{% docs campaign_action_type %}\nCampaign action type (eg. Make Something, Share Something)\n{% enddocs %}\n\n{% docs campaign_cause_type %}\nCampaign cause type (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_noun %}\nNoun applicable to the user's action\n{% enddocs %}\n\n{% docs campaign_verb %}\nVerb describing the action the user should take\n{% enddocs %}\n\n{% docs campaign_cta %}\nCampaign's call to action\n{% enddocs %}\n\n{% docs campaign_language %}\n\"Language in which the campaign is available\"\n{% enddocs %}\n\n{% docs agent_id %}\nIf set, the content type of the picture the member is sending us. Exp. image/png.\n{% enddocs %}\n\n{% docs attachment_content_type %}\nIf set, the handle of the Front agent this outbound support message is from.\n{% enddocs %}\n\n{% docs topic %}\nHolds a reference to the **last** campaign topic the member's conversation was in. This is useful to allow members to talk to Gambit and get quick responses (through Rivescript), without Gambit completely forgetting what state the member's interaction with a campaign topic was in.\n{% enddocs %}\n\n{% docs action_serial_id %}\nSerial id for the user's action. Depends on the source of the action. May be the bertly click id, sms message id, etc.\n{% enddocs %}\n\n{% docs channel %}\nChannel for the user's action. Depends on the source of the action. (e.g. web, sms)\n{% enddocs %}\n\n{% docs first_action_month %}\nMonth during which the user took their first action. \n{% enddocs %}\n\n{% docs event_id %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs event_source %}\nApplication source for event (eg. Phoenix, Northstar)\n{% enddocs %}\n\n{% docs event_datetime %}\nWhen the event occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs event_name %}\nName of the event (eg. northstar_submitted_register, https://docs.google.com/spreadsheets/d/1lm-fGrIm85nUTxSojqyCt_Ehmm1zEbViFhKpxcJiz1A/edit#gid=406441516)\n{% enddocs %}\n\n{% docs event_type %}\nType of event (pv = 'Page View', se = 'Structured Event')\n{% enddocs %}\n\n{% docs host %}\nURL host where event occurred (eg. www.dosomething.org or identity.dosomething.org)\n{% enddocs %}\n\n{% docs path %}\nURL path event occurred at (eg. /login or /us/campaigns/huddle-for-heroes)\n{% enddocs %}\n\n{% docs query_parameters %}\nOptional query parameters for the request (eg. query=huddle)\n{% enddocs %}\n\n{% docs se_category %}\nCategory of event (eg. focused_field, authentication) - Custom structured event\n{% enddocs %}\n\n{% docs se_action %}\nAction performed / event name (eg. form_submitted, action_failed) - Custom structured event\n{% enddocs %}\n\n{% docs se_label %}\nThe object of the action (eg. first_name, register, voter_reg_status) - Custom structured event\n{% enddocs %}\n\n{% docs session_id %}\nUnique identifier of the user's session\n{% enddocs %}\n\n{% docs session_counter %}\nHow many sessions a user has started\n{% enddocs %}\n\n{% docs browser_size %}\nWhich type of browser a user is using (eg. Mobile, Desktop)\n{% enddocs %}\n\n{% docs northstar_id %}\nThe Northstar ID of the user who generated the event\n{% enddocs %}\n\n{% docs device_id %}\nID of the device used\n{% enddocs %}\n\n{% docs referrer_host %}\nURL host of the referring site (eg. google.com)\n{% enddocs %}\n\n{% docs referrer_path %}\nURL path from referring site (eg. /10-stats-on-teen-drug-and-alcohol-use/)\n{% enddocs %}\n\n{% docs referrer_source %}\nReferrer source name (eg. Google, Facebook)\n{% enddocs %}\n\n{% docs utm_source %}\nTracks where the traffic is coming from. (eg. scholarship_listing, Facebook)\n{% enddocs %}\n\n{% docs utm_medium %}\nHow the traffic got to the platform (eg. referral, CPC)\n{% enddocs %}\n\n{% docs utm_campaign %}\nTracks which campaign the traffic was generated by. Shows up in Google Analytics as Campaign Name (eg. editorial_newsletter)\n{% enddocs %}\n\n{% docs url %}\nURL of campaign (eg. https://dosome.click/nyn5m7)\n{% enddocs %}\n\n{% docs modal_type %}\nNULL or SURVEY_MODAL\n{% enddocs %}\n\n{% docs landing_datetime %}\nWhen the session started in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs ending_datetime %}\nWhen the session ended in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs session_duration_seconds %}\nSession duration in seconds\n{% enddocs %}\n\n{% docs num_pages_views %}\nNumber of pages viewed in session\n{% enddocs %}\n\n{% docs landing_page %}\nFirst page the user viewed in the session (eg. /us/facts/11-facts-about-bp-oil-spill)\n{% enddocs %}\n\n{% docs exit_page %}\n\"Which page the user ended or exited their session from (eg. /us/campaigns/green-your-getaway)\"\n{% enddocs %}\n\n{% docs days_since_last_session %}\n\"Days since their last session.\"\n{% enddocs %}\n\n{% docs post_type %}\nType of post, (e.g. photo, voter-reg)\n{% enddocs %}\n\n{% docs noun %}\nNoun that corresponds to the item in the call to action that was delivered. (e.g. drawings, tweets)\n{% enddocs %}\n\n{% docs verb %}\nVerb corresponding to the action the user took. (e.g. shared, sent, taken)\n{% enddocs %}\n\n{% docs deleted_at %}\nDate time in UTC when a user deleted their post.\n{% enddocs %}\n\n{% docs _fivetran_deleted %}\nMarks rows that were deleted in the source table\n{% enddocs %}\n\n{% docs _fivetran_synced %}\n(UTC timestamp) keeps track of when each row was last successfully synced\n{% enddocs %}\n\n{% docs reportback %}\nWhether the post is a reportback \n{% enddocs %}\n\n{% docs active %}\nWhether the user is active \n{% enddocs %}\n\n{% docs anonymous %}\nWhether the user is anonymous when making the post \n{% enddocs %}\n\n{% docs callpower_campaign_id %}\nUnique ID corresponding to the Callpower campaign. Callpower allows users to record messages for their representatives.\n{% enddocs %}\n\n{% docs quiz %}\nWhether the post is a quiz \n{% enddocs %}\n\n{% docs action_type %}\nType of action the user took. (e.g. share-something, donate-something)\n{% enddocs %}\n\n{% docs online %}\nWhether the action is a online as opposed to IRL.\n{% enddocs %}\n\n{% docs time_commitment %}\nEstimated time required to do the action (e.g. 3.0+, <0.5)\n{% enddocs %}\n\n{% docs num_signups %}\nQuantity of campaign signups\n{% enddocs %}\n\n{% docs most_recent_signup %}\nTimestamp of the most recent signup in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs num_rbs %}\nQuantity of reportbacks for the user\n{% enddocs %}\n\n{% docs total_quantity %}\nTotal quantity of items in reportbacks\n{% enddocs %}\n\n{% docs most_recent_rb %}\nWhen the most recent reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs first_rb %}\nWhen the first reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs avg_time_betw_rbs %}\nCalculated average time between reportbacks.\n{% enddocs %}\n\n{% docs avg_days_next_action_after_rb %}\nCalculated average days until next action after reportback\n{% enddocs %}\n\n{% docs days_to_next_action_after_last_rb %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs most_recent_mam_action %}\nMost recent monthly active member qualifying action in UTC (eg. 2018-01-01 12:00:00).\n{% enddocs %}\n\n{% docs most_recent_email_open %}\nMost recent email open in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs most_recent_all_actions %}\nMost recent timestamp of any action in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs last_action_is_rb %}\nWhether the last action the user took was a reportback\n{% enddocs %}\n\n{% docs days_since_last_action %}\nDays since the user's last action\n{% enddocs %}\n\n{% docs time_to_first_rb %}\nHow much time after registering until the user's first reportback\n{% enddocs %}\n\n{% docs sms_unsubscribed_at %}\nTimestamp of when user unsubscribed from SMS messaging\n{% enddocs %}\n\n{% docs user_unsubscribed_at %}\nTimestamp of when user unsubscribed from email or sms\n{% enddocs %}\n\n{% docs voter_reg_acquisition %}\nWhether the user was an acquisition through voter registration efforts. \n{% enddocs %}\n\n{% docs last_logged_in %}\nDate time in UTC when user last logged in to Northstar\n{% enddocs %}\n\n{% docs last_accessed %}\nDate time in UTC when user last access the website\n{% enddocs %}\n\n{% docs last_messaged_at %}\nDate time in UTC when user was last sent a message via SMS or email\n{% enddocs %}\n\n{% docs facebook_id %}\nUser's facebook id\n{% enddocs %}\n\n{% docs mobile %}\nUsers's mobile phone number\n{% enddocs %}\n\n{% docs birthdate %}\nUser's birthdate\n{% enddocs %}\n\n{% docs first_name %}\nUser's first name\n{% enddocs %}\n\n{% docs last_name %}\nUser's last name\n{% enddocs %}\n\n{% docs voter_registration_status %}\nUser's registration status. (e.g. registration_complete, confirmed, uncertain) \n{% enddocs %}\n\n{% docs finish_with_state %}\nIf the registrant was eligible to use and passed through to complete their registration with their state\u2019s OVR system, it will be indicated in this field (direct quote from Rock-The-Vote documentation). Yes/No value in field.\n{% enddocs %}\n\n{% docs reportback_volume %}\nThis field returns 1 if non voter-reg action, since campaigns team only counts those a 1 reportback. If voter-reg action, we want to count quantity of post as number of registered voters.\n{% enddocs %}\n\n{% docs address_street_1 %}\nFirst line of user's street address\n{% enddocs %}\n\n{% docs address_street_2 %}\nSecond line of user's street address\n{% enddocs %}\n\n{% docs city %}\nUser's city\n{% enddocs %}\n\n{% docs state %}\nUser's state\n{% enddocs %}\n\n{% docs country %}\nUser's country\n{% enddocs %}\n\n{% docs language %}\nUser's language\n{% enddocs %}\n\n{% docs cio_status %}\nStatus of user from CIO. (e.g. customer_subscribed, customer_unsubscribed)\n{% enddocs %}\n\n{% docs cio_status_timestamp %}\nTimestamp when users's status was updated.\n{% enddocs %}\n\n{% docs sms_status %}\nCurrent SMS status. (e.g. undeliverable, unknown)\n{% enddocs %}\n\n{% docs source_detail %}\nDetails of the origin of the user. (e.g. tell_a_friend, other, opt_in_path/197981)\n{% enddocs %}\n\n{% docs badges %}\nWhether the user has any badges. \n{% enddocs %}\n\n{% docs refer_friends %}\nWhether the user is a part of the refer a friend campaign. \n{% enddocs %}\n\n{% docs subscribed_member %}\nWhether the user is subscribed. \n{% enddocs %}\n\n{% docs last_updated_at %}\nTimestamp when users's was updated.\n{% enddocs %}\n\n{% docs school_id %}\nUnique identifier for the user's school. This info comes from the school finder.\n{% enddocs %}\n\n{% docs newsletter_topic %}\nNewsletter topic. (e.g. community, lifestyle)\n{% enddocs %}\n\n{% docs user_agent %}\nFull user agent string for a user's browser (e.g. \"Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:24.0) Gecko/20100101 Firefox/24.0\")\n{% enddocs %}\n\n{% docs drupal_id %}\nOld Drupal user ID\n{% enddocs %}\n\n{% docs campaigns %}\nCampaigns a user is signed up for.\n{% enddocs %}\n\n{% docs audit %}\nA very useful field with data containing information about changes to a user, e.g. timestamps when the user subscribed and unsubscribed.\n{% enddocs %}\n\n{% docs voting_plan_status %}\nThe indication of the user's plan to vote, e.g. voting, not_voting, cant_vote\n{% enddocs %}\n\n{% docs voting_plan_time_of_day %}\nThe time of day when the user plans to vote, e.g morning, afternoon, evening\n{% enddocs %}\n\n{% docs voting_plan_method_of_transport %}\nHow the user plans to get to their polling place. e.g. walk, drive\n{% enddocs %}\n\n{% docs voting_plan_attending_with %}\nWith Whom the user plans to go voting, e.g. family, friends, alone\n{% enddocs %}\n\n{% docs feature_flags %}\nJSON containing info on features like badges and refer-a-friend.\n{% enddocs %}\n\n{% docs dbt_updated_at %}\nDBT snapshot table data. The updated_at timestamp of the source record when this snapshot row was inserted.\n{% enddocs %}\n\n{% docs dbt_scd_id %}\nDBT snapshot table data. A unique key generated for each snapshotted record.\n{% enddocs %}\n\n{% docs dbt_valid_from %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this snapshot row was first inserted\n{% enddocs %}\n\n{% docs dbt_valid_to %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this row row became invalidated.\n{% enddocs %}\n\n{% docs google_id %}\nUser's Google ID obtained from login.\n{% enddocs %}\n\n{% docs causes %}\nCauses in which a user is interested. e.g. animal welfare, education, mental_health\n{% enddocs %}\n\n{% docs email_subscription_status %}\nEmail subscription status of the user\n{% enddocs %}\n\n{% docs role %}\nUser's role, e.g. user, staff\n{% enddocs %}\n\n{% docs cio_backfilled %}\nWhether this user's data was backfilled from CIO\n{% enddocs %}\n\n{% docs addr_source %}\nWhere the user submitted their address, e.g. sms, GDPR\n{% enddocs %}\n\n{% docs email_subscription_topics %}\nEmail subscription topics correspond to categories in CIO in which the user is interested. e.g. lifestyle, community, scholarship\n{% enddocs %}\n\n{% docs sms_paused %}\nWhether we've paused sending sms messages to the user.\n{% enddocs %}\n\n\n\n\n", "name": "days_to_next_action_after_last_rb", "unique_id": "ds_dbt.days_to_next_action_after_last_rb", "block_contents": "This is a unique identifier for each event"}, "ds_dbt.most_recent_mam_action": {"root_path": "/Users/mrich/projects/quasar/quasar/dbt", "resource_type": "docs", "path": "schema.md", "original_file_path": "models/schema.md", "package_name": "ds_dbt", "file_contents": "\n{% docs click_id %}\nThis is a unique identifier for each click\n{% enddocs %}\n\n{% docs click_time %}\nTimestamp when user clicked.\n{% enddocs %}\n\n{% docs shortened %}\nShortened URL\n{% enddocs %}\n\n{% docs target_url %}\nURL where the user will be directed\n{% enddocs %}\n\n{% docs broadcast_id %}\nID of the broadcast that generated the shortened URL\n{% enddocs %}\n\n{% docs source %}\nSource of the URL (e.g. SMS, web), origin of the post (e.g. phoenix-web, phoenix-ashes, sms), or source where user was acquired. (e.g. sms, phoenix-next)\n{% enddocs %}\n\n{% docs interaction_type %}\nHow the user interacted with the link (e.g. preview, click)\n{% enddocs %}\n\n{% docs id %}\nUnique identifier for the post\n{% enddocs %}\n\n{% docs type %}\nType of post (e.g. photo)\n{% enddocs %}\n\n{% docs action %}\nPost action (e.g. DefendDreamers_Nov9_CongressCalls, GunViolence2018_Feb15_ParklandResponse)\n{% enddocs %}\n\n{% docs status %}\nPost status (e.g. accepted, rejected)\n{% enddocs %}\n\n{% docs quantity %}\nNumerical quantity of items specified in the call to action (e.g. 10, 200)\n{% enddocs %}\n\n{% docs source_bucket %}\nGrouping bucket for origin of the post (e.g. web, sms) \n{% enddocs %}\n\n{% docs created_at %}\nWhen the item was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs updated_at %}\nWhen the item was updated in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs text %}\nText of the post (e.g. \"Zoo animals and a super hero trying to help too!\") \n{% enddocs %}\n\n{% docs signup_id %}\nUnique identifier for the signup \n{% enddocs %}\n\n{% docs post_class %}\nClass of the signup (e.g. \"photo - default\", \"phone-call - DefendDreamers_Jan16_BothBodies\")\n{% enddocs %}\n\n{% docs is_accepted %}\nWhether the post has been accepted to be displayed to the public on the website\n{% enddocs %}\n\n{% docs action_id %}\nInternal identifier of the action \n{% enddocs %}\n\n{% docs location %}\nLocation where the action takes place (e.g. US-NY)\n{% enddocs %}\n\n{% docs postal_code %}\nPostal code where the action takes place\n{% enddocs %}\n\n{% docs is_reportback %}\nWhether the post is a reportback. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs civic_action %}\nWhether the post is a Civic Action. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs scholarship_entry %}\nWhether the post is a Scholarship Entry. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs why_participated %}\nWhy the user participated in this action. Entered by the user.\n{% enddocs %}\n\n{% docs details %}\nDetails about the post. Contains contentfulId and other information (e.g. {\"campaignContentfulId\":\"6ATBgGEQEeJoIcxs1qbwaC\"})\n{% enddocs %}\n\n{% docs email %}\nEmail address of the user.\n{% enddocs %}\n\n{% docs source_details %}\nDetails about the source of the item. This is sometimes represented as a JSON object, and for other tables like Turbovote its represented as a string. (e.g. \"{\"contentful_id\":\"3CTLlXfbwtz1FOMpl31SKV\",\"utm_source\":\"scholarship_listing\",\"utm_medium\":\"referral\",\"utm_campaign\":\"fastweb_2019_08\"}\", newsletter_456)\n{% enddocs %}\n\n{% docs campaign_id %}\nThis is a unique identifier for the campaign\n{% enddocs %}\n\n{% docs campaign_run_id %}\nUnique identifier for the campaign run\n{% enddocs %}\n\n{% docs campaign_name %}\nName of the campaign\n{% enddocs %}\n\n{% docs campaign_cause %}\nCampaign cause (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_run_start_date %}\nStart date of the campaign run\n{% enddocs %}\n\n{% docs campaign_run_end_date %}\nEnd date of the campaign run\n{% enddocs %}\n\n{% docs campaign_created_date %}\nWhen the campaign was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs campaign_node_id %}\nInternal unique node id for the campaign\n{% enddocs %}\n\n{% docs campaign_node_id_title %}\nCampaign title\n{% enddocs %}\n\n{% docs campaign_run_id_title %}\nTitle of the campaign run\n{% enddocs %}\n\n{% docs campaign_action_type %}\nCampaign action type (eg. Make Something, Share Something)\n{% enddocs %}\n\n{% docs campaign_cause_type %}\nCampaign cause type (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_noun %}\nNoun applicable to the user's action\n{% enddocs %}\n\n{% docs campaign_verb %}\nVerb describing the action the user should take\n{% enddocs %}\n\n{% docs campaign_cta %}\nCampaign's call to action\n{% enddocs %}\n\n{% docs campaign_language %}\n\"Language in which the campaign is available\"\n{% enddocs %}\n\n{% docs agent_id %}\nIf set, the content type of the picture the member is sending us. Exp. image/png.\n{% enddocs %}\n\n{% docs attachment_content_type %}\nIf set, the handle of the Front agent this outbound support message is from.\n{% enddocs %}\n\n{% docs topic %}\nHolds a reference to the **last** campaign topic the member's conversation was in. This is useful to allow members to talk to Gambit and get quick responses (through Rivescript), without Gambit completely forgetting what state the member's interaction with a campaign topic was in.\n{% enddocs %}\n\n{% docs action_serial_id %}\nSerial id for the user's action. Depends on the source of the action. May be the bertly click id, sms message id, etc.\n{% enddocs %}\n\n{% docs channel %}\nChannel for the user's action. Depends on the source of the action. (e.g. web, sms)\n{% enddocs %}\n\n{% docs first_action_month %}\nMonth during which the user took their first action. \n{% enddocs %}\n\n{% docs event_id %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs event_source %}\nApplication source for event (eg. Phoenix, Northstar)\n{% enddocs %}\n\n{% docs event_datetime %}\nWhen the event occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs event_name %}\nName of the event (eg. northstar_submitted_register, https://docs.google.com/spreadsheets/d/1lm-fGrIm85nUTxSojqyCt_Ehmm1zEbViFhKpxcJiz1A/edit#gid=406441516)\n{% enddocs %}\n\n{% docs event_type %}\nType of event (pv = 'Page View', se = 'Structured Event')\n{% enddocs %}\n\n{% docs host %}\nURL host where event occurred (eg. www.dosomething.org or identity.dosomething.org)\n{% enddocs %}\n\n{% docs path %}\nURL path event occurred at (eg. /login or /us/campaigns/huddle-for-heroes)\n{% enddocs %}\n\n{% docs query_parameters %}\nOptional query parameters for the request (eg. query=huddle)\n{% enddocs %}\n\n{% docs se_category %}\nCategory of event (eg. focused_field, authentication) - Custom structured event\n{% enddocs %}\n\n{% docs se_action %}\nAction performed / event name (eg. form_submitted, action_failed) - Custom structured event\n{% enddocs %}\n\n{% docs se_label %}\nThe object of the action (eg. first_name, register, voter_reg_status) - Custom structured event\n{% enddocs %}\n\n{% docs session_id %}\nUnique identifier of the user's session\n{% enddocs %}\n\n{% docs session_counter %}\nHow many sessions a user has started\n{% enddocs %}\n\n{% docs browser_size %}\nWhich type of browser a user is using (eg. Mobile, Desktop)\n{% enddocs %}\n\n{% docs northstar_id %}\nThe Northstar ID of the user who generated the event\n{% enddocs %}\n\n{% docs device_id %}\nID of the device used\n{% enddocs %}\n\n{% docs referrer_host %}\nURL host of the referring site (eg. google.com)\n{% enddocs %}\n\n{% docs referrer_path %}\nURL path from referring site (eg. /10-stats-on-teen-drug-and-alcohol-use/)\n{% enddocs %}\n\n{% docs referrer_source %}\nReferrer source name (eg. Google, Facebook)\n{% enddocs %}\n\n{% docs utm_source %}\nTracks where the traffic is coming from. (eg. scholarship_listing, Facebook)\n{% enddocs %}\n\n{% docs utm_medium %}\nHow the traffic got to the platform (eg. referral, CPC)\n{% enddocs %}\n\n{% docs utm_campaign %}\nTracks which campaign the traffic was generated by. Shows up in Google Analytics as Campaign Name (eg. editorial_newsletter)\n{% enddocs %}\n\n{% docs url %}\nURL of campaign (eg. https://dosome.click/nyn5m7)\n{% enddocs %}\n\n{% docs modal_type %}\nNULL or SURVEY_MODAL\n{% enddocs %}\n\n{% docs landing_datetime %}\nWhen the session started in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs ending_datetime %}\nWhen the session ended in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs session_duration_seconds %}\nSession duration in seconds\n{% enddocs %}\n\n{% docs num_pages_views %}\nNumber of pages viewed in session\n{% enddocs %}\n\n{% docs landing_page %}\nFirst page the user viewed in the session (eg. /us/facts/11-facts-about-bp-oil-spill)\n{% enddocs %}\n\n{% docs exit_page %}\n\"Which page the user ended or exited their session from (eg. /us/campaigns/green-your-getaway)\"\n{% enddocs %}\n\n{% docs days_since_last_session %}\n\"Days since their last session.\"\n{% enddocs %}\n\n{% docs post_type %}\nType of post, (e.g. photo, voter-reg)\n{% enddocs %}\n\n{% docs noun %}\nNoun that corresponds to the item in the call to action that was delivered. (e.g. drawings, tweets)\n{% enddocs %}\n\n{% docs verb %}\nVerb corresponding to the action the user took. (e.g. shared, sent, taken)\n{% enddocs %}\n\n{% docs deleted_at %}\nDate time in UTC when a user deleted their post.\n{% enddocs %}\n\n{% docs _fivetran_deleted %}\nMarks rows that were deleted in the source table\n{% enddocs %}\n\n{% docs _fivetran_synced %}\n(UTC timestamp) keeps track of when each row was last successfully synced\n{% enddocs %}\n\n{% docs reportback %}\nWhether the post is a reportback \n{% enddocs %}\n\n{% docs active %}\nWhether the user is active \n{% enddocs %}\n\n{% docs anonymous %}\nWhether the user is anonymous when making the post \n{% enddocs %}\n\n{% docs callpower_campaign_id %}\nUnique ID corresponding to the Callpower campaign. Callpower allows users to record messages for their representatives.\n{% enddocs %}\n\n{% docs quiz %}\nWhether the post is a quiz \n{% enddocs %}\n\n{% docs action_type %}\nType of action the user took. (e.g. share-something, donate-something)\n{% enddocs %}\n\n{% docs online %}\nWhether the action is a online as opposed to IRL.\n{% enddocs %}\n\n{% docs time_commitment %}\nEstimated time required to do the action (e.g. 3.0+, <0.5)\n{% enddocs %}\n\n{% docs num_signups %}\nQuantity of campaign signups\n{% enddocs %}\n\n{% docs most_recent_signup %}\nTimestamp of the most recent signup in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs num_rbs %}\nQuantity of reportbacks for the user\n{% enddocs %}\n\n{% docs total_quantity %}\nTotal quantity of items in reportbacks\n{% enddocs %}\n\n{% docs most_recent_rb %}\nWhen the most recent reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs first_rb %}\nWhen the first reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs avg_time_betw_rbs %}\nCalculated average time between reportbacks.\n{% enddocs %}\n\n{% docs avg_days_next_action_after_rb %}\nCalculated average days until next action after reportback\n{% enddocs %}\n\n{% docs days_to_next_action_after_last_rb %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs most_recent_mam_action %}\nMost recent monthly active member qualifying action in UTC (eg. 2018-01-01 12:00:00).\n{% enddocs %}\n\n{% docs most_recent_email_open %}\nMost recent email open in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs most_recent_all_actions %}\nMost recent timestamp of any action in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs last_action_is_rb %}\nWhether the last action the user took was a reportback\n{% enddocs %}\n\n{% docs days_since_last_action %}\nDays since the user's last action\n{% enddocs %}\n\n{% docs time_to_first_rb %}\nHow much time after registering until the user's first reportback\n{% enddocs %}\n\n{% docs sms_unsubscribed_at %}\nTimestamp of when user unsubscribed from SMS messaging\n{% enddocs %}\n\n{% docs user_unsubscribed_at %}\nTimestamp of when user unsubscribed from email or sms\n{% enddocs %}\n\n{% docs voter_reg_acquisition %}\nWhether the user was an acquisition through voter registration efforts. \n{% enddocs %}\n\n{% docs last_logged_in %}\nDate time in UTC when user last logged in to Northstar\n{% enddocs %}\n\n{% docs last_accessed %}\nDate time in UTC when user last access the website\n{% enddocs %}\n\n{% docs last_messaged_at %}\nDate time in UTC when user was last sent a message via SMS or email\n{% enddocs %}\n\n{% docs facebook_id %}\nUser's facebook id\n{% enddocs %}\n\n{% docs mobile %}\nUsers's mobile phone number\n{% enddocs %}\n\n{% docs birthdate %}\nUser's birthdate\n{% enddocs %}\n\n{% docs first_name %}\nUser's first name\n{% enddocs %}\n\n{% docs last_name %}\nUser's last name\n{% enddocs %}\n\n{% docs voter_registration_status %}\nUser's registration status. (e.g. registration_complete, confirmed, uncertain) \n{% enddocs %}\n\n{% docs finish_with_state %}\nIf the registrant was eligible to use and passed through to complete their registration with their state\u2019s OVR system, it will be indicated in this field (direct quote from Rock-The-Vote documentation). Yes/No value in field.\n{% enddocs %}\n\n{% docs reportback_volume %}\nThis field returns 1 if non voter-reg action, since campaigns team only counts those a 1 reportback. If voter-reg action, we want to count quantity of post as number of registered voters.\n{% enddocs %}\n\n{% docs address_street_1 %}\nFirst line of user's street address\n{% enddocs %}\n\n{% docs address_street_2 %}\nSecond line of user's street address\n{% enddocs %}\n\n{% docs city %}\nUser's city\n{% enddocs %}\n\n{% docs state %}\nUser's state\n{% enddocs %}\n\n{% docs country %}\nUser's country\n{% enddocs %}\n\n{% docs language %}\nUser's language\n{% enddocs %}\n\n{% docs cio_status %}\nStatus of user from CIO. (e.g. customer_subscribed, customer_unsubscribed)\n{% enddocs %}\n\n{% docs cio_status_timestamp %}\nTimestamp when users's status was updated.\n{% enddocs %}\n\n{% docs sms_status %}\nCurrent SMS status. (e.g. undeliverable, unknown)\n{% enddocs %}\n\n{% docs source_detail %}\nDetails of the origin of the user. (e.g. tell_a_friend, other, opt_in_path/197981)\n{% enddocs %}\n\n{% docs badges %}\nWhether the user has any badges. \n{% enddocs %}\n\n{% docs refer_friends %}\nWhether the user is a part of the refer a friend campaign. \n{% enddocs %}\n\n{% docs subscribed_member %}\nWhether the user is subscribed. \n{% enddocs %}\n\n{% docs last_updated_at %}\nTimestamp when users's was updated.\n{% enddocs %}\n\n{% docs school_id %}\nUnique identifier for the user's school. This info comes from the school finder.\n{% enddocs %}\n\n{% docs newsletter_topic %}\nNewsletter topic. (e.g. community, lifestyle)\n{% enddocs %}\n\n{% docs user_agent %}\nFull user agent string for a user's browser (e.g. \"Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:24.0) Gecko/20100101 Firefox/24.0\")\n{% enddocs %}\n\n{% docs drupal_id %}\nOld Drupal user ID\n{% enddocs %}\n\n{% docs campaigns %}\nCampaigns a user is signed up for.\n{% enddocs %}\n\n{% docs audit %}\nA very useful field with data containing information about changes to a user, e.g. timestamps when the user subscribed and unsubscribed.\n{% enddocs %}\n\n{% docs voting_plan_status %}\nThe indication of the user's plan to vote, e.g. voting, not_voting, cant_vote\n{% enddocs %}\n\n{% docs voting_plan_time_of_day %}\nThe time of day when the user plans to vote, e.g morning, afternoon, evening\n{% enddocs %}\n\n{% docs voting_plan_method_of_transport %}\nHow the user plans to get to their polling place. e.g. walk, drive\n{% enddocs %}\n\n{% docs voting_plan_attending_with %}\nWith Whom the user plans to go voting, e.g. family, friends, alone\n{% enddocs %}\n\n{% docs feature_flags %}\nJSON containing info on features like badges and refer-a-friend.\n{% enddocs %}\n\n{% docs dbt_updated_at %}\nDBT snapshot table data. The updated_at timestamp of the source record when this snapshot row was inserted.\n{% enddocs %}\n\n{% docs dbt_scd_id %}\nDBT snapshot table data. A unique key generated for each snapshotted record.\n{% enddocs %}\n\n{% docs dbt_valid_from %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this snapshot row was first inserted\n{% enddocs %}\n\n{% docs dbt_valid_to %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this row row became invalidated.\n{% enddocs %}\n\n{% docs google_id %}\nUser's Google ID obtained from login.\n{% enddocs %}\n\n{% docs causes %}\nCauses in which a user is interested. e.g. animal welfare, education, mental_health\n{% enddocs %}\n\n{% docs email_subscription_status %}\nEmail subscription status of the user\n{% enddocs %}\n\n{% docs role %}\nUser's role, e.g. user, staff\n{% enddocs %}\n\n{% docs cio_backfilled %}\nWhether this user's data was backfilled from CIO\n{% enddocs %}\n\n{% docs addr_source %}\nWhere the user submitted their address, e.g. sms, GDPR\n{% enddocs %}\n\n{% docs email_subscription_topics %}\nEmail subscription topics correspond to categories in CIO in which the user is interested. e.g. lifestyle, community, scholarship\n{% enddocs %}\n\n{% docs sms_paused %}\nWhether we've paused sending sms messages to the user.\n{% enddocs %}\n\n\n\n\n", "name": "most_recent_mam_action", "unique_id": "ds_dbt.most_recent_mam_action", "block_contents": "Most recent monthly active member qualifying action in UTC (eg. 2018-01-01 12:00:00)."}, "ds_dbt.most_recent_email_open": {"root_path": "/Users/mrich/projects/quasar/quasar/dbt", "resource_type": "docs", "path": "schema.md", "original_file_path": "models/schema.md", "package_name": "ds_dbt", "file_contents": "\n{% docs click_id %}\nThis is a unique identifier for each click\n{% enddocs %}\n\n{% docs click_time %}\nTimestamp when user clicked.\n{% enddocs %}\n\n{% docs shortened %}\nShortened URL\n{% enddocs %}\n\n{% docs target_url %}\nURL where the user will be directed\n{% enddocs %}\n\n{% docs broadcast_id %}\nID of the broadcast that generated the shortened URL\n{% enddocs %}\n\n{% docs source %}\nSource of the URL (e.g. SMS, web), origin of the post (e.g. phoenix-web, phoenix-ashes, sms), or source where user was acquired. (e.g. sms, phoenix-next)\n{% enddocs %}\n\n{% docs interaction_type %}\nHow the user interacted with the link (e.g. preview, click)\n{% enddocs %}\n\n{% docs id %}\nUnique identifier for the post\n{% enddocs %}\n\n{% docs type %}\nType of post (e.g. photo)\n{% enddocs %}\n\n{% docs action %}\nPost action (e.g. DefendDreamers_Nov9_CongressCalls, GunViolence2018_Feb15_ParklandResponse)\n{% enddocs %}\n\n{% docs status %}\nPost status (e.g. accepted, rejected)\n{% enddocs %}\n\n{% docs quantity %}\nNumerical quantity of items specified in the call to action (e.g. 10, 200)\n{% enddocs %}\n\n{% docs source_bucket %}\nGrouping bucket for origin of the post (e.g. web, sms) \n{% enddocs %}\n\n{% docs created_at %}\nWhen the item was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs updated_at %}\nWhen the item was updated in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs text %}\nText of the post (e.g. \"Zoo animals and a super hero trying to help too!\") \n{% enddocs %}\n\n{% docs signup_id %}\nUnique identifier for the signup \n{% enddocs %}\n\n{% docs post_class %}\nClass of the signup (e.g. \"photo - default\", \"phone-call - DefendDreamers_Jan16_BothBodies\")\n{% enddocs %}\n\n{% docs is_accepted %}\nWhether the post has been accepted to be displayed to the public on the website\n{% enddocs %}\n\n{% docs action_id %}\nInternal identifier of the action \n{% enddocs %}\n\n{% docs location %}\nLocation where the action takes place (e.g. US-NY)\n{% enddocs %}\n\n{% docs postal_code %}\nPostal code where the action takes place\n{% enddocs %}\n\n{% docs is_reportback %}\nWhether the post is a reportback. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs civic_action %}\nWhether the post is a Civic Action. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs scholarship_entry %}\nWhether the post is a Scholarship Entry. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs why_participated %}\nWhy the user participated in this action. Entered by the user.\n{% enddocs %}\n\n{% docs details %}\nDetails about the post. Contains contentfulId and other information (e.g. {\"campaignContentfulId\":\"6ATBgGEQEeJoIcxs1qbwaC\"})\n{% enddocs %}\n\n{% docs email %}\nEmail address of the user.\n{% enddocs %}\n\n{% docs source_details %}\nDetails about the source of the item. This is sometimes represented as a JSON object, and for other tables like Turbovote its represented as a string. (e.g. \"{\"contentful_id\":\"3CTLlXfbwtz1FOMpl31SKV\",\"utm_source\":\"scholarship_listing\",\"utm_medium\":\"referral\",\"utm_campaign\":\"fastweb_2019_08\"}\", newsletter_456)\n{% enddocs %}\n\n{% docs campaign_id %}\nThis is a unique identifier for the campaign\n{% enddocs %}\n\n{% docs campaign_run_id %}\nUnique identifier for the campaign run\n{% enddocs %}\n\n{% docs campaign_name %}\nName of the campaign\n{% enddocs %}\n\n{% docs campaign_cause %}\nCampaign cause (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_run_start_date %}\nStart date of the campaign run\n{% enddocs %}\n\n{% docs campaign_run_end_date %}\nEnd date of the campaign run\n{% enddocs %}\n\n{% docs campaign_created_date %}\nWhen the campaign was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs campaign_node_id %}\nInternal unique node id for the campaign\n{% enddocs %}\n\n{% docs campaign_node_id_title %}\nCampaign title\n{% enddocs %}\n\n{% docs campaign_run_id_title %}\nTitle of the campaign run\n{% enddocs %}\n\n{% docs campaign_action_type %}\nCampaign action type (eg. Make Something, Share Something)\n{% enddocs %}\n\n{% docs campaign_cause_type %}\nCampaign cause type (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_noun %}\nNoun applicable to the user's action\n{% enddocs %}\n\n{% docs campaign_verb %}\nVerb describing the action the user should take\n{% enddocs %}\n\n{% docs campaign_cta %}\nCampaign's call to action\n{% enddocs %}\n\n{% docs campaign_language %}\n\"Language in which the campaign is available\"\n{% enddocs %}\n\n{% docs agent_id %}\nIf set, the content type of the picture the member is sending us. Exp. image/png.\n{% enddocs %}\n\n{% docs attachment_content_type %}\nIf set, the handle of the Front agent this outbound support message is from.\n{% enddocs %}\n\n{% docs topic %}\nHolds a reference to the **last** campaign topic the member's conversation was in. This is useful to allow members to talk to Gambit and get quick responses (through Rivescript), without Gambit completely forgetting what state the member's interaction with a campaign topic was in.\n{% enddocs %}\n\n{% docs action_serial_id %}\nSerial id for the user's action. Depends on the source of the action. May be the bertly click id, sms message id, etc.\n{% enddocs %}\n\n{% docs channel %}\nChannel for the user's action. Depends on the source of the action. (e.g. web, sms)\n{% enddocs %}\n\n{% docs first_action_month %}\nMonth during which the user took their first action. \n{% enddocs %}\n\n{% docs event_id %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs event_source %}\nApplication source for event (eg. Phoenix, Northstar)\n{% enddocs %}\n\n{% docs event_datetime %}\nWhen the event occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs event_name %}\nName of the event (eg. northstar_submitted_register, https://docs.google.com/spreadsheets/d/1lm-fGrIm85nUTxSojqyCt_Ehmm1zEbViFhKpxcJiz1A/edit#gid=406441516)\n{% enddocs %}\n\n{% docs event_type %}\nType of event (pv = 'Page View', se = 'Structured Event')\n{% enddocs %}\n\n{% docs host %}\nURL host where event occurred (eg. www.dosomething.org or identity.dosomething.org)\n{% enddocs %}\n\n{% docs path %}\nURL path event occurred at (eg. /login or /us/campaigns/huddle-for-heroes)\n{% enddocs %}\n\n{% docs query_parameters %}\nOptional query parameters for the request (eg. query=huddle)\n{% enddocs %}\n\n{% docs se_category %}\nCategory of event (eg. focused_field, authentication) - Custom structured event\n{% enddocs %}\n\n{% docs se_action %}\nAction performed / event name (eg. form_submitted, action_failed) - Custom structured event\n{% enddocs %}\n\n{% docs se_label %}\nThe object of the action (eg. first_name, register, voter_reg_status) - Custom structured event\n{% enddocs %}\n\n{% docs session_id %}\nUnique identifier of the user's session\n{% enddocs %}\n\n{% docs session_counter %}\nHow many sessions a user has started\n{% enddocs %}\n\n{% docs browser_size %}\nWhich type of browser a user is using (eg. Mobile, Desktop)\n{% enddocs %}\n\n{% docs northstar_id %}\nThe Northstar ID of the user who generated the event\n{% enddocs %}\n\n{% docs device_id %}\nID of the device used\n{% enddocs %}\n\n{% docs referrer_host %}\nURL host of the referring site (eg. google.com)\n{% enddocs %}\n\n{% docs referrer_path %}\nURL path from referring site (eg. /10-stats-on-teen-drug-and-alcohol-use/)\n{% enddocs %}\n\n{% docs referrer_source %}\nReferrer source name (eg. Google, Facebook)\n{% enddocs %}\n\n{% docs utm_source %}\nTracks where the traffic is coming from. (eg. scholarship_listing, Facebook)\n{% enddocs %}\n\n{% docs utm_medium %}\nHow the traffic got to the platform (eg. referral, CPC)\n{% enddocs %}\n\n{% docs utm_campaign %}\nTracks which campaign the traffic was generated by. Shows up in Google Analytics as Campaign Name (eg. editorial_newsletter)\n{% enddocs %}\n\n{% docs url %}\nURL of campaign (eg. https://dosome.click/nyn5m7)\n{% enddocs %}\n\n{% docs modal_type %}\nNULL or SURVEY_MODAL\n{% enddocs %}\n\n{% docs landing_datetime %}\nWhen the session started in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs ending_datetime %}\nWhen the session ended in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs session_duration_seconds %}\nSession duration in seconds\n{% enddocs %}\n\n{% docs num_pages_views %}\nNumber of pages viewed in session\n{% enddocs %}\n\n{% docs landing_page %}\nFirst page the user viewed in the session (eg. /us/facts/11-facts-about-bp-oil-spill)\n{% enddocs %}\n\n{% docs exit_page %}\n\"Which page the user ended or exited their session from (eg. /us/campaigns/green-your-getaway)\"\n{% enddocs %}\n\n{% docs days_since_last_session %}\n\"Days since their last session.\"\n{% enddocs %}\n\n{% docs post_type %}\nType of post, (e.g. photo, voter-reg)\n{% enddocs %}\n\n{% docs noun %}\nNoun that corresponds to the item in the call to action that was delivered. (e.g. drawings, tweets)\n{% enddocs %}\n\n{% docs verb %}\nVerb corresponding to the action the user took. (e.g. shared, sent, taken)\n{% enddocs %}\n\n{% docs deleted_at %}\nDate time in UTC when a user deleted their post.\n{% enddocs %}\n\n{% docs _fivetran_deleted %}\nMarks rows that were deleted in the source table\n{% enddocs %}\n\n{% docs _fivetran_synced %}\n(UTC timestamp) keeps track of when each row was last successfully synced\n{% enddocs %}\n\n{% docs reportback %}\nWhether the post is a reportback \n{% enddocs %}\n\n{% docs active %}\nWhether the user is active \n{% enddocs %}\n\n{% docs anonymous %}\nWhether the user is anonymous when making the post \n{% enddocs %}\n\n{% docs callpower_campaign_id %}\nUnique ID corresponding to the Callpower campaign. Callpower allows users to record messages for their representatives.\n{% enddocs %}\n\n{% docs quiz %}\nWhether the post is a quiz \n{% enddocs %}\n\n{% docs action_type %}\nType of action the user took. (e.g. share-something, donate-something)\n{% enddocs %}\n\n{% docs online %}\nWhether the action is a online as opposed to IRL.\n{% enddocs %}\n\n{% docs time_commitment %}\nEstimated time required to do the action (e.g. 3.0+, <0.5)\n{% enddocs %}\n\n{% docs num_signups %}\nQuantity of campaign signups\n{% enddocs %}\n\n{% docs most_recent_signup %}\nTimestamp of the most recent signup in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs num_rbs %}\nQuantity of reportbacks for the user\n{% enddocs %}\n\n{% docs total_quantity %}\nTotal quantity of items in reportbacks\n{% enddocs %}\n\n{% docs most_recent_rb %}\nWhen the most recent reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs first_rb %}\nWhen the first reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs avg_time_betw_rbs %}\nCalculated average time between reportbacks.\n{% enddocs %}\n\n{% docs avg_days_next_action_after_rb %}\nCalculated average days until next action after reportback\n{% enddocs %}\n\n{% docs days_to_next_action_after_last_rb %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs most_recent_mam_action %}\nMost recent monthly active member qualifying action in UTC (eg. 2018-01-01 12:00:00).\n{% enddocs %}\n\n{% docs most_recent_email_open %}\nMost recent email open in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs most_recent_all_actions %}\nMost recent timestamp of any action in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs last_action_is_rb %}\nWhether the last action the user took was a reportback\n{% enddocs %}\n\n{% docs days_since_last_action %}\nDays since the user's last action\n{% enddocs %}\n\n{% docs time_to_first_rb %}\nHow much time after registering until the user's first reportback\n{% enddocs %}\n\n{% docs sms_unsubscribed_at %}\nTimestamp of when user unsubscribed from SMS messaging\n{% enddocs %}\n\n{% docs user_unsubscribed_at %}\nTimestamp of when user unsubscribed from email or sms\n{% enddocs %}\n\n{% docs voter_reg_acquisition %}\nWhether the user was an acquisition through voter registration efforts. \n{% enddocs %}\n\n{% docs last_logged_in %}\nDate time in UTC when user last logged in to Northstar\n{% enddocs %}\n\n{% docs last_accessed %}\nDate time in UTC when user last access the website\n{% enddocs %}\n\n{% docs last_messaged_at %}\nDate time in UTC when user was last sent a message via SMS or email\n{% enddocs %}\n\n{% docs facebook_id %}\nUser's facebook id\n{% enddocs %}\n\n{% docs mobile %}\nUsers's mobile phone number\n{% enddocs %}\n\n{% docs birthdate %}\nUser's birthdate\n{% enddocs %}\n\n{% docs first_name %}\nUser's first name\n{% enddocs %}\n\n{% docs last_name %}\nUser's last name\n{% enddocs %}\n\n{% docs voter_registration_status %}\nUser's registration status. (e.g. registration_complete, confirmed, uncertain) \n{% enddocs %}\n\n{% docs finish_with_state %}\nIf the registrant was eligible to use and passed through to complete their registration with their state\u2019s OVR system, it will be indicated in this field (direct quote from Rock-The-Vote documentation). Yes/No value in field.\n{% enddocs %}\n\n{% docs reportback_volume %}\nThis field returns 1 if non voter-reg action, since campaigns team only counts those a 1 reportback. If voter-reg action, we want to count quantity of post as number of registered voters.\n{% enddocs %}\n\n{% docs address_street_1 %}\nFirst line of user's street address\n{% enddocs %}\n\n{% docs address_street_2 %}\nSecond line of user's street address\n{% enddocs %}\n\n{% docs city %}\nUser's city\n{% enddocs %}\n\n{% docs state %}\nUser's state\n{% enddocs %}\n\n{% docs country %}\nUser's country\n{% enddocs %}\n\n{% docs language %}\nUser's language\n{% enddocs %}\n\n{% docs cio_status %}\nStatus of user from CIO. (e.g. customer_subscribed, customer_unsubscribed)\n{% enddocs %}\n\n{% docs cio_status_timestamp %}\nTimestamp when users's status was updated.\n{% enddocs %}\n\n{% docs sms_status %}\nCurrent SMS status. (e.g. undeliverable, unknown)\n{% enddocs %}\n\n{% docs source_detail %}\nDetails of the origin of the user. (e.g. tell_a_friend, other, opt_in_path/197981)\n{% enddocs %}\n\n{% docs badges %}\nWhether the user has any badges. \n{% enddocs %}\n\n{% docs refer_friends %}\nWhether the user is a part of the refer a friend campaign. \n{% enddocs %}\n\n{% docs subscribed_member %}\nWhether the user is subscribed. \n{% enddocs %}\n\n{% docs last_updated_at %}\nTimestamp when users's was updated.\n{% enddocs %}\n\n{% docs school_id %}\nUnique identifier for the user's school. This info comes from the school finder.\n{% enddocs %}\n\n{% docs newsletter_topic %}\nNewsletter topic. (e.g. community, lifestyle)\n{% enddocs %}\n\n{% docs user_agent %}\nFull user agent string for a user's browser (e.g. \"Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:24.0) Gecko/20100101 Firefox/24.0\")\n{% enddocs %}\n\n{% docs drupal_id %}\nOld Drupal user ID\n{% enddocs %}\n\n{% docs campaigns %}\nCampaigns a user is signed up for.\n{% enddocs %}\n\n{% docs audit %}\nA very useful field with data containing information about changes to a user, e.g. timestamps when the user subscribed and unsubscribed.\n{% enddocs %}\n\n{% docs voting_plan_status %}\nThe indication of the user's plan to vote, e.g. voting, not_voting, cant_vote\n{% enddocs %}\n\n{% docs voting_plan_time_of_day %}\nThe time of day when the user plans to vote, e.g morning, afternoon, evening\n{% enddocs %}\n\n{% docs voting_plan_method_of_transport %}\nHow the user plans to get to their polling place. e.g. walk, drive\n{% enddocs %}\n\n{% docs voting_plan_attending_with %}\nWith Whom the user plans to go voting, e.g. family, friends, alone\n{% enddocs %}\n\n{% docs feature_flags %}\nJSON containing info on features like badges and refer-a-friend.\n{% enddocs %}\n\n{% docs dbt_updated_at %}\nDBT snapshot table data. The updated_at timestamp of the source record when this snapshot row was inserted.\n{% enddocs %}\n\n{% docs dbt_scd_id %}\nDBT snapshot table data. A unique key generated for each snapshotted record.\n{% enddocs %}\n\n{% docs dbt_valid_from %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this snapshot row was first inserted\n{% enddocs %}\n\n{% docs dbt_valid_to %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this row row became invalidated.\n{% enddocs %}\n\n{% docs google_id %}\nUser's Google ID obtained from login.\n{% enddocs %}\n\n{% docs causes %}\nCauses in which a user is interested. e.g. animal welfare, education, mental_health\n{% enddocs %}\n\n{% docs email_subscription_status %}\nEmail subscription status of the user\n{% enddocs %}\n\n{% docs role %}\nUser's role, e.g. user, staff\n{% enddocs %}\n\n{% docs cio_backfilled %}\nWhether this user's data was backfilled from CIO\n{% enddocs %}\n\n{% docs addr_source %}\nWhere the user submitted their address, e.g. sms, GDPR\n{% enddocs %}\n\n{% docs email_subscription_topics %}\nEmail subscription topics correspond to categories in CIO in which the user is interested. e.g. lifestyle, community, scholarship\n{% enddocs %}\n\n{% docs sms_paused %}\nWhether we've paused sending sms messages to the user.\n{% enddocs %}\n\n\n\n\n", "name": "most_recent_email_open", "unique_id": "ds_dbt.most_recent_email_open", "block_contents": "Most recent email open in UTC (eg. 2018-01-01 12:00:00)"}, "ds_dbt.most_recent_all_actions": {"root_path": "/Users/mrich/projects/quasar/quasar/dbt", "resource_type": "docs", "path": "schema.md", "original_file_path": "models/schema.md", "package_name": "ds_dbt", "file_contents": "\n{% docs click_id %}\nThis is a unique identifier for each click\n{% enddocs %}\n\n{% docs click_time %}\nTimestamp when user clicked.\n{% enddocs %}\n\n{% docs shortened %}\nShortened URL\n{% enddocs %}\n\n{% docs target_url %}\nURL where the user will be directed\n{% enddocs %}\n\n{% docs broadcast_id %}\nID of the broadcast that generated the shortened URL\n{% enddocs %}\n\n{% docs source %}\nSource of the URL (e.g. SMS, web), origin of the post (e.g. phoenix-web, phoenix-ashes, sms), or source where user was acquired. (e.g. sms, phoenix-next)\n{% enddocs %}\n\n{% docs interaction_type %}\nHow the user interacted with the link (e.g. preview, click)\n{% enddocs %}\n\n{% docs id %}\nUnique identifier for the post\n{% enddocs %}\n\n{% docs type %}\nType of post (e.g. photo)\n{% enddocs %}\n\n{% docs action %}\nPost action (e.g. DefendDreamers_Nov9_CongressCalls, GunViolence2018_Feb15_ParklandResponse)\n{% enddocs %}\n\n{% docs status %}\nPost status (e.g. accepted, rejected)\n{% enddocs %}\n\n{% docs quantity %}\nNumerical quantity of items specified in the call to action (e.g. 10, 200)\n{% enddocs %}\n\n{% docs source_bucket %}\nGrouping bucket for origin of the post (e.g. web, sms) \n{% enddocs %}\n\n{% docs created_at %}\nWhen the item was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs updated_at %}\nWhen the item was updated in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs text %}\nText of the post (e.g. \"Zoo animals and a super hero trying to help too!\") \n{% enddocs %}\n\n{% docs signup_id %}\nUnique identifier for the signup \n{% enddocs %}\n\n{% docs post_class %}\nClass of the signup (e.g. \"photo - default\", \"phone-call - DefendDreamers_Jan16_BothBodies\")\n{% enddocs %}\n\n{% docs is_accepted %}\nWhether the post has been accepted to be displayed to the public on the website\n{% enddocs %}\n\n{% docs action_id %}\nInternal identifier of the action \n{% enddocs %}\n\n{% docs location %}\nLocation where the action takes place (e.g. US-NY)\n{% enddocs %}\n\n{% docs postal_code %}\nPostal code where the action takes place\n{% enddocs %}\n\n{% docs is_reportback %}\nWhether the post is a reportback. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs civic_action %}\nWhether the post is a Civic Action. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs scholarship_entry %}\nWhether the post is a Scholarship Entry. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs why_participated %}\nWhy the user participated in this action. Entered by the user.\n{% enddocs %}\n\n{% docs details %}\nDetails about the post. Contains contentfulId and other information (e.g. {\"campaignContentfulId\":\"6ATBgGEQEeJoIcxs1qbwaC\"})\n{% enddocs %}\n\n{% docs email %}\nEmail address of the user.\n{% enddocs %}\n\n{% docs source_details %}\nDetails about the source of the item. This is sometimes represented as a JSON object, and for other tables like Turbovote its represented as a string. (e.g. \"{\"contentful_id\":\"3CTLlXfbwtz1FOMpl31SKV\",\"utm_source\":\"scholarship_listing\",\"utm_medium\":\"referral\",\"utm_campaign\":\"fastweb_2019_08\"}\", newsletter_456)\n{% enddocs %}\n\n{% docs campaign_id %}\nThis is a unique identifier for the campaign\n{% enddocs %}\n\n{% docs campaign_run_id %}\nUnique identifier for the campaign run\n{% enddocs %}\n\n{% docs campaign_name %}\nName of the campaign\n{% enddocs %}\n\n{% docs campaign_cause %}\nCampaign cause (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_run_start_date %}\nStart date of the campaign run\n{% enddocs %}\n\n{% docs campaign_run_end_date %}\nEnd date of the campaign run\n{% enddocs %}\n\n{% docs campaign_created_date %}\nWhen the campaign was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs campaign_node_id %}\nInternal unique node id for the campaign\n{% enddocs %}\n\n{% docs campaign_node_id_title %}\nCampaign title\n{% enddocs %}\n\n{% docs campaign_run_id_title %}\nTitle of the campaign run\n{% enddocs %}\n\n{% docs campaign_action_type %}\nCampaign action type (eg. Make Something, Share Something)\n{% enddocs %}\n\n{% docs campaign_cause_type %}\nCampaign cause type (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_noun %}\nNoun applicable to the user's action\n{% enddocs %}\n\n{% docs campaign_verb %}\nVerb describing the action the user should take\n{% enddocs %}\n\n{% docs campaign_cta %}\nCampaign's call to action\n{% enddocs %}\n\n{% docs campaign_language %}\n\"Language in which the campaign is available\"\n{% enddocs %}\n\n{% docs agent_id %}\nIf set, the content type of the picture the member is sending us. Exp. image/png.\n{% enddocs %}\n\n{% docs attachment_content_type %}\nIf set, the handle of the Front agent this outbound support message is from.\n{% enddocs %}\n\n{% docs topic %}\nHolds a reference to the **last** campaign topic the member's conversation was in. This is useful to allow members to talk to Gambit and get quick responses (through Rivescript), without Gambit completely forgetting what state the member's interaction with a campaign topic was in.\n{% enddocs %}\n\n{% docs action_serial_id %}\nSerial id for the user's action. Depends on the source of the action. May be the bertly click id, sms message id, etc.\n{% enddocs %}\n\n{% docs channel %}\nChannel for the user's action. Depends on the source of the action. (e.g. web, sms)\n{% enddocs %}\n\n{% docs first_action_month %}\nMonth during which the user took their first action. \n{% enddocs %}\n\n{% docs event_id %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs event_source %}\nApplication source for event (eg. Phoenix, Northstar)\n{% enddocs %}\n\n{% docs event_datetime %}\nWhen the event occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs event_name %}\nName of the event (eg. northstar_submitted_register, https://docs.google.com/spreadsheets/d/1lm-fGrIm85nUTxSojqyCt_Ehmm1zEbViFhKpxcJiz1A/edit#gid=406441516)\n{% enddocs %}\n\n{% docs event_type %}\nType of event (pv = 'Page View', se = 'Structured Event')\n{% enddocs %}\n\n{% docs host %}\nURL host where event occurred (eg. www.dosomething.org or identity.dosomething.org)\n{% enddocs %}\n\n{% docs path %}\nURL path event occurred at (eg. /login or /us/campaigns/huddle-for-heroes)\n{% enddocs %}\n\n{% docs query_parameters %}\nOptional query parameters for the request (eg. query=huddle)\n{% enddocs %}\n\n{% docs se_category %}\nCategory of event (eg. focused_field, authentication) - Custom structured event\n{% enddocs %}\n\n{% docs se_action %}\nAction performed / event name (eg. form_submitted, action_failed) - Custom structured event\n{% enddocs %}\n\n{% docs se_label %}\nThe object of the action (eg. first_name, register, voter_reg_status) - Custom structured event\n{% enddocs %}\n\n{% docs session_id %}\nUnique identifier of the user's session\n{% enddocs %}\n\n{% docs session_counter %}\nHow many sessions a user has started\n{% enddocs %}\n\n{% docs browser_size %}\nWhich type of browser a user is using (eg. Mobile, Desktop)\n{% enddocs %}\n\n{% docs northstar_id %}\nThe Northstar ID of the user who generated the event\n{% enddocs %}\n\n{% docs device_id %}\nID of the device used\n{% enddocs %}\n\n{% docs referrer_host %}\nURL host of the referring site (eg. google.com)\n{% enddocs %}\n\n{% docs referrer_path %}\nURL path from referring site (eg. /10-stats-on-teen-drug-and-alcohol-use/)\n{% enddocs %}\n\n{% docs referrer_source %}\nReferrer source name (eg. Google, Facebook)\n{% enddocs %}\n\n{% docs utm_source %}\nTracks where the traffic is coming from. (eg. scholarship_listing, Facebook)\n{% enddocs %}\n\n{% docs utm_medium %}\nHow the traffic got to the platform (eg. referral, CPC)\n{% enddocs %}\n\n{% docs utm_campaign %}\nTracks which campaign the traffic was generated by. Shows up in Google Analytics as Campaign Name (eg. editorial_newsletter)\n{% enddocs %}\n\n{% docs url %}\nURL of campaign (eg. https://dosome.click/nyn5m7)\n{% enddocs %}\n\n{% docs modal_type %}\nNULL or SURVEY_MODAL\n{% enddocs %}\n\n{% docs landing_datetime %}\nWhen the session started in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs ending_datetime %}\nWhen the session ended in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs session_duration_seconds %}\nSession duration in seconds\n{% enddocs %}\n\n{% docs num_pages_views %}\nNumber of pages viewed in session\n{% enddocs %}\n\n{% docs landing_page %}\nFirst page the user viewed in the session (eg. /us/facts/11-facts-about-bp-oil-spill)\n{% enddocs %}\n\n{% docs exit_page %}\n\"Which page the user ended or exited their session from (eg. /us/campaigns/green-your-getaway)\"\n{% enddocs %}\n\n{% docs days_since_last_session %}\n\"Days since their last session.\"\n{% enddocs %}\n\n{% docs post_type %}\nType of post, (e.g. photo, voter-reg)\n{% enddocs %}\n\n{% docs noun %}\nNoun that corresponds to the item in the call to action that was delivered. (e.g. drawings, tweets)\n{% enddocs %}\n\n{% docs verb %}\nVerb corresponding to the action the user took. (e.g. shared, sent, taken)\n{% enddocs %}\n\n{% docs deleted_at %}\nDate time in UTC when a user deleted their post.\n{% enddocs %}\n\n{% docs _fivetran_deleted %}\nMarks rows that were deleted in the source table\n{% enddocs %}\n\n{% docs _fivetran_synced %}\n(UTC timestamp) keeps track of when each row was last successfully synced\n{% enddocs %}\n\n{% docs reportback %}\nWhether the post is a reportback \n{% enddocs %}\n\n{% docs active %}\nWhether the user is active \n{% enddocs %}\n\n{% docs anonymous %}\nWhether the user is anonymous when making the post \n{% enddocs %}\n\n{% docs callpower_campaign_id %}\nUnique ID corresponding to the Callpower campaign. Callpower allows users to record messages for their representatives.\n{% enddocs %}\n\n{% docs quiz %}\nWhether the post is a quiz \n{% enddocs %}\n\n{% docs action_type %}\nType of action the user took. (e.g. share-something, donate-something)\n{% enddocs %}\n\n{% docs online %}\nWhether the action is a online as opposed to IRL.\n{% enddocs %}\n\n{% docs time_commitment %}\nEstimated time required to do the action (e.g. 3.0+, <0.5)\n{% enddocs %}\n\n{% docs num_signups %}\nQuantity of campaign signups\n{% enddocs %}\n\n{% docs most_recent_signup %}\nTimestamp of the most recent signup in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs num_rbs %}\nQuantity of reportbacks for the user\n{% enddocs %}\n\n{% docs total_quantity %}\nTotal quantity of items in reportbacks\n{% enddocs %}\n\n{% docs most_recent_rb %}\nWhen the most recent reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs first_rb %}\nWhen the first reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs avg_time_betw_rbs %}\nCalculated average time between reportbacks.\n{% enddocs %}\n\n{% docs avg_days_next_action_after_rb %}\nCalculated average days until next action after reportback\n{% enddocs %}\n\n{% docs days_to_next_action_after_last_rb %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs most_recent_mam_action %}\nMost recent monthly active member qualifying action in UTC (eg. 2018-01-01 12:00:00).\n{% enddocs %}\n\n{% docs most_recent_email_open %}\nMost recent email open in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs most_recent_all_actions %}\nMost recent timestamp of any action in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs last_action_is_rb %}\nWhether the last action the user took was a reportback\n{% enddocs %}\n\n{% docs days_since_last_action %}\nDays since the user's last action\n{% enddocs %}\n\n{% docs time_to_first_rb %}\nHow much time after registering until the user's first reportback\n{% enddocs %}\n\n{% docs sms_unsubscribed_at %}\nTimestamp of when user unsubscribed from SMS messaging\n{% enddocs %}\n\n{% docs user_unsubscribed_at %}\nTimestamp of when user unsubscribed from email or sms\n{% enddocs %}\n\n{% docs voter_reg_acquisition %}\nWhether the user was an acquisition through voter registration efforts. \n{% enddocs %}\n\n{% docs last_logged_in %}\nDate time in UTC when user last logged in to Northstar\n{% enddocs %}\n\n{% docs last_accessed %}\nDate time in UTC when user last access the website\n{% enddocs %}\n\n{% docs last_messaged_at %}\nDate time in UTC when user was last sent a message via SMS or email\n{% enddocs %}\n\n{% docs facebook_id %}\nUser's facebook id\n{% enddocs %}\n\n{% docs mobile %}\nUsers's mobile phone number\n{% enddocs %}\n\n{% docs birthdate %}\nUser's birthdate\n{% enddocs %}\n\n{% docs first_name %}\nUser's first name\n{% enddocs %}\n\n{% docs last_name %}\nUser's last name\n{% enddocs %}\n\n{% docs voter_registration_status %}\nUser's registration status. (e.g. registration_complete, confirmed, uncertain) \n{% enddocs %}\n\n{% docs finish_with_state %}\nIf the registrant was eligible to use and passed through to complete their registration with their state\u2019s OVR system, it will be indicated in this field (direct quote from Rock-The-Vote documentation). Yes/No value in field.\n{% enddocs %}\n\n{% docs reportback_volume %}\nThis field returns 1 if non voter-reg action, since campaigns team only counts those a 1 reportback. If voter-reg action, we want to count quantity of post as number of registered voters.\n{% enddocs %}\n\n{% docs address_street_1 %}\nFirst line of user's street address\n{% enddocs %}\n\n{% docs address_street_2 %}\nSecond line of user's street address\n{% enddocs %}\n\n{% docs city %}\nUser's city\n{% enddocs %}\n\n{% docs state %}\nUser's state\n{% enddocs %}\n\n{% docs country %}\nUser's country\n{% enddocs %}\n\n{% docs language %}\nUser's language\n{% enddocs %}\n\n{% docs cio_status %}\nStatus of user from CIO. (e.g. customer_subscribed, customer_unsubscribed)\n{% enddocs %}\n\n{% docs cio_status_timestamp %}\nTimestamp when users's status was updated.\n{% enddocs %}\n\n{% docs sms_status %}\nCurrent SMS status. (e.g. undeliverable, unknown)\n{% enddocs %}\n\n{% docs source_detail %}\nDetails of the origin of the user. (e.g. tell_a_friend, other, opt_in_path/197981)\n{% enddocs %}\n\n{% docs badges %}\nWhether the user has any badges. \n{% enddocs %}\n\n{% docs refer_friends %}\nWhether the user is a part of the refer a friend campaign. \n{% enddocs %}\n\n{% docs subscribed_member %}\nWhether the user is subscribed. \n{% enddocs %}\n\n{% docs last_updated_at %}\nTimestamp when users's was updated.\n{% enddocs %}\n\n{% docs school_id %}\nUnique identifier for the user's school. This info comes from the school finder.\n{% enddocs %}\n\n{% docs newsletter_topic %}\nNewsletter topic. (e.g. community, lifestyle)\n{% enddocs %}\n\n{% docs user_agent %}\nFull user agent string for a user's browser (e.g. \"Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:24.0) Gecko/20100101 Firefox/24.0\")\n{% enddocs %}\n\n{% docs drupal_id %}\nOld Drupal user ID\n{% enddocs %}\n\n{% docs campaigns %}\nCampaigns a user is signed up for.\n{% enddocs %}\n\n{% docs audit %}\nA very useful field with data containing information about changes to a user, e.g. timestamps when the user subscribed and unsubscribed.\n{% enddocs %}\n\n{% docs voting_plan_status %}\nThe indication of the user's plan to vote, e.g. voting, not_voting, cant_vote\n{% enddocs %}\n\n{% docs voting_plan_time_of_day %}\nThe time of day when the user plans to vote, e.g morning, afternoon, evening\n{% enddocs %}\n\n{% docs voting_plan_method_of_transport %}\nHow the user plans to get to their polling place. e.g. walk, drive\n{% enddocs %}\n\n{% docs voting_plan_attending_with %}\nWith Whom the user plans to go voting, e.g. family, friends, alone\n{% enddocs %}\n\n{% docs feature_flags %}\nJSON containing info on features like badges and refer-a-friend.\n{% enddocs %}\n\n{% docs dbt_updated_at %}\nDBT snapshot table data. The updated_at timestamp of the source record when this snapshot row was inserted.\n{% enddocs %}\n\n{% docs dbt_scd_id %}\nDBT snapshot table data. A unique key generated for each snapshotted record.\n{% enddocs %}\n\n{% docs dbt_valid_from %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this snapshot row was first inserted\n{% enddocs %}\n\n{% docs dbt_valid_to %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this row row became invalidated.\n{% enddocs %}\n\n{% docs google_id %}\nUser's Google ID obtained from login.\n{% enddocs %}\n\n{% docs causes %}\nCauses in which a user is interested. e.g. animal welfare, education, mental_health\n{% enddocs %}\n\n{% docs email_subscription_status %}\nEmail subscription status of the user\n{% enddocs %}\n\n{% docs role %}\nUser's role, e.g. user, staff\n{% enddocs %}\n\n{% docs cio_backfilled %}\nWhether this user's data was backfilled from CIO\n{% enddocs %}\n\n{% docs addr_source %}\nWhere the user submitted their address, e.g. sms, GDPR\n{% enddocs %}\n\n{% docs email_subscription_topics %}\nEmail subscription topics correspond to categories in CIO in which the user is interested. e.g. lifestyle, community, scholarship\n{% enddocs %}\n\n{% docs sms_paused %}\nWhether we've paused sending sms messages to the user.\n{% enddocs %}\n\n\n\n\n", "name": "most_recent_all_actions", "unique_id": "ds_dbt.most_recent_all_actions", "block_contents": "Most recent timestamp of any action in UTC (eg. 2018-01-01 12:00:00)"}, "ds_dbt.last_action_is_rb": {"root_path": "/Users/mrich/projects/quasar/quasar/dbt", "resource_type": "docs", "path": "schema.md", "original_file_path": "models/schema.md", "package_name": "ds_dbt", "file_contents": "\n{% docs click_id %}\nThis is a unique identifier for each click\n{% enddocs %}\n\n{% docs click_time %}\nTimestamp when user clicked.\n{% enddocs %}\n\n{% docs shortened %}\nShortened URL\n{% enddocs %}\n\n{% docs target_url %}\nURL where the user will be directed\n{% enddocs %}\n\n{% docs broadcast_id %}\nID of the broadcast that generated the shortened URL\n{% enddocs %}\n\n{% docs source %}\nSource of the URL (e.g. SMS, web), origin of the post (e.g. phoenix-web, phoenix-ashes, sms), or source where user was acquired. (e.g. sms, phoenix-next)\n{% enddocs %}\n\n{% docs interaction_type %}\nHow the user interacted with the link (e.g. preview, click)\n{% enddocs %}\n\n{% docs id %}\nUnique identifier for the post\n{% enddocs %}\n\n{% docs type %}\nType of post (e.g. photo)\n{% enddocs %}\n\n{% docs action %}\nPost action (e.g. DefendDreamers_Nov9_CongressCalls, GunViolence2018_Feb15_ParklandResponse)\n{% enddocs %}\n\n{% docs status %}\nPost status (e.g. accepted, rejected)\n{% enddocs %}\n\n{% docs quantity %}\nNumerical quantity of items specified in the call to action (e.g. 10, 200)\n{% enddocs %}\n\n{% docs source_bucket %}\nGrouping bucket for origin of the post (e.g. web, sms) \n{% enddocs %}\n\n{% docs created_at %}\nWhen the item was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs updated_at %}\nWhen the item was updated in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs text %}\nText of the post (e.g. \"Zoo animals and a super hero trying to help too!\") \n{% enddocs %}\n\n{% docs signup_id %}\nUnique identifier for the signup \n{% enddocs %}\n\n{% docs post_class %}\nClass of the signup (e.g. \"photo - default\", \"phone-call - DefendDreamers_Jan16_BothBodies\")\n{% enddocs %}\n\n{% docs is_accepted %}\nWhether the post has been accepted to be displayed to the public on the website\n{% enddocs %}\n\n{% docs action_id %}\nInternal identifier of the action \n{% enddocs %}\n\n{% docs location %}\nLocation where the action takes place (e.g. US-NY)\n{% enddocs %}\n\n{% docs postal_code %}\nPostal code where the action takes place\n{% enddocs %}\n\n{% docs is_reportback %}\nWhether the post is a reportback. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs civic_action %}\nWhether the post is a Civic Action. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs scholarship_entry %}\nWhether the post is a Scholarship Entry. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs why_participated %}\nWhy the user participated in this action. Entered by the user.\n{% enddocs %}\n\n{% docs details %}\nDetails about the post. Contains contentfulId and other information (e.g. {\"campaignContentfulId\":\"6ATBgGEQEeJoIcxs1qbwaC\"})\n{% enddocs %}\n\n{% docs email %}\nEmail address of the user.\n{% enddocs %}\n\n{% docs source_details %}\nDetails about the source of the item. This is sometimes represented as a JSON object, and for other tables like Turbovote its represented as a string. (e.g. \"{\"contentful_id\":\"3CTLlXfbwtz1FOMpl31SKV\",\"utm_source\":\"scholarship_listing\",\"utm_medium\":\"referral\",\"utm_campaign\":\"fastweb_2019_08\"}\", newsletter_456)\n{% enddocs %}\n\n{% docs campaign_id %}\nThis is a unique identifier for the campaign\n{% enddocs %}\n\n{% docs campaign_run_id %}\nUnique identifier for the campaign run\n{% enddocs %}\n\n{% docs campaign_name %}\nName of the campaign\n{% enddocs %}\n\n{% docs campaign_cause %}\nCampaign cause (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_run_start_date %}\nStart date of the campaign run\n{% enddocs %}\n\n{% docs campaign_run_end_date %}\nEnd date of the campaign run\n{% enddocs %}\n\n{% docs campaign_created_date %}\nWhen the campaign was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs campaign_node_id %}\nInternal unique node id for the campaign\n{% enddocs %}\n\n{% docs campaign_node_id_title %}\nCampaign title\n{% enddocs %}\n\n{% docs campaign_run_id_title %}\nTitle of the campaign run\n{% enddocs %}\n\n{% docs campaign_action_type %}\nCampaign action type (eg. Make Something, Share Something)\n{% enddocs %}\n\n{% docs campaign_cause_type %}\nCampaign cause type (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_noun %}\nNoun applicable to the user's action\n{% enddocs %}\n\n{% docs campaign_verb %}\nVerb describing the action the user should take\n{% enddocs %}\n\n{% docs campaign_cta %}\nCampaign's call to action\n{% enddocs %}\n\n{% docs campaign_language %}\n\"Language in which the campaign is available\"\n{% enddocs %}\n\n{% docs agent_id %}\nIf set, the content type of the picture the member is sending us. Exp. image/png.\n{% enddocs %}\n\n{% docs attachment_content_type %}\nIf set, the handle of the Front agent this outbound support message is from.\n{% enddocs %}\n\n{% docs topic %}\nHolds a reference to the **last** campaign topic the member's conversation was in. This is useful to allow members to talk to Gambit and get quick responses (through Rivescript), without Gambit completely forgetting what state the member's interaction with a campaign topic was in.\n{% enddocs %}\n\n{% docs action_serial_id %}\nSerial id for the user's action. Depends on the source of the action. May be the bertly click id, sms message id, etc.\n{% enddocs %}\n\n{% docs channel %}\nChannel for the user's action. Depends on the source of the action. (e.g. web, sms)\n{% enddocs %}\n\n{% docs first_action_month %}\nMonth during which the user took their first action. \n{% enddocs %}\n\n{% docs event_id %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs event_source %}\nApplication source for event (eg. Phoenix, Northstar)\n{% enddocs %}\n\n{% docs event_datetime %}\nWhen the event occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs event_name %}\nName of the event (eg. northstar_submitted_register, https://docs.google.com/spreadsheets/d/1lm-fGrIm85nUTxSojqyCt_Ehmm1zEbViFhKpxcJiz1A/edit#gid=406441516)\n{% enddocs %}\n\n{% docs event_type %}\nType of event (pv = 'Page View', se = 'Structured Event')\n{% enddocs %}\n\n{% docs host %}\nURL host where event occurred (eg. www.dosomething.org or identity.dosomething.org)\n{% enddocs %}\n\n{% docs path %}\nURL path event occurred at (eg. /login or /us/campaigns/huddle-for-heroes)\n{% enddocs %}\n\n{% docs query_parameters %}\nOptional query parameters for the request (eg. query=huddle)\n{% enddocs %}\n\n{% docs se_category %}\nCategory of event (eg. focused_field, authentication) - Custom structured event\n{% enddocs %}\n\n{% docs se_action %}\nAction performed / event name (eg. form_submitted, action_failed) - Custom structured event\n{% enddocs %}\n\n{% docs se_label %}\nThe object of the action (eg. first_name, register, voter_reg_status) - Custom structured event\n{% enddocs %}\n\n{% docs session_id %}\nUnique identifier of the user's session\n{% enddocs %}\n\n{% docs session_counter %}\nHow many sessions a user has started\n{% enddocs %}\n\n{% docs browser_size %}\nWhich type of browser a user is using (eg. Mobile, Desktop)\n{% enddocs %}\n\n{% docs northstar_id %}\nThe Northstar ID of the user who generated the event\n{% enddocs %}\n\n{% docs device_id %}\nID of the device used\n{% enddocs %}\n\n{% docs referrer_host %}\nURL host of the referring site (eg. google.com)\n{% enddocs %}\n\n{% docs referrer_path %}\nURL path from referring site (eg. /10-stats-on-teen-drug-and-alcohol-use/)\n{% enddocs %}\n\n{% docs referrer_source %}\nReferrer source name (eg. Google, Facebook)\n{% enddocs %}\n\n{% docs utm_source %}\nTracks where the traffic is coming from. (eg. scholarship_listing, Facebook)\n{% enddocs %}\n\n{% docs utm_medium %}\nHow the traffic got to the platform (eg. referral, CPC)\n{% enddocs %}\n\n{% docs utm_campaign %}\nTracks which campaign the traffic was generated by. Shows up in Google Analytics as Campaign Name (eg. editorial_newsletter)\n{% enddocs %}\n\n{% docs url %}\nURL of campaign (eg. https://dosome.click/nyn5m7)\n{% enddocs %}\n\n{% docs modal_type %}\nNULL or SURVEY_MODAL\n{% enddocs %}\n\n{% docs landing_datetime %}\nWhen the session started in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs ending_datetime %}\nWhen the session ended in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs session_duration_seconds %}\nSession duration in seconds\n{% enddocs %}\n\n{% docs num_pages_views %}\nNumber of pages viewed in session\n{% enddocs %}\n\n{% docs landing_page %}\nFirst page the user viewed in the session (eg. /us/facts/11-facts-about-bp-oil-spill)\n{% enddocs %}\n\n{% docs exit_page %}\n\"Which page the user ended or exited their session from (eg. /us/campaigns/green-your-getaway)\"\n{% enddocs %}\n\n{% docs days_since_last_session %}\n\"Days since their last session.\"\n{% enddocs %}\n\n{% docs post_type %}\nType of post, (e.g. photo, voter-reg)\n{% enddocs %}\n\n{% docs noun %}\nNoun that corresponds to the item in the call to action that was delivered. (e.g. drawings, tweets)\n{% enddocs %}\n\n{% docs verb %}\nVerb corresponding to the action the user took. (e.g. shared, sent, taken)\n{% enddocs %}\n\n{% docs deleted_at %}\nDate time in UTC when a user deleted their post.\n{% enddocs %}\n\n{% docs _fivetran_deleted %}\nMarks rows that were deleted in the source table\n{% enddocs %}\n\n{% docs _fivetran_synced %}\n(UTC timestamp) keeps track of when each row was last successfully synced\n{% enddocs %}\n\n{% docs reportback %}\nWhether the post is a reportback \n{% enddocs %}\n\n{% docs active %}\nWhether the user is active \n{% enddocs %}\n\n{% docs anonymous %}\nWhether the user is anonymous when making the post \n{% enddocs %}\n\n{% docs callpower_campaign_id %}\nUnique ID corresponding to the Callpower campaign. Callpower allows users to record messages for their representatives.\n{% enddocs %}\n\n{% docs quiz %}\nWhether the post is a quiz \n{% enddocs %}\n\n{% docs action_type %}\nType of action the user took. (e.g. share-something, donate-something)\n{% enddocs %}\n\n{% docs online %}\nWhether the action is a online as opposed to IRL.\n{% enddocs %}\n\n{% docs time_commitment %}\nEstimated time required to do the action (e.g. 3.0+, <0.5)\n{% enddocs %}\n\n{% docs num_signups %}\nQuantity of campaign signups\n{% enddocs %}\n\n{% docs most_recent_signup %}\nTimestamp of the most recent signup in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs num_rbs %}\nQuantity of reportbacks for the user\n{% enddocs %}\n\n{% docs total_quantity %}\nTotal quantity of items in reportbacks\n{% enddocs %}\n\n{% docs most_recent_rb %}\nWhen the most recent reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs first_rb %}\nWhen the first reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs avg_time_betw_rbs %}\nCalculated average time between reportbacks.\n{% enddocs %}\n\n{% docs avg_days_next_action_after_rb %}\nCalculated average days until next action after reportback\n{% enddocs %}\n\n{% docs days_to_next_action_after_last_rb %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs most_recent_mam_action %}\nMost recent monthly active member qualifying action in UTC (eg. 2018-01-01 12:00:00).\n{% enddocs %}\n\n{% docs most_recent_email_open %}\nMost recent email open in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs most_recent_all_actions %}\nMost recent timestamp of any action in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs last_action_is_rb %}\nWhether the last action the user took was a reportback\n{% enddocs %}\n\n{% docs days_since_last_action %}\nDays since the user's last action\n{% enddocs %}\n\n{% docs time_to_first_rb %}\nHow much time after registering until the user's first reportback\n{% enddocs %}\n\n{% docs sms_unsubscribed_at %}\nTimestamp of when user unsubscribed from SMS messaging\n{% enddocs %}\n\n{% docs user_unsubscribed_at %}\nTimestamp of when user unsubscribed from email or sms\n{% enddocs %}\n\n{% docs voter_reg_acquisition %}\nWhether the user was an acquisition through voter registration efforts. \n{% enddocs %}\n\n{% docs last_logged_in %}\nDate time in UTC when user last logged in to Northstar\n{% enddocs %}\n\n{% docs last_accessed %}\nDate time in UTC when user last access the website\n{% enddocs %}\n\n{% docs last_messaged_at %}\nDate time in UTC when user was last sent a message via SMS or email\n{% enddocs %}\n\n{% docs facebook_id %}\nUser's facebook id\n{% enddocs %}\n\n{% docs mobile %}\nUsers's mobile phone number\n{% enddocs %}\n\n{% docs birthdate %}\nUser's birthdate\n{% enddocs %}\n\n{% docs first_name %}\nUser's first name\n{% enddocs %}\n\n{% docs last_name %}\nUser's last name\n{% enddocs %}\n\n{% docs voter_registration_status %}\nUser's registration status. (e.g. registration_complete, confirmed, uncertain) \n{% enddocs %}\n\n{% docs finish_with_state %}\nIf the registrant was eligible to use and passed through to complete their registration with their state\u2019s OVR system, it will be indicated in this field (direct quote from Rock-The-Vote documentation). Yes/No value in field.\n{% enddocs %}\n\n{% docs reportback_volume %}\nThis field returns 1 if non voter-reg action, since campaigns team only counts those a 1 reportback. If voter-reg action, we want to count quantity of post as number of registered voters.\n{% enddocs %}\n\n{% docs address_street_1 %}\nFirst line of user's street address\n{% enddocs %}\n\n{% docs address_street_2 %}\nSecond line of user's street address\n{% enddocs %}\n\n{% docs city %}\nUser's city\n{% enddocs %}\n\n{% docs state %}\nUser's state\n{% enddocs %}\n\n{% docs country %}\nUser's country\n{% enddocs %}\n\n{% docs language %}\nUser's language\n{% enddocs %}\n\n{% docs cio_status %}\nStatus of user from CIO. (e.g. customer_subscribed, customer_unsubscribed)\n{% enddocs %}\n\n{% docs cio_status_timestamp %}\nTimestamp when users's status was updated.\n{% enddocs %}\n\n{% docs sms_status %}\nCurrent SMS status. (e.g. undeliverable, unknown)\n{% enddocs %}\n\n{% docs source_detail %}\nDetails of the origin of the user. (e.g. tell_a_friend, other, opt_in_path/197981)\n{% enddocs %}\n\n{% docs badges %}\nWhether the user has any badges. \n{% enddocs %}\n\n{% docs refer_friends %}\nWhether the user is a part of the refer a friend campaign. \n{% enddocs %}\n\n{% docs subscribed_member %}\nWhether the user is subscribed. \n{% enddocs %}\n\n{% docs last_updated_at %}\nTimestamp when users's was updated.\n{% enddocs %}\n\n{% docs school_id %}\nUnique identifier for the user's school. This info comes from the school finder.\n{% enddocs %}\n\n{% docs newsletter_topic %}\nNewsletter topic. (e.g. community, lifestyle)\n{% enddocs %}\n\n{% docs user_agent %}\nFull user agent string for a user's browser (e.g. \"Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:24.0) Gecko/20100101 Firefox/24.0\")\n{% enddocs %}\n\n{% docs drupal_id %}\nOld Drupal user ID\n{% enddocs %}\n\n{% docs campaigns %}\nCampaigns a user is signed up for.\n{% enddocs %}\n\n{% docs audit %}\nA very useful field with data containing information about changes to a user, e.g. timestamps when the user subscribed and unsubscribed.\n{% enddocs %}\n\n{% docs voting_plan_status %}\nThe indication of the user's plan to vote, e.g. voting, not_voting, cant_vote\n{% enddocs %}\n\n{% docs voting_plan_time_of_day %}\nThe time of day when the user plans to vote, e.g morning, afternoon, evening\n{% enddocs %}\n\n{% docs voting_plan_method_of_transport %}\nHow the user plans to get to their polling place. e.g. walk, drive\n{% enddocs %}\n\n{% docs voting_plan_attending_with %}\nWith Whom the user plans to go voting, e.g. family, friends, alone\n{% enddocs %}\n\n{% docs feature_flags %}\nJSON containing info on features like badges and refer-a-friend.\n{% enddocs %}\n\n{% docs dbt_updated_at %}\nDBT snapshot table data. The updated_at timestamp of the source record when this snapshot row was inserted.\n{% enddocs %}\n\n{% docs dbt_scd_id %}\nDBT snapshot table data. A unique key generated for each snapshotted record.\n{% enddocs %}\n\n{% docs dbt_valid_from %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this snapshot row was first inserted\n{% enddocs %}\n\n{% docs dbt_valid_to %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this row row became invalidated.\n{% enddocs %}\n\n{% docs google_id %}\nUser's Google ID obtained from login.\n{% enddocs %}\n\n{% docs causes %}\nCauses in which a user is interested. e.g. animal welfare, education, mental_health\n{% enddocs %}\n\n{% docs email_subscription_status %}\nEmail subscription status of the user\n{% enddocs %}\n\n{% docs role %}\nUser's role, e.g. user, staff\n{% enddocs %}\n\n{% docs cio_backfilled %}\nWhether this user's data was backfilled from CIO\n{% enddocs %}\n\n{% docs addr_source %}\nWhere the user submitted their address, e.g. sms, GDPR\n{% enddocs %}\n\n{% docs email_subscription_topics %}\nEmail subscription topics correspond to categories in CIO in which the user is interested. e.g. lifestyle, community, scholarship\n{% enddocs %}\n\n{% docs sms_paused %}\nWhether we've paused sending sms messages to the user.\n{% enddocs %}\n\n\n\n\n", "name": "last_action_is_rb", "unique_id": "ds_dbt.last_action_is_rb", "block_contents": "Whether the last action the user took was a reportback"}, "ds_dbt.days_since_last_action": {"root_path": "/Users/mrich/projects/quasar/quasar/dbt", "resource_type": "docs", "path": "schema.md", "original_file_path": "models/schema.md", "package_name": "ds_dbt", "file_contents": "\n{% docs click_id %}\nThis is a unique identifier for each click\n{% enddocs %}\n\n{% docs click_time %}\nTimestamp when user clicked.\n{% enddocs %}\n\n{% docs shortened %}\nShortened URL\n{% enddocs %}\n\n{% docs target_url %}\nURL where the user will be directed\n{% enddocs %}\n\n{% docs broadcast_id %}\nID of the broadcast that generated the shortened URL\n{% enddocs %}\n\n{% docs source %}\nSource of the URL (e.g. SMS, web), origin of the post (e.g. phoenix-web, phoenix-ashes, sms), or source where user was acquired. (e.g. sms, phoenix-next)\n{% enddocs %}\n\n{% docs interaction_type %}\nHow the user interacted with the link (e.g. preview, click)\n{% enddocs %}\n\n{% docs id %}\nUnique identifier for the post\n{% enddocs %}\n\n{% docs type %}\nType of post (e.g. photo)\n{% enddocs %}\n\n{% docs action %}\nPost action (e.g. DefendDreamers_Nov9_CongressCalls, GunViolence2018_Feb15_ParklandResponse)\n{% enddocs %}\n\n{% docs status %}\nPost status (e.g. accepted, rejected)\n{% enddocs %}\n\n{% docs quantity %}\nNumerical quantity of items specified in the call to action (e.g. 10, 200)\n{% enddocs %}\n\n{% docs source_bucket %}\nGrouping bucket for origin of the post (e.g. web, sms) \n{% enddocs %}\n\n{% docs created_at %}\nWhen the item was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs updated_at %}\nWhen the item was updated in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs text %}\nText of the post (e.g. \"Zoo animals and a super hero trying to help too!\") \n{% enddocs %}\n\n{% docs signup_id %}\nUnique identifier for the signup \n{% enddocs %}\n\n{% docs post_class %}\nClass of the signup (e.g. \"photo - default\", \"phone-call - DefendDreamers_Jan16_BothBodies\")\n{% enddocs %}\n\n{% docs is_accepted %}\nWhether the post has been accepted to be displayed to the public on the website\n{% enddocs %}\n\n{% docs action_id %}\nInternal identifier of the action \n{% enddocs %}\n\n{% docs location %}\nLocation where the action takes place (e.g. US-NY)\n{% enddocs %}\n\n{% docs postal_code %}\nPostal code where the action takes place\n{% enddocs %}\n\n{% docs is_reportback %}\nWhether the post is a reportback. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs civic_action %}\nWhether the post is a Civic Action. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs scholarship_entry %}\nWhether the post is a Scholarship Entry. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs why_participated %}\nWhy the user participated in this action. Entered by the user.\n{% enddocs %}\n\n{% docs details %}\nDetails about the post. Contains contentfulId and other information (e.g. {\"campaignContentfulId\":\"6ATBgGEQEeJoIcxs1qbwaC\"})\n{% enddocs %}\n\n{% docs email %}\nEmail address of the user.\n{% enddocs %}\n\n{% docs source_details %}\nDetails about the source of the item. This is sometimes represented as a JSON object, and for other tables like Turbovote its represented as a string. (e.g. \"{\"contentful_id\":\"3CTLlXfbwtz1FOMpl31SKV\",\"utm_source\":\"scholarship_listing\",\"utm_medium\":\"referral\",\"utm_campaign\":\"fastweb_2019_08\"}\", newsletter_456)\n{% enddocs %}\n\n{% docs campaign_id %}\nThis is a unique identifier for the campaign\n{% enddocs %}\n\n{% docs campaign_run_id %}\nUnique identifier for the campaign run\n{% enddocs %}\n\n{% docs campaign_name %}\nName of the campaign\n{% enddocs %}\n\n{% docs campaign_cause %}\nCampaign cause (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_run_start_date %}\nStart date of the campaign run\n{% enddocs %}\n\n{% docs campaign_run_end_date %}\nEnd date of the campaign run\n{% enddocs %}\n\n{% docs campaign_created_date %}\nWhen the campaign was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs campaign_node_id %}\nInternal unique node id for the campaign\n{% enddocs %}\n\n{% docs campaign_node_id_title %}\nCampaign title\n{% enddocs %}\n\n{% docs campaign_run_id_title %}\nTitle of the campaign run\n{% enddocs %}\n\n{% docs campaign_action_type %}\nCampaign action type (eg. Make Something, Share Something)\n{% enddocs %}\n\n{% docs campaign_cause_type %}\nCampaign cause type (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_noun %}\nNoun applicable to the user's action\n{% enddocs %}\n\n{% docs campaign_verb %}\nVerb describing the action the user should take\n{% enddocs %}\n\n{% docs campaign_cta %}\nCampaign's call to action\n{% enddocs %}\n\n{% docs campaign_language %}\n\"Language in which the campaign is available\"\n{% enddocs %}\n\n{% docs agent_id %}\nIf set, the content type of the picture the member is sending us. Exp. image/png.\n{% enddocs %}\n\n{% docs attachment_content_type %}\nIf set, the handle of the Front agent this outbound support message is from.\n{% enddocs %}\n\n{% docs topic %}\nHolds a reference to the **last** campaign topic the member's conversation was in. This is useful to allow members to talk to Gambit and get quick responses (through Rivescript), without Gambit completely forgetting what state the member's interaction with a campaign topic was in.\n{% enddocs %}\n\n{% docs action_serial_id %}\nSerial id for the user's action. Depends on the source of the action. May be the bertly click id, sms message id, etc.\n{% enddocs %}\n\n{% docs channel %}\nChannel for the user's action. Depends on the source of the action. (e.g. web, sms)\n{% enddocs %}\n\n{% docs first_action_month %}\nMonth during which the user took their first action. \n{% enddocs %}\n\n{% docs event_id %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs event_source %}\nApplication source for event (eg. Phoenix, Northstar)\n{% enddocs %}\n\n{% docs event_datetime %}\nWhen the event occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs event_name %}\nName of the event (eg. northstar_submitted_register, https://docs.google.com/spreadsheets/d/1lm-fGrIm85nUTxSojqyCt_Ehmm1zEbViFhKpxcJiz1A/edit#gid=406441516)\n{% enddocs %}\n\n{% docs event_type %}\nType of event (pv = 'Page View', se = 'Structured Event')\n{% enddocs %}\n\n{% docs host %}\nURL host where event occurred (eg. www.dosomething.org or identity.dosomething.org)\n{% enddocs %}\n\n{% docs path %}\nURL path event occurred at (eg. /login or /us/campaigns/huddle-for-heroes)\n{% enddocs %}\n\n{% docs query_parameters %}\nOptional query parameters for the request (eg. query=huddle)\n{% enddocs %}\n\n{% docs se_category %}\nCategory of event (eg. focused_field, authentication) - Custom structured event\n{% enddocs %}\n\n{% docs se_action %}\nAction performed / event name (eg. form_submitted, action_failed) - Custom structured event\n{% enddocs %}\n\n{% docs se_label %}\nThe object of the action (eg. first_name, register, voter_reg_status) - Custom structured event\n{% enddocs %}\n\n{% docs session_id %}\nUnique identifier of the user's session\n{% enddocs %}\n\n{% docs session_counter %}\nHow many sessions a user has started\n{% enddocs %}\n\n{% docs browser_size %}\nWhich type of browser a user is using (eg. Mobile, Desktop)\n{% enddocs %}\n\n{% docs northstar_id %}\nThe Northstar ID of the user who generated the event\n{% enddocs %}\n\n{% docs device_id %}\nID of the device used\n{% enddocs %}\n\n{% docs referrer_host %}\nURL host of the referring site (eg. google.com)\n{% enddocs %}\n\n{% docs referrer_path %}\nURL path from referring site (eg. /10-stats-on-teen-drug-and-alcohol-use/)\n{% enddocs %}\n\n{% docs referrer_source %}\nReferrer source name (eg. Google, Facebook)\n{% enddocs %}\n\n{% docs utm_source %}\nTracks where the traffic is coming from. (eg. scholarship_listing, Facebook)\n{% enddocs %}\n\n{% docs utm_medium %}\nHow the traffic got to the platform (eg. referral, CPC)\n{% enddocs %}\n\n{% docs utm_campaign %}\nTracks which campaign the traffic was generated by. Shows up in Google Analytics as Campaign Name (eg. editorial_newsletter)\n{% enddocs %}\n\n{% docs url %}\nURL of campaign (eg. https://dosome.click/nyn5m7)\n{% enddocs %}\n\n{% docs modal_type %}\nNULL or SURVEY_MODAL\n{% enddocs %}\n\n{% docs landing_datetime %}\nWhen the session started in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs ending_datetime %}\nWhen the session ended in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs session_duration_seconds %}\nSession duration in seconds\n{% enddocs %}\n\n{% docs num_pages_views %}\nNumber of pages viewed in session\n{% enddocs %}\n\n{% docs landing_page %}\nFirst page the user viewed in the session (eg. /us/facts/11-facts-about-bp-oil-spill)\n{% enddocs %}\n\n{% docs exit_page %}\n\"Which page the user ended or exited their session from (eg. /us/campaigns/green-your-getaway)\"\n{% enddocs %}\n\n{% docs days_since_last_session %}\n\"Days since their last session.\"\n{% enddocs %}\n\n{% docs post_type %}\nType of post, (e.g. photo, voter-reg)\n{% enddocs %}\n\n{% docs noun %}\nNoun that corresponds to the item in the call to action that was delivered. (e.g. drawings, tweets)\n{% enddocs %}\n\n{% docs verb %}\nVerb corresponding to the action the user took. (e.g. shared, sent, taken)\n{% enddocs %}\n\n{% docs deleted_at %}\nDate time in UTC when a user deleted their post.\n{% enddocs %}\n\n{% docs _fivetran_deleted %}\nMarks rows that were deleted in the source table\n{% enddocs %}\n\n{% docs _fivetran_synced %}\n(UTC timestamp) keeps track of when each row was last successfully synced\n{% enddocs %}\n\n{% docs reportback %}\nWhether the post is a reportback \n{% enddocs %}\n\n{% docs active %}\nWhether the user is active \n{% enddocs %}\n\n{% docs anonymous %}\nWhether the user is anonymous when making the post \n{% enddocs %}\n\n{% docs callpower_campaign_id %}\nUnique ID corresponding to the Callpower campaign. Callpower allows users to record messages for their representatives.\n{% enddocs %}\n\n{% docs quiz %}\nWhether the post is a quiz \n{% enddocs %}\n\n{% docs action_type %}\nType of action the user took. (e.g. share-something, donate-something)\n{% enddocs %}\n\n{% docs online %}\nWhether the action is a online as opposed to IRL.\n{% enddocs %}\n\n{% docs time_commitment %}\nEstimated time required to do the action (e.g. 3.0+, <0.5)\n{% enddocs %}\n\n{% docs num_signups %}\nQuantity of campaign signups\n{% enddocs %}\n\n{% docs most_recent_signup %}\nTimestamp of the most recent signup in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs num_rbs %}\nQuantity of reportbacks for the user\n{% enddocs %}\n\n{% docs total_quantity %}\nTotal quantity of items in reportbacks\n{% enddocs %}\n\n{% docs most_recent_rb %}\nWhen the most recent reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs first_rb %}\nWhen the first reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs avg_time_betw_rbs %}\nCalculated average time between reportbacks.\n{% enddocs %}\n\n{% docs avg_days_next_action_after_rb %}\nCalculated average days until next action after reportback\n{% enddocs %}\n\n{% docs days_to_next_action_after_last_rb %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs most_recent_mam_action %}\nMost recent monthly active member qualifying action in UTC (eg. 2018-01-01 12:00:00).\n{% enddocs %}\n\n{% docs most_recent_email_open %}\nMost recent email open in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs most_recent_all_actions %}\nMost recent timestamp of any action in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs last_action_is_rb %}\nWhether the last action the user took was a reportback\n{% enddocs %}\n\n{% docs days_since_last_action %}\nDays since the user's last action\n{% enddocs %}\n\n{% docs time_to_first_rb %}\nHow much time after registering until the user's first reportback\n{% enddocs %}\n\n{% docs sms_unsubscribed_at %}\nTimestamp of when user unsubscribed from SMS messaging\n{% enddocs %}\n\n{% docs user_unsubscribed_at %}\nTimestamp of when user unsubscribed from email or sms\n{% enddocs %}\n\n{% docs voter_reg_acquisition %}\nWhether the user was an acquisition through voter registration efforts. \n{% enddocs %}\n\n{% docs last_logged_in %}\nDate time in UTC when user last logged in to Northstar\n{% enddocs %}\n\n{% docs last_accessed %}\nDate time in UTC when user last access the website\n{% enddocs %}\n\n{% docs last_messaged_at %}\nDate time in UTC when user was last sent a message via SMS or email\n{% enddocs %}\n\n{% docs facebook_id %}\nUser's facebook id\n{% enddocs %}\n\n{% docs mobile %}\nUsers's mobile phone number\n{% enddocs %}\n\n{% docs birthdate %}\nUser's birthdate\n{% enddocs %}\n\n{% docs first_name %}\nUser's first name\n{% enddocs %}\n\n{% docs last_name %}\nUser's last name\n{% enddocs %}\n\n{% docs voter_registration_status %}\nUser's registration status. (e.g. registration_complete, confirmed, uncertain) \n{% enddocs %}\n\n{% docs finish_with_state %}\nIf the registrant was eligible to use and passed through to complete their registration with their state\u2019s OVR system, it will be indicated in this field (direct quote from Rock-The-Vote documentation). Yes/No value in field.\n{% enddocs %}\n\n{% docs reportback_volume %}\nThis field returns 1 if non voter-reg action, since campaigns team only counts those a 1 reportback. If voter-reg action, we want to count quantity of post as number of registered voters.\n{% enddocs %}\n\n{% docs address_street_1 %}\nFirst line of user's street address\n{% enddocs %}\n\n{% docs address_street_2 %}\nSecond line of user's street address\n{% enddocs %}\n\n{% docs city %}\nUser's city\n{% enddocs %}\n\n{% docs state %}\nUser's state\n{% enddocs %}\n\n{% docs country %}\nUser's country\n{% enddocs %}\n\n{% docs language %}\nUser's language\n{% enddocs %}\n\n{% docs cio_status %}\nStatus of user from CIO. (e.g. customer_subscribed, customer_unsubscribed)\n{% enddocs %}\n\n{% docs cio_status_timestamp %}\nTimestamp when users's status was updated.\n{% enddocs %}\n\n{% docs sms_status %}\nCurrent SMS status. (e.g. undeliverable, unknown)\n{% enddocs %}\n\n{% docs source_detail %}\nDetails of the origin of the user. (e.g. tell_a_friend, other, opt_in_path/197981)\n{% enddocs %}\n\n{% docs badges %}\nWhether the user has any badges. \n{% enddocs %}\n\n{% docs refer_friends %}\nWhether the user is a part of the refer a friend campaign. \n{% enddocs %}\n\n{% docs subscribed_member %}\nWhether the user is subscribed. \n{% enddocs %}\n\n{% docs last_updated_at %}\nTimestamp when users's was updated.\n{% enddocs %}\n\n{% docs school_id %}\nUnique identifier for the user's school. This info comes from the school finder.\n{% enddocs %}\n\n{% docs newsletter_topic %}\nNewsletter topic. (e.g. community, lifestyle)\n{% enddocs %}\n\n{% docs user_agent %}\nFull user agent string for a user's browser (e.g. \"Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:24.0) Gecko/20100101 Firefox/24.0\")\n{% enddocs %}\n\n{% docs drupal_id %}\nOld Drupal user ID\n{% enddocs %}\n\n{% docs campaigns %}\nCampaigns a user is signed up for.\n{% enddocs %}\n\n{% docs audit %}\nA very useful field with data containing information about changes to a user, e.g. timestamps when the user subscribed and unsubscribed.\n{% enddocs %}\n\n{% docs voting_plan_status %}\nThe indication of the user's plan to vote, e.g. voting, not_voting, cant_vote\n{% enddocs %}\n\n{% docs voting_plan_time_of_day %}\nThe time of day when the user plans to vote, e.g morning, afternoon, evening\n{% enddocs %}\n\n{% docs voting_plan_method_of_transport %}\nHow the user plans to get to their polling place. e.g. walk, drive\n{% enddocs %}\n\n{% docs voting_plan_attending_with %}\nWith Whom the user plans to go voting, e.g. family, friends, alone\n{% enddocs %}\n\n{% docs feature_flags %}\nJSON containing info on features like badges and refer-a-friend.\n{% enddocs %}\n\n{% docs dbt_updated_at %}\nDBT snapshot table data. The updated_at timestamp of the source record when this snapshot row was inserted.\n{% enddocs %}\n\n{% docs dbt_scd_id %}\nDBT snapshot table data. A unique key generated for each snapshotted record.\n{% enddocs %}\n\n{% docs dbt_valid_from %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this snapshot row was first inserted\n{% enddocs %}\n\n{% docs dbt_valid_to %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this row row became invalidated.\n{% enddocs %}\n\n{% docs google_id %}\nUser's Google ID obtained from login.\n{% enddocs %}\n\n{% docs causes %}\nCauses in which a user is interested. e.g. animal welfare, education, mental_health\n{% enddocs %}\n\n{% docs email_subscription_status %}\nEmail subscription status of the user\n{% enddocs %}\n\n{% docs role %}\nUser's role, e.g. user, staff\n{% enddocs %}\n\n{% docs cio_backfilled %}\nWhether this user's data was backfilled from CIO\n{% enddocs %}\n\n{% docs addr_source %}\nWhere the user submitted their address, e.g. sms, GDPR\n{% enddocs %}\n\n{% docs email_subscription_topics %}\nEmail subscription topics correspond to categories in CIO in which the user is interested. e.g. lifestyle, community, scholarship\n{% enddocs %}\n\n{% docs sms_paused %}\nWhether we've paused sending sms messages to the user.\n{% enddocs %}\n\n\n\n\n", "name": "days_since_last_action", "unique_id": "ds_dbt.days_since_last_action", "block_contents": "Days since the user's last action"}, "ds_dbt.time_to_first_rb": {"root_path": "/Users/mrich/projects/quasar/quasar/dbt", "resource_type": "docs", "path": "schema.md", "original_file_path": "models/schema.md", "package_name": "ds_dbt", "file_contents": "\n{% docs click_id %}\nThis is a unique identifier for each click\n{% enddocs %}\n\n{% docs click_time %}\nTimestamp when user clicked.\n{% enddocs %}\n\n{% docs shortened %}\nShortened URL\n{% enddocs %}\n\n{% docs target_url %}\nURL where the user will be directed\n{% enddocs %}\n\n{% docs broadcast_id %}\nID of the broadcast that generated the shortened URL\n{% enddocs %}\n\n{% docs source %}\nSource of the URL (e.g. SMS, web), origin of the post (e.g. phoenix-web, phoenix-ashes, sms), or source where user was acquired. (e.g. sms, phoenix-next)\n{% enddocs %}\n\n{% docs interaction_type %}\nHow the user interacted with the link (e.g. preview, click)\n{% enddocs %}\n\n{% docs id %}\nUnique identifier for the post\n{% enddocs %}\n\n{% docs type %}\nType of post (e.g. photo)\n{% enddocs %}\n\n{% docs action %}\nPost action (e.g. DefendDreamers_Nov9_CongressCalls, GunViolence2018_Feb15_ParklandResponse)\n{% enddocs %}\n\n{% docs status %}\nPost status (e.g. accepted, rejected)\n{% enddocs %}\n\n{% docs quantity %}\nNumerical quantity of items specified in the call to action (e.g. 10, 200)\n{% enddocs %}\n\n{% docs source_bucket %}\nGrouping bucket for origin of the post (e.g. web, sms) \n{% enddocs %}\n\n{% docs created_at %}\nWhen the item was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs updated_at %}\nWhen the item was updated in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs text %}\nText of the post (e.g. \"Zoo animals and a super hero trying to help too!\") \n{% enddocs %}\n\n{% docs signup_id %}\nUnique identifier for the signup \n{% enddocs %}\n\n{% docs post_class %}\nClass of the signup (e.g. \"photo - default\", \"phone-call - DefendDreamers_Jan16_BothBodies\")\n{% enddocs %}\n\n{% docs is_accepted %}\nWhether the post has been accepted to be displayed to the public on the website\n{% enddocs %}\n\n{% docs action_id %}\nInternal identifier of the action \n{% enddocs %}\n\n{% docs location %}\nLocation where the action takes place (e.g. US-NY)\n{% enddocs %}\n\n{% docs postal_code %}\nPostal code where the action takes place\n{% enddocs %}\n\n{% docs is_reportback %}\nWhether the post is a reportback. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs civic_action %}\nWhether the post is a Civic Action. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs scholarship_entry %}\nWhether the post is a Scholarship Entry. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs why_participated %}\nWhy the user participated in this action. Entered by the user.\n{% enddocs %}\n\n{% docs details %}\nDetails about the post. Contains contentfulId and other information (e.g. {\"campaignContentfulId\":\"6ATBgGEQEeJoIcxs1qbwaC\"})\n{% enddocs %}\n\n{% docs email %}\nEmail address of the user.\n{% enddocs %}\n\n{% docs source_details %}\nDetails about the source of the item. This is sometimes represented as a JSON object, and for other tables like Turbovote its represented as a string. (e.g. \"{\"contentful_id\":\"3CTLlXfbwtz1FOMpl31SKV\",\"utm_source\":\"scholarship_listing\",\"utm_medium\":\"referral\",\"utm_campaign\":\"fastweb_2019_08\"}\", newsletter_456)\n{% enddocs %}\n\n{% docs campaign_id %}\nThis is a unique identifier for the campaign\n{% enddocs %}\n\n{% docs campaign_run_id %}\nUnique identifier for the campaign run\n{% enddocs %}\n\n{% docs campaign_name %}\nName of the campaign\n{% enddocs %}\n\n{% docs campaign_cause %}\nCampaign cause (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_run_start_date %}\nStart date of the campaign run\n{% enddocs %}\n\n{% docs campaign_run_end_date %}\nEnd date of the campaign run\n{% enddocs %}\n\n{% docs campaign_created_date %}\nWhen the campaign was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs campaign_node_id %}\nInternal unique node id for the campaign\n{% enddocs %}\n\n{% docs campaign_node_id_title %}\nCampaign title\n{% enddocs %}\n\n{% docs campaign_run_id_title %}\nTitle of the campaign run\n{% enddocs %}\n\n{% docs campaign_action_type %}\nCampaign action type (eg. Make Something, Share Something)\n{% enddocs %}\n\n{% docs campaign_cause_type %}\nCampaign cause type (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_noun %}\nNoun applicable to the user's action\n{% enddocs %}\n\n{% docs campaign_verb %}\nVerb describing the action the user should take\n{% enddocs %}\n\n{% docs campaign_cta %}\nCampaign's call to action\n{% enddocs %}\n\n{% docs campaign_language %}\n\"Language in which the campaign is available\"\n{% enddocs %}\n\n{% docs agent_id %}\nIf set, the content type of the picture the member is sending us. Exp. image/png.\n{% enddocs %}\n\n{% docs attachment_content_type %}\nIf set, the handle of the Front agent this outbound support message is from.\n{% enddocs %}\n\n{% docs topic %}\nHolds a reference to the **last** campaign topic the member's conversation was in. This is useful to allow members to talk to Gambit and get quick responses (through Rivescript), without Gambit completely forgetting what state the member's interaction with a campaign topic was in.\n{% enddocs %}\n\n{% docs action_serial_id %}\nSerial id for the user's action. Depends on the source of the action. May be the bertly click id, sms message id, etc.\n{% enddocs %}\n\n{% docs channel %}\nChannel for the user's action. Depends on the source of the action. (e.g. web, sms)\n{% enddocs %}\n\n{% docs first_action_month %}\nMonth during which the user took their first action. \n{% enddocs %}\n\n{% docs event_id %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs event_source %}\nApplication source for event (eg. Phoenix, Northstar)\n{% enddocs %}\n\n{% docs event_datetime %}\nWhen the event occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs event_name %}\nName of the event (eg. northstar_submitted_register, https://docs.google.com/spreadsheets/d/1lm-fGrIm85nUTxSojqyCt_Ehmm1zEbViFhKpxcJiz1A/edit#gid=406441516)\n{% enddocs %}\n\n{% docs event_type %}\nType of event (pv = 'Page View', se = 'Structured Event')\n{% enddocs %}\n\n{% docs host %}\nURL host where event occurred (eg. www.dosomething.org or identity.dosomething.org)\n{% enddocs %}\n\n{% docs path %}\nURL path event occurred at (eg. /login or /us/campaigns/huddle-for-heroes)\n{% enddocs %}\n\n{% docs query_parameters %}\nOptional query parameters for the request (eg. query=huddle)\n{% enddocs %}\n\n{% docs se_category %}\nCategory of event (eg. focused_field, authentication) - Custom structured event\n{% enddocs %}\n\n{% docs se_action %}\nAction performed / event name (eg. form_submitted, action_failed) - Custom structured event\n{% enddocs %}\n\n{% docs se_label %}\nThe object of the action (eg. first_name, register, voter_reg_status) - Custom structured event\n{% enddocs %}\n\n{% docs session_id %}\nUnique identifier of the user's session\n{% enddocs %}\n\n{% docs session_counter %}\nHow many sessions a user has started\n{% enddocs %}\n\n{% docs browser_size %}\nWhich type of browser a user is using (eg. Mobile, Desktop)\n{% enddocs %}\n\n{% docs northstar_id %}\nThe Northstar ID of the user who generated the event\n{% enddocs %}\n\n{% docs device_id %}\nID of the device used\n{% enddocs %}\n\n{% docs referrer_host %}\nURL host of the referring site (eg. google.com)\n{% enddocs %}\n\n{% docs referrer_path %}\nURL path from referring site (eg. /10-stats-on-teen-drug-and-alcohol-use/)\n{% enddocs %}\n\n{% docs referrer_source %}\nReferrer source name (eg. Google, Facebook)\n{% enddocs %}\n\n{% docs utm_source %}\nTracks where the traffic is coming from. (eg. scholarship_listing, Facebook)\n{% enddocs %}\n\n{% docs utm_medium %}\nHow the traffic got to the platform (eg. referral, CPC)\n{% enddocs %}\n\n{% docs utm_campaign %}\nTracks which campaign the traffic was generated by. Shows up in Google Analytics as Campaign Name (eg. editorial_newsletter)\n{% enddocs %}\n\n{% docs url %}\nURL of campaign (eg. https://dosome.click/nyn5m7)\n{% enddocs %}\n\n{% docs modal_type %}\nNULL or SURVEY_MODAL\n{% enddocs %}\n\n{% docs landing_datetime %}\nWhen the session started in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs ending_datetime %}\nWhen the session ended in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs session_duration_seconds %}\nSession duration in seconds\n{% enddocs %}\n\n{% docs num_pages_views %}\nNumber of pages viewed in session\n{% enddocs %}\n\n{% docs landing_page %}\nFirst page the user viewed in the session (eg. /us/facts/11-facts-about-bp-oil-spill)\n{% enddocs %}\n\n{% docs exit_page %}\n\"Which page the user ended or exited their session from (eg. /us/campaigns/green-your-getaway)\"\n{% enddocs %}\n\n{% docs days_since_last_session %}\n\"Days since their last session.\"\n{% enddocs %}\n\n{% docs post_type %}\nType of post, (e.g. photo, voter-reg)\n{% enddocs %}\n\n{% docs noun %}\nNoun that corresponds to the item in the call to action that was delivered. (e.g. drawings, tweets)\n{% enddocs %}\n\n{% docs verb %}\nVerb corresponding to the action the user took. (e.g. shared, sent, taken)\n{% enddocs %}\n\n{% docs deleted_at %}\nDate time in UTC when a user deleted their post.\n{% enddocs %}\n\n{% docs _fivetran_deleted %}\nMarks rows that were deleted in the source table\n{% enddocs %}\n\n{% docs _fivetran_synced %}\n(UTC timestamp) keeps track of when each row was last successfully synced\n{% enddocs %}\n\n{% docs reportback %}\nWhether the post is a reportback \n{% enddocs %}\n\n{% docs active %}\nWhether the user is active \n{% enddocs %}\n\n{% docs anonymous %}\nWhether the user is anonymous when making the post \n{% enddocs %}\n\n{% docs callpower_campaign_id %}\nUnique ID corresponding to the Callpower campaign. Callpower allows users to record messages for their representatives.\n{% enddocs %}\n\n{% docs quiz %}\nWhether the post is a quiz \n{% enddocs %}\n\n{% docs action_type %}\nType of action the user took. (e.g. share-something, donate-something)\n{% enddocs %}\n\n{% docs online %}\nWhether the action is a online as opposed to IRL.\n{% enddocs %}\n\n{% docs time_commitment %}\nEstimated time required to do the action (e.g. 3.0+, <0.5)\n{% enddocs %}\n\n{% docs num_signups %}\nQuantity of campaign signups\n{% enddocs %}\n\n{% docs most_recent_signup %}\nTimestamp of the most recent signup in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs num_rbs %}\nQuantity of reportbacks for the user\n{% enddocs %}\n\n{% docs total_quantity %}\nTotal quantity of items in reportbacks\n{% enddocs %}\n\n{% docs most_recent_rb %}\nWhen the most recent reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs first_rb %}\nWhen the first reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs avg_time_betw_rbs %}\nCalculated average time between reportbacks.\n{% enddocs %}\n\n{% docs avg_days_next_action_after_rb %}\nCalculated average days until next action after reportback\n{% enddocs %}\n\n{% docs days_to_next_action_after_last_rb %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs most_recent_mam_action %}\nMost recent monthly active member qualifying action in UTC (eg. 2018-01-01 12:00:00).\n{% enddocs %}\n\n{% docs most_recent_email_open %}\nMost recent email open in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs most_recent_all_actions %}\nMost recent timestamp of any action in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs last_action_is_rb %}\nWhether the last action the user took was a reportback\n{% enddocs %}\n\n{% docs days_since_last_action %}\nDays since the user's last action\n{% enddocs %}\n\n{% docs time_to_first_rb %}\nHow much time after registering until the user's first reportback\n{% enddocs %}\n\n{% docs sms_unsubscribed_at %}\nTimestamp of when user unsubscribed from SMS messaging\n{% enddocs %}\n\n{% docs user_unsubscribed_at %}\nTimestamp of when user unsubscribed from email or sms\n{% enddocs %}\n\n{% docs voter_reg_acquisition %}\nWhether the user was an acquisition through voter registration efforts. \n{% enddocs %}\n\n{% docs last_logged_in %}\nDate time in UTC when user last logged in to Northstar\n{% enddocs %}\n\n{% docs last_accessed %}\nDate time in UTC when user last access the website\n{% enddocs %}\n\n{% docs last_messaged_at %}\nDate time in UTC when user was last sent a message via SMS or email\n{% enddocs %}\n\n{% docs facebook_id %}\nUser's facebook id\n{% enddocs %}\n\n{% docs mobile %}\nUsers's mobile phone number\n{% enddocs %}\n\n{% docs birthdate %}\nUser's birthdate\n{% enddocs %}\n\n{% docs first_name %}\nUser's first name\n{% enddocs %}\n\n{% docs last_name %}\nUser's last name\n{% enddocs %}\n\n{% docs voter_registration_status %}\nUser's registration status. (e.g. registration_complete, confirmed, uncertain) \n{% enddocs %}\n\n{% docs finish_with_state %}\nIf the registrant was eligible to use and passed through to complete their registration with their state\u2019s OVR system, it will be indicated in this field (direct quote from Rock-The-Vote documentation). Yes/No value in field.\n{% enddocs %}\n\n{% docs reportback_volume %}\nThis field returns 1 if non voter-reg action, since campaigns team only counts those a 1 reportback. If voter-reg action, we want to count quantity of post as number of registered voters.\n{% enddocs %}\n\n{% docs address_street_1 %}\nFirst line of user's street address\n{% enddocs %}\n\n{% docs address_street_2 %}\nSecond line of user's street address\n{% enddocs %}\n\n{% docs city %}\nUser's city\n{% enddocs %}\n\n{% docs state %}\nUser's state\n{% enddocs %}\n\n{% docs country %}\nUser's country\n{% enddocs %}\n\n{% docs language %}\nUser's language\n{% enddocs %}\n\n{% docs cio_status %}\nStatus of user from CIO. (e.g. customer_subscribed, customer_unsubscribed)\n{% enddocs %}\n\n{% docs cio_status_timestamp %}\nTimestamp when users's status was updated.\n{% enddocs %}\n\n{% docs sms_status %}\nCurrent SMS status. (e.g. undeliverable, unknown)\n{% enddocs %}\n\n{% docs source_detail %}\nDetails of the origin of the user. (e.g. tell_a_friend, other, opt_in_path/197981)\n{% enddocs %}\n\n{% docs badges %}\nWhether the user has any badges. \n{% enddocs %}\n\n{% docs refer_friends %}\nWhether the user is a part of the refer a friend campaign. \n{% enddocs %}\n\n{% docs subscribed_member %}\nWhether the user is subscribed. \n{% enddocs %}\n\n{% docs last_updated_at %}\nTimestamp when users's was updated.\n{% enddocs %}\n\n{% docs school_id %}\nUnique identifier for the user's school. This info comes from the school finder.\n{% enddocs %}\n\n{% docs newsletter_topic %}\nNewsletter topic. (e.g. community, lifestyle)\n{% enddocs %}\n\n{% docs user_agent %}\nFull user agent string for a user's browser (e.g. \"Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:24.0) Gecko/20100101 Firefox/24.0\")\n{% enddocs %}\n\n{% docs drupal_id %}\nOld Drupal user ID\n{% enddocs %}\n\n{% docs campaigns %}\nCampaigns a user is signed up for.\n{% enddocs %}\n\n{% docs audit %}\nA very useful field with data containing information about changes to a user, e.g. timestamps when the user subscribed and unsubscribed.\n{% enddocs %}\n\n{% docs voting_plan_status %}\nThe indication of the user's plan to vote, e.g. voting, not_voting, cant_vote\n{% enddocs %}\n\n{% docs voting_plan_time_of_day %}\nThe time of day when the user plans to vote, e.g morning, afternoon, evening\n{% enddocs %}\n\n{% docs voting_plan_method_of_transport %}\nHow the user plans to get to their polling place. e.g. walk, drive\n{% enddocs %}\n\n{% docs voting_plan_attending_with %}\nWith Whom the user plans to go voting, e.g. family, friends, alone\n{% enddocs %}\n\n{% docs feature_flags %}\nJSON containing info on features like badges and refer-a-friend.\n{% enddocs %}\n\n{% docs dbt_updated_at %}\nDBT snapshot table data. The updated_at timestamp of the source record when this snapshot row was inserted.\n{% enddocs %}\n\n{% docs dbt_scd_id %}\nDBT snapshot table data. A unique key generated for each snapshotted record.\n{% enddocs %}\n\n{% docs dbt_valid_from %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this snapshot row was first inserted\n{% enddocs %}\n\n{% docs dbt_valid_to %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this row row became invalidated.\n{% enddocs %}\n\n{% docs google_id %}\nUser's Google ID obtained from login.\n{% enddocs %}\n\n{% docs causes %}\nCauses in which a user is interested. e.g. animal welfare, education, mental_health\n{% enddocs %}\n\n{% docs email_subscription_status %}\nEmail subscription status of the user\n{% enddocs %}\n\n{% docs role %}\nUser's role, e.g. user, staff\n{% enddocs %}\n\n{% docs cio_backfilled %}\nWhether this user's data was backfilled from CIO\n{% enddocs %}\n\n{% docs addr_source %}\nWhere the user submitted their address, e.g. sms, GDPR\n{% enddocs %}\n\n{% docs email_subscription_topics %}\nEmail subscription topics correspond to categories in CIO in which the user is interested. e.g. lifestyle, community, scholarship\n{% enddocs %}\n\n{% docs sms_paused %}\nWhether we've paused sending sms messages to the user.\n{% enddocs %}\n\n\n\n\n", "name": "time_to_first_rb", "unique_id": "ds_dbt.time_to_first_rb", "block_contents": "How much time after registering until the user's first reportback"}, "ds_dbt.sms_unsubscribed_at": {"root_path": "/Users/mrich/projects/quasar/quasar/dbt", "resource_type": "docs", "path": "schema.md", "original_file_path": "models/schema.md", "package_name": "ds_dbt", "file_contents": "\n{% docs click_id %}\nThis is a unique identifier for each click\n{% enddocs %}\n\n{% docs click_time %}\nTimestamp when user clicked.\n{% enddocs %}\n\n{% docs shortened %}\nShortened URL\n{% enddocs %}\n\n{% docs target_url %}\nURL where the user will be directed\n{% enddocs %}\n\n{% docs broadcast_id %}\nID of the broadcast that generated the shortened URL\n{% enddocs %}\n\n{% docs source %}\nSource of the URL (e.g. SMS, web), origin of the post (e.g. phoenix-web, phoenix-ashes, sms), or source where user was acquired. (e.g. sms, phoenix-next)\n{% enddocs %}\n\n{% docs interaction_type %}\nHow the user interacted with the link (e.g. preview, click)\n{% enddocs %}\n\n{% docs id %}\nUnique identifier for the post\n{% enddocs %}\n\n{% docs type %}\nType of post (e.g. photo)\n{% enddocs %}\n\n{% docs action %}\nPost action (e.g. DefendDreamers_Nov9_CongressCalls, GunViolence2018_Feb15_ParklandResponse)\n{% enddocs %}\n\n{% docs status %}\nPost status (e.g. accepted, rejected)\n{% enddocs %}\n\n{% docs quantity %}\nNumerical quantity of items specified in the call to action (e.g. 10, 200)\n{% enddocs %}\n\n{% docs source_bucket %}\nGrouping bucket for origin of the post (e.g. web, sms) \n{% enddocs %}\n\n{% docs created_at %}\nWhen the item was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs updated_at %}\nWhen the item was updated in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs text %}\nText of the post (e.g. \"Zoo animals and a super hero trying to help too!\") \n{% enddocs %}\n\n{% docs signup_id %}\nUnique identifier for the signup \n{% enddocs %}\n\n{% docs post_class %}\nClass of the signup (e.g. \"photo - default\", \"phone-call - DefendDreamers_Jan16_BothBodies\")\n{% enddocs %}\n\n{% docs is_accepted %}\nWhether the post has been accepted to be displayed to the public on the website\n{% enddocs %}\n\n{% docs action_id %}\nInternal identifier of the action \n{% enddocs %}\n\n{% docs location %}\nLocation where the action takes place (e.g. US-NY)\n{% enddocs %}\n\n{% docs postal_code %}\nPostal code where the action takes place\n{% enddocs %}\n\n{% docs is_reportback %}\nWhether the post is a reportback. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs civic_action %}\nWhether the post is a Civic Action. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs scholarship_entry %}\nWhether the post is a Scholarship Entry. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs why_participated %}\nWhy the user participated in this action. Entered by the user.\n{% enddocs %}\n\n{% docs details %}\nDetails about the post. Contains contentfulId and other information (e.g. {\"campaignContentfulId\":\"6ATBgGEQEeJoIcxs1qbwaC\"})\n{% enddocs %}\n\n{% docs email %}\nEmail address of the user.\n{% enddocs %}\n\n{% docs source_details %}\nDetails about the source of the item. This is sometimes represented as a JSON object, and for other tables like Turbovote its represented as a string. (e.g. \"{\"contentful_id\":\"3CTLlXfbwtz1FOMpl31SKV\",\"utm_source\":\"scholarship_listing\",\"utm_medium\":\"referral\",\"utm_campaign\":\"fastweb_2019_08\"}\", newsletter_456)\n{% enddocs %}\n\n{% docs campaign_id %}\nThis is a unique identifier for the campaign\n{% enddocs %}\n\n{% docs campaign_run_id %}\nUnique identifier for the campaign run\n{% enddocs %}\n\n{% docs campaign_name %}\nName of the campaign\n{% enddocs %}\n\n{% docs campaign_cause %}\nCampaign cause (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_run_start_date %}\nStart date of the campaign run\n{% enddocs %}\n\n{% docs campaign_run_end_date %}\nEnd date of the campaign run\n{% enddocs %}\n\n{% docs campaign_created_date %}\nWhen the campaign was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs campaign_node_id %}\nInternal unique node id for the campaign\n{% enddocs %}\n\n{% docs campaign_node_id_title %}\nCampaign title\n{% enddocs %}\n\n{% docs campaign_run_id_title %}\nTitle of the campaign run\n{% enddocs %}\n\n{% docs campaign_action_type %}\nCampaign action type (eg. Make Something, Share Something)\n{% enddocs %}\n\n{% docs campaign_cause_type %}\nCampaign cause type (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_noun %}\nNoun applicable to the user's action\n{% enddocs %}\n\n{% docs campaign_verb %}\nVerb describing the action the user should take\n{% enddocs %}\n\n{% docs campaign_cta %}\nCampaign's call to action\n{% enddocs %}\n\n{% docs campaign_language %}\n\"Language in which the campaign is available\"\n{% enddocs %}\n\n{% docs agent_id %}\nIf set, the content type of the picture the member is sending us. Exp. image/png.\n{% enddocs %}\n\n{% docs attachment_content_type %}\nIf set, the handle of the Front agent this outbound support message is from.\n{% enddocs %}\n\n{% docs topic %}\nHolds a reference to the **last** campaign topic the member's conversation was in. This is useful to allow members to talk to Gambit and get quick responses (through Rivescript), without Gambit completely forgetting what state the member's interaction with a campaign topic was in.\n{% enddocs %}\n\n{% docs action_serial_id %}\nSerial id for the user's action. Depends on the source of the action. May be the bertly click id, sms message id, etc.\n{% enddocs %}\n\n{% docs channel %}\nChannel for the user's action. Depends on the source of the action. (e.g. web, sms)\n{% enddocs %}\n\n{% docs first_action_month %}\nMonth during which the user took their first action. \n{% enddocs %}\n\n{% docs event_id %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs event_source %}\nApplication source for event (eg. Phoenix, Northstar)\n{% enddocs %}\n\n{% docs event_datetime %}\nWhen the event occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs event_name %}\nName of the event (eg. northstar_submitted_register, https://docs.google.com/spreadsheets/d/1lm-fGrIm85nUTxSojqyCt_Ehmm1zEbViFhKpxcJiz1A/edit#gid=406441516)\n{% enddocs %}\n\n{% docs event_type %}\nType of event (pv = 'Page View', se = 'Structured Event')\n{% enddocs %}\n\n{% docs host %}\nURL host where event occurred (eg. www.dosomething.org or identity.dosomething.org)\n{% enddocs %}\n\n{% docs path %}\nURL path event occurred at (eg. /login or /us/campaigns/huddle-for-heroes)\n{% enddocs %}\n\n{% docs query_parameters %}\nOptional query parameters for the request (eg. query=huddle)\n{% enddocs %}\n\n{% docs se_category %}\nCategory of event (eg. focused_field, authentication) - Custom structured event\n{% enddocs %}\n\n{% docs se_action %}\nAction performed / event name (eg. form_submitted, action_failed) - Custom structured event\n{% enddocs %}\n\n{% docs se_label %}\nThe object of the action (eg. first_name, register, voter_reg_status) - Custom structured event\n{% enddocs %}\n\n{% docs session_id %}\nUnique identifier of the user's session\n{% enddocs %}\n\n{% docs session_counter %}\nHow many sessions a user has started\n{% enddocs %}\n\n{% docs browser_size %}\nWhich type of browser a user is using (eg. Mobile, Desktop)\n{% enddocs %}\n\n{% docs northstar_id %}\nThe Northstar ID of the user who generated the event\n{% enddocs %}\n\n{% docs device_id %}\nID of the device used\n{% enddocs %}\n\n{% docs referrer_host %}\nURL host of the referring site (eg. google.com)\n{% enddocs %}\n\n{% docs referrer_path %}\nURL path from referring site (eg. /10-stats-on-teen-drug-and-alcohol-use/)\n{% enddocs %}\n\n{% docs referrer_source %}\nReferrer source name (eg. Google, Facebook)\n{% enddocs %}\n\n{% docs utm_source %}\nTracks where the traffic is coming from. (eg. scholarship_listing, Facebook)\n{% enddocs %}\n\n{% docs utm_medium %}\nHow the traffic got to the platform (eg. referral, CPC)\n{% enddocs %}\n\n{% docs utm_campaign %}\nTracks which campaign the traffic was generated by. Shows up in Google Analytics as Campaign Name (eg. editorial_newsletter)\n{% enddocs %}\n\n{% docs url %}\nURL of campaign (eg. https://dosome.click/nyn5m7)\n{% enddocs %}\n\n{% docs modal_type %}\nNULL or SURVEY_MODAL\n{% enddocs %}\n\n{% docs landing_datetime %}\nWhen the session started in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs ending_datetime %}\nWhen the session ended in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs session_duration_seconds %}\nSession duration in seconds\n{% enddocs %}\n\n{% docs num_pages_views %}\nNumber of pages viewed in session\n{% enddocs %}\n\n{% docs landing_page %}\nFirst page the user viewed in the session (eg. /us/facts/11-facts-about-bp-oil-spill)\n{% enddocs %}\n\n{% docs exit_page %}\n\"Which page the user ended or exited their session from (eg. /us/campaigns/green-your-getaway)\"\n{% enddocs %}\n\n{% docs days_since_last_session %}\n\"Days since their last session.\"\n{% enddocs %}\n\n{% docs post_type %}\nType of post, (e.g. photo, voter-reg)\n{% enddocs %}\n\n{% docs noun %}\nNoun that corresponds to the item in the call to action that was delivered. (e.g. drawings, tweets)\n{% enddocs %}\n\n{% docs verb %}\nVerb corresponding to the action the user took. (e.g. shared, sent, taken)\n{% enddocs %}\n\n{% docs deleted_at %}\nDate time in UTC when a user deleted their post.\n{% enddocs %}\n\n{% docs _fivetran_deleted %}\nMarks rows that were deleted in the source table\n{% enddocs %}\n\n{% docs _fivetran_synced %}\n(UTC timestamp) keeps track of when each row was last successfully synced\n{% enddocs %}\n\n{% docs reportback %}\nWhether the post is a reportback \n{% enddocs %}\n\n{% docs active %}\nWhether the user is active \n{% enddocs %}\n\n{% docs anonymous %}\nWhether the user is anonymous when making the post \n{% enddocs %}\n\n{% docs callpower_campaign_id %}\nUnique ID corresponding to the Callpower campaign. Callpower allows users to record messages for their representatives.\n{% enddocs %}\n\n{% docs quiz %}\nWhether the post is a quiz \n{% enddocs %}\n\n{% docs action_type %}\nType of action the user took. (e.g. share-something, donate-something)\n{% enddocs %}\n\n{% docs online %}\nWhether the action is a online as opposed to IRL.\n{% enddocs %}\n\n{% docs time_commitment %}\nEstimated time required to do the action (e.g. 3.0+, <0.5)\n{% enddocs %}\n\n{% docs num_signups %}\nQuantity of campaign signups\n{% enddocs %}\n\n{% docs most_recent_signup %}\nTimestamp of the most recent signup in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs num_rbs %}\nQuantity of reportbacks for the user\n{% enddocs %}\n\n{% docs total_quantity %}\nTotal quantity of items in reportbacks\n{% enddocs %}\n\n{% docs most_recent_rb %}\nWhen the most recent reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs first_rb %}\nWhen the first reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs avg_time_betw_rbs %}\nCalculated average time between reportbacks.\n{% enddocs %}\n\n{% docs avg_days_next_action_after_rb %}\nCalculated average days until next action after reportback\n{% enddocs %}\n\n{% docs days_to_next_action_after_last_rb %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs most_recent_mam_action %}\nMost recent monthly active member qualifying action in UTC (eg. 2018-01-01 12:00:00).\n{% enddocs %}\n\n{% docs most_recent_email_open %}\nMost recent email open in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs most_recent_all_actions %}\nMost recent timestamp of any action in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs last_action_is_rb %}\nWhether the last action the user took was a reportback\n{% enddocs %}\n\n{% docs days_since_last_action %}\nDays since the user's last action\n{% enddocs %}\n\n{% docs time_to_first_rb %}\nHow much time after registering until the user's first reportback\n{% enddocs %}\n\n{% docs sms_unsubscribed_at %}\nTimestamp of when user unsubscribed from SMS messaging\n{% enddocs %}\n\n{% docs user_unsubscribed_at %}\nTimestamp of when user unsubscribed from email or sms\n{% enddocs %}\n\n{% docs voter_reg_acquisition %}\nWhether the user was an acquisition through voter registration efforts. \n{% enddocs %}\n\n{% docs last_logged_in %}\nDate time in UTC when user last logged in to Northstar\n{% enddocs %}\n\n{% docs last_accessed %}\nDate time in UTC when user last access the website\n{% enddocs %}\n\n{% docs last_messaged_at %}\nDate time in UTC when user was last sent a message via SMS or email\n{% enddocs %}\n\n{% docs facebook_id %}\nUser's facebook id\n{% enddocs %}\n\n{% docs mobile %}\nUsers's mobile phone number\n{% enddocs %}\n\n{% docs birthdate %}\nUser's birthdate\n{% enddocs %}\n\n{% docs first_name %}\nUser's first name\n{% enddocs %}\n\n{% docs last_name %}\nUser's last name\n{% enddocs %}\n\n{% docs voter_registration_status %}\nUser's registration status. (e.g. registration_complete, confirmed, uncertain) \n{% enddocs %}\n\n{% docs finish_with_state %}\nIf the registrant was eligible to use and passed through to complete their registration with their state\u2019s OVR system, it will be indicated in this field (direct quote from Rock-The-Vote documentation). Yes/No value in field.\n{% enddocs %}\n\n{% docs reportback_volume %}\nThis field returns 1 if non voter-reg action, since campaigns team only counts those a 1 reportback. If voter-reg action, we want to count quantity of post as number of registered voters.\n{% enddocs %}\n\n{% docs address_street_1 %}\nFirst line of user's street address\n{% enddocs %}\n\n{% docs address_street_2 %}\nSecond line of user's street address\n{% enddocs %}\n\n{% docs city %}\nUser's city\n{% enddocs %}\n\n{% docs state %}\nUser's state\n{% enddocs %}\n\n{% docs country %}\nUser's country\n{% enddocs %}\n\n{% docs language %}\nUser's language\n{% enddocs %}\n\n{% docs cio_status %}\nStatus of user from CIO. (e.g. customer_subscribed, customer_unsubscribed)\n{% enddocs %}\n\n{% docs cio_status_timestamp %}\nTimestamp when users's status was updated.\n{% enddocs %}\n\n{% docs sms_status %}\nCurrent SMS status. (e.g. undeliverable, unknown)\n{% enddocs %}\n\n{% docs source_detail %}\nDetails of the origin of the user. (e.g. tell_a_friend, other, opt_in_path/197981)\n{% enddocs %}\n\n{% docs badges %}\nWhether the user has any badges. \n{% enddocs %}\n\n{% docs refer_friends %}\nWhether the user is a part of the refer a friend campaign. \n{% enddocs %}\n\n{% docs subscribed_member %}\nWhether the user is subscribed. \n{% enddocs %}\n\n{% docs last_updated_at %}\nTimestamp when users's was updated.\n{% enddocs %}\n\n{% docs school_id %}\nUnique identifier for the user's school. This info comes from the school finder.\n{% enddocs %}\n\n{% docs newsletter_topic %}\nNewsletter topic. (e.g. community, lifestyle)\n{% enddocs %}\n\n{% docs user_agent %}\nFull user agent string for a user's browser (e.g. \"Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:24.0) Gecko/20100101 Firefox/24.0\")\n{% enddocs %}\n\n{% docs drupal_id %}\nOld Drupal user ID\n{% enddocs %}\n\n{% docs campaigns %}\nCampaigns a user is signed up for.\n{% enddocs %}\n\n{% docs audit %}\nA very useful field with data containing information about changes to a user, e.g. timestamps when the user subscribed and unsubscribed.\n{% enddocs %}\n\n{% docs voting_plan_status %}\nThe indication of the user's plan to vote, e.g. voting, not_voting, cant_vote\n{% enddocs %}\n\n{% docs voting_plan_time_of_day %}\nThe time of day when the user plans to vote, e.g morning, afternoon, evening\n{% enddocs %}\n\n{% docs voting_plan_method_of_transport %}\nHow the user plans to get to their polling place. e.g. walk, drive\n{% enddocs %}\n\n{% docs voting_plan_attending_with %}\nWith Whom the user plans to go voting, e.g. family, friends, alone\n{% enddocs %}\n\n{% docs feature_flags %}\nJSON containing info on features like badges and refer-a-friend.\n{% enddocs %}\n\n{% docs dbt_updated_at %}\nDBT snapshot table data. The updated_at timestamp of the source record when this snapshot row was inserted.\n{% enddocs %}\n\n{% docs dbt_scd_id %}\nDBT snapshot table data. A unique key generated for each snapshotted record.\n{% enddocs %}\n\n{% docs dbt_valid_from %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this snapshot row was first inserted\n{% enddocs %}\n\n{% docs dbt_valid_to %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this row row became invalidated.\n{% enddocs %}\n\n{% docs google_id %}\nUser's Google ID obtained from login.\n{% enddocs %}\n\n{% docs causes %}\nCauses in which a user is interested. e.g. animal welfare, education, mental_health\n{% enddocs %}\n\n{% docs email_subscription_status %}\nEmail subscription status of the user\n{% enddocs %}\n\n{% docs role %}\nUser's role, e.g. user, staff\n{% enddocs %}\n\n{% docs cio_backfilled %}\nWhether this user's data was backfilled from CIO\n{% enddocs %}\n\n{% docs addr_source %}\nWhere the user submitted their address, e.g. sms, GDPR\n{% enddocs %}\n\n{% docs email_subscription_topics %}\nEmail subscription topics correspond to categories in CIO in which the user is interested. e.g. lifestyle, community, scholarship\n{% enddocs %}\n\n{% docs sms_paused %}\nWhether we've paused sending sms messages to the user.\n{% enddocs %}\n\n\n\n\n", "name": "sms_unsubscribed_at", "unique_id": "ds_dbt.sms_unsubscribed_at", "block_contents": "Timestamp of when user unsubscribed from SMS messaging"}, "ds_dbt.user_unsubscribed_at": {"root_path": "/Users/mrich/projects/quasar/quasar/dbt", "resource_type": "docs", "path": "schema.md", "original_file_path": "models/schema.md", "package_name": "ds_dbt", "file_contents": "\n{% docs click_id %}\nThis is a unique identifier for each click\n{% enddocs %}\n\n{% docs click_time %}\nTimestamp when user clicked.\n{% enddocs %}\n\n{% docs shortened %}\nShortened URL\n{% enddocs %}\n\n{% docs target_url %}\nURL where the user will be directed\n{% enddocs %}\n\n{% docs broadcast_id %}\nID of the broadcast that generated the shortened URL\n{% enddocs %}\n\n{% docs source %}\nSource of the URL (e.g. SMS, web), origin of the post (e.g. phoenix-web, phoenix-ashes, sms), or source where user was acquired. (e.g. sms, phoenix-next)\n{% enddocs %}\n\n{% docs interaction_type %}\nHow the user interacted with the link (e.g. preview, click)\n{% enddocs %}\n\n{% docs id %}\nUnique identifier for the post\n{% enddocs %}\n\n{% docs type %}\nType of post (e.g. photo)\n{% enddocs %}\n\n{% docs action %}\nPost action (e.g. DefendDreamers_Nov9_CongressCalls, GunViolence2018_Feb15_ParklandResponse)\n{% enddocs %}\n\n{% docs status %}\nPost status (e.g. accepted, rejected)\n{% enddocs %}\n\n{% docs quantity %}\nNumerical quantity of items specified in the call to action (e.g. 10, 200)\n{% enddocs %}\n\n{% docs source_bucket %}\nGrouping bucket for origin of the post (e.g. web, sms) \n{% enddocs %}\n\n{% docs created_at %}\nWhen the item was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs updated_at %}\nWhen the item was updated in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs text %}\nText of the post (e.g. \"Zoo animals and a super hero trying to help too!\") \n{% enddocs %}\n\n{% docs signup_id %}\nUnique identifier for the signup \n{% enddocs %}\n\n{% docs post_class %}\nClass of the signup (e.g. \"photo - default\", \"phone-call - DefendDreamers_Jan16_BothBodies\")\n{% enddocs %}\n\n{% docs is_accepted %}\nWhether the post has been accepted to be displayed to the public on the website\n{% enddocs %}\n\n{% docs action_id %}\nInternal identifier of the action \n{% enddocs %}\n\n{% docs location %}\nLocation where the action takes place (e.g. US-NY)\n{% enddocs %}\n\n{% docs postal_code %}\nPostal code where the action takes place\n{% enddocs %}\n\n{% docs is_reportback %}\nWhether the post is a reportback. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs civic_action %}\nWhether the post is a Civic Action. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs scholarship_entry %}\nWhether the post is a Scholarship Entry. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs why_participated %}\nWhy the user participated in this action. Entered by the user.\n{% enddocs %}\n\n{% docs details %}\nDetails about the post. Contains contentfulId and other information (e.g. {\"campaignContentfulId\":\"6ATBgGEQEeJoIcxs1qbwaC\"})\n{% enddocs %}\n\n{% docs email %}\nEmail address of the user.\n{% enddocs %}\n\n{% docs source_details %}\nDetails about the source of the item. This is sometimes represented as a JSON object, and for other tables like Turbovote its represented as a string. (e.g. \"{\"contentful_id\":\"3CTLlXfbwtz1FOMpl31SKV\",\"utm_source\":\"scholarship_listing\",\"utm_medium\":\"referral\",\"utm_campaign\":\"fastweb_2019_08\"}\", newsletter_456)\n{% enddocs %}\n\n{% docs campaign_id %}\nThis is a unique identifier for the campaign\n{% enddocs %}\n\n{% docs campaign_run_id %}\nUnique identifier for the campaign run\n{% enddocs %}\n\n{% docs campaign_name %}\nName of the campaign\n{% enddocs %}\n\n{% docs campaign_cause %}\nCampaign cause (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_run_start_date %}\nStart date of the campaign run\n{% enddocs %}\n\n{% docs campaign_run_end_date %}\nEnd date of the campaign run\n{% enddocs %}\n\n{% docs campaign_created_date %}\nWhen the campaign was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs campaign_node_id %}\nInternal unique node id for the campaign\n{% enddocs %}\n\n{% docs campaign_node_id_title %}\nCampaign title\n{% enddocs %}\n\n{% docs campaign_run_id_title %}\nTitle of the campaign run\n{% enddocs %}\n\n{% docs campaign_action_type %}\nCampaign action type (eg. Make Something, Share Something)\n{% enddocs %}\n\n{% docs campaign_cause_type %}\nCampaign cause type (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_noun %}\nNoun applicable to the user's action\n{% enddocs %}\n\n{% docs campaign_verb %}\nVerb describing the action the user should take\n{% enddocs %}\n\n{% docs campaign_cta %}\nCampaign's call to action\n{% enddocs %}\n\n{% docs campaign_language %}\n\"Language in which the campaign is available\"\n{% enddocs %}\n\n{% docs agent_id %}\nIf set, the content type of the picture the member is sending us. Exp. image/png.\n{% enddocs %}\n\n{% docs attachment_content_type %}\nIf set, the handle of the Front agent this outbound support message is from.\n{% enddocs %}\n\n{% docs topic %}\nHolds a reference to the **last** campaign topic the member's conversation was in. This is useful to allow members to talk to Gambit and get quick responses (through Rivescript), without Gambit completely forgetting what state the member's interaction with a campaign topic was in.\n{% enddocs %}\n\n{% docs action_serial_id %}\nSerial id for the user's action. Depends on the source of the action. May be the bertly click id, sms message id, etc.\n{% enddocs %}\n\n{% docs channel %}\nChannel for the user's action. Depends on the source of the action. (e.g. web, sms)\n{% enddocs %}\n\n{% docs first_action_month %}\nMonth during which the user took their first action. \n{% enddocs %}\n\n{% docs event_id %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs event_source %}\nApplication source for event (eg. Phoenix, Northstar)\n{% enddocs %}\n\n{% docs event_datetime %}\nWhen the event occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs event_name %}\nName of the event (eg. northstar_submitted_register, https://docs.google.com/spreadsheets/d/1lm-fGrIm85nUTxSojqyCt_Ehmm1zEbViFhKpxcJiz1A/edit#gid=406441516)\n{% enddocs %}\n\n{% docs event_type %}\nType of event (pv = 'Page View', se = 'Structured Event')\n{% enddocs %}\n\n{% docs host %}\nURL host where event occurred (eg. www.dosomething.org or identity.dosomething.org)\n{% enddocs %}\n\n{% docs path %}\nURL path event occurred at (eg. /login or /us/campaigns/huddle-for-heroes)\n{% enddocs %}\n\n{% docs query_parameters %}\nOptional query parameters for the request (eg. query=huddle)\n{% enddocs %}\n\n{% docs se_category %}\nCategory of event (eg. focused_field, authentication) - Custom structured event\n{% enddocs %}\n\n{% docs se_action %}\nAction performed / event name (eg. form_submitted, action_failed) - Custom structured event\n{% enddocs %}\n\n{% docs se_label %}\nThe object of the action (eg. first_name, register, voter_reg_status) - Custom structured event\n{% enddocs %}\n\n{% docs session_id %}\nUnique identifier of the user's session\n{% enddocs %}\n\n{% docs session_counter %}\nHow many sessions a user has started\n{% enddocs %}\n\n{% docs browser_size %}\nWhich type of browser a user is using (eg. Mobile, Desktop)\n{% enddocs %}\n\n{% docs northstar_id %}\nThe Northstar ID of the user who generated the event\n{% enddocs %}\n\n{% docs device_id %}\nID of the device used\n{% enddocs %}\n\n{% docs referrer_host %}\nURL host of the referring site (eg. google.com)\n{% enddocs %}\n\n{% docs referrer_path %}\nURL path from referring site (eg. /10-stats-on-teen-drug-and-alcohol-use/)\n{% enddocs %}\n\n{% docs referrer_source %}\nReferrer source name (eg. Google, Facebook)\n{% enddocs %}\n\n{% docs utm_source %}\nTracks where the traffic is coming from. (eg. scholarship_listing, Facebook)\n{% enddocs %}\n\n{% docs utm_medium %}\nHow the traffic got to the platform (eg. referral, CPC)\n{% enddocs %}\n\n{% docs utm_campaign %}\nTracks which campaign the traffic was generated by. Shows up in Google Analytics as Campaign Name (eg. editorial_newsletter)\n{% enddocs %}\n\n{% docs url %}\nURL of campaign (eg. https://dosome.click/nyn5m7)\n{% enddocs %}\n\n{% docs modal_type %}\nNULL or SURVEY_MODAL\n{% enddocs %}\n\n{% docs landing_datetime %}\nWhen the session started in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs ending_datetime %}\nWhen the session ended in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs session_duration_seconds %}\nSession duration in seconds\n{% enddocs %}\n\n{% docs num_pages_views %}\nNumber of pages viewed in session\n{% enddocs %}\n\n{% docs landing_page %}\nFirst page the user viewed in the session (eg. /us/facts/11-facts-about-bp-oil-spill)\n{% enddocs %}\n\n{% docs exit_page %}\n\"Which page the user ended or exited their session from (eg. /us/campaigns/green-your-getaway)\"\n{% enddocs %}\n\n{% docs days_since_last_session %}\n\"Days since their last session.\"\n{% enddocs %}\n\n{% docs post_type %}\nType of post, (e.g. photo, voter-reg)\n{% enddocs %}\n\n{% docs noun %}\nNoun that corresponds to the item in the call to action that was delivered. (e.g. drawings, tweets)\n{% enddocs %}\n\n{% docs verb %}\nVerb corresponding to the action the user took. (e.g. shared, sent, taken)\n{% enddocs %}\n\n{% docs deleted_at %}\nDate time in UTC when a user deleted their post.\n{% enddocs %}\n\n{% docs _fivetran_deleted %}\nMarks rows that were deleted in the source table\n{% enddocs %}\n\n{% docs _fivetran_synced %}\n(UTC timestamp) keeps track of when each row was last successfully synced\n{% enddocs %}\n\n{% docs reportback %}\nWhether the post is a reportback \n{% enddocs %}\n\n{% docs active %}\nWhether the user is active \n{% enddocs %}\n\n{% docs anonymous %}\nWhether the user is anonymous when making the post \n{% enddocs %}\n\n{% docs callpower_campaign_id %}\nUnique ID corresponding to the Callpower campaign. Callpower allows users to record messages for their representatives.\n{% enddocs %}\n\n{% docs quiz %}\nWhether the post is a quiz \n{% enddocs %}\n\n{% docs action_type %}\nType of action the user took. (e.g. share-something, donate-something)\n{% enddocs %}\n\n{% docs online %}\nWhether the action is a online as opposed to IRL.\n{% enddocs %}\n\n{% docs time_commitment %}\nEstimated time required to do the action (e.g. 3.0+, <0.5)\n{% enddocs %}\n\n{% docs num_signups %}\nQuantity of campaign signups\n{% enddocs %}\n\n{% docs most_recent_signup %}\nTimestamp of the most recent signup in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs num_rbs %}\nQuantity of reportbacks for the user\n{% enddocs %}\n\n{% docs total_quantity %}\nTotal quantity of items in reportbacks\n{% enddocs %}\n\n{% docs most_recent_rb %}\nWhen the most recent reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs first_rb %}\nWhen the first reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs avg_time_betw_rbs %}\nCalculated average time between reportbacks.\n{% enddocs %}\n\n{% docs avg_days_next_action_after_rb %}\nCalculated average days until next action after reportback\n{% enddocs %}\n\n{% docs days_to_next_action_after_last_rb %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs most_recent_mam_action %}\nMost recent monthly active member qualifying action in UTC (eg. 2018-01-01 12:00:00).\n{% enddocs %}\n\n{% docs most_recent_email_open %}\nMost recent email open in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs most_recent_all_actions %}\nMost recent timestamp of any action in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs last_action_is_rb %}\nWhether the last action the user took was a reportback\n{% enddocs %}\n\n{% docs days_since_last_action %}\nDays since the user's last action\n{% enddocs %}\n\n{% docs time_to_first_rb %}\nHow much time after registering until the user's first reportback\n{% enddocs %}\n\n{% docs sms_unsubscribed_at %}\nTimestamp of when user unsubscribed from SMS messaging\n{% enddocs %}\n\n{% docs user_unsubscribed_at %}\nTimestamp of when user unsubscribed from email or sms\n{% enddocs %}\n\n{% docs voter_reg_acquisition %}\nWhether the user was an acquisition through voter registration efforts. \n{% enddocs %}\n\n{% docs last_logged_in %}\nDate time in UTC when user last logged in to Northstar\n{% enddocs %}\n\n{% docs last_accessed %}\nDate time in UTC when user last access the website\n{% enddocs %}\n\n{% docs last_messaged_at %}\nDate time in UTC when user was last sent a message via SMS or email\n{% enddocs %}\n\n{% docs facebook_id %}\nUser's facebook id\n{% enddocs %}\n\n{% docs mobile %}\nUsers's mobile phone number\n{% enddocs %}\n\n{% docs birthdate %}\nUser's birthdate\n{% enddocs %}\n\n{% docs first_name %}\nUser's first name\n{% enddocs %}\n\n{% docs last_name %}\nUser's last name\n{% enddocs %}\n\n{% docs voter_registration_status %}\nUser's registration status. (e.g. registration_complete, confirmed, uncertain) \n{% enddocs %}\n\n{% docs finish_with_state %}\nIf the registrant was eligible to use and passed through to complete their registration with their state\u2019s OVR system, it will be indicated in this field (direct quote from Rock-The-Vote documentation). Yes/No value in field.\n{% enddocs %}\n\n{% docs reportback_volume %}\nThis field returns 1 if non voter-reg action, since campaigns team only counts those a 1 reportback. If voter-reg action, we want to count quantity of post as number of registered voters.\n{% enddocs %}\n\n{% docs address_street_1 %}\nFirst line of user's street address\n{% enddocs %}\n\n{% docs address_street_2 %}\nSecond line of user's street address\n{% enddocs %}\n\n{% docs city %}\nUser's city\n{% enddocs %}\n\n{% docs state %}\nUser's state\n{% enddocs %}\n\n{% docs country %}\nUser's country\n{% enddocs %}\n\n{% docs language %}\nUser's language\n{% enddocs %}\n\n{% docs cio_status %}\nStatus of user from CIO. (e.g. customer_subscribed, customer_unsubscribed)\n{% enddocs %}\n\n{% docs cio_status_timestamp %}\nTimestamp when users's status was updated.\n{% enddocs %}\n\n{% docs sms_status %}\nCurrent SMS status. (e.g. undeliverable, unknown)\n{% enddocs %}\n\n{% docs source_detail %}\nDetails of the origin of the user. (e.g. tell_a_friend, other, opt_in_path/197981)\n{% enddocs %}\n\n{% docs badges %}\nWhether the user has any badges. \n{% enddocs %}\n\n{% docs refer_friends %}\nWhether the user is a part of the refer a friend campaign. \n{% enddocs %}\n\n{% docs subscribed_member %}\nWhether the user is subscribed. \n{% enddocs %}\n\n{% docs last_updated_at %}\nTimestamp when users's was updated.\n{% enddocs %}\n\n{% docs school_id %}\nUnique identifier for the user's school. This info comes from the school finder.\n{% enddocs %}\n\n{% docs newsletter_topic %}\nNewsletter topic. (e.g. community, lifestyle)\n{% enddocs %}\n\n{% docs user_agent %}\nFull user agent string for a user's browser (e.g. \"Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:24.0) Gecko/20100101 Firefox/24.0\")\n{% enddocs %}\n\n{% docs drupal_id %}\nOld Drupal user ID\n{% enddocs %}\n\n{% docs campaigns %}\nCampaigns a user is signed up for.\n{% enddocs %}\n\n{% docs audit %}\nA very useful field with data containing information about changes to a user, e.g. timestamps when the user subscribed and unsubscribed.\n{% enddocs %}\n\n{% docs voting_plan_status %}\nThe indication of the user's plan to vote, e.g. voting, not_voting, cant_vote\n{% enddocs %}\n\n{% docs voting_plan_time_of_day %}\nThe time of day when the user plans to vote, e.g morning, afternoon, evening\n{% enddocs %}\n\n{% docs voting_plan_method_of_transport %}\nHow the user plans to get to their polling place. e.g. walk, drive\n{% enddocs %}\n\n{% docs voting_plan_attending_with %}\nWith Whom the user plans to go voting, e.g. family, friends, alone\n{% enddocs %}\n\n{% docs feature_flags %}\nJSON containing info on features like badges and refer-a-friend.\n{% enddocs %}\n\n{% docs dbt_updated_at %}\nDBT snapshot table data. The updated_at timestamp of the source record when this snapshot row was inserted.\n{% enddocs %}\n\n{% docs dbt_scd_id %}\nDBT snapshot table data. A unique key generated for each snapshotted record.\n{% enddocs %}\n\n{% docs dbt_valid_from %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this snapshot row was first inserted\n{% enddocs %}\n\n{% docs dbt_valid_to %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this row row became invalidated.\n{% enddocs %}\n\n{% docs google_id %}\nUser's Google ID obtained from login.\n{% enddocs %}\n\n{% docs causes %}\nCauses in which a user is interested. e.g. animal welfare, education, mental_health\n{% enddocs %}\n\n{% docs email_subscription_status %}\nEmail subscription status of the user\n{% enddocs %}\n\n{% docs role %}\nUser's role, e.g. user, staff\n{% enddocs %}\n\n{% docs cio_backfilled %}\nWhether this user's data was backfilled from CIO\n{% enddocs %}\n\n{% docs addr_source %}\nWhere the user submitted their address, e.g. sms, GDPR\n{% enddocs %}\n\n{% docs email_subscription_topics %}\nEmail subscription topics correspond to categories in CIO in which the user is interested. e.g. lifestyle, community, scholarship\n{% enddocs %}\n\n{% docs sms_paused %}\nWhether we've paused sending sms messages to the user.\n{% enddocs %}\n\n\n\n\n", "name": "user_unsubscribed_at", "unique_id": "ds_dbt.user_unsubscribed_at", "block_contents": "Timestamp of when user unsubscribed from email or sms"}, "ds_dbt.voter_reg_acquisition": {"root_path": "/Users/mrich/projects/quasar/quasar/dbt", "resource_type": "docs", "path": "schema.md", "original_file_path": "models/schema.md", "package_name": "ds_dbt", "file_contents": "\n{% docs click_id %}\nThis is a unique identifier for each click\n{% enddocs %}\n\n{% docs click_time %}\nTimestamp when user clicked.\n{% enddocs %}\n\n{% docs shortened %}\nShortened URL\n{% enddocs %}\n\n{% docs target_url %}\nURL where the user will be directed\n{% enddocs %}\n\n{% docs broadcast_id %}\nID of the broadcast that generated the shortened URL\n{% enddocs %}\n\n{% docs source %}\nSource of the URL (e.g. SMS, web), origin of the post (e.g. phoenix-web, phoenix-ashes, sms), or source where user was acquired. (e.g. sms, phoenix-next)\n{% enddocs %}\n\n{% docs interaction_type %}\nHow the user interacted with the link (e.g. preview, click)\n{% enddocs %}\n\n{% docs id %}\nUnique identifier for the post\n{% enddocs %}\n\n{% docs type %}\nType of post (e.g. photo)\n{% enddocs %}\n\n{% docs action %}\nPost action (e.g. DefendDreamers_Nov9_CongressCalls, GunViolence2018_Feb15_ParklandResponse)\n{% enddocs %}\n\n{% docs status %}\nPost status (e.g. accepted, rejected)\n{% enddocs %}\n\n{% docs quantity %}\nNumerical quantity of items specified in the call to action (e.g. 10, 200)\n{% enddocs %}\n\n{% docs source_bucket %}\nGrouping bucket for origin of the post (e.g. web, sms) \n{% enddocs %}\n\n{% docs created_at %}\nWhen the item was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs updated_at %}\nWhen the item was updated in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs text %}\nText of the post (e.g. \"Zoo animals and a super hero trying to help too!\") \n{% enddocs %}\n\n{% docs signup_id %}\nUnique identifier for the signup \n{% enddocs %}\n\n{% docs post_class %}\nClass of the signup (e.g. \"photo - default\", \"phone-call - DefendDreamers_Jan16_BothBodies\")\n{% enddocs %}\n\n{% docs is_accepted %}\nWhether the post has been accepted to be displayed to the public on the website\n{% enddocs %}\n\n{% docs action_id %}\nInternal identifier of the action \n{% enddocs %}\n\n{% docs location %}\nLocation where the action takes place (e.g. US-NY)\n{% enddocs %}\n\n{% docs postal_code %}\nPostal code where the action takes place\n{% enddocs %}\n\n{% docs is_reportback %}\nWhether the post is a reportback. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs civic_action %}\nWhether the post is a Civic Action. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs scholarship_entry %}\nWhether the post is a Scholarship Entry. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs why_participated %}\nWhy the user participated in this action. Entered by the user.\n{% enddocs %}\n\n{% docs details %}\nDetails about the post. Contains contentfulId and other information (e.g. {\"campaignContentfulId\":\"6ATBgGEQEeJoIcxs1qbwaC\"})\n{% enddocs %}\n\n{% docs email %}\nEmail address of the user.\n{% enddocs %}\n\n{% docs source_details %}\nDetails about the source of the item. This is sometimes represented as a JSON object, and for other tables like Turbovote its represented as a string. (e.g. \"{\"contentful_id\":\"3CTLlXfbwtz1FOMpl31SKV\",\"utm_source\":\"scholarship_listing\",\"utm_medium\":\"referral\",\"utm_campaign\":\"fastweb_2019_08\"}\", newsletter_456)\n{% enddocs %}\n\n{% docs campaign_id %}\nThis is a unique identifier for the campaign\n{% enddocs %}\n\n{% docs campaign_run_id %}\nUnique identifier for the campaign run\n{% enddocs %}\n\n{% docs campaign_name %}\nName of the campaign\n{% enddocs %}\n\n{% docs campaign_cause %}\nCampaign cause (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_run_start_date %}\nStart date of the campaign run\n{% enddocs %}\n\n{% docs campaign_run_end_date %}\nEnd date of the campaign run\n{% enddocs %}\n\n{% docs campaign_created_date %}\nWhen the campaign was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs campaign_node_id %}\nInternal unique node id for the campaign\n{% enddocs %}\n\n{% docs campaign_node_id_title %}\nCampaign title\n{% enddocs %}\n\n{% docs campaign_run_id_title %}\nTitle of the campaign run\n{% enddocs %}\n\n{% docs campaign_action_type %}\nCampaign action type (eg. Make Something, Share Something)\n{% enddocs %}\n\n{% docs campaign_cause_type %}\nCampaign cause type (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_noun %}\nNoun applicable to the user's action\n{% enddocs %}\n\n{% docs campaign_verb %}\nVerb describing the action the user should take\n{% enddocs %}\n\n{% docs campaign_cta %}\nCampaign's call to action\n{% enddocs %}\n\n{% docs campaign_language %}\n\"Language in which the campaign is available\"\n{% enddocs %}\n\n{% docs agent_id %}\nIf set, the content type of the picture the member is sending us. Exp. image/png.\n{% enddocs %}\n\n{% docs attachment_content_type %}\nIf set, the handle of the Front agent this outbound support message is from.\n{% enddocs %}\n\n{% docs topic %}\nHolds a reference to the **last** campaign topic the member's conversation was in. This is useful to allow members to talk to Gambit and get quick responses (through Rivescript), without Gambit completely forgetting what state the member's interaction with a campaign topic was in.\n{% enddocs %}\n\n{% docs action_serial_id %}\nSerial id for the user's action. Depends on the source of the action. May be the bertly click id, sms message id, etc.\n{% enddocs %}\n\n{% docs channel %}\nChannel for the user's action. Depends on the source of the action. (e.g. web, sms)\n{% enddocs %}\n\n{% docs first_action_month %}\nMonth during which the user took their first action. \n{% enddocs %}\n\n{% docs event_id %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs event_source %}\nApplication source for event (eg. Phoenix, Northstar)\n{% enddocs %}\n\n{% docs event_datetime %}\nWhen the event occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs event_name %}\nName of the event (eg. northstar_submitted_register, https://docs.google.com/spreadsheets/d/1lm-fGrIm85nUTxSojqyCt_Ehmm1zEbViFhKpxcJiz1A/edit#gid=406441516)\n{% enddocs %}\n\n{% docs event_type %}\nType of event (pv = 'Page View', se = 'Structured Event')\n{% enddocs %}\n\n{% docs host %}\nURL host where event occurred (eg. www.dosomething.org or identity.dosomething.org)\n{% enddocs %}\n\n{% docs path %}\nURL path event occurred at (eg. /login or /us/campaigns/huddle-for-heroes)\n{% enddocs %}\n\n{% docs query_parameters %}\nOptional query parameters for the request (eg. query=huddle)\n{% enddocs %}\n\n{% docs se_category %}\nCategory of event (eg. focused_field, authentication) - Custom structured event\n{% enddocs %}\n\n{% docs se_action %}\nAction performed / event name (eg. form_submitted, action_failed) - Custom structured event\n{% enddocs %}\n\n{% docs se_label %}\nThe object of the action (eg. first_name, register, voter_reg_status) - Custom structured event\n{% enddocs %}\n\n{% docs session_id %}\nUnique identifier of the user's session\n{% enddocs %}\n\n{% docs session_counter %}\nHow many sessions a user has started\n{% enddocs %}\n\n{% docs browser_size %}\nWhich type of browser a user is using (eg. Mobile, Desktop)\n{% enddocs %}\n\n{% docs northstar_id %}\nThe Northstar ID of the user who generated the event\n{% enddocs %}\n\n{% docs device_id %}\nID of the device used\n{% enddocs %}\n\n{% docs referrer_host %}\nURL host of the referring site (eg. google.com)\n{% enddocs %}\n\n{% docs referrer_path %}\nURL path from referring site (eg. /10-stats-on-teen-drug-and-alcohol-use/)\n{% enddocs %}\n\n{% docs referrer_source %}\nReferrer source name (eg. Google, Facebook)\n{% enddocs %}\n\n{% docs utm_source %}\nTracks where the traffic is coming from. (eg. scholarship_listing, Facebook)\n{% enddocs %}\n\n{% docs utm_medium %}\nHow the traffic got to the platform (eg. referral, CPC)\n{% enddocs %}\n\n{% docs utm_campaign %}\nTracks which campaign the traffic was generated by. Shows up in Google Analytics as Campaign Name (eg. editorial_newsletter)\n{% enddocs %}\n\n{% docs url %}\nURL of campaign (eg. https://dosome.click/nyn5m7)\n{% enddocs %}\n\n{% docs modal_type %}\nNULL or SURVEY_MODAL\n{% enddocs %}\n\n{% docs landing_datetime %}\nWhen the session started in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs ending_datetime %}\nWhen the session ended in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs session_duration_seconds %}\nSession duration in seconds\n{% enddocs %}\n\n{% docs num_pages_views %}\nNumber of pages viewed in session\n{% enddocs %}\n\n{% docs landing_page %}\nFirst page the user viewed in the session (eg. /us/facts/11-facts-about-bp-oil-spill)\n{% enddocs %}\n\n{% docs exit_page %}\n\"Which page the user ended or exited their session from (eg. /us/campaigns/green-your-getaway)\"\n{% enddocs %}\n\n{% docs days_since_last_session %}\n\"Days since their last session.\"\n{% enddocs %}\n\n{% docs post_type %}\nType of post, (e.g. photo, voter-reg)\n{% enddocs %}\n\n{% docs noun %}\nNoun that corresponds to the item in the call to action that was delivered. (e.g. drawings, tweets)\n{% enddocs %}\n\n{% docs verb %}\nVerb corresponding to the action the user took. (e.g. shared, sent, taken)\n{% enddocs %}\n\n{% docs deleted_at %}\nDate time in UTC when a user deleted their post.\n{% enddocs %}\n\n{% docs _fivetran_deleted %}\nMarks rows that were deleted in the source table\n{% enddocs %}\n\n{% docs _fivetran_synced %}\n(UTC timestamp) keeps track of when each row was last successfully synced\n{% enddocs %}\n\n{% docs reportback %}\nWhether the post is a reportback \n{% enddocs %}\n\n{% docs active %}\nWhether the user is active \n{% enddocs %}\n\n{% docs anonymous %}\nWhether the user is anonymous when making the post \n{% enddocs %}\n\n{% docs callpower_campaign_id %}\nUnique ID corresponding to the Callpower campaign. Callpower allows users to record messages for their representatives.\n{% enddocs %}\n\n{% docs quiz %}\nWhether the post is a quiz \n{% enddocs %}\n\n{% docs action_type %}\nType of action the user took. (e.g. share-something, donate-something)\n{% enddocs %}\n\n{% docs online %}\nWhether the action is a online as opposed to IRL.\n{% enddocs %}\n\n{% docs time_commitment %}\nEstimated time required to do the action (e.g. 3.0+, <0.5)\n{% enddocs %}\n\n{% docs num_signups %}\nQuantity of campaign signups\n{% enddocs %}\n\n{% docs most_recent_signup %}\nTimestamp of the most recent signup in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs num_rbs %}\nQuantity of reportbacks for the user\n{% enddocs %}\n\n{% docs total_quantity %}\nTotal quantity of items in reportbacks\n{% enddocs %}\n\n{% docs most_recent_rb %}\nWhen the most recent reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs first_rb %}\nWhen the first reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs avg_time_betw_rbs %}\nCalculated average time between reportbacks.\n{% enddocs %}\n\n{% docs avg_days_next_action_after_rb %}\nCalculated average days until next action after reportback\n{% enddocs %}\n\n{% docs days_to_next_action_after_last_rb %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs most_recent_mam_action %}\nMost recent monthly active member qualifying action in UTC (eg. 2018-01-01 12:00:00).\n{% enddocs %}\n\n{% docs most_recent_email_open %}\nMost recent email open in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs most_recent_all_actions %}\nMost recent timestamp of any action in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs last_action_is_rb %}\nWhether the last action the user took was a reportback\n{% enddocs %}\n\n{% docs days_since_last_action %}\nDays since the user's last action\n{% enddocs %}\n\n{% docs time_to_first_rb %}\nHow much time after registering until the user's first reportback\n{% enddocs %}\n\n{% docs sms_unsubscribed_at %}\nTimestamp of when user unsubscribed from SMS messaging\n{% enddocs %}\n\n{% docs user_unsubscribed_at %}\nTimestamp of when user unsubscribed from email or sms\n{% enddocs %}\n\n{% docs voter_reg_acquisition %}\nWhether the user was an acquisition through voter registration efforts. \n{% enddocs %}\n\n{% docs last_logged_in %}\nDate time in UTC when user last logged in to Northstar\n{% enddocs %}\n\n{% docs last_accessed %}\nDate time in UTC when user last access the website\n{% enddocs %}\n\n{% docs last_messaged_at %}\nDate time in UTC when user was last sent a message via SMS or email\n{% enddocs %}\n\n{% docs facebook_id %}\nUser's facebook id\n{% enddocs %}\n\n{% docs mobile %}\nUsers's mobile phone number\n{% enddocs %}\n\n{% docs birthdate %}\nUser's birthdate\n{% enddocs %}\n\n{% docs first_name %}\nUser's first name\n{% enddocs %}\n\n{% docs last_name %}\nUser's last name\n{% enddocs %}\n\n{% docs voter_registration_status %}\nUser's registration status. (e.g. registration_complete, confirmed, uncertain) \n{% enddocs %}\n\n{% docs finish_with_state %}\nIf the registrant was eligible to use and passed through to complete their registration with their state\u2019s OVR system, it will be indicated in this field (direct quote from Rock-The-Vote documentation). Yes/No value in field.\n{% enddocs %}\n\n{% docs reportback_volume %}\nThis field returns 1 if non voter-reg action, since campaigns team only counts those a 1 reportback. If voter-reg action, we want to count quantity of post as number of registered voters.\n{% enddocs %}\n\n{% docs address_street_1 %}\nFirst line of user's street address\n{% enddocs %}\n\n{% docs address_street_2 %}\nSecond line of user's street address\n{% enddocs %}\n\n{% docs city %}\nUser's city\n{% enddocs %}\n\n{% docs state %}\nUser's state\n{% enddocs %}\n\n{% docs country %}\nUser's country\n{% enddocs %}\n\n{% docs language %}\nUser's language\n{% enddocs %}\n\n{% docs cio_status %}\nStatus of user from CIO. (e.g. customer_subscribed, customer_unsubscribed)\n{% enddocs %}\n\n{% docs cio_status_timestamp %}\nTimestamp when users's status was updated.\n{% enddocs %}\n\n{% docs sms_status %}\nCurrent SMS status. (e.g. undeliverable, unknown)\n{% enddocs %}\n\n{% docs source_detail %}\nDetails of the origin of the user. (e.g. tell_a_friend, other, opt_in_path/197981)\n{% enddocs %}\n\n{% docs badges %}\nWhether the user has any badges. \n{% enddocs %}\n\n{% docs refer_friends %}\nWhether the user is a part of the refer a friend campaign. \n{% enddocs %}\n\n{% docs subscribed_member %}\nWhether the user is subscribed. \n{% enddocs %}\n\n{% docs last_updated_at %}\nTimestamp when users's was updated.\n{% enddocs %}\n\n{% docs school_id %}\nUnique identifier for the user's school. This info comes from the school finder.\n{% enddocs %}\n\n{% docs newsletter_topic %}\nNewsletter topic. (e.g. community, lifestyle)\n{% enddocs %}\n\n{% docs user_agent %}\nFull user agent string for a user's browser (e.g. \"Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:24.0) Gecko/20100101 Firefox/24.0\")\n{% enddocs %}\n\n{% docs drupal_id %}\nOld Drupal user ID\n{% enddocs %}\n\n{% docs campaigns %}\nCampaigns a user is signed up for.\n{% enddocs %}\n\n{% docs audit %}\nA very useful field with data containing information about changes to a user, e.g. timestamps when the user subscribed and unsubscribed.\n{% enddocs %}\n\n{% docs voting_plan_status %}\nThe indication of the user's plan to vote, e.g. voting, not_voting, cant_vote\n{% enddocs %}\n\n{% docs voting_plan_time_of_day %}\nThe time of day when the user plans to vote, e.g morning, afternoon, evening\n{% enddocs %}\n\n{% docs voting_plan_method_of_transport %}\nHow the user plans to get to their polling place. e.g. walk, drive\n{% enddocs %}\n\n{% docs voting_plan_attending_with %}\nWith Whom the user plans to go voting, e.g. family, friends, alone\n{% enddocs %}\n\n{% docs feature_flags %}\nJSON containing info on features like badges and refer-a-friend.\n{% enddocs %}\n\n{% docs dbt_updated_at %}\nDBT snapshot table data. The updated_at timestamp of the source record when this snapshot row was inserted.\n{% enddocs %}\n\n{% docs dbt_scd_id %}\nDBT snapshot table data. A unique key generated for each snapshotted record.\n{% enddocs %}\n\n{% docs dbt_valid_from %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this snapshot row was first inserted\n{% enddocs %}\n\n{% docs dbt_valid_to %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this row row became invalidated.\n{% enddocs %}\n\n{% docs google_id %}\nUser's Google ID obtained from login.\n{% enddocs %}\n\n{% docs causes %}\nCauses in which a user is interested. e.g. animal welfare, education, mental_health\n{% enddocs %}\n\n{% docs email_subscription_status %}\nEmail subscription status of the user\n{% enddocs %}\n\n{% docs role %}\nUser's role, e.g. user, staff\n{% enddocs %}\n\n{% docs cio_backfilled %}\nWhether this user's data was backfilled from CIO\n{% enddocs %}\n\n{% docs addr_source %}\nWhere the user submitted their address, e.g. sms, GDPR\n{% enddocs %}\n\n{% docs email_subscription_topics %}\nEmail subscription topics correspond to categories in CIO in which the user is interested. e.g. lifestyle, community, scholarship\n{% enddocs %}\n\n{% docs sms_paused %}\nWhether we've paused sending sms messages to the user.\n{% enddocs %}\n\n\n\n\n", "name": "voter_reg_acquisition", "unique_id": "ds_dbt.voter_reg_acquisition", "block_contents": "Whether the user was an acquisition through voter registration efforts."}, "ds_dbt.last_logged_in": {"root_path": "/Users/mrich/projects/quasar/quasar/dbt", "resource_type": "docs", "path": "schema.md", "original_file_path": "models/schema.md", "package_name": "ds_dbt", "file_contents": "\n{% docs click_id %}\nThis is a unique identifier for each click\n{% enddocs %}\n\n{% docs click_time %}\nTimestamp when user clicked.\n{% enddocs %}\n\n{% docs shortened %}\nShortened URL\n{% enddocs %}\n\n{% docs target_url %}\nURL where the user will be directed\n{% enddocs %}\n\n{% docs broadcast_id %}\nID of the broadcast that generated the shortened URL\n{% enddocs %}\n\n{% docs source %}\nSource of the URL (e.g. SMS, web), origin of the post (e.g. phoenix-web, phoenix-ashes, sms), or source where user was acquired. (e.g. sms, phoenix-next)\n{% enddocs %}\n\n{% docs interaction_type %}\nHow the user interacted with the link (e.g. preview, click)\n{% enddocs %}\n\n{% docs id %}\nUnique identifier for the post\n{% enddocs %}\n\n{% docs type %}\nType of post (e.g. photo)\n{% enddocs %}\n\n{% docs action %}\nPost action (e.g. DefendDreamers_Nov9_CongressCalls, GunViolence2018_Feb15_ParklandResponse)\n{% enddocs %}\n\n{% docs status %}\nPost status (e.g. accepted, rejected)\n{% enddocs %}\n\n{% docs quantity %}\nNumerical quantity of items specified in the call to action (e.g. 10, 200)\n{% enddocs %}\n\n{% docs source_bucket %}\nGrouping bucket for origin of the post (e.g. web, sms) \n{% enddocs %}\n\n{% docs created_at %}\nWhen the item was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs updated_at %}\nWhen the item was updated in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs text %}\nText of the post (e.g. \"Zoo animals and a super hero trying to help too!\") \n{% enddocs %}\n\n{% docs signup_id %}\nUnique identifier for the signup \n{% enddocs %}\n\n{% docs post_class %}\nClass of the signup (e.g. \"photo - default\", \"phone-call - DefendDreamers_Jan16_BothBodies\")\n{% enddocs %}\n\n{% docs is_accepted %}\nWhether the post has been accepted to be displayed to the public on the website\n{% enddocs %}\n\n{% docs action_id %}\nInternal identifier of the action \n{% enddocs %}\n\n{% docs location %}\nLocation where the action takes place (e.g. US-NY)\n{% enddocs %}\n\n{% docs postal_code %}\nPostal code where the action takes place\n{% enddocs %}\n\n{% docs is_reportback %}\nWhether the post is a reportback. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs civic_action %}\nWhether the post is a Civic Action. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs scholarship_entry %}\nWhether the post is a Scholarship Entry. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs why_participated %}\nWhy the user participated in this action. Entered by the user.\n{% enddocs %}\n\n{% docs details %}\nDetails about the post. Contains contentfulId and other information (e.g. {\"campaignContentfulId\":\"6ATBgGEQEeJoIcxs1qbwaC\"})\n{% enddocs %}\n\n{% docs email %}\nEmail address of the user.\n{% enddocs %}\n\n{% docs source_details %}\nDetails about the source of the item. This is sometimes represented as a JSON object, and for other tables like Turbovote its represented as a string. (e.g. \"{\"contentful_id\":\"3CTLlXfbwtz1FOMpl31SKV\",\"utm_source\":\"scholarship_listing\",\"utm_medium\":\"referral\",\"utm_campaign\":\"fastweb_2019_08\"}\", newsletter_456)\n{% enddocs %}\n\n{% docs campaign_id %}\nThis is a unique identifier for the campaign\n{% enddocs %}\n\n{% docs campaign_run_id %}\nUnique identifier for the campaign run\n{% enddocs %}\n\n{% docs campaign_name %}\nName of the campaign\n{% enddocs %}\n\n{% docs campaign_cause %}\nCampaign cause (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_run_start_date %}\nStart date of the campaign run\n{% enddocs %}\n\n{% docs campaign_run_end_date %}\nEnd date of the campaign run\n{% enddocs %}\n\n{% docs campaign_created_date %}\nWhen the campaign was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs campaign_node_id %}\nInternal unique node id for the campaign\n{% enddocs %}\n\n{% docs campaign_node_id_title %}\nCampaign title\n{% enddocs %}\n\n{% docs campaign_run_id_title %}\nTitle of the campaign run\n{% enddocs %}\n\n{% docs campaign_action_type %}\nCampaign action type (eg. Make Something, Share Something)\n{% enddocs %}\n\n{% docs campaign_cause_type %}\nCampaign cause type (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_noun %}\nNoun applicable to the user's action\n{% enddocs %}\n\n{% docs campaign_verb %}\nVerb describing the action the user should take\n{% enddocs %}\n\n{% docs campaign_cta %}\nCampaign's call to action\n{% enddocs %}\n\n{% docs campaign_language %}\n\"Language in which the campaign is available\"\n{% enddocs %}\n\n{% docs agent_id %}\nIf set, the content type of the picture the member is sending us. Exp. image/png.\n{% enddocs %}\n\n{% docs attachment_content_type %}\nIf set, the handle of the Front agent this outbound support message is from.\n{% enddocs %}\n\n{% docs topic %}\nHolds a reference to the **last** campaign topic the member's conversation was in. This is useful to allow members to talk to Gambit and get quick responses (through Rivescript), without Gambit completely forgetting what state the member's interaction with a campaign topic was in.\n{% enddocs %}\n\n{% docs action_serial_id %}\nSerial id for the user's action. Depends on the source of the action. May be the bertly click id, sms message id, etc.\n{% enddocs %}\n\n{% docs channel %}\nChannel for the user's action. Depends on the source of the action. (e.g. web, sms)\n{% enddocs %}\n\n{% docs first_action_month %}\nMonth during which the user took their first action. \n{% enddocs %}\n\n{% docs event_id %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs event_source %}\nApplication source for event (eg. Phoenix, Northstar)\n{% enddocs %}\n\n{% docs event_datetime %}\nWhen the event occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs event_name %}\nName of the event (eg. northstar_submitted_register, https://docs.google.com/spreadsheets/d/1lm-fGrIm85nUTxSojqyCt_Ehmm1zEbViFhKpxcJiz1A/edit#gid=406441516)\n{% enddocs %}\n\n{% docs event_type %}\nType of event (pv = 'Page View', se = 'Structured Event')\n{% enddocs %}\n\n{% docs host %}\nURL host where event occurred (eg. www.dosomething.org or identity.dosomething.org)\n{% enddocs %}\n\n{% docs path %}\nURL path event occurred at (eg. /login or /us/campaigns/huddle-for-heroes)\n{% enddocs %}\n\n{% docs query_parameters %}\nOptional query parameters for the request (eg. query=huddle)\n{% enddocs %}\n\n{% docs se_category %}\nCategory of event (eg. focused_field, authentication) - Custom structured event\n{% enddocs %}\n\n{% docs se_action %}\nAction performed / event name (eg. form_submitted, action_failed) - Custom structured event\n{% enddocs %}\n\n{% docs se_label %}\nThe object of the action (eg. first_name, register, voter_reg_status) - Custom structured event\n{% enddocs %}\n\n{% docs session_id %}\nUnique identifier of the user's session\n{% enddocs %}\n\n{% docs session_counter %}\nHow many sessions a user has started\n{% enddocs %}\n\n{% docs browser_size %}\nWhich type of browser a user is using (eg. Mobile, Desktop)\n{% enddocs %}\n\n{% docs northstar_id %}\nThe Northstar ID of the user who generated the event\n{% enddocs %}\n\n{% docs device_id %}\nID of the device used\n{% enddocs %}\n\n{% docs referrer_host %}\nURL host of the referring site (eg. google.com)\n{% enddocs %}\n\n{% docs referrer_path %}\nURL path from referring site (eg. /10-stats-on-teen-drug-and-alcohol-use/)\n{% enddocs %}\n\n{% docs referrer_source %}\nReferrer source name (eg. Google, Facebook)\n{% enddocs %}\n\n{% docs utm_source %}\nTracks where the traffic is coming from. (eg. scholarship_listing, Facebook)\n{% enddocs %}\n\n{% docs utm_medium %}\nHow the traffic got to the platform (eg. referral, CPC)\n{% enddocs %}\n\n{% docs utm_campaign %}\nTracks which campaign the traffic was generated by. Shows up in Google Analytics as Campaign Name (eg. editorial_newsletter)\n{% enddocs %}\n\n{% docs url %}\nURL of campaign (eg. https://dosome.click/nyn5m7)\n{% enddocs %}\n\n{% docs modal_type %}\nNULL or SURVEY_MODAL\n{% enddocs %}\n\n{% docs landing_datetime %}\nWhen the session started in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs ending_datetime %}\nWhen the session ended in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs session_duration_seconds %}\nSession duration in seconds\n{% enddocs %}\n\n{% docs num_pages_views %}\nNumber of pages viewed in session\n{% enddocs %}\n\n{% docs landing_page %}\nFirst page the user viewed in the session (eg. /us/facts/11-facts-about-bp-oil-spill)\n{% enddocs %}\n\n{% docs exit_page %}\n\"Which page the user ended or exited their session from (eg. /us/campaigns/green-your-getaway)\"\n{% enddocs %}\n\n{% docs days_since_last_session %}\n\"Days since their last session.\"\n{% enddocs %}\n\n{% docs post_type %}\nType of post, (e.g. photo, voter-reg)\n{% enddocs %}\n\n{% docs noun %}\nNoun that corresponds to the item in the call to action that was delivered. (e.g. drawings, tweets)\n{% enddocs %}\n\n{% docs verb %}\nVerb corresponding to the action the user took. (e.g. shared, sent, taken)\n{% enddocs %}\n\n{% docs deleted_at %}\nDate time in UTC when a user deleted their post.\n{% enddocs %}\n\n{% docs _fivetran_deleted %}\nMarks rows that were deleted in the source table\n{% enddocs %}\n\n{% docs _fivetran_synced %}\n(UTC timestamp) keeps track of when each row was last successfully synced\n{% enddocs %}\n\n{% docs reportback %}\nWhether the post is a reportback \n{% enddocs %}\n\n{% docs active %}\nWhether the user is active \n{% enddocs %}\n\n{% docs anonymous %}\nWhether the user is anonymous when making the post \n{% enddocs %}\n\n{% docs callpower_campaign_id %}\nUnique ID corresponding to the Callpower campaign. Callpower allows users to record messages for their representatives.\n{% enddocs %}\n\n{% docs quiz %}\nWhether the post is a quiz \n{% enddocs %}\n\n{% docs action_type %}\nType of action the user took. (e.g. share-something, donate-something)\n{% enddocs %}\n\n{% docs online %}\nWhether the action is a online as opposed to IRL.\n{% enddocs %}\n\n{% docs time_commitment %}\nEstimated time required to do the action (e.g. 3.0+, <0.5)\n{% enddocs %}\n\n{% docs num_signups %}\nQuantity of campaign signups\n{% enddocs %}\n\n{% docs most_recent_signup %}\nTimestamp of the most recent signup in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs num_rbs %}\nQuantity of reportbacks for the user\n{% enddocs %}\n\n{% docs total_quantity %}\nTotal quantity of items in reportbacks\n{% enddocs %}\n\n{% docs most_recent_rb %}\nWhen the most recent reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs first_rb %}\nWhen the first reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs avg_time_betw_rbs %}\nCalculated average time between reportbacks.\n{% enddocs %}\n\n{% docs avg_days_next_action_after_rb %}\nCalculated average days until next action after reportback\n{% enddocs %}\n\n{% docs days_to_next_action_after_last_rb %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs most_recent_mam_action %}\nMost recent monthly active member qualifying action in UTC (eg. 2018-01-01 12:00:00).\n{% enddocs %}\n\n{% docs most_recent_email_open %}\nMost recent email open in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs most_recent_all_actions %}\nMost recent timestamp of any action in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs last_action_is_rb %}\nWhether the last action the user took was a reportback\n{% enddocs %}\n\n{% docs days_since_last_action %}\nDays since the user's last action\n{% enddocs %}\n\n{% docs time_to_first_rb %}\nHow much time after registering until the user's first reportback\n{% enddocs %}\n\n{% docs sms_unsubscribed_at %}\nTimestamp of when user unsubscribed from SMS messaging\n{% enddocs %}\n\n{% docs user_unsubscribed_at %}\nTimestamp of when user unsubscribed from email or sms\n{% enddocs %}\n\n{% docs voter_reg_acquisition %}\nWhether the user was an acquisition through voter registration efforts. \n{% enddocs %}\n\n{% docs last_logged_in %}\nDate time in UTC when user last logged in to Northstar\n{% enddocs %}\n\n{% docs last_accessed %}\nDate time in UTC when user last access the website\n{% enddocs %}\n\n{% docs last_messaged_at %}\nDate time in UTC when user was last sent a message via SMS or email\n{% enddocs %}\n\n{% docs facebook_id %}\nUser's facebook id\n{% enddocs %}\n\n{% docs mobile %}\nUsers's mobile phone number\n{% enddocs %}\n\n{% docs birthdate %}\nUser's birthdate\n{% enddocs %}\n\n{% docs first_name %}\nUser's first name\n{% enddocs %}\n\n{% docs last_name %}\nUser's last name\n{% enddocs %}\n\n{% docs voter_registration_status %}\nUser's registration status. (e.g. registration_complete, confirmed, uncertain) \n{% enddocs %}\n\n{% docs finish_with_state %}\nIf the registrant was eligible to use and passed through to complete their registration with their state\u2019s OVR system, it will be indicated in this field (direct quote from Rock-The-Vote documentation). Yes/No value in field.\n{% enddocs %}\n\n{% docs reportback_volume %}\nThis field returns 1 if non voter-reg action, since campaigns team only counts those a 1 reportback. If voter-reg action, we want to count quantity of post as number of registered voters.\n{% enddocs %}\n\n{% docs address_street_1 %}\nFirst line of user's street address\n{% enddocs %}\n\n{% docs address_street_2 %}\nSecond line of user's street address\n{% enddocs %}\n\n{% docs city %}\nUser's city\n{% enddocs %}\n\n{% docs state %}\nUser's state\n{% enddocs %}\n\n{% docs country %}\nUser's country\n{% enddocs %}\n\n{% docs language %}\nUser's language\n{% enddocs %}\n\n{% docs cio_status %}\nStatus of user from CIO. (e.g. customer_subscribed, customer_unsubscribed)\n{% enddocs %}\n\n{% docs cio_status_timestamp %}\nTimestamp when users's status was updated.\n{% enddocs %}\n\n{% docs sms_status %}\nCurrent SMS status. (e.g. undeliverable, unknown)\n{% enddocs %}\n\n{% docs source_detail %}\nDetails of the origin of the user. (e.g. tell_a_friend, other, opt_in_path/197981)\n{% enddocs %}\n\n{% docs badges %}\nWhether the user has any badges. \n{% enddocs %}\n\n{% docs refer_friends %}\nWhether the user is a part of the refer a friend campaign. \n{% enddocs %}\n\n{% docs subscribed_member %}\nWhether the user is subscribed. \n{% enddocs %}\n\n{% docs last_updated_at %}\nTimestamp when users's was updated.\n{% enddocs %}\n\n{% docs school_id %}\nUnique identifier for the user's school. This info comes from the school finder.\n{% enddocs %}\n\n{% docs newsletter_topic %}\nNewsletter topic. (e.g. community, lifestyle)\n{% enddocs %}\n\n{% docs user_agent %}\nFull user agent string for a user's browser (e.g. \"Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:24.0) Gecko/20100101 Firefox/24.0\")\n{% enddocs %}\n\n{% docs drupal_id %}\nOld Drupal user ID\n{% enddocs %}\n\n{% docs campaigns %}\nCampaigns a user is signed up for.\n{% enddocs %}\n\n{% docs audit %}\nA very useful field with data containing information about changes to a user, e.g. timestamps when the user subscribed and unsubscribed.\n{% enddocs %}\n\n{% docs voting_plan_status %}\nThe indication of the user's plan to vote, e.g. voting, not_voting, cant_vote\n{% enddocs %}\n\n{% docs voting_plan_time_of_day %}\nThe time of day when the user plans to vote, e.g morning, afternoon, evening\n{% enddocs %}\n\n{% docs voting_plan_method_of_transport %}\nHow the user plans to get to their polling place. e.g. walk, drive\n{% enddocs %}\n\n{% docs voting_plan_attending_with %}\nWith Whom the user plans to go voting, e.g. family, friends, alone\n{% enddocs %}\n\n{% docs feature_flags %}\nJSON containing info on features like badges and refer-a-friend.\n{% enddocs %}\n\n{% docs dbt_updated_at %}\nDBT snapshot table data. The updated_at timestamp of the source record when this snapshot row was inserted.\n{% enddocs %}\n\n{% docs dbt_scd_id %}\nDBT snapshot table data. A unique key generated for each snapshotted record.\n{% enddocs %}\n\n{% docs dbt_valid_from %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this snapshot row was first inserted\n{% enddocs %}\n\n{% docs dbt_valid_to %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this row row became invalidated.\n{% enddocs %}\n\n{% docs google_id %}\nUser's Google ID obtained from login.\n{% enddocs %}\n\n{% docs causes %}\nCauses in which a user is interested. e.g. animal welfare, education, mental_health\n{% enddocs %}\n\n{% docs email_subscription_status %}\nEmail subscription status of the user\n{% enddocs %}\n\n{% docs role %}\nUser's role, e.g. user, staff\n{% enddocs %}\n\n{% docs cio_backfilled %}\nWhether this user's data was backfilled from CIO\n{% enddocs %}\n\n{% docs addr_source %}\nWhere the user submitted their address, e.g. sms, GDPR\n{% enddocs %}\n\n{% docs email_subscription_topics %}\nEmail subscription topics correspond to categories in CIO in which the user is interested. e.g. lifestyle, community, scholarship\n{% enddocs %}\n\n{% docs sms_paused %}\nWhether we've paused sending sms messages to the user.\n{% enddocs %}\n\n\n\n\n", "name": "last_logged_in", "unique_id": "ds_dbt.last_logged_in", "block_contents": "Date time in UTC when user last logged in to Northstar"}, "ds_dbt.last_accessed": {"root_path": "/Users/mrich/projects/quasar/quasar/dbt", "resource_type": "docs", "path": "schema.md", "original_file_path": "models/schema.md", "package_name": "ds_dbt", "file_contents": "\n{% docs click_id %}\nThis is a unique identifier for each click\n{% enddocs %}\n\n{% docs click_time %}\nTimestamp when user clicked.\n{% enddocs %}\n\n{% docs shortened %}\nShortened URL\n{% enddocs %}\n\n{% docs target_url %}\nURL where the user will be directed\n{% enddocs %}\n\n{% docs broadcast_id %}\nID of the broadcast that generated the shortened URL\n{% enddocs %}\n\n{% docs source %}\nSource of the URL (e.g. SMS, web), origin of the post (e.g. phoenix-web, phoenix-ashes, sms), or source where user was acquired. (e.g. sms, phoenix-next)\n{% enddocs %}\n\n{% docs interaction_type %}\nHow the user interacted with the link (e.g. preview, click)\n{% enddocs %}\n\n{% docs id %}\nUnique identifier for the post\n{% enddocs %}\n\n{% docs type %}\nType of post (e.g. photo)\n{% enddocs %}\n\n{% docs action %}\nPost action (e.g. DefendDreamers_Nov9_CongressCalls, GunViolence2018_Feb15_ParklandResponse)\n{% enddocs %}\n\n{% docs status %}\nPost status (e.g. accepted, rejected)\n{% enddocs %}\n\n{% docs quantity %}\nNumerical quantity of items specified in the call to action (e.g. 10, 200)\n{% enddocs %}\n\n{% docs source_bucket %}\nGrouping bucket for origin of the post (e.g. web, sms) \n{% enddocs %}\n\n{% docs created_at %}\nWhen the item was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs updated_at %}\nWhen the item was updated in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs text %}\nText of the post (e.g. \"Zoo animals and a super hero trying to help too!\") \n{% enddocs %}\n\n{% docs signup_id %}\nUnique identifier for the signup \n{% enddocs %}\n\n{% docs post_class %}\nClass of the signup (e.g. \"photo - default\", \"phone-call - DefendDreamers_Jan16_BothBodies\")\n{% enddocs %}\n\n{% docs is_accepted %}\nWhether the post has been accepted to be displayed to the public on the website\n{% enddocs %}\n\n{% docs action_id %}\nInternal identifier of the action \n{% enddocs %}\n\n{% docs location %}\nLocation where the action takes place (e.g. US-NY)\n{% enddocs %}\n\n{% docs postal_code %}\nPostal code where the action takes place\n{% enddocs %}\n\n{% docs is_reportback %}\nWhether the post is a reportback. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs civic_action %}\nWhether the post is a Civic Action. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs scholarship_entry %}\nWhether the post is a Scholarship Entry. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs why_participated %}\nWhy the user participated in this action. Entered by the user.\n{% enddocs %}\n\n{% docs details %}\nDetails about the post. Contains contentfulId and other information (e.g. {\"campaignContentfulId\":\"6ATBgGEQEeJoIcxs1qbwaC\"})\n{% enddocs %}\n\n{% docs email %}\nEmail address of the user.\n{% enddocs %}\n\n{% docs source_details %}\nDetails about the source of the item. This is sometimes represented as a JSON object, and for other tables like Turbovote its represented as a string. (e.g. \"{\"contentful_id\":\"3CTLlXfbwtz1FOMpl31SKV\",\"utm_source\":\"scholarship_listing\",\"utm_medium\":\"referral\",\"utm_campaign\":\"fastweb_2019_08\"}\", newsletter_456)\n{% enddocs %}\n\n{% docs campaign_id %}\nThis is a unique identifier for the campaign\n{% enddocs %}\n\n{% docs campaign_run_id %}\nUnique identifier for the campaign run\n{% enddocs %}\n\n{% docs campaign_name %}\nName of the campaign\n{% enddocs %}\n\n{% docs campaign_cause %}\nCampaign cause (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_run_start_date %}\nStart date of the campaign run\n{% enddocs %}\n\n{% docs campaign_run_end_date %}\nEnd date of the campaign run\n{% enddocs %}\n\n{% docs campaign_created_date %}\nWhen the campaign was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs campaign_node_id %}\nInternal unique node id for the campaign\n{% enddocs %}\n\n{% docs campaign_node_id_title %}\nCampaign title\n{% enddocs %}\n\n{% docs campaign_run_id_title %}\nTitle of the campaign run\n{% enddocs %}\n\n{% docs campaign_action_type %}\nCampaign action type (eg. Make Something, Share Something)\n{% enddocs %}\n\n{% docs campaign_cause_type %}\nCampaign cause type (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_noun %}\nNoun applicable to the user's action\n{% enddocs %}\n\n{% docs campaign_verb %}\nVerb describing the action the user should take\n{% enddocs %}\n\n{% docs campaign_cta %}\nCampaign's call to action\n{% enddocs %}\n\n{% docs campaign_language %}\n\"Language in which the campaign is available\"\n{% enddocs %}\n\n{% docs agent_id %}\nIf set, the content type of the picture the member is sending us. Exp. image/png.\n{% enddocs %}\n\n{% docs attachment_content_type %}\nIf set, the handle of the Front agent this outbound support message is from.\n{% enddocs %}\n\n{% docs topic %}\nHolds a reference to the **last** campaign topic the member's conversation was in. This is useful to allow members to talk to Gambit and get quick responses (through Rivescript), without Gambit completely forgetting what state the member's interaction with a campaign topic was in.\n{% enddocs %}\n\n{% docs action_serial_id %}\nSerial id for the user's action. Depends on the source of the action. May be the bertly click id, sms message id, etc.\n{% enddocs %}\n\n{% docs channel %}\nChannel for the user's action. Depends on the source of the action. (e.g. web, sms)\n{% enddocs %}\n\n{% docs first_action_month %}\nMonth during which the user took their first action. \n{% enddocs %}\n\n{% docs event_id %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs event_source %}\nApplication source for event (eg. Phoenix, Northstar)\n{% enddocs %}\n\n{% docs event_datetime %}\nWhen the event occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs event_name %}\nName of the event (eg. northstar_submitted_register, https://docs.google.com/spreadsheets/d/1lm-fGrIm85nUTxSojqyCt_Ehmm1zEbViFhKpxcJiz1A/edit#gid=406441516)\n{% enddocs %}\n\n{% docs event_type %}\nType of event (pv = 'Page View', se = 'Structured Event')\n{% enddocs %}\n\n{% docs host %}\nURL host where event occurred (eg. www.dosomething.org or identity.dosomething.org)\n{% enddocs %}\n\n{% docs path %}\nURL path event occurred at (eg. /login or /us/campaigns/huddle-for-heroes)\n{% enddocs %}\n\n{% docs query_parameters %}\nOptional query parameters for the request (eg. query=huddle)\n{% enddocs %}\n\n{% docs se_category %}\nCategory of event (eg. focused_field, authentication) - Custom structured event\n{% enddocs %}\n\n{% docs se_action %}\nAction performed / event name (eg. form_submitted, action_failed) - Custom structured event\n{% enddocs %}\n\n{% docs se_label %}\nThe object of the action (eg. first_name, register, voter_reg_status) - Custom structured event\n{% enddocs %}\n\n{% docs session_id %}\nUnique identifier of the user's session\n{% enddocs %}\n\n{% docs session_counter %}\nHow many sessions a user has started\n{% enddocs %}\n\n{% docs browser_size %}\nWhich type of browser a user is using (eg. Mobile, Desktop)\n{% enddocs %}\n\n{% docs northstar_id %}\nThe Northstar ID of the user who generated the event\n{% enddocs %}\n\n{% docs device_id %}\nID of the device used\n{% enddocs %}\n\n{% docs referrer_host %}\nURL host of the referring site (eg. google.com)\n{% enddocs %}\n\n{% docs referrer_path %}\nURL path from referring site (eg. /10-stats-on-teen-drug-and-alcohol-use/)\n{% enddocs %}\n\n{% docs referrer_source %}\nReferrer source name (eg. Google, Facebook)\n{% enddocs %}\n\n{% docs utm_source %}\nTracks where the traffic is coming from. (eg. scholarship_listing, Facebook)\n{% enddocs %}\n\n{% docs utm_medium %}\nHow the traffic got to the platform (eg. referral, CPC)\n{% enddocs %}\n\n{% docs utm_campaign %}\nTracks which campaign the traffic was generated by. Shows up in Google Analytics as Campaign Name (eg. editorial_newsletter)\n{% enddocs %}\n\n{% docs url %}\nURL of campaign (eg. https://dosome.click/nyn5m7)\n{% enddocs %}\n\n{% docs modal_type %}\nNULL or SURVEY_MODAL\n{% enddocs %}\n\n{% docs landing_datetime %}\nWhen the session started in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs ending_datetime %}\nWhen the session ended in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs session_duration_seconds %}\nSession duration in seconds\n{% enddocs %}\n\n{% docs num_pages_views %}\nNumber of pages viewed in session\n{% enddocs %}\n\n{% docs landing_page %}\nFirst page the user viewed in the session (eg. /us/facts/11-facts-about-bp-oil-spill)\n{% enddocs %}\n\n{% docs exit_page %}\n\"Which page the user ended or exited their session from (eg. /us/campaigns/green-your-getaway)\"\n{% enddocs %}\n\n{% docs days_since_last_session %}\n\"Days since their last session.\"\n{% enddocs %}\n\n{% docs post_type %}\nType of post, (e.g. photo, voter-reg)\n{% enddocs %}\n\n{% docs noun %}\nNoun that corresponds to the item in the call to action that was delivered. (e.g. drawings, tweets)\n{% enddocs %}\n\n{% docs verb %}\nVerb corresponding to the action the user took. (e.g. shared, sent, taken)\n{% enddocs %}\n\n{% docs deleted_at %}\nDate time in UTC when a user deleted their post.\n{% enddocs %}\n\n{% docs _fivetran_deleted %}\nMarks rows that were deleted in the source table\n{% enddocs %}\n\n{% docs _fivetran_synced %}\n(UTC timestamp) keeps track of when each row was last successfully synced\n{% enddocs %}\n\n{% docs reportback %}\nWhether the post is a reportback \n{% enddocs %}\n\n{% docs active %}\nWhether the user is active \n{% enddocs %}\n\n{% docs anonymous %}\nWhether the user is anonymous when making the post \n{% enddocs %}\n\n{% docs callpower_campaign_id %}\nUnique ID corresponding to the Callpower campaign. Callpower allows users to record messages for their representatives.\n{% enddocs %}\n\n{% docs quiz %}\nWhether the post is a quiz \n{% enddocs %}\n\n{% docs action_type %}\nType of action the user took. (e.g. share-something, donate-something)\n{% enddocs %}\n\n{% docs online %}\nWhether the action is a online as opposed to IRL.\n{% enddocs %}\n\n{% docs time_commitment %}\nEstimated time required to do the action (e.g. 3.0+, <0.5)\n{% enddocs %}\n\n{% docs num_signups %}\nQuantity of campaign signups\n{% enddocs %}\n\n{% docs most_recent_signup %}\nTimestamp of the most recent signup in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs num_rbs %}\nQuantity of reportbacks for the user\n{% enddocs %}\n\n{% docs total_quantity %}\nTotal quantity of items in reportbacks\n{% enddocs %}\n\n{% docs most_recent_rb %}\nWhen the most recent reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs first_rb %}\nWhen the first reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs avg_time_betw_rbs %}\nCalculated average time between reportbacks.\n{% enddocs %}\n\n{% docs avg_days_next_action_after_rb %}\nCalculated average days until next action after reportback\n{% enddocs %}\n\n{% docs days_to_next_action_after_last_rb %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs most_recent_mam_action %}\nMost recent monthly active member qualifying action in UTC (eg. 2018-01-01 12:00:00).\n{% enddocs %}\n\n{% docs most_recent_email_open %}\nMost recent email open in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs most_recent_all_actions %}\nMost recent timestamp of any action in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs last_action_is_rb %}\nWhether the last action the user took was a reportback\n{% enddocs %}\n\n{% docs days_since_last_action %}\nDays since the user's last action\n{% enddocs %}\n\n{% docs time_to_first_rb %}\nHow much time after registering until the user's first reportback\n{% enddocs %}\n\n{% docs sms_unsubscribed_at %}\nTimestamp of when user unsubscribed from SMS messaging\n{% enddocs %}\n\n{% docs user_unsubscribed_at %}\nTimestamp of when user unsubscribed from email or sms\n{% enddocs %}\n\n{% docs voter_reg_acquisition %}\nWhether the user was an acquisition through voter registration efforts. \n{% enddocs %}\n\n{% docs last_logged_in %}\nDate time in UTC when user last logged in to Northstar\n{% enddocs %}\n\n{% docs last_accessed %}\nDate time in UTC when user last access the website\n{% enddocs %}\n\n{% docs last_messaged_at %}\nDate time in UTC when user was last sent a message via SMS or email\n{% enddocs %}\n\n{% docs facebook_id %}\nUser's facebook id\n{% enddocs %}\n\n{% docs mobile %}\nUsers's mobile phone number\n{% enddocs %}\n\n{% docs birthdate %}\nUser's birthdate\n{% enddocs %}\n\n{% docs first_name %}\nUser's first name\n{% enddocs %}\n\n{% docs last_name %}\nUser's last name\n{% enddocs %}\n\n{% docs voter_registration_status %}\nUser's registration status. (e.g. registration_complete, confirmed, uncertain) \n{% enddocs %}\n\n{% docs finish_with_state %}\nIf the registrant was eligible to use and passed through to complete their registration with their state\u2019s OVR system, it will be indicated in this field (direct quote from Rock-The-Vote documentation). Yes/No value in field.\n{% enddocs %}\n\n{% docs reportback_volume %}\nThis field returns 1 if non voter-reg action, since campaigns team only counts those a 1 reportback. If voter-reg action, we want to count quantity of post as number of registered voters.\n{% enddocs %}\n\n{% docs address_street_1 %}\nFirst line of user's street address\n{% enddocs %}\n\n{% docs address_street_2 %}\nSecond line of user's street address\n{% enddocs %}\n\n{% docs city %}\nUser's city\n{% enddocs %}\n\n{% docs state %}\nUser's state\n{% enddocs %}\n\n{% docs country %}\nUser's country\n{% enddocs %}\n\n{% docs language %}\nUser's language\n{% enddocs %}\n\n{% docs cio_status %}\nStatus of user from CIO. (e.g. customer_subscribed, customer_unsubscribed)\n{% enddocs %}\n\n{% docs cio_status_timestamp %}\nTimestamp when users's status was updated.\n{% enddocs %}\n\n{% docs sms_status %}\nCurrent SMS status. (e.g. undeliverable, unknown)\n{% enddocs %}\n\n{% docs source_detail %}\nDetails of the origin of the user. (e.g. tell_a_friend, other, opt_in_path/197981)\n{% enddocs %}\n\n{% docs badges %}\nWhether the user has any badges. \n{% enddocs %}\n\n{% docs refer_friends %}\nWhether the user is a part of the refer a friend campaign. \n{% enddocs %}\n\n{% docs subscribed_member %}\nWhether the user is subscribed. \n{% enddocs %}\n\n{% docs last_updated_at %}\nTimestamp when users's was updated.\n{% enddocs %}\n\n{% docs school_id %}\nUnique identifier for the user's school. This info comes from the school finder.\n{% enddocs %}\n\n{% docs newsletter_topic %}\nNewsletter topic. (e.g. community, lifestyle)\n{% enddocs %}\n\n{% docs user_agent %}\nFull user agent string for a user's browser (e.g. \"Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:24.0) Gecko/20100101 Firefox/24.0\")\n{% enddocs %}\n\n{% docs drupal_id %}\nOld Drupal user ID\n{% enddocs %}\n\n{% docs campaigns %}\nCampaigns a user is signed up for.\n{% enddocs %}\n\n{% docs audit %}\nA very useful field with data containing information about changes to a user, e.g. timestamps when the user subscribed and unsubscribed.\n{% enddocs %}\n\n{% docs voting_plan_status %}\nThe indication of the user's plan to vote, e.g. voting, not_voting, cant_vote\n{% enddocs %}\n\n{% docs voting_plan_time_of_day %}\nThe time of day when the user plans to vote, e.g morning, afternoon, evening\n{% enddocs %}\n\n{% docs voting_plan_method_of_transport %}\nHow the user plans to get to their polling place. e.g. walk, drive\n{% enddocs %}\n\n{% docs voting_plan_attending_with %}\nWith Whom the user plans to go voting, e.g. family, friends, alone\n{% enddocs %}\n\n{% docs feature_flags %}\nJSON containing info on features like badges and refer-a-friend.\n{% enddocs %}\n\n{% docs dbt_updated_at %}\nDBT snapshot table data. The updated_at timestamp of the source record when this snapshot row was inserted.\n{% enddocs %}\n\n{% docs dbt_scd_id %}\nDBT snapshot table data. A unique key generated for each snapshotted record.\n{% enddocs %}\n\n{% docs dbt_valid_from %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this snapshot row was first inserted\n{% enddocs %}\n\n{% docs dbt_valid_to %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this row row became invalidated.\n{% enddocs %}\n\n{% docs google_id %}\nUser's Google ID obtained from login.\n{% enddocs %}\n\n{% docs causes %}\nCauses in which a user is interested. e.g. animal welfare, education, mental_health\n{% enddocs %}\n\n{% docs email_subscription_status %}\nEmail subscription status of the user\n{% enddocs %}\n\n{% docs role %}\nUser's role, e.g. user, staff\n{% enddocs %}\n\n{% docs cio_backfilled %}\nWhether this user's data was backfilled from CIO\n{% enddocs %}\n\n{% docs addr_source %}\nWhere the user submitted their address, e.g. sms, GDPR\n{% enddocs %}\n\n{% docs email_subscription_topics %}\nEmail subscription topics correspond to categories in CIO in which the user is interested. e.g. lifestyle, community, scholarship\n{% enddocs %}\n\n{% docs sms_paused %}\nWhether we've paused sending sms messages to the user.\n{% enddocs %}\n\n\n\n\n", "name": "last_accessed", "unique_id": "ds_dbt.last_accessed", "block_contents": "Date time in UTC when user last access the website"}, "ds_dbt.last_messaged_at": {"root_path": "/Users/mrich/projects/quasar/quasar/dbt", "resource_type": "docs", "path": "schema.md", "original_file_path": "models/schema.md", "package_name": "ds_dbt", "file_contents": "\n{% docs click_id %}\nThis is a unique identifier for each click\n{% enddocs %}\n\n{% docs click_time %}\nTimestamp when user clicked.\n{% enddocs %}\n\n{% docs shortened %}\nShortened URL\n{% enddocs %}\n\n{% docs target_url %}\nURL where the user will be directed\n{% enddocs %}\n\n{% docs broadcast_id %}\nID of the broadcast that generated the shortened URL\n{% enddocs %}\n\n{% docs source %}\nSource of the URL (e.g. SMS, web), origin of the post (e.g. phoenix-web, phoenix-ashes, sms), or source where user was acquired. (e.g. sms, phoenix-next)\n{% enddocs %}\n\n{% docs interaction_type %}\nHow the user interacted with the link (e.g. preview, click)\n{% enddocs %}\n\n{% docs id %}\nUnique identifier for the post\n{% enddocs %}\n\n{% docs type %}\nType of post (e.g. photo)\n{% enddocs %}\n\n{% docs action %}\nPost action (e.g. DefendDreamers_Nov9_CongressCalls, GunViolence2018_Feb15_ParklandResponse)\n{% enddocs %}\n\n{% docs status %}\nPost status (e.g. accepted, rejected)\n{% enddocs %}\n\n{% docs quantity %}\nNumerical quantity of items specified in the call to action (e.g. 10, 200)\n{% enddocs %}\n\n{% docs source_bucket %}\nGrouping bucket for origin of the post (e.g. web, sms) \n{% enddocs %}\n\n{% docs created_at %}\nWhen the item was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs updated_at %}\nWhen the item was updated in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs text %}\nText of the post (e.g. \"Zoo animals and a super hero trying to help too!\") \n{% enddocs %}\n\n{% docs signup_id %}\nUnique identifier for the signup \n{% enddocs %}\n\n{% docs post_class %}\nClass of the signup (e.g. \"photo - default\", \"phone-call - DefendDreamers_Jan16_BothBodies\")\n{% enddocs %}\n\n{% docs is_accepted %}\nWhether the post has been accepted to be displayed to the public on the website\n{% enddocs %}\n\n{% docs action_id %}\nInternal identifier of the action \n{% enddocs %}\n\n{% docs location %}\nLocation where the action takes place (e.g. US-NY)\n{% enddocs %}\n\n{% docs postal_code %}\nPostal code where the action takes place\n{% enddocs %}\n\n{% docs is_reportback %}\nWhether the post is a reportback. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs civic_action %}\nWhether the post is a Civic Action. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs scholarship_entry %}\nWhether the post is a Scholarship Entry. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs why_participated %}\nWhy the user participated in this action. Entered by the user.\n{% enddocs %}\n\n{% docs details %}\nDetails about the post. Contains contentfulId and other information (e.g. {\"campaignContentfulId\":\"6ATBgGEQEeJoIcxs1qbwaC\"})\n{% enddocs %}\n\n{% docs email %}\nEmail address of the user.\n{% enddocs %}\n\n{% docs source_details %}\nDetails about the source of the item. This is sometimes represented as a JSON object, and for other tables like Turbovote its represented as a string. (e.g. \"{\"contentful_id\":\"3CTLlXfbwtz1FOMpl31SKV\",\"utm_source\":\"scholarship_listing\",\"utm_medium\":\"referral\",\"utm_campaign\":\"fastweb_2019_08\"}\", newsletter_456)\n{% enddocs %}\n\n{% docs campaign_id %}\nThis is a unique identifier for the campaign\n{% enddocs %}\n\n{% docs campaign_run_id %}\nUnique identifier for the campaign run\n{% enddocs %}\n\n{% docs campaign_name %}\nName of the campaign\n{% enddocs %}\n\n{% docs campaign_cause %}\nCampaign cause (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_run_start_date %}\nStart date of the campaign run\n{% enddocs %}\n\n{% docs campaign_run_end_date %}\nEnd date of the campaign run\n{% enddocs %}\n\n{% docs campaign_created_date %}\nWhen the campaign was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs campaign_node_id %}\nInternal unique node id for the campaign\n{% enddocs %}\n\n{% docs campaign_node_id_title %}\nCampaign title\n{% enddocs %}\n\n{% docs campaign_run_id_title %}\nTitle of the campaign run\n{% enddocs %}\n\n{% docs campaign_action_type %}\nCampaign action type (eg. Make Something, Share Something)\n{% enddocs %}\n\n{% docs campaign_cause_type %}\nCampaign cause type (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_noun %}\nNoun applicable to the user's action\n{% enddocs %}\n\n{% docs campaign_verb %}\nVerb describing the action the user should take\n{% enddocs %}\n\n{% docs campaign_cta %}\nCampaign's call to action\n{% enddocs %}\n\n{% docs campaign_language %}\n\"Language in which the campaign is available\"\n{% enddocs %}\n\n{% docs agent_id %}\nIf set, the content type of the picture the member is sending us. Exp. image/png.\n{% enddocs %}\n\n{% docs attachment_content_type %}\nIf set, the handle of the Front agent this outbound support message is from.\n{% enddocs %}\n\n{% docs topic %}\nHolds a reference to the **last** campaign topic the member's conversation was in. This is useful to allow members to talk to Gambit and get quick responses (through Rivescript), without Gambit completely forgetting what state the member's interaction with a campaign topic was in.\n{% enddocs %}\n\n{% docs action_serial_id %}\nSerial id for the user's action. Depends on the source of the action. May be the bertly click id, sms message id, etc.\n{% enddocs %}\n\n{% docs channel %}\nChannel for the user's action. Depends on the source of the action. (e.g. web, sms)\n{% enddocs %}\n\n{% docs first_action_month %}\nMonth during which the user took their first action. \n{% enddocs %}\n\n{% docs event_id %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs event_source %}\nApplication source for event (eg. Phoenix, Northstar)\n{% enddocs %}\n\n{% docs event_datetime %}\nWhen the event occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs event_name %}\nName of the event (eg. northstar_submitted_register, https://docs.google.com/spreadsheets/d/1lm-fGrIm85nUTxSojqyCt_Ehmm1zEbViFhKpxcJiz1A/edit#gid=406441516)\n{% enddocs %}\n\n{% docs event_type %}\nType of event (pv = 'Page View', se = 'Structured Event')\n{% enddocs %}\n\n{% docs host %}\nURL host where event occurred (eg. www.dosomething.org or identity.dosomething.org)\n{% enddocs %}\n\n{% docs path %}\nURL path event occurred at (eg. /login or /us/campaigns/huddle-for-heroes)\n{% enddocs %}\n\n{% docs query_parameters %}\nOptional query parameters for the request (eg. query=huddle)\n{% enddocs %}\n\n{% docs se_category %}\nCategory of event (eg. focused_field, authentication) - Custom structured event\n{% enddocs %}\n\n{% docs se_action %}\nAction performed / event name (eg. form_submitted, action_failed) - Custom structured event\n{% enddocs %}\n\n{% docs se_label %}\nThe object of the action (eg. first_name, register, voter_reg_status) - Custom structured event\n{% enddocs %}\n\n{% docs session_id %}\nUnique identifier of the user's session\n{% enddocs %}\n\n{% docs session_counter %}\nHow many sessions a user has started\n{% enddocs %}\n\n{% docs browser_size %}\nWhich type of browser a user is using (eg. Mobile, Desktop)\n{% enddocs %}\n\n{% docs northstar_id %}\nThe Northstar ID of the user who generated the event\n{% enddocs %}\n\n{% docs device_id %}\nID of the device used\n{% enddocs %}\n\n{% docs referrer_host %}\nURL host of the referring site (eg. google.com)\n{% enddocs %}\n\n{% docs referrer_path %}\nURL path from referring site (eg. /10-stats-on-teen-drug-and-alcohol-use/)\n{% enddocs %}\n\n{% docs referrer_source %}\nReferrer source name (eg. Google, Facebook)\n{% enddocs %}\n\n{% docs utm_source %}\nTracks where the traffic is coming from. (eg. scholarship_listing, Facebook)\n{% enddocs %}\n\n{% docs utm_medium %}\nHow the traffic got to the platform (eg. referral, CPC)\n{% enddocs %}\n\n{% docs utm_campaign %}\nTracks which campaign the traffic was generated by. Shows up in Google Analytics as Campaign Name (eg. editorial_newsletter)\n{% enddocs %}\n\n{% docs url %}\nURL of campaign (eg. https://dosome.click/nyn5m7)\n{% enddocs %}\n\n{% docs modal_type %}\nNULL or SURVEY_MODAL\n{% enddocs %}\n\n{% docs landing_datetime %}\nWhen the session started in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs ending_datetime %}\nWhen the session ended in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs session_duration_seconds %}\nSession duration in seconds\n{% enddocs %}\n\n{% docs num_pages_views %}\nNumber of pages viewed in session\n{% enddocs %}\n\n{% docs landing_page %}\nFirst page the user viewed in the session (eg. /us/facts/11-facts-about-bp-oil-spill)\n{% enddocs %}\n\n{% docs exit_page %}\n\"Which page the user ended or exited their session from (eg. /us/campaigns/green-your-getaway)\"\n{% enddocs %}\n\n{% docs days_since_last_session %}\n\"Days since their last session.\"\n{% enddocs %}\n\n{% docs post_type %}\nType of post, (e.g. photo, voter-reg)\n{% enddocs %}\n\n{% docs noun %}\nNoun that corresponds to the item in the call to action that was delivered. (e.g. drawings, tweets)\n{% enddocs %}\n\n{% docs verb %}\nVerb corresponding to the action the user took. (e.g. shared, sent, taken)\n{% enddocs %}\n\n{% docs deleted_at %}\nDate time in UTC when a user deleted their post.\n{% enddocs %}\n\n{% docs _fivetran_deleted %}\nMarks rows that were deleted in the source table\n{% enddocs %}\n\n{% docs _fivetran_synced %}\n(UTC timestamp) keeps track of when each row was last successfully synced\n{% enddocs %}\n\n{% docs reportback %}\nWhether the post is a reportback \n{% enddocs %}\n\n{% docs active %}\nWhether the user is active \n{% enddocs %}\n\n{% docs anonymous %}\nWhether the user is anonymous when making the post \n{% enddocs %}\n\n{% docs callpower_campaign_id %}\nUnique ID corresponding to the Callpower campaign. Callpower allows users to record messages for their representatives.\n{% enddocs %}\n\n{% docs quiz %}\nWhether the post is a quiz \n{% enddocs %}\n\n{% docs action_type %}\nType of action the user took. (e.g. share-something, donate-something)\n{% enddocs %}\n\n{% docs online %}\nWhether the action is a online as opposed to IRL.\n{% enddocs %}\n\n{% docs time_commitment %}\nEstimated time required to do the action (e.g. 3.0+, <0.5)\n{% enddocs %}\n\n{% docs num_signups %}\nQuantity of campaign signups\n{% enddocs %}\n\n{% docs most_recent_signup %}\nTimestamp of the most recent signup in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs num_rbs %}\nQuantity of reportbacks for the user\n{% enddocs %}\n\n{% docs total_quantity %}\nTotal quantity of items in reportbacks\n{% enddocs %}\n\n{% docs most_recent_rb %}\nWhen the most recent reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs first_rb %}\nWhen the first reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs avg_time_betw_rbs %}\nCalculated average time between reportbacks.\n{% enddocs %}\n\n{% docs avg_days_next_action_after_rb %}\nCalculated average days until next action after reportback\n{% enddocs %}\n\n{% docs days_to_next_action_after_last_rb %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs most_recent_mam_action %}\nMost recent monthly active member qualifying action in UTC (eg. 2018-01-01 12:00:00).\n{% enddocs %}\n\n{% docs most_recent_email_open %}\nMost recent email open in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs most_recent_all_actions %}\nMost recent timestamp of any action in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs last_action_is_rb %}\nWhether the last action the user took was a reportback\n{% enddocs %}\n\n{% docs days_since_last_action %}\nDays since the user's last action\n{% enddocs %}\n\n{% docs time_to_first_rb %}\nHow much time after registering until the user's first reportback\n{% enddocs %}\n\n{% docs sms_unsubscribed_at %}\nTimestamp of when user unsubscribed from SMS messaging\n{% enddocs %}\n\n{% docs user_unsubscribed_at %}\nTimestamp of when user unsubscribed from email or sms\n{% enddocs %}\n\n{% docs voter_reg_acquisition %}\nWhether the user was an acquisition through voter registration efforts. \n{% enddocs %}\n\n{% docs last_logged_in %}\nDate time in UTC when user last logged in to Northstar\n{% enddocs %}\n\n{% docs last_accessed %}\nDate time in UTC when user last access the website\n{% enddocs %}\n\n{% docs last_messaged_at %}\nDate time in UTC when user was last sent a message via SMS or email\n{% enddocs %}\n\n{% docs facebook_id %}\nUser's facebook id\n{% enddocs %}\n\n{% docs mobile %}\nUsers's mobile phone number\n{% enddocs %}\n\n{% docs birthdate %}\nUser's birthdate\n{% enddocs %}\n\n{% docs first_name %}\nUser's first name\n{% enddocs %}\n\n{% docs last_name %}\nUser's last name\n{% enddocs %}\n\n{% docs voter_registration_status %}\nUser's registration status. (e.g. registration_complete, confirmed, uncertain) \n{% enddocs %}\n\n{% docs finish_with_state %}\nIf the registrant was eligible to use and passed through to complete their registration with their state\u2019s OVR system, it will be indicated in this field (direct quote from Rock-The-Vote documentation). Yes/No value in field.\n{% enddocs %}\n\n{% docs reportback_volume %}\nThis field returns 1 if non voter-reg action, since campaigns team only counts those a 1 reportback. If voter-reg action, we want to count quantity of post as number of registered voters.\n{% enddocs %}\n\n{% docs address_street_1 %}\nFirst line of user's street address\n{% enddocs %}\n\n{% docs address_street_2 %}\nSecond line of user's street address\n{% enddocs %}\n\n{% docs city %}\nUser's city\n{% enddocs %}\n\n{% docs state %}\nUser's state\n{% enddocs %}\n\n{% docs country %}\nUser's country\n{% enddocs %}\n\n{% docs language %}\nUser's language\n{% enddocs %}\n\n{% docs cio_status %}\nStatus of user from CIO. (e.g. customer_subscribed, customer_unsubscribed)\n{% enddocs %}\n\n{% docs cio_status_timestamp %}\nTimestamp when users's status was updated.\n{% enddocs %}\n\n{% docs sms_status %}\nCurrent SMS status. (e.g. undeliverable, unknown)\n{% enddocs %}\n\n{% docs source_detail %}\nDetails of the origin of the user. (e.g. tell_a_friend, other, opt_in_path/197981)\n{% enddocs %}\n\n{% docs badges %}\nWhether the user has any badges. \n{% enddocs %}\n\n{% docs refer_friends %}\nWhether the user is a part of the refer a friend campaign. \n{% enddocs %}\n\n{% docs subscribed_member %}\nWhether the user is subscribed. \n{% enddocs %}\n\n{% docs last_updated_at %}\nTimestamp when users's was updated.\n{% enddocs %}\n\n{% docs school_id %}\nUnique identifier for the user's school. This info comes from the school finder.\n{% enddocs %}\n\n{% docs newsletter_topic %}\nNewsletter topic. (e.g. community, lifestyle)\n{% enddocs %}\n\n{% docs user_agent %}\nFull user agent string for a user's browser (e.g. \"Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:24.0) Gecko/20100101 Firefox/24.0\")\n{% enddocs %}\n\n{% docs drupal_id %}\nOld Drupal user ID\n{% enddocs %}\n\n{% docs campaigns %}\nCampaigns a user is signed up for.\n{% enddocs %}\n\n{% docs audit %}\nA very useful field with data containing information about changes to a user, e.g. timestamps when the user subscribed and unsubscribed.\n{% enddocs %}\n\n{% docs voting_plan_status %}\nThe indication of the user's plan to vote, e.g. voting, not_voting, cant_vote\n{% enddocs %}\n\n{% docs voting_plan_time_of_day %}\nThe time of day when the user plans to vote, e.g morning, afternoon, evening\n{% enddocs %}\n\n{% docs voting_plan_method_of_transport %}\nHow the user plans to get to their polling place. e.g. walk, drive\n{% enddocs %}\n\n{% docs voting_plan_attending_with %}\nWith Whom the user plans to go voting, e.g. family, friends, alone\n{% enddocs %}\n\n{% docs feature_flags %}\nJSON containing info on features like badges and refer-a-friend.\n{% enddocs %}\n\n{% docs dbt_updated_at %}\nDBT snapshot table data. The updated_at timestamp of the source record when this snapshot row was inserted.\n{% enddocs %}\n\n{% docs dbt_scd_id %}\nDBT snapshot table data. A unique key generated for each snapshotted record.\n{% enddocs %}\n\n{% docs dbt_valid_from %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this snapshot row was first inserted\n{% enddocs %}\n\n{% docs dbt_valid_to %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this row row became invalidated.\n{% enddocs %}\n\n{% docs google_id %}\nUser's Google ID obtained from login.\n{% enddocs %}\n\n{% docs causes %}\nCauses in which a user is interested. e.g. animal welfare, education, mental_health\n{% enddocs %}\n\n{% docs email_subscription_status %}\nEmail subscription status of the user\n{% enddocs %}\n\n{% docs role %}\nUser's role, e.g. user, staff\n{% enddocs %}\n\n{% docs cio_backfilled %}\nWhether this user's data was backfilled from CIO\n{% enddocs %}\n\n{% docs addr_source %}\nWhere the user submitted their address, e.g. sms, GDPR\n{% enddocs %}\n\n{% docs email_subscription_topics %}\nEmail subscription topics correspond to categories in CIO in which the user is interested. e.g. lifestyle, community, scholarship\n{% enddocs %}\n\n{% docs sms_paused %}\nWhether we've paused sending sms messages to the user.\n{% enddocs %}\n\n\n\n\n", "name": "last_messaged_at", "unique_id": "ds_dbt.last_messaged_at", "block_contents": "Date time in UTC when user was last sent a message via SMS or email"}, "ds_dbt.facebook_id": {"root_path": "/Users/mrich/projects/quasar/quasar/dbt", "resource_type": "docs", "path": "schema.md", "original_file_path": "models/schema.md", "package_name": "ds_dbt", "file_contents": "\n{% docs click_id %}\nThis is a unique identifier for each click\n{% enddocs %}\n\n{% docs click_time %}\nTimestamp when user clicked.\n{% enddocs %}\n\n{% docs shortened %}\nShortened URL\n{% enddocs %}\n\n{% docs target_url %}\nURL where the user will be directed\n{% enddocs %}\n\n{% docs broadcast_id %}\nID of the broadcast that generated the shortened URL\n{% enddocs %}\n\n{% docs source %}\nSource of the URL (e.g. SMS, web), origin of the post (e.g. phoenix-web, phoenix-ashes, sms), or source where user was acquired. (e.g. sms, phoenix-next)\n{% enddocs %}\n\n{% docs interaction_type %}\nHow the user interacted with the link (e.g. preview, click)\n{% enddocs %}\n\n{% docs id %}\nUnique identifier for the post\n{% enddocs %}\n\n{% docs type %}\nType of post (e.g. photo)\n{% enddocs %}\n\n{% docs action %}\nPost action (e.g. DefendDreamers_Nov9_CongressCalls, GunViolence2018_Feb15_ParklandResponse)\n{% enddocs %}\n\n{% docs status %}\nPost status (e.g. accepted, rejected)\n{% enddocs %}\n\n{% docs quantity %}\nNumerical quantity of items specified in the call to action (e.g. 10, 200)\n{% enddocs %}\n\n{% docs source_bucket %}\nGrouping bucket for origin of the post (e.g. web, sms) \n{% enddocs %}\n\n{% docs created_at %}\nWhen the item was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs updated_at %}\nWhen the item was updated in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs text %}\nText of the post (e.g. \"Zoo animals and a super hero trying to help too!\") \n{% enddocs %}\n\n{% docs signup_id %}\nUnique identifier for the signup \n{% enddocs %}\n\n{% docs post_class %}\nClass of the signup (e.g. \"photo - default\", \"phone-call - DefendDreamers_Jan16_BothBodies\")\n{% enddocs %}\n\n{% docs is_accepted %}\nWhether the post has been accepted to be displayed to the public on the website\n{% enddocs %}\n\n{% docs action_id %}\nInternal identifier of the action \n{% enddocs %}\n\n{% docs location %}\nLocation where the action takes place (e.g. US-NY)\n{% enddocs %}\n\n{% docs postal_code %}\nPostal code where the action takes place\n{% enddocs %}\n\n{% docs is_reportback %}\nWhether the post is a reportback. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs civic_action %}\nWhether the post is a Civic Action. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs scholarship_entry %}\nWhether the post is a Scholarship Entry. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs why_participated %}\nWhy the user participated in this action. Entered by the user.\n{% enddocs %}\n\n{% docs details %}\nDetails about the post. Contains contentfulId and other information (e.g. {\"campaignContentfulId\":\"6ATBgGEQEeJoIcxs1qbwaC\"})\n{% enddocs %}\n\n{% docs email %}\nEmail address of the user.\n{% enddocs %}\n\n{% docs source_details %}\nDetails about the source of the item. This is sometimes represented as a JSON object, and for other tables like Turbovote its represented as a string. (e.g. \"{\"contentful_id\":\"3CTLlXfbwtz1FOMpl31SKV\",\"utm_source\":\"scholarship_listing\",\"utm_medium\":\"referral\",\"utm_campaign\":\"fastweb_2019_08\"}\", newsletter_456)\n{% enddocs %}\n\n{% docs campaign_id %}\nThis is a unique identifier for the campaign\n{% enddocs %}\n\n{% docs campaign_run_id %}\nUnique identifier for the campaign run\n{% enddocs %}\n\n{% docs campaign_name %}\nName of the campaign\n{% enddocs %}\n\n{% docs campaign_cause %}\nCampaign cause (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_run_start_date %}\nStart date of the campaign run\n{% enddocs %}\n\n{% docs campaign_run_end_date %}\nEnd date of the campaign run\n{% enddocs %}\n\n{% docs campaign_created_date %}\nWhen the campaign was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs campaign_node_id %}\nInternal unique node id for the campaign\n{% enddocs %}\n\n{% docs campaign_node_id_title %}\nCampaign title\n{% enddocs %}\n\n{% docs campaign_run_id_title %}\nTitle of the campaign run\n{% enddocs %}\n\n{% docs campaign_action_type %}\nCampaign action type (eg. Make Something, Share Something)\n{% enddocs %}\n\n{% docs campaign_cause_type %}\nCampaign cause type (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_noun %}\nNoun applicable to the user's action\n{% enddocs %}\n\n{% docs campaign_verb %}\nVerb describing the action the user should take\n{% enddocs %}\n\n{% docs campaign_cta %}\nCampaign's call to action\n{% enddocs %}\n\n{% docs campaign_language %}\n\"Language in which the campaign is available\"\n{% enddocs %}\n\n{% docs agent_id %}\nIf set, the content type of the picture the member is sending us. Exp. image/png.\n{% enddocs %}\n\n{% docs attachment_content_type %}\nIf set, the handle of the Front agent this outbound support message is from.\n{% enddocs %}\n\n{% docs topic %}\nHolds a reference to the **last** campaign topic the member's conversation was in. This is useful to allow members to talk to Gambit and get quick responses (through Rivescript), without Gambit completely forgetting what state the member's interaction with a campaign topic was in.\n{% enddocs %}\n\n{% docs action_serial_id %}\nSerial id for the user's action. Depends on the source of the action. May be the bertly click id, sms message id, etc.\n{% enddocs %}\n\n{% docs channel %}\nChannel for the user's action. Depends on the source of the action. (e.g. web, sms)\n{% enddocs %}\n\n{% docs first_action_month %}\nMonth during which the user took their first action. \n{% enddocs %}\n\n{% docs event_id %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs event_source %}\nApplication source for event (eg. Phoenix, Northstar)\n{% enddocs %}\n\n{% docs event_datetime %}\nWhen the event occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs event_name %}\nName of the event (eg. northstar_submitted_register, https://docs.google.com/spreadsheets/d/1lm-fGrIm85nUTxSojqyCt_Ehmm1zEbViFhKpxcJiz1A/edit#gid=406441516)\n{% enddocs %}\n\n{% docs event_type %}\nType of event (pv = 'Page View', se = 'Structured Event')\n{% enddocs %}\n\n{% docs host %}\nURL host where event occurred (eg. www.dosomething.org or identity.dosomething.org)\n{% enddocs %}\n\n{% docs path %}\nURL path event occurred at (eg. /login or /us/campaigns/huddle-for-heroes)\n{% enddocs %}\n\n{% docs query_parameters %}\nOptional query parameters for the request (eg. query=huddle)\n{% enddocs %}\n\n{% docs se_category %}\nCategory of event (eg. focused_field, authentication) - Custom structured event\n{% enddocs %}\n\n{% docs se_action %}\nAction performed / event name (eg. form_submitted, action_failed) - Custom structured event\n{% enddocs %}\n\n{% docs se_label %}\nThe object of the action (eg. first_name, register, voter_reg_status) - Custom structured event\n{% enddocs %}\n\n{% docs session_id %}\nUnique identifier of the user's session\n{% enddocs %}\n\n{% docs session_counter %}\nHow many sessions a user has started\n{% enddocs %}\n\n{% docs browser_size %}\nWhich type of browser a user is using (eg. Mobile, Desktop)\n{% enddocs %}\n\n{% docs northstar_id %}\nThe Northstar ID of the user who generated the event\n{% enddocs %}\n\n{% docs device_id %}\nID of the device used\n{% enddocs %}\n\n{% docs referrer_host %}\nURL host of the referring site (eg. google.com)\n{% enddocs %}\n\n{% docs referrer_path %}\nURL path from referring site (eg. /10-stats-on-teen-drug-and-alcohol-use/)\n{% enddocs %}\n\n{% docs referrer_source %}\nReferrer source name (eg. Google, Facebook)\n{% enddocs %}\n\n{% docs utm_source %}\nTracks where the traffic is coming from. (eg. scholarship_listing, Facebook)\n{% enddocs %}\n\n{% docs utm_medium %}\nHow the traffic got to the platform (eg. referral, CPC)\n{% enddocs %}\n\n{% docs utm_campaign %}\nTracks which campaign the traffic was generated by. Shows up in Google Analytics as Campaign Name (eg. editorial_newsletter)\n{% enddocs %}\n\n{% docs url %}\nURL of campaign (eg. https://dosome.click/nyn5m7)\n{% enddocs %}\n\n{% docs modal_type %}\nNULL or SURVEY_MODAL\n{% enddocs %}\n\n{% docs landing_datetime %}\nWhen the session started in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs ending_datetime %}\nWhen the session ended in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs session_duration_seconds %}\nSession duration in seconds\n{% enddocs %}\n\n{% docs num_pages_views %}\nNumber of pages viewed in session\n{% enddocs %}\n\n{% docs landing_page %}\nFirst page the user viewed in the session (eg. /us/facts/11-facts-about-bp-oil-spill)\n{% enddocs %}\n\n{% docs exit_page %}\n\"Which page the user ended or exited their session from (eg. /us/campaigns/green-your-getaway)\"\n{% enddocs %}\n\n{% docs days_since_last_session %}\n\"Days since their last session.\"\n{% enddocs %}\n\n{% docs post_type %}\nType of post, (e.g. photo, voter-reg)\n{% enddocs %}\n\n{% docs noun %}\nNoun that corresponds to the item in the call to action that was delivered. (e.g. drawings, tweets)\n{% enddocs %}\n\n{% docs verb %}\nVerb corresponding to the action the user took. (e.g. shared, sent, taken)\n{% enddocs %}\n\n{% docs deleted_at %}\nDate time in UTC when a user deleted their post.\n{% enddocs %}\n\n{% docs _fivetran_deleted %}\nMarks rows that were deleted in the source table\n{% enddocs %}\n\n{% docs _fivetran_synced %}\n(UTC timestamp) keeps track of when each row was last successfully synced\n{% enddocs %}\n\n{% docs reportback %}\nWhether the post is a reportback \n{% enddocs %}\n\n{% docs active %}\nWhether the user is active \n{% enddocs %}\n\n{% docs anonymous %}\nWhether the user is anonymous when making the post \n{% enddocs %}\n\n{% docs callpower_campaign_id %}\nUnique ID corresponding to the Callpower campaign. Callpower allows users to record messages for their representatives.\n{% enddocs %}\n\n{% docs quiz %}\nWhether the post is a quiz \n{% enddocs %}\n\n{% docs action_type %}\nType of action the user took. (e.g. share-something, donate-something)\n{% enddocs %}\n\n{% docs online %}\nWhether the action is a online as opposed to IRL.\n{% enddocs %}\n\n{% docs time_commitment %}\nEstimated time required to do the action (e.g. 3.0+, <0.5)\n{% enddocs %}\n\n{% docs num_signups %}\nQuantity of campaign signups\n{% enddocs %}\n\n{% docs most_recent_signup %}\nTimestamp of the most recent signup in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs num_rbs %}\nQuantity of reportbacks for the user\n{% enddocs %}\n\n{% docs total_quantity %}\nTotal quantity of items in reportbacks\n{% enddocs %}\n\n{% docs most_recent_rb %}\nWhen the most recent reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs first_rb %}\nWhen the first reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs avg_time_betw_rbs %}\nCalculated average time between reportbacks.\n{% enddocs %}\n\n{% docs avg_days_next_action_after_rb %}\nCalculated average days until next action after reportback\n{% enddocs %}\n\n{% docs days_to_next_action_after_last_rb %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs most_recent_mam_action %}\nMost recent monthly active member qualifying action in UTC (eg. 2018-01-01 12:00:00).\n{% enddocs %}\n\n{% docs most_recent_email_open %}\nMost recent email open in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs most_recent_all_actions %}\nMost recent timestamp of any action in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs last_action_is_rb %}\nWhether the last action the user took was a reportback\n{% enddocs %}\n\n{% docs days_since_last_action %}\nDays since the user's last action\n{% enddocs %}\n\n{% docs time_to_first_rb %}\nHow much time after registering until the user's first reportback\n{% enddocs %}\n\n{% docs sms_unsubscribed_at %}\nTimestamp of when user unsubscribed from SMS messaging\n{% enddocs %}\n\n{% docs user_unsubscribed_at %}\nTimestamp of when user unsubscribed from email or sms\n{% enddocs %}\n\n{% docs voter_reg_acquisition %}\nWhether the user was an acquisition through voter registration efforts. \n{% enddocs %}\n\n{% docs last_logged_in %}\nDate time in UTC when user last logged in to Northstar\n{% enddocs %}\n\n{% docs last_accessed %}\nDate time in UTC when user last access the website\n{% enddocs %}\n\n{% docs last_messaged_at %}\nDate time in UTC when user was last sent a message via SMS or email\n{% enddocs %}\n\n{% docs facebook_id %}\nUser's facebook id\n{% enddocs %}\n\n{% docs mobile %}\nUsers's mobile phone number\n{% enddocs %}\n\n{% docs birthdate %}\nUser's birthdate\n{% enddocs %}\n\n{% docs first_name %}\nUser's first name\n{% enddocs %}\n\n{% docs last_name %}\nUser's last name\n{% enddocs %}\n\n{% docs voter_registration_status %}\nUser's registration status. (e.g. registration_complete, confirmed, uncertain) \n{% enddocs %}\n\n{% docs finish_with_state %}\nIf the registrant was eligible to use and passed through to complete their registration with their state\u2019s OVR system, it will be indicated in this field (direct quote from Rock-The-Vote documentation). Yes/No value in field.\n{% enddocs %}\n\n{% docs reportback_volume %}\nThis field returns 1 if non voter-reg action, since campaigns team only counts those a 1 reportback. If voter-reg action, we want to count quantity of post as number of registered voters.\n{% enddocs %}\n\n{% docs address_street_1 %}\nFirst line of user's street address\n{% enddocs %}\n\n{% docs address_street_2 %}\nSecond line of user's street address\n{% enddocs %}\n\n{% docs city %}\nUser's city\n{% enddocs %}\n\n{% docs state %}\nUser's state\n{% enddocs %}\n\n{% docs country %}\nUser's country\n{% enddocs %}\n\n{% docs language %}\nUser's language\n{% enddocs %}\n\n{% docs cio_status %}\nStatus of user from CIO. (e.g. customer_subscribed, customer_unsubscribed)\n{% enddocs %}\n\n{% docs cio_status_timestamp %}\nTimestamp when users's status was updated.\n{% enddocs %}\n\n{% docs sms_status %}\nCurrent SMS status. (e.g. undeliverable, unknown)\n{% enddocs %}\n\n{% docs source_detail %}\nDetails of the origin of the user. (e.g. tell_a_friend, other, opt_in_path/197981)\n{% enddocs %}\n\n{% docs badges %}\nWhether the user has any badges. \n{% enddocs %}\n\n{% docs refer_friends %}\nWhether the user is a part of the refer a friend campaign. \n{% enddocs %}\n\n{% docs subscribed_member %}\nWhether the user is subscribed. \n{% enddocs %}\n\n{% docs last_updated_at %}\nTimestamp when users's was updated.\n{% enddocs %}\n\n{% docs school_id %}\nUnique identifier for the user's school. This info comes from the school finder.\n{% enddocs %}\n\n{% docs newsletter_topic %}\nNewsletter topic. (e.g. community, lifestyle)\n{% enddocs %}\n\n{% docs user_agent %}\nFull user agent string for a user's browser (e.g. \"Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:24.0) Gecko/20100101 Firefox/24.0\")\n{% enddocs %}\n\n{% docs drupal_id %}\nOld Drupal user ID\n{% enddocs %}\n\n{% docs campaigns %}\nCampaigns a user is signed up for.\n{% enddocs %}\n\n{% docs audit %}\nA very useful field with data containing information about changes to a user, e.g. timestamps when the user subscribed and unsubscribed.\n{% enddocs %}\n\n{% docs voting_plan_status %}\nThe indication of the user's plan to vote, e.g. voting, not_voting, cant_vote\n{% enddocs %}\n\n{% docs voting_plan_time_of_day %}\nThe time of day when the user plans to vote, e.g morning, afternoon, evening\n{% enddocs %}\n\n{% docs voting_plan_method_of_transport %}\nHow the user plans to get to their polling place. e.g. walk, drive\n{% enddocs %}\n\n{% docs voting_plan_attending_with %}\nWith Whom the user plans to go voting, e.g. family, friends, alone\n{% enddocs %}\n\n{% docs feature_flags %}\nJSON containing info on features like badges and refer-a-friend.\n{% enddocs %}\n\n{% docs dbt_updated_at %}\nDBT snapshot table data. The updated_at timestamp of the source record when this snapshot row was inserted.\n{% enddocs %}\n\n{% docs dbt_scd_id %}\nDBT snapshot table data. A unique key generated for each snapshotted record.\n{% enddocs %}\n\n{% docs dbt_valid_from %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this snapshot row was first inserted\n{% enddocs %}\n\n{% docs dbt_valid_to %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this row row became invalidated.\n{% enddocs %}\n\n{% docs google_id %}\nUser's Google ID obtained from login.\n{% enddocs %}\n\n{% docs causes %}\nCauses in which a user is interested. e.g. animal welfare, education, mental_health\n{% enddocs %}\n\n{% docs email_subscription_status %}\nEmail subscription status of the user\n{% enddocs %}\n\n{% docs role %}\nUser's role, e.g. user, staff\n{% enddocs %}\n\n{% docs cio_backfilled %}\nWhether this user's data was backfilled from CIO\n{% enddocs %}\n\n{% docs addr_source %}\nWhere the user submitted their address, e.g. sms, GDPR\n{% enddocs %}\n\n{% docs email_subscription_topics %}\nEmail subscription topics correspond to categories in CIO in which the user is interested. e.g. lifestyle, community, scholarship\n{% enddocs %}\n\n{% docs sms_paused %}\nWhether we've paused sending sms messages to the user.\n{% enddocs %}\n\n\n\n\n", "name": "facebook_id", "unique_id": "ds_dbt.facebook_id", "block_contents": "User's facebook id"}, "ds_dbt.mobile": {"root_path": "/Users/mrich/projects/quasar/quasar/dbt", "resource_type": "docs", "path": "schema.md", "original_file_path": "models/schema.md", "package_name": "ds_dbt", "file_contents": "\n{% docs click_id %}\nThis is a unique identifier for each click\n{% enddocs %}\n\n{% docs click_time %}\nTimestamp when user clicked.\n{% enddocs %}\n\n{% docs shortened %}\nShortened URL\n{% enddocs %}\n\n{% docs target_url %}\nURL where the user will be directed\n{% enddocs %}\n\n{% docs broadcast_id %}\nID of the broadcast that generated the shortened URL\n{% enddocs %}\n\n{% docs source %}\nSource of the URL (e.g. SMS, web), origin of the post (e.g. phoenix-web, phoenix-ashes, sms), or source where user was acquired. (e.g. sms, phoenix-next)\n{% enddocs %}\n\n{% docs interaction_type %}\nHow the user interacted with the link (e.g. preview, click)\n{% enddocs %}\n\n{% docs id %}\nUnique identifier for the post\n{% enddocs %}\n\n{% docs type %}\nType of post (e.g. photo)\n{% enddocs %}\n\n{% docs action %}\nPost action (e.g. DefendDreamers_Nov9_CongressCalls, GunViolence2018_Feb15_ParklandResponse)\n{% enddocs %}\n\n{% docs status %}\nPost status (e.g. accepted, rejected)\n{% enddocs %}\n\n{% docs quantity %}\nNumerical quantity of items specified in the call to action (e.g. 10, 200)\n{% enddocs %}\n\n{% docs source_bucket %}\nGrouping bucket for origin of the post (e.g. web, sms) \n{% enddocs %}\n\n{% docs created_at %}\nWhen the item was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs updated_at %}\nWhen the item was updated in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs text %}\nText of the post (e.g. \"Zoo animals and a super hero trying to help too!\") \n{% enddocs %}\n\n{% docs signup_id %}\nUnique identifier for the signup \n{% enddocs %}\n\n{% docs post_class %}\nClass of the signup (e.g. \"photo - default\", \"phone-call - DefendDreamers_Jan16_BothBodies\")\n{% enddocs %}\n\n{% docs is_accepted %}\nWhether the post has been accepted to be displayed to the public on the website\n{% enddocs %}\n\n{% docs action_id %}\nInternal identifier of the action \n{% enddocs %}\n\n{% docs location %}\nLocation where the action takes place (e.g. US-NY)\n{% enddocs %}\n\n{% docs postal_code %}\nPostal code where the action takes place\n{% enddocs %}\n\n{% docs is_reportback %}\nWhether the post is a reportback. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs civic_action %}\nWhether the post is a Civic Action. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs scholarship_entry %}\nWhether the post is a Scholarship Entry. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs why_participated %}\nWhy the user participated in this action. Entered by the user.\n{% enddocs %}\n\n{% docs details %}\nDetails about the post. Contains contentfulId and other information (e.g. {\"campaignContentfulId\":\"6ATBgGEQEeJoIcxs1qbwaC\"})\n{% enddocs %}\n\n{% docs email %}\nEmail address of the user.\n{% enddocs %}\n\n{% docs source_details %}\nDetails about the source of the item. This is sometimes represented as a JSON object, and for other tables like Turbovote its represented as a string. (e.g. \"{\"contentful_id\":\"3CTLlXfbwtz1FOMpl31SKV\",\"utm_source\":\"scholarship_listing\",\"utm_medium\":\"referral\",\"utm_campaign\":\"fastweb_2019_08\"}\", newsletter_456)\n{% enddocs %}\n\n{% docs campaign_id %}\nThis is a unique identifier for the campaign\n{% enddocs %}\n\n{% docs campaign_run_id %}\nUnique identifier for the campaign run\n{% enddocs %}\n\n{% docs campaign_name %}\nName of the campaign\n{% enddocs %}\n\n{% docs campaign_cause %}\nCampaign cause (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_run_start_date %}\nStart date of the campaign run\n{% enddocs %}\n\n{% docs campaign_run_end_date %}\nEnd date of the campaign run\n{% enddocs %}\n\n{% docs campaign_created_date %}\nWhen the campaign was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs campaign_node_id %}\nInternal unique node id for the campaign\n{% enddocs %}\n\n{% docs campaign_node_id_title %}\nCampaign title\n{% enddocs %}\n\n{% docs campaign_run_id_title %}\nTitle of the campaign run\n{% enddocs %}\n\n{% docs campaign_action_type %}\nCampaign action type (eg. Make Something, Share Something)\n{% enddocs %}\n\n{% docs campaign_cause_type %}\nCampaign cause type (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_noun %}\nNoun applicable to the user's action\n{% enddocs %}\n\n{% docs campaign_verb %}\nVerb describing the action the user should take\n{% enddocs %}\n\n{% docs campaign_cta %}\nCampaign's call to action\n{% enddocs %}\n\n{% docs campaign_language %}\n\"Language in which the campaign is available\"\n{% enddocs %}\n\n{% docs agent_id %}\nIf set, the content type of the picture the member is sending us. Exp. image/png.\n{% enddocs %}\n\n{% docs attachment_content_type %}\nIf set, the handle of the Front agent this outbound support message is from.\n{% enddocs %}\n\n{% docs topic %}\nHolds a reference to the **last** campaign topic the member's conversation was in. This is useful to allow members to talk to Gambit and get quick responses (through Rivescript), without Gambit completely forgetting what state the member's interaction with a campaign topic was in.\n{% enddocs %}\n\n{% docs action_serial_id %}\nSerial id for the user's action. Depends on the source of the action. May be the bertly click id, sms message id, etc.\n{% enddocs %}\n\n{% docs channel %}\nChannel for the user's action. Depends on the source of the action. (e.g. web, sms)\n{% enddocs %}\n\n{% docs first_action_month %}\nMonth during which the user took their first action. \n{% enddocs %}\n\n{% docs event_id %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs event_source %}\nApplication source for event (eg. Phoenix, Northstar)\n{% enddocs %}\n\n{% docs event_datetime %}\nWhen the event occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs event_name %}\nName of the event (eg. northstar_submitted_register, https://docs.google.com/spreadsheets/d/1lm-fGrIm85nUTxSojqyCt_Ehmm1zEbViFhKpxcJiz1A/edit#gid=406441516)\n{% enddocs %}\n\n{% docs event_type %}\nType of event (pv = 'Page View', se = 'Structured Event')\n{% enddocs %}\n\n{% docs host %}\nURL host where event occurred (eg. www.dosomething.org or identity.dosomething.org)\n{% enddocs %}\n\n{% docs path %}\nURL path event occurred at (eg. /login or /us/campaigns/huddle-for-heroes)\n{% enddocs %}\n\n{% docs query_parameters %}\nOptional query parameters for the request (eg. query=huddle)\n{% enddocs %}\n\n{% docs se_category %}\nCategory of event (eg. focused_field, authentication) - Custom structured event\n{% enddocs %}\n\n{% docs se_action %}\nAction performed / event name (eg. form_submitted, action_failed) - Custom structured event\n{% enddocs %}\n\n{% docs se_label %}\nThe object of the action (eg. first_name, register, voter_reg_status) - Custom structured event\n{% enddocs %}\n\n{% docs session_id %}\nUnique identifier of the user's session\n{% enddocs %}\n\n{% docs session_counter %}\nHow many sessions a user has started\n{% enddocs %}\n\n{% docs browser_size %}\nWhich type of browser a user is using (eg. Mobile, Desktop)\n{% enddocs %}\n\n{% docs northstar_id %}\nThe Northstar ID of the user who generated the event\n{% enddocs %}\n\n{% docs device_id %}\nID of the device used\n{% enddocs %}\n\n{% docs referrer_host %}\nURL host of the referring site (eg. google.com)\n{% enddocs %}\n\n{% docs referrer_path %}\nURL path from referring site (eg. /10-stats-on-teen-drug-and-alcohol-use/)\n{% enddocs %}\n\n{% docs referrer_source %}\nReferrer source name (eg. Google, Facebook)\n{% enddocs %}\n\n{% docs utm_source %}\nTracks where the traffic is coming from. (eg. scholarship_listing, Facebook)\n{% enddocs %}\n\n{% docs utm_medium %}\nHow the traffic got to the platform (eg. referral, CPC)\n{% enddocs %}\n\n{% docs utm_campaign %}\nTracks which campaign the traffic was generated by. Shows up in Google Analytics as Campaign Name (eg. editorial_newsletter)\n{% enddocs %}\n\n{% docs url %}\nURL of campaign (eg. https://dosome.click/nyn5m7)\n{% enddocs %}\n\n{% docs modal_type %}\nNULL or SURVEY_MODAL\n{% enddocs %}\n\n{% docs landing_datetime %}\nWhen the session started in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs ending_datetime %}\nWhen the session ended in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs session_duration_seconds %}\nSession duration in seconds\n{% enddocs %}\n\n{% docs num_pages_views %}\nNumber of pages viewed in session\n{% enddocs %}\n\n{% docs landing_page %}\nFirst page the user viewed in the session (eg. /us/facts/11-facts-about-bp-oil-spill)\n{% enddocs %}\n\n{% docs exit_page %}\n\"Which page the user ended or exited their session from (eg. /us/campaigns/green-your-getaway)\"\n{% enddocs %}\n\n{% docs days_since_last_session %}\n\"Days since their last session.\"\n{% enddocs %}\n\n{% docs post_type %}\nType of post, (e.g. photo, voter-reg)\n{% enddocs %}\n\n{% docs noun %}\nNoun that corresponds to the item in the call to action that was delivered. (e.g. drawings, tweets)\n{% enddocs %}\n\n{% docs verb %}\nVerb corresponding to the action the user took. (e.g. shared, sent, taken)\n{% enddocs %}\n\n{% docs deleted_at %}\nDate time in UTC when a user deleted their post.\n{% enddocs %}\n\n{% docs _fivetran_deleted %}\nMarks rows that were deleted in the source table\n{% enddocs %}\n\n{% docs _fivetran_synced %}\n(UTC timestamp) keeps track of when each row was last successfully synced\n{% enddocs %}\n\n{% docs reportback %}\nWhether the post is a reportback \n{% enddocs %}\n\n{% docs active %}\nWhether the user is active \n{% enddocs %}\n\n{% docs anonymous %}\nWhether the user is anonymous when making the post \n{% enddocs %}\n\n{% docs callpower_campaign_id %}\nUnique ID corresponding to the Callpower campaign. Callpower allows users to record messages for their representatives.\n{% enddocs %}\n\n{% docs quiz %}\nWhether the post is a quiz \n{% enddocs %}\n\n{% docs action_type %}\nType of action the user took. (e.g. share-something, donate-something)\n{% enddocs %}\n\n{% docs online %}\nWhether the action is a online as opposed to IRL.\n{% enddocs %}\n\n{% docs time_commitment %}\nEstimated time required to do the action (e.g. 3.0+, <0.5)\n{% enddocs %}\n\n{% docs num_signups %}\nQuantity of campaign signups\n{% enddocs %}\n\n{% docs most_recent_signup %}\nTimestamp of the most recent signup in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs num_rbs %}\nQuantity of reportbacks for the user\n{% enddocs %}\n\n{% docs total_quantity %}\nTotal quantity of items in reportbacks\n{% enddocs %}\n\n{% docs most_recent_rb %}\nWhen the most recent reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs first_rb %}\nWhen the first reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs avg_time_betw_rbs %}\nCalculated average time between reportbacks.\n{% enddocs %}\n\n{% docs avg_days_next_action_after_rb %}\nCalculated average days until next action after reportback\n{% enddocs %}\n\n{% docs days_to_next_action_after_last_rb %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs most_recent_mam_action %}\nMost recent monthly active member qualifying action in UTC (eg. 2018-01-01 12:00:00).\n{% enddocs %}\n\n{% docs most_recent_email_open %}\nMost recent email open in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs most_recent_all_actions %}\nMost recent timestamp of any action in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs last_action_is_rb %}\nWhether the last action the user took was a reportback\n{% enddocs %}\n\n{% docs days_since_last_action %}\nDays since the user's last action\n{% enddocs %}\n\n{% docs time_to_first_rb %}\nHow much time after registering until the user's first reportback\n{% enddocs %}\n\n{% docs sms_unsubscribed_at %}\nTimestamp of when user unsubscribed from SMS messaging\n{% enddocs %}\n\n{% docs user_unsubscribed_at %}\nTimestamp of when user unsubscribed from email or sms\n{% enddocs %}\n\n{% docs voter_reg_acquisition %}\nWhether the user was an acquisition through voter registration efforts. \n{% enddocs %}\n\n{% docs last_logged_in %}\nDate time in UTC when user last logged in to Northstar\n{% enddocs %}\n\n{% docs last_accessed %}\nDate time in UTC when user last access the website\n{% enddocs %}\n\n{% docs last_messaged_at %}\nDate time in UTC when user was last sent a message via SMS or email\n{% enddocs %}\n\n{% docs facebook_id %}\nUser's facebook id\n{% enddocs %}\n\n{% docs mobile %}\nUsers's mobile phone number\n{% enddocs %}\n\n{% docs birthdate %}\nUser's birthdate\n{% enddocs %}\n\n{% docs first_name %}\nUser's first name\n{% enddocs %}\n\n{% docs last_name %}\nUser's last name\n{% enddocs %}\n\n{% docs voter_registration_status %}\nUser's registration status. (e.g. registration_complete, confirmed, uncertain) \n{% enddocs %}\n\n{% docs finish_with_state %}\nIf the registrant was eligible to use and passed through to complete their registration with their state\u2019s OVR system, it will be indicated in this field (direct quote from Rock-The-Vote documentation). Yes/No value in field.\n{% enddocs %}\n\n{% docs reportback_volume %}\nThis field returns 1 if non voter-reg action, since campaigns team only counts those a 1 reportback. If voter-reg action, we want to count quantity of post as number of registered voters.\n{% enddocs %}\n\n{% docs address_street_1 %}\nFirst line of user's street address\n{% enddocs %}\n\n{% docs address_street_2 %}\nSecond line of user's street address\n{% enddocs %}\n\n{% docs city %}\nUser's city\n{% enddocs %}\n\n{% docs state %}\nUser's state\n{% enddocs %}\n\n{% docs country %}\nUser's country\n{% enddocs %}\n\n{% docs language %}\nUser's language\n{% enddocs %}\n\n{% docs cio_status %}\nStatus of user from CIO. (e.g. customer_subscribed, customer_unsubscribed)\n{% enddocs %}\n\n{% docs cio_status_timestamp %}\nTimestamp when users's status was updated.\n{% enddocs %}\n\n{% docs sms_status %}\nCurrent SMS status. (e.g. undeliverable, unknown)\n{% enddocs %}\n\n{% docs source_detail %}\nDetails of the origin of the user. (e.g. tell_a_friend, other, opt_in_path/197981)\n{% enddocs %}\n\n{% docs badges %}\nWhether the user has any badges. \n{% enddocs %}\n\n{% docs refer_friends %}\nWhether the user is a part of the refer a friend campaign. \n{% enddocs %}\n\n{% docs subscribed_member %}\nWhether the user is subscribed. \n{% enddocs %}\n\n{% docs last_updated_at %}\nTimestamp when users's was updated.\n{% enddocs %}\n\n{% docs school_id %}\nUnique identifier for the user's school. This info comes from the school finder.\n{% enddocs %}\n\n{% docs newsletter_topic %}\nNewsletter topic. (e.g. community, lifestyle)\n{% enddocs %}\n\n{% docs user_agent %}\nFull user agent string for a user's browser (e.g. \"Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:24.0) Gecko/20100101 Firefox/24.0\")\n{% enddocs %}\n\n{% docs drupal_id %}\nOld Drupal user ID\n{% enddocs %}\n\n{% docs campaigns %}\nCampaigns a user is signed up for.\n{% enddocs %}\n\n{% docs audit %}\nA very useful field with data containing information about changes to a user, e.g. timestamps when the user subscribed and unsubscribed.\n{% enddocs %}\n\n{% docs voting_plan_status %}\nThe indication of the user's plan to vote, e.g. voting, not_voting, cant_vote\n{% enddocs %}\n\n{% docs voting_plan_time_of_day %}\nThe time of day when the user plans to vote, e.g morning, afternoon, evening\n{% enddocs %}\n\n{% docs voting_plan_method_of_transport %}\nHow the user plans to get to their polling place. e.g. walk, drive\n{% enddocs %}\n\n{% docs voting_plan_attending_with %}\nWith Whom the user plans to go voting, e.g. family, friends, alone\n{% enddocs %}\n\n{% docs feature_flags %}\nJSON containing info on features like badges and refer-a-friend.\n{% enddocs %}\n\n{% docs dbt_updated_at %}\nDBT snapshot table data. The updated_at timestamp of the source record when this snapshot row was inserted.\n{% enddocs %}\n\n{% docs dbt_scd_id %}\nDBT snapshot table data. A unique key generated for each snapshotted record.\n{% enddocs %}\n\n{% docs dbt_valid_from %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this snapshot row was first inserted\n{% enddocs %}\n\n{% docs dbt_valid_to %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this row row became invalidated.\n{% enddocs %}\n\n{% docs google_id %}\nUser's Google ID obtained from login.\n{% enddocs %}\n\n{% docs causes %}\nCauses in which a user is interested. e.g. animal welfare, education, mental_health\n{% enddocs %}\n\n{% docs email_subscription_status %}\nEmail subscription status of the user\n{% enddocs %}\n\n{% docs role %}\nUser's role, e.g. user, staff\n{% enddocs %}\n\n{% docs cio_backfilled %}\nWhether this user's data was backfilled from CIO\n{% enddocs %}\n\n{% docs addr_source %}\nWhere the user submitted their address, e.g. sms, GDPR\n{% enddocs %}\n\n{% docs email_subscription_topics %}\nEmail subscription topics correspond to categories in CIO in which the user is interested. e.g. lifestyle, community, scholarship\n{% enddocs %}\n\n{% docs sms_paused %}\nWhether we've paused sending sms messages to the user.\n{% enddocs %}\n\n\n\n\n", "name": "mobile", "unique_id": "ds_dbt.mobile", "block_contents": "Users's mobile phone number"}, "ds_dbt.birthdate": {"root_path": "/Users/mrich/projects/quasar/quasar/dbt", "resource_type": "docs", "path": "schema.md", "original_file_path": "models/schema.md", "package_name": "ds_dbt", "file_contents": "\n{% docs click_id %}\nThis is a unique identifier for each click\n{% enddocs %}\n\n{% docs click_time %}\nTimestamp when user clicked.\n{% enddocs %}\n\n{% docs shortened %}\nShortened URL\n{% enddocs %}\n\n{% docs target_url %}\nURL where the user will be directed\n{% enddocs %}\n\n{% docs broadcast_id %}\nID of the broadcast that generated the shortened URL\n{% enddocs %}\n\n{% docs source %}\nSource of the URL (e.g. SMS, web), origin of the post (e.g. phoenix-web, phoenix-ashes, sms), or source where user was acquired. (e.g. sms, phoenix-next)\n{% enddocs %}\n\n{% docs interaction_type %}\nHow the user interacted with the link (e.g. preview, click)\n{% enddocs %}\n\n{% docs id %}\nUnique identifier for the post\n{% enddocs %}\n\n{% docs type %}\nType of post (e.g. photo)\n{% enddocs %}\n\n{% docs action %}\nPost action (e.g. DefendDreamers_Nov9_CongressCalls, GunViolence2018_Feb15_ParklandResponse)\n{% enddocs %}\n\n{% docs status %}\nPost status (e.g. accepted, rejected)\n{% enddocs %}\n\n{% docs quantity %}\nNumerical quantity of items specified in the call to action (e.g. 10, 200)\n{% enddocs %}\n\n{% docs source_bucket %}\nGrouping bucket for origin of the post (e.g. web, sms) \n{% enddocs %}\n\n{% docs created_at %}\nWhen the item was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs updated_at %}\nWhen the item was updated in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs text %}\nText of the post (e.g. \"Zoo animals and a super hero trying to help too!\") \n{% enddocs %}\n\n{% docs signup_id %}\nUnique identifier for the signup \n{% enddocs %}\n\n{% docs post_class %}\nClass of the signup (e.g. \"photo - default\", \"phone-call - DefendDreamers_Jan16_BothBodies\")\n{% enddocs %}\n\n{% docs is_accepted %}\nWhether the post has been accepted to be displayed to the public on the website\n{% enddocs %}\n\n{% docs action_id %}\nInternal identifier of the action \n{% enddocs %}\n\n{% docs location %}\nLocation where the action takes place (e.g. US-NY)\n{% enddocs %}\n\n{% docs postal_code %}\nPostal code where the action takes place\n{% enddocs %}\n\n{% docs is_reportback %}\nWhether the post is a reportback. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs civic_action %}\nWhether the post is a Civic Action. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs scholarship_entry %}\nWhether the post is a Scholarship Entry. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs why_participated %}\nWhy the user participated in this action. Entered by the user.\n{% enddocs %}\n\n{% docs details %}\nDetails about the post. Contains contentfulId and other information (e.g. {\"campaignContentfulId\":\"6ATBgGEQEeJoIcxs1qbwaC\"})\n{% enddocs %}\n\n{% docs email %}\nEmail address of the user.\n{% enddocs %}\n\n{% docs source_details %}\nDetails about the source of the item. This is sometimes represented as a JSON object, and for other tables like Turbovote its represented as a string. (e.g. \"{\"contentful_id\":\"3CTLlXfbwtz1FOMpl31SKV\",\"utm_source\":\"scholarship_listing\",\"utm_medium\":\"referral\",\"utm_campaign\":\"fastweb_2019_08\"}\", newsletter_456)\n{% enddocs %}\n\n{% docs campaign_id %}\nThis is a unique identifier for the campaign\n{% enddocs %}\n\n{% docs campaign_run_id %}\nUnique identifier for the campaign run\n{% enddocs %}\n\n{% docs campaign_name %}\nName of the campaign\n{% enddocs %}\n\n{% docs campaign_cause %}\nCampaign cause (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_run_start_date %}\nStart date of the campaign run\n{% enddocs %}\n\n{% docs campaign_run_end_date %}\nEnd date of the campaign run\n{% enddocs %}\n\n{% docs campaign_created_date %}\nWhen the campaign was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs campaign_node_id %}\nInternal unique node id for the campaign\n{% enddocs %}\n\n{% docs campaign_node_id_title %}\nCampaign title\n{% enddocs %}\n\n{% docs campaign_run_id_title %}\nTitle of the campaign run\n{% enddocs %}\n\n{% docs campaign_action_type %}\nCampaign action type (eg. Make Something, Share Something)\n{% enddocs %}\n\n{% docs campaign_cause_type %}\nCampaign cause type (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_noun %}\nNoun applicable to the user's action\n{% enddocs %}\n\n{% docs campaign_verb %}\nVerb describing the action the user should take\n{% enddocs %}\n\n{% docs campaign_cta %}\nCampaign's call to action\n{% enddocs %}\n\n{% docs campaign_language %}\n\"Language in which the campaign is available\"\n{% enddocs %}\n\n{% docs agent_id %}\nIf set, the content type of the picture the member is sending us. Exp. image/png.\n{% enddocs %}\n\n{% docs attachment_content_type %}\nIf set, the handle of the Front agent this outbound support message is from.\n{% enddocs %}\n\n{% docs topic %}\nHolds a reference to the **last** campaign topic the member's conversation was in. This is useful to allow members to talk to Gambit and get quick responses (through Rivescript), without Gambit completely forgetting what state the member's interaction with a campaign topic was in.\n{% enddocs %}\n\n{% docs action_serial_id %}\nSerial id for the user's action. Depends on the source of the action. May be the bertly click id, sms message id, etc.\n{% enddocs %}\n\n{% docs channel %}\nChannel for the user's action. Depends on the source of the action. (e.g. web, sms)\n{% enddocs %}\n\n{% docs first_action_month %}\nMonth during which the user took their first action. \n{% enddocs %}\n\n{% docs event_id %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs event_source %}\nApplication source for event (eg. Phoenix, Northstar)\n{% enddocs %}\n\n{% docs event_datetime %}\nWhen the event occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs event_name %}\nName of the event (eg. northstar_submitted_register, https://docs.google.com/spreadsheets/d/1lm-fGrIm85nUTxSojqyCt_Ehmm1zEbViFhKpxcJiz1A/edit#gid=406441516)\n{% enddocs %}\n\n{% docs event_type %}\nType of event (pv = 'Page View', se = 'Structured Event')\n{% enddocs %}\n\n{% docs host %}\nURL host where event occurred (eg. www.dosomething.org or identity.dosomething.org)\n{% enddocs %}\n\n{% docs path %}\nURL path event occurred at (eg. /login or /us/campaigns/huddle-for-heroes)\n{% enddocs %}\n\n{% docs query_parameters %}\nOptional query parameters for the request (eg. query=huddle)\n{% enddocs %}\n\n{% docs se_category %}\nCategory of event (eg. focused_field, authentication) - Custom structured event\n{% enddocs %}\n\n{% docs se_action %}\nAction performed / event name (eg. form_submitted, action_failed) - Custom structured event\n{% enddocs %}\n\n{% docs se_label %}\nThe object of the action (eg. first_name, register, voter_reg_status) - Custom structured event\n{% enddocs %}\n\n{% docs session_id %}\nUnique identifier of the user's session\n{% enddocs %}\n\n{% docs session_counter %}\nHow many sessions a user has started\n{% enddocs %}\n\n{% docs browser_size %}\nWhich type of browser a user is using (eg. Mobile, Desktop)\n{% enddocs %}\n\n{% docs northstar_id %}\nThe Northstar ID of the user who generated the event\n{% enddocs %}\n\n{% docs device_id %}\nID of the device used\n{% enddocs %}\n\n{% docs referrer_host %}\nURL host of the referring site (eg. google.com)\n{% enddocs %}\n\n{% docs referrer_path %}\nURL path from referring site (eg. /10-stats-on-teen-drug-and-alcohol-use/)\n{% enddocs %}\n\n{% docs referrer_source %}\nReferrer source name (eg. Google, Facebook)\n{% enddocs %}\n\n{% docs utm_source %}\nTracks where the traffic is coming from. (eg. scholarship_listing, Facebook)\n{% enddocs %}\n\n{% docs utm_medium %}\nHow the traffic got to the platform (eg. referral, CPC)\n{% enddocs %}\n\n{% docs utm_campaign %}\nTracks which campaign the traffic was generated by. Shows up in Google Analytics as Campaign Name (eg. editorial_newsletter)\n{% enddocs %}\n\n{% docs url %}\nURL of campaign (eg. https://dosome.click/nyn5m7)\n{% enddocs %}\n\n{% docs modal_type %}\nNULL or SURVEY_MODAL\n{% enddocs %}\n\n{% docs landing_datetime %}\nWhen the session started in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs ending_datetime %}\nWhen the session ended in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs session_duration_seconds %}\nSession duration in seconds\n{% enddocs %}\n\n{% docs num_pages_views %}\nNumber of pages viewed in session\n{% enddocs %}\n\n{% docs landing_page %}\nFirst page the user viewed in the session (eg. /us/facts/11-facts-about-bp-oil-spill)\n{% enddocs %}\n\n{% docs exit_page %}\n\"Which page the user ended or exited their session from (eg. /us/campaigns/green-your-getaway)\"\n{% enddocs %}\n\n{% docs days_since_last_session %}\n\"Days since their last session.\"\n{% enddocs %}\n\n{% docs post_type %}\nType of post, (e.g. photo, voter-reg)\n{% enddocs %}\n\n{% docs noun %}\nNoun that corresponds to the item in the call to action that was delivered. (e.g. drawings, tweets)\n{% enddocs %}\n\n{% docs verb %}\nVerb corresponding to the action the user took. (e.g. shared, sent, taken)\n{% enddocs %}\n\n{% docs deleted_at %}\nDate time in UTC when a user deleted their post.\n{% enddocs %}\n\n{% docs _fivetran_deleted %}\nMarks rows that were deleted in the source table\n{% enddocs %}\n\n{% docs _fivetran_synced %}\n(UTC timestamp) keeps track of when each row was last successfully synced\n{% enddocs %}\n\n{% docs reportback %}\nWhether the post is a reportback \n{% enddocs %}\n\n{% docs active %}\nWhether the user is active \n{% enddocs %}\n\n{% docs anonymous %}\nWhether the user is anonymous when making the post \n{% enddocs %}\n\n{% docs callpower_campaign_id %}\nUnique ID corresponding to the Callpower campaign. Callpower allows users to record messages for their representatives.\n{% enddocs %}\n\n{% docs quiz %}\nWhether the post is a quiz \n{% enddocs %}\n\n{% docs action_type %}\nType of action the user took. (e.g. share-something, donate-something)\n{% enddocs %}\n\n{% docs online %}\nWhether the action is a online as opposed to IRL.\n{% enddocs %}\n\n{% docs time_commitment %}\nEstimated time required to do the action (e.g. 3.0+, <0.5)\n{% enddocs %}\n\n{% docs num_signups %}\nQuantity of campaign signups\n{% enddocs %}\n\n{% docs most_recent_signup %}\nTimestamp of the most recent signup in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs num_rbs %}\nQuantity of reportbacks for the user\n{% enddocs %}\n\n{% docs total_quantity %}\nTotal quantity of items in reportbacks\n{% enddocs %}\n\n{% docs most_recent_rb %}\nWhen the most recent reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs first_rb %}\nWhen the first reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs avg_time_betw_rbs %}\nCalculated average time between reportbacks.\n{% enddocs %}\n\n{% docs avg_days_next_action_after_rb %}\nCalculated average days until next action after reportback\n{% enddocs %}\n\n{% docs days_to_next_action_after_last_rb %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs most_recent_mam_action %}\nMost recent monthly active member qualifying action in UTC (eg. 2018-01-01 12:00:00).\n{% enddocs %}\n\n{% docs most_recent_email_open %}\nMost recent email open in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs most_recent_all_actions %}\nMost recent timestamp of any action in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs last_action_is_rb %}\nWhether the last action the user took was a reportback\n{% enddocs %}\n\n{% docs days_since_last_action %}\nDays since the user's last action\n{% enddocs %}\n\n{% docs time_to_first_rb %}\nHow much time after registering until the user's first reportback\n{% enddocs %}\n\n{% docs sms_unsubscribed_at %}\nTimestamp of when user unsubscribed from SMS messaging\n{% enddocs %}\n\n{% docs user_unsubscribed_at %}\nTimestamp of when user unsubscribed from email or sms\n{% enddocs %}\n\n{% docs voter_reg_acquisition %}\nWhether the user was an acquisition through voter registration efforts. \n{% enddocs %}\n\n{% docs last_logged_in %}\nDate time in UTC when user last logged in to Northstar\n{% enddocs %}\n\n{% docs last_accessed %}\nDate time in UTC when user last access the website\n{% enddocs %}\n\n{% docs last_messaged_at %}\nDate time in UTC when user was last sent a message via SMS or email\n{% enddocs %}\n\n{% docs facebook_id %}\nUser's facebook id\n{% enddocs %}\n\n{% docs mobile %}\nUsers's mobile phone number\n{% enddocs %}\n\n{% docs birthdate %}\nUser's birthdate\n{% enddocs %}\n\n{% docs first_name %}\nUser's first name\n{% enddocs %}\n\n{% docs last_name %}\nUser's last name\n{% enddocs %}\n\n{% docs voter_registration_status %}\nUser's registration status. (e.g. registration_complete, confirmed, uncertain) \n{% enddocs %}\n\n{% docs finish_with_state %}\nIf the registrant was eligible to use and passed through to complete their registration with their state\u2019s OVR system, it will be indicated in this field (direct quote from Rock-The-Vote documentation). Yes/No value in field.\n{% enddocs %}\n\n{% docs reportback_volume %}\nThis field returns 1 if non voter-reg action, since campaigns team only counts those a 1 reportback. If voter-reg action, we want to count quantity of post as number of registered voters.\n{% enddocs %}\n\n{% docs address_street_1 %}\nFirst line of user's street address\n{% enddocs %}\n\n{% docs address_street_2 %}\nSecond line of user's street address\n{% enddocs %}\n\n{% docs city %}\nUser's city\n{% enddocs %}\n\n{% docs state %}\nUser's state\n{% enddocs %}\n\n{% docs country %}\nUser's country\n{% enddocs %}\n\n{% docs language %}\nUser's language\n{% enddocs %}\n\n{% docs cio_status %}\nStatus of user from CIO. (e.g. customer_subscribed, customer_unsubscribed)\n{% enddocs %}\n\n{% docs cio_status_timestamp %}\nTimestamp when users's status was updated.\n{% enddocs %}\n\n{% docs sms_status %}\nCurrent SMS status. (e.g. undeliverable, unknown)\n{% enddocs %}\n\n{% docs source_detail %}\nDetails of the origin of the user. (e.g. tell_a_friend, other, opt_in_path/197981)\n{% enddocs %}\n\n{% docs badges %}\nWhether the user has any badges. \n{% enddocs %}\n\n{% docs refer_friends %}\nWhether the user is a part of the refer a friend campaign. \n{% enddocs %}\n\n{% docs subscribed_member %}\nWhether the user is subscribed. \n{% enddocs %}\n\n{% docs last_updated_at %}\nTimestamp when users's was updated.\n{% enddocs %}\n\n{% docs school_id %}\nUnique identifier for the user's school. This info comes from the school finder.\n{% enddocs %}\n\n{% docs newsletter_topic %}\nNewsletter topic. (e.g. community, lifestyle)\n{% enddocs %}\n\n{% docs user_agent %}\nFull user agent string for a user's browser (e.g. \"Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:24.0) Gecko/20100101 Firefox/24.0\")\n{% enddocs %}\n\n{% docs drupal_id %}\nOld Drupal user ID\n{% enddocs %}\n\n{% docs campaigns %}\nCampaigns a user is signed up for.\n{% enddocs %}\n\n{% docs audit %}\nA very useful field with data containing information about changes to a user, e.g. timestamps when the user subscribed and unsubscribed.\n{% enddocs %}\n\n{% docs voting_plan_status %}\nThe indication of the user's plan to vote, e.g. voting, not_voting, cant_vote\n{% enddocs %}\n\n{% docs voting_plan_time_of_day %}\nThe time of day when the user plans to vote, e.g morning, afternoon, evening\n{% enddocs %}\n\n{% docs voting_plan_method_of_transport %}\nHow the user plans to get to their polling place. e.g. walk, drive\n{% enddocs %}\n\n{% docs voting_plan_attending_with %}\nWith Whom the user plans to go voting, e.g. family, friends, alone\n{% enddocs %}\n\n{% docs feature_flags %}\nJSON containing info on features like badges and refer-a-friend.\n{% enddocs %}\n\n{% docs dbt_updated_at %}\nDBT snapshot table data. The updated_at timestamp of the source record when this snapshot row was inserted.\n{% enddocs %}\n\n{% docs dbt_scd_id %}\nDBT snapshot table data. A unique key generated for each snapshotted record.\n{% enddocs %}\n\n{% docs dbt_valid_from %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this snapshot row was first inserted\n{% enddocs %}\n\n{% docs dbt_valid_to %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this row row became invalidated.\n{% enddocs %}\n\n{% docs google_id %}\nUser's Google ID obtained from login.\n{% enddocs %}\n\n{% docs causes %}\nCauses in which a user is interested. e.g. animal welfare, education, mental_health\n{% enddocs %}\n\n{% docs email_subscription_status %}\nEmail subscription status of the user\n{% enddocs %}\n\n{% docs role %}\nUser's role, e.g. user, staff\n{% enddocs %}\n\n{% docs cio_backfilled %}\nWhether this user's data was backfilled from CIO\n{% enddocs %}\n\n{% docs addr_source %}\nWhere the user submitted their address, e.g. sms, GDPR\n{% enddocs %}\n\n{% docs email_subscription_topics %}\nEmail subscription topics correspond to categories in CIO in which the user is interested. e.g. lifestyle, community, scholarship\n{% enddocs %}\n\n{% docs sms_paused %}\nWhether we've paused sending sms messages to the user.\n{% enddocs %}\n\n\n\n\n", "name": "birthdate", "unique_id": "ds_dbt.birthdate", "block_contents": "User's birthdate"}, "ds_dbt.first_name": {"root_path": "/Users/mrich/projects/quasar/quasar/dbt", "resource_type": "docs", "path": "schema.md", "original_file_path": "models/schema.md", "package_name": "ds_dbt", "file_contents": "\n{% docs click_id %}\nThis is a unique identifier for each click\n{% enddocs %}\n\n{% docs click_time %}\nTimestamp when user clicked.\n{% enddocs %}\n\n{% docs shortened %}\nShortened URL\n{% enddocs %}\n\n{% docs target_url %}\nURL where the user will be directed\n{% enddocs %}\n\n{% docs broadcast_id %}\nID of the broadcast that generated the shortened URL\n{% enddocs %}\n\n{% docs source %}\nSource of the URL (e.g. SMS, web), origin of the post (e.g. phoenix-web, phoenix-ashes, sms), or source where user was acquired. (e.g. sms, phoenix-next)\n{% enddocs %}\n\n{% docs interaction_type %}\nHow the user interacted with the link (e.g. preview, click)\n{% enddocs %}\n\n{% docs id %}\nUnique identifier for the post\n{% enddocs %}\n\n{% docs type %}\nType of post (e.g. photo)\n{% enddocs %}\n\n{% docs action %}\nPost action (e.g. DefendDreamers_Nov9_CongressCalls, GunViolence2018_Feb15_ParklandResponse)\n{% enddocs %}\n\n{% docs status %}\nPost status (e.g. accepted, rejected)\n{% enddocs %}\n\n{% docs quantity %}\nNumerical quantity of items specified in the call to action (e.g. 10, 200)\n{% enddocs %}\n\n{% docs source_bucket %}\nGrouping bucket for origin of the post (e.g. web, sms) \n{% enddocs %}\n\n{% docs created_at %}\nWhen the item was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs updated_at %}\nWhen the item was updated in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs text %}\nText of the post (e.g. \"Zoo animals and a super hero trying to help too!\") \n{% enddocs %}\n\n{% docs signup_id %}\nUnique identifier for the signup \n{% enddocs %}\n\n{% docs post_class %}\nClass of the signup (e.g. \"photo - default\", \"phone-call - DefendDreamers_Jan16_BothBodies\")\n{% enddocs %}\n\n{% docs is_accepted %}\nWhether the post has been accepted to be displayed to the public on the website\n{% enddocs %}\n\n{% docs action_id %}\nInternal identifier of the action \n{% enddocs %}\n\n{% docs location %}\nLocation where the action takes place (e.g. US-NY)\n{% enddocs %}\n\n{% docs postal_code %}\nPostal code where the action takes place\n{% enddocs %}\n\n{% docs is_reportback %}\nWhether the post is a reportback. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs civic_action %}\nWhether the post is a Civic Action. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs scholarship_entry %}\nWhether the post is a Scholarship Entry. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs why_participated %}\nWhy the user participated in this action. Entered by the user.\n{% enddocs %}\n\n{% docs details %}\nDetails about the post. Contains contentfulId and other information (e.g. {\"campaignContentfulId\":\"6ATBgGEQEeJoIcxs1qbwaC\"})\n{% enddocs %}\n\n{% docs email %}\nEmail address of the user.\n{% enddocs %}\n\n{% docs source_details %}\nDetails about the source of the item. This is sometimes represented as a JSON object, and for other tables like Turbovote its represented as a string. (e.g. \"{\"contentful_id\":\"3CTLlXfbwtz1FOMpl31SKV\",\"utm_source\":\"scholarship_listing\",\"utm_medium\":\"referral\",\"utm_campaign\":\"fastweb_2019_08\"}\", newsletter_456)\n{% enddocs %}\n\n{% docs campaign_id %}\nThis is a unique identifier for the campaign\n{% enddocs %}\n\n{% docs campaign_run_id %}\nUnique identifier for the campaign run\n{% enddocs %}\n\n{% docs campaign_name %}\nName of the campaign\n{% enddocs %}\n\n{% docs campaign_cause %}\nCampaign cause (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_run_start_date %}\nStart date of the campaign run\n{% enddocs %}\n\n{% docs campaign_run_end_date %}\nEnd date of the campaign run\n{% enddocs %}\n\n{% docs campaign_created_date %}\nWhen the campaign was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs campaign_node_id %}\nInternal unique node id for the campaign\n{% enddocs %}\n\n{% docs campaign_node_id_title %}\nCampaign title\n{% enddocs %}\n\n{% docs campaign_run_id_title %}\nTitle of the campaign run\n{% enddocs %}\n\n{% docs campaign_action_type %}\nCampaign action type (eg. Make Something, Share Something)\n{% enddocs %}\n\n{% docs campaign_cause_type %}\nCampaign cause type (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_noun %}\nNoun applicable to the user's action\n{% enddocs %}\n\n{% docs campaign_verb %}\nVerb describing the action the user should take\n{% enddocs %}\n\n{% docs campaign_cta %}\nCampaign's call to action\n{% enddocs %}\n\n{% docs campaign_language %}\n\"Language in which the campaign is available\"\n{% enddocs %}\n\n{% docs agent_id %}\nIf set, the content type of the picture the member is sending us. Exp. image/png.\n{% enddocs %}\n\n{% docs attachment_content_type %}\nIf set, the handle of the Front agent this outbound support message is from.\n{% enddocs %}\n\n{% docs topic %}\nHolds a reference to the **last** campaign topic the member's conversation was in. This is useful to allow members to talk to Gambit and get quick responses (through Rivescript), without Gambit completely forgetting what state the member's interaction with a campaign topic was in.\n{% enddocs %}\n\n{% docs action_serial_id %}\nSerial id for the user's action. Depends on the source of the action. May be the bertly click id, sms message id, etc.\n{% enddocs %}\n\n{% docs channel %}\nChannel for the user's action. Depends on the source of the action. (e.g. web, sms)\n{% enddocs %}\n\n{% docs first_action_month %}\nMonth during which the user took their first action. \n{% enddocs %}\n\n{% docs event_id %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs event_source %}\nApplication source for event (eg. Phoenix, Northstar)\n{% enddocs %}\n\n{% docs event_datetime %}\nWhen the event occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs event_name %}\nName of the event (eg. northstar_submitted_register, https://docs.google.com/spreadsheets/d/1lm-fGrIm85nUTxSojqyCt_Ehmm1zEbViFhKpxcJiz1A/edit#gid=406441516)\n{% enddocs %}\n\n{% docs event_type %}\nType of event (pv = 'Page View', se = 'Structured Event')\n{% enddocs %}\n\n{% docs host %}\nURL host where event occurred (eg. www.dosomething.org or identity.dosomething.org)\n{% enddocs %}\n\n{% docs path %}\nURL path event occurred at (eg. /login or /us/campaigns/huddle-for-heroes)\n{% enddocs %}\n\n{% docs query_parameters %}\nOptional query parameters for the request (eg. query=huddle)\n{% enddocs %}\n\n{% docs se_category %}\nCategory of event (eg. focused_field, authentication) - Custom structured event\n{% enddocs %}\n\n{% docs se_action %}\nAction performed / event name (eg. form_submitted, action_failed) - Custom structured event\n{% enddocs %}\n\n{% docs se_label %}\nThe object of the action (eg. first_name, register, voter_reg_status) - Custom structured event\n{% enddocs %}\n\n{% docs session_id %}\nUnique identifier of the user's session\n{% enddocs %}\n\n{% docs session_counter %}\nHow many sessions a user has started\n{% enddocs %}\n\n{% docs browser_size %}\nWhich type of browser a user is using (eg. Mobile, Desktop)\n{% enddocs %}\n\n{% docs northstar_id %}\nThe Northstar ID of the user who generated the event\n{% enddocs %}\n\n{% docs device_id %}\nID of the device used\n{% enddocs %}\n\n{% docs referrer_host %}\nURL host of the referring site (eg. google.com)\n{% enddocs %}\n\n{% docs referrer_path %}\nURL path from referring site (eg. /10-stats-on-teen-drug-and-alcohol-use/)\n{% enddocs %}\n\n{% docs referrer_source %}\nReferrer source name (eg. Google, Facebook)\n{% enddocs %}\n\n{% docs utm_source %}\nTracks where the traffic is coming from. (eg. scholarship_listing, Facebook)\n{% enddocs %}\n\n{% docs utm_medium %}\nHow the traffic got to the platform (eg. referral, CPC)\n{% enddocs %}\n\n{% docs utm_campaign %}\nTracks which campaign the traffic was generated by. Shows up in Google Analytics as Campaign Name (eg. editorial_newsletter)\n{% enddocs %}\n\n{% docs url %}\nURL of campaign (eg. https://dosome.click/nyn5m7)\n{% enddocs %}\n\n{% docs modal_type %}\nNULL or SURVEY_MODAL\n{% enddocs %}\n\n{% docs landing_datetime %}\nWhen the session started in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs ending_datetime %}\nWhen the session ended in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs session_duration_seconds %}\nSession duration in seconds\n{% enddocs %}\n\n{% docs num_pages_views %}\nNumber of pages viewed in session\n{% enddocs %}\n\n{% docs landing_page %}\nFirst page the user viewed in the session (eg. /us/facts/11-facts-about-bp-oil-spill)\n{% enddocs %}\n\n{% docs exit_page %}\n\"Which page the user ended or exited their session from (eg. /us/campaigns/green-your-getaway)\"\n{% enddocs %}\n\n{% docs days_since_last_session %}\n\"Days since their last session.\"\n{% enddocs %}\n\n{% docs post_type %}\nType of post, (e.g. photo, voter-reg)\n{% enddocs %}\n\n{% docs noun %}\nNoun that corresponds to the item in the call to action that was delivered. (e.g. drawings, tweets)\n{% enddocs %}\n\n{% docs verb %}\nVerb corresponding to the action the user took. (e.g. shared, sent, taken)\n{% enddocs %}\n\n{% docs deleted_at %}\nDate time in UTC when a user deleted their post.\n{% enddocs %}\n\n{% docs _fivetran_deleted %}\nMarks rows that were deleted in the source table\n{% enddocs %}\n\n{% docs _fivetran_synced %}\n(UTC timestamp) keeps track of when each row was last successfully synced\n{% enddocs %}\n\n{% docs reportback %}\nWhether the post is a reportback \n{% enddocs %}\n\n{% docs active %}\nWhether the user is active \n{% enddocs %}\n\n{% docs anonymous %}\nWhether the user is anonymous when making the post \n{% enddocs %}\n\n{% docs callpower_campaign_id %}\nUnique ID corresponding to the Callpower campaign. Callpower allows users to record messages for their representatives.\n{% enddocs %}\n\n{% docs quiz %}\nWhether the post is a quiz \n{% enddocs %}\n\n{% docs action_type %}\nType of action the user took. (e.g. share-something, donate-something)\n{% enddocs %}\n\n{% docs online %}\nWhether the action is a online as opposed to IRL.\n{% enddocs %}\n\n{% docs time_commitment %}\nEstimated time required to do the action (e.g. 3.0+, <0.5)\n{% enddocs %}\n\n{% docs num_signups %}\nQuantity of campaign signups\n{% enddocs %}\n\n{% docs most_recent_signup %}\nTimestamp of the most recent signup in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs num_rbs %}\nQuantity of reportbacks for the user\n{% enddocs %}\n\n{% docs total_quantity %}\nTotal quantity of items in reportbacks\n{% enddocs %}\n\n{% docs most_recent_rb %}\nWhen the most recent reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs first_rb %}\nWhen the first reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs avg_time_betw_rbs %}\nCalculated average time between reportbacks.\n{% enddocs %}\n\n{% docs avg_days_next_action_after_rb %}\nCalculated average days until next action after reportback\n{% enddocs %}\n\n{% docs days_to_next_action_after_last_rb %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs most_recent_mam_action %}\nMost recent monthly active member qualifying action in UTC (eg. 2018-01-01 12:00:00).\n{% enddocs %}\n\n{% docs most_recent_email_open %}\nMost recent email open in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs most_recent_all_actions %}\nMost recent timestamp of any action in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs last_action_is_rb %}\nWhether the last action the user took was a reportback\n{% enddocs %}\n\n{% docs days_since_last_action %}\nDays since the user's last action\n{% enddocs %}\n\n{% docs time_to_first_rb %}\nHow much time after registering until the user's first reportback\n{% enddocs %}\n\n{% docs sms_unsubscribed_at %}\nTimestamp of when user unsubscribed from SMS messaging\n{% enddocs %}\n\n{% docs user_unsubscribed_at %}\nTimestamp of when user unsubscribed from email or sms\n{% enddocs %}\n\n{% docs voter_reg_acquisition %}\nWhether the user was an acquisition through voter registration efforts. \n{% enddocs %}\n\n{% docs last_logged_in %}\nDate time in UTC when user last logged in to Northstar\n{% enddocs %}\n\n{% docs last_accessed %}\nDate time in UTC when user last access the website\n{% enddocs %}\n\n{% docs last_messaged_at %}\nDate time in UTC when user was last sent a message via SMS or email\n{% enddocs %}\n\n{% docs facebook_id %}\nUser's facebook id\n{% enddocs %}\n\n{% docs mobile %}\nUsers's mobile phone number\n{% enddocs %}\n\n{% docs birthdate %}\nUser's birthdate\n{% enddocs %}\n\n{% docs first_name %}\nUser's first name\n{% enddocs %}\n\n{% docs last_name %}\nUser's last name\n{% enddocs %}\n\n{% docs voter_registration_status %}\nUser's registration status. (e.g. registration_complete, confirmed, uncertain) \n{% enddocs %}\n\n{% docs finish_with_state %}\nIf the registrant was eligible to use and passed through to complete their registration with their state\u2019s OVR system, it will be indicated in this field (direct quote from Rock-The-Vote documentation). Yes/No value in field.\n{% enddocs %}\n\n{% docs reportback_volume %}\nThis field returns 1 if non voter-reg action, since campaigns team only counts those a 1 reportback. If voter-reg action, we want to count quantity of post as number of registered voters.\n{% enddocs %}\n\n{% docs address_street_1 %}\nFirst line of user's street address\n{% enddocs %}\n\n{% docs address_street_2 %}\nSecond line of user's street address\n{% enddocs %}\n\n{% docs city %}\nUser's city\n{% enddocs %}\n\n{% docs state %}\nUser's state\n{% enddocs %}\n\n{% docs country %}\nUser's country\n{% enddocs %}\n\n{% docs language %}\nUser's language\n{% enddocs %}\n\n{% docs cio_status %}\nStatus of user from CIO. (e.g. customer_subscribed, customer_unsubscribed)\n{% enddocs %}\n\n{% docs cio_status_timestamp %}\nTimestamp when users's status was updated.\n{% enddocs %}\n\n{% docs sms_status %}\nCurrent SMS status. (e.g. undeliverable, unknown)\n{% enddocs %}\n\n{% docs source_detail %}\nDetails of the origin of the user. (e.g. tell_a_friend, other, opt_in_path/197981)\n{% enddocs %}\n\n{% docs badges %}\nWhether the user has any badges. \n{% enddocs %}\n\n{% docs refer_friends %}\nWhether the user is a part of the refer a friend campaign. \n{% enddocs %}\n\n{% docs subscribed_member %}\nWhether the user is subscribed. \n{% enddocs %}\n\n{% docs last_updated_at %}\nTimestamp when users's was updated.\n{% enddocs %}\n\n{% docs school_id %}\nUnique identifier for the user's school. This info comes from the school finder.\n{% enddocs %}\n\n{% docs newsletter_topic %}\nNewsletter topic. (e.g. community, lifestyle)\n{% enddocs %}\n\n{% docs user_agent %}\nFull user agent string for a user's browser (e.g. \"Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:24.0) Gecko/20100101 Firefox/24.0\")\n{% enddocs %}\n\n{% docs drupal_id %}\nOld Drupal user ID\n{% enddocs %}\n\n{% docs campaigns %}\nCampaigns a user is signed up for.\n{% enddocs %}\n\n{% docs audit %}\nA very useful field with data containing information about changes to a user, e.g. timestamps when the user subscribed and unsubscribed.\n{% enddocs %}\n\n{% docs voting_plan_status %}\nThe indication of the user's plan to vote, e.g. voting, not_voting, cant_vote\n{% enddocs %}\n\n{% docs voting_plan_time_of_day %}\nThe time of day when the user plans to vote, e.g morning, afternoon, evening\n{% enddocs %}\n\n{% docs voting_plan_method_of_transport %}\nHow the user plans to get to their polling place. e.g. walk, drive\n{% enddocs %}\n\n{% docs voting_plan_attending_with %}\nWith Whom the user plans to go voting, e.g. family, friends, alone\n{% enddocs %}\n\n{% docs feature_flags %}\nJSON containing info on features like badges and refer-a-friend.\n{% enddocs %}\n\n{% docs dbt_updated_at %}\nDBT snapshot table data. The updated_at timestamp of the source record when this snapshot row was inserted.\n{% enddocs %}\n\n{% docs dbt_scd_id %}\nDBT snapshot table data. A unique key generated for each snapshotted record.\n{% enddocs %}\n\n{% docs dbt_valid_from %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this snapshot row was first inserted\n{% enddocs %}\n\n{% docs dbt_valid_to %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this row row became invalidated.\n{% enddocs %}\n\n{% docs google_id %}\nUser's Google ID obtained from login.\n{% enddocs %}\n\n{% docs causes %}\nCauses in which a user is interested. e.g. animal welfare, education, mental_health\n{% enddocs %}\n\n{% docs email_subscription_status %}\nEmail subscription status of the user\n{% enddocs %}\n\n{% docs role %}\nUser's role, e.g. user, staff\n{% enddocs %}\n\n{% docs cio_backfilled %}\nWhether this user's data was backfilled from CIO\n{% enddocs %}\n\n{% docs addr_source %}\nWhere the user submitted their address, e.g. sms, GDPR\n{% enddocs %}\n\n{% docs email_subscription_topics %}\nEmail subscription topics correspond to categories in CIO in which the user is interested. e.g. lifestyle, community, scholarship\n{% enddocs %}\n\n{% docs sms_paused %}\nWhether we've paused sending sms messages to the user.\n{% enddocs %}\n\n\n\n\n", "name": "first_name", "unique_id": "ds_dbt.first_name", "block_contents": "User's first name"}, "ds_dbt.last_name": {"root_path": "/Users/mrich/projects/quasar/quasar/dbt", "resource_type": "docs", "path": "schema.md", "original_file_path": "models/schema.md", "package_name": "ds_dbt", "file_contents": "\n{% docs click_id %}\nThis is a unique identifier for each click\n{% enddocs %}\n\n{% docs click_time %}\nTimestamp when user clicked.\n{% enddocs %}\n\n{% docs shortened %}\nShortened URL\n{% enddocs %}\n\n{% docs target_url %}\nURL where the user will be directed\n{% enddocs %}\n\n{% docs broadcast_id %}\nID of the broadcast that generated the shortened URL\n{% enddocs %}\n\n{% docs source %}\nSource of the URL (e.g. SMS, web), origin of the post (e.g. phoenix-web, phoenix-ashes, sms), or source where user was acquired. (e.g. sms, phoenix-next)\n{% enddocs %}\n\n{% docs interaction_type %}\nHow the user interacted with the link (e.g. preview, click)\n{% enddocs %}\n\n{% docs id %}\nUnique identifier for the post\n{% enddocs %}\n\n{% docs type %}\nType of post (e.g. photo)\n{% enddocs %}\n\n{% docs action %}\nPost action (e.g. DefendDreamers_Nov9_CongressCalls, GunViolence2018_Feb15_ParklandResponse)\n{% enddocs %}\n\n{% docs status %}\nPost status (e.g. accepted, rejected)\n{% enddocs %}\n\n{% docs quantity %}\nNumerical quantity of items specified in the call to action (e.g. 10, 200)\n{% enddocs %}\n\n{% docs source_bucket %}\nGrouping bucket for origin of the post (e.g. web, sms) \n{% enddocs %}\n\n{% docs created_at %}\nWhen the item was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs updated_at %}\nWhen the item was updated in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs text %}\nText of the post (e.g. \"Zoo animals and a super hero trying to help too!\") \n{% enddocs %}\n\n{% docs signup_id %}\nUnique identifier for the signup \n{% enddocs %}\n\n{% docs post_class %}\nClass of the signup (e.g. \"photo - default\", \"phone-call - DefendDreamers_Jan16_BothBodies\")\n{% enddocs %}\n\n{% docs is_accepted %}\nWhether the post has been accepted to be displayed to the public on the website\n{% enddocs %}\n\n{% docs action_id %}\nInternal identifier of the action \n{% enddocs %}\n\n{% docs location %}\nLocation where the action takes place (e.g. US-NY)\n{% enddocs %}\n\n{% docs postal_code %}\nPostal code where the action takes place\n{% enddocs %}\n\n{% docs is_reportback %}\nWhether the post is a reportback. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs civic_action %}\nWhether the post is a Civic Action. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs scholarship_entry %}\nWhether the post is a Scholarship Entry. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs why_participated %}\nWhy the user participated in this action. Entered by the user.\n{% enddocs %}\n\n{% docs details %}\nDetails about the post. Contains contentfulId and other information (e.g. {\"campaignContentfulId\":\"6ATBgGEQEeJoIcxs1qbwaC\"})\n{% enddocs %}\n\n{% docs email %}\nEmail address of the user.\n{% enddocs %}\n\n{% docs source_details %}\nDetails about the source of the item. This is sometimes represented as a JSON object, and for other tables like Turbovote its represented as a string. (e.g. \"{\"contentful_id\":\"3CTLlXfbwtz1FOMpl31SKV\",\"utm_source\":\"scholarship_listing\",\"utm_medium\":\"referral\",\"utm_campaign\":\"fastweb_2019_08\"}\", newsletter_456)\n{% enddocs %}\n\n{% docs campaign_id %}\nThis is a unique identifier for the campaign\n{% enddocs %}\n\n{% docs campaign_run_id %}\nUnique identifier for the campaign run\n{% enddocs %}\n\n{% docs campaign_name %}\nName of the campaign\n{% enddocs %}\n\n{% docs campaign_cause %}\nCampaign cause (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_run_start_date %}\nStart date of the campaign run\n{% enddocs %}\n\n{% docs campaign_run_end_date %}\nEnd date of the campaign run\n{% enddocs %}\n\n{% docs campaign_created_date %}\nWhen the campaign was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs campaign_node_id %}\nInternal unique node id for the campaign\n{% enddocs %}\n\n{% docs campaign_node_id_title %}\nCampaign title\n{% enddocs %}\n\n{% docs campaign_run_id_title %}\nTitle of the campaign run\n{% enddocs %}\n\n{% docs campaign_action_type %}\nCampaign action type (eg. Make Something, Share Something)\n{% enddocs %}\n\n{% docs campaign_cause_type %}\nCampaign cause type (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_noun %}\nNoun applicable to the user's action\n{% enddocs %}\n\n{% docs campaign_verb %}\nVerb describing the action the user should take\n{% enddocs %}\n\n{% docs campaign_cta %}\nCampaign's call to action\n{% enddocs %}\n\n{% docs campaign_language %}\n\"Language in which the campaign is available\"\n{% enddocs %}\n\n{% docs agent_id %}\nIf set, the content type of the picture the member is sending us. Exp. image/png.\n{% enddocs %}\n\n{% docs attachment_content_type %}\nIf set, the handle of the Front agent this outbound support message is from.\n{% enddocs %}\n\n{% docs topic %}\nHolds a reference to the **last** campaign topic the member's conversation was in. This is useful to allow members to talk to Gambit and get quick responses (through Rivescript), without Gambit completely forgetting what state the member's interaction with a campaign topic was in.\n{% enddocs %}\n\n{% docs action_serial_id %}\nSerial id for the user's action. Depends on the source of the action. May be the bertly click id, sms message id, etc.\n{% enddocs %}\n\n{% docs channel %}\nChannel for the user's action. Depends on the source of the action. (e.g. web, sms)\n{% enddocs %}\n\n{% docs first_action_month %}\nMonth during which the user took their first action. \n{% enddocs %}\n\n{% docs event_id %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs event_source %}\nApplication source for event (eg. Phoenix, Northstar)\n{% enddocs %}\n\n{% docs event_datetime %}\nWhen the event occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs event_name %}\nName of the event (eg. northstar_submitted_register, https://docs.google.com/spreadsheets/d/1lm-fGrIm85nUTxSojqyCt_Ehmm1zEbViFhKpxcJiz1A/edit#gid=406441516)\n{% enddocs %}\n\n{% docs event_type %}\nType of event (pv = 'Page View', se = 'Structured Event')\n{% enddocs %}\n\n{% docs host %}\nURL host where event occurred (eg. www.dosomething.org or identity.dosomething.org)\n{% enddocs %}\n\n{% docs path %}\nURL path event occurred at (eg. /login or /us/campaigns/huddle-for-heroes)\n{% enddocs %}\n\n{% docs query_parameters %}\nOptional query parameters for the request (eg. query=huddle)\n{% enddocs %}\n\n{% docs se_category %}\nCategory of event (eg. focused_field, authentication) - Custom structured event\n{% enddocs %}\n\n{% docs se_action %}\nAction performed / event name (eg. form_submitted, action_failed) - Custom structured event\n{% enddocs %}\n\n{% docs se_label %}\nThe object of the action (eg. first_name, register, voter_reg_status) - Custom structured event\n{% enddocs %}\n\n{% docs session_id %}\nUnique identifier of the user's session\n{% enddocs %}\n\n{% docs session_counter %}\nHow many sessions a user has started\n{% enddocs %}\n\n{% docs browser_size %}\nWhich type of browser a user is using (eg. Mobile, Desktop)\n{% enddocs %}\n\n{% docs northstar_id %}\nThe Northstar ID of the user who generated the event\n{% enddocs %}\n\n{% docs device_id %}\nID of the device used\n{% enddocs %}\n\n{% docs referrer_host %}\nURL host of the referring site (eg. google.com)\n{% enddocs %}\n\n{% docs referrer_path %}\nURL path from referring site (eg. /10-stats-on-teen-drug-and-alcohol-use/)\n{% enddocs %}\n\n{% docs referrer_source %}\nReferrer source name (eg. Google, Facebook)\n{% enddocs %}\n\n{% docs utm_source %}\nTracks where the traffic is coming from. (eg. scholarship_listing, Facebook)\n{% enddocs %}\n\n{% docs utm_medium %}\nHow the traffic got to the platform (eg. referral, CPC)\n{% enddocs %}\n\n{% docs utm_campaign %}\nTracks which campaign the traffic was generated by. Shows up in Google Analytics as Campaign Name (eg. editorial_newsletter)\n{% enddocs %}\n\n{% docs url %}\nURL of campaign (eg. https://dosome.click/nyn5m7)\n{% enddocs %}\n\n{% docs modal_type %}\nNULL or SURVEY_MODAL\n{% enddocs %}\n\n{% docs landing_datetime %}\nWhen the session started in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs ending_datetime %}\nWhen the session ended in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs session_duration_seconds %}\nSession duration in seconds\n{% enddocs %}\n\n{% docs num_pages_views %}\nNumber of pages viewed in session\n{% enddocs %}\n\n{% docs landing_page %}\nFirst page the user viewed in the session (eg. /us/facts/11-facts-about-bp-oil-spill)\n{% enddocs %}\n\n{% docs exit_page %}\n\"Which page the user ended or exited their session from (eg. /us/campaigns/green-your-getaway)\"\n{% enddocs %}\n\n{% docs days_since_last_session %}\n\"Days since their last session.\"\n{% enddocs %}\n\n{% docs post_type %}\nType of post, (e.g. photo, voter-reg)\n{% enddocs %}\n\n{% docs noun %}\nNoun that corresponds to the item in the call to action that was delivered. (e.g. drawings, tweets)\n{% enddocs %}\n\n{% docs verb %}\nVerb corresponding to the action the user took. (e.g. shared, sent, taken)\n{% enddocs %}\n\n{% docs deleted_at %}\nDate time in UTC when a user deleted their post.\n{% enddocs %}\n\n{% docs _fivetran_deleted %}\nMarks rows that were deleted in the source table\n{% enddocs %}\n\n{% docs _fivetran_synced %}\n(UTC timestamp) keeps track of when each row was last successfully synced\n{% enddocs %}\n\n{% docs reportback %}\nWhether the post is a reportback \n{% enddocs %}\n\n{% docs active %}\nWhether the user is active \n{% enddocs %}\n\n{% docs anonymous %}\nWhether the user is anonymous when making the post \n{% enddocs %}\n\n{% docs callpower_campaign_id %}\nUnique ID corresponding to the Callpower campaign. Callpower allows users to record messages for their representatives.\n{% enddocs %}\n\n{% docs quiz %}\nWhether the post is a quiz \n{% enddocs %}\n\n{% docs action_type %}\nType of action the user took. (e.g. share-something, donate-something)\n{% enddocs %}\n\n{% docs online %}\nWhether the action is a online as opposed to IRL.\n{% enddocs %}\n\n{% docs time_commitment %}\nEstimated time required to do the action (e.g. 3.0+, <0.5)\n{% enddocs %}\n\n{% docs num_signups %}\nQuantity of campaign signups\n{% enddocs %}\n\n{% docs most_recent_signup %}\nTimestamp of the most recent signup in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs num_rbs %}\nQuantity of reportbacks for the user\n{% enddocs %}\n\n{% docs total_quantity %}\nTotal quantity of items in reportbacks\n{% enddocs %}\n\n{% docs most_recent_rb %}\nWhen the most recent reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs first_rb %}\nWhen the first reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs avg_time_betw_rbs %}\nCalculated average time between reportbacks.\n{% enddocs %}\n\n{% docs avg_days_next_action_after_rb %}\nCalculated average days until next action after reportback\n{% enddocs %}\n\n{% docs days_to_next_action_after_last_rb %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs most_recent_mam_action %}\nMost recent monthly active member qualifying action in UTC (eg. 2018-01-01 12:00:00).\n{% enddocs %}\n\n{% docs most_recent_email_open %}\nMost recent email open in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs most_recent_all_actions %}\nMost recent timestamp of any action in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs last_action_is_rb %}\nWhether the last action the user took was a reportback\n{% enddocs %}\n\n{% docs days_since_last_action %}\nDays since the user's last action\n{% enddocs %}\n\n{% docs time_to_first_rb %}\nHow much time after registering until the user's first reportback\n{% enddocs %}\n\n{% docs sms_unsubscribed_at %}\nTimestamp of when user unsubscribed from SMS messaging\n{% enddocs %}\n\n{% docs user_unsubscribed_at %}\nTimestamp of when user unsubscribed from email or sms\n{% enddocs %}\n\n{% docs voter_reg_acquisition %}\nWhether the user was an acquisition through voter registration efforts. \n{% enddocs %}\n\n{% docs last_logged_in %}\nDate time in UTC when user last logged in to Northstar\n{% enddocs %}\n\n{% docs last_accessed %}\nDate time in UTC when user last access the website\n{% enddocs %}\n\n{% docs last_messaged_at %}\nDate time in UTC when user was last sent a message via SMS or email\n{% enddocs %}\n\n{% docs facebook_id %}\nUser's facebook id\n{% enddocs %}\n\n{% docs mobile %}\nUsers's mobile phone number\n{% enddocs %}\n\n{% docs birthdate %}\nUser's birthdate\n{% enddocs %}\n\n{% docs first_name %}\nUser's first name\n{% enddocs %}\n\n{% docs last_name %}\nUser's last name\n{% enddocs %}\n\n{% docs voter_registration_status %}\nUser's registration status. (e.g. registration_complete, confirmed, uncertain) \n{% enddocs %}\n\n{% docs finish_with_state %}\nIf the registrant was eligible to use and passed through to complete their registration with their state\u2019s OVR system, it will be indicated in this field (direct quote from Rock-The-Vote documentation). Yes/No value in field.\n{% enddocs %}\n\n{% docs reportback_volume %}\nThis field returns 1 if non voter-reg action, since campaigns team only counts those a 1 reportback. If voter-reg action, we want to count quantity of post as number of registered voters.\n{% enddocs %}\n\n{% docs address_street_1 %}\nFirst line of user's street address\n{% enddocs %}\n\n{% docs address_street_2 %}\nSecond line of user's street address\n{% enddocs %}\n\n{% docs city %}\nUser's city\n{% enddocs %}\n\n{% docs state %}\nUser's state\n{% enddocs %}\n\n{% docs country %}\nUser's country\n{% enddocs %}\n\n{% docs language %}\nUser's language\n{% enddocs %}\n\n{% docs cio_status %}\nStatus of user from CIO. (e.g. customer_subscribed, customer_unsubscribed)\n{% enddocs %}\n\n{% docs cio_status_timestamp %}\nTimestamp when users's status was updated.\n{% enddocs %}\n\n{% docs sms_status %}\nCurrent SMS status. (e.g. undeliverable, unknown)\n{% enddocs %}\n\n{% docs source_detail %}\nDetails of the origin of the user. (e.g. tell_a_friend, other, opt_in_path/197981)\n{% enddocs %}\n\n{% docs badges %}\nWhether the user has any badges. \n{% enddocs %}\n\n{% docs refer_friends %}\nWhether the user is a part of the refer a friend campaign. \n{% enddocs %}\n\n{% docs subscribed_member %}\nWhether the user is subscribed. \n{% enddocs %}\n\n{% docs last_updated_at %}\nTimestamp when users's was updated.\n{% enddocs %}\n\n{% docs school_id %}\nUnique identifier for the user's school. This info comes from the school finder.\n{% enddocs %}\n\n{% docs newsletter_topic %}\nNewsletter topic. (e.g. community, lifestyle)\n{% enddocs %}\n\n{% docs user_agent %}\nFull user agent string for a user's browser (e.g. \"Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:24.0) Gecko/20100101 Firefox/24.0\")\n{% enddocs %}\n\n{% docs drupal_id %}\nOld Drupal user ID\n{% enddocs %}\n\n{% docs campaigns %}\nCampaigns a user is signed up for.\n{% enddocs %}\n\n{% docs audit %}\nA very useful field with data containing information about changes to a user, e.g. timestamps when the user subscribed and unsubscribed.\n{% enddocs %}\n\n{% docs voting_plan_status %}\nThe indication of the user's plan to vote, e.g. voting, not_voting, cant_vote\n{% enddocs %}\n\n{% docs voting_plan_time_of_day %}\nThe time of day when the user plans to vote, e.g morning, afternoon, evening\n{% enddocs %}\n\n{% docs voting_plan_method_of_transport %}\nHow the user plans to get to their polling place. e.g. walk, drive\n{% enddocs %}\n\n{% docs voting_plan_attending_with %}\nWith Whom the user plans to go voting, e.g. family, friends, alone\n{% enddocs %}\n\n{% docs feature_flags %}\nJSON containing info on features like badges and refer-a-friend.\n{% enddocs %}\n\n{% docs dbt_updated_at %}\nDBT snapshot table data. The updated_at timestamp of the source record when this snapshot row was inserted.\n{% enddocs %}\n\n{% docs dbt_scd_id %}\nDBT snapshot table data. A unique key generated for each snapshotted record.\n{% enddocs %}\n\n{% docs dbt_valid_from %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this snapshot row was first inserted\n{% enddocs %}\n\n{% docs dbt_valid_to %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this row row became invalidated.\n{% enddocs %}\n\n{% docs google_id %}\nUser's Google ID obtained from login.\n{% enddocs %}\n\n{% docs causes %}\nCauses in which a user is interested. e.g. animal welfare, education, mental_health\n{% enddocs %}\n\n{% docs email_subscription_status %}\nEmail subscription status of the user\n{% enddocs %}\n\n{% docs role %}\nUser's role, e.g. user, staff\n{% enddocs %}\n\n{% docs cio_backfilled %}\nWhether this user's data was backfilled from CIO\n{% enddocs %}\n\n{% docs addr_source %}\nWhere the user submitted their address, e.g. sms, GDPR\n{% enddocs %}\n\n{% docs email_subscription_topics %}\nEmail subscription topics correspond to categories in CIO in which the user is interested. e.g. lifestyle, community, scholarship\n{% enddocs %}\n\n{% docs sms_paused %}\nWhether we've paused sending sms messages to the user.\n{% enddocs %}\n\n\n\n\n", "name": "last_name", "unique_id": "ds_dbt.last_name", "block_contents": "User's last name"}, "ds_dbt.voter_registration_status": {"root_path": "/Users/mrich/projects/quasar/quasar/dbt", "resource_type": "docs", "path": "schema.md", "original_file_path": "models/schema.md", "package_name": "ds_dbt", "file_contents": "\n{% docs click_id %}\nThis is a unique identifier for each click\n{% enddocs %}\n\n{% docs click_time %}\nTimestamp when user clicked.\n{% enddocs %}\n\n{% docs shortened %}\nShortened URL\n{% enddocs %}\n\n{% docs target_url %}\nURL where the user will be directed\n{% enddocs %}\n\n{% docs broadcast_id %}\nID of the broadcast that generated the shortened URL\n{% enddocs %}\n\n{% docs source %}\nSource of the URL (e.g. SMS, web), origin of the post (e.g. phoenix-web, phoenix-ashes, sms), or source where user was acquired. (e.g. sms, phoenix-next)\n{% enddocs %}\n\n{% docs interaction_type %}\nHow the user interacted with the link (e.g. preview, click)\n{% enddocs %}\n\n{% docs id %}\nUnique identifier for the post\n{% enddocs %}\n\n{% docs type %}\nType of post (e.g. photo)\n{% enddocs %}\n\n{% docs action %}\nPost action (e.g. DefendDreamers_Nov9_CongressCalls, GunViolence2018_Feb15_ParklandResponse)\n{% enddocs %}\n\n{% docs status %}\nPost status (e.g. accepted, rejected)\n{% enddocs %}\n\n{% docs quantity %}\nNumerical quantity of items specified in the call to action (e.g. 10, 200)\n{% enddocs %}\n\n{% docs source_bucket %}\nGrouping bucket for origin of the post (e.g. web, sms) \n{% enddocs %}\n\n{% docs created_at %}\nWhen the item was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs updated_at %}\nWhen the item was updated in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs text %}\nText of the post (e.g. \"Zoo animals and a super hero trying to help too!\") \n{% enddocs %}\n\n{% docs signup_id %}\nUnique identifier for the signup \n{% enddocs %}\n\n{% docs post_class %}\nClass of the signup (e.g. \"photo - default\", \"phone-call - DefendDreamers_Jan16_BothBodies\")\n{% enddocs %}\n\n{% docs is_accepted %}\nWhether the post has been accepted to be displayed to the public on the website\n{% enddocs %}\n\n{% docs action_id %}\nInternal identifier of the action \n{% enddocs %}\n\n{% docs location %}\nLocation where the action takes place (e.g. US-NY)\n{% enddocs %}\n\n{% docs postal_code %}\nPostal code where the action takes place\n{% enddocs %}\n\n{% docs is_reportback %}\nWhether the post is a reportback. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs civic_action %}\nWhether the post is a Civic Action. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs scholarship_entry %}\nWhether the post is a Scholarship Entry. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs why_participated %}\nWhy the user participated in this action. Entered by the user.\n{% enddocs %}\n\n{% docs details %}\nDetails about the post. Contains contentfulId and other information (e.g. {\"campaignContentfulId\":\"6ATBgGEQEeJoIcxs1qbwaC\"})\n{% enddocs %}\n\n{% docs email %}\nEmail address of the user.\n{% enddocs %}\n\n{% docs source_details %}\nDetails about the source of the item. This is sometimes represented as a JSON object, and for other tables like Turbovote its represented as a string. (e.g. \"{\"contentful_id\":\"3CTLlXfbwtz1FOMpl31SKV\",\"utm_source\":\"scholarship_listing\",\"utm_medium\":\"referral\",\"utm_campaign\":\"fastweb_2019_08\"}\", newsletter_456)\n{% enddocs %}\n\n{% docs campaign_id %}\nThis is a unique identifier for the campaign\n{% enddocs %}\n\n{% docs campaign_run_id %}\nUnique identifier for the campaign run\n{% enddocs %}\n\n{% docs campaign_name %}\nName of the campaign\n{% enddocs %}\n\n{% docs campaign_cause %}\nCampaign cause (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_run_start_date %}\nStart date of the campaign run\n{% enddocs %}\n\n{% docs campaign_run_end_date %}\nEnd date of the campaign run\n{% enddocs %}\n\n{% docs campaign_created_date %}\nWhen the campaign was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs campaign_node_id %}\nInternal unique node id for the campaign\n{% enddocs %}\n\n{% docs campaign_node_id_title %}\nCampaign title\n{% enddocs %}\n\n{% docs campaign_run_id_title %}\nTitle of the campaign run\n{% enddocs %}\n\n{% docs campaign_action_type %}\nCampaign action type (eg. Make Something, Share Something)\n{% enddocs %}\n\n{% docs campaign_cause_type %}\nCampaign cause type (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_noun %}\nNoun applicable to the user's action\n{% enddocs %}\n\n{% docs campaign_verb %}\nVerb describing the action the user should take\n{% enddocs %}\n\n{% docs campaign_cta %}\nCampaign's call to action\n{% enddocs %}\n\n{% docs campaign_language %}\n\"Language in which the campaign is available\"\n{% enddocs %}\n\n{% docs agent_id %}\nIf set, the content type of the picture the member is sending us. Exp. image/png.\n{% enddocs %}\n\n{% docs attachment_content_type %}\nIf set, the handle of the Front agent this outbound support message is from.\n{% enddocs %}\n\n{% docs topic %}\nHolds a reference to the **last** campaign topic the member's conversation was in. This is useful to allow members to talk to Gambit and get quick responses (through Rivescript), without Gambit completely forgetting what state the member's interaction with a campaign topic was in.\n{% enddocs %}\n\n{% docs action_serial_id %}\nSerial id for the user's action. Depends on the source of the action. May be the bertly click id, sms message id, etc.\n{% enddocs %}\n\n{% docs channel %}\nChannel for the user's action. Depends on the source of the action. (e.g. web, sms)\n{% enddocs %}\n\n{% docs first_action_month %}\nMonth during which the user took their first action. \n{% enddocs %}\n\n{% docs event_id %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs event_source %}\nApplication source for event (eg. Phoenix, Northstar)\n{% enddocs %}\n\n{% docs event_datetime %}\nWhen the event occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs event_name %}\nName of the event (eg. northstar_submitted_register, https://docs.google.com/spreadsheets/d/1lm-fGrIm85nUTxSojqyCt_Ehmm1zEbViFhKpxcJiz1A/edit#gid=406441516)\n{% enddocs %}\n\n{% docs event_type %}\nType of event (pv = 'Page View', se = 'Structured Event')\n{% enddocs %}\n\n{% docs host %}\nURL host where event occurred (eg. www.dosomething.org or identity.dosomething.org)\n{% enddocs %}\n\n{% docs path %}\nURL path event occurred at (eg. /login or /us/campaigns/huddle-for-heroes)\n{% enddocs %}\n\n{% docs query_parameters %}\nOptional query parameters for the request (eg. query=huddle)\n{% enddocs %}\n\n{% docs se_category %}\nCategory of event (eg. focused_field, authentication) - Custom structured event\n{% enddocs %}\n\n{% docs se_action %}\nAction performed / event name (eg. form_submitted, action_failed) - Custom structured event\n{% enddocs %}\n\n{% docs se_label %}\nThe object of the action (eg. first_name, register, voter_reg_status) - Custom structured event\n{% enddocs %}\n\n{% docs session_id %}\nUnique identifier of the user's session\n{% enddocs %}\n\n{% docs session_counter %}\nHow many sessions a user has started\n{% enddocs %}\n\n{% docs browser_size %}\nWhich type of browser a user is using (eg. Mobile, Desktop)\n{% enddocs %}\n\n{% docs northstar_id %}\nThe Northstar ID of the user who generated the event\n{% enddocs %}\n\n{% docs device_id %}\nID of the device used\n{% enddocs %}\n\n{% docs referrer_host %}\nURL host of the referring site (eg. google.com)\n{% enddocs %}\n\n{% docs referrer_path %}\nURL path from referring site (eg. /10-stats-on-teen-drug-and-alcohol-use/)\n{% enddocs %}\n\n{% docs referrer_source %}\nReferrer source name (eg. Google, Facebook)\n{% enddocs %}\n\n{% docs utm_source %}\nTracks where the traffic is coming from. (eg. scholarship_listing, Facebook)\n{% enddocs %}\n\n{% docs utm_medium %}\nHow the traffic got to the platform (eg. referral, CPC)\n{% enddocs %}\n\n{% docs utm_campaign %}\nTracks which campaign the traffic was generated by. Shows up in Google Analytics as Campaign Name (eg. editorial_newsletter)\n{% enddocs %}\n\n{% docs url %}\nURL of campaign (eg. https://dosome.click/nyn5m7)\n{% enddocs %}\n\n{% docs modal_type %}\nNULL or SURVEY_MODAL\n{% enddocs %}\n\n{% docs landing_datetime %}\nWhen the session started in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs ending_datetime %}\nWhen the session ended in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs session_duration_seconds %}\nSession duration in seconds\n{% enddocs %}\n\n{% docs num_pages_views %}\nNumber of pages viewed in session\n{% enddocs %}\n\n{% docs landing_page %}\nFirst page the user viewed in the session (eg. /us/facts/11-facts-about-bp-oil-spill)\n{% enddocs %}\n\n{% docs exit_page %}\n\"Which page the user ended or exited their session from (eg. /us/campaigns/green-your-getaway)\"\n{% enddocs %}\n\n{% docs days_since_last_session %}\n\"Days since their last session.\"\n{% enddocs %}\n\n{% docs post_type %}\nType of post, (e.g. photo, voter-reg)\n{% enddocs %}\n\n{% docs noun %}\nNoun that corresponds to the item in the call to action that was delivered. (e.g. drawings, tweets)\n{% enddocs %}\n\n{% docs verb %}\nVerb corresponding to the action the user took. (e.g. shared, sent, taken)\n{% enddocs %}\n\n{% docs deleted_at %}\nDate time in UTC when a user deleted their post.\n{% enddocs %}\n\n{% docs _fivetran_deleted %}\nMarks rows that were deleted in the source table\n{% enddocs %}\n\n{% docs _fivetran_synced %}\n(UTC timestamp) keeps track of when each row was last successfully synced\n{% enddocs %}\n\n{% docs reportback %}\nWhether the post is a reportback \n{% enddocs %}\n\n{% docs active %}\nWhether the user is active \n{% enddocs %}\n\n{% docs anonymous %}\nWhether the user is anonymous when making the post \n{% enddocs %}\n\n{% docs callpower_campaign_id %}\nUnique ID corresponding to the Callpower campaign. Callpower allows users to record messages for their representatives.\n{% enddocs %}\n\n{% docs quiz %}\nWhether the post is a quiz \n{% enddocs %}\n\n{% docs action_type %}\nType of action the user took. (e.g. share-something, donate-something)\n{% enddocs %}\n\n{% docs online %}\nWhether the action is a online as opposed to IRL.\n{% enddocs %}\n\n{% docs time_commitment %}\nEstimated time required to do the action (e.g. 3.0+, <0.5)\n{% enddocs %}\n\n{% docs num_signups %}\nQuantity of campaign signups\n{% enddocs %}\n\n{% docs most_recent_signup %}\nTimestamp of the most recent signup in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs num_rbs %}\nQuantity of reportbacks for the user\n{% enddocs %}\n\n{% docs total_quantity %}\nTotal quantity of items in reportbacks\n{% enddocs %}\n\n{% docs most_recent_rb %}\nWhen the most recent reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs first_rb %}\nWhen the first reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs avg_time_betw_rbs %}\nCalculated average time between reportbacks.\n{% enddocs %}\n\n{% docs avg_days_next_action_after_rb %}\nCalculated average days until next action after reportback\n{% enddocs %}\n\n{% docs days_to_next_action_after_last_rb %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs most_recent_mam_action %}\nMost recent monthly active member qualifying action in UTC (eg. 2018-01-01 12:00:00).\n{% enddocs %}\n\n{% docs most_recent_email_open %}\nMost recent email open in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs most_recent_all_actions %}\nMost recent timestamp of any action in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs last_action_is_rb %}\nWhether the last action the user took was a reportback\n{% enddocs %}\n\n{% docs days_since_last_action %}\nDays since the user's last action\n{% enddocs %}\n\n{% docs time_to_first_rb %}\nHow much time after registering until the user's first reportback\n{% enddocs %}\n\n{% docs sms_unsubscribed_at %}\nTimestamp of when user unsubscribed from SMS messaging\n{% enddocs %}\n\n{% docs user_unsubscribed_at %}\nTimestamp of when user unsubscribed from email or sms\n{% enddocs %}\n\n{% docs voter_reg_acquisition %}\nWhether the user was an acquisition through voter registration efforts. \n{% enddocs %}\n\n{% docs last_logged_in %}\nDate time in UTC when user last logged in to Northstar\n{% enddocs %}\n\n{% docs last_accessed %}\nDate time in UTC when user last access the website\n{% enddocs %}\n\n{% docs last_messaged_at %}\nDate time in UTC when user was last sent a message via SMS or email\n{% enddocs %}\n\n{% docs facebook_id %}\nUser's facebook id\n{% enddocs %}\n\n{% docs mobile %}\nUsers's mobile phone number\n{% enddocs %}\n\n{% docs birthdate %}\nUser's birthdate\n{% enddocs %}\n\n{% docs first_name %}\nUser's first name\n{% enddocs %}\n\n{% docs last_name %}\nUser's last name\n{% enddocs %}\n\n{% docs voter_registration_status %}\nUser's registration status. (e.g. registration_complete, confirmed, uncertain) \n{% enddocs %}\n\n{% docs finish_with_state %}\nIf the registrant was eligible to use and passed through to complete their registration with their state\u2019s OVR system, it will be indicated in this field (direct quote from Rock-The-Vote documentation). Yes/No value in field.\n{% enddocs %}\n\n{% docs reportback_volume %}\nThis field returns 1 if non voter-reg action, since campaigns team only counts those a 1 reportback. If voter-reg action, we want to count quantity of post as number of registered voters.\n{% enddocs %}\n\n{% docs address_street_1 %}\nFirst line of user's street address\n{% enddocs %}\n\n{% docs address_street_2 %}\nSecond line of user's street address\n{% enddocs %}\n\n{% docs city %}\nUser's city\n{% enddocs %}\n\n{% docs state %}\nUser's state\n{% enddocs %}\n\n{% docs country %}\nUser's country\n{% enddocs %}\n\n{% docs language %}\nUser's language\n{% enddocs %}\n\n{% docs cio_status %}\nStatus of user from CIO. (e.g. customer_subscribed, customer_unsubscribed)\n{% enddocs %}\n\n{% docs cio_status_timestamp %}\nTimestamp when users's status was updated.\n{% enddocs %}\n\n{% docs sms_status %}\nCurrent SMS status. (e.g. undeliverable, unknown)\n{% enddocs %}\n\n{% docs source_detail %}\nDetails of the origin of the user. (e.g. tell_a_friend, other, opt_in_path/197981)\n{% enddocs %}\n\n{% docs badges %}\nWhether the user has any badges. \n{% enddocs %}\n\n{% docs refer_friends %}\nWhether the user is a part of the refer a friend campaign. \n{% enddocs %}\n\n{% docs subscribed_member %}\nWhether the user is subscribed. \n{% enddocs %}\n\n{% docs last_updated_at %}\nTimestamp when users's was updated.\n{% enddocs %}\n\n{% docs school_id %}\nUnique identifier for the user's school. This info comes from the school finder.\n{% enddocs %}\n\n{% docs newsletter_topic %}\nNewsletter topic. (e.g. community, lifestyle)\n{% enddocs %}\n\n{% docs user_agent %}\nFull user agent string for a user's browser (e.g. \"Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:24.0) Gecko/20100101 Firefox/24.0\")\n{% enddocs %}\n\n{% docs drupal_id %}\nOld Drupal user ID\n{% enddocs %}\n\n{% docs campaigns %}\nCampaigns a user is signed up for.\n{% enddocs %}\n\n{% docs audit %}\nA very useful field with data containing information about changes to a user, e.g. timestamps when the user subscribed and unsubscribed.\n{% enddocs %}\n\n{% docs voting_plan_status %}\nThe indication of the user's plan to vote, e.g. voting, not_voting, cant_vote\n{% enddocs %}\n\n{% docs voting_plan_time_of_day %}\nThe time of day when the user plans to vote, e.g morning, afternoon, evening\n{% enddocs %}\n\n{% docs voting_plan_method_of_transport %}\nHow the user plans to get to their polling place. e.g. walk, drive\n{% enddocs %}\n\n{% docs voting_plan_attending_with %}\nWith Whom the user plans to go voting, e.g. family, friends, alone\n{% enddocs %}\n\n{% docs feature_flags %}\nJSON containing info on features like badges and refer-a-friend.\n{% enddocs %}\n\n{% docs dbt_updated_at %}\nDBT snapshot table data. The updated_at timestamp of the source record when this snapshot row was inserted.\n{% enddocs %}\n\n{% docs dbt_scd_id %}\nDBT snapshot table data. A unique key generated for each snapshotted record.\n{% enddocs %}\n\n{% docs dbt_valid_from %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this snapshot row was first inserted\n{% enddocs %}\n\n{% docs dbt_valid_to %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this row row became invalidated.\n{% enddocs %}\n\n{% docs google_id %}\nUser's Google ID obtained from login.\n{% enddocs %}\n\n{% docs causes %}\nCauses in which a user is interested. e.g. animal welfare, education, mental_health\n{% enddocs %}\n\n{% docs email_subscription_status %}\nEmail subscription status of the user\n{% enddocs %}\n\n{% docs role %}\nUser's role, e.g. user, staff\n{% enddocs %}\n\n{% docs cio_backfilled %}\nWhether this user's data was backfilled from CIO\n{% enddocs %}\n\n{% docs addr_source %}\nWhere the user submitted their address, e.g. sms, GDPR\n{% enddocs %}\n\n{% docs email_subscription_topics %}\nEmail subscription topics correspond to categories in CIO in which the user is interested. e.g. lifestyle, community, scholarship\n{% enddocs %}\n\n{% docs sms_paused %}\nWhether we've paused sending sms messages to the user.\n{% enddocs %}\n\n\n\n\n", "name": "voter_registration_status", "unique_id": "ds_dbt.voter_registration_status", "block_contents": "User's registration status. (e.g. registration_complete, confirmed, uncertain)"}, "ds_dbt.finish_with_state": {"root_path": "/Users/mrich/projects/quasar/quasar/dbt", "resource_type": "docs", "path": "schema.md", "original_file_path": "models/schema.md", "package_name": "ds_dbt", "file_contents": "\n{% docs click_id %}\nThis is a unique identifier for each click\n{% enddocs %}\n\n{% docs click_time %}\nTimestamp when user clicked.\n{% enddocs %}\n\n{% docs shortened %}\nShortened URL\n{% enddocs %}\n\n{% docs target_url %}\nURL where the user will be directed\n{% enddocs %}\n\n{% docs broadcast_id %}\nID of the broadcast that generated the shortened URL\n{% enddocs %}\n\n{% docs source %}\nSource of the URL (e.g. SMS, web), origin of the post (e.g. phoenix-web, phoenix-ashes, sms), or source where user was acquired. (e.g. sms, phoenix-next)\n{% enddocs %}\n\n{% docs interaction_type %}\nHow the user interacted with the link (e.g. preview, click)\n{% enddocs %}\n\n{% docs id %}\nUnique identifier for the post\n{% enddocs %}\n\n{% docs type %}\nType of post (e.g. photo)\n{% enddocs %}\n\n{% docs action %}\nPost action (e.g. DefendDreamers_Nov9_CongressCalls, GunViolence2018_Feb15_ParklandResponse)\n{% enddocs %}\n\n{% docs status %}\nPost status (e.g. accepted, rejected)\n{% enddocs %}\n\n{% docs quantity %}\nNumerical quantity of items specified in the call to action (e.g. 10, 200)\n{% enddocs %}\n\n{% docs source_bucket %}\nGrouping bucket for origin of the post (e.g. web, sms) \n{% enddocs %}\n\n{% docs created_at %}\nWhen the item was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs updated_at %}\nWhen the item was updated in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs text %}\nText of the post (e.g. \"Zoo animals and a super hero trying to help too!\") \n{% enddocs %}\n\n{% docs signup_id %}\nUnique identifier for the signup \n{% enddocs %}\n\n{% docs post_class %}\nClass of the signup (e.g. \"photo - default\", \"phone-call - DefendDreamers_Jan16_BothBodies\")\n{% enddocs %}\n\n{% docs is_accepted %}\nWhether the post has been accepted to be displayed to the public on the website\n{% enddocs %}\n\n{% docs action_id %}\nInternal identifier of the action \n{% enddocs %}\n\n{% docs location %}\nLocation where the action takes place (e.g. US-NY)\n{% enddocs %}\n\n{% docs postal_code %}\nPostal code where the action takes place\n{% enddocs %}\n\n{% docs is_reportback %}\nWhether the post is a reportback. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs civic_action %}\nWhether the post is a Civic Action. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs scholarship_entry %}\nWhether the post is a Scholarship Entry. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs why_participated %}\nWhy the user participated in this action. Entered by the user.\n{% enddocs %}\n\n{% docs details %}\nDetails about the post. Contains contentfulId and other information (e.g. {\"campaignContentfulId\":\"6ATBgGEQEeJoIcxs1qbwaC\"})\n{% enddocs %}\n\n{% docs email %}\nEmail address of the user.\n{% enddocs %}\n\n{% docs source_details %}\nDetails about the source of the item. This is sometimes represented as a JSON object, and for other tables like Turbovote its represented as a string. (e.g. \"{\"contentful_id\":\"3CTLlXfbwtz1FOMpl31SKV\",\"utm_source\":\"scholarship_listing\",\"utm_medium\":\"referral\",\"utm_campaign\":\"fastweb_2019_08\"}\", newsletter_456)\n{% enddocs %}\n\n{% docs campaign_id %}\nThis is a unique identifier for the campaign\n{% enddocs %}\n\n{% docs campaign_run_id %}\nUnique identifier for the campaign run\n{% enddocs %}\n\n{% docs campaign_name %}\nName of the campaign\n{% enddocs %}\n\n{% docs campaign_cause %}\nCampaign cause (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_run_start_date %}\nStart date of the campaign run\n{% enddocs %}\n\n{% docs campaign_run_end_date %}\nEnd date of the campaign run\n{% enddocs %}\n\n{% docs campaign_created_date %}\nWhen the campaign was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs campaign_node_id %}\nInternal unique node id for the campaign\n{% enddocs %}\n\n{% docs campaign_node_id_title %}\nCampaign title\n{% enddocs %}\n\n{% docs campaign_run_id_title %}\nTitle of the campaign run\n{% enddocs %}\n\n{% docs campaign_action_type %}\nCampaign action type (eg. Make Something, Share Something)\n{% enddocs %}\n\n{% docs campaign_cause_type %}\nCampaign cause type (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_noun %}\nNoun applicable to the user's action\n{% enddocs %}\n\n{% docs campaign_verb %}\nVerb describing the action the user should take\n{% enddocs %}\n\n{% docs campaign_cta %}\nCampaign's call to action\n{% enddocs %}\n\n{% docs campaign_language %}\n\"Language in which the campaign is available\"\n{% enddocs %}\n\n{% docs agent_id %}\nIf set, the content type of the picture the member is sending us. Exp. image/png.\n{% enddocs %}\n\n{% docs attachment_content_type %}\nIf set, the handle of the Front agent this outbound support message is from.\n{% enddocs %}\n\n{% docs topic %}\nHolds a reference to the **last** campaign topic the member's conversation was in. This is useful to allow members to talk to Gambit and get quick responses (through Rivescript), without Gambit completely forgetting what state the member's interaction with a campaign topic was in.\n{% enddocs %}\n\n{% docs action_serial_id %}\nSerial id for the user's action. Depends on the source of the action. May be the bertly click id, sms message id, etc.\n{% enddocs %}\n\n{% docs channel %}\nChannel for the user's action. Depends on the source of the action. (e.g. web, sms)\n{% enddocs %}\n\n{% docs first_action_month %}\nMonth during which the user took their first action. \n{% enddocs %}\n\n{% docs event_id %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs event_source %}\nApplication source for event (eg. Phoenix, Northstar)\n{% enddocs %}\n\n{% docs event_datetime %}\nWhen the event occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs event_name %}\nName of the event (eg. northstar_submitted_register, https://docs.google.com/spreadsheets/d/1lm-fGrIm85nUTxSojqyCt_Ehmm1zEbViFhKpxcJiz1A/edit#gid=406441516)\n{% enddocs %}\n\n{% docs event_type %}\nType of event (pv = 'Page View', se = 'Structured Event')\n{% enddocs %}\n\n{% docs host %}\nURL host where event occurred (eg. www.dosomething.org or identity.dosomething.org)\n{% enddocs %}\n\n{% docs path %}\nURL path event occurred at (eg. /login or /us/campaigns/huddle-for-heroes)\n{% enddocs %}\n\n{% docs query_parameters %}\nOptional query parameters for the request (eg. query=huddle)\n{% enddocs %}\n\n{% docs se_category %}\nCategory of event (eg. focused_field, authentication) - Custom structured event\n{% enddocs %}\n\n{% docs se_action %}\nAction performed / event name (eg. form_submitted, action_failed) - Custom structured event\n{% enddocs %}\n\n{% docs se_label %}\nThe object of the action (eg. first_name, register, voter_reg_status) - Custom structured event\n{% enddocs %}\n\n{% docs session_id %}\nUnique identifier of the user's session\n{% enddocs %}\n\n{% docs session_counter %}\nHow many sessions a user has started\n{% enddocs %}\n\n{% docs browser_size %}\nWhich type of browser a user is using (eg. Mobile, Desktop)\n{% enddocs %}\n\n{% docs northstar_id %}\nThe Northstar ID of the user who generated the event\n{% enddocs %}\n\n{% docs device_id %}\nID of the device used\n{% enddocs %}\n\n{% docs referrer_host %}\nURL host of the referring site (eg. google.com)\n{% enddocs %}\n\n{% docs referrer_path %}\nURL path from referring site (eg. /10-stats-on-teen-drug-and-alcohol-use/)\n{% enddocs %}\n\n{% docs referrer_source %}\nReferrer source name (eg. Google, Facebook)\n{% enddocs %}\n\n{% docs utm_source %}\nTracks where the traffic is coming from. (eg. scholarship_listing, Facebook)\n{% enddocs %}\n\n{% docs utm_medium %}\nHow the traffic got to the platform (eg. referral, CPC)\n{% enddocs %}\n\n{% docs utm_campaign %}\nTracks which campaign the traffic was generated by. Shows up in Google Analytics as Campaign Name (eg. editorial_newsletter)\n{% enddocs %}\n\n{% docs url %}\nURL of campaign (eg. https://dosome.click/nyn5m7)\n{% enddocs %}\n\n{% docs modal_type %}\nNULL or SURVEY_MODAL\n{% enddocs %}\n\n{% docs landing_datetime %}\nWhen the session started in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs ending_datetime %}\nWhen the session ended in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs session_duration_seconds %}\nSession duration in seconds\n{% enddocs %}\n\n{% docs num_pages_views %}\nNumber of pages viewed in session\n{% enddocs %}\n\n{% docs landing_page %}\nFirst page the user viewed in the session (eg. /us/facts/11-facts-about-bp-oil-spill)\n{% enddocs %}\n\n{% docs exit_page %}\n\"Which page the user ended or exited their session from (eg. /us/campaigns/green-your-getaway)\"\n{% enddocs %}\n\n{% docs days_since_last_session %}\n\"Days since their last session.\"\n{% enddocs %}\n\n{% docs post_type %}\nType of post, (e.g. photo, voter-reg)\n{% enddocs %}\n\n{% docs noun %}\nNoun that corresponds to the item in the call to action that was delivered. (e.g. drawings, tweets)\n{% enddocs %}\n\n{% docs verb %}\nVerb corresponding to the action the user took. (e.g. shared, sent, taken)\n{% enddocs %}\n\n{% docs deleted_at %}\nDate time in UTC when a user deleted their post.\n{% enddocs %}\n\n{% docs _fivetran_deleted %}\nMarks rows that were deleted in the source table\n{% enddocs %}\n\n{% docs _fivetran_synced %}\n(UTC timestamp) keeps track of when each row was last successfully synced\n{% enddocs %}\n\n{% docs reportback %}\nWhether the post is a reportback \n{% enddocs %}\n\n{% docs active %}\nWhether the user is active \n{% enddocs %}\n\n{% docs anonymous %}\nWhether the user is anonymous when making the post \n{% enddocs %}\n\n{% docs callpower_campaign_id %}\nUnique ID corresponding to the Callpower campaign. Callpower allows users to record messages for their representatives.\n{% enddocs %}\n\n{% docs quiz %}\nWhether the post is a quiz \n{% enddocs %}\n\n{% docs action_type %}\nType of action the user took. (e.g. share-something, donate-something)\n{% enddocs %}\n\n{% docs online %}\nWhether the action is a online as opposed to IRL.\n{% enddocs %}\n\n{% docs time_commitment %}\nEstimated time required to do the action (e.g. 3.0+, <0.5)\n{% enddocs %}\n\n{% docs num_signups %}\nQuantity of campaign signups\n{% enddocs %}\n\n{% docs most_recent_signup %}\nTimestamp of the most recent signup in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs num_rbs %}\nQuantity of reportbacks for the user\n{% enddocs %}\n\n{% docs total_quantity %}\nTotal quantity of items in reportbacks\n{% enddocs %}\n\n{% docs most_recent_rb %}\nWhen the most recent reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs first_rb %}\nWhen the first reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs avg_time_betw_rbs %}\nCalculated average time between reportbacks.\n{% enddocs %}\n\n{% docs avg_days_next_action_after_rb %}\nCalculated average days until next action after reportback\n{% enddocs %}\n\n{% docs days_to_next_action_after_last_rb %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs most_recent_mam_action %}\nMost recent monthly active member qualifying action in UTC (eg. 2018-01-01 12:00:00).\n{% enddocs %}\n\n{% docs most_recent_email_open %}\nMost recent email open in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs most_recent_all_actions %}\nMost recent timestamp of any action in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs last_action_is_rb %}\nWhether the last action the user took was a reportback\n{% enddocs %}\n\n{% docs days_since_last_action %}\nDays since the user's last action\n{% enddocs %}\n\n{% docs time_to_first_rb %}\nHow much time after registering until the user's first reportback\n{% enddocs %}\n\n{% docs sms_unsubscribed_at %}\nTimestamp of when user unsubscribed from SMS messaging\n{% enddocs %}\n\n{% docs user_unsubscribed_at %}\nTimestamp of when user unsubscribed from email or sms\n{% enddocs %}\n\n{% docs voter_reg_acquisition %}\nWhether the user was an acquisition through voter registration efforts. \n{% enddocs %}\n\n{% docs last_logged_in %}\nDate time in UTC when user last logged in to Northstar\n{% enddocs %}\n\n{% docs last_accessed %}\nDate time in UTC when user last access the website\n{% enddocs %}\n\n{% docs last_messaged_at %}\nDate time in UTC when user was last sent a message via SMS or email\n{% enddocs %}\n\n{% docs facebook_id %}\nUser's facebook id\n{% enddocs %}\n\n{% docs mobile %}\nUsers's mobile phone number\n{% enddocs %}\n\n{% docs birthdate %}\nUser's birthdate\n{% enddocs %}\n\n{% docs first_name %}\nUser's first name\n{% enddocs %}\n\n{% docs last_name %}\nUser's last name\n{% enddocs %}\n\n{% docs voter_registration_status %}\nUser's registration status. (e.g. registration_complete, confirmed, uncertain) \n{% enddocs %}\n\n{% docs finish_with_state %}\nIf the registrant was eligible to use and passed through to complete their registration with their state\u2019s OVR system, it will be indicated in this field (direct quote from Rock-The-Vote documentation). Yes/No value in field.\n{% enddocs %}\n\n{% docs reportback_volume %}\nThis field returns 1 if non voter-reg action, since campaigns team only counts those a 1 reportback. If voter-reg action, we want to count quantity of post as number of registered voters.\n{% enddocs %}\n\n{% docs address_street_1 %}\nFirst line of user's street address\n{% enddocs %}\n\n{% docs address_street_2 %}\nSecond line of user's street address\n{% enddocs %}\n\n{% docs city %}\nUser's city\n{% enddocs %}\n\n{% docs state %}\nUser's state\n{% enddocs %}\n\n{% docs country %}\nUser's country\n{% enddocs %}\n\n{% docs language %}\nUser's language\n{% enddocs %}\n\n{% docs cio_status %}\nStatus of user from CIO. (e.g. customer_subscribed, customer_unsubscribed)\n{% enddocs %}\n\n{% docs cio_status_timestamp %}\nTimestamp when users's status was updated.\n{% enddocs %}\n\n{% docs sms_status %}\nCurrent SMS status. (e.g. undeliverable, unknown)\n{% enddocs %}\n\n{% docs source_detail %}\nDetails of the origin of the user. (e.g. tell_a_friend, other, opt_in_path/197981)\n{% enddocs %}\n\n{% docs badges %}\nWhether the user has any badges. \n{% enddocs %}\n\n{% docs refer_friends %}\nWhether the user is a part of the refer a friend campaign. \n{% enddocs %}\n\n{% docs subscribed_member %}\nWhether the user is subscribed. \n{% enddocs %}\n\n{% docs last_updated_at %}\nTimestamp when users's was updated.\n{% enddocs %}\n\n{% docs school_id %}\nUnique identifier for the user's school. This info comes from the school finder.\n{% enddocs %}\n\n{% docs newsletter_topic %}\nNewsletter topic. (e.g. community, lifestyle)\n{% enddocs %}\n\n{% docs user_agent %}\nFull user agent string for a user's browser (e.g. \"Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:24.0) Gecko/20100101 Firefox/24.0\")\n{% enddocs %}\n\n{% docs drupal_id %}\nOld Drupal user ID\n{% enddocs %}\n\n{% docs campaigns %}\nCampaigns a user is signed up for.\n{% enddocs %}\n\n{% docs audit %}\nA very useful field with data containing information about changes to a user, e.g. timestamps when the user subscribed and unsubscribed.\n{% enddocs %}\n\n{% docs voting_plan_status %}\nThe indication of the user's plan to vote, e.g. voting, not_voting, cant_vote\n{% enddocs %}\n\n{% docs voting_plan_time_of_day %}\nThe time of day when the user plans to vote, e.g morning, afternoon, evening\n{% enddocs %}\n\n{% docs voting_plan_method_of_transport %}\nHow the user plans to get to their polling place. e.g. walk, drive\n{% enddocs %}\n\n{% docs voting_plan_attending_with %}\nWith Whom the user plans to go voting, e.g. family, friends, alone\n{% enddocs %}\n\n{% docs feature_flags %}\nJSON containing info on features like badges and refer-a-friend.\n{% enddocs %}\n\n{% docs dbt_updated_at %}\nDBT snapshot table data. The updated_at timestamp of the source record when this snapshot row was inserted.\n{% enddocs %}\n\n{% docs dbt_scd_id %}\nDBT snapshot table data. A unique key generated for each snapshotted record.\n{% enddocs %}\n\n{% docs dbt_valid_from %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this snapshot row was first inserted\n{% enddocs %}\n\n{% docs dbt_valid_to %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this row row became invalidated.\n{% enddocs %}\n\n{% docs google_id %}\nUser's Google ID obtained from login.\n{% enddocs %}\n\n{% docs causes %}\nCauses in which a user is interested. e.g. animal welfare, education, mental_health\n{% enddocs %}\n\n{% docs email_subscription_status %}\nEmail subscription status of the user\n{% enddocs %}\n\n{% docs role %}\nUser's role, e.g. user, staff\n{% enddocs %}\n\n{% docs cio_backfilled %}\nWhether this user's data was backfilled from CIO\n{% enddocs %}\n\n{% docs addr_source %}\nWhere the user submitted their address, e.g. sms, GDPR\n{% enddocs %}\n\n{% docs email_subscription_topics %}\nEmail subscription topics correspond to categories in CIO in which the user is interested. e.g. lifestyle, community, scholarship\n{% enddocs %}\n\n{% docs sms_paused %}\nWhether we've paused sending sms messages to the user.\n{% enddocs %}\n\n\n\n\n", "name": "finish_with_state", "unique_id": "ds_dbt.finish_with_state", "block_contents": "If the registrant was eligible to use and passed through to complete their registration with their state\u2019s OVR system, it will be indicated in this field (direct quote from Rock-The-Vote documentation). Yes/No value in field."}, "ds_dbt.reportback_volume": {"root_path": "/Users/mrich/projects/quasar/quasar/dbt", "resource_type": "docs", "path": "schema.md", "original_file_path": "models/schema.md", "package_name": "ds_dbt", "file_contents": "\n{% docs click_id %}\nThis is a unique identifier for each click\n{% enddocs %}\n\n{% docs click_time %}\nTimestamp when user clicked.\n{% enddocs %}\n\n{% docs shortened %}\nShortened URL\n{% enddocs %}\n\n{% docs target_url %}\nURL where the user will be directed\n{% enddocs %}\n\n{% docs broadcast_id %}\nID of the broadcast that generated the shortened URL\n{% enddocs %}\n\n{% docs source %}\nSource of the URL (e.g. SMS, web), origin of the post (e.g. phoenix-web, phoenix-ashes, sms), or source where user was acquired. (e.g. sms, phoenix-next)\n{% enddocs %}\n\n{% docs interaction_type %}\nHow the user interacted with the link (e.g. preview, click)\n{% enddocs %}\n\n{% docs id %}\nUnique identifier for the post\n{% enddocs %}\n\n{% docs type %}\nType of post (e.g. photo)\n{% enddocs %}\n\n{% docs action %}\nPost action (e.g. DefendDreamers_Nov9_CongressCalls, GunViolence2018_Feb15_ParklandResponse)\n{% enddocs %}\n\n{% docs status %}\nPost status (e.g. accepted, rejected)\n{% enddocs %}\n\n{% docs quantity %}\nNumerical quantity of items specified in the call to action (e.g. 10, 200)\n{% enddocs %}\n\n{% docs source_bucket %}\nGrouping bucket for origin of the post (e.g. web, sms) \n{% enddocs %}\n\n{% docs created_at %}\nWhen the item was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs updated_at %}\nWhen the item was updated in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs text %}\nText of the post (e.g. \"Zoo animals and a super hero trying to help too!\") \n{% enddocs %}\n\n{% docs signup_id %}\nUnique identifier for the signup \n{% enddocs %}\n\n{% docs post_class %}\nClass of the signup (e.g. \"photo - default\", \"phone-call - DefendDreamers_Jan16_BothBodies\")\n{% enddocs %}\n\n{% docs is_accepted %}\nWhether the post has been accepted to be displayed to the public on the website\n{% enddocs %}\n\n{% docs action_id %}\nInternal identifier of the action \n{% enddocs %}\n\n{% docs location %}\nLocation where the action takes place (e.g. US-NY)\n{% enddocs %}\n\n{% docs postal_code %}\nPostal code where the action takes place\n{% enddocs %}\n\n{% docs is_reportback %}\nWhether the post is a reportback. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs civic_action %}\nWhether the post is a Civic Action. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs scholarship_entry %}\nWhether the post is a Scholarship Entry. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs why_participated %}\nWhy the user participated in this action. Entered by the user.\n{% enddocs %}\n\n{% docs details %}\nDetails about the post. Contains contentfulId and other information (e.g. {\"campaignContentfulId\":\"6ATBgGEQEeJoIcxs1qbwaC\"})\n{% enddocs %}\n\n{% docs email %}\nEmail address of the user.\n{% enddocs %}\n\n{% docs source_details %}\nDetails about the source of the item. This is sometimes represented as a JSON object, and for other tables like Turbovote its represented as a string. (e.g. \"{\"contentful_id\":\"3CTLlXfbwtz1FOMpl31SKV\",\"utm_source\":\"scholarship_listing\",\"utm_medium\":\"referral\",\"utm_campaign\":\"fastweb_2019_08\"}\", newsletter_456)\n{% enddocs %}\n\n{% docs campaign_id %}\nThis is a unique identifier for the campaign\n{% enddocs %}\n\n{% docs campaign_run_id %}\nUnique identifier for the campaign run\n{% enddocs %}\n\n{% docs campaign_name %}\nName of the campaign\n{% enddocs %}\n\n{% docs campaign_cause %}\nCampaign cause (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_run_start_date %}\nStart date of the campaign run\n{% enddocs %}\n\n{% docs campaign_run_end_date %}\nEnd date of the campaign run\n{% enddocs %}\n\n{% docs campaign_created_date %}\nWhen the campaign was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs campaign_node_id %}\nInternal unique node id for the campaign\n{% enddocs %}\n\n{% docs campaign_node_id_title %}\nCampaign title\n{% enddocs %}\n\n{% docs campaign_run_id_title %}\nTitle of the campaign run\n{% enddocs %}\n\n{% docs campaign_action_type %}\nCampaign action type (eg. Make Something, Share Something)\n{% enddocs %}\n\n{% docs campaign_cause_type %}\nCampaign cause type (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_noun %}\nNoun applicable to the user's action\n{% enddocs %}\n\n{% docs campaign_verb %}\nVerb describing the action the user should take\n{% enddocs %}\n\n{% docs campaign_cta %}\nCampaign's call to action\n{% enddocs %}\n\n{% docs campaign_language %}\n\"Language in which the campaign is available\"\n{% enddocs %}\n\n{% docs agent_id %}\nIf set, the content type of the picture the member is sending us. Exp. image/png.\n{% enddocs %}\n\n{% docs attachment_content_type %}\nIf set, the handle of the Front agent this outbound support message is from.\n{% enddocs %}\n\n{% docs topic %}\nHolds a reference to the **last** campaign topic the member's conversation was in. This is useful to allow members to talk to Gambit and get quick responses (through Rivescript), without Gambit completely forgetting what state the member's interaction with a campaign topic was in.\n{% enddocs %}\n\n{% docs action_serial_id %}\nSerial id for the user's action. Depends on the source of the action. May be the bertly click id, sms message id, etc.\n{% enddocs %}\n\n{% docs channel %}\nChannel for the user's action. Depends on the source of the action. (e.g. web, sms)\n{% enddocs %}\n\n{% docs first_action_month %}\nMonth during which the user took their first action. \n{% enddocs %}\n\n{% docs event_id %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs event_source %}\nApplication source for event (eg. Phoenix, Northstar)\n{% enddocs %}\n\n{% docs event_datetime %}\nWhen the event occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs event_name %}\nName of the event (eg. northstar_submitted_register, https://docs.google.com/spreadsheets/d/1lm-fGrIm85nUTxSojqyCt_Ehmm1zEbViFhKpxcJiz1A/edit#gid=406441516)\n{% enddocs %}\n\n{% docs event_type %}\nType of event (pv = 'Page View', se = 'Structured Event')\n{% enddocs %}\n\n{% docs host %}\nURL host where event occurred (eg. www.dosomething.org or identity.dosomething.org)\n{% enddocs %}\n\n{% docs path %}\nURL path event occurred at (eg. /login or /us/campaigns/huddle-for-heroes)\n{% enddocs %}\n\n{% docs query_parameters %}\nOptional query parameters for the request (eg. query=huddle)\n{% enddocs %}\n\n{% docs se_category %}\nCategory of event (eg. focused_field, authentication) - Custom structured event\n{% enddocs %}\n\n{% docs se_action %}\nAction performed / event name (eg. form_submitted, action_failed) - Custom structured event\n{% enddocs %}\n\n{% docs se_label %}\nThe object of the action (eg. first_name, register, voter_reg_status) - Custom structured event\n{% enddocs %}\n\n{% docs session_id %}\nUnique identifier of the user's session\n{% enddocs %}\n\n{% docs session_counter %}\nHow many sessions a user has started\n{% enddocs %}\n\n{% docs browser_size %}\nWhich type of browser a user is using (eg. Mobile, Desktop)\n{% enddocs %}\n\n{% docs northstar_id %}\nThe Northstar ID of the user who generated the event\n{% enddocs %}\n\n{% docs device_id %}\nID of the device used\n{% enddocs %}\n\n{% docs referrer_host %}\nURL host of the referring site (eg. google.com)\n{% enddocs %}\n\n{% docs referrer_path %}\nURL path from referring site (eg. /10-stats-on-teen-drug-and-alcohol-use/)\n{% enddocs %}\n\n{% docs referrer_source %}\nReferrer source name (eg. Google, Facebook)\n{% enddocs %}\n\n{% docs utm_source %}\nTracks where the traffic is coming from. (eg. scholarship_listing, Facebook)\n{% enddocs %}\n\n{% docs utm_medium %}\nHow the traffic got to the platform (eg. referral, CPC)\n{% enddocs %}\n\n{% docs utm_campaign %}\nTracks which campaign the traffic was generated by. Shows up in Google Analytics as Campaign Name (eg. editorial_newsletter)\n{% enddocs %}\n\n{% docs url %}\nURL of campaign (eg. https://dosome.click/nyn5m7)\n{% enddocs %}\n\n{% docs modal_type %}\nNULL or SURVEY_MODAL\n{% enddocs %}\n\n{% docs landing_datetime %}\nWhen the session started in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs ending_datetime %}\nWhen the session ended in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs session_duration_seconds %}\nSession duration in seconds\n{% enddocs %}\n\n{% docs num_pages_views %}\nNumber of pages viewed in session\n{% enddocs %}\n\n{% docs landing_page %}\nFirst page the user viewed in the session (eg. /us/facts/11-facts-about-bp-oil-spill)\n{% enddocs %}\n\n{% docs exit_page %}\n\"Which page the user ended or exited their session from (eg. /us/campaigns/green-your-getaway)\"\n{% enddocs %}\n\n{% docs days_since_last_session %}\n\"Days since their last session.\"\n{% enddocs %}\n\n{% docs post_type %}\nType of post, (e.g. photo, voter-reg)\n{% enddocs %}\n\n{% docs noun %}\nNoun that corresponds to the item in the call to action that was delivered. (e.g. drawings, tweets)\n{% enddocs %}\n\n{% docs verb %}\nVerb corresponding to the action the user took. (e.g. shared, sent, taken)\n{% enddocs %}\n\n{% docs deleted_at %}\nDate time in UTC when a user deleted their post.\n{% enddocs %}\n\n{% docs _fivetran_deleted %}\nMarks rows that were deleted in the source table\n{% enddocs %}\n\n{% docs _fivetran_synced %}\n(UTC timestamp) keeps track of when each row was last successfully synced\n{% enddocs %}\n\n{% docs reportback %}\nWhether the post is a reportback \n{% enddocs %}\n\n{% docs active %}\nWhether the user is active \n{% enddocs %}\n\n{% docs anonymous %}\nWhether the user is anonymous when making the post \n{% enddocs %}\n\n{% docs callpower_campaign_id %}\nUnique ID corresponding to the Callpower campaign. Callpower allows users to record messages for their representatives.\n{% enddocs %}\n\n{% docs quiz %}\nWhether the post is a quiz \n{% enddocs %}\n\n{% docs action_type %}\nType of action the user took. (e.g. share-something, donate-something)\n{% enddocs %}\n\n{% docs online %}\nWhether the action is a online as opposed to IRL.\n{% enddocs %}\n\n{% docs time_commitment %}\nEstimated time required to do the action (e.g. 3.0+, <0.5)\n{% enddocs %}\n\n{% docs num_signups %}\nQuantity of campaign signups\n{% enddocs %}\n\n{% docs most_recent_signup %}\nTimestamp of the most recent signup in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs num_rbs %}\nQuantity of reportbacks for the user\n{% enddocs %}\n\n{% docs total_quantity %}\nTotal quantity of items in reportbacks\n{% enddocs %}\n\n{% docs most_recent_rb %}\nWhen the most recent reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs first_rb %}\nWhen the first reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs avg_time_betw_rbs %}\nCalculated average time between reportbacks.\n{% enddocs %}\n\n{% docs avg_days_next_action_after_rb %}\nCalculated average days until next action after reportback\n{% enddocs %}\n\n{% docs days_to_next_action_after_last_rb %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs most_recent_mam_action %}\nMost recent monthly active member qualifying action in UTC (eg. 2018-01-01 12:00:00).\n{% enddocs %}\n\n{% docs most_recent_email_open %}\nMost recent email open in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs most_recent_all_actions %}\nMost recent timestamp of any action in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs last_action_is_rb %}\nWhether the last action the user took was a reportback\n{% enddocs %}\n\n{% docs days_since_last_action %}\nDays since the user's last action\n{% enddocs %}\n\n{% docs time_to_first_rb %}\nHow much time after registering until the user's first reportback\n{% enddocs %}\n\n{% docs sms_unsubscribed_at %}\nTimestamp of when user unsubscribed from SMS messaging\n{% enddocs %}\n\n{% docs user_unsubscribed_at %}\nTimestamp of when user unsubscribed from email or sms\n{% enddocs %}\n\n{% docs voter_reg_acquisition %}\nWhether the user was an acquisition through voter registration efforts. \n{% enddocs %}\n\n{% docs last_logged_in %}\nDate time in UTC when user last logged in to Northstar\n{% enddocs %}\n\n{% docs last_accessed %}\nDate time in UTC when user last access the website\n{% enddocs %}\n\n{% docs last_messaged_at %}\nDate time in UTC when user was last sent a message via SMS or email\n{% enddocs %}\n\n{% docs facebook_id %}\nUser's facebook id\n{% enddocs %}\n\n{% docs mobile %}\nUsers's mobile phone number\n{% enddocs %}\n\n{% docs birthdate %}\nUser's birthdate\n{% enddocs %}\n\n{% docs first_name %}\nUser's first name\n{% enddocs %}\n\n{% docs last_name %}\nUser's last name\n{% enddocs %}\n\n{% docs voter_registration_status %}\nUser's registration status. (e.g. registration_complete, confirmed, uncertain) \n{% enddocs %}\n\n{% docs finish_with_state %}\nIf the registrant was eligible to use and passed through to complete their registration with their state\u2019s OVR system, it will be indicated in this field (direct quote from Rock-The-Vote documentation). Yes/No value in field.\n{% enddocs %}\n\n{% docs reportback_volume %}\nThis field returns 1 if non voter-reg action, since campaigns team only counts those a 1 reportback. If voter-reg action, we want to count quantity of post as number of registered voters.\n{% enddocs %}\n\n{% docs address_street_1 %}\nFirst line of user's street address\n{% enddocs %}\n\n{% docs address_street_2 %}\nSecond line of user's street address\n{% enddocs %}\n\n{% docs city %}\nUser's city\n{% enddocs %}\n\n{% docs state %}\nUser's state\n{% enddocs %}\n\n{% docs country %}\nUser's country\n{% enddocs %}\n\n{% docs language %}\nUser's language\n{% enddocs %}\n\n{% docs cio_status %}\nStatus of user from CIO. (e.g. customer_subscribed, customer_unsubscribed)\n{% enddocs %}\n\n{% docs cio_status_timestamp %}\nTimestamp when users's status was updated.\n{% enddocs %}\n\n{% docs sms_status %}\nCurrent SMS status. (e.g. undeliverable, unknown)\n{% enddocs %}\n\n{% docs source_detail %}\nDetails of the origin of the user. (e.g. tell_a_friend, other, opt_in_path/197981)\n{% enddocs %}\n\n{% docs badges %}\nWhether the user has any badges. \n{% enddocs %}\n\n{% docs refer_friends %}\nWhether the user is a part of the refer a friend campaign. \n{% enddocs %}\n\n{% docs subscribed_member %}\nWhether the user is subscribed. \n{% enddocs %}\n\n{% docs last_updated_at %}\nTimestamp when users's was updated.\n{% enddocs %}\n\n{% docs school_id %}\nUnique identifier for the user's school. This info comes from the school finder.\n{% enddocs %}\n\n{% docs newsletter_topic %}\nNewsletter topic. (e.g. community, lifestyle)\n{% enddocs %}\n\n{% docs user_agent %}\nFull user agent string for a user's browser (e.g. \"Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:24.0) Gecko/20100101 Firefox/24.0\")\n{% enddocs %}\n\n{% docs drupal_id %}\nOld Drupal user ID\n{% enddocs %}\n\n{% docs campaigns %}\nCampaigns a user is signed up for.\n{% enddocs %}\n\n{% docs audit %}\nA very useful field with data containing information about changes to a user, e.g. timestamps when the user subscribed and unsubscribed.\n{% enddocs %}\n\n{% docs voting_plan_status %}\nThe indication of the user's plan to vote, e.g. voting, not_voting, cant_vote\n{% enddocs %}\n\n{% docs voting_plan_time_of_day %}\nThe time of day when the user plans to vote, e.g morning, afternoon, evening\n{% enddocs %}\n\n{% docs voting_plan_method_of_transport %}\nHow the user plans to get to their polling place. e.g. walk, drive\n{% enddocs %}\n\n{% docs voting_plan_attending_with %}\nWith Whom the user plans to go voting, e.g. family, friends, alone\n{% enddocs %}\n\n{% docs feature_flags %}\nJSON containing info on features like badges and refer-a-friend.\n{% enddocs %}\n\n{% docs dbt_updated_at %}\nDBT snapshot table data. The updated_at timestamp of the source record when this snapshot row was inserted.\n{% enddocs %}\n\n{% docs dbt_scd_id %}\nDBT snapshot table data. A unique key generated for each snapshotted record.\n{% enddocs %}\n\n{% docs dbt_valid_from %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this snapshot row was first inserted\n{% enddocs %}\n\n{% docs dbt_valid_to %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this row row became invalidated.\n{% enddocs %}\n\n{% docs google_id %}\nUser's Google ID obtained from login.\n{% enddocs %}\n\n{% docs causes %}\nCauses in which a user is interested. e.g. animal welfare, education, mental_health\n{% enddocs %}\n\n{% docs email_subscription_status %}\nEmail subscription status of the user\n{% enddocs %}\n\n{% docs role %}\nUser's role, e.g. user, staff\n{% enddocs %}\n\n{% docs cio_backfilled %}\nWhether this user's data was backfilled from CIO\n{% enddocs %}\n\n{% docs addr_source %}\nWhere the user submitted their address, e.g. sms, GDPR\n{% enddocs %}\n\n{% docs email_subscription_topics %}\nEmail subscription topics correspond to categories in CIO in which the user is interested. e.g. lifestyle, community, scholarship\n{% enddocs %}\n\n{% docs sms_paused %}\nWhether we've paused sending sms messages to the user.\n{% enddocs %}\n\n\n\n\n", "name": "reportback_volume", "unique_id": "ds_dbt.reportback_volume", "block_contents": "This field returns 1 if non voter-reg action, since campaigns team only counts those a 1 reportback. If voter-reg action, we want to count quantity of post as number of registered voters."}, "ds_dbt.address_street_1": {"root_path": "/Users/mrich/projects/quasar/quasar/dbt", "resource_type": "docs", "path": "schema.md", "original_file_path": "models/schema.md", "package_name": "ds_dbt", "file_contents": "\n{% docs click_id %}\nThis is a unique identifier for each click\n{% enddocs %}\n\n{% docs click_time %}\nTimestamp when user clicked.\n{% enddocs %}\n\n{% docs shortened %}\nShortened URL\n{% enddocs %}\n\n{% docs target_url %}\nURL where the user will be directed\n{% enddocs %}\n\n{% docs broadcast_id %}\nID of the broadcast that generated the shortened URL\n{% enddocs %}\n\n{% docs source %}\nSource of the URL (e.g. SMS, web), origin of the post (e.g. phoenix-web, phoenix-ashes, sms), or source where user was acquired. (e.g. sms, phoenix-next)\n{% enddocs %}\n\n{% docs interaction_type %}\nHow the user interacted with the link (e.g. preview, click)\n{% enddocs %}\n\n{% docs id %}\nUnique identifier for the post\n{% enddocs %}\n\n{% docs type %}\nType of post (e.g. photo)\n{% enddocs %}\n\n{% docs action %}\nPost action (e.g. DefendDreamers_Nov9_CongressCalls, GunViolence2018_Feb15_ParklandResponse)\n{% enddocs %}\n\n{% docs status %}\nPost status (e.g. accepted, rejected)\n{% enddocs %}\n\n{% docs quantity %}\nNumerical quantity of items specified in the call to action (e.g. 10, 200)\n{% enddocs %}\n\n{% docs source_bucket %}\nGrouping bucket for origin of the post (e.g. web, sms) \n{% enddocs %}\n\n{% docs created_at %}\nWhen the item was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs updated_at %}\nWhen the item was updated in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs text %}\nText of the post (e.g. \"Zoo animals and a super hero trying to help too!\") \n{% enddocs %}\n\n{% docs signup_id %}\nUnique identifier for the signup \n{% enddocs %}\n\n{% docs post_class %}\nClass of the signup (e.g. \"photo - default\", \"phone-call - DefendDreamers_Jan16_BothBodies\")\n{% enddocs %}\n\n{% docs is_accepted %}\nWhether the post has been accepted to be displayed to the public on the website\n{% enddocs %}\n\n{% docs action_id %}\nInternal identifier of the action \n{% enddocs %}\n\n{% docs location %}\nLocation where the action takes place (e.g. US-NY)\n{% enddocs %}\n\n{% docs postal_code %}\nPostal code where the action takes place\n{% enddocs %}\n\n{% docs is_reportback %}\nWhether the post is a reportback. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs civic_action %}\nWhether the post is a Civic Action. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs scholarship_entry %}\nWhether the post is a Scholarship Entry. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs why_participated %}\nWhy the user participated in this action. Entered by the user.\n{% enddocs %}\n\n{% docs details %}\nDetails about the post. Contains contentfulId and other information (e.g. {\"campaignContentfulId\":\"6ATBgGEQEeJoIcxs1qbwaC\"})\n{% enddocs %}\n\n{% docs email %}\nEmail address of the user.\n{% enddocs %}\n\n{% docs source_details %}\nDetails about the source of the item. This is sometimes represented as a JSON object, and for other tables like Turbovote its represented as a string. (e.g. \"{\"contentful_id\":\"3CTLlXfbwtz1FOMpl31SKV\",\"utm_source\":\"scholarship_listing\",\"utm_medium\":\"referral\",\"utm_campaign\":\"fastweb_2019_08\"}\", newsletter_456)\n{% enddocs %}\n\n{% docs campaign_id %}\nThis is a unique identifier for the campaign\n{% enddocs %}\n\n{% docs campaign_run_id %}\nUnique identifier for the campaign run\n{% enddocs %}\n\n{% docs campaign_name %}\nName of the campaign\n{% enddocs %}\n\n{% docs campaign_cause %}\nCampaign cause (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_run_start_date %}\nStart date of the campaign run\n{% enddocs %}\n\n{% docs campaign_run_end_date %}\nEnd date of the campaign run\n{% enddocs %}\n\n{% docs campaign_created_date %}\nWhen the campaign was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs campaign_node_id %}\nInternal unique node id for the campaign\n{% enddocs %}\n\n{% docs campaign_node_id_title %}\nCampaign title\n{% enddocs %}\n\n{% docs campaign_run_id_title %}\nTitle of the campaign run\n{% enddocs %}\n\n{% docs campaign_action_type %}\nCampaign action type (eg. Make Something, Share Something)\n{% enddocs %}\n\n{% docs campaign_cause_type %}\nCampaign cause type (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_noun %}\nNoun applicable to the user's action\n{% enddocs %}\n\n{% docs campaign_verb %}\nVerb describing the action the user should take\n{% enddocs %}\n\n{% docs campaign_cta %}\nCampaign's call to action\n{% enddocs %}\n\n{% docs campaign_language %}\n\"Language in which the campaign is available\"\n{% enddocs %}\n\n{% docs agent_id %}\nIf set, the content type of the picture the member is sending us. Exp. image/png.\n{% enddocs %}\n\n{% docs attachment_content_type %}\nIf set, the handle of the Front agent this outbound support message is from.\n{% enddocs %}\n\n{% docs topic %}\nHolds a reference to the **last** campaign topic the member's conversation was in. This is useful to allow members to talk to Gambit and get quick responses (through Rivescript), without Gambit completely forgetting what state the member's interaction with a campaign topic was in.\n{% enddocs %}\n\n{% docs action_serial_id %}\nSerial id for the user's action. Depends on the source of the action. May be the bertly click id, sms message id, etc.\n{% enddocs %}\n\n{% docs channel %}\nChannel for the user's action. Depends on the source of the action. (e.g. web, sms)\n{% enddocs %}\n\n{% docs first_action_month %}\nMonth during which the user took their first action. \n{% enddocs %}\n\n{% docs event_id %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs event_source %}\nApplication source for event (eg. Phoenix, Northstar)\n{% enddocs %}\n\n{% docs event_datetime %}\nWhen the event occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs event_name %}\nName of the event (eg. northstar_submitted_register, https://docs.google.com/spreadsheets/d/1lm-fGrIm85nUTxSojqyCt_Ehmm1zEbViFhKpxcJiz1A/edit#gid=406441516)\n{% enddocs %}\n\n{% docs event_type %}\nType of event (pv = 'Page View', se = 'Structured Event')\n{% enddocs %}\n\n{% docs host %}\nURL host where event occurred (eg. www.dosomething.org or identity.dosomething.org)\n{% enddocs %}\n\n{% docs path %}\nURL path event occurred at (eg. /login or /us/campaigns/huddle-for-heroes)\n{% enddocs %}\n\n{% docs query_parameters %}\nOptional query parameters for the request (eg. query=huddle)\n{% enddocs %}\n\n{% docs se_category %}\nCategory of event (eg. focused_field, authentication) - Custom structured event\n{% enddocs %}\n\n{% docs se_action %}\nAction performed / event name (eg. form_submitted, action_failed) - Custom structured event\n{% enddocs %}\n\n{% docs se_label %}\nThe object of the action (eg. first_name, register, voter_reg_status) - Custom structured event\n{% enddocs %}\n\n{% docs session_id %}\nUnique identifier of the user's session\n{% enddocs %}\n\n{% docs session_counter %}\nHow many sessions a user has started\n{% enddocs %}\n\n{% docs browser_size %}\nWhich type of browser a user is using (eg. Mobile, Desktop)\n{% enddocs %}\n\n{% docs northstar_id %}\nThe Northstar ID of the user who generated the event\n{% enddocs %}\n\n{% docs device_id %}\nID of the device used\n{% enddocs %}\n\n{% docs referrer_host %}\nURL host of the referring site (eg. google.com)\n{% enddocs %}\n\n{% docs referrer_path %}\nURL path from referring site (eg. /10-stats-on-teen-drug-and-alcohol-use/)\n{% enddocs %}\n\n{% docs referrer_source %}\nReferrer source name (eg. Google, Facebook)\n{% enddocs %}\n\n{% docs utm_source %}\nTracks where the traffic is coming from. (eg. scholarship_listing, Facebook)\n{% enddocs %}\n\n{% docs utm_medium %}\nHow the traffic got to the platform (eg. referral, CPC)\n{% enddocs %}\n\n{% docs utm_campaign %}\nTracks which campaign the traffic was generated by. Shows up in Google Analytics as Campaign Name (eg. editorial_newsletter)\n{% enddocs %}\n\n{% docs url %}\nURL of campaign (eg. https://dosome.click/nyn5m7)\n{% enddocs %}\n\n{% docs modal_type %}\nNULL or SURVEY_MODAL\n{% enddocs %}\n\n{% docs landing_datetime %}\nWhen the session started in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs ending_datetime %}\nWhen the session ended in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs session_duration_seconds %}\nSession duration in seconds\n{% enddocs %}\n\n{% docs num_pages_views %}\nNumber of pages viewed in session\n{% enddocs %}\n\n{% docs landing_page %}\nFirst page the user viewed in the session (eg. /us/facts/11-facts-about-bp-oil-spill)\n{% enddocs %}\n\n{% docs exit_page %}\n\"Which page the user ended or exited their session from (eg. /us/campaigns/green-your-getaway)\"\n{% enddocs %}\n\n{% docs days_since_last_session %}\n\"Days since their last session.\"\n{% enddocs %}\n\n{% docs post_type %}\nType of post, (e.g. photo, voter-reg)\n{% enddocs %}\n\n{% docs noun %}\nNoun that corresponds to the item in the call to action that was delivered. (e.g. drawings, tweets)\n{% enddocs %}\n\n{% docs verb %}\nVerb corresponding to the action the user took. (e.g. shared, sent, taken)\n{% enddocs %}\n\n{% docs deleted_at %}\nDate time in UTC when a user deleted their post.\n{% enddocs %}\n\n{% docs _fivetran_deleted %}\nMarks rows that were deleted in the source table\n{% enddocs %}\n\n{% docs _fivetran_synced %}\n(UTC timestamp) keeps track of when each row was last successfully synced\n{% enddocs %}\n\n{% docs reportback %}\nWhether the post is a reportback \n{% enddocs %}\n\n{% docs active %}\nWhether the user is active \n{% enddocs %}\n\n{% docs anonymous %}\nWhether the user is anonymous when making the post \n{% enddocs %}\n\n{% docs callpower_campaign_id %}\nUnique ID corresponding to the Callpower campaign. Callpower allows users to record messages for their representatives.\n{% enddocs %}\n\n{% docs quiz %}\nWhether the post is a quiz \n{% enddocs %}\n\n{% docs action_type %}\nType of action the user took. (e.g. share-something, donate-something)\n{% enddocs %}\n\n{% docs online %}\nWhether the action is a online as opposed to IRL.\n{% enddocs %}\n\n{% docs time_commitment %}\nEstimated time required to do the action (e.g. 3.0+, <0.5)\n{% enddocs %}\n\n{% docs num_signups %}\nQuantity of campaign signups\n{% enddocs %}\n\n{% docs most_recent_signup %}\nTimestamp of the most recent signup in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs num_rbs %}\nQuantity of reportbacks for the user\n{% enddocs %}\n\n{% docs total_quantity %}\nTotal quantity of items in reportbacks\n{% enddocs %}\n\n{% docs most_recent_rb %}\nWhen the most recent reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs first_rb %}\nWhen the first reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs avg_time_betw_rbs %}\nCalculated average time between reportbacks.\n{% enddocs %}\n\n{% docs avg_days_next_action_after_rb %}\nCalculated average days until next action after reportback\n{% enddocs %}\n\n{% docs days_to_next_action_after_last_rb %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs most_recent_mam_action %}\nMost recent monthly active member qualifying action in UTC (eg. 2018-01-01 12:00:00).\n{% enddocs %}\n\n{% docs most_recent_email_open %}\nMost recent email open in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs most_recent_all_actions %}\nMost recent timestamp of any action in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs last_action_is_rb %}\nWhether the last action the user took was a reportback\n{% enddocs %}\n\n{% docs days_since_last_action %}\nDays since the user's last action\n{% enddocs %}\n\n{% docs time_to_first_rb %}\nHow much time after registering until the user's first reportback\n{% enddocs %}\n\n{% docs sms_unsubscribed_at %}\nTimestamp of when user unsubscribed from SMS messaging\n{% enddocs %}\n\n{% docs user_unsubscribed_at %}\nTimestamp of when user unsubscribed from email or sms\n{% enddocs %}\n\n{% docs voter_reg_acquisition %}\nWhether the user was an acquisition through voter registration efforts. \n{% enddocs %}\n\n{% docs last_logged_in %}\nDate time in UTC when user last logged in to Northstar\n{% enddocs %}\n\n{% docs last_accessed %}\nDate time in UTC when user last access the website\n{% enddocs %}\n\n{% docs last_messaged_at %}\nDate time in UTC when user was last sent a message via SMS or email\n{% enddocs %}\n\n{% docs facebook_id %}\nUser's facebook id\n{% enddocs %}\n\n{% docs mobile %}\nUsers's mobile phone number\n{% enddocs %}\n\n{% docs birthdate %}\nUser's birthdate\n{% enddocs %}\n\n{% docs first_name %}\nUser's first name\n{% enddocs %}\n\n{% docs last_name %}\nUser's last name\n{% enddocs %}\n\n{% docs voter_registration_status %}\nUser's registration status. (e.g. registration_complete, confirmed, uncertain) \n{% enddocs %}\n\n{% docs finish_with_state %}\nIf the registrant was eligible to use and passed through to complete their registration with their state\u2019s OVR system, it will be indicated in this field (direct quote from Rock-The-Vote documentation). Yes/No value in field.\n{% enddocs %}\n\n{% docs reportback_volume %}\nThis field returns 1 if non voter-reg action, since campaigns team only counts those a 1 reportback. If voter-reg action, we want to count quantity of post as number of registered voters.\n{% enddocs %}\n\n{% docs address_street_1 %}\nFirst line of user's street address\n{% enddocs %}\n\n{% docs address_street_2 %}\nSecond line of user's street address\n{% enddocs %}\n\n{% docs city %}\nUser's city\n{% enddocs %}\n\n{% docs state %}\nUser's state\n{% enddocs %}\n\n{% docs country %}\nUser's country\n{% enddocs %}\n\n{% docs language %}\nUser's language\n{% enddocs %}\n\n{% docs cio_status %}\nStatus of user from CIO. (e.g. customer_subscribed, customer_unsubscribed)\n{% enddocs %}\n\n{% docs cio_status_timestamp %}\nTimestamp when users's status was updated.\n{% enddocs %}\n\n{% docs sms_status %}\nCurrent SMS status. (e.g. undeliverable, unknown)\n{% enddocs %}\n\n{% docs source_detail %}\nDetails of the origin of the user. (e.g. tell_a_friend, other, opt_in_path/197981)\n{% enddocs %}\n\n{% docs badges %}\nWhether the user has any badges. \n{% enddocs %}\n\n{% docs refer_friends %}\nWhether the user is a part of the refer a friend campaign. \n{% enddocs %}\n\n{% docs subscribed_member %}\nWhether the user is subscribed. \n{% enddocs %}\n\n{% docs last_updated_at %}\nTimestamp when users's was updated.\n{% enddocs %}\n\n{% docs school_id %}\nUnique identifier for the user's school. This info comes from the school finder.\n{% enddocs %}\n\n{% docs newsletter_topic %}\nNewsletter topic. (e.g. community, lifestyle)\n{% enddocs %}\n\n{% docs user_agent %}\nFull user agent string for a user's browser (e.g. \"Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:24.0) Gecko/20100101 Firefox/24.0\")\n{% enddocs %}\n\n{% docs drupal_id %}\nOld Drupal user ID\n{% enddocs %}\n\n{% docs campaigns %}\nCampaigns a user is signed up for.\n{% enddocs %}\n\n{% docs audit %}\nA very useful field with data containing information about changes to a user, e.g. timestamps when the user subscribed and unsubscribed.\n{% enddocs %}\n\n{% docs voting_plan_status %}\nThe indication of the user's plan to vote, e.g. voting, not_voting, cant_vote\n{% enddocs %}\n\n{% docs voting_plan_time_of_day %}\nThe time of day when the user plans to vote, e.g morning, afternoon, evening\n{% enddocs %}\n\n{% docs voting_plan_method_of_transport %}\nHow the user plans to get to their polling place. e.g. walk, drive\n{% enddocs %}\n\n{% docs voting_plan_attending_with %}\nWith Whom the user plans to go voting, e.g. family, friends, alone\n{% enddocs %}\n\n{% docs feature_flags %}\nJSON containing info on features like badges and refer-a-friend.\n{% enddocs %}\n\n{% docs dbt_updated_at %}\nDBT snapshot table data. The updated_at timestamp of the source record when this snapshot row was inserted.\n{% enddocs %}\n\n{% docs dbt_scd_id %}\nDBT snapshot table data. A unique key generated for each snapshotted record.\n{% enddocs %}\n\n{% docs dbt_valid_from %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this snapshot row was first inserted\n{% enddocs %}\n\n{% docs dbt_valid_to %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this row row became invalidated.\n{% enddocs %}\n\n{% docs google_id %}\nUser's Google ID obtained from login.\n{% enddocs %}\n\n{% docs causes %}\nCauses in which a user is interested. e.g. animal welfare, education, mental_health\n{% enddocs %}\n\n{% docs email_subscription_status %}\nEmail subscription status of the user\n{% enddocs %}\n\n{% docs role %}\nUser's role, e.g. user, staff\n{% enddocs %}\n\n{% docs cio_backfilled %}\nWhether this user's data was backfilled from CIO\n{% enddocs %}\n\n{% docs addr_source %}\nWhere the user submitted their address, e.g. sms, GDPR\n{% enddocs %}\n\n{% docs email_subscription_topics %}\nEmail subscription topics correspond to categories in CIO in which the user is interested. e.g. lifestyle, community, scholarship\n{% enddocs %}\n\n{% docs sms_paused %}\nWhether we've paused sending sms messages to the user.\n{% enddocs %}\n\n\n\n\n", "name": "address_street_1", "unique_id": "ds_dbt.address_street_1", "block_contents": "First line of user's street address"}, "ds_dbt.address_street_2": {"root_path": "/Users/mrich/projects/quasar/quasar/dbt", "resource_type": "docs", "path": "schema.md", "original_file_path": "models/schema.md", "package_name": "ds_dbt", "file_contents": "\n{% docs click_id %}\nThis is a unique identifier for each click\n{% enddocs %}\n\n{% docs click_time %}\nTimestamp when user clicked.\n{% enddocs %}\n\n{% docs shortened %}\nShortened URL\n{% enddocs %}\n\n{% docs target_url %}\nURL where the user will be directed\n{% enddocs %}\n\n{% docs broadcast_id %}\nID of the broadcast that generated the shortened URL\n{% enddocs %}\n\n{% docs source %}\nSource of the URL (e.g. SMS, web), origin of the post (e.g. phoenix-web, phoenix-ashes, sms), or source where user was acquired. (e.g. sms, phoenix-next)\n{% enddocs %}\n\n{% docs interaction_type %}\nHow the user interacted with the link (e.g. preview, click)\n{% enddocs %}\n\n{% docs id %}\nUnique identifier for the post\n{% enddocs %}\n\n{% docs type %}\nType of post (e.g. photo)\n{% enddocs %}\n\n{% docs action %}\nPost action (e.g. DefendDreamers_Nov9_CongressCalls, GunViolence2018_Feb15_ParklandResponse)\n{% enddocs %}\n\n{% docs status %}\nPost status (e.g. accepted, rejected)\n{% enddocs %}\n\n{% docs quantity %}\nNumerical quantity of items specified in the call to action (e.g. 10, 200)\n{% enddocs %}\n\n{% docs source_bucket %}\nGrouping bucket for origin of the post (e.g. web, sms) \n{% enddocs %}\n\n{% docs created_at %}\nWhen the item was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs updated_at %}\nWhen the item was updated in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs text %}\nText of the post (e.g. \"Zoo animals and a super hero trying to help too!\") \n{% enddocs %}\n\n{% docs signup_id %}\nUnique identifier for the signup \n{% enddocs %}\n\n{% docs post_class %}\nClass of the signup (e.g. \"photo - default\", \"phone-call - DefendDreamers_Jan16_BothBodies\")\n{% enddocs %}\n\n{% docs is_accepted %}\nWhether the post has been accepted to be displayed to the public on the website\n{% enddocs %}\n\n{% docs action_id %}\nInternal identifier of the action \n{% enddocs %}\n\n{% docs location %}\nLocation where the action takes place (e.g. US-NY)\n{% enddocs %}\n\n{% docs postal_code %}\nPostal code where the action takes place\n{% enddocs %}\n\n{% docs is_reportback %}\nWhether the post is a reportback. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs civic_action %}\nWhether the post is a Civic Action. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs scholarship_entry %}\nWhether the post is a Scholarship Entry. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs why_participated %}\nWhy the user participated in this action. Entered by the user.\n{% enddocs %}\n\n{% docs details %}\nDetails about the post. Contains contentfulId and other information (e.g. {\"campaignContentfulId\":\"6ATBgGEQEeJoIcxs1qbwaC\"})\n{% enddocs %}\n\n{% docs email %}\nEmail address of the user.\n{% enddocs %}\n\n{% docs source_details %}\nDetails about the source of the item. This is sometimes represented as a JSON object, and for other tables like Turbovote its represented as a string. (e.g. \"{\"contentful_id\":\"3CTLlXfbwtz1FOMpl31SKV\",\"utm_source\":\"scholarship_listing\",\"utm_medium\":\"referral\",\"utm_campaign\":\"fastweb_2019_08\"}\", newsletter_456)\n{% enddocs %}\n\n{% docs campaign_id %}\nThis is a unique identifier for the campaign\n{% enddocs %}\n\n{% docs campaign_run_id %}\nUnique identifier for the campaign run\n{% enddocs %}\n\n{% docs campaign_name %}\nName of the campaign\n{% enddocs %}\n\n{% docs campaign_cause %}\nCampaign cause (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_run_start_date %}\nStart date of the campaign run\n{% enddocs %}\n\n{% docs campaign_run_end_date %}\nEnd date of the campaign run\n{% enddocs %}\n\n{% docs campaign_created_date %}\nWhen the campaign was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs campaign_node_id %}\nInternal unique node id for the campaign\n{% enddocs %}\n\n{% docs campaign_node_id_title %}\nCampaign title\n{% enddocs %}\n\n{% docs campaign_run_id_title %}\nTitle of the campaign run\n{% enddocs %}\n\n{% docs campaign_action_type %}\nCampaign action type (eg. Make Something, Share Something)\n{% enddocs %}\n\n{% docs campaign_cause_type %}\nCampaign cause type (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_noun %}\nNoun applicable to the user's action\n{% enddocs %}\n\n{% docs campaign_verb %}\nVerb describing the action the user should take\n{% enddocs %}\n\n{% docs campaign_cta %}\nCampaign's call to action\n{% enddocs %}\n\n{% docs campaign_language %}\n\"Language in which the campaign is available\"\n{% enddocs %}\n\n{% docs agent_id %}\nIf set, the content type of the picture the member is sending us. Exp. image/png.\n{% enddocs %}\n\n{% docs attachment_content_type %}\nIf set, the handle of the Front agent this outbound support message is from.\n{% enddocs %}\n\n{% docs topic %}\nHolds a reference to the **last** campaign topic the member's conversation was in. This is useful to allow members to talk to Gambit and get quick responses (through Rivescript), without Gambit completely forgetting what state the member's interaction with a campaign topic was in.\n{% enddocs %}\n\n{% docs action_serial_id %}\nSerial id for the user's action. Depends on the source of the action. May be the bertly click id, sms message id, etc.\n{% enddocs %}\n\n{% docs channel %}\nChannel for the user's action. Depends on the source of the action. (e.g. web, sms)\n{% enddocs %}\n\n{% docs first_action_month %}\nMonth during which the user took their first action. \n{% enddocs %}\n\n{% docs event_id %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs event_source %}\nApplication source for event (eg. Phoenix, Northstar)\n{% enddocs %}\n\n{% docs event_datetime %}\nWhen the event occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs event_name %}\nName of the event (eg. northstar_submitted_register, https://docs.google.com/spreadsheets/d/1lm-fGrIm85nUTxSojqyCt_Ehmm1zEbViFhKpxcJiz1A/edit#gid=406441516)\n{% enddocs %}\n\n{% docs event_type %}\nType of event (pv = 'Page View', se = 'Structured Event')\n{% enddocs %}\n\n{% docs host %}\nURL host where event occurred (eg. www.dosomething.org or identity.dosomething.org)\n{% enddocs %}\n\n{% docs path %}\nURL path event occurred at (eg. /login or /us/campaigns/huddle-for-heroes)\n{% enddocs %}\n\n{% docs query_parameters %}\nOptional query parameters for the request (eg. query=huddle)\n{% enddocs %}\n\n{% docs se_category %}\nCategory of event (eg. focused_field, authentication) - Custom structured event\n{% enddocs %}\n\n{% docs se_action %}\nAction performed / event name (eg. form_submitted, action_failed) - Custom structured event\n{% enddocs %}\n\n{% docs se_label %}\nThe object of the action (eg. first_name, register, voter_reg_status) - Custom structured event\n{% enddocs %}\n\n{% docs session_id %}\nUnique identifier of the user's session\n{% enddocs %}\n\n{% docs session_counter %}\nHow many sessions a user has started\n{% enddocs %}\n\n{% docs browser_size %}\nWhich type of browser a user is using (eg. Mobile, Desktop)\n{% enddocs %}\n\n{% docs northstar_id %}\nThe Northstar ID of the user who generated the event\n{% enddocs %}\n\n{% docs device_id %}\nID of the device used\n{% enddocs %}\n\n{% docs referrer_host %}\nURL host of the referring site (eg. google.com)\n{% enddocs %}\n\n{% docs referrer_path %}\nURL path from referring site (eg. /10-stats-on-teen-drug-and-alcohol-use/)\n{% enddocs %}\n\n{% docs referrer_source %}\nReferrer source name (eg. Google, Facebook)\n{% enddocs %}\n\n{% docs utm_source %}\nTracks where the traffic is coming from. (eg. scholarship_listing, Facebook)\n{% enddocs %}\n\n{% docs utm_medium %}\nHow the traffic got to the platform (eg. referral, CPC)\n{% enddocs %}\n\n{% docs utm_campaign %}\nTracks which campaign the traffic was generated by. Shows up in Google Analytics as Campaign Name (eg. editorial_newsletter)\n{% enddocs %}\n\n{% docs url %}\nURL of campaign (eg. https://dosome.click/nyn5m7)\n{% enddocs %}\n\n{% docs modal_type %}\nNULL or SURVEY_MODAL\n{% enddocs %}\n\n{% docs landing_datetime %}\nWhen the session started in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs ending_datetime %}\nWhen the session ended in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs session_duration_seconds %}\nSession duration in seconds\n{% enddocs %}\n\n{% docs num_pages_views %}\nNumber of pages viewed in session\n{% enddocs %}\n\n{% docs landing_page %}\nFirst page the user viewed in the session (eg. /us/facts/11-facts-about-bp-oil-spill)\n{% enddocs %}\n\n{% docs exit_page %}\n\"Which page the user ended or exited their session from (eg. /us/campaigns/green-your-getaway)\"\n{% enddocs %}\n\n{% docs days_since_last_session %}\n\"Days since their last session.\"\n{% enddocs %}\n\n{% docs post_type %}\nType of post, (e.g. photo, voter-reg)\n{% enddocs %}\n\n{% docs noun %}\nNoun that corresponds to the item in the call to action that was delivered. (e.g. drawings, tweets)\n{% enddocs %}\n\n{% docs verb %}\nVerb corresponding to the action the user took. (e.g. shared, sent, taken)\n{% enddocs %}\n\n{% docs deleted_at %}\nDate time in UTC when a user deleted their post.\n{% enddocs %}\n\n{% docs _fivetran_deleted %}\nMarks rows that were deleted in the source table\n{% enddocs %}\n\n{% docs _fivetran_synced %}\n(UTC timestamp) keeps track of when each row was last successfully synced\n{% enddocs %}\n\n{% docs reportback %}\nWhether the post is a reportback \n{% enddocs %}\n\n{% docs active %}\nWhether the user is active \n{% enddocs %}\n\n{% docs anonymous %}\nWhether the user is anonymous when making the post \n{% enddocs %}\n\n{% docs callpower_campaign_id %}\nUnique ID corresponding to the Callpower campaign. Callpower allows users to record messages for their representatives.\n{% enddocs %}\n\n{% docs quiz %}\nWhether the post is a quiz \n{% enddocs %}\n\n{% docs action_type %}\nType of action the user took. (e.g. share-something, donate-something)\n{% enddocs %}\n\n{% docs online %}\nWhether the action is a online as opposed to IRL.\n{% enddocs %}\n\n{% docs time_commitment %}\nEstimated time required to do the action (e.g. 3.0+, <0.5)\n{% enddocs %}\n\n{% docs num_signups %}\nQuantity of campaign signups\n{% enddocs %}\n\n{% docs most_recent_signup %}\nTimestamp of the most recent signup in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs num_rbs %}\nQuantity of reportbacks for the user\n{% enddocs %}\n\n{% docs total_quantity %}\nTotal quantity of items in reportbacks\n{% enddocs %}\n\n{% docs most_recent_rb %}\nWhen the most recent reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs first_rb %}\nWhen the first reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs avg_time_betw_rbs %}\nCalculated average time between reportbacks.\n{% enddocs %}\n\n{% docs avg_days_next_action_after_rb %}\nCalculated average days until next action after reportback\n{% enddocs %}\n\n{% docs days_to_next_action_after_last_rb %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs most_recent_mam_action %}\nMost recent monthly active member qualifying action in UTC (eg. 2018-01-01 12:00:00).\n{% enddocs %}\n\n{% docs most_recent_email_open %}\nMost recent email open in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs most_recent_all_actions %}\nMost recent timestamp of any action in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs last_action_is_rb %}\nWhether the last action the user took was a reportback\n{% enddocs %}\n\n{% docs days_since_last_action %}\nDays since the user's last action\n{% enddocs %}\n\n{% docs time_to_first_rb %}\nHow much time after registering until the user's first reportback\n{% enddocs %}\n\n{% docs sms_unsubscribed_at %}\nTimestamp of when user unsubscribed from SMS messaging\n{% enddocs %}\n\n{% docs user_unsubscribed_at %}\nTimestamp of when user unsubscribed from email or sms\n{% enddocs %}\n\n{% docs voter_reg_acquisition %}\nWhether the user was an acquisition through voter registration efforts. \n{% enddocs %}\n\n{% docs last_logged_in %}\nDate time in UTC when user last logged in to Northstar\n{% enddocs %}\n\n{% docs last_accessed %}\nDate time in UTC when user last access the website\n{% enddocs %}\n\n{% docs last_messaged_at %}\nDate time in UTC when user was last sent a message via SMS or email\n{% enddocs %}\n\n{% docs facebook_id %}\nUser's facebook id\n{% enddocs %}\n\n{% docs mobile %}\nUsers's mobile phone number\n{% enddocs %}\n\n{% docs birthdate %}\nUser's birthdate\n{% enddocs %}\n\n{% docs first_name %}\nUser's first name\n{% enddocs %}\n\n{% docs last_name %}\nUser's last name\n{% enddocs %}\n\n{% docs voter_registration_status %}\nUser's registration status. (e.g. registration_complete, confirmed, uncertain) \n{% enddocs %}\n\n{% docs finish_with_state %}\nIf the registrant was eligible to use and passed through to complete their registration with their state\u2019s OVR system, it will be indicated in this field (direct quote from Rock-The-Vote documentation). Yes/No value in field.\n{% enddocs %}\n\n{% docs reportback_volume %}\nThis field returns 1 if non voter-reg action, since campaigns team only counts those a 1 reportback. If voter-reg action, we want to count quantity of post as number of registered voters.\n{% enddocs %}\n\n{% docs address_street_1 %}\nFirst line of user's street address\n{% enddocs %}\n\n{% docs address_street_2 %}\nSecond line of user's street address\n{% enddocs %}\n\n{% docs city %}\nUser's city\n{% enddocs %}\n\n{% docs state %}\nUser's state\n{% enddocs %}\n\n{% docs country %}\nUser's country\n{% enddocs %}\n\n{% docs language %}\nUser's language\n{% enddocs %}\n\n{% docs cio_status %}\nStatus of user from CIO. (e.g. customer_subscribed, customer_unsubscribed)\n{% enddocs %}\n\n{% docs cio_status_timestamp %}\nTimestamp when users's status was updated.\n{% enddocs %}\n\n{% docs sms_status %}\nCurrent SMS status. (e.g. undeliverable, unknown)\n{% enddocs %}\n\n{% docs source_detail %}\nDetails of the origin of the user. (e.g. tell_a_friend, other, opt_in_path/197981)\n{% enddocs %}\n\n{% docs badges %}\nWhether the user has any badges. \n{% enddocs %}\n\n{% docs refer_friends %}\nWhether the user is a part of the refer a friend campaign. \n{% enddocs %}\n\n{% docs subscribed_member %}\nWhether the user is subscribed. \n{% enddocs %}\n\n{% docs last_updated_at %}\nTimestamp when users's was updated.\n{% enddocs %}\n\n{% docs school_id %}\nUnique identifier for the user's school. This info comes from the school finder.\n{% enddocs %}\n\n{% docs newsletter_topic %}\nNewsletter topic. (e.g. community, lifestyle)\n{% enddocs %}\n\n{% docs user_agent %}\nFull user agent string for a user's browser (e.g. \"Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:24.0) Gecko/20100101 Firefox/24.0\")\n{% enddocs %}\n\n{% docs drupal_id %}\nOld Drupal user ID\n{% enddocs %}\n\n{% docs campaigns %}\nCampaigns a user is signed up for.\n{% enddocs %}\n\n{% docs audit %}\nA very useful field with data containing information about changes to a user, e.g. timestamps when the user subscribed and unsubscribed.\n{% enddocs %}\n\n{% docs voting_plan_status %}\nThe indication of the user's plan to vote, e.g. voting, not_voting, cant_vote\n{% enddocs %}\n\n{% docs voting_plan_time_of_day %}\nThe time of day when the user plans to vote, e.g morning, afternoon, evening\n{% enddocs %}\n\n{% docs voting_plan_method_of_transport %}\nHow the user plans to get to their polling place. e.g. walk, drive\n{% enddocs %}\n\n{% docs voting_plan_attending_with %}\nWith Whom the user plans to go voting, e.g. family, friends, alone\n{% enddocs %}\n\n{% docs feature_flags %}\nJSON containing info on features like badges and refer-a-friend.\n{% enddocs %}\n\n{% docs dbt_updated_at %}\nDBT snapshot table data. The updated_at timestamp of the source record when this snapshot row was inserted.\n{% enddocs %}\n\n{% docs dbt_scd_id %}\nDBT snapshot table data. A unique key generated for each snapshotted record.\n{% enddocs %}\n\n{% docs dbt_valid_from %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this snapshot row was first inserted\n{% enddocs %}\n\n{% docs dbt_valid_to %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this row row became invalidated.\n{% enddocs %}\n\n{% docs google_id %}\nUser's Google ID obtained from login.\n{% enddocs %}\n\n{% docs causes %}\nCauses in which a user is interested. e.g. animal welfare, education, mental_health\n{% enddocs %}\n\n{% docs email_subscription_status %}\nEmail subscription status of the user\n{% enddocs %}\n\n{% docs role %}\nUser's role, e.g. user, staff\n{% enddocs %}\n\n{% docs cio_backfilled %}\nWhether this user's data was backfilled from CIO\n{% enddocs %}\n\n{% docs addr_source %}\nWhere the user submitted their address, e.g. sms, GDPR\n{% enddocs %}\n\n{% docs email_subscription_topics %}\nEmail subscription topics correspond to categories in CIO in which the user is interested. e.g. lifestyle, community, scholarship\n{% enddocs %}\n\n{% docs sms_paused %}\nWhether we've paused sending sms messages to the user.\n{% enddocs %}\n\n\n\n\n", "name": "address_street_2", "unique_id": "ds_dbt.address_street_2", "block_contents": "Second line of user's street address"}, "ds_dbt.city": {"root_path": "/Users/mrich/projects/quasar/quasar/dbt", "resource_type": "docs", "path": "schema.md", "original_file_path": "models/schema.md", "package_name": "ds_dbt", "file_contents": "\n{% docs click_id %}\nThis is a unique identifier for each click\n{% enddocs %}\n\n{% docs click_time %}\nTimestamp when user clicked.\n{% enddocs %}\n\n{% docs shortened %}\nShortened URL\n{% enddocs %}\n\n{% docs target_url %}\nURL where the user will be directed\n{% enddocs %}\n\n{% docs broadcast_id %}\nID of the broadcast that generated the shortened URL\n{% enddocs %}\n\n{% docs source %}\nSource of the URL (e.g. SMS, web), origin of the post (e.g. phoenix-web, phoenix-ashes, sms), or source where user was acquired. (e.g. sms, phoenix-next)\n{% enddocs %}\n\n{% docs interaction_type %}\nHow the user interacted with the link (e.g. preview, click)\n{% enddocs %}\n\n{% docs id %}\nUnique identifier for the post\n{% enddocs %}\n\n{% docs type %}\nType of post (e.g. photo)\n{% enddocs %}\n\n{% docs action %}\nPost action (e.g. DefendDreamers_Nov9_CongressCalls, GunViolence2018_Feb15_ParklandResponse)\n{% enddocs %}\n\n{% docs status %}\nPost status (e.g. accepted, rejected)\n{% enddocs %}\n\n{% docs quantity %}\nNumerical quantity of items specified in the call to action (e.g. 10, 200)\n{% enddocs %}\n\n{% docs source_bucket %}\nGrouping bucket for origin of the post (e.g. web, sms) \n{% enddocs %}\n\n{% docs created_at %}\nWhen the item was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs updated_at %}\nWhen the item was updated in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs text %}\nText of the post (e.g. \"Zoo animals and a super hero trying to help too!\") \n{% enddocs %}\n\n{% docs signup_id %}\nUnique identifier for the signup \n{% enddocs %}\n\n{% docs post_class %}\nClass of the signup (e.g. \"photo - default\", \"phone-call - DefendDreamers_Jan16_BothBodies\")\n{% enddocs %}\n\n{% docs is_accepted %}\nWhether the post has been accepted to be displayed to the public on the website\n{% enddocs %}\n\n{% docs action_id %}\nInternal identifier of the action \n{% enddocs %}\n\n{% docs location %}\nLocation where the action takes place (e.g. US-NY)\n{% enddocs %}\n\n{% docs postal_code %}\nPostal code where the action takes place\n{% enddocs %}\n\n{% docs is_reportback %}\nWhether the post is a reportback. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs civic_action %}\nWhether the post is a Civic Action. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs scholarship_entry %}\nWhether the post is a Scholarship Entry. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs why_participated %}\nWhy the user participated in this action. Entered by the user.\n{% enddocs %}\n\n{% docs details %}\nDetails about the post. Contains contentfulId and other information (e.g. {\"campaignContentfulId\":\"6ATBgGEQEeJoIcxs1qbwaC\"})\n{% enddocs %}\n\n{% docs email %}\nEmail address of the user.\n{% enddocs %}\n\n{% docs source_details %}\nDetails about the source of the item. This is sometimes represented as a JSON object, and for other tables like Turbovote its represented as a string. (e.g. \"{\"contentful_id\":\"3CTLlXfbwtz1FOMpl31SKV\",\"utm_source\":\"scholarship_listing\",\"utm_medium\":\"referral\",\"utm_campaign\":\"fastweb_2019_08\"}\", newsletter_456)\n{% enddocs %}\n\n{% docs campaign_id %}\nThis is a unique identifier for the campaign\n{% enddocs %}\n\n{% docs campaign_run_id %}\nUnique identifier for the campaign run\n{% enddocs %}\n\n{% docs campaign_name %}\nName of the campaign\n{% enddocs %}\n\n{% docs campaign_cause %}\nCampaign cause (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_run_start_date %}\nStart date of the campaign run\n{% enddocs %}\n\n{% docs campaign_run_end_date %}\nEnd date of the campaign run\n{% enddocs %}\n\n{% docs campaign_created_date %}\nWhen the campaign was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs campaign_node_id %}\nInternal unique node id for the campaign\n{% enddocs %}\n\n{% docs campaign_node_id_title %}\nCampaign title\n{% enddocs %}\n\n{% docs campaign_run_id_title %}\nTitle of the campaign run\n{% enddocs %}\n\n{% docs campaign_action_type %}\nCampaign action type (eg. Make Something, Share Something)\n{% enddocs %}\n\n{% docs campaign_cause_type %}\nCampaign cause type (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_noun %}\nNoun applicable to the user's action\n{% enddocs %}\n\n{% docs campaign_verb %}\nVerb describing the action the user should take\n{% enddocs %}\n\n{% docs campaign_cta %}\nCampaign's call to action\n{% enddocs %}\n\n{% docs campaign_language %}\n\"Language in which the campaign is available\"\n{% enddocs %}\n\n{% docs agent_id %}\nIf set, the content type of the picture the member is sending us. Exp. image/png.\n{% enddocs %}\n\n{% docs attachment_content_type %}\nIf set, the handle of the Front agent this outbound support message is from.\n{% enddocs %}\n\n{% docs topic %}\nHolds a reference to the **last** campaign topic the member's conversation was in. This is useful to allow members to talk to Gambit and get quick responses (through Rivescript), without Gambit completely forgetting what state the member's interaction with a campaign topic was in.\n{% enddocs %}\n\n{% docs action_serial_id %}\nSerial id for the user's action. Depends on the source of the action. May be the bertly click id, sms message id, etc.\n{% enddocs %}\n\n{% docs channel %}\nChannel for the user's action. Depends on the source of the action. (e.g. web, sms)\n{% enddocs %}\n\n{% docs first_action_month %}\nMonth during which the user took their first action. \n{% enddocs %}\n\n{% docs event_id %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs event_source %}\nApplication source for event (eg. Phoenix, Northstar)\n{% enddocs %}\n\n{% docs event_datetime %}\nWhen the event occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs event_name %}\nName of the event (eg. northstar_submitted_register, https://docs.google.com/spreadsheets/d/1lm-fGrIm85nUTxSojqyCt_Ehmm1zEbViFhKpxcJiz1A/edit#gid=406441516)\n{% enddocs %}\n\n{% docs event_type %}\nType of event (pv = 'Page View', se = 'Structured Event')\n{% enddocs %}\n\n{% docs host %}\nURL host where event occurred (eg. www.dosomething.org or identity.dosomething.org)\n{% enddocs %}\n\n{% docs path %}\nURL path event occurred at (eg. /login or /us/campaigns/huddle-for-heroes)\n{% enddocs %}\n\n{% docs query_parameters %}\nOptional query parameters for the request (eg. query=huddle)\n{% enddocs %}\n\n{% docs se_category %}\nCategory of event (eg. focused_field, authentication) - Custom structured event\n{% enddocs %}\n\n{% docs se_action %}\nAction performed / event name (eg. form_submitted, action_failed) - Custom structured event\n{% enddocs %}\n\n{% docs se_label %}\nThe object of the action (eg. first_name, register, voter_reg_status) - Custom structured event\n{% enddocs %}\n\n{% docs session_id %}\nUnique identifier of the user's session\n{% enddocs %}\n\n{% docs session_counter %}\nHow many sessions a user has started\n{% enddocs %}\n\n{% docs browser_size %}\nWhich type of browser a user is using (eg. Mobile, Desktop)\n{% enddocs %}\n\n{% docs northstar_id %}\nThe Northstar ID of the user who generated the event\n{% enddocs %}\n\n{% docs device_id %}\nID of the device used\n{% enddocs %}\n\n{% docs referrer_host %}\nURL host of the referring site (eg. google.com)\n{% enddocs %}\n\n{% docs referrer_path %}\nURL path from referring site (eg. /10-stats-on-teen-drug-and-alcohol-use/)\n{% enddocs %}\n\n{% docs referrer_source %}\nReferrer source name (eg. Google, Facebook)\n{% enddocs %}\n\n{% docs utm_source %}\nTracks where the traffic is coming from. (eg. scholarship_listing, Facebook)\n{% enddocs %}\n\n{% docs utm_medium %}\nHow the traffic got to the platform (eg. referral, CPC)\n{% enddocs %}\n\n{% docs utm_campaign %}\nTracks which campaign the traffic was generated by. Shows up in Google Analytics as Campaign Name (eg. editorial_newsletter)\n{% enddocs %}\n\n{% docs url %}\nURL of campaign (eg. https://dosome.click/nyn5m7)\n{% enddocs %}\n\n{% docs modal_type %}\nNULL or SURVEY_MODAL\n{% enddocs %}\n\n{% docs landing_datetime %}\nWhen the session started in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs ending_datetime %}\nWhen the session ended in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs session_duration_seconds %}\nSession duration in seconds\n{% enddocs %}\n\n{% docs num_pages_views %}\nNumber of pages viewed in session\n{% enddocs %}\n\n{% docs landing_page %}\nFirst page the user viewed in the session (eg. /us/facts/11-facts-about-bp-oil-spill)\n{% enddocs %}\n\n{% docs exit_page %}\n\"Which page the user ended or exited their session from (eg. /us/campaigns/green-your-getaway)\"\n{% enddocs %}\n\n{% docs days_since_last_session %}\n\"Days since their last session.\"\n{% enddocs %}\n\n{% docs post_type %}\nType of post, (e.g. photo, voter-reg)\n{% enddocs %}\n\n{% docs noun %}\nNoun that corresponds to the item in the call to action that was delivered. (e.g. drawings, tweets)\n{% enddocs %}\n\n{% docs verb %}\nVerb corresponding to the action the user took. (e.g. shared, sent, taken)\n{% enddocs %}\n\n{% docs deleted_at %}\nDate time in UTC when a user deleted their post.\n{% enddocs %}\n\n{% docs _fivetran_deleted %}\nMarks rows that were deleted in the source table\n{% enddocs %}\n\n{% docs _fivetran_synced %}\n(UTC timestamp) keeps track of when each row was last successfully synced\n{% enddocs %}\n\n{% docs reportback %}\nWhether the post is a reportback \n{% enddocs %}\n\n{% docs active %}\nWhether the user is active \n{% enddocs %}\n\n{% docs anonymous %}\nWhether the user is anonymous when making the post \n{% enddocs %}\n\n{% docs callpower_campaign_id %}\nUnique ID corresponding to the Callpower campaign. Callpower allows users to record messages for their representatives.\n{% enddocs %}\n\n{% docs quiz %}\nWhether the post is a quiz \n{% enddocs %}\n\n{% docs action_type %}\nType of action the user took. (e.g. share-something, donate-something)\n{% enddocs %}\n\n{% docs online %}\nWhether the action is a online as opposed to IRL.\n{% enddocs %}\n\n{% docs time_commitment %}\nEstimated time required to do the action (e.g. 3.0+, <0.5)\n{% enddocs %}\n\n{% docs num_signups %}\nQuantity of campaign signups\n{% enddocs %}\n\n{% docs most_recent_signup %}\nTimestamp of the most recent signup in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs num_rbs %}\nQuantity of reportbacks for the user\n{% enddocs %}\n\n{% docs total_quantity %}\nTotal quantity of items in reportbacks\n{% enddocs %}\n\n{% docs most_recent_rb %}\nWhen the most recent reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs first_rb %}\nWhen the first reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs avg_time_betw_rbs %}\nCalculated average time between reportbacks.\n{% enddocs %}\n\n{% docs avg_days_next_action_after_rb %}\nCalculated average days until next action after reportback\n{% enddocs %}\n\n{% docs days_to_next_action_after_last_rb %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs most_recent_mam_action %}\nMost recent monthly active member qualifying action in UTC (eg. 2018-01-01 12:00:00).\n{% enddocs %}\n\n{% docs most_recent_email_open %}\nMost recent email open in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs most_recent_all_actions %}\nMost recent timestamp of any action in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs last_action_is_rb %}\nWhether the last action the user took was a reportback\n{% enddocs %}\n\n{% docs days_since_last_action %}\nDays since the user's last action\n{% enddocs %}\n\n{% docs time_to_first_rb %}\nHow much time after registering until the user's first reportback\n{% enddocs %}\n\n{% docs sms_unsubscribed_at %}\nTimestamp of when user unsubscribed from SMS messaging\n{% enddocs %}\n\n{% docs user_unsubscribed_at %}\nTimestamp of when user unsubscribed from email or sms\n{% enddocs %}\n\n{% docs voter_reg_acquisition %}\nWhether the user was an acquisition through voter registration efforts. \n{% enddocs %}\n\n{% docs last_logged_in %}\nDate time in UTC when user last logged in to Northstar\n{% enddocs %}\n\n{% docs last_accessed %}\nDate time in UTC when user last access the website\n{% enddocs %}\n\n{% docs last_messaged_at %}\nDate time in UTC when user was last sent a message via SMS or email\n{% enddocs %}\n\n{% docs facebook_id %}\nUser's facebook id\n{% enddocs %}\n\n{% docs mobile %}\nUsers's mobile phone number\n{% enddocs %}\n\n{% docs birthdate %}\nUser's birthdate\n{% enddocs %}\n\n{% docs first_name %}\nUser's first name\n{% enddocs %}\n\n{% docs last_name %}\nUser's last name\n{% enddocs %}\n\n{% docs voter_registration_status %}\nUser's registration status. (e.g. registration_complete, confirmed, uncertain) \n{% enddocs %}\n\n{% docs finish_with_state %}\nIf the registrant was eligible to use and passed through to complete their registration with their state\u2019s OVR system, it will be indicated in this field (direct quote from Rock-The-Vote documentation). Yes/No value in field.\n{% enddocs %}\n\n{% docs reportback_volume %}\nThis field returns 1 if non voter-reg action, since campaigns team only counts those a 1 reportback. If voter-reg action, we want to count quantity of post as number of registered voters.\n{% enddocs %}\n\n{% docs address_street_1 %}\nFirst line of user's street address\n{% enddocs %}\n\n{% docs address_street_2 %}\nSecond line of user's street address\n{% enddocs %}\n\n{% docs city %}\nUser's city\n{% enddocs %}\n\n{% docs state %}\nUser's state\n{% enddocs %}\n\n{% docs country %}\nUser's country\n{% enddocs %}\n\n{% docs language %}\nUser's language\n{% enddocs %}\n\n{% docs cio_status %}\nStatus of user from CIO. (e.g. customer_subscribed, customer_unsubscribed)\n{% enddocs %}\n\n{% docs cio_status_timestamp %}\nTimestamp when users's status was updated.\n{% enddocs %}\n\n{% docs sms_status %}\nCurrent SMS status. (e.g. undeliverable, unknown)\n{% enddocs %}\n\n{% docs source_detail %}\nDetails of the origin of the user. (e.g. tell_a_friend, other, opt_in_path/197981)\n{% enddocs %}\n\n{% docs badges %}\nWhether the user has any badges. \n{% enddocs %}\n\n{% docs refer_friends %}\nWhether the user is a part of the refer a friend campaign. \n{% enddocs %}\n\n{% docs subscribed_member %}\nWhether the user is subscribed. \n{% enddocs %}\n\n{% docs last_updated_at %}\nTimestamp when users's was updated.\n{% enddocs %}\n\n{% docs school_id %}\nUnique identifier for the user's school. This info comes from the school finder.\n{% enddocs %}\n\n{% docs newsletter_topic %}\nNewsletter topic. (e.g. community, lifestyle)\n{% enddocs %}\n\n{% docs user_agent %}\nFull user agent string for a user's browser (e.g. \"Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:24.0) Gecko/20100101 Firefox/24.0\")\n{% enddocs %}\n\n{% docs drupal_id %}\nOld Drupal user ID\n{% enddocs %}\n\n{% docs campaigns %}\nCampaigns a user is signed up for.\n{% enddocs %}\n\n{% docs audit %}\nA very useful field with data containing information about changes to a user, e.g. timestamps when the user subscribed and unsubscribed.\n{% enddocs %}\n\n{% docs voting_plan_status %}\nThe indication of the user's plan to vote, e.g. voting, not_voting, cant_vote\n{% enddocs %}\n\n{% docs voting_plan_time_of_day %}\nThe time of day when the user plans to vote, e.g morning, afternoon, evening\n{% enddocs %}\n\n{% docs voting_plan_method_of_transport %}\nHow the user plans to get to their polling place. e.g. walk, drive\n{% enddocs %}\n\n{% docs voting_plan_attending_with %}\nWith Whom the user plans to go voting, e.g. family, friends, alone\n{% enddocs %}\n\n{% docs feature_flags %}\nJSON containing info on features like badges and refer-a-friend.\n{% enddocs %}\n\n{% docs dbt_updated_at %}\nDBT snapshot table data. The updated_at timestamp of the source record when this snapshot row was inserted.\n{% enddocs %}\n\n{% docs dbt_scd_id %}\nDBT snapshot table data. A unique key generated for each snapshotted record.\n{% enddocs %}\n\n{% docs dbt_valid_from %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this snapshot row was first inserted\n{% enddocs %}\n\n{% docs dbt_valid_to %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this row row became invalidated.\n{% enddocs %}\n\n{% docs google_id %}\nUser's Google ID obtained from login.\n{% enddocs %}\n\n{% docs causes %}\nCauses in which a user is interested. e.g. animal welfare, education, mental_health\n{% enddocs %}\n\n{% docs email_subscription_status %}\nEmail subscription status of the user\n{% enddocs %}\n\n{% docs role %}\nUser's role, e.g. user, staff\n{% enddocs %}\n\n{% docs cio_backfilled %}\nWhether this user's data was backfilled from CIO\n{% enddocs %}\n\n{% docs addr_source %}\nWhere the user submitted their address, e.g. sms, GDPR\n{% enddocs %}\n\n{% docs email_subscription_topics %}\nEmail subscription topics correspond to categories in CIO in which the user is interested. e.g. lifestyle, community, scholarship\n{% enddocs %}\n\n{% docs sms_paused %}\nWhether we've paused sending sms messages to the user.\n{% enddocs %}\n\n\n\n\n", "name": "city", "unique_id": "ds_dbt.city", "block_contents": "User's city"}, "ds_dbt.state": {"root_path": "/Users/mrich/projects/quasar/quasar/dbt", "resource_type": "docs", "path": "schema.md", "original_file_path": "models/schema.md", "package_name": "ds_dbt", "file_contents": "\n{% docs click_id %}\nThis is a unique identifier for each click\n{% enddocs %}\n\n{% docs click_time %}\nTimestamp when user clicked.\n{% enddocs %}\n\n{% docs shortened %}\nShortened URL\n{% enddocs %}\n\n{% docs target_url %}\nURL where the user will be directed\n{% enddocs %}\n\n{% docs broadcast_id %}\nID of the broadcast that generated the shortened URL\n{% enddocs %}\n\n{% docs source %}\nSource of the URL (e.g. SMS, web), origin of the post (e.g. phoenix-web, phoenix-ashes, sms), or source where user was acquired. (e.g. sms, phoenix-next)\n{% enddocs %}\n\n{% docs interaction_type %}\nHow the user interacted with the link (e.g. preview, click)\n{% enddocs %}\n\n{% docs id %}\nUnique identifier for the post\n{% enddocs %}\n\n{% docs type %}\nType of post (e.g. photo)\n{% enddocs %}\n\n{% docs action %}\nPost action (e.g. DefendDreamers_Nov9_CongressCalls, GunViolence2018_Feb15_ParklandResponse)\n{% enddocs %}\n\n{% docs status %}\nPost status (e.g. accepted, rejected)\n{% enddocs %}\n\n{% docs quantity %}\nNumerical quantity of items specified in the call to action (e.g. 10, 200)\n{% enddocs %}\n\n{% docs source_bucket %}\nGrouping bucket for origin of the post (e.g. web, sms) \n{% enddocs %}\n\n{% docs created_at %}\nWhen the item was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs updated_at %}\nWhen the item was updated in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs text %}\nText of the post (e.g. \"Zoo animals and a super hero trying to help too!\") \n{% enddocs %}\n\n{% docs signup_id %}\nUnique identifier for the signup \n{% enddocs %}\n\n{% docs post_class %}\nClass of the signup (e.g. \"photo - default\", \"phone-call - DefendDreamers_Jan16_BothBodies\")\n{% enddocs %}\n\n{% docs is_accepted %}\nWhether the post has been accepted to be displayed to the public on the website\n{% enddocs %}\n\n{% docs action_id %}\nInternal identifier of the action \n{% enddocs %}\n\n{% docs location %}\nLocation where the action takes place (e.g. US-NY)\n{% enddocs %}\n\n{% docs postal_code %}\nPostal code where the action takes place\n{% enddocs %}\n\n{% docs is_reportback %}\nWhether the post is a reportback. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs civic_action %}\nWhether the post is a Civic Action. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs scholarship_entry %}\nWhether the post is a Scholarship Entry. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs why_participated %}\nWhy the user participated in this action. Entered by the user.\n{% enddocs %}\n\n{% docs details %}\nDetails about the post. Contains contentfulId and other information (e.g. {\"campaignContentfulId\":\"6ATBgGEQEeJoIcxs1qbwaC\"})\n{% enddocs %}\n\n{% docs email %}\nEmail address of the user.\n{% enddocs %}\n\n{% docs source_details %}\nDetails about the source of the item. This is sometimes represented as a JSON object, and for other tables like Turbovote its represented as a string. (e.g. \"{\"contentful_id\":\"3CTLlXfbwtz1FOMpl31SKV\",\"utm_source\":\"scholarship_listing\",\"utm_medium\":\"referral\",\"utm_campaign\":\"fastweb_2019_08\"}\", newsletter_456)\n{% enddocs %}\n\n{% docs campaign_id %}\nThis is a unique identifier for the campaign\n{% enddocs %}\n\n{% docs campaign_run_id %}\nUnique identifier for the campaign run\n{% enddocs %}\n\n{% docs campaign_name %}\nName of the campaign\n{% enddocs %}\n\n{% docs campaign_cause %}\nCampaign cause (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_run_start_date %}\nStart date of the campaign run\n{% enddocs %}\n\n{% docs campaign_run_end_date %}\nEnd date of the campaign run\n{% enddocs %}\n\n{% docs campaign_created_date %}\nWhen the campaign was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs campaign_node_id %}\nInternal unique node id for the campaign\n{% enddocs %}\n\n{% docs campaign_node_id_title %}\nCampaign title\n{% enddocs %}\n\n{% docs campaign_run_id_title %}\nTitle of the campaign run\n{% enddocs %}\n\n{% docs campaign_action_type %}\nCampaign action type (eg. Make Something, Share Something)\n{% enddocs %}\n\n{% docs campaign_cause_type %}\nCampaign cause type (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_noun %}\nNoun applicable to the user's action\n{% enddocs %}\n\n{% docs campaign_verb %}\nVerb describing the action the user should take\n{% enddocs %}\n\n{% docs campaign_cta %}\nCampaign's call to action\n{% enddocs %}\n\n{% docs campaign_language %}\n\"Language in which the campaign is available\"\n{% enddocs %}\n\n{% docs agent_id %}\nIf set, the content type of the picture the member is sending us. Exp. image/png.\n{% enddocs %}\n\n{% docs attachment_content_type %}\nIf set, the handle of the Front agent this outbound support message is from.\n{% enddocs %}\n\n{% docs topic %}\nHolds a reference to the **last** campaign topic the member's conversation was in. This is useful to allow members to talk to Gambit and get quick responses (through Rivescript), without Gambit completely forgetting what state the member's interaction with a campaign topic was in.\n{% enddocs %}\n\n{% docs action_serial_id %}\nSerial id for the user's action. Depends on the source of the action. May be the bertly click id, sms message id, etc.\n{% enddocs %}\n\n{% docs channel %}\nChannel for the user's action. Depends on the source of the action. (e.g. web, sms)\n{% enddocs %}\n\n{% docs first_action_month %}\nMonth during which the user took their first action. \n{% enddocs %}\n\n{% docs event_id %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs event_source %}\nApplication source for event (eg. Phoenix, Northstar)\n{% enddocs %}\n\n{% docs event_datetime %}\nWhen the event occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs event_name %}\nName of the event (eg. northstar_submitted_register, https://docs.google.com/spreadsheets/d/1lm-fGrIm85nUTxSojqyCt_Ehmm1zEbViFhKpxcJiz1A/edit#gid=406441516)\n{% enddocs %}\n\n{% docs event_type %}\nType of event (pv = 'Page View', se = 'Structured Event')\n{% enddocs %}\n\n{% docs host %}\nURL host where event occurred (eg. www.dosomething.org or identity.dosomething.org)\n{% enddocs %}\n\n{% docs path %}\nURL path event occurred at (eg. /login or /us/campaigns/huddle-for-heroes)\n{% enddocs %}\n\n{% docs query_parameters %}\nOptional query parameters for the request (eg. query=huddle)\n{% enddocs %}\n\n{% docs se_category %}\nCategory of event (eg. focused_field, authentication) - Custom structured event\n{% enddocs %}\n\n{% docs se_action %}\nAction performed / event name (eg. form_submitted, action_failed) - Custom structured event\n{% enddocs %}\n\n{% docs se_label %}\nThe object of the action (eg. first_name, register, voter_reg_status) - Custom structured event\n{% enddocs %}\n\n{% docs session_id %}\nUnique identifier of the user's session\n{% enddocs %}\n\n{% docs session_counter %}\nHow many sessions a user has started\n{% enddocs %}\n\n{% docs browser_size %}\nWhich type of browser a user is using (eg. Mobile, Desktop)\n{% enddocs %}\n\n{% docs northstar_id %}\nThe Northstar ID of the user who generated the event\n{% enddocs %}\n\n{% docs device_id %}\nID of the device used\n{% enddocs %}\n\n{% docs referrer_host %}\nURL host of the referring site (eg. google.com)\n{% enddocs %}\n\n{% docs referrer_path %}\nURL path from referring site (eg. /10-stats-on-teen-drug-and-alcohol-use/)\n{% enddocs %}\n\n{% docs referrer_source %}\nReferrer source name (eg. Google, Facebook)\n{% enddocs %}\n\n{% docs utm_source %}\nTracks where the traffic is coming from. (eg. scholarship_listing, Facebook)\n{% enddocs %}\n\n{% docs utm_medium %}\nHow the traffic got to the platform (eg. referral, CPC)\n{% enddocs %}\n\n{% docs utm_campaign %}\nTracks which campaign the traffic was generated by. Shows up in Google Analytics as Campaign Name (eg. editorial_newsletter)\n{% enddocs %}\n\n{% docs url %}\nURL of campaign (eg. https://dosome.click/nyn5m7)\n{% enddocs %}\n\n{% docs modal_type %}\nNULL or SURVEY_MODAL\n{% enddocs %}\n\n{% docs landing_datetime %}\nWhen the session started in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs ending_datetime %}\nWhen the session ended in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs session_duration_seconds %}\nSession duration in seconds\n{% enddocs %}\n\n{% docs num_pages_views %}\nNumber of pages viewed in session\n{% enddocs %}\n\n{% docs landing_page %}\nFirst page the user viewed in the session (eg. /us/facts/11-facts-about-bp-oil-spill)\n{% enddocs %}\n\n{% docs exit_page %}\n\"Which page the user ended or exited their session from (eg. /us/campaigns/green-your-getaway)\"\n{% enddocs %}\n\n{% docs days_since_last_session %}\n\"Days since their last session.\"\n{% enddocs %}\n\n{% docs post_type %}\nType of post, (e.g. photo, voter-reg)\n{% enddocs %}\n\n{% docs noun %}\nNoun that corresponds to the item in the call to action that was delivered. (e.g. drawings, tweets)\n{% enddocs %}\n\n{% docs verb %}\nVerb corresponding to the action the user took. (e.g. shared, sent, taken)\n{% enddocs %}\n\n{% docs deleted_at %}\nDate time in UTC when a user deleted their post.\n{% enddocs %}\n\n{% docs _fivetran_deleted %}\nMarks rows that were deleted in the source table\n{% enddocs %}\n\n{% docs _fivetran_synced %}\n(UTC timestamp) keeps track of when each row was last successfully synced\n{% enddocs %}\n\n{% docs reportback %}\nWhether the post is a reportback \n{% enddocs %}\n\n{% docs active %}\nWhether the user is active \n{% enddocs %}\n\n{% docs anonymous %}\nWhether the user is anonymous when making the post \n{% enddocs %}\n\n{% docs callpower_campaign_id %}\nUnique ID corresponding to the Callpower campaign. Callpower allows users to record messages for their representatives.\n{% enddocs %}\n\n{% docs quiz %}\nWhether the post is a quiz \n{% enddocs %}\n\n{% docs action_type %}\nType of action the user took. (e.g. share-something, donate-something)\n{% enddocs %}\n\n{% docs online %}\nWhether the action is a online as opposed to IRL.\n{% enddocs %}\n\n{% docs time_commitment %}\nEstimated time required to do the action (e.g. 3.0+, <0.5)\n{% enddocs %}\n\n{% docs num_signups %}\nQuantity of campaign signups\n{% enddocs %}\n\n{% docs most_recent_signup %}\nTimestamp of the most recent signup in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs num_rbs %}\nQuantity of reportbacks for the user\n{% enddocs %}\n\n{% docs total_quantity %}\nTotal quantity of items in reportbacks\n{% enddocs %}\n\n{% docs most_recent_rb %}\nWhen the most recent reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs first_rb %}\nWhen the first reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs avg_time_betw_rbs %}\nCalculated average time between reportbacks.\n{% enddocs %}\n\n{% docs avg_days_next_action_after_rb %}\nCalculated average days until next action after reportback\n{% enddocs %}\n\n{% docs days_to_next_action_after_last_rb %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs most_recent_mam_action %}\nMost recent monthly active member qualifying action in UTC (eg. 2018-01-01 12:00:00).\n{% enddocs %}\n\n{% docs most_recent_email_open %}\nMost recent email open in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs most_recent_all_actions %}\nMost recent timestamp of any action in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs last_action_is_rb %}\nWhether the last action the user took was a reportback\n{% enddocs %}\n\n{% docs days_since_last_action %}\nDays since the user's last action\n{% enddocs %}\n\n{% docs time_to_first_rb %}\nHow much time after registering until the user's first reportback\n{% enddocs %}\n\n{% docs sms_unsubscribed_at %}\nTimestamp of when user unsubscribed from SMS messaging\n{% enddocs %}\n\n{% docs user_unsubscribed_at %}\nTimestamp of when user unsubscribed from email or sms\n{% enddocs %}\n\n{% docs voter_reg_acquisition %}\nWhether the user was an acquisition through voter registration efforts. \n{% enddocs %}\n\n{% docs last_logged_in %}\nDate time in UTC when user last logged in to Northstar\n{% enddocs %}\n\n{% docs last_accessed %}\nDate time in UTC when user last access the website\n{% enddocs %}\n\n{% docs last_messaged_at %}\nDate time in UTC when user was last sent a message via SMS or email\n{% enddocs %}\n\n{% docs facebook_id %}\nUser's facebook id\n{% enddocs %}\n\n{% docs mobile %}\nUsers's mobile phone number\n{% enddocs %}\n\n{% docs birthdate %}\nUser's birthdate\n{% enddocs %}\n\n{% docs first_name %}\nUser's first name\n{% enddocs %}\n\n{% docs last_name %}\nUser's last name\n{% enddocs %}\n\n{% docs voter_registration_status %}\nUser's registration status. (e.g. registration_complete, confirmed, uncertain) \n{% enddocs %}\n\n{% docs finish_with_state %}\nIf the registrant was eligible to use and passed through to complete their registration with their state\u2019s OVR system, it will be indicated in this field (direct quote from Rock-The-Vote documentation). Yes/No value in field.\n{% enddocs %}\n\n{% docs reportback_volume %}\nThis field returns 1 if non voter-reg action, since campaigns team only counts those a 1 reportback. If voter-reg action, we want to count quantity of post as number of registered voters.\n{% enddocs %}\n\n{% docs address_street_1 %}\nFirst line of user's street address\n{% enddocs %}\n\n{% docs address_street_2 %}\nSecond line of user's street address\n{% enddocs %}\n\n{% docs city %}\nUser's city\n{% enddocs %}\n\n{% docs state %}\nUser's state\n{% enddocs %}\n\n{% docs country %}\nUser's country\n{% enddocs %}\n\n{% docs language %}\nUser's language\n{% enddocs %}\n\n{% docs cio_status %}\nStatus of user from CIO. (e.g. customer_subscribed, customer_unsubscribed)\n{% enddocs %}\n\n{% docs cio_status_timestamp %}\nTimestamp when users's status was updated.\n{% enddocs %}\n\n{% docs sms_status %}\nCurrent SMS status. (e.g. undeliverable, unknown)\n{% enddocs %}\n\n{% docs source_detail %}\nDetails of the origin of the user. (e.g. tell_a_friend, other, opt_in_path/197981)\n{% enddocs %}\n\n{% docs badges %}\nWhether the user has any badges. \n{% enddocs %}\n\n{% docs refer_friends %}\nWhether the user is a part of the refer a friend campaign. \n{% enddocs %}\n\n{% docs subscribed_member %}\nWhether the user is subscribed. \n{% enddocs %}\n\n{% docs last_updated_at %}\nTimestamp when users's was updated.\n{% enddocs %}\n\n{% docs school_id %}\nUnique identifier for the user's school. This info comes from the school finder.\n{% enddocs %}\n\n{% docs newsletter_topic %}\nNewsletter topic. (e.g. community, lifestyle)\n{% enddocs %}\n\n{% docs user_agent %}\nFull user agent string for a user's browser (e.g. \"Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:24.0) Gecko/20100101 Firefox/24.0\")\n{% enddocs %}\n\n{% docs drupal_id %}\nOld Drupal user ID\n{% enddocs %}\n\n{% docs campaigns %}\nCampaigns a user is signed up for.\n{% enddocs %}\n\n{% docs audit %}\nA very useful field with data containing information about changes to a user, e.g. timestamps when the user subscribed and unsubscribed.\n{% enddocs %}\n\n{% docs voting_plan_status %}\nThe indication of the user's plan to vote, e.g. voting, not_voting, cant_vote\n{% enddocs %}\n\n{% docs voting_plan_time_of_day %}\nThe time of day when the user plans to vote, e.g morning, afternoon, evening\n{% enddocs %}\n\n{% docs voting_plan_method_of_transport %}\nHow the user plans to get to their polling place. e.g. walk, drive\n{% enddocs %}\n\n{% docs voting_plan_attending_with %}\nWith Whom the user plans to go voting, e.g. family, friends, alone\n{% enddocs %}\n\n{% docs feature_flags %}\nJSON containing info on features like badges and refer-a-friend.\n{% enddocs %}\n\n{% docs dbt_updated_at %}\nDBT snapshot table data. The updated_at timestamp of the source record when this snapshot row was inserted.\n{% enddocs %}\n\n{% docs dbt_scd_id %}\nDBT snapshot table data. A unique key generated for each snapshotted record.\n{% enddocs %}\n\n{% docs dbt_valid_from %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this snapshot row was first inserted\n{% enddocs %}\n\n{% docs dbt_valid_to %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this row row became invalidated.\n{% enddocs %}\n\n{% docs google_id %}\nUser's Google ID obtained from login.\n{% enddocs %}\n\n{% docs causes %}\nCauses in which a user is interested. e.g. animal welfare, education, mental_health\n{% enddocs %}\n\n{% docs email_subscription_status %}\nEmail subscription status of the user\n{% enddocs %}\n\n{% docs role %}\nUser's role, e.g. user, staff\n{% enddocs %}\n\n{% docs cio_backfilled %}\nWhether this user's data was backfilled from CIO\n{% enddocs %}\n\n{% docs addr_source %}\nWhere the user submitted their address, e.g. sms, GDPR\n{% enddocs %}\n\n{% docs email_subscription_topics %}\nEmail subscription topics correspond to categories in CIO in which the user is interested. e.g. lifestyle, community, scholarship\n{% enddocs %}\n\n{% docs sms_paused %}\nWhether we've paused sending sms messages to the user.\n{% enddocs %}\n\n\n\n\n", "name": "state", "unique_id": "ds_dbt.state", "block_contents": "User's state"}, "ds_dbt.country": {"root_path": "/Users/mrich/projects/quasar/quasar/dbt", "resource_type": "docs", "path": "schema.md", "original_file_path": "models/schema.md", "package_name": "ds_dbt", "file_contents": "\n{% docs click_id %}\nThis is a unique identifier for each click\n{% enddocs %}\n\n{% docs click_time %}\nTimestamp when user clicked.\n{% enddocs %}\n\n{% docs shortened %}\nShortened URL\n{% enddocs %}\n\n{% docs target_url %}\nURL where the user will be directed\n{% enddocs %}\n\n{% docs broadcast_id %}\nID of the broadcast that generated the shortened URL\n{% enddocs %}\n\n{% docs source %}\nSource of the URL (e.g. SMS, web), origin of the post (e.g. phoenix-web, phoenix-ashes, sms), or source where user was acquired. (e.g. sms, phoenix-next)\n{% enddocs %}\n\n{% docs interaction_type %}\nHow the user interacted with the link (e.g. preview, click)\n{% enddocs %}\n\n{% docs id %}\nUnique identifier for the post\n{% enddocs %}\n\n{% docs type %}\nType of post (e.g. photo)\n{% enddocs %}\n\n{% docs action %}\nPost action (e.g. DefendDreamers_Nov9_CongressCalls, GunViolence2018_Feb15_ParklandResponse)\n{% enddocs %}\n\n{% docs status %}\nPost status (e.g. accepted, rejected)\n{% enddocs %}\n\n{% docs quantity %}\nNumerical quantity of items specified in the call to action (e.g. 10, 200)\n{% enddocs %}\n\n{% docs source_bucket %}\nGrouping bucket for origin of the post (e.g. web, sms) \n{% enddocs %}\n\n{% docs created_at %}\nWhen the item was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs updated_at %}\nWhen the item was updated in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs text %}\nText of the post (e.g. \"Zoo animals and a super hero trying to help too!\") \n{% enddocs %}\n\n{% docs signup_id %}\nUnique identifier for the signup \n{% enddocs %}\n\n{% docs post_class %}\nClass of the signup (e.g. \"photo - default\", \"phone-call - DefendDreamers_Jan16_BothBodies\")\n{% enddocs %}\n\n{% docs is_accepted %}\nWhether the post has been accepted to be displayed to the public on the website\n{% enddocs %}\n\n{% docs action_id %}\nInternal identifier of the action \n{% enddocs %}\n\n{% docs location %}\nLocation where the action takes place (e.g. US-NY)\n{% enddocs %}\n\n{% docs postal_code %}\nPostal code where the action takes place\n{% enddocs %}\n\n{% docs is_reportback %}\nWhether the post is a reportback. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs civic_action %}\nWhether the post is a Civic Action. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs scholarship_entry %}\nWhether the post is a Scholarship Entry. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs why_participated %}\nWhy the user participated in this action. Entered by the user.\n{% enddocs %}\n\n{% docs details %}\nDetails about the post. Contains contentfulId and other information (e.g. {\"campaignContentfulId\":\"6ATBgGEQEeJoIcxs1qbwaC\"})\n{% enddocs %}\n\n{% docs email %}\nEmail address of the user.\n{% enddocs %}\n\n{% docs source_details %}\nDetails about the source of the item. This is sometimes represented as a JSON object, and for other tables like Turbovote its represented as a string. (e.g. \"{\"contentful_id\":\"3CTLlXfbwtz1FOMpl31SKV\",\"utm_source\":\"scholarship_listing\",\"utm_medium\":\"referral\",\"utm_campaign\":\"fastweb_2019_08\"}\", newsletter_456)\n{% enddocs %}\n\n{% docs campaign_id %}\nThis is a unique identifier for the campaign\n{% enddocs %}\n\n{% docs campaign_run_id %}\nUnique identifier for the campaign run\n{% enddocs %}\n\n{% docs campaign_name %}\nName of the campaign\n{% enddocs %}\n\n{% docs campaign_cause %}\nCampaign cause (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_run_start_date %}\nStart date of the campaign run\n{% enddocs %}\n\n{% docs campaign_run_end_date %}\nEnd date of the campaign run\n{% enddocs %}\n\n{% docs campaign_created_date %}\nWhen the campaign was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs campaign_node_id %}\nInternal unique node id for the campaign\n{% enddocs %}\n\n{% docs campaign_node_id_title %}\nCampaign title\n{% enddocs %}\n\n{% docs campaign_run_id_title %}\nTitle of the campaign run\n{% enddocs %}\n\n{% docs campaign_action_type %}\nCampaign action type (eg. Make Something, Share Something)\n{% enddocs %}\n\n{% docs campaign_cause_type %}\nCampaign cause type (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_noun %}\nNoun applicable to the user's action\n{% enddocs %}\n\n{% docs campaign_verb %}\nVerb describing the action the user should take\n{% enddocs %}\n\n{% docs campaign_cta %}\nCampaign's call to action\n{% enddocs %}\n\n{% docs campaign_language %}\n\"Language in which the campaign is available\"\n{% enddocs %}\n\n{% docs agent_id %}\nIf set, the content type of the picture the member is sending us. Exp. image/png.\n{% enddocs %}\n\n{% docs attachment_content_type %}\nIf set, the handle of the Front agent this outbound support message is from.\n{% enddocs %}\n\n{% docs topic %}\nHolds a reference to the **last** campaign topic the member's conversation was in. This is useful to allow members to talk to Gambit and get quick responses (through Rivescript), without Gambit completely forgetting what state the member's interaction with a campaign topic was in.\n{% enddocs %}\n\n{% docs action_serial_id %}\nSerial id for the user's action. Depends on the source of the action. May be the bertly click id, sms message id, etc.\n{% enddocs %}\n\n{% docs channel %}\nChannel for the user's action. Depends on the source of the action. (e.g. web, sms)\n{% enddocs %}\n\n{% docs first_action_month %}\nMonth during which the user took their first action. \n{% enddocs %}\n\n{% docs event_id %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs event_source %}\nApplication source for event (eg. Phoenix, Northstar)\n{% enddocs %}\n\n{% docs event_datetime %}\nWhen the event occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs event_name %}\nName of the event (eg. northstar_submitted_register, https://docs.google.com/spreadsheets/d/1lm-fGrIm85nUTxSojqyCt_Ehmm1zEbViFhKpxcJiz1A/edit#gid=406441516)\n{% enddocs %}\n\n{% docs event_type %}\nType of event (pv = 'Page View', se = 'Structured Event')\n{% enddocs %}\n\n{% docs host %}\nURL host where event occurred (eg. www.dosomething.org or identity.dosomething.org)\n{% enddocs %}\n\n{% docs path %}\nURL path event occurred at (eg. /login or /us/campaigns/huddle-for-heroes)\n{% enddocs %}\n\n{% docs query_parameters %}\nOptional query parameters for the request (eg. query=huddle)\n{% enddocs %}\n\n{% docs se_category %}\nCategory of event (eg. focused_field, authentication) - Custom structured event\n{% enddocs %}\n\n{% docs se_action %}\nAction performed / event name (eg. form_submitted, action_failed) - Custom structured event\n{% enddocs %}\n\n{% docs se_label %}\nThe object of the action (eg. first_name, register, voter_reg_status) - Custom structured event\n{% enddocs %}\n\n{% docs session_id %}\nUnique identifier of the user's session\n{% enddocs %}\n\n{% docs session_counter %}\nHow many sessions a user has started\n{% enddocs %}\n\n{% docs browser_size %}\nWhich type of browser a user is using (eg. Mobile, Desktop)\n{% enddocs %}\n\n{% docs northstar_id %}\nThe Northstar ID of the user who generated the event\n{% enddocs %}\n\n{% docs device_id %}\nID of the device used\n{% enddocs %}\n\n{% docs referrer_host %}\nURL host of the referring site (eg. google.com)\n{% enddocs %}\n\n{% docs referrer_path %}\nURL path from referring site (eg. /10-stats-on-teen-drug-and-alcohol-use/)\n{% enddocs %}\n\n{% docs referrer_source %}\nReferrer source name (eg. Google, Facebook)\n{% enddocs %}\n\n{% docs utm_source %}\nTracks where the traffic is coming from. (eg. scholarship_listing, Facebook)\n{% enddocs %}\n\n{% docs utm_medium %}\nHow the traffic got to the platform (eg. referral, CPC)\n{% enddocs %}\n\n{% docs utm_campaign %}\nTracks which campaign the traffic was generated by. Shows up in Google Analytics as Campaign Name (eg. editorial_newsletter)\n{% enddocs %}\n\n{% docs url %}\nURL of campaign (eg. https://dosome.click/nyn5m7)\n{% enddocs %}\n\n{% docs modal_type %}\nNULL or SURVEY_MODAL\n{% enddocs %}\n\n{% docs landing_datetime %}\nWhen the session started in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs ending_datetime %}\nWhen the session ended in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs session_duration_seconds %}\nSession duration in seconds\n{% enddocs %}\n\n{% docs num_pages_views %}\nNumber of pages viewed in session\n{% enddocs %}\n\n{% docs landing_page %}\nFirst page the user viewed in the session (eg. /us/facts/11-facts-about-bp-oil-spill)\n{% enddocs %}\n\n{% docs exit_page %}\n\"Which page the user ended or exited their session from (eg. /us/campaigns/green-your-getaway)\"\n{% enddocs %}\n\n{% docs days_since_last_session %}\n\"Days since their last session.\"\n{% enddocs %}\n\n{% docs post_type %}\nType of post, (e.g. photo, voter-reg)\n{% enddocs %}\n\n{% docs noun %}\nNoun that corresponds to the item in the call to action that was delivered. (e.g. drawings, tweets)\n{% enddocs %}\n\n{% docs verb %}\nVerb corresponding to the action the user took. (e.g. shared, sent, taken)\n{% enddocs %}\n\n{% docs deleted_at %}\nDate time in UTC when a user deleted their post.\n{% enddocs %}\n\n{% docs _fivetran_deleted %}\nMarks rows that were deleted in the source table\n{% enddocs %}\n\n{% docs _fivetran_synced %}\n(UTC timestamp) keeps track of when each row was last successfully synced\n{% enddocs %}\n\n{% docs reportback %}\nWhether the post is a reportback \n{% enddocs %}\n\n{% docs active %}\nWhether the user is active \n{% enddocs %}\n\n{% docs anonymous %}\nWhether the user is anonymous when making the post \n{% enddocs %}\n\n{% docs callpower_campaign_id %}\nUnique ID corresponding to the Callpower campaign. Callpower allows users to record messages for their representatives.\n{% enddocs %}\n\n{% docs quiz %}\nWhether the post is a quiz \n{% enddocs %}\n\n{% docs action_type %}\nType of action the user took. (e.g. share-something, donate-something)\n{% enddocs %}\n\n{% docs online %}\nWhether the action is a online as opposed to IRL.\n{% enddocs %}\n\n{% docs time_commitment %}\nEstimated time required to do the action (e.g. 3.0+, <0.5)\n{% enddocs %}\n\n{% docs num_signups %}\nQuantity of campaign signups\n{% enddocs %}\n\n{% docs most_recent_signup %}\nTimestamp of the most recent signup in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs num_rbs %}\nQuantity of reportbacks for the user\n{% enddocs %}\n\n{% docs total_quantity %}\nTotal quantity of items in reportbacks\n{% enddocs %}\n\n{% docs most_recent_rb %}\nWhen the most recent reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs first_rb %}\nWhen the first reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs avg_time_betw_rbs %}\nCalculated average time between reportbacks.\n{% enddocs %}\n\n{% docs avg_days_next_action_after_rb %}\nCalculated average days until next action after reportback\n{% enddocs %}\n\n{% docs days_to_next_action_after_last_rb %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs most_recent_mam_action %}\nMost recent monthly active member qualifying action in UTC (eg. 2018-01-01 12:00:00).\n{% enddocs %}\n\n{% docs most_recent_email_open %}\nMost recent email open in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs most_recent_all_actions %}\nMost recent timestamp of any action in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs last_action_is_rb %}\nWhether the last action the user took was a reportback\n{% enddocs %}\n\n{% docs days_since_last_action %}\nDays since the user's last action\n{% enddocs %}\n\n{% docs time_to_first_rb %}\nHow much time after registering until the user's first reportback\n{% enddocs %}\n\n{% docs sms_unsubscribed_at %}\nTimestamp of when user unsubscribed from SMS messaging\n{% enddocs %}\n\n{% docs user_unsubscribed_at %}\nTimestamp of when user unsubscribed from email or sms\n{% enddocs %}\n\n{% docs voter_reg_acquisition %}\nWhether the user was an acquisition through voter registration efforts. \n{% enddocs %}\n\n{% docs last_logged_in %}\nDate time in UTC when user last logged in to Northstar\n{% enddocs %}\n\n{% docs last_accessed %}\nDate time in UTC when user last access the website\n{% enddocs %}\n\n{% docs last_messaged_at %}\nDate time in UTC when user was last sent a message via SMS or email\n{% enddocs %}\n\n{% docs facebook_id %}\nUser's facebook id\n{% enddocs %}\n\n{% docs mobile %}\nUsers's mobile phone number\n{% enddocs %}\n\n{% docs birthdate %}\nUser's birthdate\n{% enddocs %}\n\n{% docs first_name %}\nUser's first name\n{% enddocs %}\n\n{% docs last_name %}\nUser's last name\n{% enddocs %}\n\n{% docs voter_registration_status %}\nUser's registration status. (e.g. registration_complete, confirmed, uncertain) \n{% enddocs %}\n\n{% docs finish_with_state %}\nIf the registrant was eligible to use and passed through to complete their registration with their state\u2019s OVR system, it will be indicated in this field (direct quote from Rock-The-Vote documentation). Yes/No value in field.\n{% enddocs %}\n\n{% docs reportback_volume %}\nThis field returns 1 if non voter-reg action, since campaigns team only counts those a 1 reportback. If voter-reg action, we want to count quantity of post as number of registered voters.\n{% enddocs %}\n\n{% docs address_street_1 %}\nFirst line of user's street address\n{% enddocs %}\n\n{% docs address_street_2 %}\nSecond line of user's street address\n{% enddocs %}\n\n{% docs city %}\nUser's city\n{% enddocs %}\n\n{% docs state %}\nUser's state\n{% enddocs %}\n\n{% docs country %}\nUser's country\n{% enddocs %}\n\n{% docs language %}\nUser's language\n{% enddocs %}\n\n{% docs cio_status %}\nStatus of user from CIO. (e.g. customer_subscribed, customer_unsubscribed)\n{% enddocs %}\n\n{% docs cio_status_timestamp %}\nTimestamp when users's status was updated.\n{% enddocs %}\n\n{% docs sms_status %}\nCurrent SMS status. (e.g. undeliverable, unknown)\n{% enddocs %}\n\n{% docs source_detail %}\nDetails of the origin of the user. (e.g. tell_a_friend, other, opt_in_path/197981)\n{% enddocs %}\n\n{% docs badges %}\nWhether the user has any badges. \n{% enddocs %}\n\n{% docs refer_friends %}\nWhether the user is a part of the refer a friend campaign. \n{% enddocs %}\n\n{% docs subscribed_member %}\nWhether the user is subscribed. \n{% enddocs %}\n\n{% docs last_updated_at %}\nTimestamp when users's was updated.\n{% enddocs %}\n\n{% docs school_id %}\nUnique identifier for the user's school. This info comes from the school finder.\n{% enddocs %}\n\n{% docs newsletter_topic %}\nNewsletter topic. (e.g. community, lifestyle)\n{% enddocs %}\n\n{% docs user_agent %}\nFull user agent string for a user's browser (e.g. \"Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:24.0) Gecko/20100101 Firefox/24.0\")\n{% enddocs %}\n\n{% docs drupal_id %}\nOld Drupal user ID\n{% enddocs %}\n\n{% docs campaigns %}\nCampaigns a user is signed up for.\n{% enddocs %}\n\n{% docs audit %}\nA very useful field with data containing information about changes to a user, e.g. timestamps when the user subscribed and unsubscribed.\n{% enddocs %}\n\n{% docs voting_plan_status %}\nThe indication of the user's plan to vote, e.g. voting, not_voting, cant_vote\n{% enddocs %}\n\n{% docs voting_plan_time_of_day %}\nThe time of day when the user plans to vote, e.g morning, afternoon, evening\n{% enddocs %}\n\n{% docs voting_plan_method_of_transport %}\nHow the user plans to get to their polling place. e.g. walk, drive\n{% enddocs %}\n\n{% docs voting_plan_attending_with %}\nWith Whom the user plans to go voting, e.g. family, friends, alone\n{% enddocs %}\n\n{% docs feature_flags %}\nJSON containing info on features like badges and refer-a-friend.\n{% enddocs %}\n\n{% docs dbt_updated_at %}\nDBT snapshot table data. The updated_at timestamp of the source record when this snapshot row was inserted.\n{% enddocs %}\n\n{% docs dbt_scd_id %}\nDBT snapshot table data. A unique key generated for each snapshotted record.\n{% enddocs %}\n\n{% docs dbt_valid_from %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this snapshot row was first inserted\n{% enddocs %}\n\n{% docs dbt_valid_to %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this row row became invalidated.\n{% enddocs %}\n\n{% docs google_id %}\nUser's Google ID obtained from login.\n{% enddocs %}\n\n{% docs causes %}\nCauses in which a user is interested. e.g. animal welfare, education, mental_health\n{% enddocs %}\n\n{% docs email_subscription_status %}\nEmail subscription status of the user\n{% enddocs %}\n\n{% docs role %}\nUser's role, e.g. user, staff\n{% enddocs %}\n\n{% docs cio_backfilled %}\nWhether this user's data was backfilled from CIO\n{% enddocs %}\n\n{% docs addr_source %}\nWhere the user submitted their address, e.g. sms, GDPR\n{% enddocs %}\n\n{% docs email_subscription_topics %}\nEmail subscription topics correspond to categories in CIO in which the user is interested. e.g. lifestyle, community, scholarship\n{% enddocs %}\n\n{% docs sms_paused %}\nWhether we've paused sending sms messages to the user.\n{% enddocs %}\n\n\n\n\n", "name": "country", "unique_id": "ds_dbt.country", "block_contents": "User's country"}, "ds_dbt.language": {"root_path": "/Users/mrich/projects/quasar/quasar/dbt", "resource_type": "docs", "path": "schema.md", "original_file_path": "models/schema.md", "package_name": "ds_dbt", "file_contents": "\n{% docs click_id %}\nThis is a unique identifier for each click\n{% enddocs %}\n\n{% docs click_time %}\nTimestamp when user clicked.\n{% enddocs %}\n\n{% docs shortened %}\nShortened URL\n{% enddocs %}\n\n{% docs target_url %}\nURL where the user will be directed\n{% enddocs %}\n\n{% docs broadcast_id %}\nID of the broadcast that generated the shortened URL\n{% enddocs %}\n\n{% docs source %}\nSource of the URL (e.g. SMS, web), origin of the post (e.g. phoenix-web, phoenix-ashes, sms), or source where user was acquired. (e.g. sms, phoenix-next)\n{% enddocs %}\n\n{% docs interaction_type %}\nHow the user interacted with the link (e.g. preview, click)\n{% enddocs %}\n\n{% docs id %}\nUnique identifier for the post\n{% enddocs %}\n\n{% docs type %}\nType of post (e.g. photo)\n{% enddocs %}\n\n{% docs action %}\nPost action (e.g. DefendDreamers_Nov9_CongressCalls, GunViolence2018_Feb15_ParklandResponse)\n{% enddocs %}\n\n{% docs status %}\nPost status (e.g. accepted, rejected)\n{% enddocs %}\n\n{% docs quantity %}\nNumerical quantity of items specified in the call to action (e.g. 10, 200)\n{% enddocs %}\n\n{% docs source_bucket %}\nGrouping bucket for origin of the post (e.g. web, sms) \n{% enddocs %}\n\n{% docs created_at %}\nWhen the item was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs updated_at %}\nWhen the item was updated in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs text %}\nText of the post (e.g. \"Zoo animals and a super hero trying to help too!\") \n{% enddocs %}\n\n{% docs signup_id %}\nUnique identifier for the signup \n{% enddocs %}\n\n{% docs post_class %}\nClass of the signup (e.g. \"photo - default\", \"phone-call - DefendDreamers_Jan16_BothBodies\")\n{% enddocs %}\n\n{% docs is_accepted %}\nWhether the post has been accepted to be displayed to the public on the website\n{% enddocs %}\n\n{% docs action_id %}\nInternal identifier of the action \n{% enddocs %}\n\n{% docs location %}\nLocation where the action takes place (e.g. US-NY)\n{% enddocs %}\n\n{% docs postal_code %}\nPostal code where the action takes place\n{% enddocs %}\n\n{% docs is_reportback %}\nWhether the post is a reportback. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs civic_action %}\nWhether the post is a Civic Action. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs scholarship_entry %}\nWhether the post is a Scholarship Entry. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs why_participated %}\nWhy the user participated in this action. Entered by the user.\n{% enddocs %}\n\n{% docs details %}\nDetails about the post. Contains contentfulId and other information (e.g. {\"campaignContentfulId\":\"6ATBgGEQEeJoIcxs1qbwaC\"})\n{% enddocs %}\n\n{% docs email %}\nEmail address of the user.\n{% enddocs %}\n\n{% docs source_details %}\nDetails about the source of the item. This is sometimes represented as a JSON object, and for other tables like Turbovote its represented as a string. (e.g. \"{\"contentful_id\":\"3CTLlXfbwtz1FOMpl31SKV\",\"utm_source\":\"scholarship_listing\",\"utm_medium\":\"referral\",\"utm_campaign\":\"fastweb_2019_08\"}\", newsletter_456)\n{% enddocs %}\n\n{% docs campaign_id %}\nThis is a unique identifier for the campaign\n{% enddocs %}\n\n{% docs campaign_run_id %}\nUnique identifier for the campaign run\n{% enddocs %}\n\n{% docs campaign_name %}\nName of the campaign\n{% enddocs %}\n\n{% docs campaign_cause %}\nCampaign cause (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_run_start_date %}\nStart date of the campaign run\n{% enddocs %}\n\n{% docs campaign_run_end_date %}\nEnd date of the campaign run\n{% enddocs %}\n\n{% docs campaign_created_date %}\nWhen the campaign was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs campaign_node_id %}\nInternal unique node id for the campaign\n{% enddocs %}\n\n{% docs campaign_node_id_title %}\nCampaign title\n{% enddocs %}\n\n{% docs campaign_run_id_title %}\nTitle of the campaign run\n{% enddocs %}\n\n{% docs campaign_action_type %}\nCampaign action type (eg. Make Something, Share Something)\n{% enddocs %}\n\n{% docs campaign_cause_type %}\nCampaign cause type (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_noun %}\nNoun applicable to the user's action\n{% enddocs %}\n\n{% docs campaign_verb %}\nVerb describing the action the user should take\n{% enddocs %}\n\n{% docs campaign_cta %}\nCampaign's call to action\n{% enddocs %}\n\n{% docs campaign_language %}\n\"Language in which the campaign is available\"\n{% enddocs %}\n\n{% docs agent_id %}\nIf set, the content type of the picture the member is sending us. Exp. image/png.\n{% enddocs %}\n\n{% docs attachment_content_type %}\nIf set, the handle of the Front agent this outbound support message is from.\n{% enddocs %}\n\n{% docs topic %}\nHolds a reference to the **last** campaign topic the member's conversation was in. This is useful to allow members to talk to Gambit and get quick responses (through Rivescript), without Gambit completely forgetting what state the member's interaction with a campaign topic was in.\n{% enddocs %}\n\n{% docs action_serial_id %}\nSerial id for the user's action. Depends on the source of the action. May be the bertly click id, sms message id, etc.\n{% enddocs %}\n\n{% docs channel %}\nChannel for the user's action. Depends on the source of the action. (e.g. web, sms)\n{% enddocs %}\n\n{% docs first_action_month %}\nMonth during which the user took their first action. \n{% enddocs %}\n\n{% docs event_id %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs event_source %}\nApplication source for event (eg. Phoenix, Northstar)\n{% enddocs %}\n\n{% docs event_datetime %}\nWhen the event occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs event_name %}\nName of the event (eg. northstar_submitted_register, https://docs.google.com/spreadsheets/d/1lm-fGrIm85nUTxSojqyCt_Ehmm1zEbViFhKpxcJiz1A/edit#gid=406441516)\n{% enddocs %}\n\n{% docs event_type %}\nType of event (pv = 'Page View', se = 'Structured Event')\n{% enddocs %}\n\n{% docs host %}\nURL host where event occurred (eg. www.dosomething.org or identity.dosomething.org)\n{% enddocs %}\n\n{% docs path %}\nURL path event occurred at (eg. /login or /us/campaigns/huddle-for-heroes)\n{% enddocs %}\n\n{% docs query_parameters %}\nOptional query parameters for the request (eg. query=huddle)\n{% enddocs %}\n\n{% docs se_category %}\nCategory of event (eg. focused_field, authentication) - Custom structured event\n{% enddocs %}\n\n{% docs se_action %}\nAction performed / event name (eg. form_submitted, action_failed) - Custom structured event\n{% enddocs %}\n\n{% docs se_label %}\nThe object of the action (eg. first_name, register, voter_reg_status) - Custom structured event\n{% enddocs %}\n\n{% docs session_id %}\nUnique identifier of the user's session\n{% enddocs %}\n\n{% docs session_counter %}\nHow many sessions a user has started\n{% enddocs %}\n\n{% docs browser_size %}\nWhich type of browser a user is using (eg. Mobile, Desktop)\n{% enddocs %}\n\n{% docs northstar_id %}\nThe Northstar ID of the user who generated the event\n{% enddocs %}\n\n{% docs device_id %}\nID of the device used\n{% enddocs %}\n\n{% docs referrer_host %}\nURL host of the referring site (eg. google.com)\n{% enddocs %}\n\n{% docs referrer_path %}\nURL path from referring site (eg. /10-stats-on-teen-drug-and-alcohol-use/)\n{% enddocs %}\n\n{% docs referrer_source %}\nReferrer source name (eg. Google, Facebook)\n{% enddocs %}\n\n{% docs utm_source %}\nTracks where the traffic is coming from. (eg. scholarship_listing, Facebook)\n{% enddocs %}\n\n{% docs utm_medium %}\nHow the traffic got to the platform (eg. referral, CPC)\n{% enddocs %}\n\n{% docs utm_campaign %}\nTracks which campaign the traffic was generated by. Shows up in Google Analytics as Campaign Name (eg. editorial_newsletter)\n{% enddocs %}\n\n{% docs url %}\nURL of campaign (eg. https://dosome.click/nyn5m7)\n{% enddocs %}\n\n{% docs modal_type %}\nNULL or SURVEY_MODAL\n{% enddocs %}\n\n{% docs landing_datetime %}\nWhen the session started in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs ending_datetime %}\nWhen the session ended in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs session_duration_seconds %}\nSession duration in seconds\n{% enddocs %}\n\n{% docs num_pages_views %}\nNumber of pages viewed in session\n{% enddocs %}\n\n{% docs landing_page %}\nFirst page the user viewed in the session (eg. /us/facts/11-facts-about-bp-oil-spill)\n{% enddocs %}\n\n{% docs exit_page %}\n\"Which page the user ended or exited their session from (eg. /us/campaigns/green-your-getaway)\"\n{% enddocs %}\n\n{% docs days_since_last_session %}\n\"Days since their last session.\"\n{% enddocs %}\n\n{% docs post_type %}\nType of post, (e.g. photo, voter-reg)\n{% enddocs %}\n\n{% docs noun %}\nNoun that corresponds to the item in the call to action that was delivered. (e.g. drawings, tweets)\n{% enddocs %}\n\n{% docs verb %}\nVerb corresponding to the action the user took. (e.g. shared, sent, taken)\n{% enddocs %}\n\n{% docs deleted_at %}\nDate time in UTC when a user deleted their post.\n{% enddocs %}\n\n{% docs _fivetran_deleted %}\nMarks rows that were deleted in the source table\n{% enddocs %}\n\n{% docs _fivetran_synced %}\n(UTC timestamp) keeps track of when each row was last successfully synced\n{% enddocs %}\n\n{% docs reportback %}\nWhether the post is a reportback \n{% enddocs %}\n\n{% docs active %}\nWhether the user is active \n{% enddocs %}\n\n{% docs anonymous %}\nWhether the user is anonymous when making the post \n{% enddocs %}\n\n{% docs callpower_campaign_id %}\nUnique ID corresponding to the Callpower campaign. Callpower allows users to record messages for their representatives.\n{% enddocs %}\n\n{% docs quiz %}\nWhether the post is a quiz \n{% enddocs %}\n\n{% docs action_type %}\nType of action the user took. (e.g. share-something, donate-something)\n{% enddocs %}\n\n{% docs online %}\nWhether the action is a online as opposed to IRL.\n{% enddocs %}\n\n{% docs time_commitment %}\nEstimated time required to do the action (e.g. 3.0+, <0.5)\n{% enddocs %}\n\n{% docs num_signups %}\nQuantity of campaign signups\n{% enddocs %}\n\n{% docs most_recent_signup %}\nTimestamp of the most recent signup in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs num_rbs %}\nQuantity of reportbacks for the user\n{% enddocs %}\n\n{% docs total_quantity %}\nTotal quantity of items in reportbacks\n{% enddocs %}\n\n{% docs most_recent_rb %}\nWhen the most recent reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs first_rb %}\nWhen the first reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs avg_time_betw_rbs %}\nCalculated average time between reportbacks.\n{% enddocs %}\n\n{% docs avg_days_next_action_after_rb %}\nCalculated average days until next action after reportback\n{% enddocs %}\n\n{% docs days_to_next_action_after_last_rb %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs most_recent_mam_action %}\nMost recent monthly active member qualifying action in UTC (eg. 2018-01-01 12:00:00).\n{% enddocs %}\n\n{% docs most_recent_email_open %}\nMost recent email open in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs most_recent_all_actions %}\nMost recent timestamp of any action in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs last_action_is_rb %}\nWhether the last action the user took was a reportback\n{% enddocs %}\n\n{% docs days_since_last_action %}\nDays since the user's last action\n{% enddocs %}\n\n{% docs time_to_first_rb %}\nHow much time after registering until the user's first reportback\n{% enddocs %}\n\n{% docs sms_unsubscribed_at %}\nTimestamp of when user unsubscribed from SMS messaging\n{% enddocs %}\n\n{% docs user_unsubscribed_at %}\nTimestamp of when user unsubscribed from email or sms\n{% enddocs %}\n\n{% docs voter_reg_acquisition %}\nWhether the user was an acquisition through voter registration efforts. \n{% enddocs %}\n\n{% docs last_logged_in %}\nDate time in UTC when user last logged in to Northstar\n{% enddocs %}\n\n{% docs last_accessed %}\nDate time in UTC when user last access the website\n{% enddocs %}\n\n{% docs last_messaged_at %}\nDate time in UTC when user was last sent a message via SMS or email\n{% enddocs %}\n\n{% docs facebook_id %}\nUser's facebook id\n{% enddocs %}\n\n{% docs mobile %}\nUsers's mobile phone number\n{% enddocs %}\n\n{% docs birthdate %}\nUser's birthdate\n{% enddocs %}\n\n{% docs first_name %}\nUser's first name\n{% enddocs %}\n\n{% docs last_name %}\nUser's last name\n{% enddocs %}\n\n{% docs voter_registration_status %}\nUser's registration status. (e.g. registration_complete, confirmed, uncertain) \n{% enddocs %}\n\n{% docs finish_with_state %}\nIf the registrant was eligible to use and passed through to complete their registration with their state\u2019s OVR system, it will be indicated in this field (direct quote from Rock-The-Vote documentation). Yes/No value in field.\n{% enddocs %}\n\n{% docs reportback_volume %}\nThis field returns 1 if non voter-reg action, since campaigns team only counts those a 1 reportback. If voter-reg action, we want to count quantity of post as number of registered voters.\n{% enddocs %}\n\n{% docs address_street_1 %}\nFirst line of user's street address\n{% enddocs %}\n\n{% docs address_street_2 %}\nSecond line of user's street address\n{% enddocs %}\n\n{% docs city %}\nUser's city\n{% enddocs %}\n\n{% docs state %}\nUser's state\n{% enddocs %}\n\n{% docs country %}\nUser's country\n{% enddocs %}\n\n{% docs language %}\nUser's language\n{% enddocs %}\n\n{% docs cio_status %}\nStatus of user from CIO. (e.g. customer_subscribed, customer_unsubscribed)\n{% enddocs %}\n\n{% docs cio_status_timestamp %}\nTimestamp when users's status was updated.\n{% enddocs %}\n\n{% docs sms_status %}\nCurrent SMS status. (e.g. undeliverable, unknown)\n{% enddocs %}\n\n{% docs source_detail %}\nDetails of the origin of the user. (e.g. tell_a_friend, other, opt_in_path/197981)\n{% enddocs %}\n\n{% docs badges %}\nWhether the user has any badges. \n{% enddocs %}\n\n{% docs refer_friends %}\nWhether the user is a part of the refer a friend campaign. \n{% enddocs %}\n\n{% docs subscribed_member %}\nWhether the user is subscribed. \n{% enddocs %}\n\n{% docs last_updated_at %}\nTimestamp when users's was updated.\n{% enddocs %}\n\n{% docs school_id %}\nUnique identifier for the user's school. This info comes from the school finder.\n{% enddocs %}\n\n{% docs newsletter_topic %}\nNewsletter topic. (e.g. community, lifestyle)\n{% enddocs %}\n\n{% docs user_agent %}\nFull user agent string for a user's browser (e.g. \"Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:24.0) Gecko/20100101 Firefox/24.0\")\n{% enddocs %}\n\n{% docs drupal_id %}\nOld Drupal user ID\n{% enddocs %}\n\n{% docs campaigns %}\nCampaigns a user is signed up for.\n{% enddocs %}\n\n{% docs audit %}\nA very useful field with data containing information about changes to a user, e.g. timestamps when the user subscribed and unsubscribed.\n{% enddocs %}\n\n{% docs voting_plan_status %}\nThe indication of the user's plan to vote, e.g. voting, not_voting, cant_vote\n{% enddocs %}\n\n{% docs voting_plan_time_of_day %}\nThe time of day when the user plans to vote, e.g morning, afternoon, evening\n{% enddocs %}\n\n{% docs voting_plan_method_of_transport %}\nHow the user plans to get to their polling place. e.g. walk, drive\n{% enddocs %}\n\n{% docs voting_plan_attending_with %}\nWith Whom the user plans to go voting, e.g. family, friends, alone\n{% enddocs %}\n\n{% docs feature_flags %}\nJSON containing info on features like badges and refer-a-friend.\n{% enddocs %}\n\n{% docs dbt_updated_at %}\nDBT snapshot table data. The updated_at timestamp of the source record when this snapshot row was inserted.\n{% enddocs %}\n\n{% docs dbt_scd_id %}\nDBT snapshot table data. A unique key generated for each snapshotted record.\n{% enddocs %}\n\n{% docs dbt_valid_from %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this snapshot row was first inserted\n{% enddocs %}\n\n{% docs dbt_valid_to %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this row row became invalidated.\n{% enddocs %}\n\n{% docs google_id %}\nUser's Google ID obtained from login.\n{% enddocs %}\n\n{% docs causes %}\nCauses in which a user is interested. e.g. animal welfare, education, mental_health\n{% enddocs %}\n\n{% docs email_subscription_status %}\nEmail subscription status of the user\n{% enddocs %}\n\n{% docs role %}\nUser's role, e.g. user, staff\n{% enddocs %}\n\n{% docs cio_backfilled %}\nWhether this user's data was backfilled from CIO\n{% enddocs %}\n\n{% docs addr_source %}\nWhere the user submitted their address, e.g. sms, GDPR\n{% enddocs %}\n\n{% docs email_subscription_topics %}\nEmail subscription topics correspond to categories in CIO in which the user is interested. e.g. lifestyle, community, scholarship\n{% enddocs %}\n\n{% docs sms_paused %}\nWhether we've paused sending sms messages to the user.\n{% enddocs %}\n\n\n\n\n", "name": "language", "unique_id": "ds_dbt.language", "block_contents": "User's language"}, "ds_dbt.cio_status": {"root_path": "/Users/mrich/projects/quasar/quasar/dbt", "resource_type": "docs", "path": "schema.md", "original_file_path": "models/schema.md", "package_name": "ds_dbt", "file_contents": "\n{% docs click_id %}\nThis is a unique identifier for each click\n{% enddocs %}\n\n{% docs click_time %}\nTimestamp when user clicked.\n{% enddocs %}\n\n{% docs shortened %}\nShortened URL\n{% enddocs %}\n\n{% docs target_url %}\nURL where the user will be directed\n{% enddocs %}\n\n{% docs broadcast_id %}\nID of the broadcast that generated the shortened URL\n{% enddocs %}\n\n{% docs source %}\nSource of the URL (e.g. SMS, web), origin of the post (e.g. phoenix-web, phoenix-ashes, sms), or source where user was acquired. (e.g. sms, phoenix-next)\n{% enddocs %}\n\n{% docs interaction_type %}\nHow the user interacted with the link (e.g. preview, click)\n{% enddocs %}\n\n{% docs id %}\nUnique identifier for the post\n{% enddocs %}\n\n{% docs type %}\nType of post (e.g. photo)\n{% enddocs %}\n\n{% docs action %}\nPost action (e.g. DefendDreamers_Nov9_CongressCalls, GunViolence2018_Feb15_ParklandResponse)\n{% enddocs %}\n\n{% docs status %}\nPost status (e.g. accepted, rejected)\n{% enddocs %}\n\n{% docs quantity %}\nNumerical quantity of items specified in the call to action (e.g. 10, 200)\n{% enddocs %}\n\n{% docs source_bucket %}\nGrouping bucket for origin of the post (e.g. web, sms) \n{% enddocs %}\n\n{% docs created_at %}\nWhen the item was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs updated_at %}\nWhen the item was updated in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs text %}\nText of the post (e.g. \"Zoo animals and a super hero trying to help too!\") \n{% enddocs %}\n\n{% docs signup_id %}\nUnique identifier for the signup \n{% enddocs %}\n\n{% docs post_class %}\nClass of the signup (e.g. \"photo - default\", \"phone-call - DefendDreamers_Jan16_BothBodies\")\n{% enddocs %}\n\n{% docs is_accepted %}\nWhether the post has been accepted to be displayed to the public on the website\n{% enddocs %}\n\n{% docs action_id %}\nInternal identifier of the action \n{% enddocs %}\n\n{% docs location %}\nLocation where the action takes place (e.g. US-NY)\n{% enddocs %}\n\n{% docs postal_code %}\nPostal code where the action takes place\n{% enddocs %}\n\n{% docs is_reportback %}\nWhether the post is a reportback. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs civic_action %}\nWhether the post is a Civic Action. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs scholarship_entry %}\nWhether the post is a Scholarship Entry. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs why_participated %}\nWhy the user participated in this action. Entered by the user.\n{% enddocs %}\n\n{% docs details %}\nDetails about the post. Contains contentfulId and other information (e.g. {\"campaignContentfulId\":\"6ATBgGEQEeJoIcxs1qbwaC\"})\n{% enddocs %}\n\n{% docs email %}\nEmail address of the user.\n{% enddocs %}\n\n{% docs source_details %}\nDetails about the source of the item. This is sometimes represented as a JSON object, and for other tables like Turbovote its represented as a string. (e.g. \"{\"contentful_id\":\"3CTLlXfbwtz1FOMpl31SKV\",\"utm_source\":\"scholarship_listing\",\"utm_medium\":\"referral\",\"utm_campaign\":\"fastweb_2019_08\"}\", newsletter_456)\n{% enddocs %}\n\n{% docs campaign_id %}\nThis is a unique identifier for the campaign\n{% enddocs %}\n\n{% docs campaign_run_id %}\nUnique identifier for the campaign run\n{% enddocs %}\n\n{% docs campaign_name %}\nName of the campaign\n{% enddocs %}\n\n{% docs campaign_cause %}\nCampaign cause (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_run_start_date %}\nStart date of the campaign run\n{% enddocs %}\n\n{% docs campaign_run_end_date %}\nEnd date of the campaign run\n{% enddocs %}\n\n{% docs campaign_created_date %}\nWhen the campaign was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs campaign_node_id %}\nInternal unique node id for the campaign\n{% enddocs %}\n\n{% docs campaign_node_id_title %}\nCampaign title\n{% enddocs %}\n\n{% docs campaign_run_id_title %}\nTitle of the campaign run\n{% enddocs %}\n\n{% docs campaign_action_type %}\nCampaign action type (eg. Make Something, Share Something)\n{% enddocs %}\n\n{% docs campaign_cause_type %}\nCampaign cause type (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_noun %}\nNoun applicable to the user's action\n{% enddocs %}\n\n{% docs campaign_verb %}\nVerb describing the action the user should take\n{% enddocs %}\n\n{% docs campaign_cta %}\nCampaign's call to action\n{% enddocs %}\n\n{% docs campaign_language %}\n\"Language in which the campaign is available\"\n{% enddocs %}\n\n{% docs agent_id %}\nIf set, the content type of the picture the member is sending us. Exp. image/png.\n{% enddocs %}\n\n{% docs attachment_content_type %}\nIf set, the handle of the Front agent this outbound support message is from.\n{% enddocs %}\n\n{% docs topic %}\nHolds a reference to the **last** campaign topic the member's conversation was in. This is useful to allow members to talk to Gambit and get quick responses (through Rivescript), without Gambit completely forgetting what state the member's interaction with a campaign topic was in.\n{% enddocs %}\n\n{% docs action_serial_id %}\nSerial id for the user's action. Depends on the source of the action. May be the bertly click id, sms message id, etc.\n{% enddocs %}\n\n{% docs channel %}\nChannel for the user's action. Depends on the source of the action. (e.g. web, sms)\n{% enddocs %}\n\n{% docs first_action_month %}\nMonth during which the user took their first action. \n{% enddocs %}\n\n{% docs event_id %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs event_source %}\nApplication source for event (eg. Phoenix, Northstar)\n{% enddocs %}\n\n{% docs event_datetime %}\nWhen the event occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs event_name %}\nName of the event (eg. northstar_submitted_register, https://docs.google.com/spreadsheets/d/1lm-fGrIm85nUTxSojqyCt_Ehmm1zEbViFhKpxcJiz1A/edit#gid=406441516)\n{% enddocs %}\n\n{% docs event_type %}\nType of event (pv = 'Page View', se = 'Structured Event')\n{% enddocs %}\n\n{% docs host %}\nURL host where event occurred (eg. www.dosomething.org or identity.dosomething.org)\n{% enddocs %}\n\n{% docs path %}\nURL path event occurred at (eg. /login or /us/campaigns/huddle-for-heroes)\n{% enddocs %}\n\n{% docs query_parameters %}\nOptional query parameters for the request (eg. query=huddle)\n{% enddocs %}\n\n{% docs se_category %}\nCategory of event (eg. focused_field, authentication) - Custom structured event\n{% enddocs %}\n\n{% docs se_action %}\nAction performed / event name (eg. form_submitted, action_failed) - Custom structured event\n{% enddocs %}\n\n{% docs se_label %}\nThe object of the action (eg. first_name, register, voter_reg_status) - Custom structured event\n{% enddocs %}\n\n{% docs session_id %}\nUnique identifier of the user's session\n{% enddocs %}\n\n{% docs session_counter %}\nHow many sessions a user has started\n{% enddocs %}\n\n{% docs browser_size %}\nWhich type of browser a user is using (eg. Mobile, Desktop)\n{% enddocs %}\n\n{% docs northstar_id %}\nThe Northstar ID of the user who generated the event\n{% enddocs %}\n\n{% docs device_id %}\nID of the device used\n{% enddocs %}\n\n{% docs referrer_host %}\nURL host of the referring site (eg. google.com)\n{% enddocs %}\n\n{% docs referrer_path %}\nURL path from referring site (eg. /10-stats-on-teen-drug-and-alcohol-use/)\n{% enddocs %}\n\n{% docs referrer_source %}\nReferrer source name (eg. Google, Facebook)\n{% enddocs %}\n\n{% docs utm_source %}\nTracks where the traffic is coming from. (eg. scholarship_listing, Facebook)\n{% enddocs %}\n\n{% docs utm_medium %}\nHow the traffic got to the platform (eg. referral, CPC)\n{% enddocs %}\n\n{% docs utm_campaign %}\nTracks which campaign the traffic was generated by. Shows up in Google Analytics as Campaign Name (eg. editorial_newsletter)\n{% enddocs %}\n\n{% docs url %}\nURL of campaign (eg. https://dosome.click/nyn5m7)\n{% enddocs %}\n\n{% docs modal_type %}\nNULL or SURVEY_MODAL\n{% enddocs %}\n\n{% docs landing_datetime %}\nWhen the session started in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs ending_datetime %}\nWhen the session ended in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs session_duration_seconds %}\nSession duration in seconds\n{% enddocs %}\n\n{% docs num_pages_views %}\nNumber of pages viewed in session\n{% enddocs %}\n\n{% docs landing_page %}\nFirst page the user viewed in the session (eg. /us/facts/11-facts-about-bp-oil-spill)\n{% enddocs %}\n\n{% docs exit_page %}\n\"Which page the user ended or exited their session from (eg. /us/campaigns/green-your-getaway)\"\n{% enddocs %}\n\n{% docs days_since_last_session %}\n\"Days since their last session.\"\n{% enddocs %}\n\n{% docs post_type %}\nType of post, (e.g. photo, voter-reg)\n{% enddocs %}\n\n{% docs noun %}\nNoun that corresponds to the item in the call to action that was delivered. (e.g. drawings, tweets)\n{% enddocs %}\n\n{% docs verb %}\nVerb corresponding to the action the user took. (e.g. shared, sent, taken)\n{% enddocs %}\n\n{% docs deleted_at %}\nDate time in UTC when a user deleted their post.\n{% enddocs %}\n\n{% docs _fivetran_deleted %}\nMarks rows that were deleted in the source table\n{% enddocs %}\n\n{% docs _fivetran_synced %}\n(UTC timestamp) keeps track of when each row was last successfully synced\n{% enddocs %}\n\n{% docs reportback %}\nWhether the post is a reportback \n{% enddocs %}\n\n{% docs active %}\nWhether the user is active \n{% enddocs %}\n\n{% docs anonymous %}\nWhether the user is anonymous when making the post \n{% enddocs %}\n\n{% docs callpower_campaign_id %}\nUnique ID corresponding to the Callpower campaign. Callpower allows users to record messages for their representatives.\n{% enddocs %}\n\n{% docs quiz %}\nWhether the post is a quiz \n{% enddocs %}\n\n{% docs action_type %}\nType of action the user took. (e.g. share-something, donate-something)\n{% enddocs %}\n\n{% docs online %}\nWhether the action is a online as opposed to IRL.\n{% enddocs %}\n\n{% docs time_commitment %}\nEstimated time required to do the action (e.g. 3.0+, <0.5)\n{% enddocs %}\n\n{% docs num_signups %}\nQuantity of campaign signups\n{% enddocs %}\n\n{% docs most_recent_signup %}\nTimestamp of the most recent signup in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs num_rbs %}\nQuantity of reportbacks for the user\n{% enddocs %}\n\n{% docs total_quantity %}\nTotal quantity of items in reportbacks\n{% enddocs %}\n\n{% docs most_recent_rb %}\nWhen the most recent reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs first_rb %}\nWhen the first reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs avg_time_betw_rbs %}\nCalculated average time between reportbacks.\n{% enddocs %}\n\n{% docs avg_days_next_action_after_rb %}\nCalculated average days until next action after reportback\n{% enddocs %}\n\n{% docs days_to_next_action_after_last_rb %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs most_recent_mam_action %}\nMost recent monthly active member qualifying action in UTC (eg. 2018-01-01 12:00:00).\n{% enddocs %}\n\n{% docs most_recent_email_open %}\nMost recent email open in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs most_recent_all_actions %}\nMost recent timestamp of any action in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs last_action_is_rb %}\nWhether the last action the user took was a reportback\n{% enddocs %}\n\n{% docs days_since_last_action %}\nDays since the user's last action\n{% enddocs %}\n\n{% docs time_to_first_rb %}\nHow much time after registering until the user's first reportback\n{% enddocs %}\n\n{% docs sms_unsubscribed_at %}\nTimestamp of when user unsubscribed from SMS messaging\n{% enddocs %}\n\n{% docs user_unsubscribed_at %}\nTimestamp of when user unsubscribed from email or sms\n{% enddocs %}\n\n{% docs voter_reg_acquisition %}\nWhether the user was an acquisition through voter registration efforts. \n{% enddocs %}\n\n{% docs last_logged_in %}\nDate time in UTC when user last logged in to Northstar\n{% enddocs %}\n\n{% docs last_accessed %}\nDate time in UTC when user last access the website\n{% enddocs %}\n\n{% docs last_messaged_at %}\nDate time in UTC when user was last sent a message via SMS or email\n{% enddocs %}\n\n{% docs facebook_id %}\nUser's facebook id\n{% enddocs %}\n\n{% docs mobile %}\nUsers's mobile phone number\n{% enddocs %}\n\n{% docs birthdate %}\nUser's birthdate\n{% enddocs %}\n\n{% docs first_name %}\nUser's first name\n{% enddocs %}\n\n{% docs last_name %}\nUser's last name\n{% enddocs %}\n\n{% docs voter_registration_status %}\nUser's registration status. (e.g. registration_complete, confirmed, uncertain) \n{% enddocs %}\n\n{% docs finish_with_state %}\nIf the registrant was eligible to use and passed through to complete their registration with their state\u2019s OVR system, it will be indicated in this field (direct quote from Rock-The-Vote documentation). Yes/No value in field.\n{% enddocs %}\n\n{% docs reportback_volume %}\nThis field returns 1 if non voter-reg action, since campaigns team only counts those a 1 reportback. If voter-reg action, we want to count quantity of post as number of registered voters.\n{% enddocs %}\n\n{% docs address_street_1 %}\nFirst line of user's street address\n{% enddocs %}\n\n{% docs address_street_2 %}\nSecond line of user's street address\n{% enddocs %}\n\n{% docs city %}\nUser's city\n{% enddocs %}\n\n{% docs state %}\nUser's state\n{% enddocs %}\n\n{% docs country %}\nUser's country\n{% enddocs %}\n\n{% docs language %}\nUser's language\n{% enddocs %}\n\n{% docs cio_status %}\nStatus of user from CIO. (e.g. customer_subscribed, customer_unsubscribed)\n{% enddocs %}\n\n{% docs cio_status_timestamp %}\nTimestamp when users's status was updated.\n{% enddocs %}\n\n{% docs sms_status %}\nCurrent SMS status. (e.g. undeliverable, unknown)\n{% enddocs %}\n\n{% docs source_detail %}\nDetails of the origin of the user. (e.g. tell_a_friend, other, opt_in_path/197981)\n{% enddocs %}\n\n{% docs badges %}\nWhether the user has any badges. \n{% enddocs %}\n\n{% docs refer_friends %}\nWhether the user is a part of the refer a friend campaign. \n{% enddocs %}\n\n{% docs subscribed_member %}\nWhether the user is subscribed. \n{% enddocs %}\n\n{% docs last_updated_at %}\nTimestamp when users's was updated.\n{% enddocs %}\n\n{% docs school_id %}\nUnique identifier for the user's school. This info comes from the school finder.\n{% enddocs %}\n\n{% docs newsletter_topic %}\nNewsletter topic. (e.g. community, lifestyle)\n{% enddocs %}\n\n{% docs user_agent %}\nFull user agent string for a user's browser (e.g. \"Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:24.0) Gecko/20100101 Firefox/24.0\")\n{% enddocs %}\n\n{% docs drupal_id %}\nOld Drupal user ID\n{% enddocs %}\n\n{% docs campaigns %}\nCampaigns a user is signed up for.\n{% enddocs %}\n\n{% docs audit %}\nA very useful field with data containing information about changes to a user, e.g. timestamps when the user subscribed and unsubscribed.\n{% enddocs %}\n\n{% docs voting_plan_status %}\nThe indication of the user's plan to vote, e.g. voting, not_voting, cant_vote\n{% enddocs %}\n\n{% docs voting_plan_time_of_day %}\nThe time of day when the user plans to vote, e.g morning, afternoon, evening\n{% enddocs %}\n\n{% docs voting_plan_method_of_transport %}\nHow the user plans to get to their polling place. e.g. walk, drive\n{% enddocs %}\n\n{% docs voting_plan_attending_with %}\nWith Whom the user plans to go voting, e.g. family, friends, alone\n{% enddocs %}\n\n{% docs feature_flags %}\nJSON containing info on features like badges and refer-a-friend.\n{% enddocs %}\n\n{% docs dbt_updated_at %}\nDBT snapshot table data. The updated_at timestamp of the source record when this snapshot row was inserted.\n{% enddocs %}\n\n{% docs dbt_scd_id %}\nDBT snapshot table data. A unique key generated for each snapshotted record.\n{% enddocs %}\n\n{% docs dbt_valid_from %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this snapshot row was first inserted\n{% enddocs %}\n\n{% docs dbt_valid_to %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this row row became invalidated.\n{% enddocs %}\n\n{% docs google_id %}\nUser's Google ID obtained from login.\n{% enddocs %}\n\n{% docs causes %}\nCauses in which a user is interested. e.g. animal welfare, education, mental_health\n{% enddocs %}\n\n{% docs email_subscription_status %}\nEmail subscription status of the user\n{% enddocs %}\n\n{% docs role %}\nUser's role, e.g. user, staff\n{% enddocs %}\n\n{% docs cio_backfilled %}\nWhether this user's data was backfilled from CIO\n{% enddocs %}\n\n{% docs addr_source %}\nWhere the user submitted their address, e.g. sms, GDPR\n{% enddocs %}\n\n{% docs email_subscription_topics %}\nEmail subscription topics correspond to categories in CIO in which the user is interested. e.g. lifestyle, community, scholarship\n{% enddocs %}\n\n{% docs sms_paused %}\nWhether we've paused sending sms messages to the user.\n{% enddocs %}\n\n\n\n\n", "name": "cio_status", "unique_id": "ds_dbt.cio_status", "block_contents": "Status of user from CIO. (e.g. customer_subscribed, customer_unsubscribed)"}, "ds_dbt.cio_status_timestamp": {"root_path": "/Users/mrich/projects/quasar/quasar/dbt", "resource_type": "docs", "path": "schema.md", "original_file_path": "models/schema.md", "package_name": "ds_dbt", "file_contents": "\n{% docs click_id %}\nThis is a unique identifier for each click\n{% enddocs %}\n\n{% docs click_time %}\nTimestamp when user clicked.\n{% enddocs %}\n\n{% docs shortened %}\nShortened URL\n{% enddocs %}\n\n{% docs target_url %}\nURL where the user will be directed\n{% enddocs %}\n\n{% docs broadcast_id %}\nID of the broadcast that generated the shortened URL\n{% enddocs %}\n\n{% docs source %}\nSource of the URL (e.g. SMS, web), origin of the post (e.g. phoenix-web, phoenix-ashes, sms), or source where user was acquired. (e.g. sms, phoenix-next)\n{% enddocs %}\n\n{% docs interaction_type %}\nHow the user interacted with the link (e.g. preview, click)\n{% enddocs %}\n\n{% docs id %}\nUnique identifier for the post\n{% enddocs %}\n\n{% docs type %}\nType of post (e.g. photo)\n{% enddocs %}\n\n{% docs action %}\nPost action (e.g. DefendDreamers_Nov9_CongressCalls, GunViolence2018_Feb15_ParklandResponse)\n{% enddocs %}\n\n{% docs status %}\nPost status (e.g. accepted, rejected)\n{% enddocs %}\n\n{% docs quantity %}\nNumerical quantity of items specified in the call to action (e.g. 10, 200)\n{% enddocs %}\n\n{% docs source_bucket %}\nGrouping bucket for origin of the post (e.g. web, sms) \n{% enddocs %}\n\n{% docs created_at %}\nWhen the item was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs updated_at %}\nWhen the item was updated in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs text %}\nText of the post (e.g. \"Zoo animals and a super hero trying to help too!\") \n{% enddocs %}\n\n{% docs signup_id %}\nUnique identifier for the signup \n{% enddocs %}\n\n{% docs post_class %}\nClass of the signup (e.g. \"photo - default\", \"phone-call - DefendDreamers_Jan16_BothBodies\")\n{% enddocs %}\n\n{% docs is_accepted %}\nWhether the post has been accepted to be displayed to the public on the website\n{% enddocs %}\n\n{% docs action_id %}\nInternal identifier of the action \n{% enddocs %}\n\n{% docs location %}\nLocation where the action takes place (e.g. US-NY)\n{% enddocs %}\n\n{% docs postal_code %}\nPostal code where the action takes place\n{% enddocs %}\n\n{% docs is_reportback %}\nWhether the post is a reportback. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs civic_action %}\nWhether the post is a Civic Action. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs scholarship_entry %}\nWhether the post is a Scholarship Entry. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs why_participated %}\nWhy the user participated in this action. Entered by the user.\n{% enddocs %}\n\n{% docs details %}\nDetails about the post. Contains contentfulId and other information (e.g. {\"campaignContentfulId\":\"6ATBgGEQEeJoIcxs1qbwaC\"})\n{% enddocs %}\n\n{% docs email %}\nEmail address of the user.\n{% enddocs %}\n\n{% docs source_details %}\nDetails about the source of the item. This is sometimes represented as a JSON object, and for other tables like Turbovote its represented as a string. (e.g. \"{\"contentful_id\":\"3CTLlXfbwtz1FOMpl31SKV\",\"utm_source\":\"scholarship_listing\",\"utm_medium\":\"referral\",\"utm_campaign\":\"fastweb_2019_08\"}\", newsletter_456)\n{% enddocs %}\n\n{% docs campaign_id %}\nThis is a unique identifier for the campaign\n{% enddocs %}\n\n{% docs campaign_run_id %}\nUnique identifier for the campaign run\n{% enddocs %}\n\n{% docs campaign_name %}\nName of the campaign\n{% enddocs %}\n\n{% docs campaign_cause %}\nCampaign cause (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_run_start_date %}\nStart date of the campaign run\n{% enddocs %}\n\n{% docs campaign_run_end_date %}\nEnd date of the campaign run\n{% enddocs %}\n\n{% docs campaign_created_date %}\nWhen the campaign was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs campaign_node_id %}\nInternal unique node id for the campaign\n{% enddocs %}\n\n{% docs campaign_node_id_title %}\nCampaign title\n{% enddocs %}\n\n{% docs campaign_run_id_title %}\nTitle of the campaign run\n{% enddocs %}\n\n{% docs campaign_action_type %}\nCampaign action type (eg. Make Something, Share Something)\n{% enddocs %}\n\n{% docs campaign_cause_type %}\nCampaign cause type (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_noun %}\nNoun applicable to the user's action\n{% enddocs %}\n\n{% docs campaign_verb %}\nVerb describing the action the user should take\n{% enddocs %}\n\n{% docs campaign_cta %}\nCampaign's call to action\n{% enddocs %}\n\n{% docs campaign_language %}\n\"Language in which the campaign is available\"\n{% enddocs %}\n\n{% docs agent_id %}\nIf set, the content type of the picture the member is sending us. Exp. image/png.\n{% enddocs %}\n\n{% docs attachment_content_type %}\nIf set, the handle of the Front agent this outbound support message is from.\n{% enddocs %}\n\n{% docs topic %}\nHolds a reference to the **last** campaign topic the member's conversation was in. This is useful to allow members to talk to Gambit and get quick responses (through Rivescript), without Gambit completely forgetting what state the member's interaction with a campaign topic was in.\n{% enddocs %}\n\n{% docs action_serial_id %}\nSerial id for the user's action. Depends on the source of the action. May be the bertly click id, sms message id, etc.\n{% enddocs %}\n\n{% docs channel %}\nChannel for the user's action. Depends on the source of the action. (e.g. web, sms)\n{% enddocs %}\n\n{% docs first_action_month %}\nMonth during which the user took their first action. \n{% enddocs %}\n\n{% docs event_id %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs event_source %}\nApplication source for event (eg. Phoenix, Northstar)\n{% enddocs %}\n\n{% docs event_datetime %}\nWhen the event occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs event_name %}\nName of the event (eg. northstar_submitted_register, https://docs.google.com/spreadsheets/d/1lm-fGrIm85nUTxSojqyCt_Ehmm1zEbViFhKpxcJiz1A/edit#gid=406441516)\n{% enddocs %}\n\n{% docs event_type %}\nType of event (pv = 'Page View', se = 'Structured Event')\n{% enddocs %}\n\n{% docs host %}\nURL host where event occurred (eg. www.dosomething.org or identity.dosomething.org)\n{% enddocs %}\n\n{% docs path %}\nURL path event occurred at (eg. /login or /us/campaigns/huddle-for-heroes)\n{% enddocs %}\n\n{% docs query_parameters %}\nOptional query parameters for the request (eg. query=huddle)\n{% enddocs %}\n\n{% docs se_category %}\nCategory of event (eg. focused_field, authentication) - Custom structured event\n{% enddocs %}\n\n{% docs se_action %}\nAction performed / event name (eg. form_submitted, action_failed) - Custom structured event\n{% enddocs %}\n\n{% docs se_label %}\nThe object of the action (eg. first_name, register, voter_reg_status) - Custom structured event\n{% enddocs %}\n\n{% docs session_id %}\nUnique identifier of the user's session\n{% enddocs %}\n\n{% docs session_counter %}\nHow many sessions a user has started\n{% enddocs %}\n\n{% docs browser_size %}\nWhich type of browser a user is using (eg. Mobile, Desktop)\n{% enddocs %}\n\n{% docs northstar_id %}\nThe Northstar ID of the user who generated the event\n{% enddocs %}\n\n{% docs device_id %}\nID of the device used\n{% enddocs %}\n\n{% docs referrer_host %}\nURL host of the referring site (eg. google.com)\n{% enddocs %}\n\n{% docs referrer_path %}\nURL path from referring site (eg. /10-stats-on-teen-drug-and-alcohol-use/)\n{% enddocs %}\n\n{% docs referrer_source %}\nReferrer source name (eg. Google, Facebook)\n{% enddocs %}\n\n{% docs utm_source %}\nTracks where the traffic is coming from. (eg. scholarship_listing, Facebook)\n{% enddocs %}\n\n{% docs utm_medium %}\nHow the traffic got to the platform (eg. referral, CPC)\n{% enddocs %}\n\n{% docs utm_campaign %}\nTracks which campaign the traffic was generated by. Shows up in Google Analytics as Campaign Name (eg. editorial_newsletter)\n{% enddocs %}\n\n{% docs url %}\nURL of campaign (eg. https://dosome.click/nyn5m7)\n{% enddocs %}\n\n{% docs modal_type %}\nNULL or SURVEY_MODAL\n{% enddocs %}\n\n{% docs landing_datetime %}\nWhen the session started in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs ending_datetime %}\nWhen the session ended in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs session_duration_seconds %}\nSession duration in seconds\n{% enddocs %}\n\n{% docs num_pages_views %}\nNumber of pages viewed in session\n{% enddocs %}\n\n{% docs landing_page %}\nFirst page the user viewed in the session (eg. /us/facts/11-facts-about-bp-oil-spill)\n{% enddocs %}\n\n{% docs exit_page %}\n\"Which page the user ended or exited their session from (eg. /us/campaigns/green-your-getaway)\"\n{% enddocs %}\n\n{% docs days_since_last_session %}\n\"Days since their last session.\"\n{% enddocs %}\n\n{% docs post_type %}\nType of post, (e.g. photo, voter-reg)\n{% enddocs %}\n\n{% docs noun %}\nNoun that corresponds to the item in the call to action that was delivered. (e.g. drawings, tweets)\n{% enddocs %}\n\n{% docs verb %}\nVerb corresponding to the action the user took. (e.g. shared, sent, taken)\n{% enddocs %}\n\n{% docs deleted_at %}\nDate time in UTC when a user deleted their post.\n{% enddocs %}\n\n{% docs _fivetran_deleted %}\nMarks rows that were deleted in the source table\n{% enddocs %}\n\n{% docs _fivetran_synced %}\n(UTC timestamp) keeps track of when each row was last successfully synced\n{% enddocs %}\n\n{% docs reportback %}\nWhether the post is a reportback \n{% enddocs %}\n\n{% docs active %}\nWhether the user is active \n{% enddocs %}\n\n{% docs anonymous %}\nWhether the user is anonymous when making the post \n{% enddocs %}\n\n{% docs callpower_campaign_id %}\nUnique ID corresponding to the Callpower campaign. Callpower allows users to record messages for their representatives.\n{% enddocs %}\n\n{% docs quiz %}\nWhether the post is a quiz \n{% enddocs %}\n\n{% docs action_type %}\nType of action the user took. (e.g. share-something, donate-something)\n{% enddocs %}\n\n{% docs online %}\nWhether the action is a online as opposed to IRL.\n{% enddocs %}\n\n{% docs time_commitment %}\nEstimated time required to do the action (e.g. 3.0+, <0.5)\n{% enddocs %}\n\n{% docs num_signups %}\nQuantity of campaign signups\n{% enddocs %}\n\n{% docs most_recent_signup %}\nTimestamp of the most recent signup in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs num_rbs %}\nQuantity of reportbacks for the user\n{% enddocs %}\n\n{% docs total_quantity %}\nTotal quantity of items in reportbacks\n{% enddocs %}\n\n{% docs most_recent_rb %}\nWhen the most recent reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs first_rb %}\nWhen the first reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs avg_time_betw_rbs %}\nCalculated average time between reportbacks.\n{% enddocs %}\n\n{% docs avg_days_next_action_after_rb %}\nCalculated average days until next action after reportback\n{% enddocs %}\n\n{% docs days_to_next_action_after_last_rb %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs most_recent_mam_action %}\nMost recent monthly active member qualifying action in UTC (eg. 2018-01-01 12:00:00).\n{% enddocs %}\n\n{% docs most_recent_email_open %}\nMost recent email open in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs most_recent_all_actions %}\nMost recent timestamp of any action in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs last_action_is_rb %}\nWhether the last action the user took was a reportback\n{% enddocs %}\n\n{% docs days_since_last_action %}\nDays since the user's last action\n{% enddocs %}\n\n{% docs time_to_first_rb %}\nHow much time after registering until the user's first reportback\n{% enddocs %}\n\n{% docs sms_unsubscribed_at %}\nTimestamp of when user unsubscribed from SMS messaging\n{% enddocs %}\n\n{% docs user_unsubscribed_at %}\nTimestamp of when user unsubscribed from email or sms\n{% enddocs %}\n\n{% docs voter_reg_acquisition %}\nWhether the user was an acquisition through voter registration efforts. \n{% enddocs %}\n\n{% docs last_logged_in %}\nDate time in UTC when user last logged in to Northstar\n{% enddocs %}\n\n{% docs last_accessed %}\nDate time in UTC when user last access the website\n{% enddocs %}\n\n{% docs last_messaged_at %}\nDate time in UTC when user was last sent a message via SMS or email\n{% enddocs %}\n\n{% docs facebook_id %}\nUser's facebook id\n{% enddocs %}\n\n{% docs mobile %}\nUsers's mobile phone number\n{% enddocs %}\n\n{% docs birthdate %}\nUser's birthdate\n{% enddocs %}\n\n{% docs first_name %}\nUser's first name\n{% enddocs %}\n\n{% docs last_name %}\nUser's last name\n{% enddocs %}\n\n{% docs voter_registration_status %}\nUser's registration status. (e.g. registration_complete, confirmed, uncertain) \n{% enddocs %}\n\n{% docs finish_with_state %}\nIf the registrant was eligible to use and passed through to complete their registration with their state\u2019s OVR system, it will be indicated in this field (direct quote from Rock-The-Vote documentation). Yes/No value in field.\n{% enddocs %}\n\n{% docs reportback_volume %}\nThis field returns 1 if non voter-reg action, since campaigns team only counts those a 1 reportback. If voter-reg action, we want to count quantity of post as number of registered voters.\n{% enddocs %}\n\n{% docs address_street_1 %}\nFirst line of user's street address\n{% enddocs %}\n\n{% docs address_street_2 %}\nSecond line of user's street address\n{% enddocs %}\n\n{% docs city %}\nUser's city\n{% enddocs %}\n\n{% docs state %}\nUser's state\n{% enddocs %}\n\n{% docs country %}\nUser's country\n{% enddocs %}\n\n{% docs language %}\nUser's language\n{% enddocs %}\n\n{% docs cio_status %}\nStatus of user from CIO. (e.g. customer_subscribed, customer_unsubscribed)\n{% enddocs %}\n\n{% docs cio_status_timestamp %}\nTimestamp when users's status was updated.\n{% enddocs %}\n\n{% docs sms_status %}\nCurrent SMS status. (e.g. undeliverable, unknown)\n{% enddocs %}\n\n{% docs source_detail %}\nDetails of the origin of the user. (e.g. tell_a_friend, other, opt_in_path/197981)\n{% enddocs %}\n\n{% docs badges %}\nWhether the user has any badges. \n{% enddocs %}\n\n{% docs refer_friends %}\nWhether the user is a part of the refer a friend campaign. \n{% enddocs %}\n\n{% docs subscribed_member %}\nWhether the user is subscribed. \n{% enddocs %}\n\n{% docs last_updated_at %}\nTimestamp when users's was updated.\n{% enddocs %}\n\n{% docs school_id %}\nUnique identifier for the user's school. This info comes from the school finder.\n{% enddocs %}\n\n{% docs newsletter_topic %}\nNewsletter topic. (e.g. community, lifestyle)\n{% enddocs %}\n\n{% docs user_agent %}\nFull user agent string for a user's browser (e.g. \"Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:24.0) Gecko/20100101 Firefox/24.0\")\n{% enddocs %}\n\n{% docs drupal_id %}\nOld Drupal user ID\n{% enddocs %}\n\n{% docs campaigns %}\nCampaigns a user is signed up for.\n{% enddocs %}\n\n{% docs audit %}\nA very useful field with data containing information about changes to a user, e.g. timestamps when the user subscribed and unsubscribed.\n{% enddocs %}\n\n{% docs voting_plan_status %}\nThe indication of the user's plan to vote, e.g. voting, not_voting, cant_vote\n{% enddocs %}\n\n{% docs voting_plan_time_of_day %}\nThe time of day when the user plans to vote, e.g morning, afternoon, evening\n{% enddocs %}\n\n{% docs voting_plan_method_of_transport %}\nHow the user plans to get to their polling place. e.g. walk, drive\n{% enddocs %}\n\n{% docs voting_plan_attending_with %}\nWith Whom the user plans to go voting, e.g. family, friends, alone\n{% enddocs %}\n\n{% docs feature_flags %}\nJSON containing info on features like badges and refer-a-friend.\n{% enddocs %}\n\n{% docs dbt_updated_at %}\nDBT snapshot table data. The updated_at timestamp of the source record when this snapshot row was inserted.\n{% enddocs %}\n\n{% docs dbt_scd_id %}\nDBT snapshot table data. A unique key generated for each snapshotted record.\n{% enddocs %}\n\n{% docs dbt_valid_from %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this snapshot row was first inserted\n{% enddocs %}\n\n{% docs dbt_valid_to %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this row row became invalidated.\n{% enddocs %}\n\n{% docs google_id %}\nUser's Google ID obtained from login.\n{% enddocs %}\n\n{% docs causes %}\nCauses in which a user is interested. e.g. animal welfare, education, mental_health\n{% enddocs %}\n\n{% docs email_subscription_status %}\nEmail subscription status of the user\n{% enddocs %}\n\n{% docs role %}\nUser's role, e.g. user, staff\n{% enddocs %}\n\n{% docs cio_backfilled %}\nWhether this user's data was backfilled from CIO\n{% enddocs %}\n\n{% docs addr_source %}\nWhere the user submitted their address, e.g. sms, GDPR\n{% enddocs %}\n\n{% docs email_subscription_topics %}\nEmail subscription topics correspond to categories in CIO in which the user is interested. e.g. lifestyle, community, scholarship\n{% enddocs %}\n\n{% docs sms_paused %}\nWhether we've paused sending sms messages to the user.\n{% enddocs %}\n\n\n\n\n", "name": "cio_status_timestamp", "unique_id": "ds_dbt.cio_status_timestamp", "block_contents": "Timestamp when users's status was updated."}, "ds_dbt.sms_status": {"root_path": "/Users/mrich/projects/quasar/quasar/dbt", "resource_type": "docs", "path": "schema.md", "original_file_path": "models/schema.md", "package_name": "ds_dbt", "file_contents": "\n{% docs click_id %}\nThis is a unique identifier for each click\n{% enddocs %}\n\n{% docs click_time %}\nTimestamp when user clicked.\n{% enddocs %}\n\n{% docs shortened %}\nShortened URL\n{% enddocs %}\n\n{% docs target_url %}\nURL where the user will be directed\n{% enddocs %}\n\n{% docs broadcast_id %}\nID of the broadcast that generated the shortened URL\n{% enddocs %}\n\n{% docs source %}\nSource of the URL (e.g. SMS, web), origin of the post (e.g. phoenix-web, phoenix-ashes, sms), or source where user was acquired. (e.g. sms, phoenix-next)\n{% enddocs %}\n\n{% docs interaction_type %}\nHow the user interacted with the link (e.g. preview, click)\n{% enddocs %}\n\n{% docs id %}\nUnique identifier for the post\n{% enddocs %}\n\n{% docs type %}\nType of post (e.g. photo)\n{% enddocs %}\n\n{% docs action %}\nPost action (e.g. DefendDreamers_Nov9_CongressCalls, GunViolence2018_Feb15_ParklandResponse)\n{% enddocs %}\n\n{% docs status %}\nPost status (e.g. accepted, rejected)\n{% enddocs %}\n\n{% docs quantity %}\nNumerical quantity of items specified in the call to action (e.g. 10, 200)\n{% enddocs %}\n\n{% docs source_bucket %}\nGrouping bucket for origin of the post (e.g. web, sms) \n{% enddocs %}\n\n{% docs created_at %}\nWhen the item was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs updated_at %}\nWhen the item was updated in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs text %}\nText of the post (e.g. \"Zoo animals and a super hero trying to help too!\") \n{% enddocs %}\n\n{% docs signup_id %}\nUnique identifier for the signup \n{% enddocs %}\n\n{% docs post_class %}\nClass of the signup (e.g. \"photo - default\", \"phone-call - DefendDreamers_Jan16_BothBodies\")\n{% enddocs %}\n\n{% docs is_accepted %}\nWhether the post has been accepted to be displayed to the public on the website\n{% enddocs %}\n\n{% docs action_id %}\nInternal identifier of the action \n{% enddocs %}\n\n{% docs location %}\nLocation where the action takes place (e.g. US-NY)\n{% enddocs %}\n\n{% docs postal_code %}\nPostal code where the action takes place\n{% enddocs %}\n\n{% docs is_reportback %}\nWhether the post is a reportback. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs civic_action %}\nWhether the post is a Civic Action. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs scholarship_entry %}\nWhether the post is a Scholarship Entry. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs why_participated %}\nWhy the user participated in this action. Entered by the user.\n{% enddocs %}\n\n{% docs details %}\nDetails about the post. Contains contentfulId and other information (e.g. {\"campaignContentfulId\":\"6ATBgGEQEeJoIcxs1qbwaC\"})\n{% enddocs %}\n\n{% docs email %}\nEmail address of the user.\n{% enddocs %}\n\n{% docs source_details %}\nDetails about the source of the item. This is sometimes represented as a JSON object, and for other tables like Turbovote its represented as a string. (e.g. \"{\"contentful_id\":\"3CTLlXfbwtz1FOMpl31SKV\",\"utm_source\":\"scholarship_listing\",\"utm_medium\":\"referral\",\"utm_campaign\":\"fastweb_2019_08\"}\", newsletter_456)\n{% enddocs %}\n\n{% docs campaign_id %}\nThis is a unique identifier for the campaign\n{% enddocs %}\n\n{% docs campaign_run_id %}\nUnique identifier for the campaign run\n{% enddocs %}\n\n{% docs campaign_name %}\nName of the campaign\n{% enddocs %}\n\n{% docs campaign_cause %}\nCampaign cause (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_run_start_date %}\nStart date of the campaign run\n{% enddocs %}\n\n{% docs campaign_run_end_date %}\nEnd date of the campaign run\n{% enddocs %}\n\n{% docs campaign_created_date %}\nWhen the campaign was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs campaign_node_id %}\nInternal unique node id for the campaign\n{% enddocs %}\n\n{% docs campaign_node_id_title %}\nCampaign title\n{% enddocs %}\n\n{% docs campaign_run_id_title %}\nTitle of the campaign run\n{% enddocs %}\n\n{% docs campaign_action_type %}\nCampaign action type (eg. Make Something, Share Something)\n{% enddocs %}\n\n{% docs campaign_cause_type %}\nCampaign cause type (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_noun %}\nNoun applicable to the user's action\n{% enddocs %}\n\n{% docs campaign_verb %}\nVerb describing the action the user should take\n{% enddocs %}\n\n{% docs campaign_cta %}\nCampaign's call to action\n{% enddocs %}\n\n{% docs campaign_language %}\n\"Language in which the campaign is available\"\n{% enddocs %}\n\n{% docs agent_id %}\nIf set, the content type of the picture the member is sending us. Exp. image/png.\n{% enddocs %}\n\n{% docs attachment_content_type %}\nIf set, the handle of the Front agent this outbound support message is from.\n{% enddocs %}\n\n{% docs topic %}\nHolds a reference to the **last** campaign topic the member's conversation was in. This is useful to allow members to talk to Gambit and get quick responses (through Rivescript), without Gambit completely forgetting what state the member's interaction with a campaign topic was in.\n{% enddocs %}\n\n{% docs action_serial_id %}\nSerial id for the user's action. Depends on the source of the action. May be the bertly click id, sms message id, etc.\n{% enddocs %}\n\n{% docs channel %}\nChannel for the user's action. Depends on the source of the action. (e.g. web, sms)\n{% enddocs %}\n\n{% docs first_action_month %}\nMonth during which the user took their first action. \n{% enddocs %}\n\n{% docs event_id %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs event_source %}\nApplication source for event (eg. Phoenix, Northstar)\n{% enddocs %}\n\n{% docs event_datetime %}\nWhen the event occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs event_name %}\nName of the event (eg. northstar_submitted_register, https://docs.google.com/spreadsheets/d/1lm-fGrIm85nUTxSojqyCt_Ehmm1zEbViFhKpxcJiz1A/edit#gid=406441516)\n{% enddocs %}\n\n{% docs event_type %}\nType of event (pv = 'Page View', se = 'Structured Event')\n{% enddocs %}\n\n{% docs host %}\nURL host where event occurred (eg. www.dosomething.org or identity.dosomething.org)\n{% enddocs %}\n\n{% docs path %}\nURL path event occurred at (eg. /login or /us/campaigns/huddle-for-heroes)\n{% enddocs %}\n\n{% docs query_parameters %}\nOptional query parameters for the request (eg. query=huddle)\n{% enddocs %}\n\n{% docs se_category %}\nCategory of event (eg. focused_field, authentication) - Custom structured event\n{% enddocs %}\n\n{% docs se_action %}\nAction performed / event name (eg. form_submitted, action_failed) - Custom structured event\n{% enddocs %}\n\n{% docs se_label %}\nThe object of the action (eg. first_name, register, voter_reg_status) - Custom structured event\n{% enddocs %}\n\n{% docs session_id %}\nUnique identifier of the user's session\n{% enddocs %}\n\n{% docs session_counter %}\nHow many sessions a user has started\n{% enddocs %}\n\n{% docs browser_size %}\nWhich type of browser a user is using (eg. Mobile, Desktop)\n{% enddocs %}\n\n{% docs northstar_id %}\nThe Northstar ID of the user who generated the event\n{% enddocs %}\n\n{% docs device_id %}\nID of the device used\n{% enddocs %}\n\n{% docs referrer_host %}\nURL host of the referring site (eg. google.com)\n{% enddocs %}\n\n{% docs referrer_path %}\nURL path from referring site (eg. /10-stats-on-teen-drug-and-alcohol-use/)\n{% enddocs %}\n\n{% docs referrer_source %}\nReferrer source name (eg. Google, Facebook)\n{% enddocs %}\n\n{% docs utm_source %}\nTracks where the traffic is coming from. (eg. scholarship_listing, Facebook)\n{% enddocs %}\n\n{% docs utm_medium %}\nHow the traffic got to the platform (eg. referral, CPC)\n{% enddocs %}\n\n{% docs utm_campaign %}\nTracks which campaign the traffic was generated by. Shows up in Google Analytics as Campaign Name (eg. editorial_newsletter)\n{% enddocs %}\n\n{% docs url %}\nURL of campaign (eg. https://dosome.click/nyn5m7)\n{% enddocs %}\n\n{% docs modal_type %}\nNULL or SURVEY_MODAL\n{% enddocs %}\n\n{% docs landing_datetime %}\nWhen the session started in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs ending_datetime %}\nWhen the session ended in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs session_duration_seconds %}\nSession duration in seconds\n{% enddocs %}\n\n{% docs num_pages_views %}\nNumber of pages viewed in session\n{% enddocs %}\n\n{% docs landing_page %}\nFirst page the user viewed in the session (eg. /us/facts/11-facts-about-bp-oil-spill)\n{% enddocs %}\n\n{% docs exit_page %}\n\"Which page the user ended or exited their session from (eg. /us/campaigns/green-your-getaway)\"\n{% enddocs %}\n\n{% docs days_since_last_session %}\n\"Days since their last session.\"\n{% enddocs %}\n\n{% docs post_type %}\nType of post, (e.g. photo, voter-reg)\n{% enddocs %}\n\n{% docs noun %}\nNoun that corresponds to the item in the call to action that was delivered. (e.g. drawings, tweets)\n{% enddocs %}\n\n{% docs verb %}\nVerb corresponding to the action the user took. (e.g. shared, sent, taken)\n{% enddocs %}\n\n{% docs deleted_at %}\nDate time in UTC when a user deleted their post.\n{% enddocs %}\n\n{% docs _fivetran_deleted %}\nMarks rows that were deleted in the source table\n{% enddocs %}\n\n{% docs _fivetran_synced %}\n(UTC timestamp) keeps track of when each row was last successfully synced\n{% enddocs %}\n\n{% docs reportback %}\nWhether the post is a reportback \n{% enddocs %}\n\n{% docs active %}\nWhether the user is active \n{% enddocs %}\n\n{% docs anonymous %}\nWhether the user is anonymous when making the post \n{% enddocs %}\n\n{% docs callpower_campaign_id %}\nUnique ID corresponding to the Callpower campaign. Callpower allows users to record messages for their representatives.\n{% enddocs %}\n\n{% docs quiz %}\nWhether the post is a quiz \n{% enddocs %}\n\n{% docs action_type %}\nType of action the user took. (e.g. share-something, donate-something)\n{% enddocs %}\n\n{% docs online %}\nWhether the action is a online as opposed to IRL.\n{% enddocs %}\n\n{% docs time_commitment %}\nEstimated time required to do the action (e.g. 3.0+, <0.5)\n{% enddocs %}\n\n{% docs num_signups %}\nQuantity of campaign signups\n{% enddocs %}\n\n{% docs most_recent_signup %}\nTimestamp of the most recent signup in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs num_rbs %}\nQuantity of reportbacks for the user\n{% enddocs %}\n\n{% docs total_quantity %}\nTotal quantity of items in reportbacks\n{% enddocs %}\n\n{% docs most_recent_rb %}\nWhen the most recent reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs first_rb %}\nWhen the first reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs avg_time_betw_rbs %}\nCalculated average time between reportbacks.\n{% enddocs %}\n\n{% docs avg_days_next_action_after_rb %}\nCalculated average days until next action after reportback\n{% enddocs %}\n\n{% docs days_to_next_action_after_last_rb %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs most_recent_mam_action %}\nMost recent monthly active member qualifying action in UTC (eg. 2018-01-01 12:00:00).\n{% enddocs %}\n\n{% docs most_recent_email_open %}\nMost recent email open in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs most_recent_all_actions %}\nMost recent timestamp of any action in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs last_action_is_rb %}\nWhether the last action the user took was a reportback\n{% enddocs %}\n\n{% docs days_since_last_action %}\nDays since the user's last action\n{% enddocs %}\n\n{% docs time_to_first_rb %}\nHow much time after registering until the user's first reportback\n{% enddocs %}\n\n{% docs sms_unsubscribed_at %}\nTimestamp of when user unsubscribed from SMS messaging\n{% enddocs %}\n\n{% docs user_unsubscribed_at %}\nTimestamp of when user unsubscribed from email or sms\n{% enddocs %}\n\n{% docs voter_reg_acquisition %}\nWhether the user was an acquisition through voter registration efforts. \n{% enddocs %}\n\n{% docs last_logged_in %}\nDate time in UTC when user last logged in to Northstar\n{% enddocs %}\n\n{% docs last_accessed %}\nDate time in UTC when user last access the website\n{% enddocs %}\n\n{% docs last_messaged_at %}\nDate time in UTC when user was last sent a message via SMS or email\n{% enddocs %}\n\n{% docs facebook_id %}\nUser's facebook id\n{% enddocs %}\n\n{% docs mobile %}\nUsers's mobile phone number\n{% enddocs %}\n\n{% docs birthdate %}\nUser's birthdate\n{% enddocs %}\n\n{% docs first_name %}\nUser's first name\n{% enddocs %}\n\n{% docs last_name %}\nUser's last name\n{% enddocs %}\n\n{% docs voter_registration_status %}\nUser's registration status. (e.g. registration_complete, confirmed, uncertain) \n{% enddocs %}\n\n{% docs finish_with_state %}\nIf the registrant was eligible to use and passed through to complete their registration with their state\u2019s OVR system, it will be indicated in this field (direct quote from Rock-The-Vote documentation). Yes/No value in field.\n{% enddocs %}\n\n{% docs reportback_volume %}\nThis field returns 1 if non voter-reg action, since campaigns team only counts those a 1 reportback. If voter-reg action, we want to count quantity of post as number of registered voters.\n{% enddocs %}\n\n{% docs address_street_1 %}\nFirst line of user's street address\n{% enddocs %}\n\n{% docs address_street_2 %}\nSecond line of user's street address\n{% enddocs %}\n\n{% docs city %}\nUser's city\n{% enddocs %}\n\n{% docs state %}\nUser's state\n{% enddocs %}\n\n{% docs country %}\nUser's country\n{% enddocs %}\n\n{% docs language %}\nUser's language\n{% enddocs %}\n\n{% docs cio_status %}\nStatus of user from CIO. (e.g. customer_subscribed, customer_unsubscribed)\n{% enddocs %}\n\n{% docs cio_status_timestamp %}\nTimestamp when users's status was updated.\n{% enddocs %}\n\n{% docs sms_status %}\nCurrent SMS status. (e.g. undeliverable, unknown)\n{% enddocs %}\n\n{% docs source_detail %}\nDetails of the origin of the user. (e.g. tell_a_friend, other, opt_in_path/197981)\n{% enddocs %}\n\n{% docs badges %}\nWhether the user has any badges. \n{% enddocs %}\n\n{% docs refer_friends %}\nWhether the user is a part of the refer a friend campaign. \n{% enddocs %}\n\n{% docs subscribed_member %}\nWhether the user is subscribed. \n{% enddocs %}\n\n{% docs last_updated_at %}\nTimestamp when users's was updated.\n{% enddocs %}\n\n{% docs school_id %}\nUnique identifier for the user's school. This info comes from the school finder.\n{% enddocs %}\n\n{% docs newsletter_topic %}\nNewsletter topic. (e.g. community, lifestyle)\n{% enddocs %}\n\n{% docs user_agent %}\nFull user agent string for a user's browser (e.g. \"Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:24.0) Gecko/20100101 Firefox/24.0\")\n{% enddocs %}\n\n{% docs drupal_id %}\nOld Drupal user ID\n{% enddocs %}\n\n{% docs campaigns %}\nCampaigns a user is signed up for.\n{% enddocs %}\n\n{% docs audit %}\nA very useful field with data containing information about changes to a user, e.g. timestamps when the user subscribed and unsubscribed.\n{% enddocs %}\n\n{% docs voting_plan_status %}\nThe indication of the user's plan to vote, e.g. voting, not_voting, cant_vote\n{% enddocs %}\n\n{% docs voting_plan_time_of_day %}\nThe time of day when the user plans to vote, e.g morning, afternoon, evening\n{% enddocs %}\n\n{% docs voting_plan_method_of_transport %}\nHow the user plans to get to their polling place. e.g. walk, drive\n{% enddocs %}\n\n{% docs voting_plan_attending_with %}\nWith Whom the user plans to go voting, e.g. family, friends, alone\n{% enddocs %}\n\n{% docs feature_flags %}\nJSON containing info on features like badges and refer-a-friend.\n{% enddocs %}\n\n{% docs dbt_updated_at %}\nDBT snapshot table data. The updated_at timestamp of the source record when this snapshot row was inserted.\n{% enddocs %}\n\n{% docs dbt_scd_id %}\nDBT snapshot table data. A unique key generated for each snapshotted record.\n{% enddocs %}\n\n{% docs dbt_valid_from %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this snapshot row was first inserted\n{% enddocs %}\n\n{% docs dbt_valid_to %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this row row became invalidated.\n{% enddocs %}\n\n{% docs google_id %}\nUser's Google ID obtained from login.\n{% enddocs %}\n\n{% docs causes %}\nCauses in which a user is interested. e.g. animal welfare, education, mental_health\n{% enddocs %}\n\n{% docs email_subscription_status %}\nEmail subscription status of the user\n{% enddocs %}\n\n{% docs role %}\nUser's role, e.g. user, staff\n{% enddocs %}\n\n{% docs cio_backfilled %}\nWhether this user's data was backfilled from CIO\n{% enddocs %}\n\n{% docs addr_source %}\nWhere the user submitted their address, e.g. sms, GDPR\n{% enddocs %}\n\n{% docs email_subscription_topics %}\nEmail subscription topics correspond to categories in CIO in which the user is interested. e.g. lifestyle, community, scholarship\n{% enddocs %}\n\n{% docs sms_paused %}\nWhether we've paused sending sms messages to the user.\n{% enddocs %}\n\n\n\n\n", "name": "sms_status", "unique_id": "ds_dbt.sms_status", "block_contents": "Current SMS status. (e.g. undeliverable, unknown)"}, "ds_dbt.source_detail": {"root_path": "/Users/mrich/projects/quasar/quasar/dbt", "resource_type": "docs", "path": "schema.md", "original_file_path": "models/schema.md", "package_name": "ds_dbt", "file_contents": "\n{% docs click_id %}\nThis is a unique identifier for each click\n{% enddocs %}\n\n{% docs click_time %}\nTimestamp when user clicked.\n{% enddocs %}\n\n{% docs shortened %}\nShortened URL\n{% enddocs %}\n\n{% docs target_url %}\nURL where the user will be directed\n{% enddocs %}\n\n{% docs broadcast_id %}\nID of the broadcast that generated the shortened URL\n{% enddocs %}\n\n{% docs source %}\nSource of the URL (e.g. SMS, web), origin of the post (e.g. phoenix-web, phoenix-ashes, sms), or source where user was acquired. (e.g. sms, phoenix-next)\n{% enddocs %}\n\n{% docs interaction_type %}\nHow the user interacted with the link (e.g. preview, click)\n{% enddocs %}\n\n{% docs id %}\nUnique identifier for the post\n{% enddocs %}\n\n{% docs type %}\nType of post (e.g. photo)\n{% enddocs %}\n\n{% docs action %}\nPost action (e.g. DefendDreamers_Nov9_CongressCalls, GunViolence2018_Feb15_ParklandResponse)\n{% enddocs %}\n\n{% docs status %}\nPost status (e.g. accepted, rejected)\n{% enddocs %}\n\n{% docs quantity %}\nNumerical quantity of items specified in the call to action (e.g. 10, 200)\n{% enddocs %}\n\n{% docs source_bucket %}\nGrouping bucket for origin of the post (e.g. web, sms) \n{% enddocs %}\n\n{% docs created_at %}\nWhen the item was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs updated_at %}\nWhen the item was updated in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs text %}\nText of the post (e.g. \"Zoo animals and a super hero trying to help too!\") \n{% enddocs %}\n\n{% docs signup_id %}\nUnique identifier for the signup \n{% enddocs %}\n\n{% docs post_class %}\nClass of the signup (e.g. \"photo - default\", \"phone-call - DefendDreamers_Jan16_BothBodies\")\n{% enddocs %}\n\n{% docs is_accepted %}\nWhether the post has been accepted to be displayed to the public on the website\n{% enddocs %}\n\n{% docs action_id %}\nInternal identifier of the action \n{% enddocs %}\n\n{% docs location %}\nLocation where the action takes place (e.g. US-NY)\n{% enddocs %}\n\n{% docs postal_code %}\nPostal code where the action takes place\n{% enddocs %}\n\n{% docs is_reportback %}\nWhether the post is a reportback. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs civic_action %}\nWhether the post is a Civic Action. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs scholarship_entry %}\nWhether the post is a Scholarship Entry. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs why_participated %}\nWhy the user participated in this action. Entered by the user.\n{% enddocs %}\n\n{% docs details %}\nDetails about the post. Contains contentfulId and other information (e.g. {\"campaignContentfulId\":\"6ATBgGEQEeJoIcxs1qbwaC\"})\n{% enddocs %}\n\n{% docs email %}\nEmail address of the user.\n{% enddocs %}\n\n{% docs source_details %}\nDetails about the source of the item. This is sometimes represented as a JSON object, and for other tables like Turbovote its represented as a string. (e.g. \"{\"contentful_id\":\"3CTLlXfbwtz1FOMpl31SKV\",\"utm_source\":\"scholarship_listing\",\"utm_medium\":\"referral\",\"utm_campaign\":\"fastweb_2019_08\"}\", newsletter_456)\n{% enddocs %}\n\n{% docs campaign_id %}\nThis is a unique identifier for the campaign\n{% enddocs %}\n\n{% docs campaign_run_id %}\nUnique identifier for the campaign run\n{% enddocs %}\n\n{% docs campaign_name %}\nName of the campaign\n{% enddocs %}\n\n{% docs campaign_cause %}\nCampaign cause (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_run_start_date %}\nStart date of the campaign run\n{% enddocs %}\n\n{% docs campaign_run_end_date %}\nEnd date of the campaign run\n{% enddocs %}\n\n{% docs campaign_created_date %}\nWhen the campaign was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs campaign_node_id %}\nInternal unique node id for the campaign\n{% enddocs %}\n\n{% docs campaign_node_id_title %}\nCampaign title\n{% enddocs %}\n\n{% docs campaign_run_id_title %}\nTitle of the campaign run\n{% enddocs %}\n\n{% docs campaign_action_type %}\nCampaign action type (eg. Make Something, Share Something)\n{% enddocs %}\n\n{% docs campaign_cause_type %}\nCampaign cause type (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_noun %}\nNoun applicable to the user's action\n{% enddocs %}\n\n{% docs campaign_verb %}\nVerb describing the action the user should take\n{% enddocs %}\n\n{% docs campaign_cta %}\nCampaign's call to action\n{% enddocs %}\n\n{% docs campaign_language %}\n\"Language in which the campaign is available\"\n{% enddocs %}\n\n{% docs agent_id %}\nIf set, the content type of the picture the member is sending us. Exp. image/png.\n{% enddocs %}\n\n{% docs attachment_content_type %}\nIf set, the handle of the Front agent this outbound support message is from.\n{% enddocs %}\n\n{% docs topic %}\nHolds a reference to the **last** campaign topic the member's conversation was in. This is useful to allow members to talk to Gambit and get quick responses (through Rivescript), without Gambit completely forgetting what state the member's interaction with a campaign topic was in.\n{% enddocs %}\n\n{% docs action_serial_id %}\nSerial id for the user's action. Depends on the source of the action. May be the bertly click id, sms message id, etc.\n{% enddocs %}\n\n{% docs channel %}\nChannel for the user's action. Depends on the source of the action. (e.g. web, sms)\n{% enddocs %}\n\n{% docs first_action_month %}\nMonth during which the user took their first action. \n{% enddocs %}\n\n{% docs event_id %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs event_source %}\nApplication source for event (eg. Phoenix, Northstar)\n{% enddocs %}\n\n{% docs event_datetime %}\nWhen the event occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs event_name %}\nName of the event (eg. northstar_submitted_register, https://docs.google.com/spreadsheets/d/1lm-fGrIm85nUTxSojqyCt_Ehmm1zEbViFhKpxcJiz1A/edit#gid=406441516)\n{% enddocs %}\n\n{% docs event_type %}\nType of event (pv = 'Page View', se = 'Structured Event')\n{% enddocs %}\n\n{% docs host %}\nURL host where event occurred (eg. www.dosomething.org or identity.dosomething.org)\n{% enddocs %}\n\n{% docs path %}\nURL path event occurred at (eg. /login or /us/campaigns/huddle-for-heroes)\n{% enddocs %}\n\n{% docs query_parameters %}\nOptional query parameters for the request (eg. query=huddle)\n{% enddocs %}\n\n{% docs se_category %}\nCategory of event (eg. focused_field, authentication) - Custom structured event\n{% enddocs %}\n\n{% docs se_action %}\nAction performed / event name (eg. form_submitted, action_failed) - Custom structured event\n{% enddocs %}\n\n{% docs se_label %}\nThe object of the action (eg. first_name, register, voter_reg_status) - Custom structured event\n{% enddocs %}\n\n{% docs session_id %}\nUnique identifier of the user's session\n{% enddocs %}\n\n{% docs session_counter %}\nHow many sessions a user has started\n{% enddocs %}\n\n{% docs browser_size %}\nWhich type of browser a user is using (eg. Mobile, Desktop)\n{% enddocs %}\n\n{% docs northstar_id %}\nThe Northstar ID of the user who generated the event\n{% enddocs %}\n\n{% docs device_id %}\nID of the device used\n{% enddocs %}\n\n{% docs referrer_host %}\nURL host of the referring site (eg. google.com)\n{% enddocs %}\n\n{% docs referrer_path %}\nURL path from referring site (eg. /10-stats-on-teen-drug-and-alcohol-use/)\n{% enddocs %}\n\n{% docs referrer_source %}\nReferrer source name (eg. Google, Facebook)\n{% enddocs %}\n\n{% docs utm_source %}\nTracks where the traffic is coming from. (eg. scholarship_listing, Facebook)\n{% enddocs %}\n\n{% docs utm_medium %}\nHow the traffic got to the platform (eg. referral, CPC)\n{% enddocs %}\n\n{% docs utm_campaign %}\nTracks which campaign the traffic was generated by. Shows up in Google Analytics as Campaign Name (eg. editorial_newsletter)\n{% enddocs %}\n\n{% docs url %}\nURL of campaign (eg. https://dosome.click/nyn5m7)\n{% enddocs %}\n\n{% docs modal_type %}\nNULL or SURVEY_MODAL\n{% enddocs %}\n\n{% docs landing_datetime %}\nWhen the session started in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs ending_datetime %}\nWhen the session ended in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs session_duration_seconds %}\nSession duration in seconds\n{% enddocs %}\n\n{% docs num_pages_views %}\nNumber of pages viewed in session\n{% enddocs %}\n\n{% docs landing_page %}\nFirst page the user viewed in the session (eg. /us/facts/11-facts-about-bp-oil-spill)\n{% enddocs %}\n\n{% docs exit_page %}\n\"Which page the user ended or exited their session from (eg. /us/campaigns/green-your-getaway)\"\n{% enddocs %}\n\n{% docs days_since_last_session %}\n\"Days since their last session.\"\n{% enddocs %}\n\n{% docs post_type %}\nType of post, (e.g. photo, voter-reg)\n{% enddocs %}\n\n{% docs noun %}\nNoun that corresponds to the item in the call to action that was delivered. (e.g. drawings, tweets)\n{% enddocs %}\n\n{% docs verb %}\nVerb corresponding to the action the user took. (e.g. shared, sent, taken)\n{% enddocs %}\n\n{% docs deleted_at %}\nDate time in UTC when a user deleted their post.\n{% enddocs %}\n\n{% docs _fivetran_deleted %}\nMarks rows that were deleted in the source table\n{% enddocs %}\n\n{% docs _fivetran_synced %}\n(UTC timestamp) keeps track of when each row was last successfully synced\n{% enddocs %}\n\n{% docs reportback %}\nWhether the post is a reportback \n{% enddocs %}\n\n{% docs active %}\nWhether the user is active \n{% enddocs %}\n\n{% docs anonymous %}\nWhether the user is anonymous when making the post \n{% enddocs %}\n\n{% docs callpower_campaign_id %}\nUnique ID corresponding to the Callpower campaign. Callpower allows users to record messages for their representatives.\n{% enddocs %}\n\n{% docs quiz %}\nWhether the post is a quiz \n{% enddocs %}\n\n{% docs action_type %}\nType of action the user took. (e.g. share-something, donate-something)\n{% enddocs %}\n\n{% docs online %}\nWhether the action is a online as opposed to IRL.\n{% enddocs %}\n\n{% docs time_commitment %}\nEstimated time required to do the action (e.g. 3.0+, <0.5)\n{% enddocs %}\n\n{% docs num_signups %}\nQuantity of campaign signups\n{% enddocs %}\n\n{% docs most_recent_signup %}\nTimestamp of the most recent signup in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs num_rbs %}\nQuantity of reportbacks for the user\n{% enddocs %}\n\n{% docs total_quantity %}\nTotal quantity of items in reportbacks\n{% enddocs %}\n\n{% docs most_recent_rb %}\nWhen the most recent reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs first_rb %}\nWhen the first reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs avg_time_betw_rbs %}\nCalculated average time between reportbacks.\n{% enddocs %}\n\n{% docs avg_days_next_action_after_rb %}\nCalculated average days until next action after reportback\n{% enddocs %}\n\n{% docs days_to_next_action_after_last_rb %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs most_recent_mam_action %}\nMost recent monthly active member qualifying action in UTC (eg. 2018-01-01 12:00:00).\n{% enddocs %}\n\n{% docs most_recent_email_open %}\nMost recent email open in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs most_recent_all_actions %}\nMost recent timestamp of any action in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs last_action_is_rb %}\nWhether the last action the user took was a reportback\n{% enddocs %}\n\n{% docs days_since_last_action %}\nDays since the user's last action\n{% enddocs %}\n\n{% docs time_to_first_rb %}\nHow much time after registering until the user's first reportback\n{% enddocs %}\n\n{% docs sms_unsubscribed_at %}\nTimestamp of when user unsubscribed from SMS messaging\n{% enddocs %}\n\n{% docs user_unsubscribed_at %}\nTimestamp of when user unsubscribed from email or sms\n{% enddocs %}\n\n{% docs voter_reg_acquisition %}\nWhether the user was an acquisition through voter registration efforts. \n{% enddocs %}\n\n{% docs last_logged_in %}\nDate time in UTC when user last logged in to Northstar\n{% enddocs %}\n\n{% docs last_accessed %}\nDate time in UTC when user last access the website\n{% enddocs %}\n\n{% docs last_messaged_at %}\nDate time in UTC when user was last sent a message via SMS or email\n{% enddocs %}\n\n{% docs facebook_id %}\nUser's facebook id\n{% enddocs %}\n\n{% docs mobile %}\nUsers's mobile phone number\n{% enddocs %}\n\n{% docs birthdate %}\nUser's birthdate\n{% enddocs %}\n\n{% docs first_name %}\nUser's first name\n{% enddocs %}\n\n{% docs last_name %}\nUser's last name\n{% enddocs %}\n\n{% docs voter_registration_status %}\nUser's registration status. (e.g. registration_complete, confirmed, uncertain) \n{% enddocs %}\n\n{% docs finish_with_state %}\nIf the registrant was eligible to use and passed through to complete their registration with their state\u2019s OVR system, it will be indicated in this field (direct quote from Rock-The-Vote documentation). Yes/No value in field.\n{% enddocs %}\n\n{% docs reportback_volume %}\nThis field returns 1 if non voter-reg action, since campaigns team only counts those a 1 reportback. If voter-reg action, we want to count quantity of post as number of registered voters.\n{% enddocs %}\n\n{% docs address_street_1 %}\nFirst line of user's street address\n{% enddocs %}\n\n{% docs address_street_2 %}\nSecond line of user's street address\n{% enddocs %}\n\n{% docs city %}\nUser's city\n{% enddocs %}\n\n{% docs state %}\nUser's state\n{% enddocs %}\n\n{% docs country %}\nUser's country\n{% enddocs %}\n\n{% docs language %}\nUser's language\n{% enddocs %}\n\n{% docs cio_status %}\nStatus of user from CIO. (e.g. customer_subscribed, customer_unsubscribed)\n{% enddocs %}\n\n{% docs cio_status_timestamp %}\nTimestamp when users's status was updated.\n{% enddocs %}\n\n{% docs sms_status %}\nCurrent SMS status. (e.g. undeliverable, unknown)\n{% enddocs %}\n\n{% docs source_detail %}\nDetails of the origin of the user. (e.g. tell_a_friend, other, opt_in_path/197981)\n{% enddocs %}\n\n{% docs badges %}\nWhether the user has any badges. \n{% enddocs %}\n\n{% docs refer_friends %}\nWhether the user is a part of the refer a friend campaign. \n{% enddocs %}\n\n{% docs subscribed_member %}\nWhether the user is subscribed. \n{% enddocs %}\n\n{% docs last_updated_at %}\nTimestamp when users's was updated.\n{% enddocs %}\n\n{% docs school_id %}\nUnique identifier for the user's school. This info comes from the school finder.\n{% enddocs %}\n\n{% docs newsletter_topic %}\nNewsletter topic. (e.g. community, lifestyle)\n{% enddocs %}\n\n{% docs user_agent %}\nFull user agent string for a user's browser (e.g. \"Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:24.0) Gecko/20100101 Firefox/24.0\")\n{% enddocs %}\n\n{% docs drupal_id %}\nOld Drupal user ID\n{% enddocs %}\n\n{% docs campaigns %}\nCampaigns a user is signed up for.\n{% enddocs %}\n\n{% docs audit %}\nA very useful field with data containing information about changes to a user, e.g. timestamps when the user subscribed and unsubscribed.\n{% enddocs %}\n\n{% docs voting_plan_status %}\nThe indication of the user's plan to vote, e.g. voting, not_voting, cant_vote\n{% enddocs %}\n\n{% docs voting_plan_time_of_day %}\nThe time of day when the user plans to vote, e.g morning, afternoon, evening\n{% enddocs %}\n\n{% docs voting_plan_method_of_transport %}\nHow the user plans to get to their polling place. e.g. walk, drive\n{% enddocs %}\n\n{% docs voting_plan_attending_with %}\nWith Whom the user plans to go voting, e.g. family, friends, alone\n{% enddocs %}\n\n{% docs feature_flags %}\nJSON containing info on features like badges and refer-a-friend.\n{% enddocs %}\n\n{% docs dbt_updated_at %}\nDBT snapshot table data. The updated_at timestamp of the source record when this snapshot row was inserted.\n{% enddocs %}\n\n{% docs dbt_scd_id %}\nDBT snapshot table data. A unique key generated for each snapshotted record.\n{% enddocs %}\n\n{% docs dbt_valid_from %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this snapshot row was first inserted\n{% enddocs %}\n\n{% docs dbt_valid_to %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this row row became invalidated.\n{% enddocs %}\n\n{% docs google_id %}\nUser's Google ID obtained from login.\n{% enddocs %}\n\n{% docs causes %}\nCauses in which a user is interested. e.g. animal welfare, education, mental_health\n{% enddocs %}\n\n{% docs email_subscription_status %}\nEmail subscription status of the user\n{% enddocs %}\n\n{% docs role %}\nUser's role, e.g. user, staff\n{% enddocs %}\n\n{% docs cio_backfilled %}\nWhether this user's data was backfilled from CIO\n{% enddocs %}\n\n{% docs addr_source %}\nWhere the user submitted their address, e.g. sms, GDPR\n{% enddocs %}\n\n{% docs email_subscription_topics %}\nEmail subscription topics correspond to categories in CIO in which the user is interested. e.g. lifestyle, community, scholarship\n{% enddocs %}\n\n{% docs sms_paused %}\nWhether we've paused sending sms messages to the user.\n{% enddocs %}\n\n\n\n\n", "name": "source_detail", "unique_id": "ds_dbt.source_detail", "block_contents": "Details of the origin of the user. (e.g. tell_a_friend, other, opt_in_path/197981)"}, "ds_dbt.badges": {"root_path": "/Users/mrich/projects/quasar/quasar/dbt", "resource_type": "docs", "path": "schema.md", "original_file_path": "models/schema.md", "package_name": "ds_dbt", "file_contents": "\n{% docs click_id %}\nThis is a unique identifier for each click\n{% enddocs %}\n\n{% docs click_time %}\nTimestamp when user clicked.\n{% enddocs %}\n\n{% docs shortened %}\nShortened URL\n{% enddocs %}\n\n{% docs target_url %}\nURL where the user will be directed\n{% enddocs %}\n\n{% docs broadcast_id %}\nID of the broadcast that generated the shortened URL\n{% enddocs %}\n\n{% docs source %}\nSource of the URL (e.g. SMS, web), origin of the post (e.g. phoenix-web, phoenix-ashes, sms), or source where user was acquired. (e.g. sms, phoenix-next)\n{% enddocs %}\n\n{% docs interaction_type %}\nHow the user interacted with the link (e.g. preview, click)\n{% enddocs %}\n\n{% docs id %}\nUnique identifier for the post\n{% enddocs %}\n\n{% docs type %}\nType of post (e.g. photo)\n{% enddocs %}\n\n{% docs action %}\nPost action (e.g. DefendDreamers_Nov9_CongressCalls, GunViolence2018_Feb15_ParklandResponse)\n{% enddocs %}\n\n{% docs status %}\nPost status (e.g. accepted, rejected)\n{% enddocs %}\n\n{% docs quantity %}\nNumerical quantity of items specified in the call to action (e.g. 10, 200)\n{% enddocs %}\n\n{% docs source_bucket %}\nGrouping bucket for origin of the post (e.g. web, sms) \n{% enddocs %}\n\n{% docs created_at %}\nWhen the item was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs updated_at %}\nWhen the item was updated in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs text %}\nText of the post (e.g. \"Zoo animals and a super hero trying to help too!\") \n{% enddocs %}\n\n{% docs signup_id %}\nUnique identifier for the signup \n{% enddocs %}\n\n{% docs post_class %}\nClass of the signup (e.g. \"photo - default\", \"phone-call - DefendDreamers_Jan16_BothBodies\")\n{% enddocs %}\n\n{% docs is_accepted %}\nWhether the post has been accepted to be displayed to the public on the website\n{% enddocs %}\n\n{% docs action_id %}\nInternal identifier of the action \n{% enddocs %}\n\n{% docs location %}\nLocation where the action takes place (e.g. US-NY)\n{% enddocs %}\n\n{% docs postal_code %}\nPostal code where the action takes place\n{% enddocs %}\n\n{% docs is_reportback %}\nWhether the post is a reportback. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs civic_action %}\nWhether the post is a Civic Action. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs scholarship_entry %}\nWhether the post is a Scholarship Entry. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs why_participated %}\nWhy the user participated in this action. Entered by the user.\n{% enddocs %}\n\n{% docs details %}\nDetails about the post. Contains contentfulId and other information (e.g. {\"campaignContentfulId\":\"6ATBgGEQEeJoIcxs1qbwaC\"})\n{% enddocs %}\n\n{% docs email %}\nEmail address of the user.\n{% enddocs %}\n\n{% docs source_details %}\nDetails about the source of the item. This is sometimes represented as a JSON object, and for other tables like Turbovote its represented as a string. (e.g. \"{\"contentful_id\":\"3CTLlXfbwtz1FOMpl31SKV\",\"utm_source\":\"scholarship_listing\",\"utm_medium\":\"referral\",\"utm_campaign\":\"fastweb_2019_08\"}\", newsletter_456)\n{% enddocs %}\n\n{% docs campaign_id %}\nThis is a unique identifier for the campaign\n{% enddocs %}\n\n{% docs campaign_run_id %}\nUnique identifier for the campaign run\n{% enddocs %}\n\n{% docs campaign_name %}\nName of the campaign\n{% enddocs %}\n\n{% docs campaign_cause %}\nCampaign cause (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_run_start_date %}\nStart date of the campaign run\n{% enddocs %}\n\n{% docs campaign_run_end_date %}\nEnd date of the campaign run\n{% enddocs %}\n\n{% docs campaign_created_date %}\nWhen the campaign was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs campaign_node_id %}\nInternal unique node id for the campaign\n{% enddocs %}\n\n{% docs campaign_node_id_title %}\nCampaign title\n{% enddocs %}\n\n{% docs campaign_run_id_title %}\nTitle of the campaign run\n{% enddocs %}\n\n{% docs campaign_action_type %}\nCampaign action type (eg. Make Something, Share Something)\n{% enddocs %}\n\n{% docs campaign_cause_type %}\nCampaign cause type (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_noun %}\nNoun applicable to the user's action\n{% enddocs %}\n\n{% docs campaign_verb %}\nVerb describing the action the user should take\n{% enddocs %}\n\n{% docs campaign_cta %}\nCampaign's call to action\n{% enddocs %}\n\n{% docs campaign_language %}\n\"Language in which the campaign is available\"\n{% enddocs %}\n\n{% docs agent_id %}\nIf set, the content type of the picture the member is sending us. Exp. image/png.\n{% enddocs %}\n\n{% docs attachment_content_type %}\nIf set, the handle of the Front agent this outbound support message is from.\n{% enddocs %}\n\n{% docs topic %}\nHolds a reference to the **last** campaign topic the member's conversation was in. This is useful to allow members to talk to Gambit and get quick responses (through Rivescript), without Gambit completely forgetting what state the member's interaction with a campaign topic was in.\n{% enddocs %}\n\n{% docs action_serial_id %}\nSerial id for the user's action. Depends on the source of the action. May be the bertly click id, sms message id, etc.\n{% enddocs %}\n\n{% docs channel %}\nChannel for the user's action. Depends on the source of the action. (e.g. web, sms)\n{% enddocs %}\n\n{% docs first_action_month %}\nMonth during which the user took their first action. \n{% enddocs %}\n\n{% docs event_id %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs event_source %}\nApplication source for event (eg. Phoenix, Northstar)\n{% enddocs %}\n\n{% docs event_datetime %}\nWhen the event occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs event_name %}\nName of the event (eg. northstar_submitted_register, https://docs.google.com/spreadsheets/d/1lm-fGrIm85nUTxSojqyCt_Ehmm1zEbViFhKpxcJiz1A/edit#gid=406441516)\n{% enddocs %}\n\n{% docs event_type %}\nType of event (pv = 'Page View', se = 'Structured Event')\n{% enddocs %}\n\n{% docs host %}\nURL host where event occurred (eg. www.dosomething.org or identity.dosomething.org)\n{% enddocs %}\n\n{% docs path %}\nURL path event occurred at (eg. /login or /us/campaigns/huddle-for-heroes)\n{% enddocs %}\n\n{% docs query_parameters %}\nOptional query parameters for the request (eg. query=huddle)\n{% enddocs %}\n\n{% docs se_category %}\nCategory of event (eg. focused_field, authentication) - Custom structured event\n{% enddocs %}\n\n{% docs se_action %}\nAction performed / event name (eg. form_submitted, action_failed) - Custom structured event\n{% enddocs %}\n\n{% docs se_label %}\nThe object of the action (eg. first_name, register, voter_reg_status) - Custom structured event\n{% enddocs %}\n\n{% docs session_id %}\nUnique identifier of the user's session\n{% enddocs %}\n\n{% docs session_counter %}\nHow many sessions a user has started\n{% enddocs %}\n\n{% docs browser_size %}\nWhich type of browser a user is using (eg. Mobile, Desktop)\n{% enddocs %}\n\n{% docs northstar_id %}\nThe Northstar ID of the user who generated the event\n{% enddocs %}\n\n{% docs device_id %}\nID of the device used\n{% enddocs %}\n\n{% docs referrer_host %}\nURL host of the referring site (eg. google.com)\n{% enddocs %}\n\n{% docs referrer_path %}\nURL path from referring site (eg. /10-stats-on-teen-drug-and-alcohol-use/)\n{% enddocs %}\n\n{% docs referrer_source %}\nReferrer source name (eg. Google, Facebook)\n{% enddocs %}\n\n{% docs utm_source %}\nTracks where the traffic is coming from. (eg. scholarship_listing, Facebook)\n{% enddocs %}\n\n{% docs utm_medium %}\nHow the traffic got to the platform (eg. referral, CPC)\n{% enddocs %}\n\n{% docs utm_campaign %}\nTracks which campaign the traffic was generated by. Shows up in Google Analytics as Campaign Name (eg. editorial_newsletter)\n{% enddocs %}\n\n{% docs url %}\nURL of campaign (eg. https://dosome.click/nyn5m7)\n{% enddocs %}\n\n{% docs modal_type %}\nNULL or SURVEY_MODAL\n{% enddocs %}\n\n{% docs landing_datetime %}\nWhen the session started in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs ending_datetime %}\nWhen the session ended in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs session_duration_seconds %}\nSession duration in seconds\n{% enddocs %}\n\n{% docs num_pages_views %}\nNumber of pages viewed in session\n{% enddocs %}\n\n{% docs landing_page %}\nFirst page the user viewed in the session (eg. /us/facts/11-facts-about-bp-oil-spill)\n{% enddocs %}\n\n{% docs exit_page %}\n\"Which page the user ended or exited their session from (eg. /us/campaigns/green-your-getaway)\"\n{% enddocs %}\n\n{% docs days_since_last_session %}\n\"Days since their last session.\"\n{% enddocs %}\n\n{% docs post_type %}\nType of post, (e.g. photo, voter-reg)\n{% enddocs %}\n\n{% docs noun %}\nNoun that corresponds to the item in the call to action that was delivered. (e.g. drawings, tweets)\n{% enddocs %}\n\n{% docs verb %}\nVerb corresponding to the action the user took. (e.g. shared, sent, taken)\n{% enddocs %}\n\n{% docs deleted_at %}\nDate time in UTC when a user deleted their post.\n{% enddocs %}\n\n{% docs _fivetran_deleted %}\nMarks rows that were deleted in the source table\n{% enddocs %}\n\n{% docs _fivetran_synced %}\n(UTC timestamp) keeps track of when each row was last successfully synced\n{% enddocs %}\n\n{% docs reportback %}\nWhether the post is a reportback \n{% enddocs %}\n\n{% docs active %}\nWhether the user is active \n{% enddocs %}\n\n{% docs anonymous %}\nWhether the user is anonymous when making the post \n{% enddocs %}\n\n{% docs callpower_campaign_id %}\nUnique ID corresponding to the Callpower campaign. Callpower allows users to record messages for their representatives.\n{% enddocs %}\n\n{% docs quiz %}\nWhether the post is a quiz \n{% enddocs %}\n\n{% docs action_type %}\nType of action the user took. (e.g. share-something, donate-something)\n{% enddocs %}\n\n{% docs online %}\nWhether the action is a online as opposed to IRL.\n{% enddocs %}\n\n{% docs time_commitment %}\nEstimated time required to do the action (e.g. 3.0+, <0.5)\n{% enddocs %}\n\n{% docs num_signups %}\nQuantity of campaign signups\n{% enddocs %}\n\n{% docs most_recent_signup %}\nTimestamp of the most recent signup in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs num_rbs %}\nQuantity of reportbacks for the user\n{% enddocs %}\n\n{% docs total_quantity %}\nTotal quantity of items in reportbacks\n{% enddocs %}\n\n{% docs most_recent_rb %}\nWhen the most recent reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs first_rb %}\nWhen the first reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs avg_time_betw_rbs %}\nCalculated average time between reportbacks.\n{% enddocs %}\n\n{% docs avg_days_next_action_after_rb %}\nCalculated average days until next action after reportback\n{% enddocs %}\n\n{% docs days_to_next_action_after_last_rb %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs most_recent_mam_action %}\nMost recent monthly active member qualifying action in UTC (eg. 2018-01-01 12:00:00).\n{% enddocs %}\n\n{% docs most_recent_email_open %}\nMost recent email open in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs most_recent_all_actions %}\nMost recent timestamp of any action in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs last_action_is_rb %}\nWhether the last action the user took was a reportback\n{% enddocs %}\n\n{% docs days_since_last_action %}\nDays since the user's last action\n{% enddocs %}\n\n{% docs time_to_first_rb %}\nHow much time after registering until the user's first reportback\n{% enddocs %}\n\n{% docs sms_unsubscribed_at %}\nTimestamp of when user unsubscribed from SMS messaging\n{% enddocs %}\n\n{% docs user_unsubscribed_at %}\nTimestamp of when user unsubscribed from email or sms\n{% enddocs %}\n\n{% docs voter_reg_acquisition %}\nWhether the user was an acquisition through voter registration efforts. \n{% enddocs %}\n\n{% docs last_logged_in %}\nDate time in UTC when user last logged in to Northstar\n{% enddocs %}\n\n{% docs last_accessed %}\nDate time in UTC when user last access the website\n{% enddocs %}\n\n{% docs last_messaged_at %}\nDate time in UTC when user was last sent a message via SMS or email\n{% enddocs %}\n\n{% docs facebook_id %}\nUser's facebook id\n{% enddocs %}\n\n{% docs mobile %}\nUsers's mobile phone number\n{% enddocs %}\n\n{% docs birthdate %}\nUser's birthdate\n{% enddocs %}\n\n{% docs first_name %}\nUser's first name\n{% enddocs %}\n\n{% docs last_name %}\nUser's last name\n{% enddocs %}\n\n{% docs voter_registration_status %}\nUser's registration status. (e.g. registration_complete, confirmed, uncertain) \n{% enddocs %}\n\n{% docs finish_with_state %}\nIf the registrant was eligible to use and passed through to complete their registration with their state\u2019s OVR system, it will be indicated in this field (direct quote from Rock-The-Vote documentation). Yes/No value in field.\n{% enddocs %}\n\n{% docs reportback_volume %}\nThis field returns 1 if non voter-reg action, since campaigns team only counts those a 1 reportback. If voter-reg action, we want to count quantity of post as number of registered voters.\n{% enddocs %}\n\n{% docs address_street_1 %}\nFirst line of user's street address\n{% enddocs %}\n\n{% docs address_street_2 %}\nSecond line of user's street address\n{% enddocs %}\n\n{% docs city %}\nUser's city\n{% enddocs %}\n\n{% docs state %}\nUser's state\n{% enddocs %}\n\n{% docs country %}\nUser's country\n{% enddocs %}\n\n{% docs language %}\nUser's language\n{% enddocs %}\n\n{% docs cio_status %}\nStatus of user from CIO. (e.g. customer_subscribed, customer_unsubscribed)\n{% enddocs %}\n\n{% docs cio_status_timestamp %}\nTimestamp when users's status was updated.\n{% enddocs %}\n\n{% docs sms_status %}\nCurrent SMS status. (e.g. undeliverable, unknown)\n{% enddocs %}\n\n{% docs source_detail %}\nDetails of the origin of the user. (e.g. tell_a_friend, other, opt_in_path/197981)\n{% enddocs %}\n\n{% docs badges %}\nWhether the user has any badges. \n{% enddocs %}\n\n{% docs refer_friends %}\nWhether the user is a part of the refer a friend campaign. \n{% enddocs %}\n\n{% docs subscribed_member %}\nWhether the user is subscribed. \n{% enddocs %}\n\n{% docs last_updated_at %}\nTimestamp when users's was updated.\n{% enddocs %}\n\n{% docs school_id %}\nUnique identifier for the user's school. This info comes from the school finder.\n{% enddocs %}\n\n{% docs newsletter_topic %}\nNewsletter topic. (e.g. community, lifestyle)\n{% enddocs %}\n\n{% docs user_agent %}\nFull user agent string for a user's browser (e.g. \"Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:24.0) Gecko/20100101 Firefox/24.0\")\n{% enddocs %}\n\n{% docs drupal_id %}\nOld Drupal user ID\n{% enddocs %}\n\n{% docs campaigns %}\nCampaigns a user is signed up for.\n{% enddocs %}\n\n{% docs audit %}\nA very useful field with data containing information about changes to a user, e.g. timestamps when the user subscribed and unsubscribed.\n{% enddocs %}\n\n{% docs voting_plan_status %}\nThe indication of the user's plan to vote, e.g. voting, not_voting, cant_vote\n{% enddocs %}\n\n{% docs voting_plan_time_of_day %}\nThe time of day when the user plans to vote, e.g morning, afternoon, evening\n{% enddocs %}\n\n{% docs voting_plan_method_of_transport %}\nHow the user plans to get to their polling place. e.g. walk, drive\n{% enddocs %}\n\n{% docs voting_plan_attending_with %}\nWith Whom the user plans to go voting, e.g. family, friends, alone\n{% enddocs %}\n\n{% docs feature_flags %}\nJSON containing info on features like badges and refer-a-friend.\n{% enddocs %}\n\n{% docs dbt_updated_at %}\nDBT snapshot table data. The updated_at timestamp of the source record when this snapshot row was inserted.\n{% enddocs %}\n\n{% docs dbt_scd_id %}\nDBT snapshot table data. A unique key generated for each snapshotted record.\n{% enddocs %}\n\n{% docs dbt_valid_from %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this snapshot row was first inserted\n{% enddocs %}\n\n{% docs dbt_valid_to %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this row row became invalidated.\n{% enddocs %}\n\n{% docs google_id %}\nUser's Google ID obtained from login.\n{% enddocs %}\n\n{% docs causes %}\nCauses in which a user is interested. e.g. animal welfare, education, mental_health\n{% enddocs %}\n\n{% docs email_subscription_status %}\nEmail subscription status of the user\n{% enddocs %}\n\n{% docs role %}\nUser's role, e.g. user, staff\n{% enddocs %}\n\n{% docs cio_backfilled %}\nWhether this user's data was backfilled from CIO\n{% enddocs %}\n\n{% docs addr_source %}\nWhere the user submitted their address, e.g. sms, GDPR\n{% enddocs %}\n\n{% docs email_subscription_topics %}\nEmail subscription topics correspond to categories in CIO in which the user is interested. e.g. lifestyle, community, scholarship\n{% enddocs %}\n\n{% docs sms_paused %}\nWhether we've paused sending sms messages to the user.\n{% enddocs %}\n\n\n\n\n", "name": "badges", "unique_id": "ds_dbt.badges", "block_contents": "Whether the user has any badges."}, "ds_dbt.refer_friends": {"root_path": "/Users/mrich/projects/quasar/quasar/dbt", "resource_type": "docs", "path": "schema.md", "original_file_path": "models/schema.md", "package_name": "ds_dbt", "file_contents": "\n{% docs click_id %}\nThis is a unique identifier for each click\n{% enddocs %}\n\n{% docs click_time %}\nTimestamp when user clicked.\n{% enddocs %}\n\n{% docs shortened %}\nShortened URL\n{% enddocs %}\n\n{% docs target_url %}\nURL where the user will be directed\n{% enddocs %}\n\n{% docs broadcast_id %}\nID of the broadcast that generated the shortened URL\n{% enddocs %}\n\n{% docs source %}\nSource of the URL (e.g. SMS, web), origin of the post (e.g. phoenix-web, phoenix-ashes, sms), or source where user was acquired. (e.g. sms, phoenix-next)\n{% enddocs %}\n\n{% docs interaction_type %}\nHow the user interacted with the link (e.g. preview, click)\n{% enddocs %}\n\n{% docs id %}\nUnique identifier for the post\n{% enddocs %}\n\n{% docs type %}\nType of post (e.g. photo)\n{% enddocs %}\n\n{% docs action %}\nPost action (e.g. DefendDreamers_Nov9_CongressCalls, GunViolence2018_Feb15_ParklandResponse)\n{% enddocs %}\n\n{% docs status %}\nPost status (e.g. accepted, rejected)\n{% enddocs %}\n\n{% docs quantity %}\nNumerical quantity of items specified in the call to action (e.g. 10, 200)\n{% enddocs %}\n\n{% docs source_bucket %}\nGrouping bucket for origin of the post (e.g. web, sms) \n{% enddocs %}\n\n{% docs created_at %}\nWhen the item was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs updated_at %}\nWhen the item was updated in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs text %}\nText of the post (e.g. \"Zoo animals and a super hero trying to help too!\") \n{% enddocs %}\n\n{% docs signup_id %}\nUnique identifier for the signup \n{% enddocs %}\n\n{% docs post_class %}\nClass of the signup (e.g. \"photo - default\", \"phone-call - DefendDreamers_Jan16_BothBodies\")\n{% enddocs %}\n\n{% docs is_accepted %}\nWhether the post has been accepted to be displayed to the public on the website\n{% enddocs %}\n\n{% docs action_id %}\nInternal identifier of the action \n{% enddocs %}\n\n{% docs location %}\nLocation where the action takes place (e.g. US-NY)\n{% enddocs %}\n\n{% docs postal_code %}\nPostal code where the action takes place\n{% enddocs %}\n\n{% docs is_reportback %}\nWhether the post is a reportback. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs civic_action %}\nWhether the post is a Civic Action. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs scholarship_entry %}\nWhether the post is a Scholarship Entry. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs why_participated %}\nWhy the user participated in this action. Entered by the user.\n{% enddocs %}\n\n{% docs details %}\nDetails about the post. Contains contentfulId and other information (e.g. {\"campaignContentfulId\":\"6ATBgGEQEeJoIcxs1qbwaC\"})\n{% enddocs %}\n\n{% docs email %}\nEmail address of the user.\n{% enddocs %}\n\n{% docs source_details %}\nDetails about the source of the item. This is sometimes represented as a JSON object, and for other tables like Turbovote its represented as a string. (e.g. \"{\"contentful_id\":\"3CTLlXfbwtz1FOMpl31SKV\",\"utm_source\":\"scholarship_listing\",\"utm_medium\":\"referral\",\"utm_campaign\":\"fastweb_2019_08\"}\", newsletter_456)\n{% enddocs %}\n\n{% docs campaign_id %}\nThis is a unique identifier for the campaign\n{% enddocs %}\n\n{% docs campaign_run_id %}\nUnique identifier for the campaign run\n{% enddocs %}\n\n{% docs campaign_name %}\nName of the campaign\n{% enddocs %}\n\n{% docs campaign_cause %}\nCampaign cause (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_run_start_date %}\nStart date of the campaign run\n{% enddocs %}\n\n{% docs campaign_run_end_date %}\nEnd date of the campaign run\n{% enddocs %}\n\n{% docs campaign_created_date %}\nWhen the campaign was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs campaign_node_id %}\nInternal unique node id for the campaign\n{% enddocs %}\n\n{% docs campaign_node_id_title %}\nCampaign title\n{% enddocs %}\n\n{% docs campaign_run_id_title %}\nTitle of the campaign run\n{% enddocs %}\n\n{% docs campaign_action_type %}\nCampaign action type (eg. Make Something, Share Something)\n{% enddocs %}\n\n{% docs campaign_cause_type %}\nCampaign cause type (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_noun %}\nNoun applicable to the user's action\n{% enddocs %}\n\n{% docs campaign_verb %}\nVerb describing the action the user should take\n{% enddocs %}\n\n{% docs campaign_cta %}\nCampaign's call to action\n{% enddocs %}\n\n{% docs campaign_language %}\n\"Language in which the campaign is available\"\n{% enddocs %}\n\n{% docs agent_id %}\nIf set, the content type of the picture the member is sending us. Exp. image/png.\n{% enddocs %}\n\n{% docs attachment_content_type %}\nIf set, the handle of the Front agent this outbound support message is from.\n{% enddocs %}\n\n{% docs topic %}\nHolds a reference to the **last** campaign topic the member's conversation was in. This is useful to allow members to talk to Gambit and get quick responses (through Rivescript), without Gambit completely forgetting what state the member's interaction with a campaign topic was in.\n{% enddocs %}\n\n{% docs action_serial_id %}\nSerial id for the user's action. Depends on the source of the action. May be the bertly click id, sms message id, etc.\n{% enddocs %}\n\n{% docs channel %}\nChannel for the user's action. Depends on the source of the action. (e.g. web, sms)\n{% enddocs %}\n\n{% docs first_action_month %}\nMonth during which the user took their first action. \n{% enddocs %}\n\n{% docs event_id %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs event_source %}\nApplication source for event (eg. Phoenix, Northstar)\n{% enddocs %}\n\n{% docs event_datetime %}\nWhen the event occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs event_name %}\nName of the event (eg. northstar_submitted_register, https://docs.google.com/spreadsheets/d/1lm-fGrIm85nUTxSojqyCt_Ehmm1zEbViFhKpxcJiz1A/edit#gid=406441516)\n{% enddocs %}\n\n{% docs event_type %}\nType of event (pv = 'Page View', se = 'Structured Event')\n{% enddocs %}\n\n{% docs host %}\nURL host where event occurred (eg. www.dosomething.org or identity.dosomething.org)\n{% enddocs %}\n\n{% docs path %}\nURL path event occurred at (eg. /login or /us/campaigns/huddle-for-heroes)\n{% enddocs %}\n\n{% docs query_parameters %}\nOptional query parameters for the request (eg. query=huddle)\n{% enddocs %}\n\n{% docs se_category %}\nCategory of event (eg. focused_field, authentication) - Custom structured event\n{% enddocs %}\n\n{% docs se_action %}\nAction performed / event name (eg. form_submitted, action_failed) - Custom structured event\n{% enddocs %}\n\n{% docs se_label %}\nThe object of the action (eg. first_name, register, voter_reg_status) - Custom structured event\n{% enddocs %}\n\n{% docs session_id %}\nUnique identifier of the user's session\n{% enddocs %}\n\n{% docs session_counter %}\nHow many sessions a user has started\n{% enddocs %}\n\n{% docs browser_size %}\nWhich type of browser a user is using (eg. Mobile, Desktop)\n{% enddocs %}\n\n{% docs northstar_id %}\nThe Northstar ID of the user who generated the event\n{% enddocs %}\n\n{% docs device_id %}\nID of the device used\n{% enddocs %}\n\n{% docs referrer_host %}\nURL host of the referring site (eg. google.com)\n{% enddocs %}\n\n{% docs referrer_path %}\nURL path from referring site (eg. /10-stats-on-teen-drug-and-alcohol-use/)\n{% enddocs %}\n\n{% docs referrer_source %}\nReferrer source name (eg. Google, Facebook)\n{% enddocs %}\n\n{% docs utm_source %}\nTracks where the traffic is coming from. (eg. scholarship_listing, Facebook)\n{% enddocs %}\n\n{% docs utm_medium %}\nHow the traffic got to the platform (eg. referral, CPC)\n{% enddocs %}\n\n{% docs utm_campaign %}\nTracks which campaign the traffic was generated by. Shows up in Google Analytics as Campaign Name (eg. editorial_newsletter)\n{% enddocs %}\n\n{% docs url %}\nURL of campaign (eg. https://dosome.click/nyn5m7)\n{% enddocs %}\n\n{% docs modal_type %}\nNULL or SURVEY_MODAL\n{% enddocs %}\n\n{% docs landing_datetime %}\nWhen the session started in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs ending_datetime %}\nWhen the session ended in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs session_duration_seconds %}\nSession duration in seconds\n{% enddocs %}\n\n{% docs num_pages_views %}\nNumber of pages viewed in session\n{% enddocs %}\n\n{% docs landing_page %}\nFirst page the user viewed in the session (eg. /us/facts/11-facts-about-bp-oil-spill)\n{% enddocs %}\n\n{% docs exit_page %}\n\"Which page the user ended or exited their session from (eg. /us/campaigns/green-your-getaway)\"\n{% enddocs %}\n\n{% docs days_since_last_session %}\n\"Days since their last session.\"\n{% enddocs %}\n\n{% docs post_type %}\nType of post, (e.g. photo, voter-reg)\n{% enddocs %}\n\n{% docs noun %}\nNoun that corresponds to the item in the call to action that was delivered. (e.g. drawings, tweets)\n{% enddocs %}\n\n{% docs verb %}\nVerb corresponding to the action the user took. (e.g. shared, sent, taken)\n{% enddocs %}\n\n{% docs deleted_at %}\nDate time in UTC when a user deleted their post.\n{% enddocs %}\n\n{% docs _fivetran_deleted %}\nMarks rows that were deleted in the source table\n{% enddocs %}\n\n{% docs _fivetran_synced %}\n(UTC timestamp) keeps track of when each row was last successfully synced\n{% enddocs %}\n\n{% docs reportback %}\nWhether the post is a reportback \n{% enddocs %}\n\n{% docs active %}\nWhether the user is active \n{% enddocs %}\n\n{% docs anonymous %}\nWhether the user is anonymous when making the post \n{% enddocs %}\n\n{% docs callpower_campaign_id %}\nUnique ID corresponding to the Callpower campaign. Callpower allows users to record messages for their representatives.\n{% enddocs %}\n\n{% docs quiz %}\nWhether the post is a quiz \n{% enddocs %}\n\n{% docs action_type %}\nType of action the user took. (e.g. share-something, donate-something)\n{% enddocs %}\n\n{% docs online %}\nWhether the action is a online as opposed to IRL.\n{% enddocs %}\n\n{% docs time_commitment %}\nEstimated time required to do the action (e.g. 3.0+, <0.5)\n{% enddocs %}\n\n{% docs num_signups %}\nQuantity of campaign signups\n{% enddocs %}\n\n{% docs most_recent_signup %}\nTimestamp of the most recent signup in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs num_rbs %}\nQuantity of reportbacks for the user\n{% enddocs %}\n\n{% docs total_quantity %}\nTotal quantity of items in reportbacks\n{% enddocs %}\n\n{% docs most_recent_rb %}\nWhen the most recent reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs first_rb %}\nWhen the first reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs avg_time_betw_rbs %}\nCalculated average time between reportbacks.\n{% enddocs %}\n\n{% docs avg_days_next_action_after_rb %}\nCalculated average days until next action after reportback\n{% enddocs %}\n\n{% docs days_to_next_action_after_last_rb %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs most_recent_mam_action %}\nMost recent monthly active member qualifying action in UTC (eg. 2018-01-01 12:00:00).\n{% enddocs %}\n\n{% docs most_recent_email_open %}\nMost recent email open in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs most_recent_all_actions %}\nMost recent timestamp of any action in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs last_action_is_rb %}\nWhether the last action the user took was a reportback\n{% enddocs %}\n\n{% docs days_since_last_action %}\nDays since the user's last action\n{% enddocs %}\n\n{% docs time_to_first_rb %}\nHow much time after registering until the user's first reportback\n{% enddocs %}\n\n{% docs sms_unsubscribed_at %}\nTimestamp of when user unsubscribed from SMS messaging\n{% enddocs %}\n\n{% docs user_unsubscribed_at %}\nTimestamp of when user unsubscribed from email or sms\n{% enddocs %}\n\n{% docs voter_reg_acquisition %}\nWhether the user was an acquisition through voter registration efforts. \n{% enddocs %}\n\n{% docs last_logged_in %}\nDate time in UTC when user last logged in to Northstar\n{% enddocs %}\n\n{% docs last_accessed %}\nDate time in UTC when user last access the website\n{% enddocs %}\n\n{% docs last_messaged_at %}\nDate time in UTC when user was last sent a message via SMS or email\n{% enddocs %}\n\n{% docs facebook_id %}\nUser's facebook id\n{% enddocs %}\n\n{% docs mobile %}\nUsers's mobile phone number\n{% enddocs %}\n\n{% docs birthdate %}\nUser's birthdate\n{% enddocs %}\n\n{% docs first_name %}\nUser's first name\n{% enddocs %}\n\n{% docs last_name %}\nUser's last name\n{% enddocs %}\n\n{% docs voter_registration_status %}\nUser's registration status. (e.g. registration_complete, confirmed, uncertain) \n{% enddocs %}\n\n{% docs finish_with_state %}\nIf the registrant was eligible to use and passed through to complete their registration with their state\u2019s OVR system, it will be indicated in this field (direct quote from Rock-The-Vote documentation). Yes/No value in field.\n{% enddocs %}\n\n{% docs reportback_volume %}\nThis field returns 1 if non voter-reg action, since campaigns team only counts those a 1 reportback. If voter-reg action, we want to count quantity of post as number of registered voters.\n{% enddocs %}\n\n{% docs address_street_1 %}\nFirst line of user's street address\n{% enddocs %}\n\n{% docs address_street_2 %}\nSecond line of user's street address\n{% enddocs %}\n\n{% docs city %}\nUser's city\n{% enddocs %}\n\n{% docs state %}\nUser's state\n{% enddocs %}\n\n{% docs country %}\nUser's country\n{% enddocs %}\n\n{% docs language %}\nUser's language\n{% enddocs %}\n\n{% docs cio_status %}\nStatus of user from CIO. (e.g. customer_subscribed, customer_unsubscribed)\n{% enddocs %}\n\n{% docs cio_status_timestamp %}\nTimestamp when users's status was updated.\n{% enddocs %}\n\n{% docs sms_status %}\nCurrent SMS status. (e.g. undeliverable, unknown)\n{% enddocs %}\n\n{% docs source_detail %}\nDetails of the origin of the user. (e.g. tell_a_friend, other, opt_in_path/197981)\n{% enddocs %}\n\n{% docs badges %}\nWhether the user has any badges. \n{% enddocs %}\n\n{% docs refer_friends %}\nWhether the user is a part of the refer a friend campaign. \n{% enddocs %}\n\n{% docs subscribed_member %}\nWhether the user is subscribed. \n{% enddocs %}\n\n{% docs last_updated_at %}\nTimestamp when users's was updated.\n{% enddocs %}\n\n{% docs school_id %}\nUnique identifier for the user's school. This info comes from the school finder.\n{% enddocs %}\n\n{% docs newsletter_topic %}\nNewsletter topic. (e.g. community, lifestyle)\n{% enddocs %}\n\n{% docs user_agent %}\nFull user agent string for a user's browser (e.g. \"Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:24.0) Gecko/20100101 Firefox/24.0\")\n{% enddocs %}\n\n{% docs drupal_id %}\nOld Drupal user ID\n{% enddocs %}\n\n{% docs campaigns %}\nCampaigns a user is signed up for.\n{% enddocs %}\n\n{% docs audit %}\nA very useful field with data containing information about changes to a user, e.g. timestamps when the user subscribed and unsubscribed.\n{% enddocs %}\n\n{% docs voting_plan_status %}\nThe indication of the user's plan to vote, e.g. voting, not_voting, cant_vote\n{% enddocs %}\n\n{% docs voting_plan_time_of_day %}\nThe time of day when the user plans to vote, e.g morning, afternoon, evening\n{% enddocs %}\n\n{% docs voting_plan_method_of_transport %}\nHow the user plans to get to their polling place. e.g. walk, drive\n{% enddocs %}\n\n{% docs voting_plan_attending_with %}\nWith Whom the user plans to go voting, e.g. family, friends, alone\n{% enddocs %}\n\n{% docs feature_flags %}\nJSON containing info on features like badges and refer-a-friend.\n{% enddocs %}\n\n{% docs dbt_updated_at %}\nDBT snapshot table data. The updated_at timestamp of the source record when this snapshot row was inserted.\n{% enddocs %}\n\n{% docs dbt_scd_id %}\nDBT snapshot table data. A unique key generated for each snapshotted record.\n{% enddocs %}\n\n{% docs dbt_valid_from %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this snapshot row was first inserted\n{% enddocs %}\n\n{% docs dbt_valid_to %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this row row became invalidated.\n{% enddocs %}\n\n{% docs google_id %}\nUser's Google ID obtained from login.\n{% enddocs %}\n\n{% docs causes %}\nCauses in which a user is interested. e.g. animal welfare, education, mental_health\n{% enddocs %}\n\n{% docs email_subscription_status %}\nEmail subscription status of the user\n{% enddocs %}\n\n{% docs role %}\nUser's role, e.g. user, staff\n{% enddocs %}\n\n{% docs cio_backfilled %}\nWhether this user's data was backfilled from CIO\n{% enddocs %}\n\n{% docs addr_source %}\nWhere the user submitted their address, e.g. sms, GDPR\n{% enddocs %}\n\n{% docs email_subscription_topics %}\nEmail subscription topics correspond to categories in CIO in which the user is interested. e.g. lifestyle, community, scholarship\n{% enddocs %}\n\n{% docs sms_paused %}\nWhether we've paused sending sms messages to the user.\n{% enddocs %}\n\n\n\n\n", "name": "refer_friends", "unique_id": "ds_dbt.refer_friends", "block_contents": "Whether the user is a part of the refer a friend campaign."}, "ds_dbt.subscribed_member": {"root_path": "/Users/mrich/projects/quasar/quasar/dbt", "resource_type": "docs", "path": "schema.md", "original_file_path": "models/schema.md", "package_name": "ds_dbt", "file_contents": "\n{% docs click_id %}\nThis is a unique identifier for each click\n{% enddocs %}\n\n{% docs click_time %}\nTimestamp when user clicked.\n{% enddocs %}\n\n{% docs shortened %}\nShortened URL\n{% enddocs %}\n\n{% docs target_url %}\nURL where the user will be directed\n{% enddocs %}\n\n{% docs broadcast_id %}\nID of the broadcast that generated the shortened URL\n{% enddocs %}\n\n{% docs source %}\nSource of the URL (e.g. SMS, web), origin of the post (e.g. phoenix-web, phoenix-ashes, sms), or source where user was acquired. (e.g. sms, phoenix-next)\n{% enddocs %}\n\n{% docs interaction_type %}\nHow the user interacted with the link (e.g. preview, click)\n{% enddocs %}\n\n{% docs id %}\nUnique identifier for the post\n{% enddocs %}\n\n{% docs type %}\nType of post (e.g. photo)\n{% enddocs %}\n\n{% docs action %}\nPost action (e.g. DefendDreamers_Nov9_CongressCalls, GunViolence2018_Feb15_ParklandResponse)\n{% enddocs %}\n\n{% docs status %}\nPost status (e.g. accepted, rejected)\n{% enddocs %}\n\n{% docs quantity %}\nNumerical quantity of items specified in the call to action (e.g. 10, 200)\n{% enddocs %}\n\n{% docs source_bucket %}\nGrouping bucket for origin of the post (e.g. web, sms) \n{% enddocs %}\n\n{% docs created_at %}\nWhen the item was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs updated_at %}\nWhen the item was updated in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs text %}\nText of the post (e.g. \"Zoo animals and a super hero trying to help too!\") \n{% enddocs %}\n\n{% docs signup_id %}\nUnique identifier for the signup \n{% enddocs %}\n\n{% docs post_class %}\nClass of the signup (e.g. \"photo - default\", \"phone-call - DefendDreamers_Jan16_BothBodies\")\n{% enddocs %}\n\n{% docs is_accepted %}\nWhether the post has been accepted to be displayed to the public on the website\n{% enddocs %}\n\n{% docs action_id %}\nInternal identifier of the action \n{% enddocs %}\n\n{% docs location %}\nLocation where the action takes place (e.g. US-NY)\n{% enddocs %}\n\n{% docs postal_code %}\nPostal code where the action takes place\n{% enddocs %}\n\n{% docs is_reportback %}\nWhether the post is a reportback. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs civic_action %}\nWhether the post is a Civic Action. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs scholarship_entry %}\nWhether the post is a Scholarship Entry. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs why_participated %}\nWhy the user participated in this action. Entered by the user.\n{% enddocs %}\n\n{% docs details %}\nDetails about the post. Contains contentfulId and other information (e.g. {\"campaignContentfulId\":\"6ATBgGEQEeJoIcxs1qbwaC\"})\n{% enddocs %}\n\n{% docs email %}\nEmail address of the user.\n{% enddocs %}\n\n{% docs source_details %}\nDetails about the source of the item. This is sometimes represented as a JSON object, and for other tables like Turbovote its represented as a string. (e.g. \"{\"contentful_id\":\"3CTLlXfbwtz1FOMpl31SKV\",\"utm_source\":\"scholarship_listing\",\"utm_medium\":\"referral\",\"utm_campaign\":\"fastweb_2019_08\"}\", newsletter_456)\n{% enddocs %}\n\n{% docs campaign_id %}\nThis is a unique identifier for the campaign\n{% enddocs %}\n\n{% docs campaign_run_id %}\nUnique identifier for the campaign run\n{% enddocs %}\n\n{% docs campaign_name %}\nName of the campaign\n{% enddocs %}\n\n{% docs campaign_cause %}\nCampaign cause (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_run_start_date %}\nStart date of the campaign run\n{% enddocs %}\n\n{% docs campaign_run_end_date %}\nEnd date of the campaign run\n{% enddocs %}\n\n{% docs campaign_created_date %}\nWhen the campaign was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs campaign_node_id %}\nInternal unique node id for the campaign\n{% enddocs %}\n\n{% docs campaign_node_id_title %}\nCampaign title\n{% enddocs %}\n\n{% docs campaign_run_id_title %}\nTitle of the campaign run\n{% enddocs %}\n\n{% docs campaign_action_type %}\nCampaign action type (eg. Make Something, Share Something)\n{% enddocs %}\n\n{% docs campaign_cause_type %}\nCampaign cause type (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_noun %}\nNoun applicable to the user's action\n{% enddocs %}\n\n{% docs campaign_verb %}\nVerb describing the action the user should take\n{% enddocs %}\n\n{% docs campaign_cta %}\nCampaign's call to action\n{% enddocs %}\n\n{% docs campaign_language %}\n\"Language in which the campaign is available\"\n{% enddocs %}\n\n{% docs agent_id %}\nIf set, the content type of the picture the member is sending us. Exp. image/png.\n{% enddocs %}\n\n{% docs attachment_content_type %}\nIf set, the handle of the Front agent this outbound support message is from.\n{% enddocs %}\n\n{% docs topic %}\nHolds a reference to the **last** campaign topic the member's conversation was in. This is useful to allow members to talk to Gambit and get quick responses (through Rivescript), without Gambit completely forgetting what state the member's interaction with a campaign topic was in.\n{% enddocs %}\n\n{% docs action_serial_id %}\nSerial id for the user's action. Depends on the source of the action. May be the bertly click id, sms message id, etc.\n{% enddocs %}\n\n{% docs channel %}\nChannel for the user's action. Depends on the source of the action. (e.g. web, sms)\n{% enddocs %}\n\n{% docs first_action_month %}\nMonth during which the user took their first action. \n{% enddocs %}\n\n{% docs event_id %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs event_source %}\nApplication source for event (eg. Phoenix, Northstar)\n{% enddocs %}\n\n{% docs event_datetime %}\nWhen the event occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs event_name %}\nName of the event (eg. northstar_submitted_register, https://docs.google.com/spreadsheets/d/1lm-fGrIm85nUTxSojqyCt_Ehmm1zEbViFhKpxcJiz1A/edit#gid=406441516)\n{% enddocs %}\n\n{% docs event_type %}\nType of event (pv = 'Page View', se = 'Structured Event')\n{% enddocs %}\n\n{% docs host %}\nURL host where event occurred (eg. www.dosomething.org or identity.dosomething.org)\n{% enddocs %}\n\n{% docs path %}\nURL path event occurred at (eg. /login or /us/campaigns/huddle-for-heroes)\n{% enddocs %}\n\n{% docs query_parameters %}\nOptional query parameters for the request (eg. query=huddle)\n{% enddocs %}\n\n{% docs se_category %}\nCategory of event (eg. focused_field, authentication) - Custom structured event\n{% enddocs %}\n\n{% docs se_action %}\nAction performed / event name (eg. form_submitted, action_failed) - Custom structured event\n{% enddocs %}\n\n{% docs se_label %}\nThe object of the action (eg. first_name, register, voter_reg_status) - Custom structured event\n{% enddocs %}\n\n{% docs session_id %}\nUnique identifier of the user's session\n{% enddocs %}\n\n{% docs session_counter %}\nHow many sessions a user has started\n{% enddocs %}\n\n{% docs browser_size %}\nWhich type of browser a user is using (eg. Mobile, Desktop)\n{% enddocs %}\n\n{% docs northstar_id %}\nThe Northstar ID of the user who generated the event\n{% enddocs %}\n\n{% docs device_id %}\nID of the device used\n{% enddocs %}\n\n{% docs referrer_host %}\nURL host of the referring site (eg. google.com)\n{% enddocs %}\n\n{% docs referrer_path %}\nURL path from referring site (eg. /10-stats-on-teen-drug-and-alcohol-use/)\n{% enddocs %}\n\n{% docs referrer_source %}\nReferrer source name (eg. Google, Facebook)\n{% enddocs %}\n\n{% docs utm_source %}\nTracks where the traffic is coming from. (eg. scholarship_listing, Facebook)\n{% enddocs %}\n\n{% docs utm_medium %}\nHow the traffic got to the platform (eg. referral, CPC)\n{% enddocs %}\n\n{% docs utm_campaign %}\nTracks which campaign the traffic was generated by. Shows up in Google Analytics as Campaign Name (eg. editorial_newsletter)\n{% enddocs %}\n\n{% docs url %}\nURL of campaign (eg. https://dosome.click/nyn5m7)\n{% enddocs %}\n\n{% docs modal_type %}\nNULL or SURVEY_MODAL\n{% enddocs %}\n\n{% docs landing_datetime %}\nWhen the session started in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs ending_datetime %}\nWhen the session ended in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs session_duration_seconds %}\nSession duration in seconds\n{% enddocs %}\n\n{% docs num_pages_views %}\nNumber of pages viewed in session\n{% enddocs %}\n\n{% docs landing_page %}\nFirst page the user viewed in the session (eg. /us/facts/11-facts-about-bp-oil-spill)\n{% enddocs %}\n\n{% docs exit_page %}\n\"Which page the user ended or exited their session from (eg. /us/campaigns/green-your-getaway)\"\n{% enddocs %}\n\n{% docs days_since_last_session %}\n\"Days since their last session.\"\n{% enddocs %}\n\n{% docs post_type %}\nType of post, (e.g. photo, voter-reg)\n{% enddocs %}\n\n{% docs noun %}\nNoun that corresponds to the item in the call to action that was delivered. (e.g. drawings, tweets)\n{% enddocs %}\n\n{% docs verb %}\nVerb corresponding to the action the user took. (e.g. shared, sent, taken)\n{% enddocs %}\n\n{% docs deleted_at %}\nDate time in UTC when a user deleted their post.\n{% enddocs %}\n\n{% docs _fivetran_deleted %}\nMarks rows that were deleted in the source table\n{% enddocs %}\n\n{% docs _fivetran_synced %}\n(UTC timestamp) keeps track of when each row was last successfully synced\n{% enddocs %}\n\n{% docs reportback %}\nWhether the post is a reportback \n{% enddocs %}\n\n{% docs active %}\nWhether the user is active \n{% enddocs %}\n\n{% docs anonymous %}\nWhether the user is anonymous when making the post \n{% enddocs %}\n\n{% docs callpower_campaign_id %}\nUnique ID corresponding to the Callpower campaign. Callpower allows users to record messages for their representatives.\n{% enddocs %}\n\n{% docs quiz %}\nWhether the post is a quiz \n{% enddocs %}\n\n{% docs action_type %}\nType of action the user took. (e.g. share-something, donate-something)\n{% enddocs %}\n\n{% docs online %}\nWhether the action is a online as opposed to IRL.\n{% enddocs %}\n\n{% docs time_commitment %}\nEstimated time required to do the action (e.g. 3.0+, <0.5)\n{% enddocs %}\n\n{% docs num_signups %}\nQuantity of campaign signups\n{% enddocs %}\n\n{% docs most_recent_signup %}\nTimestamp of the most recent signup in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs num_rbs %}\nQuantity of reportbacks for the user\n{% enddocs %}\n\n{% docs total_quantity %}\nTotal quantity of items in reportbacks\n{% enddocs %}\n\n{% docs most_recent_rb %}\nWhen the most recent reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs first_rb %}\nWhen the first reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs avg_time_betw_rbs %}\nCalculated average time between reportbacks.\n{% enddocs %}\n\n{% docs avg_days_next_action_after_rb %}\nCalculated average days until next action after reportback\n{% enddocs %}\n\n{% docs days_to_next_action_after_last_rb %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs most_recent_mam_action %}\nMost recent monthly active member qualifying action in UTC (eg. 2018-01-01 12:00:00).\n{% enddocs %}\n\n{% docs most_recent_email_open %}\nMost recent email open in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs most_recent_all_actions %}\nMost recent timestamp of any action in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs last_action_is_rb %}\nWhether the last action the user took was a reportback\n{% enddocs %}\n\n{% docs days_since_last_action %}\nDays since the user's last action\n{% enddocs %}\n\n{% docs time_to_first_rb %}\nHow much time after registering until the user's first reportback\n{% enddocs %}\n\n{% docs sms_unsubscribed_at %}\nTimestamp of when user unsubscribed from SMS messaging\n{% enddocs %}\n\n{% docs user_unsubscribed_at %}\nTimestamp of when user unsubscribed from email or sms\n{% enddocs %}\n\n{% docs voter_reg_acquisition %}\nWhether the user was an acquisition through voter registration efforts. \n{% enddocs %}\n\n{% docs last_logged_in %}\nDate time in UTC when user last logged in to Northstar\n{% enddocs %}\n\n{% docs last_accessed %}\nDate time in UTC when user last access the website\n{% enddocs %}\n\n{% docs last_messaged_at %}\nDate time in UTC when user was last sent a message via SMS or email\n{% enddocs %}\n\n{% docs facebook_id %}\nUser's facebook id\n{% enddocs %}\n\n{% docs mobile %}\nUsers's mobile phone number\n{% enddocs %}\n\n{% docs birthdate %}\nUser's birthdate\n{% enddocs %}\n\n{% docs first_name %}\nUser's first name\n{% enddocs %}\n\n{% docs last_name %}\nUser's last name\n{% enddocs %}\n\n{% docs voter_registration_status %}\nUser's registration status. (e.g. registration_complete, confirmed, uncertain) \n{% enddocs %}\n\n{% docs finish_with_state %}\nIf the registrant was eligible to use and passed through to complete their registration with their state\u2019s OVR system, it will be indicated in this field (direct quote from Rock-The-Vote documentation). Yes/No value in field.\n{% enddocs %}\n\n{% docs reportback_volume %}\nThis field returns 1 if non voter-reg action, since campaigns team only counts those a 1 reportback. If voter-reg action, we want to count quantity of post as number of registered voters.\n{% enddocs %}\n\n{% docs address_street_1 %}\nFirst line of user's street address\n{% enddocs %}\n\n{% docs address_street_2 %}\nSecond line of user's street address\n{% enddocs %}\n\n{% docs city %}\nUser's city\n{% enddocs %}\n\n{% docs state %}\nUser's state\n{% enddocs %}\n\n{% docs country %}\nUser's country\n{% enddocs %}\n\n{% docs language %}\nUser's language\n{% enddocs %}\n\n{% docs cio_status %}\nStatus of user from CIO. (e.g. customer_subscribed, customer_unsubscribed)\n{% enddocs %}\n\n{% docs cio_status_timestamp %}\nTimestamp when users's status was updated.\n{% enddocs %}\n\n{% docs sms_status %}\nCurrent SMS status. (e.g. undeliverable, unknown)\n{% enddocs %}\n\n{% docs source_detail %}\nDetails of the origin of the user. (e.g. tell_a_friend, other, opt_in_path/197981)\n{% enddocs %}\n\n{% docs badges %}\nWhether the user has any badges. \n{% enddocs %}\n\n{% docs refer_friends %}\nWhether the user is a part of the refer a friend campaign. \n{% enddocs %}\n\n{% docs subscribed_member %}\nWhether the user is subscribed. \n{% enddocs %}\n\n{% docs last_updated_at %}\nTimestamp when users's was updated.\n{% enddocs %}\n\n{% docs school_id %}\nUnique identifier for the user's school. This info comes from the school finder.\n{% enddocs %}\n\n{% docs newsletter_topic %}\nNewsletter topic. (e.g. community, lifestyle)\n{% enddocs %}\n\n{% docs user_agent %}\nFull user agent string for a user's browser (e.g. \"Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:24.0) Gecko/20100101 Firefox/24.0\")\n{% enddocs %}\n\n{% docs drupal_id %}\nOld Drupal user ID\n{% enddocs %}\n\n{% docs campaigns %}\nCampaigns a user is signed up for.\n{% enddocs %}\n\n{% docs audit %}\nA very useful field with data containing information about changes to a user, e.g. timestamps when the user subscribed and unsubscribed.\n{% enddocs %}\n\n{% docs voting_plan_status %}\nThe indication of the user's plan to vote, e.g. voting, not_voting, cant_vote\n{% enddocs %}\n\n{% docs voting_plan_time_of_day %}\nThe time of day when the user plans to vote, e.g morning, afternoon, evening\n{% enddocs %}\n\n{% docs voting_plan_method_of_transport %}\nHow the user plans to get to their polling place. e.g. walk, drive\n{% enddocs %}\n\n{% docs voting_plan_attending_with %}\nWith Whom the user plans to go voting, e.g. family, friends, alone\n{% enddocs %}\n\n{% docs feature_flags %}\nJSON containing info on features like badges and refer-a-friend.\n{% enddocs %}\n\n{% docs dbt_updated_at %}\nDBT snapshot table data. The updated_at timestamp of the source record when this snapshot row was inserted.\n{% enddocs %}\n\n{% docs dbt_scd_id %}\nDBT snapshot table data. A unique key generated for each snapshotted record.\n{% enddocs %}\n\n{% docs dbt_valid_from %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this snapshot row was first inserted\n{% enddocs %}\n\n{% docs dbt_valid_to %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this row row became invalidated.\n{% enddocs %}\n\n{% docs google_id %}\nUser's Google ID obtained from login.\n{% enddocs %}\n\n{% docs causes %}\nCauses in which a user is interested. e.g. animal welfare, education, mental_health\n{% enddocs %}\n\n{% docs email_subscription_status %}\nEmail subscription status of the user\n{% enddocs %}\n\n{% docs role %}\nUser's role, e.g. user, staff\n{% enddocs %}\n\n{% docs cio_backfilled %}\nWhether this user's data was backfilled from CIO\n{% enddocs %}\n\n{% docs addr_source %}\nWhere the user submitted their address, e.g. sms, GDPR\n{% enddocs %}\n\n{% docs email_subscription_topics %}\nEmail subscription topics correspond to categories in CIO in which the user is interested. e.g. lifestyle, community, scholarship\n{% enddocs %}\n\n{% docs sms_paused %}\nWhether we've paused sending sms messages to the user.\n{% enddocs %}\n\n\n\n\n", "name": "subscribed_member", "unique_id": "ds_dbt.subscribed_member", "block_contents": "Whether the user is subscribed."}, "ds_dbt.last_updated_at": {"root_path": "/Users/mrich/projects/quasar/quasar/dbt", "resource_type": "docs", "path": "schema.md", "original_file_path": "models/schema.md", "package_name": "ds_dbt", "file_contents": "\n{% docs click_id %}\nThis is a unique identifier for each click\n{% enddocs %}\n\n{% docs click_time %}\nTimestamp when user clicked.\n{% enddocs %}\n\n{% docs shortened %}\nShortened URL\n{% enddocs %}\n\n{% docs target_url %}\nURL where the user will be directed\n{% enddocs %}\n\n{% docs broadcast_id %}\nID of the broadcast that generated the shortened URL\n{% enddocs %}\n\n{% docs source %}\nSource of the URL (e.g. SMS, web), origin of the post (e.g. phoenix-web, phoenix-ashes, sms), or source where user was acquired. (e.g. sms, phoenix-next)\n{% enddocs %}\n\n{% docs interaction_type %}\nHow the user interacted with the link (e.g. preview, click)\n{% enddocs %}\n\n{% docs id %}\nUnique identifier for the post\n{% enddocs %}\n\n{% docs type %}\nType of post (e.g. photo)\n{% enddocs %}\n\n{% docs action %}\nPost action (e.g. DefendDreamers_Nov9_CongressCalls, GunViolence2018_Feb15_ParklandResponse)\n{% enddocs %}\n\n{% docs status %}\nPost status (e.g. accepted, rejected)\n{% enddocs %}\n\n{% docs quantity %}\nNumerical quantity of items specified in the call to action (e.g. 10, 200)\n{% enddocs %}\n\n{% docs source_bucket %}\nGrouping bucket for origin of the post (e.g. web, sms) \n{% enddocs %}\n\n{% docs created_at %}\nWhen the item was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs updated_at %}\nWhen the item was updated in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs text %}\nText of the post (e.g. \"Zoo animals and a super hero trying to help too!\") \n{% enddocs %}\n\n{% docs signup_id %}\nUnique identifier for the signup \n{% enddocs %}\n\n{% docs post_class %}\nClass of the signup (e.g. \"photo - default\", \"phone-call - DefendDreamers_Jan16_BothBodies\")\n{% enddocs %}\n\n{% docs is_accepted %}\nWhether the post has been accepted to be displayed to the public on the website\n{% enddocs %}\n\n{% docs action_id %}\nInternal identifier of the action \n{% enddocs %}\n\n{% docs location %}\nLocation where the action takes place (e.g. US-NY)\n{% enddocs %}\n\n{% docs postal_code %}\nPostal code where the action takes place\n{% enddocs %}\n\n{% docs is_reportback %}\nWhether the post is a reportback. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs civic_action %}\nWhether the post is a Civic Action. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs scholarship_entry %}\nWhether the post is a Scholarship Entry. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs why_participated %}\nWhy the user participated in this action. Entered by the user.\n{% enddocs %}\n\n{% docs details %}\nDetails about the post. Contains contentfulId and other information (e.g. {\"campaignContentfulId\":\"6ATBgGEQEeJoIcxs1qbwaC\"})\n{% enddocs %}\n\n{% docs email %}\nEmail address of the user.\n{% enddocs %}\n\n{% docs source_details %}\nDetails about the source of the item. This is sometimes represented as a JSON object, and for other tables like Turbovote its represented as a string. (e.g. \"{\"contentful_id\":\"3CTLlXfbwtz1FOMpl31SKV\",\"utm_source\":\"scholarship_listing\",\"utm_medium\":\"referral\",\"utm_campaign\":\"fastweb_2019_08\"}\", newsletter_456)\n{% enddocs %}\n\n{% docs campaign_id %}\nThis is a unique identifier for the campaign\n{% enddocs %}\n\n{% docs campaign_run_id %}\nUnique identifier for the campaign run\n{% enddocs %}\n\n{% docs campaign_name %}\nName of the campaign\n{% enddocs %}\n\n{% docs campaign_cause %}\nCampaign cause (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_run_start_date %}\nStart date of the campaign run\n{% enddocs %}\n\n{% docs campaign_run_end_date %}\nEnd date of the campaign run\n{% enddocs %}\n\n{% docs campaign_created_date %}\nWhen the campaign was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs campaign_node_id %}\nInternal unique node id for the campaign\n{% enddocs %}\n\n{% docs campaign_node_id_title %}\nCampaign title\n{% enddocs %}\n\n{% docs campaign_run_id_title %}\nTitle of the campaign run\n{% enddocs %}\n\n{% docs campaign_action_type %}\nCampaign action type (eg. Make Something, Share Something)\n{% enddocs %}\n\n{% docs campaign_cause_type %}\nCampaign cause type (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_noun %}\nNoun applicable to the user's action\n{% enddocs %}\n\n{% docs campaign_verb %}\nVerb describing the action the user should take\n{% enddocs %}\n\n{% docs campaign_cta %}\nCampaign's call to action\n{% enddocs %}\n\n{% docs campaign_language %}\n\"Language in which the campaign is available\"\n{% enddocs %}\n\n{% docs agent_id %}\nIf set, the content type of the picture the member is sending us. Exp. image/png.\n{% enddocs %}\n\n{% docs attachment_content_type %}\nIf set, the handle of the Front agent this outbound support message is from.\n{% enddocs %}\n\n{% docs topic %}\nHolds a reference to the **last** campaign topic the member's conversation was in. This is useful to allow members to talk to Gambit and get quick responses (through Rivescript), without Gambit completely forgetting what state the member's interaction with a campaign topic was in.\n{% enddocs %}\n\n{% docs action_serial_id %}\nSerial id for the user's action. Depends on the source of the action. May be the bertly click id, sms message id, etc.\n{% enddocs %}\n\n{% docs channel %}\nChannel for the user's action. Depends on the source of the action. (e.g. web, sms)\n{% enddocs %}\n\n{% docs first_action_month %}\nMonth during which the user took their first action. \n{% enddocs %}\n\n{% docs event_id %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs event_source %}\nApplication source for event (eg. Phoenix, Northstar)\n{% enddocs %}\n\n{% docs event_datetime %}\nWhen the event occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs event_name %}\nName of the event (eg. northstar_submitted_register, https://docs.google.com/spreadsheets/d/1lm-fGrIm85nUTxSojqyCt_Ehmm1zEbViFhKpxcJiz1A/edit#gid=406441516)\n{% enddocs %}\n\n{% docs event_type %}\nType of event (pv = 'Page View', se = 'Structured Event')\n{% enddocs %}\n\n{% docs host %}\nURL host where event occurred (eg. www.dosomething.org or identity.dosomething.org)\n{% enddocs %}\n\n{% docs path %}\nURL path event occurred at (eg. /login or /us/campaigns/huddle-for-heroes)\n{% enddocs %}\n\n{% docs query_parameters %}\nOptional query parameters for the request (eg. query=huddle)\n{% enddocs %}\n\n{% docs se_category %}\nCategory of event (eg. focused_field, authentication) - Custom structured event\n{% enddocs %}\n\n{% docs se_action %}\nAction performed / event name (eg. form_submitted, action_failed) - Custom structured event\n{% enddocs %}\n\n{% docs se_label %}\nThe object of the action (eg. first_name, register, voter_reg_status) - Custom structured event\n{% enddocs %}\n\n{% docs session_id %}\nUnique identifier of the user's session\n{% enddocs %}\n\n{% docs session_counter %}\nHow many sessions a user has started\n{% enddocs %}\n\n{% docs browser_size %}\nWhich type of browser a user is using (eg. Mobile, Desktop)\n{% enddocs %}\n\n{% docs northstar_id %}\nThe Northstar ID of the user who generated the event\n{% enddocs %}\n\n{% docs device_id %}\nID of the device used\n{% enddocs %}\n\n{% docs referrer_host %}\nURL host of the referring site (eg. google.com)\n{% enddocs %}\n\n{% docs referrer_path %}\nURL path from referring site (eg. /10-stats-on-teen-drug-and-alcohol-use/)\n{% enddocs %}\n\n{% docs referrer_source %}\nReferrer source name (eg. Google, Facebook)\n{% enddocs %}\n\n{% docs utm_source %}\nTracks where the traffic is coming from. (eg. scholarship_listing, Facebook)\n{% enddocs %}\n\n{% docs utm_medium %}\nHow the traffic got to the platform (eg. referral, CPC)\n{% enddocs %}\n\n{% docs utm_campaign %}\nTracks which campaign the traffic was generated by. Shows up in Google Analytics as Campaign Name (eg. editorial_newsletter)\n{% enddocs %}\n\n{% docs url %}\nURL of campaign (eg. https://dosome.click/nyn5m7)\n{% enddocs %}\n\n{% docs modal_type %}\nNULL or SURVEY_MODAL\n{% enddocs %}\n\n{% docs landing_datetime %}\nWhen the session started in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs ending_datetime %}\nWhen the session ended in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs session_duration_seconds %}\nSession duration in seconds\n{% enddocs %}\n\n{% docs num_pages_views %}\nNumber of pages viewed in session\n{% enddocs %}\n\n{% docs landing_page %}\nFirst page the user viewed in the session (eg. /us/facts/11-facts-about-bp-oil-spill)\n{% enddocs %}\n\n{% docs exit_page %}\n\"Which page the user ended or exited their session from (eg. /us/campaigns/green-your-getaway)\"\n{% enddocs %}\n\n{% docs days_since_last_session %}\n\"Days since their last session.\"\n{% enddocs %}\n\n{% docs post_type %}\nType of post, (e.g. photo, voter-reg)\n{% enddocs %}\n\n{% docs noun %}\nNoun that corresponds to the item in the call to action that was delivered. (e.g. drawings, tweets)\n{% enddocs %}\n\n{% docs verb %}\nVerb corresponding to the action the user took. (e.g. shared, sent, taken)\n{% enddocs %}\n\n{% docs deleted_at %}\nDate time in UTC when a user deleted their post.\n{% enddocs %}\n\n{% docs _fivetran_deleted %}\nMarks rows that were deleted in the source table\n{% enddocs %}\n\n{% docs _fivetran_synced %}\n(UTC timestamp) keeps track of when each row was last successfully synced\n{% enddocs %}\n\n{% docs reportback %}\nWhether the post is a reportback \n{% enddocs %}\n\n{% docs active %}\nWhether the user is active \n{% enddocs %}\n\n{% docs anonymous %}\nWhether the user is anonymous when making the post \n{% enddocs %}\n\n{% docs callpower_campaign_id %}\nUnique ID corresponding to the Callpower campaign. Callpower allows users to record messages for their representatives.\n{% enddocs %}\n\n{% docs quiz %}\nWhether the post is a quiz \n{% enddocs %}\n\n{% docs action_type %}\nType of action the user took. (e.g. share-something, donate-something)\n{% enddocs %}\n\n{% docs online %}\nWhether the action is a online as opposed to IRL.\n{% enddocs %}\n\n{% docs time_commitment %}\nEstimated time required to do the action (e.g. 3.0+, <0.5)\n{% enddocs %}\n\n{% docs num_signups %}\nQuantity of campaign signups\n{% enddocs %}\n\n{% docs most_recent_signup %}\nTimestamp of the most recent signup in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs num_rbs %}\nQuantity of reportbacks for the user\n{% enddocs %}\n\n{% docs total_quantity %}\nTotal quantity of items in reportbacks\n{% enddocs %}\n\n{% docs most_recent_rb %}\nWhen the most recent reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs first_rb %}\nWhen the first reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs avg_time_betw_rbs %}\nCalculated average time between reportbacks.\n{% enddocs %}\n\n{% docs avg_days_next_action_after_rb %}\nCalculated average days until next action after reportback\n{% enddocs %}\n\n{% docs days_to_next_action_after_last_rb %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs most_recent_mam_action %}\nMost recent monthly active member qualifying action in UTC (eg. 2018-01-01 12:00:00).\n{% enddocs %}\n\n{% docs most_recent_email_open %}\nMost recent email open in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs most_recent_all_actions %}\nMost recent timestamp of any action in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs last_action_is_rb %}\nWhether the last action the user took was a reportback\n{% enddocs %}\n\n{% docs days_since_last_action %}\nDays since the user's last action\n{% enddocs %}\n\n{% docs time_to_first_rb %}\nHow much time after registering until the user's first reportback\n{% enddocs %}\n\n{% docs sms_unsubscribed_at %}\nTimestamp of when user unsubscribed from SMS messaging\n{% enddocs %}\n\n{% docs user_unsubscribed_at %}\nTimestamp of when user unsubscribed from email or sms\n{% enddocs %}\n\n{% docs voter_reg_acquisition %}\nWhether the user was an acquisition through voter registration efforts. \n{% enddocs %}\n\n{% docs last_logged_in %}\nDate time in UTC when user last logged in to Northstar\n{% enddocs %}\n\n{% docs last_accessed %}\nDate time in UTC when user last access the website\n{% enddocs %}\n\n{% docs last_messaged_at %}\nDate time in UTC when user was last sent a message via SMS or email\n{% enddocs %}\n\n{% docs facebook_id %}\nUser's facebook id\n{% enddocs %}\n\n{% docs mobile %}\nUsers's mobile phone number\n{% enddocs %}\n\n{% docs birthdate %}\nUser's birthdate\n{% enddocs %}\n\n{% docs first_name %}\nUser's first name\n{% enddocs %}\n\n{% docs last_name %}\nUser's last name\n{% enddocs %}\n\n{% docs voter_registration_status %}\nUser's registration status. (e.g. registration_complete, confirmed, uncertain) \n{% enddocs %}\n\n{% docs finish_with_state %}\nIf the registrant was eligible to use and passed through to complete their registration with their state\u2019s OVR system, it will be indicated in this field (direct quote from Rock-The-Vote documentation). Yes/No value in field.\n{% enddocs %}\n\n{% docs reportback_volume %}\nThis field returns 1 if non voter-reg action, since campaigns team only counts those a 1 reportback. If voter-reg action, we want to count quantity of post as number of registered voters.\n{% enddocs %}\n\n{% docs address_street_1 %}\nFirst line of user's street address\n{% enddocs %}\n\n{% docs address_street_2 %}\nSecond line of user's street address\n{% enddocs %}\n\n{% docs city %}\nUser's city\n{% enddocs %}\n\n{% docs state %}\nUser's state\n{% enddocs %}\n\n{% docs country %}\nUser's country\n{% enddocs %}\n\n{% docs language %}\nUser's language\n{% enddocs %}\n\n{% docs cio_status %}\nStatus of user from CIO. (e.g. customer_subscribed, customer_unsubscribed)\n{% enddocs %}\n\n{% docs cio_status_timestamp %}\nTimestamp when users's status was updated.\n{% enddocs %}\n\n{% docs sms_status %}\nCurrent SMS status. (e.g. undeliverable, unknown)\n{% enddocs %}\n\n{% docs source_detail %}\nDetails of the origin of the user. (e.g. tell_a_friend, other, opt_in_path/197981)\n{% enddocs %}\n\n{% docs badges %}\nWhether the user has any badges. \n{% enddocs %}\n\n{% docs refer_friends %}\nWhether the user is a part of the refer a friend campaign. \n{% enddocs %}\n\n{% docs subscribed_member %}\nWhether the user is subscribed. \n{% enddocs %}\n\n{% docs last_updated_at %}\nTimestamp when users's was updated.\n{% enddocs %}\n\n{% docs school_id %}\nUnique identifier for the user's school. This info comes from the school finder.\n{% enddocs %}\n\n{% docs newsletter_topic %}\nNewsletter topic. (e.g. community, lifestyle)\n{% enddocs %}\n\n{% docs user_agent %}\nFull user agent string for a user's browser (e.g. \"Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:24.0) Gecko/20100101 Firefox/24.0\")\n{% enddocs %}\n\n{% docs drupal_id %}\nOld Drupal user ID\n{% enddocs %}\n\n{% docs campaigns %}\nCampaigns a user is signed up for.\n{% enddocs %}\n\n{% docs audit %}\nA very useful field with data containing information about changes to a user, e.g. timestamps when the user subscribed and unsubscribed.\n{% enddocs %}\n\n{% docs voting_plan_status %}\nThe indication of the user's plan to vote, e.g. voting, not_voting, cant_vote\n{% enddocs %}\n\n{% docs voting_plan_time_of_day %}\nThe time of day when the user plans to vote, e.g morning, afternoon, evening\n{% enddocs %}\n\n{% docs voting_plan_method_of_transport %}\nHow the user plans to get to their polling place. e.g. walk, drive\n{% enddocs %}\n\n{% docs voting_plan_attending_with %}\nWith Whom the user plans to go voting, e.g. family, friends, alone\n{% enddocs %}\n\n{% docs feature_flags %}\nJSON containing info on features like badges and refer-a-friend.\n{% enddocs %}\n\n{% docs dbt_updated_at %}\nDBT snapshot table data. The updated_at timestamp of the source record when this snapshot row was inserted.\n{% enddocs %}\n\n{% docs dbt_scd_id %}\nDBT snapshot table data. A unique key generated for each snapshotted record.\n{% enddocs %}\n\n{% docs dbt_valid_from %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this snapshot row was first inserted\n{% enddocs %}\n\n{% docs dbt_valid_to %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this row row became invalidated.\n{% enddocs %}\n\n{% docs google_id %}\nUser's Google ID obtained from login.\n{% enddocs %}\n\n{% docs causes %}\nCauses in which a user is interested. e.g. animal welfare, education, mental_health\n{% enddocs %}\n\n{% docs email_subscription_status %}\nEmail subscription status of the user\n{% enddocs %}\n\n{% docs role %}\nUser's role, e.g. user, staff\n{% enddocs %}\n\n{% docs cio_backfilled %}\nWhether this user's data was backfilled from CIO\n{% enddocs %}\n\n{% docs addr_source %}\nWhere the user submitted their address, e.g. sms, GDPR\n{% enddocs %}\n\n{% docs email_subscription_topics %}\nEmail subscription topics correspond to categories in CIO in which the user is interested. e.g. lifestyle, community, scholarship\n{% enddocs %}\n\n{% docs sms_paused %}\nWhether we've paused sending sms messages to the user.\n{% enddocs %}\n\n\n\n\n", "name": "last_updated_at", "unique_id": "ds_dbt.last_updated_at", "block_contents": "Timestamp when users's was updated."}, "ds_dbt.school_id": {"root_path": "/Users/mrich/projects/quasar/quasar/dbt", "resource_type": "docs", "path": "schema.md", "original_file_path": "models/schema.md", "package_name": "ds_dbt", "file_contents": "\n{% docs click_id %}\nThis is a unique identifier for each click\n{% enddocs %}\n\n{% docs click_time %}\nTimestamp when user clicked.\n{% enddocs %}\n\n{% docs shortened %}\nShortened URL\n{% enddocs %}\n\n{% docs target_url %}\nURL where the user will be directed\n{% enddocs %}\n\n{% docs broadcast_id %}\nID of the broadcast that generated the shortened URL\n{% enddocs %}\n\n{% docs source %}\nSource of the URL (e.g. SMS, web), origin of the post (e.g. phoenix-web, phoenix-ashes, sms), or source where user was acquired. (e.g. sms, phoenix-next)\n{% enddocs %}\n\n{% docs interaction_type %}\nHow the user interacted with the link (e.g. preview, click)\n{% enddocs %}\n\n{% docs id %}\nUnique identifier for the post\n{% enddocs %}\n\n{% docs type %}\nType of post (e.g. photo)\n{% enddocs %}\n\n{% docs action %}\nPost action (e.g. DefendDreamers_Nov9_CongressCalls, GunViolence2018_Feb15_ParklandResponse)\n{% enddocs %}\n\n{% docs status %}\nPost status (e.g. accepted, rejected)\n{% enddocs %}\n\n{% docs quantity %}\nNumerical quantity of items specified in the call to action (e.g. 10, 200)\n{% enddocs %}\n\n{% docs source_bucket %}\nGrouping bucket for origin of the post (e.g. web, sms) \n{% enddocs %}\n\n{% docs created_at %}\nWhen the item was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs updated_at %}\nWhen the item was updated in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs text %}\nText of the post (e.g. \"Zoo animals and a super hero trying to help too!\") \n{% enddocs %}\n\n{% docs signup_id %}\nUnique identifier for the signup \n{% enddocs %}\n\n{% docs post_class %}\nClass of the signup (e.g. \"photo - default\", \"phone-call - DefendDreamers_Jan16_BothBodies\")\n{% enddocs %}\n\n{% docs is_accepted %}\nWhether the post has been accepted to be displayed to the public on the website\n{% enddocs %}\n\n{% docs action_id %}\nInternal identifier of the action \n{% enddocs %}\n\n{% docs location %}\nLocation where the action takes place (e.g. US-NY)\n{% enddocs %}\n\n{% docs postal_code %}\nPostal code where the action takes place\n{% enddocs %}\n\n{% docs is_reportback %}\nWhether the post is a reportback. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs civic_action %}\nWhether the post is a Civic Action. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs scholarship_entry %}\nWhether the post is a Scholarship Entry. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs why_participated %}\nWhy the user participated in this action. Entered by the user.\n{% enddocs %}\n\n{% docs details %}\nDetails about the post. Contains contentfulId and other information (e.g. {\"campaignContentfulId\":\"6ATBgGEQEeJoIcxs1qbwaC\"})\n{% enddocs %}\n\n{% docs email %}\nEmail address of the user.\n{% enddocs %}\n\n{% docs source_details %}\nDetails about the source of the item. This is sometimes represented as a JSON object, and for other tables like Turbovote its represented as a string. (e.g. \"{\"contentful_id\":\"3CTLlXfbwtz1FOMpl31SKV\",\"utm_source\":\"scholarship_listing\",\"utm_medium\":\"referral\",\"utm_campaign\":\"fastweb_2019_08\"}\", newsletter_456)\n{% enddocs %}\n\n{% docs campaign_id %}\nThis is a unique identifier for the campaign\n{% enddocs %}\n\n{% docs campaign_run_id %}\nUnique identifier for the campaign run\n{% enddocs %}\n\n{% docs campaign_name %}\nName of the campaign\n{% enddocs %}\n\n{% docs campaign_cause %}\nCampaign cause (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_run_start_date %}\nStart date of the campaign run\n{% enddocs %}\n\n{% docs campaign_run_end_date %}\nEnd date of the campaign run\n{% enddocs %}\n\n{% docs campaign_created_date %}\nWhen the campaign was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs campaign_node_id %}\nInternal unique node id for the campaign\n{% enddocs %}\n\n{% docs campaign_node_id_title %}\nCampaign title\n{% enddocs %}\n\n{% docs campaign_run_id_title %}\nTitle of the campaign run\n{% enddocs %}\n\n{% docs campaign_action_type %}\nCampaign action type (eg. Make Something, Share Something)\n{% enddocs %}\n\n{% docs campaign_cause_type %}\nCampaign cause type (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_noun %}\nNoun applicable to the user's action\n{% enddocs %}\n\n{% docs campaign_verb %}\nVerb describing the action the user should take\n{% enddocs %}\n\n{% docs campaign_cta %}\nCampaign's call to action\n{% enddocs %}\n\n{% docs campaign_language %}\n\"Language in which the campaign is available\"\n{% enddocs %}\n\n{% docs agent_id %}\nIf set, the content type of the picture the member is sending us. Exp. image/png.\n{% enddocs %}\n\n{% docs attachment_content_type %}\nIf set, the handle of the Front agent this outbound support message is from.\n{% enddocs %}\n\n{% docs topic %}\nHolds a reference to the **last** campaign topic the member's conversation was in. This is useful to allow members to talk to Gambit and get quick responses (through Rivescript), without Gambit completely forgetting what state the member's interaction with a campaign topic was in.\n{% enddocs %}\n\n{% docs action_serial_id %}\nSerial id for the user's action. Depends on the source of the action. May be the bertly click id, sms message id, etc.\n{% enddocs %}\n\n{% docs channel %}\nChannel for the user's action. Depends on the source of the action. (e.g. web, sms)\n{% enddocs %}\n\n{% docs first_action_month %}\nMonth during which the user took their first action. \n{% enddocs %}\n\n{% docs event_id %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs event_source %}\nApplication source for event (eg. Phoenix, Northstar)\n{% enddocs %}\n\n{% docs event_datetime %}\nWhen the event occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs event_name %}\nName of the event (eg. northstar_submitted_register, https://docs.google.com/spreadsheets/d/1lm-fGrIm85nUTxSojqyCt_Ehmm1zEbViFhKpxcJiz1A/edit#gid=406441516)\n{% enddocs %}\n\n{% docs event_type %}\nType of event (pv = 'Page View', se = 'Structured Event')\n{% enddocs %}\n\n{% docs host %}\nURL host where event occurred (eg. www.dosomething.org or identity.dosomething.org)\n{% enddocs %}\n\n{% docs path %}\nURL path event occurred at (eg. /login or /us/campaigns/huddle-for-heroes)\n{% enddocs %}\n\n{% docs query_parameters %}\nOptional query parameters for the request (eg. query=huddle)\n{% enddocs %}\n\n{% docs se_category %}\nCategory of event (eg. focused_field, authentication) - Custom structured event\n{% enddocs %}\n\n{% docs se_action %}\nAction performed / event name (eg. form_submitted, action_failed) - Custom structured event\n{% enddocs %}\n\n{% docs se_label %}\nThe object of the action (eg. first_name, register, voter_reg_status) - Custom structured event\n{% enddocs %}\n\n{% docs session_id %}\nUnique identifier of the user's session\n{% enddocs %}\n\n{% docs session_counter %}\nHow many sessions a user has started\n{% enddocs %}\n\n{% docs browser_size %}\nWhich type of browser a user is using (eg. Mobile, Desktop)\n{% enddocs %}\n\n{% docs northstar_id %}\nThe Northstar ID of the user who generated the event\n{% enddocs %}\n\n{% docs device_id %}\nID of the device used\n{% enddocs %}\n\n{% docs referrer_host %}\nURL host of the referring site (eg. google.com)\n{% enddocs %}\n\n{% docs referrer_path %}\nURL path from referring site (eg. /10-stats-on-teen-drug-and-alcohol-use/)\n{% enddocs %}\n\n{% docs referrer_source %}\nReferrer source name (eg. Google, Facebook)\n{% enddocs %}\n\n{% docs utm_source %}\nTracks where the traffic is coming from. (eg. scholarship_listing, Facebook)\n{% enddocs %}\n\n{% docs utm_medium %}\nHow the traffic got to the platform (eg. referral, CPC)\n{% enddocs %}\n\n{% docs utm_campaign %}\nTracks which campaign the traffic was generated by. Shows up in Google Analytics as Campaign Name (eg. editorial_newsletter)\n{% enddocs %}\n\n{% docs url %}\nURL of campaign (eg. https://dosome.click/nyn5m7)\n{% enddocs %}\n\n{% docs modal_type %}\nNULL or SURVEY_MODAL\n{% enddocs %}\n\n{% docs landing_datetime %}\nWhen the session started in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs ending_datetime %}\nWhen the session ended in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs session_duration_seconds %}\nSession duration in seconds\n{% enddocs %}\n\n{% docs num_pages_views %}\nNumber of pages viewed in session\n{% enddocs %}\n\n{% docs landing_page %}\nFirst page the user viewed in the session (eg. /us/facts/11-facts-about-bp-oil-spill)\n{% enddocs %}\n\n{% docs exit_page %}\n\"Which page the user ended or exited their session from (eg. /us/campaigns/green-your-getaway)\"\n{% enddocs %}\n\n{% docs days_since_last_session %}\n\"Days since their last session.\"\n{% enddocs %}\n\n{% docs post_type %}\nType of post, (e.g. photo, voter-reg)\n{% enddocs %}\n\n{% docs noun %}\nNoun that corresponds to the item in the call to action that was delivered. (e.g. drawings, tweets)\n{% enddocs %}\n\n{% docs verb %}\nVerb corresponding to the action the user took. (e.g. shared, sent, taken)\n{% enddocs %}\n\n{% docs deleted_at %}\nDate time in UTC when a user deleted their post.\n{% enddocs %}\n\n{% docs _fivetran_deleted %}\nMarks rows that were deleted in the source table\n{% enddocs %}\n\n{% docs _fivetran_synced %}\n(UTC timestamp) keeps track of when each row was last successfully synced\n{% enddocs %}\n\n{% docs reportback %}\nWhether the post is a reportback \n{% enddocs %}\n\n{% docs active %}\nWhether the user is active \n{% enddocs %}\n\n{% docs anonymous %}\nWhether the user is anonymous when making the post \n{% enddocs %}\n\n{% docs callpower_campaign_id %}\nUnique ID corresponding to the Callpower campaign. Callpower allows users to record messages for their representatives.\n{% enddocs %}\n\n{% docs quiz %}\nWhether the post is a quiz \n{% enddocs %}\n\n{% docs action_type %}\nType of action the user took. (e.g. share-something, donate-something)\n{% enddocs %}\n\n{% docs online %}\nWhether the action is a online as opposed to IRL.\n{% enddocs %}\n\n{% docs time_commitment %}\nEstimated time required to do the action (e.g. 3.0+, <0.5)\n{% enddocs %}\n\n{% docs num_signups %}\nQuantity of campaign signups\n{% enddocs %}\n\n{% docs most_recent_signup %}\nTimestamp of the most recent signup in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs num_rbs %}\nQuantity of reportbacks for the user\n{% enddocs %}\n\n{% docs total_quantity %}\nTotal quantity of items in reportbacks\n{% enddocs %}\n\n{% docs most_recent_rb %}\nWhen the most recent reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs first_rb %}\nWhen the first reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs avg_time_betw_rbs %}\nCalculated average time between reportbacks.\n{% enddocs %}\n\n{% docs avg_days_next_action_after_rb %}\nCalculated average days until next action after reportback\n{% enddocs %}\n\n{% docs days_to_next_action_after_last_rb %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs most_recent_mam_action %}\nMost recent monthly active member qualifying action in UTC (eg. 2018-01-01 12:00:00).\n{% enddocs %}\n\n{% docs most_recent_email_open %}\nMost recent email open in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs most_recent_all_actions %}\nMost recent timestamp of any action in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs last_action_is_rb %}\nWhether the last action the user took was a reportback\n{% enddocs %}\n\n{% docs days_since_last_action %}\nDays since the user's last action\n{% enddocs %}\n\n{% docs time_to_first_rb %}\nHow much time after registering until the user's first reportback\n{% enddocs %}\n\n{% docs sms_unsubscribed_at %}\nTimestamp of when user unsubscribed from SMS messaging\n{% enddocs %}\n\n{% docs user_unsubscribed_at %}\nTimestamp of when user unsubscribed from email or sms\n{% enddocs %}\n\n{% docs voter_reg_acquisition %}\nWhether the user was an acquisition through voter registration efforts. \n{% enddocs %}\n\n{% docs last_logged_in %}\nDate time in UTC when user last logged in to Northstar\n{% enddocs %}\n\n{% docs last_accessed %}\nDate time in UTC when user last access the website\n{% enddocs %}\n\n{% docs last_messaged_at %}\nDate time in UTC when user was last sent a message via SMS or email\n{% enddocs %}\n\n{% docs facebook_id %}\nUser's facebook id\n{% enddocs %}\n\n{% docs mobile %}\nUsers's mobile phone number\n{% enddocs %}\n\n{% docs birthdate %}\nUser's birthdate\n{% enddocs %}\n\n{% docs first_name %}\nUser's first name\n{% enddocs %}\n\n{% docs last_name %}\nUser's last name\n{% enddocs %}\n\n{% docs voter_registration_status %}\nUser's registration status. (e.g. registration_complete, confirmed, uncertain) \n{% enddocs %}\n\n{% docs finish_with_state %}\nIf the registrant was eligible to use and passed through to complete their registration with their state\u2019s OVR system, it will be indicated in this field (direct quote from Rock-The-Vote documentation). Yes/No value in field.\n{% enddocs %}\n\n{% docs reportback_volume %}\nThis field returns 1 if non voter-reg action, since campaigns team only counts those a 1 reportback. If voter-reg action, we want to count quantity of post as number of registered voters.\n{% enddocs %}\n\n{% docs address_street_1 %}\nFirst line of user's street address\n{% enddocs %}\n\n{% docs address_street_2 %}\nSecond line of user's street address\n{% enddocs %}\n\n{% docs city %}\nUser's city\n{% enddocs %}\n\n{% docs state %}\nUser's state\n{% enddocs %}\n\n{% docs country %}\nUser's country\n{% enddocs %}\n\n{% docs language %}\nUser's language\n{% enddocs %}\n\n{% docs cio_status %}\nStatus of user from CIO. (e.g. customer_subscribed, customer_unsubscribed)\n{% enddocs %}\n\n{% docs cio_status_timestamp %}\nTimestamp when users's status was updated.\n{% enddocs %}\n\n{% docs sms_status %}\nCurrent SMS status. (e.g. undeliverable, unknown)\n{% enddocs %}\n\n{% docs source_detail %}\nDetails of the origin of the user. (e.g. tell_a_friend, other, opt_in_path/197981)\n{% enddocs %}\n\n{% docs badges %}\nWhether the user has any badges. \n{% enddocs %}\n\n{% docs refer_friends %}\nWhether the user is a part of the refer a friend campaign. \n{% enddocs %}\n\n{% docs subscribed_member %}\nWhether the user is subscribed. \n{% enddocs %}\n\n{% docs last_updated_at %}\nTimestamp when users's was updated.\n{% enddocs %}\n\n{% docs school_id %}\nUnique identifier for the user's school. This info comes from the school finder.\n{% enddocs %}\n\n{% docs newsletter_topic %}\nNewsletter topic. (e.g. community, lifestyle)\n{% enddocs %}\n\n{% docs user_agent %}\nFull user agent string for a user's browser (e.g. \"Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:24.0) Gecko/20100101 Firefox/24.0\")\n{% enddocs %}\n\n{% docs drupal_id %}\nOld Drupal user ID\n{% enddocs %}\n\n{% docs campaigns %}\nCampaigns a user is signed up for.\n{% enddocs %}\n\n{% docs audit %}\nA very useful field with data containing information about changes to a user, e.g. timestamps when the user subscribed and unsubscribed.\n{% enddocs %}\n\n{% docs voting_plan_status %}\nThe indication of the user's plan to vote, e.g. voting, not_voting, cant_vote\n{% enddocs %}\n\n{% docs voting_plan_time_of_day %}\nThe time of day when the user plans to vote, e.g morning, afternoon, evening\n{% enddocs %}\n\n{% docs voting_plan_method_of_transport %}\nHow the user plans to get to their polling place. e.g. walk, drive\n{% enddocs %}\n\n{% docs voting_plan_attending_with %}\nWith Whom the user plans to go voting, e.g. family, friends, alone\n{% enddocs %}\n\n{% docs feature_flags %}\nJSON containing info on features like badges and refer-a-friend.\n{% enddocs %}\n\n{% docs dbt_updated_at %}\nDBT snapshot table data. The updated_at timestamp of the source record when this snapshot row was inserted.\n{% enddocs %}\n\n{% docs dbt_scd_id %}\nDBT snapshot table data. A unique key generated for each snapshotted record.\n{% enddocs %}\n\n{% docs dbt_valid_from %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this snapshot row was first inserted\n{% enddocs %}\n\n{% docs dbt_valid_to %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this row row became invalidated.\n{% enddocs %}\n\n{% docs google_id %}\nUser's Google ID obtained from login.\n{% enddocs %}\n\n{% docs causes %}\nCauses in which a user is interested. e.g. animal welfare, education, mental_health\n{% enddocs %}\n\n{% docs email_subscription_status %}\nEmail subscription status of the user\n{% enddocs %}\n\n{% docs role %}\nUser's role, e.g. user, staff\n{% enddocs %}\n\n{% docs cio_backfilled %}\nWhether this user's data was backfilled from CIO\n{% enddocs %}\n\n{% docs addr_source %}\nWhere the user submitted their address, e.g. sms, GDPR\n{% enddocs %}\n\n{% docs email_subscription_topics %}\nEmail subscription topics correspond to categories in CIO in which the user is interested. e.g. lifestyle, community, scholarship\n{% enddocs %}\n\n{% docs sms_paused %}\nWhether we've paused sending sms messages to the user.\n{% enddocs %}\n\n\n\n\n", "name": "school_id", "unique_id": "ds_dbt.school_id", "block_contents": "Unique identifier for the user's school. This info comes from the school finder."}, "ds_dbt.newsletter_topic": {"root_path": "/Users/mrich/projects/quasar/quasar/dbt", "resource_type": "docs", "path": "schema.md", "original_file_path": "models/schema.md", "package_name": "ds_dbt", "file_contents": "\n{% docs click_id %}\nThis is a unique identifier for each click\n{% enddocs %}\n\n{% docs click_time %}\nTimestamp when user clicked.\n{% enddocs %}\n\n{% docs shortened %}\nShortened URL\n{% enddocs %}\n\n{% docs target_url %}\nURL where the user will be directed\n{% enddocs %}\n\n{% docs broadcast_id %}\nID of the broadcast that generated the shortened URL\n{% enddocs %}\n\n{% docs source %}\nSource of the URL (e.g. SMS, web), origin of the post (e.g. phoenix-web, phoenix-ashes, sms), or source where user was acquired. (e.g. sms, phoenix-next)\n{% enddocs %}\n\n{% docs interaction_type %}\nHow the user interacted with the link (e.g. preview, click)\n{% enddocs %}\n\n{% docs id %}\nUnique identifier for the post\n{% enddocs %}\n\n{% docs type %}\nType of post (e.g. photo)\n{% enddocs %}\n\n{% docs action %}\nPost action (e.g. DefendDreamers_Nov9_CongressCalls, GunViolence2018_Feb15_ParklandResponse)\n{% enddocs %}\n\n{% docs status %}\nPost status (e.g. accepted, rejected)\n{% enddocs %}\n\n{% docs quantity %}\nNumerical quantity of items specified in the call to action (e.g. 10, 200)\n{% enddocs %}\n\n{% docs source_bucket %}\nGrouping bucket for origin of the post (e.g. web, sms) \n{% enddocs %}\n\n{% docs created_at %}\nWhen the item was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs updated_at %}\nWhen the item was updated in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs text %}\nText of the post (e.g. \"Zoo animals and a super hero trying to help too!\") \n{% enddocs %}\n\n{% docs signup_id %}\nUnique identifier for the signup \n{% enddocs %}\n\n{% docs post_class %}\nClass of the signup (e.g. \"photo - default\", \"phone-call - DefendDreamers_Jan16_BothBodies\")\n{% enddocs %}\n\n{% docs is_accepted %}\nWhether the post has been accepted to be displayed to the public on the website\n{% enddocs %}\n\n{% docs action_id %}\nInternal identifier of the action \n{% enddocs %}\n\n{% docs location %}\nLocation where the action takes place (e.g. US-NY)\n{% enddocs %}\n\n{% docs postal_code %}\nPostal code where the action takes place\n{% enddocs %}\n\n{% docs is_reportback %}\nWhether the post is a reportback. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs civic_action %}\nWhether the post is a Civic Action. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs scholarship_entry %}\nWhether the post is a Scholarship Entry. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs why_participated %}\nWhy the user participated in this action. Entered by the user.\n{% enddocs %}\n\n{% docs details %}\nDetails about the post. Contains contentfulId and other information (e.g. {\"campaignContentfulId\":\"6ATBgGEQEeJoIcxs1qbwaC\"})\n{% enddocs %}\n\n{% docs email %}\nEmail address of the user.\n{% enddocs %}\n\n{% docs source_details %}\nDetails about the source of the item. This is sometimes represented as a JSON object, and for other tables like Turbovote its represented as a string. (e.g. \"{\"contentful_id\":\"3CTLlXfbwtz1FOMpl31SKV\",\"utm_source\":\"scholarship_listing\",\"utm_medium\":\"referral\",\"utm_campaign\":\"fastweb_2019_08\"}\", newsletter_456)\n{% enddocs %}\n\n{% docs campaign_id %}\nThis is a unique identifier for the campaign\n{% enddocs %}\n\n{% docs campaign_run_id %}\nUnique identifier for the campaign run\n{% enddocs %}\n\n{% docs campaign_name %}\nName of the campaign\n{% enddocs %}\n\n{% docs campaign_cause %}\nCampaign cause (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_run_start_date %}\nStart date of the campaign run\n{% enddocs %}\n\n{% docs campaign_run_end_date %}\nEnd date of the campaign run\n{% enddocs %}\n\n{% docs campaign_created_date %}\nWhen the campaign was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs campaign_node_id %}\nInternal unique node id for the campaign\n{% enddocs %}\n\n{% docs campaign_node_id_title %}\nCampaign title\n{% enddocs %}\n\n{% docs campaign_run_id_title %}\nTitle of the campaign run\n{% enddocs %}\n\n{% docs campaign_action_type %}\nCampaign action type (eg. Make Something, Share Something)\n{% enddocs %}\n\n{% docs campaign_cause_type %}\nCampaign cause type (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_noun %}\nNoun applicable to the user's action\n{% enddocs %}\n\n{% docs campaign_verb %}\nVerb describing the action the user should take\n{% enddocs %}\n\n{% docs campaign_cta %}\nCampaign's call to action\n{% enddocs %}\n\n{% docs campaign_language %}\n\"Language in which the campaign is available\"\n{% enddocs %}\n\n{% docs agent_id %}\nIf set, the content type of the picture the member is sending us. Exp. image/png.\n{% enddocs %}\n\n{% docs attachment_content_type %}\nIf set, the handle of the Front agent this outbound support message is from.\n{% enddocs %}\n\n{% docs topic %}\nHolds a reference to the **last** campaign topic the member's conversation was in. This is useful to allow members to talk to Gambit and get quick responses (through Rivescript), without Gambit completely forgetting what state the member's interaction with a campaign topic was in.\n{% enddocs %}\n\n{% docs action_serial_id %}\nSerial id for the user's action. Depends on the source of the action. May be the bertly click id, sms message id, etc.\n{% enddocs %}\n\n{% docs channel %}\nChannel for the user's action. Depends on the source of the action. (e.g. web, sms)\n{% enddocs %}\n\n{% docs first_action_month %}\nMonth during which the user took their first action. \n{% enddocs %}\n\n{% docs event_id %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs event_source %}\nApplication source for event (eg. Phoenix, Northstar)\n{% enddocs %}\n\n{% docs event_datetime %}\nWhen the event occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs event_name %}\nName of the event (eg. northstar_submitted_register, https://docs.google.com/spreadsheets/d/1lm-fGrIm85nUTxSojqyCt_Ehmm1zEbViFhKpxcJiz1A/edit#gid=406441516)\n{% enddocs %}\n\n{% docs event_type %}\nType of event (pv = 'Page View', se = 'Structured Event')\n{% enddocs %}\n\n{% docs host %}\nURL host where event occurred (eg. www.dosomething.org or identity.dosomething.org)\n{% enddocs %}\n\n{% docs path %}\nURL path event occurred at (eg. /login or /us/campaigns/huddle-for-heroes)\n{% enddocs %}\n\n{% docs query_parameters %}\nOptional query parameters for the request (eg. query=huddle)\n{% enddocs %}\n\n{% docs se_category %}\nCategory of event (eg. focused_field, authentication) - Custom structured event\n{% enddocs %}\n\n{% docs se_action %}\nAction performed / event name (eg. form_submitted, action_failed) - Custom structured event\n{% enddocs %}\n\n{% docs se_label %}\nThe object of the action (eg. first_name, register, voter_reg_status) - Custom structured event\n{% enddocs %}\n\n{% docs session_id %}\nUnique identifier of the user's session\n{% enddocs %}\n\n{% docs session_counter %}\nHow many sessions a user has started\n{% enddocs %}\n\n{% docs browser_size %}\nWhich type of browser a user is using (eg. Mobile, Desktop)\n{% enddocs %}\n\n{% docs northstar_id %}\nThe Northstar ID of the user who generated the event\n{% enddocs %}\n\n{% docs device_id %}\nID of the device used\n{% enddocs %}\n\n{% docs referrer_host %}\nURL host of the referring site (eg. google.com)\n{% enddocs %}\n\n{% docs referrer_path %}\nURL path from referring site (eg. /10-stats-on-teen-drug-and-alcohol-use/)\n{% enddocs %}\n\n{% docs referrer_source %}\nReferrer source name (eg. Google, Facebook)\n{% enddocs %}\n\n{% docs utm_source %}\nTracks where the traffic is coming from. (eg. scholarship_listing, Facebook)\n{% enddocs %}\n\n{% docs utm_medium %}\nHow the traffic got to the platform (eg. referral, CPC)\n{% enddocs %}\n\n{% docs utm_campaign %}\nTracks which campaign the traffic was generated by. Shows up in Google Analytics as Campaign Name (eg. editorial_newsletter)\n{% enddocs %}\n\n{% docs url %}\nURL of campaign (eg. https://dosome.click/nyn5m7)\n{% enddocs %}\n\n{% docs modal_type %}\nNULL or SURVEY_MODAL\n{% enddocs %}\n\n{% docs landing_datetime %}\nWhen the session started in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs ending_datetime %}\nWhen the session ended in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs session_duration_seconds %}\nSession duration in seconds\n{% enddocs %}\n\n{% docs num_pages_views %}\nNumber of pages viewed in session\n{% enddocs %}\n\n{% docs landing_page %}\nFirst page the user viewed in the session (eg. /us/facts/11-facts-about-bp-oil-spill)\n{% enddocs %}\n\n{% docs exit_page %}\n\"Which page the user ended or exited their session from (eg. /us/campaigns/green-your-getaway)\"\n{% enddocs %}\n\n{% docs days_since_last_session %}\n\"Days since their last session.\"\n{% enddocs %}\n\n{% docs post_type %}\nType of post, (e.g. photo, voter-reg)\n{% enddocs %}\n\n{% docs noun %}\nNoun that corresponds to the item in the call to action that was delivered. (e.g. drawings, tweets)\n{% enddocs %}\n\n{% docs verb %}\nVerb corresponding to the action the user took. (e.g. shared, sent, taken)\n{% enddocs %}\n\n{% docs deleted_at %}\nDate time in UTC when a user deleted their post.\n{% enddocs %}\n\n{% docs _fivetran_deleted %}\nMarks rows that were deleted in the source table\n{% enddocs %}\n\n{% docs _fivetran_synced %}\n(UTC timestamp) keeps track of when each row was last successfully synced\n{% enddocs %}\n\n{% docs reportback %}\nWhether the post is a reportback \n{% enddocs %}\n\n{% docs active %}\nWhether the user is active \n{% enddocs %}\n\n{% docs anonymous %}\nWhether the user is anonymous when making the post \n{% enddocs %}\n\n{% docs callpower_campaign_id %}\nUnique ID corresponding to the Callpower campaign. Callpower allows users to record messages for their representatives.\n{% enddocs %}\n\n{% docs quiz %}\nWhether the post is a quiz \n{% enddocs %}\n\n{% docs action_type %}\nType of action the user took. (e.g. share-something, donate-something)\n{% enddocs %}\n\n{% docs online %}\nWhether the action is a online as opposed to IRL.\n{% enddocs %}\n\n{% docs time_commitment %}\nEstimated time required to do the action (e.g. 3.0+, <0.5)\n{% enddocs %}\n\n{% docs num_signups %}\nQuantity of campaign signups\n{% enddocs %}\n\n{% docs most_recent_signup %}\nTimestamp of the most recent signup in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs num_rbs %}\nQuantity of reportbacks for the user\n{% enddocs %}\n\n{% docs total_quantity %}\nTotal quantity of items in reportbacks\n{% enddocs %}\n\n{% docs most_recent_rb %}\nWhen the most recent reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs first_rb %}\nWhen the first reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs avg_time_betw_rbs %}\nCalculated average time between reportbacks.\n{% enddocs %}\n\n{% docs avg_days_next_action_after_rb %}\nCalculated average days until next action after reportback\n{% enddocs %}\n\n{% docs days_to_next_action_after_last_rb %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs most_recent_mam_action %}\nMost recent monthly active member qualifying action in UTC (eg. 2018-01-01 12:00:00).\n{% enddocs %}\n\n{% docs most_recent_email_open %}\nMost recent email open in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs most_recent_all_actions %}\nMost recent timestamp of any action in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs last_action_is_rb %}\nWhether the last action the user took was a reportback\n{% enddocs %}\n\n{% docs days_since_last_action %}\nDays since the user's last action\n{% enddocs %}\n\n{% docs time_to_first_rb %}\nHow much time after registering until the user's first reportback\n{% enddocs %}\n\n{% docs sms_unsubscribed_at %}\nTimestamp of when user unsubscribed from SMS messaging\n{% enddocs %}\n\n{% docs user_unsubscribed_at %}\nTimestamp of when user unsubscribed from email or sms\n{% enddocs %}\n\n{% docs voter_reg_acquisition %}\nWhether the user was an acquisition through voter registration efforts. \n{% enddocs %}\n\n{% docs last_logged_in %}\nDate time in UTC when user last logged in to Northstar\n{% enddocs %}\n\n{% docs last_accessed %}\nDate time in UTC when user last access the website\n{% enddocs %}\n\n{% docs last_messaged_at %}\nDate time in UTC when user was last sent a message via SMS or email\n{% enddocs %}\n\n{% docs facebook_id %}\nUser's facebook id\n{% enddocs %}\n\n{% docs mobile %}\nUsers's mobile phone number\n{% enddocs %}\n\n{% docs birthdate %}\nUser's birthdate\n{% enddocs %}\n\n{% docs first_name %}\nUser's first name\n{% enddocs %}\n\n{% docs last_name %}\nUser's last name\n{% enddocs %}\n\n{% docs voter_registration_status %}\nUser's registration status. (e.g. registration_complete, confirmed, uncertain) \n{% enddocs %}\n\n{% docs finish_with_state %}\nIf the registrant was eligible to use and passed through to complete their registration with their state\u2019s OVR system, it will be indicated in this field (direct quote from Rock-The-Vote documentation). Yes/No value in field.\n{% enddocs %}\n\n{% docs reportback_volume %}\nThis field returns 1 if non voter-reg action, since campaigns team only counts those a 1 reportback. If voter-reg action, we want to count quantity of post as number of registered voters.\n{% enddocs %}\n\n{% docs address_street_1 %}\nFirst line of user's street address\n{% enddocs %}\n\n{% docs address_street_2 %}\nSecond line of user's street address\n{% enddocs %}\n\n{% docs city %}\nUser's city\n{% enddocs %}\n\n{% docs state %}\nUser's state\n{% enddocs %}\n\n{% docs country %}\nUser's country\n{% enddocs %}\n\n{% docs language %}\nUser's language\n{% enddocs %}\n\n{% docs cio_status %}\nStatus of user from CIO. (e.g. customer_subscribed, customer_unsubscribed)\n{% enddocs %}\n\n{% docs cio_status_timestamp %}\nTimestamp when users's status was updated.\n{% enddocs %}\n\n{% docs sms_status %}\nCurrent SMS status. (e.g. undeliverable, unknown)\n{% enddocs %}\n\n{% docs source_detail %}\nDetails of the origin of the user. (e.g. tell_a_friend, other, opt_in_path/197981)\n{% enddocs %}\n\n{% docs badges %}\nWhether the user has any badges. \n{% enddocs %}\n\n{% docs refer_friends %}\nWhether the user is a part of the refer a friend campaign. \n{% enddocs %}\n\n{% docs subscribed_member %}\nWhether the user is subscribed. \n{% enddocs %}\n\n{% docs last_updated_at %}\nTimestamp when users's was updated.\n{% enddocs %}\n\n{% docs school_id %}\nUnique identifier for the user's school. This info comes from the school finder.\n{% enddocs %}\n\n{% docs newsletter_topic %}\nNewsletter topic. (e.g. community, lifestyle)\n{% enddocs %}\n\n{% docs user_agent %}\nFull user agent string for a user's browser (e.g. \"Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:24.0) Gecko/20100101 Firefox/24.0\")\n{% enddocs %}\n\n{% docs drupal_id %}\nOld Drupal user ID\n{% enddocs %}\n\n{% docs campaigns %}\nCampaigns a user is signed up for.\n{% enddocs %}\n\n{% docs audit %}\nA very useful field with data containing information about changes to a user, e.g. timestamps when the user subscribed and unsubscribed.\n{% enddocs %}\n\n{% docs voting_plan_status %}\nThe indication of the user's plan to vote, e.g. voting, not_voting, cant_vote\n{% enddocs %}\n\n{% docs voting_plan_time_of_day %}\nThe time of day when the user plans to vote, e.g morning, afternoon, evening\n{% enddocs %}\n\n{% docs voting_plan_method_of_transport %}\nHow the user plans to get to their polling place. e.g. walk, drive\n{% enddocs %}\n\n{% docs voting_plan_attending_with %}\nWith Whom the user plans to go voting, e.g. family, friends, alone\n{% enddocs %}\n\n{% docs feature_flags %}\nJSON containing info on features like badges and refer-a-friend.\n{% enddocs %}\n\n{% docs dbt_updated_at %}\nDBT snapshot table data. The updated_at timestamp of the source record when this snapshot row was inserted.\n{% enddocs %}\n\n{% docs dbt_scd_id %}\nDBT snapshot table data. A unique key generated for each snapshotted record.\n{% enddocs %}\n\n{% docs dbt_valid_from %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this snapshot row was first inserted\n{% enddocs %}\n\n{% docs dbt_valid_to %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this row row became invalidated.\n{% enddocs %}\n\n{% docs google_id %}\nUser's Google ID obtained from login.\n{% enddocs %}\n\n{% docs causes %}\nCauses in which a user is interested. e.g. animal welfare, education, mental_health\n{% enddocs %}\n\n{% docs email_subscription_status %}\nEmail subscription status of the user\n{% enddocs %}\n\n{% docs role %}\nUser's role, e.g. user, staff\n{% enddocs %}\n\n{% docs cio_backfilled %}\nWhether this user's data was backfilled from CIO\n{% enddocs %}\n\n{% docs addr_source %}\nWhere the user submitted their address, e.g. sms, GDPR\n{% enddocs %}\n\n{% docs email_subscription_topics %}\nEmail subscription topics correspond to categories in CIO in which the user is interested. e.g. lifestyle, community, scholarship\n{% enddocs %}\n\n{% docs sms_paused %}\nWhether we've paused sending sms messages to the user.\n{% enddocs %}\n\n\n\n\n", "name": "newsletter_topic", "unique_id": "ds_dbt.newsletter_topic", "block_contents": "Newsletter topic. (e.g. community, lifestyle)"}, "ds_dbt.user_agent": {"root_path": "/Users/mrich/projects/quasar/quasar/dbt", "resource_type": "docs", "path": "schema.md", "original_file_path": "models/schema.md", "package_name": "ds_dbt", "file_contents": "\n{% docs click_id %}\nThis is a unique identifier for each click\n{% enddocs %}\n\n{% docs click_time %}\nTimestamp when user clicked.\n{% enddocs %}\n\n{% docs shortened %}\nShortened URL\n{% enddocs %}\n\n{% docs target_url %}\nURL where the user will be directed\n{% enddocs %}\n\n{% docs broadcast_id %}\nID of the broadcast that generated the shortened URL\n{% enddocs %}\n\n{% docs source %}\nSource of the URL (e.g. SMS, web), origin of the post (e.g. phoenix-web, phoenix-ashes, sms), or source where user was acquired. (e.g. sms, phoenix-next)\n{% enddocs %}\n\n{% docs interaction_type %}\nHow the user interacted with the link (e.g. preview, click)\n{% enddocs %}\n\n{% docs id %}\nUnique identifier for the post\n{% enddocs %}\n\n{% docs type %}\nType of post (e.g. photo)\n{% enddocs %}\n\n{% docs action %}\nPost action (e.g. DefendDreamers_Nov9_CongressCalls, GunViolence2018_Feb15_ParklandResponse)\n{% enddocs %}\n\n{% docs status %}\nPost status (e.g. accepted, rejected)\n{% enddocs %}\n\n{% docs quantity %}\nNumerical quantity of items specified in the call to action (e.g. 10, 200)\n{% enddocs %}\n\n{% docs source_bucket %}\nGrouping bucket for origin of the post (e.g. web, sms) \n{% enddocs %}\n\n{% docs created_at %}\nWhen the item was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs updated_at %}\nWhen the item was updated in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs text %}\nText of the post (e.g. \"Zoo animals and a super hero trying to help too!\") \n{% enddocs %}\n\n{% docs signup_id %}\nUnique identifier for the signup \n{% enddocs %}\n\n{% docs post_class %}\nClass of the signup (e.g. \"photo - default\", \"phone-call - DefendDreamers_Jan16_BothBodies\")\n{% enddocs %}\n\n{% docs is_accepted %}\nWhether the post has been accepted to be displayed to the public on the website\n{% enddocs %}\n\n{% docs action_id %}\nInternal identifier of the action \n{% enddocs %}\n\n{% docs location %}\nLocation where the action takes place (e.g. US-NY)\n{% enddocs %}\n\n{% docs postal_code %}\nPostal code where the action takes place\n{% enddocs %}\n\n{% docs is_reportback %}\nWhether the post is a reportback. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs civic_action %}\nWhether the post is a Civic Action. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs scholarship_entry %}\nWhether the post is a Scholarship Entry. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs why_participated %}\nWhy the user participated in this action. Entered by the user.\n{% enddocs %}\n\n{% docs details %}\nDetails about the post. Contains contentfulId and other information (e.g. {\"campaignContentfulId\":\"6ATBgGEQEeJoIcxs1qbwaC\"})\n{% enddocs %}\n\n{% docs email %}\nEmail address of the user.\n{% enddocs %}\n\n{% docs source_details %}\nDetails about the source of the item. This is sometimes represented as a JSON object, and for other tables like Turbovote its represented as a string. (e.g. \"{\"contentful_id\":\"3CTLlXfbwtz1FOMpl31SKV\",\"utm_source\":\"scholarship_listing\",\"utm_medium\":\"referral\",\"utm_campaign\":\"fastweb_2019_08\"}\", newsletter_456)\n{% enddocs %}\n\n{% docs campaign_id %}\nThis is a unique identifier for the campaign\n{% enddocs %}\n\n{% docs campaign_run_id %}\nUnique identifier for the campaign run\n{% enddocs %}\n\n{% docs campaign_name %}\nName of the campaign\n{% enddocs %}\n\n{% docs campaign_cause %}\nCampaign cause (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_run_start_date %}\nStart date of the campaign run\n{% enddocs %}\n\n{% docs campaign_run_end_date %}\nEnd date of the campaign run\n{% enddocs %}\n\n{% docs campaign_created_date %}\nWhen the campaign was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs campaign_node_id %}\nInternal unique node id for the campaign\n{% enddocs %}\n\n{% docs campaign_node_id_title %}\nCampaign title\n{% enddocs %}\n\n{% docs campaign_run_id_title %}\nTitle of the campaign run\n{% enddocs %}\n\n{% docs campaign_action_type %}\nCampaign action type (eg. Make Something, Share Something)\n{% enddocs %}\n\n{% docs campaign_cause_type %}\nCampaign cause type (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_noun %}\nNoun applicable to the user's action\n{% enddocs %}\n\n{% docs campaign_verb %}\nVerb describing the action the user should take\n{% enddocs %}\n\n{% docs campaign_cta %}\nCampaign's call to action\n{% enddocs %}\n\n{% docs campaign_language %}\n\"Language in which the campaign is available\"\n{% enddocs %}\n\n{% docs agent_id %}\nIf set, the content type of the picture the member is sending us. Exp. image/png.\n{% enddocs %}\n\n{% docs attachment_content_type %}\nIf set, the handle of the Front agent this outbound support message is from.\n{% enddocs %}\n\n{% docs topic %}\nHolds a reference to the **last** campaign topic the member's conversation was in. This is useful to allow members to talk to Gambit and get quick responses (through Rivescript), without Gambit completely forgetting what state the member's interaction with a campaign topic was in.\n{% enddocs %}\n\n{% docs action_serial_id %}\nSerial id for the user's action. Depends on the source of the action. May be the bertly click id, sms message id, etc.\n{% enddocs %}\n\n{% docs channel %}\nChannel for the user's action. Depends on the source of the action. (e.g. web, sms)\n{% enddocs %}\n\n{% docs first_action_month %}\nMonth during which the user took their first action. \n{% enddocs %}\n\n{% docs event_id %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs event_source %}\nApplication source for event (eg. Phoenix, Northstar)\n{% enddocs %}\n\n{% docs event_datetime %}\nWhen the event occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs event_name %}\nName of the event (eg. northstar_submitted_register, https://docs.google.com/spreadsheets/d/1lm-fGrIm85nUTxSojqyCt_Ehmm1zEbViFhKpxcJiz1A/edit#gid=406441516)\n{% enddocs %}\n\n{% docs event_type %}\nType of event (pv = 'Page View', se = 'Structured Event')\n{% enddocs %}\n\n{% docs host %}\nURL host where event occurred (eg. www.dosomething.org or identity.dosomething.org)\n{% enddocs %}\n\n{% docs path %}\nURL path event occurred at (eg. /login or /us/campaigns/huddle-for-heroes)\n{% enddocs %}\n\n{% docs query_parameters %}\nOptional query parameters for the request (eg. query=huddle)\n{% enddocs %}\n\n{% docs se_category %}\nCategory of event (eg. focused_field, authentication) - Custom structured event\n{% enddocs %}\n\n{% docs se_action %}\nAction performed / event name (eg. form_submitted, action_failed) - Custom structured event\n{% enddocs %}\n\n{% docs se_label %}\nThe object of the action (eg. first_name, register, voter_reg_status) - Custom structured event\n{% enddocs %}\n\n{% docs session_id %}\nUnique identifier of the user's session\n{% enddocs %}\n\n{% docs session_counter %}\nHow many sessions a user has started\n{% enddocs %}\n\n{% docs browser_size %}\nWhich type of browser a user is using (eg. Mobile, Desktop)\n{% enddocs %}\n\n{% docs northstar_id %}\nThe Northstar ID of the user who generated the event\n{% enddocs %}\n\n{% docs device_id %}\nID of the device used\n{% enddocs %}\n\n{% docs referrer_host %}\nURL host of the referring site (eg. google.com)\n{% enddocs %}\n\n{% docs referrer_path %}\nURL path from referring site (eg. /10-stats-on-teen-drug-and-alcohol-use/)\n{% enddocs %}\n\n{% docs referrer_source %}\nReferrer source name (eg. Google, Facebook)\n{% enddocs %}\n\n{% docs utm_source %}\nTracks where the traffic is coming from. (eg. scholarship_listing, Facebook)\n{% enddocs %}\n\n{% docs utm_medium %}\nHow the traffic got to the platform (eg. referral, CPC)\n{% enddocs %}\n\n{% docs utm_campaign %}\nTracks which campaign the traffic was generated by. Shows up in Google Analytics as Campaign Name (eg. editorial_newsletter)\n{% enddocs %}\n\n{% docs url %}\nURL of campaign (eg. https://dosome.click/nyn5m7)\n{% enddocs %}\n\n{% docs modal_type %}\nNULL or SURVEY_MODAL\n{% enddocs %}\n\n{% docs landing_datetime %}\nWhen the session started in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs ending_datetime %}\nWhen the session ended in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs session_duration_seconds %}\nSession duration in seconds\n{% enddocs %}\n\n{% docs num_pages_views %}\nNumber of pages viewed in session\n{% enddocs %}\n\n{% docs landing_page %}\nFirst page the user viewed in the session (eg. /us/facts/11-facts-about-bp-oil-spill)\n{% enddocs %}\n\n{% docs exit_page %}\n\"Which page the user ended or exited their session from (eg. /us/campaigns/green-your-getaway)\"\n{% enddocs %}\n\n{% docs days_since_last_session %}\n\"Days since their last session.\"\n{% enddocs %}\n\n{% docs post_type %}\nType of post, (e.g. photo, voter-reg)\n{% enddocs %}\n\n{% docs noun %}\nNoun that corresponds to the item in the call to action that was delivered. (e.g. drawings, tweets)\n{% enddocs %}\n\n{% docs verb %}\nVerb corresponding to the action the user took. (e.g. shared, sent, taken)\n{% enddocs %}\n\n{% docs deleted_at %}\nDate time in UTC when a user deleted their post.\n{% enddocs %}\n\n{% docs _fivetran_deleted %}\nMarks rows that were deleted in the source table\n{% enddocs %}\n\n{% docs _fivetran_synced %}\n(UTC timestamp) keeps track of when each row was last successfully synced\n{% enddocs %}\n\n{% docs reportback %}\nWhether the post is a reportback \n{% enddocs %}\n\n{% docs active %}\nWhether the user is active \n{% enddocs %}\n\n{% docs anonymous %}\nWhether the user is anonymous when making the post \n{% enddocs %}\n\n{% docs callpower_campaign_id %}\nUnique ID corresponding to the Callpower campaign. Callpower allows users to record messages for their representatives.\n{% enddocs %}\n\n{% docs quiz %}\nWhether the post is a quiz \n{% enddocs %}\n\n{% docs action_type %}\nType of action the user took. (e.g. share-something, donate-something)\n{% enddocs %}\n\n{% docs online %}\nWhether the action is a online as opposed to IRL.\n{% enddocs %}\n\n{% docs time_commitment %}\nEstimated time required to do the action (e.g. 3.0+, <0.5)\n{% enddocs %}\n\n{% docs num_signups %}\nQuantity of campaign signups\n{% enddocs %}\n\n{% docs most_recent_signup %}\nTimestamp of the most recent signup in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs num_rbs %}\nQuantity of reportbacks for the user\n{% enddocs %}\n\n{% docs total_quantity %}\nTotal quantity of items in reportbacks\n{% enddocs %}\n\n{% docs most_recent_rb %}\nWhen the most recent reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs first_rb %}\nWhen the first reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs avg_time_betw_rbs %}\nCalculated average time between reportbacks.\n{% enddocs %}\n\n{% docs avg_days_next_action_after_rb %}\nCalculated average days until next action after reportback\n{% enddocs %}\n\n{% docs days_to_next_action_after_last_rb %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs most_recent_mam_action %}\nMost recent monthly active member qualifying action in UTC (eg. 2018-01-01 12:00:00).\n{% enddocs %}\n\n{% docs most_recent_email_open %}\nMost recent email open in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs most_recent_all_actions %}\nMost recent timestamp of any action in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs last_action_is_rb %}\nWhether the last action the user took was a reportback\n{% enddocs %}\n\n{% docs days_since_last_action %}\nDays since the user's last action\n{% enddocs %}\n\n{% docs time_to_first_rb %}\nHow much time after registering until the user's first reportback\n{% enddocs %}\n\n{% docs sms_unsubscribed_at %}\nTimestamp of when user unsubscribed from SMS messaging\n{% enddocs %}\n\n{% docs user_unsubscribed_at %}\nTimestamp of when user unsubscribed from email or sms\n{% enddocs %}\n\n{% docs voter_reg_acquisition %}\nWhether the user was an acquisition through voter registration efforts. \n{% enddocs %}\n\n{% docs last_logged_in %}\nDate time in UTC when user last logged in to Northstar\n{% enddocs %}\n\n{% docs last_accessed %}\nDate time in UTC when user last access the website\n{% enddocs %}\n\n{% docs last_messaged_at %}\nDate time in UTC when user was last sent a message via SMS or email\n{% enddocs %}\n\n{% docs facebook_id %}\nUser's facebook id\n{% enddocs %}\n\n{% docs mobile %}\nUsers's mobile phone number\n{% enddocs %}\n\n{% docs birthdate %}\nUser's birthdate\n{% enddocs %}\n\n{% docs first_name %}\nUser's first name\n{% enddocs %}\n\n{% docs last_name %}\nUser's last name\n{% enddocs %}\n\n{% docs voter_registration_status %}\nUser's registration status. (e.g. registration_complete, confirmed, uncertain) \n{% enddocs %}\n\n{% docs finish_with_state %}\nIf the registrant was eligible to use and passed through to complete their registration with their state\u2019s OVR system, it will be indicated in this field (direct quote from Rock-The-Vote documentation). Yes/No value in field.\n{% enddocs %}\n\n{% docs reportback_volume %}\nThis field returns 1 if non voter-reg action, since campaigns team only counts those a 1 reportback. If voter-reg action, we want to count quantity of post as number of registered voters.\n{% enddocs %}\n\n{% docs address_street_1 %}\nFirst line of user's street address\n{% enddocs %}\n\n{% docs address_street_2 %}\nSecond line of user's street address\n{% enddocs %}\n\n{% docs city %}\nUser's city\n{% enddocs %}\n\n{% docs state %}\nUser's state\n{% enddocs %}\n\n{% docs country %}\nUser's country\n{% enddocs %}\n\n{% docs language %}\nUser's language\n{% enddocs %}\n\n{% docs cio_status %}\nStatus of user from CIO. (e.g. customer_subscribed, customer_unsubscribed)\n{% enddocs %}\n\n{% docs cio_status_timestamp %}\nTimestamp when users's status was updated.\n{% enddocs %}\n\n{% docs sms_status %}\nCurrent SMS status. (e.g. undeliverable, unknown)\n{% enddocs %}\n\n{% docs source_detail %}\nDetails of the origin of the user. (e.g. tell_a_friend, other, opt_in_path/197981)\n{% enddocs %}\n\n{% docs badges %}\nWhether the user has any badges. \n{% enddocs %}\n\n{% docs refer_friends %}\nWhether the user is a part of the refer a friend campaign. \n{% enddocs %}\n\n{% docs subscribed_member %}\nWhether the user is subscribed. \n{% enddocs %}\n\n{% docs last_updated_at %}\nTimestamp when users's was updated.\n{% enddocs %}\n\n{% docs school_id %}\nUnique identifier for the user's school. This info comes from the school finder.\n{% enddocs %}\n\n{% docs newsletter_topic %}\nNewsletter topic. (e.g. community, lifestyle)\n{% enddocs %}\n\n{% docs user_agent %}\nFull user agent string for a user's browser (e.g. \"Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:24.0) Gecko/20100101 Firefox/24.0\")\n{% enddocs %}\n\n{% docs drupal_id %}\nOld Drupal user ID\n{% enddocs %}\n\n{% docs campaigns %}\nCampaigns a user is signed up for.\n{% enddocs %}\n\n{% docs audit %}\nA very useful field with data containing information about changes to a user, e.g. timestamps when the user subscribed and unsubscribed.\n{% enddocs %}\n\n{% docs voting_plan_status %}\nThe indication of the user's plan to vote, e.g. voting, not_voting, cant_vote\n{% enddocs %}\n\n{% docs voting_plan_time_of_day %}\nThe time of day when the user plans to vote, e.g morning, afternoon, evening\n{% enddocs %}\n\n{% docs voting_plan_method_of_transport %}\nHow the user plans to get to their polling place. e.g. walk, drive\n{% enddocs %}\n\n{% docs voting_plan_attending_with %}\nWith Whom the user plans to go voting, e.g. family, friends, alone\n{% enddocs %}\n\n{% docs feature_flags %}\nJSON containing info on features like badges and refer-a-friend.\n{% enddocs %}\n\n{% docs dbt_updated_at %}\nDBT snapshot table data. The updated_at timestamp of the source record when this snapshot row was inserted.\n{% enddocs %}\n\n{% docs dbt_scd_id %}\nDBT snapshot table data. A unique key generated for each snapshotted record.\n{% enddocs %}\n\n{% docs dbt_valid_from %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this snapshot row was first inserted\n{% enddocs %}\n\n{% docs dbt_valid_to %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this row row became invalidated.\n{% enddocs %}\n\n{% docs google_id %}\nUser's Google ID obtained from login.\n{% enddocs %}\n\n{% docs causes %}\nCauses in which a user is interested. e.g. animal welfare, education, mental_health\n{% enddocs %}\n\n{% docs email_subscription_status %}\nEmail subscription status of the user\n{% enddocs %}\n\n{% docs role %}\nUser's role, e.g. user, staff\n{% enddocs %}\n\n{% docs cio_backfilled %}\nWhether this user's data was backfilled from CIO\n{% enddocs %}\n\n{% docs addr_source %}\nWhere the user submitted their address, e.g. sms, GDPR\n{% enddocs %}\n\n{% docs email_subscription_topics %}\nEmail subscription topics correspond to categories in CIO in which the user is interested. e.g. lifestyle, community, scholarship\n{% enddocs %}\n\n{% docs sms_paused %}\nWhether we've paused sending sms messages to the user.\n{% enddocs %}\n\n\n\n\n", "name": "user_agent", "unique_id": "ds_dbt.user_agent", "block_contents": "Full user agent string for a user's browser (e.g. \"Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:24.0) Gecko/20100101 Firefox/24.0\")"}, "ds_dbt.drupal_id": {"root_path": "/Users/mrich/projects/quasar/quasar/dbt", "resource_type": "docs", "path": "schema.md", "original_file_path": "models/schema.md", "package_name": "ds_dbt", "file_contents": "\n{% docs click_id %}\nThis is a unique identifier for each click\n{% enddocs %}\n\n{% docs click_time %}\nTimestamp when user clicked.\n{% enddocs %}\n\n{% docs shortened %}\nShortened URL\n{% enddocs %}\n\n{% docs target_url %}\nURL where the user will be directed\n{% enddocs %}\n\n{% docs broadcast_id %}\nID of the broadcast that generated the shortened URL\n{% enddocs %}\n\n{% docs source %}\nSource of the URL (e.g. SMS, web), origin of the post (e.g. phoenix-web, phoenix-ashes, sms), or source where user was acquired. (e.g. sms, phoenix-next)\n{% enddocs %}\n\n{% docs interaction_type %}\nHow the user interacted with the link (e.g. preview, click)\n{% enddocs %}\n\n{% docs id %}\nUnique identifier for the post\n{% enddocs %}\n\n{% docs type %}\nType of post (e.g. photo)\n{% enddocs %}\n\n{% docs action %}\nPost action (e.g. DefendDreamers_Nov9_CongressCalls, GunViolence2018_Feb15_ParklandResponse)\n{% enddocs %}\n\n{% docs status %}\nPost status (e.g. accepted, rejected)\n{% enddocs %}\n\n{% docs quantity %}\nNumerical quantity of items specified in the call to action (e.g. 10, 200)\n{% enddocs %}\n\n{% docs source_bucket %}\nGrouping bucket for origin of the post (e.g. web, sms) \n{% enddocs %}\n\n{% docs created_at %}\nWhen the item was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs updated_at %}\nWhen the item was updated in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs text %}\nText of the post (e.g. \"Zoo animals and a super hero trying to help too!\") \n{% enddocs %}\n\n{% docs signup_id %}\nUnique identifier for the signup \n{% enddocs %}\n\n{% docs post_class %}\nClass of the signup (e.g. \"photo - default\", \"phone-call - DefendDreamers_Jan16_BothBodies\")\n{% enddocs %}\n\n{% docs is_accepted %}\nWhether the post has been accepted to be displayed to the public on the website\n{% enddocs %}\n\n{% docs action_id %}\nInternal identifier of the action \n{% enddocs %}\n\n{% docs location %}\nLocation where the action takes place (e.g. US-NY)\n{% enddocs %}\n\n{% docs postal_code %}\nPostal code where the action takes place\n{% enddocs %}\n\n{% docs is_reportback %}\nWhether the post is a reportback. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs civic_action %}\nWhether the post is a Civic Action. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs scholarship_entry %}\nWhether the post is a Scholarship Entry. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs why_participated %}\nWhy the user participated in this action. Entered by the user.\n{% enddocs %}\n\n{% docs details %}\nDetails about the post. Contains contentfulId and other information (e.g. {\"campaignContentfulId\":\"6ATBgGEQEeJoIcxs1qbwaC\"})\n{% enddocs %}\n\n{% docs email %}\nEmail address of the user.\n{% enddocs %}\n\n{% docs source_details %}\nDetails about the source of the item. This is sometimes represented as a JSON object, and for other tables like Turbovote its represented as a string. (e.g. \"{\"contentful_id\":\"3CTLlXfbwtz1FOMpl31SKV\",\"utm_source\":\"scholarship_listing\",\"utm_medium\":\"referral\",\"utm_campaign\":\"fastweb_2019_08\"}\", newsletter_456)\n{% enddocs %}\n\n{% docs campaign_id %}\nThis is a unique identifier for the campaign\n{% enddocs %}\n\n{% docs campaign_run_id %}\nUnique identifier for the campaign run\n{% enddocs %}\n\n{% docs campaign_name %}\nName of the campaign\n{% enddocs %}\n\n{% docs campaign_cause %}\nCampaign cause (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_run_start_date %}\nStart date of the campaign run\n{% enddocs %}\n\n{% docs campaign_run_end_date %}\nEnd date of the campaign run\n{% enddocs %}\n\n{% docs campaign_created_date %}\nWhen the campaign was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs campaign_node_id %}\nInternal unique node id for the campaign\n{% enddocs %}\n\n{% docs campaign_node_id_title %}\nCampaign title\n{% enddocs %}\n\n{% docs campaign_run_id_title %}\nTitle of the campaign run\n{% enddocs %}\n\n{% docs campaign_action_type %}\nCampaign action type (eg. Make Something, Share Something)\n{% enddocs %}\n\n{% docs campaign_cause_type %}\nCampaign cause type (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_noun %}\nNoun applicable to the user's action\n{% enddocs %}\n\n{% docs campaign_verb %}\nVerb describing the action the user should take\n{% enddocs %}\n\n{% docs campaign_cta %}\nCampaign's call to action\n{% enddocs %}\n\n{% docs campaign_language %}\n\"Language in which the campaign is available\"\n{% enddocs %}\n\n{% docs agent_id %}\nIf set, the content type of the picture the member is sending us. Exp. image/png.\n{% enddocs %}\n\n{% docs attachment_content_type %}\nIf set, the handle of the Front agent this outbound support message is from.\n{% enddocs %}\n\n{% docs topic %}\nHolds a reference to the **last** campaign topic the member's conversation was in. This is useful to allow members to talk to Gambit and get quick responses (through Rivescript), without Gambit completely forgetting what state the member's interaction with a campaign topic was in.\n{% enddocs %}\n\n{% docs action_serial_id %}\nSerial id for the user's action. Depends on the source of the action. May be the bertly click id, sms message id, etc.\n{% enddocs %}\n\n{% docs channel %}\nChannel for the user's action. Depends on the source of the action. (e.g. web, sms)\n{% enddocs %}\n\n{% docs first_action_month %}\nMonth during which the user took their first action. \n{% enddocs %}\n\n{% docs event_id %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs event_source %}\nApplication source for event (eg. Phoenix, Northstar)\n{% enddocs %}\n\n{% docs event_datetime %}\nWhen the event occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs event_name %}\nName of the event (eg. northstar_submitted_register, https://docs.google.com/spreadsheets/d/1lm-fGrIm85nUTxSojqyCt_Ehmm1zEbViFhKpxcJiz1A/edit#gid=406441516)\n{% enddocs %}\n\n{% docs event_type %}\nType of event (pv = 'Page View', se = 'Structured Event')\n{% enddocs %}\n\n{% docs host %}\nURL host where event occurred (eg. www.dosomething.org or identity.dosomething.org)\n{% enddocs %}\n\n{% docs path %}\nURL path event occurred at (eg. /login or /us/campaigns/huddle-for-heroes)\n{% enddocs %}\n\n{% docs query_parameters %}\nOptional query parameters for the request (eg. query=huddle)\n{% enddocs %}\n\n{% docs se_category %}\nCategory of event (eg. focused_field, authentication) - Custom structured event\n{% enddocs %}\n\n{% docs se_action %}\nAction performed / event name (eg. form_submitted, action_failed) - Custom structured event\n{% enddocs %}\n\n{% docs se_label %}\nThe object of the action (eg. first_name, register, voter_reg_status) - Custom structured event\n{% enddocs %}\n\n{% docs session_id %}\nUnique identifier of the user's session\n{% enddocs %}\n\n{% docs session_counter %}\nHow many sessions a user has started\n{% enddocs %}\n\n{% docs browser_size %}\nWhich type of browser a user is using (eg. Mobile, Desktop)\n{% enddocs %}\n\n{% docs northstar_id %}\nThe Northstar ID of the user who generated the event\n{% enddocs %}\n\n{% docs device_id %}\nID of the device used\n{% enddocs %}\n\n{% docs referrer_host %}\nURL host of the referring site (eg. google.com)\n{% enddocs %}\n\n{% docs referrer_path %}\nURL path from referring site (eg. /10-stats-on-teen-drug-and-alcohol-use/)\n{% enddocs %}\n\n{% docs referrer_source %}\nReferrer source name (eg. Google, Facebook)\n{% enddocs %}\n\n{% docs utm_source %}\nTracks where the traffic is coming from. (eg. scholarship_listing, Facebook)\n{% enddocs %}\n\n{% docs utm_medium %}\nHow the traffic got to the platform (eg. referral, CPC)\n{% enddocs %}\n\n{% docs utm_campaign %}\nTracks which campaign the traffic was generated by. Shows up in Google Analytics as Campaign Name (eg. editorial_newsletter)\n{% enddocs %}\n\n{% docs url %}\nURL of campaign (eg. https://dosome.click/nyn5m7)\n{% enddocs %}\n\n{% docs modal_type %}\nNULL or SURVEY_MODAL\n{% enddocs %}\n\n{% docs landing_datetime %}\nWhen the session started in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs ending_datetime %}\nWhen the session ended in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs session_duration_seconds %}\nSession duration in seconds\n{% enddocs %}\n\n{% docs num_pages_views %}\nNumber of pages viewed in session\n{% enddocs %}\n\n{% docs landing_page %}\nFirst page the user viewed in the session (eg. /us/facts/11-facts-about-bp-oil-spill)\n{% enddocs %}\n\n{% docs exit_page %}\n\"Which page the user ended or exited their session from (eg. /us/campaigns/green-your-getaway)\"\n{% enddocs %}\n\n{% docs days_since_last_session %}\n\"Days since their last session.\"\n{% enddocs %}\n\n{% docs post_type %}\nType of post, (e.g. photo, voter-reg)\n{% enddocs %}\n\n{% docs noun %}\nNoun that corresponds to the item in the call to action that was delivered. (e.g. drawings, tweets)\n{% enddocs %}\n\n{% docs verb %}\nVerb corresponding to the action the user took. (e.g. shared, sent, taken)\n{% enddocs %}\n\n{% docs deleted_at %}\nDate time in UTC when a user deleted their post.\n{% enddocs %}\n\n{% docs _fivetran_deleted %}\nMarks rows that were deleted in the source table\n{% enddocs %}\n\n{% docs _fivetran_synced %}\n(UTC timestamp) keeps track of when each row was last successfully synced\n{% enddocs %}\n\n{% docs reportback %}\nWhether the post is a reportback \n{% enddocs %}\n\n{% docs active %}\nWhether the user is active \n{% enddocs %}\n\n{% docs anonymous %}\nWhether the user is anonymous when making the post \n{% enddocs %}\n\n{% docs callpower_campaign_id %}\nUnique ID corresponding to the Callpower campaign. Callpower allows users to record messages for their representatives.\n{% enddocs %}\n\n{% docs quiz %}\nWhether the post is a quiz \n{% enddocs %}\n\n{% docs action_type %}\nType of action the user took. (e.g. share-something, donate-something)\n{% enddocs %}\n\n{% docs online %}\nWhether the action is a online as opposed to IRL.\n{% enddocs %}\n\n{% docs time_commitment %}\nEstimated time required to do the action (e.g. 3.0+, <0.5)\n{% enddocs %}\n\n{% docs num_signups %}\nQuantity of campaign signups\n{% enddocs %}\n\n{% docs most_recent_signup %}\nTimestamp of the most recent signup in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs num_rbs %}\nQuantity of reportbacks for the user\n{% enddocs %}\n\n{% docs total_quantity %}\nTotal quantity of items in reportbacks\n{% enddocs %}\n\n{% docs most_recent_rb %}\nWhen the most recent reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs first_rb %}\nWhen the first reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs avg_time_betw_rbs %}\nCalculated average time between reportbacks.\n{% enddocs %}\n\n{% docs avg_days_next_action_after_rb %}\nCalculated average days until next action after reportback\n{% enddocs %}\n\n{% docs days_to_next_action_after_last_rb %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs most_recent_mam_action %}\nMost recent monthly active member qualifying action in UTC (eg. 2018-01-01 12:00:00).\n{% enddocs %}\n\n{% docs most_recent_email_open %}\nMost recent email open in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs most_recent_all_actions %}\nMost recent timestamp of any action in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs last_action_is_rb %}\nWhether the last action the user took was a reportback\n{% enddocs %}\n\n{% docs days_since_last_action %}\nDays since the user's last action\n{% enddocs %}\n\n{% docs time_to_first_rb %}\nHow much time after registering until the user's first reportback\n{% enddocs %}\n\n{% docs sms_unsubscribed_at %}\nTimestamp of when user unsubscribed from SMS messaging\n{% enddocs %}\n\n{% docs user_unsubscribed_at %}\nTimestamp of when user unsubscribed from email or sms\n{% enddocs %}\n\n{% docs voter_reg_acquisition %}\nWhether the user was an acquisition through voter registration efforts. \n{% enddocs %}\n\n{% docs last_logged_in %}\nDate time in UTC when user last logged in to Northstar\n{% enddocs %}\n\n{% docs last_accessed %}\nDate time in UTC when user last access the website\n{% enddocs %}\n\n{% docs last_messaged_at %}\nDate time in UTC when user was last sent a message via SMS or email\n{% enddocs %}\n\n{% docs facebook_id %}\nUser's facebook id\n{% enddocs %}\n\n{% docs mobile %}\nUsers's mobile phone number\n{% enddocs %}\n\n{% docs birthdate %}\nUser's birthdate\n{% enddocs %}\n\n{% docs first_name %}\nUser's first name\n{% enddocs %}\n\n{% docs last_name %}\nUser's last name\n{% enddocs %}\n\n{% docs voter_registration_status %}\nUser's registration status. (e.g. registration_complete, confirmed, uncertain) \n{% enddocs %}\n\n{% docs finish_with_state %}\nIf the registrant was eligible to use and passed through to complete their registration with their state\u2019s OVR system, it will be indicated in this field (direct quote from Rock-The-Vote documentation). Yes/No value in field.\n{% enddocs %}\n\n{% docs reportback_volume %}\nThis field returns 1 if non voter-reg action, since campaigns team only counts those a 1 reportback. If voter-reg action, we want to count quantity of post as number of registered voters.\n{% enddocs %}\n\n{% docs address_street_1 %}\nFirst line of user's street address\n{% enddocs %}\n\n{% docs address_street_2 %}\nSecond line of user's street address\n{% enddocs %}\n\n{% docs city %}\nUser's city\n{% enddocs %}\n\n{% docs state %}\nUser's state\n{% enddocs %}\n\n{% docs country %}\nUser's country\n{% enddocs %}\n\n{% docs language %}\nUser's language\n{% enddocs %}\n\n{% docs cio_status %}\nStatus of user from CIO. (e.g. customer_subscribed, customer_unsubscribed)\n{% enddocs %}\n\n{% docs cio_status_timestamp %}\nTimestamp when users's status was updated.\n{% enddocs %}\n\n{% docs sms_status %}\nCurrent SMS status. (e.g. undeliverable, unknown)\n{% enddocs %}\n\n{% docs source_detail %}\nDetails of the origin of the user. (e.g. tell_a_friend, other, opt_in_path/197981)\n{% enddocs %}\n\n{% docs badges %}\nWhether the user has any badges. \n{% enddocs %}\n\n{% docs refer_friends %}\nWhether the user is a part of the refer a friend campaign. \n{% enddocs %}\n\n{% docs subscribed_member %}\nWhether the user is subscribed. \n{% enddocs %}\n\n{% docs last_updated_at %}\nTimestamp when users's was updated.\n{% enddocs %}\n\n{% docs school_id %}\nUnique identifier for the user's school. This info comes from the school finder.\n{% enddocs %}\n\n{% docs newsletter_topic %}\nNewsletter topic. (e.g. community, lifestyle)\n{% enddocs %}\n\n{% docs user_agent %}\nFull user agent string for a user's browser (e.g. \"Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:24.0) Gecko/20100101 Firefox/24.0\")\n{% enddocs %}\n\n{% docs drupal_id %}\nOld Drupal user ID\n{% enddocs %}\n\n{% docs campaigns %}\nCampaigns a user is signed up for.\n{% enddocs %}\n\n{% docs audit %}\nA very useful field with data containing information about changes to a user, e.g. timestamps when the user subscribed and unsubscribed.\n{% enddocs %}\n\n{% docs voting_plan_status %}\nThe indication of the user's plan to vote, e.g. voting, not_voting, cant_vote\n{% enddocs %}\n\n{% docs voting_plan_time_of_day %}\nThe time of day when the user plans to vote, e.g morning, afternoon, evening\n{% enddocs %}\n\n{% docs voting_plan_method_of_transport %}\nHow the user plans to get to their polling place. e.g. walk, drive\n{% enddocs %}\n\n{% docs voting_plan_attending_with %}\nWith Whom the user plans to go voting, e.g. family, friends, alone\n{% enddocs %}\n\n{% docs feature_flags %}\nJSON containing info on features like badges and refer-a-friend.\n{% enddocs %}\n\n{% docs dbt_updated_at %}\nDBT snapshot table data. The updated_at timestamp of the source record when this snapshot row was inserted.\n{% enddocs %}\n\n{% docs dbt_scd_id %}\nDBT snapshot table data. A unique key generated for each snapshotted record.\n{% enddocs %}\n\n{% docs dbt_valid_from %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this snapshot row was first inserted\n{% enddocs %}\n\n{% docs dbt_valid_to %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this row row became invalidated.\n{% enddocs %}\n\n{% docs google_id %}\nUser's Google ID obtained from login.\n{% enddocs %}\n\n{% docs causes %}\nCauses in which a user is interested. e.g. animal welfare, education, mental_health\n{% enddocs %}\n\n{% docs email_subscription_status %}\nEmail subscription status of the user\n{% enddocs %}\n\n{% docs role %}\nUser's role, e.g. user, staff\n{% enddocs %}\n\n{% docs cio_backfilled %}\nWhether this user's data was backfilled from CIO\n{% enddocs %}\n\n{% docs addr_source %}\nWhere the user submitted their address, e.g. sms, GDPR\n{% enddocs %}\n\n{% docs email_subscription_topics %}\nEmail subscription topics correspond to categories in CIO in which the user is interested. e.g. lifestyle, community, scholarship\n{% enddocs %}\n\n{% docs sms_paused %}\nWhether we've paused sending sms messages to the user.\n{% enddocs %}\n\n\n\n\n", "name": "drupal_id", "unique_id": "ds_dbt.drupal_id", "block_contents": "Old Drupal user ID"}, "ds_dbt.campaigns": {"root_path": "/Users/mrich/projects/quasar/quasar/dbt", "resource_type": "docs", "path": "schema.md", "original_file_path": "models/schema.md", "package_name": "ds_dbt", "file_contents": "\n{% docs click_id %}\nThis is a unique identifier for each click\n{% enddocs %}\n\n{% docs click_time %}\nTimestamp when user clicked.\n{% enddocs %}\n\n{% docs shortened %}\nShortened URL\n{% enddocs %}\n\n{% docs target_url %}\nURL where the user will be directed\n{% enddocs %}\n\n{% docs broadcast_id %}\nID of the broadcast that generated the shortened URL\n{% enddocs %}\n\n{% docs source %}\nSource of the URL (e.g. SMS, web), origin of the post (e.g. phoenix-web, phoenix-ashes, sms), or source where user was acquired. (e.g. sms, phoenix-next)\n{% enddocs %}\n\n{% docs interaction_type %}\nHow the user interacted with the link (e.g. preview, click)\n{% enddocs %}\n\n{% docs id %}\nUnique identifier for the post\n{% enddocs %}\n\n{% docs type %}\nType of post (e.g. photo)\n{% enddocs %}\n\n{% docs action %}\nPost action (e.g. DefendDreamers_Nov9_CongressCalls, GunViolence2018_Feb15_ParklandResponse)\n{% enddocs %}\n\n{% docs status %}\nPost status (e.g. accepted, rejected)\n{% enddocs %}\n\n{% docs quantity %}\nNumerical quantity of items specified in the call to action (e.g. 10, 200)\n{% enddocs %}\n\n{% docs source_bucket %}\nGrouping bucket for origin of the post (e.g. web, sms) \n{% enddocs %}\n\n{% docs created_at %}\nWhen the item was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs updated_at %}\nWhen the item was updated in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs text %}\nText of the post (e.g. \"Zoo animals and a super hero trying to help too!\") \n{% enddocs %}\n\n{% docs signup_id %}\nUnique identifier for the signup \n{% enddocs %}\n\n{% docs post_class %}\nClass of the signup (e.g. \"photo - default\", \"phone-call - DefendDreamers_Jan16_BothBodies\")\n{% enddocs %}\n\n{% docs is_accepted %}\nWhether the post has been accepted to be displayed to the public on the website\n{% enddocs %}\n\n{% docs action_id %}\nInternal identifier of the action \n{% enddocs %}\n\n{% docs location %}\nLocation where the action takes place (e.g. US-NY)\n{% enddocs %}\n\n{% docs postal_code %}\nPostal code where the action takes place\n{% enddocs %}\n\n{% docs is_reportback %}\nWhether the post is a reportback. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs civic_action %}\nWhether the post is a Civic Action. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs scholarship_entry %}\nWhether the post is a Scholarship Entry. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs why_participated %}\nWhy the user participated in this action. Entered by the user.\n{% enddocs %}\n\n{% docs details %}\nDetails about the post. Contains contentfulId and other information (e.g. {\"campaignContentfulId\":\"6ATBgGEQEeJoIcxs1qbwaC\"})\n{% enddocs %}\n\n{% docs email %}\nEmail address of the user.\n{% enddocs %}\n\n{% docs source_details %}\nDetails about the source of the item. This is sometimes represented as a JSON object, and for other tables like Turbovote its represented as a string. (e.g. \"{\"contentful_id\":\"3CTLlXfbwtz1FOMpl31SKV\",\"utm_source\":\"scholarship_listing\",\"utm_medium\":\"referral\",\"utm_campaign\":\"fastweb_2019_08\"}\", newsletter_456)\n{% enddocs %}\n\n{% docs campaign_id %}\nThis is a unique identifier for the campaign\n{% enddocs %}\n\n{% docs campaign_run_id %}\nUnique identifier for the campaign run\n{% enddocs %}\n\n{% docs campaign_name %}\nName of the campaign\n{% enddocs %}\n\n{% docs campaign_cause %}\nCampaign cause (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_run_start_date %}\nStart date of the campaign run\n{% enddocs %}\n\n{% docs campaign_run_end_date %}\nEnd date of the campaign run\n{% enddocs %}\n\n{% docs campaign_created_date %}\nWhen the campaign was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs campaign_node_id %}\nInternal unique node id for the campaign\n{% enddocs %}\n\n{% docs campaign_node_id_title %}\nCampaign title\n{% enddocs %}\n\n{% docs campaign_run_id_title %}\nTitle of the campaign run\n{% enddocs %}\n\n{% docs campaign_action_type %}\nCampaign action type (eg. Make Something, Share Something)\n{% enddocs %}\n\n{% docs campaign_cause_type %}\nCampaign cause type (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_noun %}\nNoun applicable to the user's action\n{% enddocs %}\n\n{% docs campaign_verb %}\nVerb describing the action the user should take\n{% enddocs %}\n\n{% docs campaign_cta %}\nCampaign's call to action\n{% enddocs %}\n\n{% docs campaign_language %}\n\"Language in which the campaign is available\"\n{% enddocs %}\n\n{% docs agent_id %}\nIf set, the content type of the picture the member is sending us. Exp. image/png.\n{% enddocs %}\n\n{% docs attachment_content_type %}\nIf set, the handle of the Front agent this outbound support message is from.\n{% enddocs %}\n\n{% docs topic %}\nHolds a reference to the **last** campaign topic the member's conversation was in. This is useful to allow members to talk to Gambit and get quick responses (through Rivescript), without Gambit completely forgetting what state the member's interaction with a campaign topic was in.\n{% enddocs %}\n\n{% docs action_serial_id %}\nSerial id for the user's action. Depends on the source of the action. May be the bertly click id, sms message id, etc.\n{% enddocs %}\n\n{% docs channel %}\nChannel for the user's action. Depends on the source of the action. (e.g. web, sms)\n{% enddocs %}\n\n{% docs first_action_month %}\nMonth during which the user took their first action. \n{% enddocs %}\n\n{% docs event_id %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs event_source %}\nApplication source for event (eg. Phoenix, Northstar)\n{% enddocs %}\n\n{% docs event_datetime %}\nWhen the event occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs event_name %}\nName of the event (eg. northstar_submitted_register, https://docs.google.com/spreadsheets/d/1lm-fGrIm85nUTxSojqyCt_Ehmm1zEbViFhKpxcJiz1A/edit#gid=406441516)\n{% enddocs %}\n\n{% docs event_type %}\nType of event (pv = 'Page View', se = 'Structured Event')\n{% enddocs %}\n\n{% docs host %}\nURL host where event occurred (eg. www.dosomething.org or identity.dosomething.org)\n{% enddocs %}\n\n{% docs path %}\nURL path event occurred at (eg. /login or /us/campaigns/huddle-for-heroes)\n{% enddocs %}\n\n{% docs query_parameters %}\nOptional query parameters for the request (eg. query=huddle)\n{% enddocs %}\n\n{% docs se_category %}\nCategory of event (eg. focused_field, authentication) - Custom structured event\n{% enddocs %}\n\n{% docs se_action %}\nAction performed / event name (eg. form_submitted, action_failed) - Custom structured event\n{% enddocs %}\n\n{% docs se_label %}\nThe object of the action (eg. first_name, register, voter_reg_status) - Custom structured event\n{% enddocs %}\n\n{% docs session_id %}\nUnique identifier of the user's session\n{% enddocs %}\n\n{% docs session_counter %}\nHow many sessions a user has started\n{% enddocs %}\n\n{% docs browser_size %}\nWhich type of browser a user is using (eg. Mobile, Desktop)\n{% enddocs %}\n\n{% docs northstar_id %}\nThe Northstar ID of the user who generated the event\n{% enddocs %}\n\n{% docs device_id %}\nID of the device used\n{% enddocs %}\n\n{% docs referrer_host %}\nURL host of the referring site (eg. google.com)\n{% enddocs %}\n\n{% docs referrer_path %}\nURL path from referring site (eg. /10-stats-on-teen-drug-and-alcohol-use/)\n{% enddocs %}\n\n{% docs referrer_source %}\nReferrer source name (eg. Google, Facebook)\n{% enddocs %}\n\n{% docs utm_source %}\nTracks where the traffic is coming from. (eg. scholarship_listing, Facebook)\n{% enddocs %}\n\n{% docs utm_medium %}\nHow the traffic got to the platform (eg. referral, CPC)\n{% enddocs %}\n\n{% docs utm_campaign %}\nTracks which campaign the traffic was generated by. Shows up in Google Analytics as Campaign Name (eg. editorial_newsletter)\n{% enddocs %}\n\n{% docs url %}\nURL of campaign (eg. https://dosome.click/nyn5m7)\n{% enddocs %}\n\n{% docs modal_type %}\nNULL or SURVEY_MODAL\n{% enddocs %}\n\n{% docs landing_datetime %}\nWhen the session started in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs ending_datetime %}\nWhen the session ended in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs session_duration_seconds %}\nSession duration in seconds\n{% enddocs %}\n\n{% docs num_pages_views %}\nNumber of pages viewed in session\n{% enddocs %}\n\n{% docs landing_page %}\nFirst page the user viewed in the session (eg. /us/facts/11-facts-about-bp-oil-spill)\n{% enddocs %}\n\n{% docs exit_page %}\n\"Which page the user ended or exited their session from (eg. /us/campaigns/green-your-getaway)\"\n{% enddocs %}\n\n{% docs days_since_last_session %}\n\"Days since their last session.\"\n{% enddocs %}\n\n{% docs post_type %}\nType of post, (e.g. photo, voter-reg)\n{% enddocs %}\n\n{% docs noun %}\nNoun that corresponds to the item in the call to action that was delivered. (e.g. drawings, tweets)\n{% enddocs %}\n\n{% docs verb %}\nVerb corresponding to the action the user took. (e.g. shared, sent, taken)\n{% enddocs %}\n\n{% docs deleted_at %}\nDate time in UTC when a user deleted their post.\n{% enddocs %}\n\n{% docs _fivetran_deleted %}\nMarks rows that were deleted in the source table\n{% enddocs %}\n\n{% docs _fivetran_synced %}\n(UTC timestamp) keeps track of when each row was last successfully synced\n{% enddocs %}\n\n{% docs reportback %}\nWhether the post is a reportback \n{% enddocs %}\n\n{% docs active %}\nWhether the user is active \n{% enddocs %}\n\n{% docs anonymous %}\nWhether the user is anonymous when making the post \n{% enddocs %}\n\n{% docs callpower_campaign_id %}\nUnique ID corresponding to the Callpower campaign. Callpower allows users to record messages for their representatives.\n{% enddocs %}\n\n{% docs quiz %}\nWhether the post is a quiz \n{% enddocs %}\n\n{% docs action_type %}\nType of action the user took. (e.g. share-something, donate-something)\n{% enddocs %}\n\n{% docs online %}\nWhether the action is a online as opposed to IRL.\n{% enddocs %}\n\n{% docs time_commitment %}\nEstimated time required to do the action (e.g. 3.0+, <0.5)\n{% enddocs %}\n\n{% docs num_signups %}\nQuantity of campaign signups\n{% enddocs %}\n\n{% docs most_recent_signup %}\nTimestamp of the most recent signup in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs num_rbs %}\nQuantity of reportbacks for the user\n{% enddocs %}\n\n{% docs total_quantity %}\nTotal quantity of items in reportbacks\n{% enddocs %}\n\n{% docs most_recent_rb %}\nWhen the most recent reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs first_rb %}\nWhen the first reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs avg_time_betw_rbs %}\nCalculated average time between reportbacks.\n{% enddocs %}\n\n{% docs avg_days_next_action_after_rb %}\nCalculated average days until next action after reportback\n{% enddocs %}\n\n{% docs days_to_next_action_after_last_rb %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs most_recent_mam_action %}\nMost recent monthly active member qualifying action in UTC (eg. 2018-01-01 12:00:00).\n{% enddocs %}\n\n{% docs most_recent_email_open %}\nMost recent email open in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs most_recent_all_actions %}\nMost recent timestamp of any action in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs last_action_is_rb %}\nWhether the last action the user took was a reportback\n{% enddocs %}\n\n{% docs days_since_last_action %}\nDays since the user's last action\n{% enddocs %}\n\n{% docs time_to_first_rb %}\nHow much time after registering until the user's first reportback\n{% enddocs %}\n\n{% docs sms_unsubscribed_at %}\nTimestamp of when user unsubscribed from SMS messaging\n{% enddocs %}\n\n{% docs user_unsubscribed_at %}\nTimestamp of when user unsubscribed from email or sms\n{% enddocs %}\n\n{% docs voter_reg_acquisition %}\nWhether the user was an acquisition through voter registration efforts. \n{% enddocs %}\n\n{% docs last_logged_in %}\nDate time in UTC when user last logged in to Northstar\n{% enddocs %}\n\n{% docs last_accessed %}\nDate time in UTC when user last access the website\n{% enddocs %}\n\n{% docs last_messaged_at %}\nDate time in UTC when user was last sent a message via SMS or email\n{% enddocs %}\n\n{% docs facebook_id %}\nUser's facebook id\n{% enddocs %}\n\n{% docs mobile %}\nUsers's mobile phone number\n{% enddocs %}\n\n{% docs birthdate %}\nUser's birthdate\n{% enddocs %}\n\n{% docs first_name %}\nUser's first name\n{% enddocs %}\n\n{% docs last_name %}\nUser's last name\n{% enddocs %}\n\n{% docs voter_registration_status %}\nUser's registration status. (e.g. registration_complete, confirmed, uncertain) \n{% enddocs %}\n\n{% docs finish_with_state %}\nIf the registrant was eligible to use and passed through to complete their registration with their state\u2019s OVR system, it will be indicated in this field (direct quote from Rock-The-Vote documentation). Yes/No value in field.\n{% enddocs %}\n\n{% docs reportback_volume %}\nThis field returns 1 if non voter-reg action, since campaigns team only counts those a 1 reportback. If voter-reg action, we want to count quantity of post as number of registered voters.\n{% enddocs %}\n\n{% docs address_street_1 %}\nFirst line of user's street address\n{% enddocs %}\n\n{% docs address_street_2 %}\nSecond line of user's street address\n{% enddocs %}\n\n{% docs city %}\nUser's city\n{% enddocs %}\n\n{% docs state %}\nUser's state\n{% enddocs %}\n\n{% docs country %}\nUser's country\n{% enddocs %}\n\n{% docs language %}\nUser's language\n{% enddocs %}\n\n{% docs cio_status %}\nStatus of user from CIO. (e.g. customer_subscribed, customer_unsubscribed)\n{% enddocs %}\n\n{% docs cio_status_timestamp %}\nTimestamp when users's status was updated.\n{% enddocs %}\n\n{% docs sms_status %}\nCurrent SMS status. (e.g. undeliverable, unknown)\n{% enddocs %}\n\n{% docs source_detail %}\nDetails of the origin of the user. (e.g. tell_a_friend, other, opt_in_path/197981)\n{% enddocs %}\n\n{% docs badges %}\nWhether the user has any badges. \n{% enddocs %}\n\n{% docs refer_friends %}\nWhether the user is a part of the refer a friend campaign. \n{% enddocs %}\n\n{% docs subscribed_member %}\nWhether the user is subscribed. \n{% enddocs %}\n\n{% docs last_updated_at %}\nTimestamp when users's was updated.\n{% enddocs %}\n\n{% docs school_id %}\nUnique identifier for the user's school. This info comes from the school finder.\n{% enddocs %}\n\n{% docs newsletter_topic %}\nNewsletter topic. (e.g. community, lifestyle)\n{% enddocs %}\n\n{% docs user_agent %}\nFull user agent string for a user's browser (e.g. \"Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:24.0) Gecko/20100101 Firefox/24.0\")\n{% enddocs %}\n\n{% docs drupal_id %}\nOld Drupal user ID\n{% enddocs %}\n\n{% docs campaigns %}\nCampaigns a user is signed up for.\n{% enddocs %}\n\n{% docs audit %}\nA very useful field with data containing information about changes to a user, e.g. timestamps when the user subscribed and unsubscribed.\n{% enddocs %}\n\n{% docs voting_plan_status %}\nThe indication of the user's plan to vote, e.g. voting, not_voting, cant_vote\n{% enddocs %}\n\n{% docs voting_plan_time_of_day %}\nThe time of day when the user plans to vote, e.g morning, afternoon, evening\n{% enddocs %}\n\n{% docs voting_plan_method_of_transport %}\nHow the user plans to get to their polling place. e.g. walk, drive\n{% enddocs %}\n\n{% docs voting_plan_attending_with %}\nWith Whom the user plans to go voting, e.g. family, friends, alone\n{% enddocs %}\n\n{% docs feature_flags %}\nJSON containing info on features like badges and refer-a-friend.\n{% enddocs %}\n\n{% docs dbt_updated_at %}\nDBT snapshot table data. The updated_at timestamp of the source record when this snapshot row was inserted.\n{% enddocs %}\n\n{% docs dbt_scd_id %}\nDBT snapshot table data. A unique key generated for each snapshotted record.\n{% enddocs %}\n\n{% docs dbt_valid_from %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this snapshot row was first inserted\n{% enddocs %}\n\n{% docs dbt_valid_to %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this row row became invalidated.\n{% enddocs %}\n\n{% docs google_id %}\nUser's Google ID obtained from login.\n{% enddocs %}\n\n{% docs causes %}\nCauses in which a user is interested. e.g. animal welfare, education, mental_health\n{% enddocs %}\n\n{% docs email_subscription_status %}\nEmail subscription status of the user\n{% enddocs %}\n\n{% docs role %}\nUser's role, e.g. user, staff\n{% enddocs %}\n\n{% docs cio_backfilled %}\nWhether this user's data was backfilled from CIO\n{% enddocs %}\n\n{% docs addr_source %}\nWhere the user submitted their address, e.g. sms, GDPR\n{% enddocs %}\n\n{% docs email_subscription_topics %}\nEmail subscription topics correspond to categories in CIO in which the user is interested. e.g. lifestyle, community, scholarship\n{% enddocs %}\n\n{% docs sms_paused %}\nWhether we've paused sending sms messages to the user.\n{% enddocs %}\n\n\n\n\n", "name": "campaigns", "unique_id": "ds_dbt.campaigns", "block_contents": "Campaigns a user is signed up for."}, "ds_dbt.audit": {"root_path": "/Users/mrich/projects/quasar/quasar/dbt", "resource_type": "docs", "path": "schema.md", "original_file_path": "models/schema.md", "package_name": "ds_dbt", "file_contents": "\n{% docs click_id %}\nThis is a unique identifier for each click\n{% enddocs %}\n\n{% docs click_time %}\nTimestamp when user clicked.\n{% enddocs %}\n\n{% docs shortened %}\nShortened URL\n{% enddocs %}\n\n{% docs target_url %}\nURL where the user will be directed\n{% enddocs %}\n\n{% docs broadcast_id %}\nID of the broadcast that generated the shortened URL\n{% enddocs %}\n\n{% docs source %}\nSource of the URL (e.g. SMS, web), origin of the post (e.g. phoenix-web, phoenix-ashes, sms), or source where user was acquired. (e.g. sms, phoenix-next)\n{% enddocs %}\n\n{% docs interaction_type %}\nHow the user interacted with the link (e.g. preview, click)\n{% enddocs %}\n\n{% docs id %}\nUnique identifier for the post\n{% enddocs %}\n\n{% docs type %}\nType of post (e.g. photo)\n{% enddocs %}\n\n{% docs action %}\nPost action (e.g. DefendDreamers_Nov9_CongressCalls, GunViolence2018_Feb15_ParklandResponse)\n{% enddocs %}\n\n{% docs status %}\nPost status (e.g. accepted, rejected)\n{% enddocs %}\n\n{% docs quantity %}\nNumerical quantity of items specified in the call to action (e.g. 10, 200)\n{% enddocs %}\n\n{% docs source_bucket %}\nGrouping bucket for origin of the post (e.g. web, sms) \n{% enddocs %}\n\n{% docs created_at %}\nWhen the item was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs updated_at %}\nWhen the item was updated in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs text %}\nText of the post (e.g. \"Zoo animals and a super hero trying to help too!\") \n{% enddocs %}\n\n{% docs signup_id %}\nUnique identifier for the signup \n{% enddocs %}\n\n{% docs post_class %}\nClass of the signup (e.g. \"photo - default\", \"phone-call - DefendDreamers_Jan16_BothBodies\")\n{% enddocs %}\n\n{% docs is_accepted %}\nWhether the post has been accepted to be displayed to the public on the website\n{% enddocs %}\n\n{% docs action_id %}\nInternal identifier of the action \n{% enddocs %}\n\n{% docs location %}\nLocation where the action takes place (e.g. US-NY)\n{% enddocs %}\n\n{% docs postal_code %}\nPostal code where the action takes place\n{% enddocs %}\n\n{% docs is_reportback %}\nWhether the post is a reportback. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs civic_action %}\nWhether the post is a Civic Action. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs scholarship_entry %}\nWhether the post is a Scholarship Entry. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs why_participated %}\nWhy the user participated in this action. Entered by the user.\n{% enddocs %}\n\n{% docs details %}\nDetails about the post. Contains contentfulId and other information (e.g. {\"campaignContentfulId\":\"6ATBgGEQEeJoIcxs1qbwaC\"})\n{% enddocs %}\n\n{% docs email %}\nEmail address of the user.\n{% enddocs %}\n\n{% docs source_details %}\nDetails about the source of the item. This is sometimes represented as a JSON object, and for other tables like Turbovote its represented as a string. (e.g. \"{\"contentful_id\":\"3CTLlXfbwtz1FOMpl31SKV\",\"utm_source\":\"scholarship_listing\",\"utm_medium\":\"referral\",\"utm_campaign\":\"fastweb_2019_08\"}\", newsletter_456)\n{% enddocs %}\n\n{% docs campaign_id %}\nThis is a unique identifier for the campaign\n{% enddocs %}\n\n{% docs campaign_run_id %}\nUnique identifier for the campaign run\n{% enddocs %}\n\n{% docs campaign_name %}\nName of the campaign\n{% enddocs %}\n\n{% docs campaign_cause %}\nCampaign cause (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_run_start_date %}\nStart date of the campaign run\n{% enddocs %}\n\n{% docs campaign_run_end_date %}\nEnd date of the campaign run\n{% enddocs %}\n\n{% docs campaign_created_date %}\nWhen the campaign was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs campaign_node_id %}\nInternal unique node id for the campaign\n{% enddocs %}\n\n{% docs campaign_node_id_title %}\nCampaign title\n{% enddocs %}\n\n{% docs campaign_run_id_title %}\nTitle of the campaign run\n{% enddocs %}\n\n{% docs campaign_action_type %}\nCampaign action type (eg. Make Something, Share Something)\n{% enddocs %}\n\n{% docs campaign_cause_type %}\nCampaign cause type (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_noun %}\nNoun applicable to the user's action\n{% enddocs %}\n\n{% docs campaign_verb %}\nVerb describing the action the user should take\n{% enddocs %}\n\n{% docs campaign_cta %}\nCampaign's call to action\n{% enddocs %}\n\n{% docs campaign_language %}\n\"Language in which the campaign is available\"\n{% enddocs %}\n\n{% docs agent_id %}\nIf set, the content type of the picture the member is sending us. Exp. image/png.\n{% enddocs %}\n\n{% docs attachment_content_type %}\nIf set, the handle of the Front agent this outbound support message is from.\n{% enddocs %}\n\n{% docs topic %}\nHolds a reference to the **last** campaign topic the member's conversation was in. This is useful to allow members to talk to Gambit and get quick responses (through Rivescript), without Gambit completely forgetting what state the member's interaction with a campaign topic was in.\n{% enddocs %}\n\n{% docs action_serial_id %}\nSerial id for the user's action. Depends on the source of the action. May be the bertly click id, sms message id, etc.\n{% enddocs %}\n\n{% docs channel %}\nChannel for the user's action. Depends on the source of the action. (e.g. web, sms)\n{% enddocs %}\n\n{% docs first_action_month %}\nMonth during which the user took their first action. \n{% enddocs %}\n\n{% docs event_id %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs event_source %}\nApplication source for event (eg. Phoenix, Northstar)\n{% enddocs %}\n\n{% docs event_datetime %}\nWhen the event occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs event_name %}\nName of the event (eg. northstar_submitted_register, https://docs.google.com/spreadsheets/d/1lm-fGrIm85nUTxSojqyCt_Ehmm1zEbViFhKpxcJiz1A/edit#gid=406441516)\n{% enddocs %}\n\n{% docs event_type %}\nType of event (pv = 'Page View', se = 'Structured Event')\n{% enddocs %}\n\n{% docs host %}\nURL host where event occurred (eg. www.dosomething.org or identity.dosomething.org)\n{% enddocs %}\n\n{% docs path %}\nURL path event occurred at (eg. /login or /us/campaigns/huddle-for-heroes)\n{% enddocs %}\n\n{% docs query_parameters %}\nOptional query parameters for the request (eg. query=huddle)\n{% enddocs %}\n\n{% docs se_category %}\nCategory of event (eg. focused_field, authentication) - Custom structured event\n{% enddocs %}\n\n{% docs se_action %}\nAction performed / event name (eg. form_submitted, action_failed) - Custom structured event\n{% enddocs %}\n\n{% docs se_label %}\nThe object of the action (eg. first_name, register, voter_reg_status) - Custom structured event\n{% enddocs %}\n\n{% docs session_id %}\nUnique identifier of the user's session\n{% enddocs %}\n\n{% docs session_counter %}\nHow many sessions a user has started\n{% enddocs %}\n\n{% docs browser_size %}\nWhich type of browser a user is using (eg. Mobile, Desktop)\n{% enddocs %}\n\n{% docs northstar_id %}\nThe Northstar ID of the user who generated the event\n{% enddocs %}\n\n{% docs device_id %}\nID of the device used\n{% enddocs %}\n\n{% docs referrer_host %}\nURL host of the referring site (eg. google.com)\n{% enddocs %}\n\n{% docs referrer_path %}\nURL path from referring site (eg. /10-stats-on-teen-drug-and-alcohol-use/)\n{% enddocs %}\n\n{% docs referrer_source %}\nReferrer source name (eg. Google, Facebook)\n{% enddocs %}\n\n{% docs utm_source %}\nTracks where the traffic is coming from. (eg. scholarship_listing, Facebook)\n{% enddocs %}\n\n{% docs utm_medium %}\nHow the traffic got to the platform (eg. referral, CPC)\n{% enddocs %}\n\n{% docs utm_campaign %}\nTracks which campaign the traffic was generated by. Shows up in Google Analytics as Campaign Name (eg. editorial_newsletter)\n{% enddocs %}\n\n{% docs url %}\nURL of campaign (eg. https://dosome.click/nyn5m7)\n{% enddocs %}\n\n{% docs modal_type %}\nNULL or SURVEY_MODAL\n{% enddocs %}\n\n{% docs landing_datetime %}\nWhen the session started in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs ending_datetime %}\nWhen the session ended in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs session_duration_seconds %}\nSession duration in seconds\n{% enddocs %}\n\n{% docs num_pages_views %}\nNumber of pages viewed in session\n{% enddocs %}\n\n{% docs landing_page %}\nFirst page the user viewed in the session (eg. /us/facts/11-facts-about-bp-oil-spill)\n{% enddocs %}\n\n{% docs exit_page %}\n\"Which page the user ended or exited their session from (eg. /us/campaigns/green-your-getaway)\"\n{% enddocs %}\n\n{% docs days_since_last_session %}\n\"Days since their last session.\"\n{% enddocs %}\n\n{% docs post_type %}\nType of post, (e.g. photo, voter-reg)\n{% enddocs %}\n\n{% docs noun %}\nNoun that corresponds to the item in the call to action that was delivered. (e.g. drawings, tweets)\n{% enddocs %}\n\n{% docs verb %}\nVerb corresponding to the action the user took. (e.g. shared, sent, taken)\n{% enddocs %}\n\n{% docs deleted_at %}\nDate time in UTC when a user deleted their post.\n{% enddocs %}\n\n{% docs _fivetran_deleted %}\nMarks rows that were deleted in the source table\n{% enddocs %}\n\n{% docs _fivetran_synced %}\n(UTC timestamp) keeps track of when each row was last successfully synced\n{% enddocs %}\n\n{% docs reportback %}\nWhether the post is a reportback \n{% enddocs %}\n\n{% docs active %}\nWhether the user is active \n{% enddocs %}\n\n{% docs anonymous %}\nWhether the user is anonymous when making the post \n{% enddocs %}\n\n{% docs callpower_campaign_id %}\nUnique ID corresponding to the Callpower campaign. Callpower allows users to record messages for their representatives.\n{% enddocs %}\n\n{% docs quiz %}\nWhether the post is a quiz \n{% enddocs %}\n\n{% docs action_type %}\nType of action the user took. (e.g. share-something, donate-something)\n{% enddocs %}\n\n{% docs online %}\nWhether the action is a online as opposed to IRL.\n{% enddocs %}\n\n{% docs time_commitment %}\nEstimated time required to do the action (e.g. 3.0+, <0.5)\n{% enddocs %}\n\n{% docs num_signups %}\nQuantity of campaign signups\n{% enddocs %}\n\n{% docs most_recent_signup %}\nTimestamp of the most recent signup in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs num_rbs %}\nQuantity of reportbacks for the user\n{% enddocs %}\n\n{% docs total_quantity %}\nTotal quantity of items in reportbacks\n{% enddocs %}\n\n{% docs most_recent_rb %}\nWhen the most recent reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs first_rb %}\nWhen the first reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs avg_time_betw_rbs %}\nCalculated average time between reportbacks.\n{% enddocs %}\n\n{% docs avg_days_next_action_after_rb %}\nCalculated average days until next action after reportback\n{% enddocs %}\n\n{% docs days_to_next_action_after_last_rb %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs most_recent_mam_action %}\nMost recent monthly active member qualifying action in UTC (eg. 2018-01-01 12:00:00).\n{% enddocs %}\n\n{% docs most_recent_email_open %}\nMost recent email open in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs most_recent_all_actions %}\nMost recent timestamp of any action in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs last_action_is_rb %}\nWhether the last action the user took was a reportback\n{% enddocs %}\n\n{% docs days_since_last_action %}\nDays since the user's last action\n{% enddocs %}\n\n{% docs time_to_first_rb %}\nHow much time after registering until the user's first reportback\n{% enddocs %}\n\n{% docs sms_unsubscribed_at %}\nTimestamp of when user unsubscribed from SMS messaging\n{% enddocs %}\n\n{% docs user_unsubscribed_at %}\nTimestamp of when user unsubscribed from email or sms\n{% enddocs %}\n\n{% docs voter_reg_acquisition %}\nWhether the user was an acquisition through voter registration efforts. \n{% enddocs %}\n\n{% docs last_logged_in %}\nDate time in UTC when user last logged in to Northstar\n{% enddocs %}\n\n{% docs last_accessed %}\nDate time in UTC when user last access the website\n{% enddocs %}\n\n{% docs last_messaged_at %}\nDate time in UTC when user was last sent a message via SMS or email\n{% enddocs %}\n\n{% docs facebook_id %}\nUser's facebook id\n{% enddocs %}\n\n{% docs mobile %}\nUsers's mobile phone number\n{% enddocs %}\n\n{% docs birthdate %}\nUser's birthdate\n{% enddocs %}\n\n{% docs first_name %}\nUser's first name\n{% enddocs %}\n\n{% docs last_name %}\nUser's last name\n{% enddocs %}\n\n{% docs voter_registration_status %}\nUser's registration status. (e.g. registration_complete, confirmed, uncertain) \n{% enddocs %}\n\n{% docs finish_with_state %}\nIf the registrant was eligible to use and passed through to complete their registration with their state\u2019s OVR system, it will be indicated in this field (direct quote from Rock-The-Vote documentation). Yes/No value in field.\n{% enddocs %}\n\n{% docs reportback_volume %}\nThis field returns 1 if non voter-reg action, since campaigns team only counts those a 1 reportback. If voter-reg action, we want to count quantity of post as number of registered voters.\n{% enddocs %}\n\n{% docs address_street_1 %}\nFirst line of user's street address\n{% enddocs %}\n\n{% docs address_street_2 %}\nSecond line of user's street address\n{% enddocs %}\n\n{% docs city %}\nUser's city\n{% enddocs %}\n\n{% docs state %}\nUser's state\n{% enddocs %}\n\n{% docs country %}\nUser's country\n{% enddocs %}\n\n{% docs language %}\nUser's language\n{% enddocs %}\n\n{% docs cio_status %}\nStatus of user from CIO. (e.g. customer_subscribed, customer_unsubscribed)\n{% enddocs %}\n\n{% docs cio_status_timestamp %}\nTimestamp when users's status was updated.\n{% enddocs %}\n\n{% docs sms_status %}\nCurrent SMS status. (e.g. undeliverable, unknown)\n{% enddocs %}\n\n{% docs source_detail %}\nDetails of the origin of the user. (e.g. tell_a_friend, other, opt_in_path/197981)\n{% enddocs %}\n\n{% docs badges %}\nWhether the user has any badges. \n{% enddocs %}\n\n{% docs refer_friends %}\nWhether the user is a part of the refer a friend campaign. \n{% enddocs %}\n\n{% docs subscribed_member %}\nWhether the user is subscribed. \n{% enddocs %}\n\n{% docs last_updated_at %}\nTimestamp when users's was updated.\n{% enddocs %}\n\n{% docs school_id %}\nUnique identifier for the user's school. This info comes from the school finder.\n{% enddocs %}\n\n{% docs newsletter_topic %}\nNewsletter topic. (e.g. community, lifestyle)\n{% enddocs %}\n\n{% docs user_agent %}\nFull user agent string for a user's browser (e.g. \"Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:24.0) Gecko/20100101 Firefox/24.0\")\n{% enddocs %}\n\n{% docs drupal_id %}\nOld Drupal user ID\n{% enddocs %}\n\n{% docs campaigns %}\nCampaigns a user is signed up for.\n{% enddocs %}\n\n{% docs audit %}\nA very useful field with data containing information about changes to a user, e.g. timestamps when the user subscribed and unsubscribed.\n{% enddocs %}\n\n{% docs voting_plan_status %}\nThe indication of the user's plan to vote, e.g. voting, not_voting, cant_vote\n{% enddocs %}\n\n{% docs voting_plan_time_of_day %}\nThe time of day when the user plans to vote, e.g morning, afternoon, evening\n{% enddocs %}\n\n{% docs voting_plan_method_of_transport %}\nHow the user plans to get to their polling place. e.g. walk, drive\n{% enddocs %}\n\n{% docs voting_plan_attending_with %}\nWith Whom the user plans to go voting, e.g. family, friends, alone\n{% enddocs %}\n\n{% docs feature_flags %}\nJSON containing info on features like badges and refer-a-friend.\n{% enddocs %}\n\n{% docs dbt_updated_at %}\nDBT snapshot table data. The updated_at timestamp of the source record when this snapshot row was inserted.\n{% enddocs %}\n\n{% docs dbt_scd_id %}\nDBT snapshot table data. A unique key generated for each snapshotted record.\n{% enddocs %}\n\n{% docs dbt_valid_from %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this snapshot row was first inserted\n{% enddocs %}\n\n{% docs dbt_valid_to %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this row row became invalidated.\n{% enddocs %}\n\n{% docs google_id %}\nUser's Google ID obtained from login.\n{% enddocs %}\n\n{% docs causes %}\nCauses in which a user is interested. e.g. animal welfare, education, mental_health\n{% enddocs %}\n\n{% docs email_subscription_status %}\nEmail subscription status of the user\n{% enddocs %}\n\n{% docs role %}\nUser's role, e.g. user, staff\n{% enddocs %}\n\n{% docs cio_backfilled %}\nWhether this user's data was backfilled from CIO\n{% enddocs %}\n\n{% docs addr_source %}\nWhere the user submitted their address, e.g. sms, GDPR\n{% enddocs %}\n\n{% docs email_subscription_topics %}\nEmail subscription topics correspond to categories in CIO in which the user is interested. e.g. lifestyle, community, scholarship\n{% enddocs %}\n\n{% docs sms_paused %}\nWhether we've paused sending sms messages to the user.\n{% enddocs %}\n\n\n\n\n", "name": "audit", "unique_id": "ds_dbt.audit", "block_contents": "A very useful field with data containing information about changes to a user, e.g. timestamps when the user subscribed and unsubscribed."}, "ds_dbt.voting_plan_status": {"root_path": "/Users/mrich/projects/quasar/quasar/dbt", "resource_type": "docs", "path": "schema.md", "original_file_path": "models/schema.md", "package_name": "ds_dbt", "file_contents": "\n{% docs click_id %}\nThis is a unique identifier for each click\n{% enddocs %}\n\n{% docs click_time %}\nTimestamp when user clicked.\n{% enddocs %}\n\n{% docs shortened %}\nShortened URL\n{% enddocs %}\n\n{% docs target_url %}\nURL where the user will be directed\n{% enddocs %}\n\n{% docs broadcast_id %}\nID of the broadcast that generated the shortened URL\n{% enddocs %}\n\n{% docs source %}\nSource of the URL (e.g. SMS, web), origin of the post (e.g. phoenix-web, phoenix-ashes, sms), or source where user was acquired. (e.g. sms, phoenix-next)\n{% enddocs %}\n\n{% docs interaction_type %}\nHow the user interacted with the link (e.g. preview, click)\n{% enddocs %}\n\n{% docs id %}\nUnique identifier for the post\n{% enddocs %}\n\n{% docs type %}\nType of post (e.g. photo)\n{% enddocs %}\n\n{% docs action %}\nPost action (e.g. DefendDreamers_Nov9_CongressCalls, GunViolence2018_Feb15_ParklandResponse)\n{% enddocs %}\n\n{% docs status %}\nPost status (e.g. accepted, rejected)\n{% enddocs %}\n\n{% docs quantity %}\nNumerical quantity of items specified in the call to action (e.g. 10, 200)\n{% enddocs %}\n\n{% docs source_bucket %}\nGrouping bucket for origin of the post (e.g. web, sms) \n{% enddocs %}\n\n{% docs created_at %}\nWhen the item was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs updated_at %}\nWhen the item was updated in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs text %}\nText of the post (e.g. \"Zoo animals and a super hero trying to help too!\") \n{% enddocs %}\n\n{% docs signup_id %}\nUnique identifier for the signup \n{% enddocs %}\n\n{% docs post_class %}\nClass of the signup (e.g. \"photo - default\", \"phone-call - DefendDreamers_Jan16_BothBodies\")\n{% enddocs %}\n\n{% docs is_accepted %}\nWhether the post has been accepted to be displayed to the public on the website\n{% enddocs %}\n\n{% docs action_id %}\nInternal identifier of the action \n{% enddocs %}\n\n{% docs location %}\nLocation where the action takes place (e.g. US-NY)\n{% enddocs %}\n\n{% docs postal_code %}\nPostal code where the action takes place\n{% enddocs %}\n\n{% docs is_reportback %}\nWhether the post is a reportback. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs civic_action %}\nWhether the post is a Civic Action. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs scholarship_entry %}\nWhether the post is a Scholarship Entry. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs why_participated %}\nWhy the user participated in this action. Entered by the user.\n{% enddocs %}\n\n{% docs details %}\nDetails about the post. Contains contentfulId and other information (e.g. {\"campaignContentfulId\":\"6ATBgGEQEeJoIcxs1qbwaC\"})\n{% enddocs %}\n\n{% docs email %}\nEmail address of the user.\n{% enddocs %}\n\n{% docs source_details %}\nDetails about the source of the item. This is sometimes represented as a JSON object, and for other tables like Turbovote its represented as a string. (e.g. \"{\"contentful_id\":\"3CTLlXfbwtz1FOMpl31SKV\",\"utm_source\":\"scholarship_listing\",\"utm_medium\":\"referral\",\"utm_campaign\":\"fastweb_2019_08\"}\", newsletter_456)\n{% enddocs %}\n\n{% docs campaign_id %}\nThis is a unique identifier for the campaign\n{% enddocs %}\n\n{% docs campaign_run_id %}\nUnique identifier for the campaign run\n{% enddocs %}\n\n{% docs campaign_name %}\nName of the campaign\n{% enddocs %}\n\n{% docs campaign_cause %}\nCampaign cause (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_run_start_date %}\nStart date of the campaign run\n{% enddocs %}\n\n{% docs campaign_run_end_date %}\nEnd date of the campaign run\n{% enddocs %}\n\n{% docs campaign_created_date %}\nWhen the campaign was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs campaign_node_id %}\nInternal unique node id for the campaign\n{% enddocs %}\n\n{% docs campaign_node_id_title %}\nCampaign title\n{% enddocs %}\n\n{% docs campaign_run_id_title %}\nTitle of the campaign run\n{% enddocs %}\n\n{% docs campaign_action_type %}\nCampaign action type (eg. Make Something, Share Something)\n{% enddocs %}\n\n{% docs campaign_cause_type %}\nCampaign cause type (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_noun %}\nNoun applicable to the user's action\n{% enddocs %}\n\n{% docs campaign_verb %}\nVerb describing the action the user should take\n{% enddocs %}\n\n{% docs campaign_cta %}\nCampaign's call to action\n{% enddocs %}\n\n{% docs campaign_language %}\n\"Language in which the campaign is available\"\n{% enddocs %}\n\n{% docs agent_id %}\nIf set, the content type of the picture the member is sending us. Exp. image/png.\n{% enddocs %}\n\n{% docs attachment_content_type %}\nIf set, the handle of the Front agent this outbound support message is from.\n{% enddocs %}\n\n{% docs topic %}\nHolds a reference to the **last** campaign topic the member's conversation was in. This is useful to allow members to talk to Gambit and get quick responses (through Rivescript), without Gambit completely forgetting what state the member's interaction with a campaign topic was in.\n{% enddocs %}\n\n{% docs action_serial_id %}\nSerial id for the user's action. Depends on the source of the action. May be the bertly click id, sms message id, etc.\n{% enddocs %}\n\n{% docs channel %}\nChannel for the user's action. Depends on the source of the action. (e.g. web, sms)\n{% enddocs %}\n\n{% docs first_action_month %}\nMonth during which the user took their first action. \n{% enddocs %}\n\n{% docs event_id %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs event_source %}\nApplication source for event (eg. Phoenix, Northstar)\n{% enddocs %}\n\n{% docs event_datetime %}\nWhen the event occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs event_name %}\nName of the event (eg. northstar_submitted_register, https://docs.google.com/spreadsheets/d/1lm-fGrIm85nUTxSojqyCt_Ehmm1zEbViFhKpxcJiz1A/edit#gid=406441516)\n{% enddocs %}\n\n{% docs event_type %}\nType of event (pv = 'Page View', se = 'Structured Event')\n{% enddocs %}\n\n{% docs host %}\nURL host where event occurred (eg. www.dosomething.org or identity.dosomething.org)\n{% enddocs %}\n\n{% docs path %}\nURL path event occurred at (eg. /login or /us/campaigns/huddle-for-heroes)\n{% enddocs %}\n\n{% docs query_parameters %}\nOptional query parameters for the request (eg. query=huddle)\n{% enddocs %}\n\n{% docs se_category %}\nCategory of event (eg. focused_field, authentication) - Custom structured event\n{% enddocs %}\n\n{% docs se_action %}\nAction performed / event name (eg. form_submitted, action_failed) - Custom structured event\n{% enddocs %}\n\n{% docs se_label %}\nThe object of the action (eg. first_name, register, voter_reg_status) - Custom structured event\n{% enddocs %}\n\n{% docs session_id %}\nUnique identifier of the user's session\n{% enddocs %}\n\n{% docs session_counter %}\nHow many sessions a user has started\n{% enddocs %}\n\n{% docs browser_size %}\nWhich type of browser a user is using (eg. Mobile, Desktop)\n{% enddocs %}\n\n{% docs northstar_id %}\nThe Northstar ID of the user who generated the event\n{% enddocs %}\n\n{% docs device_id %}\nID of the device used\n{% enddocs %}\n\n{% docs referrer_host %}\nURL host of the referring site (eg. google.com)\n{% enddocs %}\n\n{% docs referrer_path %}\nURL path from referring site (eg. /10-stats-on-teen-drug-and-alcohol-use/)\n{% enddocs %}\n\n{% docs referrer_source %}\nReferrer source name (eg. Google, Facebook)\n{% enddocs %}\n\n{% docs utm_source %}\nTracks where the traffic is coming from. (eg. scholarship_listing, Facebook)\n{% enddocs %}\n\n{% docs utm_medium %}\nHow the traffic got to the platform (eg. referral, CPC)\n{% enddocs %}\n\n{% docs utm_campaign %}\nTracks which campaign the traffic was generated by. Shows up in Google Analytics as Campaign Name (eg. editorial_newsletter)\n{% enddocs %}\n\n{% docs url %}\nURL of campaign (eg. https://dosome.click/nyn5m7)\n{% enddocs %}\n\n{% docs modal_type %}\nNULL or SURVEY_MODAL\n{% enddocs %}\n\n{% docs landing_datetime %}\nWhen the session started in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs ending_datetime %}\nWhen the session ended in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs session_duration_seconds %}\nSession duration in seconds\n{% enddocs %}\n\n{% docs num_pages_views %}\nNumber of pages viewed in session\n{% enddocs %}\n\n{% docs landing_page %}\nFirst page the user viewed in the session (eg. /us/facts/11-facts-about-bp-oil-spill)\n{% enddocs %}\n\n{% docs exit_page %}\n\"Which page the user ended or exited their session from (eg. /us/campaigns/green-your-getaway)\"\n{% enddocs %}\n\n{% docs days_since_last_session %}\n\"Days since their last session.\"\n{% enddocs %}\n\n{% docs post_type %}\nType of post, (e.g. photo, voter-reg)\n{% enddocs %}\n\n{% docs noun %}\nNoun that corresponds to the item in the call to action that was delivered. (e.g. drawings, tweets)\n{% enddocs %}\n\n{% docs verb %}\nVerb corresponding to the action the user took. (e.g. shared, sent, taken)\n{% enddocs %}\n\n{% docs deleted_at %}\nDate time in UTC when a user deleted their post.\n{% enddocs %}\n\n{% docs _fivetran_deleted %}\nMarks rows that were deleted in the source table\n{% enddocs %}\n\n{% docs _fivetran_synced %}\n(UTC timestamp) keeps track of when each row was last successfully synced\n{% enddocs %}\n\n{% docs reportback %}\nWhether the post is a reportback \n{% enddocs %}\n\n{% docs active %}\nWhether the user is active \n{% enddocs %}\n\n{% docs anonymous %}\nWhether the user is anonymous when making the post \n{% enddocs %}\n\n{% docs callpower_campaign_id %}\nUnique ID corresponding to the Callpower campaign. Callpower allows users to record messages for their representatives.\n{% enddocs %}\n\n{% docs quiz %}\nWhether the post is a quiz \n{% enddocs %}\n\n{% docs action_type %}\nType of action the user took. (e.g. share-something, donate-something)\n{% enddocs %}\n\n{% docs online %}\nWhether the action is a online as opposed to IRL.\n{% enddocs %}\n\n{% docs time_commitment %}\nEstimated time required to do the action (e.g. 3.0+, <0.5)\n{% enddocs %}\n\n{% docs num_signups %}\nQuantity of campaign signups\n{% enddocs %}\n\n{% docs most_recent_signup %}\nTimestamp of the most recent signup in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs num_rbs %}\nQuantity of reportbacks for the user\n{% enddocs %}\n\n{% docs total_quantity %}\nTotal quantity of items in reportbacks\n{% enddocs %}\n\n{% docs most_recent_rb %}\nWhen the most recent reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs first_rb %}\nWhen the first reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs avg_time_betw_rbs %}\nCalculated average time between reportbacks.\n{% enddocs %}\n\n{% docs avg_days_next_action_after_rb %}\nCalculated average days until next action after reportback\n{% enddocs %}\n\n{% docs days_to_next_action_after_last_rb %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs most_recent_mam_action %}\nMost recent monthly active member qualifying action in UTC (eg. 2018-01-01 12:00:00).\n{% enddocs %}\n\n{% docs most_recent_email_open %}\nMost recent email open in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs most_recent_all_actions %}\nMost recent timestamp of any action in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs last_action_is_rb %}\nWhether the last action the user took was a reportback\n{% enddocs %}\n\n{% docs days_since_last_action %}\nDays since the user's last action\n{% enddocs %}\n\n{% docs time_to_first_rb %}\nHow much time after registering until the user's first reportback\n{% enddocs %}\n\n{% docs sms_unsubscribed_at %}\nTimestamp of when user unsubscribed from SMS messaging\n{% enddocs %}\n\n{% docs user_unsubscribed_at %}\nTimestamp of when user unsubscribed from email or sms\n{% enddocs %}\n\n{% docs voter_reg_acquisition %}\nWhether the user was an acquisition through voter registration efforts. \n{% enddocs %}\n\n{% docs last_logged_in %}\nDate time in UTC when user last logged in to Northstar\n{% enddocs %}\n\n{% docs last_accessed %}\nDate time in UTC when user last access the website\n{% enddocs %}\n\n{% docs last_messaged_at %}\nDate time in UTC when user was last sent a message via SMS or email\n{% enddocs %}\n\n{% docs facebook_id %}\nUser's facebook id\n{% enddocs %}\n\n{% docs mobile %}\nUsers's mobile phone number\n{% enddocs %}\n\n{% docs birthdate %}\nUser's birthdate\n{% enddocs %}\n\n{% docs first_name %}\nUser's first name\n{% enddocs %}\n\n{% docs last_name %}\nUser's last name\n{% enddocs %}\n\n{% docs voter_registration_status %}\nUser's registration status. (e.g. registration_complete, confirmed, uncertain) \n{% enddocs %}\n\n{% docs finish_with_state %}\nIf the registrant was eligible to use and passed through to complete their registration with their state\u2019s OVR system, it will be indicated in this field (direct quote from Rock-The-Vote documentation). Yes/No value in field.\n{% enddocs %}\n\n{% docs reportback_volume %}\nThis field returns 1 if non voter-reg action, since campaigns team only counts those a 1 reportback. If voter-reg action, we want to count quantity of post as number of registered voters.\n{% enddocs %}\n\n{% docs address_street_1 %}\nFirst line of user's street address\n{% enddocs %}\n\n{% docs address_street_2 %}\nSecond line of user's street address\n{% enddocs %}\n\n{% docs city %}\nUser's city\n{% enddocs %}\n\n{% docs state %}\nUser's state\n{% enddocs %}\n\n{% docs country %}\nUser's country\n{% enddocs %}\n\n{% docs language %}\nUser's language\n{% enddocs %}\n\n{% docs cio_status %}\nStatus of user from CIO. (e.g. customer_subscribed, customer_unsubscribed)\n{% enddocs %}\n\n{% docs cio_status_timestamp %}\nTimestamp when users's status was updated.\n{% enddocs %}\n\n{% docs sms_status %}\nCurrent SMS status. (e.g. undeliverable, unknown)\n{% enddocs %}\n\n{% docs source_detail %}\nDetails of the origin of the user. (e.g. tell_a_friend, other, opt_in_path/197981)\n{% enddocs %}\n\n{% docs badges %}\nWhether the user has any badges. \n{% enddocs %}\n\n{% docs refer_friends %}\nWhether the user is a part of the refer a friend campaign. \n{% enddocs %}\n\n{% docs subscribed_member %}\nWhether the user is subscribed. \n{% enddocs %}\n\n{% docs last_updated_at %}\nTimestamp when users's was updated.\n{% enddocs %}\n\n{% docs school_id %}\nUnique identifier for the user's school. This info comes from the school finder.\n{% enddocs %}\n\n{% docs newsletter_topic %}\nNewsletter topic. (e.g. community, lifestyle)\n{% enddocs %}\n\n{% docs user_agent %}\nFull user agent string for a user's browser (e.g. \"Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:24.0) Gecko/20100101 Firefox/24.0\")\n{% enddocs %}\n\n{% docs drupal_id %}\nOld Drupal user ID\n{% enddocs %}\n\n{% docs campaigns %}\nCampaigns a user is signed up for.\n{% enddocs %}\n\n{% docs audit %}\nA very useful field with data containing information about changes to a user, e.g. timestamps when the user subscribed and unsubscribed.\n{% enddocs %}\n\n{% docs voting_plan_status %}\nThe indication of the user's plan to vote, e.g. voting, not_voting, cant_vote\n{% enddocs %}\n\n{% docs voting_plan_time_of_day %}\nThe time of day when the user plans to vote, e.g morning, afternoon, evening\n{% enddocs %}\n\n{% docs voting_plan_method_of_transport %}\nHow the user plans to get to their polling place. e.g. walk, drive\n{% enddocs %}\n\n{% docs voting_plan_attending_with %}\nWith Whom the user plans to go voting, e.g. family, friends, alone\n{% enddocs %}\n\n{% docs feature_flags %}\nJSON containing info on features like badges and refer-a-friend.\n{% enddocs %}\n\n{% docs dbt_updated_at %}\nDBT snapshot table data. The updated_at timestamp of the source record when this snapshot row was inserted.\n{% enddocs %}\n\n{% docs dbt_scd_id %}\nDBT snapshot table data. A unique key generated for each snapshotted record.\n{% enddocs %}\n\n{% docs dbt_valid_from %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this snapshot row was first inserted\n{% enddocs %}\n\n{% docs dbt_valid_to %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this row row became invalidated.\n{% enddocs %}\n\n{% docs google_id %}\nUser's Google ID obtained from login.\n{% enddocs %}\n\n{% docs causes %}\nCauses in which a user is interested. e.g. animal welfare, education, mental_health\n{% enddocs %}\n\n{% docs email_subscription_status %}\nEmail subscription status of the user\n{% enddocs %}\n\n{% docs role %}\nUser's role, e.g. user, staff\n{% enddocs %}\n\n{% docs cio_backfilled %}\nWhether this user's data was backfilled from CIO\n{% enddocs %}\n\n{% docs addr_source %}\nWhere the user submitted their address, e.g. sms, GDPR\n{% enddocs %}\n\n{% docs email_subscription_topics %}\nEmail subscription topics correspond to categories in CIO in which the user is interested. e.g. lifestyle, community, scholarship\n{% enddocs %}\n\n{% docs sms_paused %}\nWhether we've paused sending sms messages to the user.\n{% enddocs %}\n\n\n\n\n", "name": "voting_plan_status", "unique_id": "ds_dbt.voting_plan_status", "block_contents": "The indication of the user's plan to vote, e.g. voting, not_voting, cant_vote"}, "ds_dbt.voting_plan_time_of_day": {"root_path": "/Users/mrich/projects/quasar/quasar/dbt", "resource_type": "docs", "path": "schema.md", "original_file_path": "models/schema.md", "package_name": "ds_dbt", "file_contents": "\n{% docs click_id %}\nThis is a unique identifier for each click\n{% enddocs %}\n\n{% docs click_time %}\nTimestamp when user clicked.\n{% enddocs %}\n\n{% docs shortened %}\nShortened URL\n{% enddocs %}\n\n{% docs target_url %}\nURL where the user will be directed\n{% enddocs %}\n\n{% docs broadcast_id %}\nID of the broadcast that generated the shortened URL\n{% enddocs %}\n\n{% docs source %}\nSource of the URL (e.g. SMS, web), origin of the post (e.g. phoenix-web, phoenix-ashes, sms), or source where user was acquired. (e.g. sms, phoenix-next)\n{% enddocs %}\n\n{% docs interaction_type %}\nHow the user interacted with the link (e.g. preview, click)\n{% enddocs %}\n\n{% docs id %}\nUnique identifier for the post\n{% enddocs %}\n\n{% docs type %}\nType of post (e.g. photo)\n{% enddocs %}\n\n{% docs action %}\nPost action (e.g. DefendDreamers_Nov9_CongressCalls, GunViolence2018_Feb15_ParklandResponse)\n{% enddocs %}\n\n{% docs status %}\nPost status (e.g. accepted, rejected)\n{% enddocs %}\n\n{% docs quantity %}\nNumerical quantity of items specified in the call to action (e.g. 10, 200)\n{% enddocs %}\n\n{% docs source_bucket %}\nGrouping bucket for origin of the post (e.g. web, sms) \n{% enddocs %}\n\n{% docs created_at %}\nWhen the item was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs updated_at %}\nWhen the item was updated in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs text %}\nText of the post (e.g. \"Zoo animals and a super hero trying to help too!\") \n{% enddocs %}\n\n{% docs signup_id %}\nUnique identifier for the signup \n{% enddocs %}\n\n{% docs post_class %}\nClass of the signup (e.g. \"photo - default\", \"phone-call - DefendDreamers_Jan16_BothBodies\")\n{% enddocs %}\n\n{% docs is_accepted %}\nWhether the post has been accepted to be displayed to the public on the website\n{% enddocs %}\n\n{% docs action_id %}\nInternal identifier of the action \n{% enddocs %}\n\n{% docs location %}\nLocation where the action takes place (e.g. US-NY)\n{% enddocs %}\n\n{% docs postal_code %}\nPostal code where the action takes place\n{% enddocs %}\n\n{% docs is_reportback %}\nWhether the post is a reportback. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs civic_action %}\nWhether the post is a Civic Action. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs scholarship_entry %}\nWhether the post is a Scholarship Entry. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs why_participated %}\nWhy the user participated in this action. Entered by the user.\n{% enddocs %}\n\n{% docs details %}\nDetails about the post. Contains contentfulId and other information (e.g. {\"campaignContentfulId\":\"6ATBgGEQEeJoIcxs1qbwaC\"})\n{% enddocs %}\n\n{% docs email %}\nEmail address of the user.\n{% enddocs %}\n\n{% docs source_details %}\nDetails about the source of the item. This is sometimes represented as a JSON object, and for other tables like Turbovote its represented as a string. (e.g. \"{\"contentful_id\":\"3CTLlXfbwtz1FOMpl31SKV\",\"utm_source\":\"scholarship_listing\",\"utm_medium\":\"referral\",\"utm_campaign\":\"fastweb_2019_08\"}\", newsletter_456)\n{% enddocs %}\n\n{% docs campaign_id %}\nThis is a unique identifier for the campaign\n{% enddocs %}\n\n{% docs campaign_run_id %}\nUnique identifier for the campaign run\n{% enddocs %}\n\n{% docs campaign_name %}\nName of the campaign\n{% enddocs %}\n\n{% docs campaign_cause %}\nCampaign cause (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_run_start_date %}\nStart date of the campaign run\n{% enddocs %}\n\n{% docs campaign_run_end_date %}\nEnd date of the campaign run\n{% enddocs %}\n\n{% docs campaign_created_date %}\nWhen the campaign was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs campaign_node_id %}\nInternal unique node id for the campaign\n{% enddocs %}\n\n{% docs campaign_node_id_title %}\nCampaign title\n{% enddocs %}\n\n{% docs campaign_run_id_title %}\nTitle of the campaign run\n{% enddocs %}\n\n{% docs campaign_action_type %}\nCampaign action type (eg. Make Something, Share Something)\n{% enddocs %}\n\n{% docs campaign_cause_type %}\nCampaign cause type (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_noun %}\nNoun applicable to the user's action\n{% enddocs %}\n\n{% docs campaign_verb %}\nVerb describing the action the user should take\n{% enddocs %}\n\n{% docs campaign_cta %}\nCampaign's call to action\n{% enddocs %}\n\n{% docs campaign_language %}\n\"Language in which the campaign is available\"\n{% enddocs %}\n\n{% docs agent_id %}\nIf set, the content type of the picture the member is sending us. Exp. image/png.\n{% enddocs %}\n\n{% docs attachment_content_type %}\nIf set, the handle of the Front agent this outbound support message is from.\n{% enddocs %}\n\n{% docs topic %}\nHolds a reference to the **last** campaign topic the member's conversation was in. This is useful to allow members to talk to Gambit and get quick responses (through Rivescript), without Gambit completely forgetting what state the member's interaction with a campaign topic was in.\n{% enddocs %}\n\n{% docs action_serial_id %}\nSerial id for the user's action. Depends on the source of the action. May be the bertly click id, sms message id, etc.\n{% enddocs %}\n\n{% docs channel %}\nChannel for the user's action. Depends on the source of the action. (e.g. web, sms)\n{% enddocs %}\n\n{% docs first_action_month %}\nMonth during which the user took their first action. \n{% enddocs %}\n\n{% docs event_id %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs event_source %}\nApplication source for event (eg. Phoenix, Northstar)\n{% enddocs %}\n\n{% docs event_datetime %}\nWhen the event occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs event_name %}\nName of the event (eg. northstar_submitted_register, https://docs.google.com/spreadsheets/d/1lm-fGrIm85nUTxSojqyCt_Ehmm1zEbViFhKpxcJiz1A/edit#gid=406441516)\n{% enddocs %}\n\n{% docs event_type %}\nType of event (pv = 'Page View', se = 'Structured Event')\n{% enddocs %}\n\n{% docs host %}\nURL host where event occurred (eg. www.dosomething.org or identity.dosomething.org)\n{% enddocs %}\n\n{% docs path %}\nURL path event occurred at (eg. /login or /us/campaigns/huddle-for-heroes)\n{% enddocs %}\n\n{% docs query_parameters %}\nOptional query parameters for the request (eg. query=huddle)\n{% enddocs %}\n\n{% docs se_category %}\nCategory of event (eg. focused_field, authentication) - Custom structured event\n{% enddocs %}\n\n{% docs se_action %}\nAction performed / event name (eg. form_submitted, action_failed) - Custom structured event\n{% enddocs %}\n\n{% docs se_label %}\nThe object of the action (eg. first_name, register, voter_reg_status) - Custom structured event\n{% enddocs %}\n\n{% docs session_id %}\nUnique identifier of the user's session\n{% enddocs %}\n\n{% docs session_counter %}\nHow many sessions a user has started\n{% enddocs %}\n\n{% docs browser_size %}\nWhich type of browser a user is using (eg. Mobile, Desktop)\n{% enddocs %}\n\n{% docs northstar_id %}\nThe Northstar ID of the user who generated the event\n{% enddocs %}\n\n{% docs device_id %}\nID of the device used\n{% enddocs %}\n\n{% docs referrer_host %}\nURL host of the referring site (eg. google.com)\n{% enddocs %}\n\n{% docs referrer_path %}\nURL path from referring site (eg. /10-stats-on-teen-drug-and-alcohol-use/)\n{% enddocs %}\n\n{% docs referrer_source %}\nReferrer source name (eg. Google, Facebook)\n{% enddocs %}\n\n{% docs utm_source %}\nTracks where the traffic is coming from. (eg. scholarship_listing, Facebook)\n{% enddocs %}\n\n{% docs utm_medium %}\nHow the traffic got to the platform (eg. referral, CPC)\n{% enddocs %}\n\n{% docs utm_campaign %}\nTracks which campaign the traffic was generated by. Shows up in Google Analytics as Campaign Name (eg. editorial_newsletter)\n{% enddocs %}\n\n{% docs url %}\nURL of campaign (eg. https://dosome.click/nyn5m7)\n{% enddocs %}\n\n{% docs modal_type %}\nNULL or SURVEY_MODAL\n{% enddocs %}\n\n{% docs landing_datetime %}\nWhen the session started in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs ending_datetime %}\nWhen the session ended in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs session_duration_seconds %}\nSession duration in seconds\n{% enddocs %}\n\n{% docs num_pages_views %}\nNumber of pages viewed in session\n{% enddocs %}\n\n{% docs landing_page %}\nFirst page the user viewed in the session (eg. /us/facts/11-facts-about-bp-oil-spill)\n{% enddocs %}\n\n{% docs exit_page %}\n\"Which page the user ended or exited their session from (eg. /us/campaigns/green-your-getaway)\"\n{% enddocs %}\n\n{% docs days_since_last_session %}\n\"Days since their last session.\"\n{% enddocs %}\n\n{% docs post_type %}\nType of post, (e.g. photo, voter-reg)\n{% enddocs %}\n\n{% docs noun %}\nNoun that corresponds to the item in the call to action that was delivered. (e.g. drawings, tweets)\n{% enddocs %}\n\n{% docs verb %}\nVerb corresponding to the action the user took. (e.g. shared, sent, taken)\n{% enddocs %}\n\n{% docs deleted_at %}\nDate time in UTC when a user deleted their post.\n{% enddocs %}\n\n{% docs _fivetran_deleted %}\nMarks rows that were deleted in the source table\n{% enddocs %}\n\n{% docs _fivetran_synced %}\n(UTC timestamp) keeps track of when each row was last successfully synced\n{% enddocs %}\n\n{% docs reportback %}\nWhether the post is a reportback \n{% enddocs %}\n\n{% docs active %}\nWhether the user is active \n{% enddocs %}\n\n{% docs anonymous %}\nWhether the user is anonymous when making the post \n{% enddocs %}\n\n{% docs callpower_campaign_id %}\nUnique ID corresponding to the Callpower campaign. Callpower allows users to record messages for their representatives.\n{% enddocs %}\n\n{% docs quiz %}\nWhether the post is a quiz \n{% enddocs %}\n\n{% docs action_type %}\nType of action the user took. (e.g. share-something, donate-something)\n{% enddocs %}\n\n{% docs online %}\nWhether the action is a online as opposed to IRL.\n{% enddocs %}\n\n{% docs time_commitment %}\nEstimated time required to do the action (e.g. 3.0+, <0.5)\n{% enddocs %}\n\n{% docs num_signups %}\nQuantity of campaign signups\n{% enddocs %}\n\n{% docs most_recent_signup %}\nTimestamp of the most recent signup in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs num_rbs %}\nQuantity of reportbacks for the user\n{% enddocs %}\n\n{% docs total_quantity %}\nTotal quantity of items in reportbacks\n{% enddocs %}\n\n{% docs most_recent_rb %}\nWhen the most recent reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs first_rb %}\nWhen the first reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs avg_time_betw_rbs %}\nCalculated average time between reportbacks.\n{% enddocs %}\n\n{% docs avg_days_next_action_after_rb %}\nCalculated average days until next action after reportback\n{% enddocs %}\n\n{% docs days_to_next_action_after_last_rb %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs most_recent_mam_action %}\nMost recent monthly active member qualifying action in UTC (eg. 2018-01-01 12:00:00).\n{% enddocs %}\n\n{% docs most_recent_email_open %}\nMost recent email open in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs most_recent_all_actions %}\nMost recent timestamp of any action in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs last_action_is_rb %}\nWhether the last action the user took was a reportback\n{% enddocs %}\n\n{% docs days_since_last_action %}\nDays since the user's last action\n{% enddocs %}\n\n{% docs time_to_first_rb %}\nHow much time after registering until the user's first reportback\n{% enddocs %}\n\n{% docs sms_unsubscribed_at %}\nTimestamp of when user unsubscribed from SMS messaging\n{% enddocs %}\n\n{% docs user_unsubscribed_at %}\nTimestamp of when user unsubscribed from email or sms\n{% enddocs %}\n\n{% docs voter_reg_acquisition %}\nWhether the user was an acquisition through voter registration efforts. \n{% enddocs %}\n\n{% docs last_logged_in %}\nDate time in UTC when user last logged in to Northstar\n{% enddocs %}\n\n{% docs last_accessed %}\nDate time in UTC when user last access the website\n{% enddocs %}\n\n{% docs last_messaged_at %}\nDate time in UTC when user was last sent a message via SMS or email\n{% enddocs %}\n\n{% docs facebook_id %}\nUser's facebook id\n{% enddocs %}\n\n{% docs mobile %}\nUsers's mobile phone number\n{% enddocs %}\n\n{% docs birthdate %}\nUser's birthdate\n{% enddocs %}\n\n{% docs first_name %}\nUser's first name\n{% enddocs %}\n\n{% docs last_name %}\nUser's last name\n{% enddocs %}\n\n{% docs voter_registration_status %}\nUser's registration status. (e.g. registration_complete, confirmed, uncertain) \n{% enddocs %}\n\n{% docs finish_with_state %}\nIf the registrant was eligible to use and passed through to complete their registration with their state\u2019s OVR system, it will be indicated in this field (direct quote from Rock-The-Vote documentation). Yes/No value in field.\n{% enddocs %}\n\n{% docs reportback_volume %}\nThis field returns 1 if non voter-reg action, since campaigns team only counts those a 1 reportback. If voter-reg action, we want to count quantity of post as number of registered voters.\n{% enddocs %}\n\n{% docs address_street_1 %}\nFirst line of user's street address\n{% enddocs %}\n\n{% docs address_street_2 %}\nSecond line of user's street address\n{% enddocs %}\n\n{% docs city %}\nUser's city\n{% enddocs %}\n\n{% docs state %}\nUser's state\n{% enddocs %}\n\n{% docs country %}\nUser's country\n{% enddocs %}\n\n{% docs language %}\nUser's language\n{% enddocs %}\n\n{% docs cio_status %}\nStatus of user from CIO. (e.g. customer_subscribed, customer_unsubscribed)\n{% enddocs %}\n\n{% docs cio_status_timestamp %}\nTimestamp when users's status was updated.\n{% enddocs %}\n\n{% docs sms_status %}\nCurrent SMS status. (e.g. undeliverable, unknown)\n{% enddocs %}\n\n{% docs source_detail %}\nDetails of the origin of the user. (e.g. tell_a_friend, other, opt_in_path/197981)\n{% enddocs %}\n\n{% docs badges %}\nWhether the user has any badges. \n{% enddocs %}\n\n{% docs refer_friends %}\nWhether the user is a part of the refer a friend campaign. \n{% enddocs %}\n\n{% docs subscribed_member %}\nWhether the user is subscribed. \n{% enddocs %}\n\n{% docs last_updated_at %}\nTimestamp when users's was updated.\n{% enddocs %}\n\n{% docs school_id %}\nUnique identifier for the user's school. This info comes from the school finder.\n{% enddocs %}\n\n{% docs newsletter_topic %}\nNewsletter topic. (e.g. community, lifestyle)\n{% enddocs %}\n\n{% docs user_agent %}\nFull user agent string for a user's browser (e.g. \"Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:24.0) Gecko/20100101 Firefox/24.0\")\n{% enddocs %}\n\n{% docs drupal_id %}\nOld Drupal user ID\n{% enddocs %}\n\n{% docs campaigns %}\nCampaigns a user is signed up for.\n{% enddocs %}\n\n{% docs audit %}\nA very useful field with data containing information about changes to a user, e.g. timestamps when the user subscribed and unsubscribed.\n{% enddocs %}\n\n{% docs voting_plan_status %}\nThe indication of the user's plan to vote, e.g. voting, not_voting, cant_vote\n{% enddocs %}\n\n{% docs voting_plan_time_of_day %}\nThe time of day when the user plans to vote, e.g morning, afternoon, evening\n{% enddocs %}\n\n{% docs voting_plan_method_of_transport %}\nHow the user plans to get to their polling place. e.g. walk, drive\n{% enddocs %}\n\n{% docs voting_plan_attending_with %}\nWith Whom the user plans to go voting, e.g. family, friends, alone\n{% enddocs %}\n\n{% docs feature_flags %}\nJSON containing info on features like badges and refer-a-friend.\n{% enddocs %}\n\n{% docs dbt_updated_at %}\nDBT snapshot table data. The updated_at timestamp of the source record when this snapshot row was inserted.\n{% enddocs %}\n\n{% docs dbt_scd_id %}\nDBT snapshot table data. A unique key generated for each snapshotted record.\n{% enddocs %}\n\n{% docs dbt_valid_from %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this snapshot row was first inserted\n{% enddocs %}\n\n{% docs dbt_valid_to %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this row row became invalidated.\n{% enddocs %}\n\n{% docs google_id %}\nUser's Google ID obtained from login.\n{% enddocs %}\n\n{% docs causes %}\nCauses in which a user is interested. e.g. animal welfare, education, mental_health\n{% enddocs %}\n\n{% docs email_subscription_status %}\nEmail subscription status of the user\n{% enddocs %}\n\n{% docs role %}\nUser's role, e.g. user, staff\n{% enddocs %}\n\n{% docs cio_backfilled %}\nWhether this user's data was backfilled from CIO\n{% enddocs %}\n\n{% docs addr_source %}\nWhere the user submitted their address, e.g. sms, GDPR\n{% enddocs %}\n\n{% docs email_subscription_topics %}\nEmail subscription topics correspond to categories in CIO in which the user is interested. e.g. lifestyle, community, scholarship\n{% enddocs %}\n\n{% docs sms_paused %}\nWhether we've paused sending sms messages to the user.\n{% enddocs %}\n\n\n\n\n", "name": "voting_plan_time_of_day", "unique_id": "ds_dbt.voting_plan_time_of_day", "block_contents": "The time of day when the user plans to vote, e.g morning, afternoon, evening"}, "ds_dbt.voting_plan_method_of_transport": {"root_path": "/Users/mrich/projects/quasar/quasar/dbt", "resource_type": "docs", "path": "schema.md", "original_file_path": "models/schema.md", "package_name": "ds_dbt", "file_contents": "\n{% docs click_id %}\nThis is a unique identifier for each click\n{% enddocs %}\n\n{% docs click_time %}\nTimestamp when user clicked.\n{% enddocs %}\n\n{% docs shortened %}\nShortened URL\n{% enddocs %}\n\n{% docs target_url %}\nURL where the user will be directed\n{% enddocs %}\n\n{% docs broadcast_id %}\nID of the broadcast that generated the shortened URL\n{% enddocs %}\n\n{% docs source %}\nSource of the URL (e.g. SMS, web), origin of the post (e.g. phoenix-web, phoenix-ashes, sms), or source where user was acquired. (e.g. sms, phoenix-next)\n{% enddocs %}\n\n{% docs interaction_type %}\nHow the user interacted with the link (e.g. preview, click)\n{% enddocs %}\n\n{% docs id %}\nUnique identifier for the post\n{% enddocs %}\n\n{% docs type %}\nType of post (e.g. photo)\n{% enddocs %}\n\n{% docs action %}\nPost action (e.g. DefendDreamers_Nov9_CongressCalls, GunViolence2018_Feb15_ParklandResponse)\n{% enddocs %}\n\n{% docs status %}\nPost status (e.g. accepted, rejected)\n{% enddocs %}\n\n{% docs quantity %}\nNumerical quantity of items specified in the call to action (e.g. 10, 200)\n{% enddocs %}\n\n{% docs source_bucket %}\nGrouping bucket for origin of the post (e.g. web, sms) \n{% enddocs %}\n\n{% docs created_at %}\nWhen the item was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs updated_at %}\nWhen the item was updated in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs text %}\nText of the post (e.g. \"Zoo animals and a super hero trying to help too!\") \n{% enddocs %}\n\n{% docs signup_id %}\nUnique identifier for the signup \n{% enddocs %}\n\n{% docs post_class %}\nClass of the signup (e.g. \"photo - default\", \"phone-call - DefendDreamers_Jan16_BothBodies\")\n{% enddocs %}\n\n{% docs is_accepted %}\nWhether the post has been accepted to be displayed to the public on the website\n{% enddocs %}\n\n{% docs action_id %}\nInternal identifier of the action \n{% enddocs %}\n\n{% docs location %}\nLocation where the action takes place (e.g. US-NY)\n{% enddocs %}\n\n{% docs postal_code %}\nPostal code where the action takes place\n{% enddocs %}\n\n{% docs is_reportback %}\nWhether the post is a reportback. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs civic_action %}\nWhether the post is a Civic Action. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs scholarship_entry %}\nWhether the post is a Scholarship Entry. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs why_participated %}\nWhy the user participated in this action. Entered by the user.\n{% enddocs %}\n\n{% docs details %}\nDetails about the post. Contains contentfulId and other information (e.g. {\"campaignContentfulId\":\"6ATBgGEQEeJoIcxs1qbwaC\"})\n{% enddocs %}\n\n{% docs email %}\nEmail address of the user.\n{% enddocs %}\n\n{% docs source_details %}\nDetails about the source of the item. This is sometimes represented as a JSON object, and for other tables like Turbovote its represented as a string. (e.g. \"{\"contentful_id\":\"3CTLlXfbwtz1FOMpl31SKV\",\"utm_source\":\"scholarship_listing\",\"utm_medium\":\"referral\",\"utm_campaign\":\"fastweb_2019_08\"}\", newsletter_456)\n{% enddocs %}\n\n{% docs campaign_id %}\nThis is a unique identifier for the campaign\n{% enddocs %}\n\n{% docs campaign_run_id %}\nUnique identifier for the campaign run\n{% enddocs %}\n\n{% docs campaign_name %}\nName of the campaign\n{% enddocs %}\n\n{% docs campaign_cause %}\nCampaign cause (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_run_start_date %}\nStart date of the campaign run\n{% enddocs %}\n\n{% docs campaign_run_end_date %}\nEnd date of the campaign run\n{% enddocs %}\n\n{% docs campaign_created_date %}\nWhen the campaign was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs campaign_node_id %}\nInternal unique node id for the campaign\n{% enddocs %}\n\n{% docs campaign_node_id_title %}\nCampaign title\n{% enddocs %}\n\n{% docs campaign_run_id_title %}\nTitle of the campaign run\n{% enddocs %}\n\n{% docs campaign_action_type %}\nCampaign action type (eg. Make Something, Share Something)\n{% enddocs %}\n\n{% docs campaign_cause_type %}\nCampaign cause type (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_noun %}\nNoun applicable to the user's action\n{% enddocs %}\n\n{% docs campaign_verb %}\nVerb describing the action the user should take\n{% enddocs %}\n\n{% docs campaign_cta %}\nCampaign's call to action\n{% enddocs %}\n\n{% docs campaign_language %}\n\"Language in which the campaign is available\"\n{% enddocs %}\n\n{% docs agent_id %}\nIf set, the content type of the picture the member is sending us. Exp. image/png.\n{% enddocs %}\n\n{% docs attachment_content_type %}\nIf set, the handle of the Front agent this outbound support message is from.\n{% enddocs %}\n\n{% docs topic %}\nHolds a reference to the **last** campaign topic the member's conversation was in. This is useful to allow members to talk to Gambit and get quick responses (through Rivescript), without Gambit completely forgetting what state the member's interaction with a campaign topic was in.\n{% enddocs %}\n\n{% docs action_serial_id %}\nSerial id for the user's action. Depends on the source of the action. May be the bertly click id, sms message id, etc.\n{% enddocs %}\n\n{% docs channel %}\nChannel for the user's action. Depends on the source of the action. (e.g. web, sms)\n{% enddocs %}\n\n{% docs first_action_month %}\nMonth during which the user took their first action. \n{% enddocs %}\n\n{% docs event_id %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs event_source %}\nApplication source for event (eg. Phoenix, Northstar)\n{% enddocs %}\n\n{% docs event_datetime %}\nWhen the event occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs event_name %}\nName of the event (eg. northstar_submitted_register, https://docs.google.com/spreadsheets/d/1lm-fGrIm85nUTxSojqyCt_Ehmm1zEbViFhKpxcJiz1A/edit#gid=406441516)\n{% enddocs %}\n\n{% docs event_type %}\nType of event (pv = 'Page View', se = 'Structured Event')\n{% enddocs %}\n\n{% docs host %}\nURL host where event occurred (eg. www.dosomething.org or identity.dosomething.org)\n{% enddocs %}\n\n{% docs path %}\nURL path event occurred at (eg. /login or /us/campaigns/huddle-for-heroes)\n{% enddocs %}\n\n{% docs query_parameters %}\nOptional query parameters for the request (eg. query=huddle)\n{% enddocs %}\n\n{% docs se_category %}\nCategory of event (eg. focused_field, authentication) - Custom structured event\n{% enddocs %}\n\n{% docs se_action %}\nAction performed / event name (eg. form_submitted, action_failed) - Custom structured event\n{% enddocs %}\n\n{% docs se_label %}\nThe object of the action (eg. first_name, register, voter_reg_status) - Custom structured event\n{% enddocs %}\n\n{% docs session_id %}\nUnique identifier of the user's session\n{% enddocs %}\n\n{% docs session_counter %}\nHow many sessions a user has started\n{% enddocs %}\n\n{% docs browser_size %}\nWhich type of browser a user is using (eg. Mobile, Desktop)\n{% enddocs %}\n\n{% docs northstar_id %}\nThe Northstar ID of the user who generated the event\n{% enddocs %}\n\n{% docs device_id %}\nID of the device used\n{% enddocs %}\n\n{% docs referrer_host %}\nURL host of the referring site (eg. google.com)\n{% enddocs %}\n\n{% docs referrer_path %}\nURL path from referring site (eg. /10-stats-on-teen-drug-and-alcohol-use/)\n{% enddocs %}\n\n{% docs referrer_source %}\nReferrer source name (eg. Google, Facebook)\n{% enddocs %}\n\n{% docs utm_source %}\nTracks where the traffic is coming from. (eg. scholarship_listing, Facebook)\n{% enddocs %}\n\n{% docs utm_medium %}\nHow the traffic got to the platform (eg. referral, CPC)\n{% enddocs %}\n\n{% docs utm_campaign %}\nTracks which campaign the traffic was generated by. Shows up in Google Analytics as Campaign Name (eg. editorial_newsletter)\n{% enddocs %}\n\n{% docs url %}\nURL of campaign (eg. https://dosome.click/nyn5m7)\n{% enddocs %}\n\n{% docs modal_type %}\nNULL or SURVEY_MODAL\n{% enddocs %}\n\n{% docs landing_datetime %}\nWhen the session started in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs ending_datetime %}\nWhen the session ended in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs session_duration_seconds %}\nSession duration in seconds\n{% enddocs %}\n\n{% docs num_pages_views %}\nNumber of pages viewed in session\n{% enddocs %}\n\n{% docs landing_page %}\nFirst page the user viewed in the session (eg. /us/facts/11-facts-about-bp-oil-spill)\n{% enddocs %}\n\n{% docs exit_page %}\n\"Which page the user ended or exited their session from (eg. /us/campaigns/green-your-getaway)\"\n{% enddocs %}\n\n{% docs days_since_last_session %}\n\"Days since their last session.\"\n{% enddocs %}\n\n{% docs post_type %}\nType of post, (e.g. photo, voter-reg)\n{% enddocs %}\n\n{% docs noun %}\nNoun that corresponds to the item in the call to action that was delivered. (e.g. drawings, tweets)\n{% enddocs %}\n\n{% docs verb %}\nVerb corresponding to the action the user took. (e.g. shared, sent, taken)\n{% enddocs %}\n\n{% docs deleted_at %}\nDate time in UTC when a user deleted their post.\n{% enddocs %}\n\n{% docs _fivetran_deleted %}\nMarks rows that were deleted in the source table\n{% enddocs %}\n\n{% docs _fivetran_synced %}\n(UTC timestamp) keeps track of when each row was last successfully synced\n{% enddocs %}\n\n{% docs reportback %}\nWhether the post is a reportback \n{% enddocs %}\n\n{% docs active %}\nWhether the user is active \n{% enddocs %}\n\n{% docs anonymous %}\nWhether the user is anonymous when making the post \n{% enddocs %}\n\n{% docs callpower_campaign_id %}\nUnique ID corresponding to the Callpower campaign. Callpower allows users to record messages for their representatives.\n{% enddocs %}\n\n{% docs quiz %}\nWhether the post is a quiz \n{% enddocs %}\n\n{% docs action_type %}\nType of action the user took. (e.g. share-something, donate-something)\n{% enddocs %}\n\n{% docs online %}\nWhether the action is a online as opposed to IRL.\n{% enddocs %}\n\n{% docs time_commitment %}\nEstimated time required to do the action (e.g. 3.0+, <0.5)\n{% enddocs %}\n\n{% docs num_signups %}\nQuantity of campaign signups\n{% enddocs %}\n\n{% docs most_recent_signup %}\nTimestamp of the most recent signup in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs num_rbs %}\nQuantity of reportbacks for the user\n{% enddocs %}\n\n{% docs total_quantity %}\nTotal quantity of items in reportbacks\n{% enddocs %}\n\n{% docs most_recent_rb %}\nWhen the most recent reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs first_rb %}\nWhen the first reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs avg_time_betw_rbs %}\nCalculated average time between reportbacks.\n{% enddocs %}\n\n{% docs avg_days_next_action_after_rb %}\nCalculated average days until next action after reportback\n{% enddocs %}\n\n{% docs days_to_next_action_after_last_rb %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs most_recent_mam_action %}\nMost recent monthly active member qualifying action in UTC (eg. 2018-01-01 12:00:00).\n{% enddocs %}\n\n{% docs most_recent_email_open %}\nMost recent email open in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs most_recent_all_actions %}\nMost recent timestamp of any action in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs last_action_is_rb %}\nWhether the last action the user took was a reportback\n{% enddocs %}\n\n{% docs days_since_last_action %}\nDays since the user's last action\n{% enddocs %}\n\n{% docs time_to_first_rb %}\nHow much time after registering until the user's first reportback\n{% enddocs %}\n\n{% docs sms_unsubscribed_at %}\nTimestamp of when user unsubscribed from SMS messaging\n{% enddocs %}\n\n{% docs user_unsubscribed_at %}\nTimestamp of when user unsubscribed from email or sms\n{% enddocs %}\n\n{% docs voter_reg_acquisition %}\nWhether the user was an acquisition through voter registration efforts. \n{% enddocs %}\n\n{% docs last_logged_in %}\nDate time in UTC when user last logged in to Northstar\n{% enddocs %}\n\n{% docs last_accessed %}\nDate time in UTC when user last access the website\n{% enddocs %}\n\n{% docs last_messaged_at %}\nDate time in UTC when user was last sent a message via SMS or email\n{% enddocs %}\n\n{% docs facebook_id %}\nUser's facebook id\n{% enddocs %}\n\n{% docs mobile %}\nUsers's mobile phone number\n{% enddocs %}\n\n{% docs birthdate %}\nUser's birthdate\n{% enddocs %}\n\n{% docs first_name %}\nUser's first name\n{% enddocs %}\n\n{% docs last_name %}\nUser's last name\n{% enddocs %}\n\n{% docs voter_registration_status %}\nUser's registration status. (e.g. registration_complete, confirmed, uncertain) \n{% enddocs %}\n\n{% docs finish_with_state %}\nIf the registrant was eligible to use and passed through to complete their registration with their state\u2019s OVR system, it will be indicated in this field (direct quote from Rock-The-Vote documentation). Yes/No value in field.\n{% enddocs %}\n\n{% docs reportback_volume %}\nThis field returns 1 if non voter-reg action, since campaigns team only counts those a 1 reportback. If voter-reg action, we want to count quantity of post as number of registered voters.\n{% enddocs %}\n\n{% docs address_street_1 %}\nFirst line of user's street address\n{% enddocs %}\n\n{% docs address_street_2 %}\nSecond line of user's street address\n{% enddocs %}\n\n{% docs city %}\nUser's city\n{% enddocs %}\n\n{% docs state %}\nUser's state\n{% enddocs %}\n\n{% docs country %}\nUser's country\n{% enddocs %}\n\n{% docs language %}\nUser's language\n{% enddocs %}\n\n{% docs cio_status %}\nStatus of user from CIO. (e.g. customer_subscribed, customer_unsubscribed)\n{% enddocs %}\n\n{% docs cio_status_timestamp %}\nTimestamp when users's status was updated.\n{% enddocs %}\n\n{% docs sms_status %}\nCurrent SMS status. (e.g. undeliverable, unknown)\n{% enddocs %}\n\n{% docs source_detail %}\nDetails of the origin of the user. (e.g. tell_a_friend, other, opt_in_path/197981)\n{% enddocs %}\n\n{% docs badges %}\nWhether the user has any badges. \n{% enddocs %}\n\n{% docs refer_friends %}\nWhether the user is a part of the refer a friend campaign. \n{% enddocs %}\n\n{% docs subscribed_member %}\nWhether the user is subscribed. \n{% enddocs %}\n\n{% docs last_updated_at %}\nTimestamp when users's was updated.\n{% enddocs %}\n\n{% docs school_id %}\nUnique identifier for the user's school. This info comes from the school finder.\n{% enddocs %}\n\n{% docs newsletter_topic %}\nNewsletter topic. (e.g. community, lifestyle)\n{% enddocs %}\n\n{% docs user_agent %}\nFull user agent string for a user's browser (e.g. \"Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:24.0) Gecko/20100101 Firefox/24.0\")\n{% enddocs %}\n\n{% docs drupal_id %}\nOld Drupal user ID\n{% enddocs %}\n\n{% docs campaigns %}\nCampaigns a user is signed up for.\n{% enddocs %}\n\n{% docs audit %}\nA very useful field with data containing information about changes to a user, e.g. timestamps when the user subscribed and unsubscribed.\n{% enddocs %}\n\n{% docs voting_plan_status %}\nThe indication of the user's plan to vote, e.g. voting, not_voting, cant_vote\n{% enddocs %}\n\n{% docs voting_plan_time_of_day %}\nThe time of day when the user plans to vote, e.g morning, afternoon, evening\n{% enddocs %}\n\n{% docs voting_plan_method_of_transport %}\nHow the user plans to get to their polling place. e.g. walk, drive\n{% enddocs %}\n\n{% docs voting_plan_attending_with %}\nWith Whom the user plans to go voting, e.g. family, friends, alone\n{% enddocs %}\n\n{% docs feature_flags %}\nJSON containing info on features like badges and refer-a-friend.\n{% enddocs %}\n\n{% docs dbt_updated_at %}\nDBT snapshot table data. The updated_at timestamp of the source record when this snapshot row was inserted.\n{% enddocs %}\n\n{% docs dbt_scd_id %}\nDBT snapshot table data. A unique key generated for each snapshotted record.\n{% enddocs %}\n\n{% docs dbt_valid_from %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this snapshot row was first inserted\n{% enddocs %}\n\n{% docs dbt_valid_to %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this row row became invalidated.\n{% enddocs %}\n\n{% docs google_id %}\nUser's Google ID obtained from login.\n{% enddocs %}\n\n{% docs causes %}\nCauses in which a user is interested. e.g. animal welfare, education, mental_health\n{% enddocs %}\n\n{% docs email_subscription_status %}\nEmail subscription status of the user\n{% enddocs %}\n\n{% docs role %}\nUser's role, e.g. user, staff\n{% enddocs %}\n\n{% docs cio_backfilled %}\nWhether this user's data was backfilled from CIO\n{% enddocs %}\n\n{% docs addr_source %}\nWhere the user submitted their address, e.g. sms, GDPR\n{% enddocs %}\n\n{% docs email_subscription_topics %}\nEmail subscription topics correspond to categories in CIO in which the user is interested. e.g. lifestyle, community, scholarship\n{% enddocs %}\n\n{% docs sms_paused %}\nWhether we've paused sending sms messages to the user.\n{% enddocs %}\n\n\n\n\n", "name": "voting_plan_method_of_transport", "unique_id": "ds_dbt.voting_plan_method_of_transport", "block_contents": "How the user plans to get to their polling place. e.g. walk, drive"}, "ds_dbt.voting_plan_attending_with": {"root_path": "/Users/mrich/projects/quasar/quasar/dbt", "resource_type": "docs", "path": "schema.md", "original_file_path": "models/schema.md", "package_name": "ds_dbt", "file_contents": "\n{% docs click_id %}\nThis is a unique identifier for each click\n{% enddocs %}\n\n{% docs click_time %}\nTimestamp when user clicked.\n{% enddocs %}\n\n{% docs shortened %}\nShortened URL\n{% enddocs %}\n\n{% docs target_url %}\nURL where the user will be directed\n{% enddocs %}\n\n{% docs broadcast_id %}\nID of the broadcast that generated the shortened URL\n{% enddocs %}\n\n{% docs source %}\nSource of the URL (e.g. SMS, web), origin of the post (e.g. phoenix-web, phoenix-ashes, sms), or source where user was acquired. (e.g. sms, phoenix-next)\n{% enddocs %}\n\n{% docs interaction_type %}\nHow the user interacted with the link (e.g. preview, click)\n{% enddocs %}\n\n{% docs id %}\nUnique identifier for the post\n{% enddocs %}\n\n{% docs type %}\nType of post (e.g. photo)\n{% enddocs %}\n\n{% docs action %}\nPost action (e.g. DefendDreamers_Nov9_CongressCalls, GunViolence2018_Feb15_ParklandResponse)\n{% enddocs %}\n\n{% docs status %}\nPost status (e.g. accepted, rejected)\n{% enddocs %}\n\n{% docs quantity %}\nNumerical quantity of items specified in the call to action (e.g. 10, 200)\n{% enddocs %}\n\n{% docs source_bucket %}\nGrouping bucket for origin of the post (e.g. web, sms) \n{% enddocs %}\n\n{% docs created_at %}\nWhen the item was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs updated_at %}\nWhen the item was updated in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs text %}\nText of the post (e.g. \"Zoo animals and a super hero trying to help too!\") \n{% enddocs %}\n\n{% docs signup_id %}\nUnique identifier for the signup \n{% enddocs %}\n\n{% docs post_class %}\nClass of the signup (e.g. \"photo - default\", \"phone-call - DefendDreamers_Jan16_BothBodies\")\n{% enddocs %}\n\n{% docs is_accepted %}\nWhether the post has been accepted to be displayed to the public on the website\n{% enddocs %}\n\n{% docs action_id %}\nInternal identifier of the action \n{% enddocs %}\n\n{% docs location %}\nLocation where the action takes place (e.g. US-NY)\n{% enddocs %}\n\n{% docs postal_code %}\nPostal code where the action takes place\n{% enddocs %}\n\n{% docs is_reportback %}\nWhether the post is a reportback. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs civic_action %}\nWhether the post is a Civic Action. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs scholarship_entry %}\nWhether the post is a Scholarship Entry. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs why_participated %}\nWhy the user participated in this action. Entered by the user.\n{% enddocs %}\n\n{% docs details %}\nDetails about the post. Contains contentfulId and other information (e.g. {\"campaignContentfulId\":\"6ATBgGEQEeJoIcxs1qbwaC\"})\n{% enddocs %}\n\n{% docs email %}\nEmail address of the user.\n{% enddocs %}\n\n{% docs source_details %}\nDetails about the source of the item. This is sometimes represented as a JSON object, and for other tables like Turbovote its represented as a string. (e.g. \"{\"contentful_id\":\"3CTLlXfbwtz1FOMpl31SKV\",\"utm_source\":\"scholarship_listing\",\"utm_medium\":\"referral\",\"utm_campaign\":\"fastweb_2019_08\"}\", newsletter_456)\n{% enddocs %}\n\n{% docs campaign_id %}\nThis is a unique identifier for the campaign\n{% enddocs %}\n\n{% docs campaign_run_id %}\nUnique identifier for the campaign run\n{% enddocs %}\n\n{% docs campaign_name %}\nName of the campaign\n{% enddocs %}\n\n{% docs campaign_cause %}\nCampaign cause (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_run_start_date %}\nStart date of the campaign run\n{% enddocs %}\n\n{% docs campaign_run_end_date %}\nEnd date of the campaign run\n{% enddocs %}\n\n{% docs campaign_created_date %}\nWhen the campaign was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs campaign_node_id %}\nInternal unique node id for the campaign\n{% enddocs %}\n\n{% docs campaign_node_id_title %}\nCampaign title\n{% enddocs %}\n\n{% docs campaign_run_id_title %}\nTitle of the campaign run\n{% enddocs %}\n\n{% docs campaign_action_type %}\nCampaign action type (eg. Make Something, Share Something)\n{% enddocs %}\n\n{% docs campaign_cause_type %}\nCampaign cause type (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_noun %}\nNoun applicable to the user's action\n{% enddocs %}\n\n{% docs campaign_verb %}\nVerb describing the action the user should take\n{% enddocs %}\n\n{% docs campaign_cta %}\nCampaign's call to action\n{% enddocs %}\n\n{% docs campaign_language %}\n\"Language in which the campaign is available\"\n{% enddocs %}\n\n{% docs agent_id %}\nIf set, the content type of the picture the member is sending us. Exp. image/png.\n{% enddocs %}\n\n{% docs attachment_content_type %}\nIf set, the handle of the Front agent this outbound support message is from.\n{% enddocs %}\n\n{% docs topic %}\nHolds a reference to the **last** campaign topic the member's conversation was in. This is useful to allow members to talk to Gambit and get quick responses (through Rivescript), without Gambit completely forgetting what state the member's interaction with a campaign topic was in.\n{% enddocs %}\n\n{% docs action_serial_id %}\nSerial id for the user's action. Depends on the source of the action. May be the bertly click id, sms message id, etc.\n{% enddocs %}\n\n{% docs channel %}\nChannel for the user's action. Depends on the source of the action. (e.g. web, sms)\n{% enddocs %}\n\n{% docs first_action_month %}\nMonth during which the user took their first action. \n{% enddocs %}\n\n{% docs event_id %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs event_source %}\nApplication source for event (eg. Phoenix, Northstar)\n{% enddocs %}\n\n{% docs event_datetime %}\nWhen the event occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs event_name %}\nName of the event (eg. northstar_submitted_register, https://docs.google.com/spreadsheets/d/1lm-fGrIm85nUTxSojqyCt_Ehmm1zEbViFhKpxcJiz1A/edit#gid=406441516)\n{% enddocs %}\n\n{% docs event_type %}\nType of event (pv = 'Page View', se = 'Structured Event')\n{% enddocs %}\n\n{% docs host %}\nURL host where event occurred (eg. www.dosomething.org or identity.dosomething.org)\n{% enddocs %}\n\n{% docs path %}\nURL path event occurred at (eg. /login or /us/campaigns/huddle-for-heroes)\n{% enddocs %}\n\n{% docs query_parameters %}\nOptional query parameters for the request (eg. query=huddle)\n{% enddocs %}\n\n{% docs se_category %}\nCategory of event (eg. focused_field, authentication) - Custom structured event\n{% enddocs %}\n\n{% docs se_action %}\nAction performed / event name (eg. form_submitted, action_failed) - Custom structured event\n{% enddocs %}\n\n{% docs se_label %}\nThe object of the action (eg. first_name, register, voter_reg_status) - Custom structured event\n{% enddocs %}\n\n{% docs session_id %}\nUnique identifier of the user's session\n{% enddocs %}\n\n{% docs session_counter %}\nHow many sessions a user has started\n{% enddocs %}\n\n{% docs browser_size %}\nWhich type of browser a user is using (eg. Mobile, Desktop)\n{% enddocs %}\n\n{% docs northstar_id %}\nThe Northstar ID of the user who generated the event\n{% enddocs %}\n\n{% docs device_id %}\nID of the device used\n{% enddocs %}\n\n{% docs referrer_host %}\nURL host of the referring site (eg. google.com)\n{% enddocs %}\n\n{% docs referrer_path %}\nURL path from referring site (eg. /10-stats-on-teen-drug-and-alcohol-use/)\n{% enddocs %}\n\n{% docs referrer_source %}\nReferrer source name (eg. Google, Facebook)\n{% enddocs %}\n\n{% docs utm_source %}\nTracks where the traffic is coming from. (eg. scholarship_listing, Facebook)\n{% enddocs %}\n\n{% docs utm_medium %}\nHow the traffic got to the platform (eg. referral, CPC)\n{% enddocs %}\n\n{% docs utm_campaign %}\nTracks which campaign the traffic was generated by. Shows up in Google Analytics as Campaign Name (eg. editorial_newsletter)\n{% enddocs %}\n\n{% docs url %}\nURL of campaign (eg. https://dosome.click/nyn5m7)\n{% enddocs %}\n\n{% docs modal_type %}\nNULL or SURVEY_MODAL\n{% enddocs %}\n\n{% docs landing_datetime %}\nWhen the session started in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs ending_datetime %}\nWhen the session ended in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs session_duration_seconds %}\nSession duration in seconds\n{% enddocs %}\n\n{% docs num_pages_views %}\nNumber of pages viewed in session\n{% enddocs %}\n\n{% docs landing_page %}\nFirst page the user viewed in the session (eg. /us/facts/11-facts-about-bp-oil-spill)\n{% enddocs %}\n\n{% docs exit_page %}\n\"Which page the user ended or exited their session from (eg. /us/campaigns/green-your-getaway)\"\n{% enddocs %}\n\n{% docs days_since_last_session %}\n\"Days since their last session.\"\n{% enddocs %}\n\n{% docs post_type %}\nType of post, (e.g. photo, voter-reg)\n{% enddocs %}\n\n{% docs noun %}\nNoun that corresponds to the item in the call to action that was delivered. (e.g. drawings, tweets)\n{% enddocs %}\n\n{% docs verb %}\nVerb corresponding to the action the user took. (e.g. shared, sent, taken)\n{% enddocs %}\n\n{% docs deleted_at %}\nDate time in UTC when a user deleted their post.\n{% enddocs %}\n\n{% docs _fivetran_deleted %}\nMarks rows that were deleted in the source table\n{% enddocs %}\n\n{% docs _fivetran_synced %}\n(UTC timestamp) keeps track of when each row was last successfully synced\n{% enddocs %}\n\n{% docs reportback %}\nWhether the post is a reportback \n{% enddocs %}\n\n{% docs active %}\nWhether the user is active \n{% enddocs %}\n\n{% docs anonymous %}\nWhether the user is anonymous when making the post \n{% enddocs %}\n\n{% docs callpower_campaign_id %}\nUnique ID corresponding to the Callpower campaign. Callpower allows users to record messages for their representatives.\n{% enddocs %}\n\n{% docs quiz %}\nWhether the post is a quiz \n{% enddocs %}\n\n{% docs action_type %}\nType of action the user took. (e.g. share-something, donate-something)\n{% enddocs %}\n\n{% docs online %}\nWhether the action is a online as opposed to IRL.\n{% enddocs %}\n\n{% docs time_commitment %}\nEstimated time required to do the action (e.g. 3.0+, <0.5)\n{% enddocs %}\n\n{% docs num_signups %}\nQuantity of campaign signups\n{% enddocs %}\n\n{% docs most_recent_signup %}\nTimestamp of the most recent signup in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs num_rbs %}\nQuantity of reportbacks for the user\n{% enddocs %}\n\n{% docs total_quantity %}\nTotal quantity of items in reportbacks\n{% enddocs %}\n\n{% docs most_recent_rb %}\nWhen the most recent reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs first_rb %}\nWhen the first reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs avg_time_betw_rbs %}\nCalculated average time between reportbacks.\n{% enddocs %}\n\n{% docs avg_days_next_action_after_rb %}\nCalculated average days until next action after reportback\n{% enddocs %}\n\n{% docs days_to_next_action_after_last_rb %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs most_recent_mam_action %}\nMost recent monthly active member qualifying action in UTC (eg. 2018-01-01 12:00:00).\n{% enddocs %}\n\n{% docs most_recent_email_open %}\nMost recent email open in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs most_recent_all_actions %}\nMost recent timestamp of any action in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs last_action_is_rb %}\nWhether the last action the user took was a reportback\n{% enddocs %}\n\n{% docs days_since_last_action %}\nDays since the user's last action\n{% enddocs %}\n\n{% docs time_to_first_rb %}\nHow much time after registering until the user's first reportback\n{% enddocs %}\n\n{% docs sms_unsubscribed_at %}\nTimestamp of when user unsubscribed from SMS messaging\n{% enddocs %}\n\n{% docs user_unsubscribed_at %}\nTimestamp of when user unsubscribed from email or sms\n{% enddocs %}\n\n{% docs voter_reg_acquisition %}\nWhether the user was an acquisition through voter registration efforts. \n{% enddocs %}\n\n{% docs last_logged_in %}\nDate time in UTC when user last logged in to Northstar\n{% enddocs %}\n\n{% docs last_accessed %}\nDate time in UTC when user last access the website\n{% enddocs %}\n\n{% docs last_messaged_at %}\nDate time in UTC when user was last sent a message via SMS or email\n{% enddocs %}\n\n{% docs facebook_id %}\nUser's facebook id\n{% enddocs %}\n\n{% docs mobile %}\nUsers's mobile phone number\n{% enddocs %}\n\n{% docs birthdate %}\nUser's birthdate\n{% enddocs %}\n\n{% docs first_name %}\nUser's first name\n{% enddocs %}\n\n{% docs last_name %}\nUser's last name\n{% enddocs %}\n\n{% docs voter_registration_status %}\nUser's registration status. (e.g. registration_complete, confirmed, uncertain) \n{% enddocs %}\n\n{% docs finish_with_state %}\nIf the registrant was eligible to use and passed through to complete their registration with their state\u2019s OVR system, it will be indicated in this field (direct quote from Rock-The-Vote documentation). Yes/No value in field.\n{% enddocs %}\n\n{% docs reportback_volume %}\nThis field returns 1 if non voter-reg action, since campaigns team only counts those a 1 reportback. If voter-reg action, we want to count quantity of post as number of registered voters.\n{% enddocs %}\n\n{% docs address_street_1 %}\nFirst line of user's street address\n{% enddocs %}\n\n{% docs address_street_2 %}\nSecond line of user's street address\n{% enddocs %}\n\n{% docs city %}\nUser's city\n{% enddocs %}\n\n{% docs state %}\nUser's state\n{% enddocs %}\n\n{% docs country %}\nUser's country\n{% enddocs %}\n\n{% docs language %}\nUser's language\n{% enddocs %}\n\n{% docs cio_status %}\nStatus of user from CIO. (e.g. customer_subscribed, customer_unsubscribed)\n{% enddocs %}\n\n{% docs cio_status_timestamp %}\nTimestamp when users's status was updated.\n{% enddocs %}\n\n{% docs sms_status %}\nCurrent SMS status. (e.g. undeliverable, unknown)\n{% enddocs %}\n\n{% docs source_detail %}\nDetails of the origin of the user. (e.g. tell_a_friend, other, opt_in_path/197981)\n{% enddocs %}\n\n{% docs badges %}\nWhether the user has any badges. \n{% enddocs %}\n\n{% docs refer_friends %}\nWhether the user is a part of the refer a friend campaign. \n{% enddocs %}\n\n{% docs subscribed_member %}\nWhether the user is subscribed. \n{% enddocs %}\n\n{% docs last_updated_at %}\nTimestamp when users's was updated.\n{% enddocs %}\n\n{% docs school_id %}\nUnique identifier for the user's school. This info comes from the school finder.\n{% enddocs %}\n\n{% docs newsletter_topic %}\nNewsletter topic. (e.g. community, lifestyle)\n{% enddocs %}\n\n{% docs user_agent %}\nFull user agent string for a user's browser (e.g. \"Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:24.0) Gecko/20100101 Firefox/24.0\")\n{% enddocs %}\n\n{% docs drupal_id %}\nOld Drupal user ID\n{% enddocs %}\n\n{% docs campaigns %}\nCampaigns a user is signed up for.\n{% enddocs %}\n\n{% docs audit %}\nA very useful field with data containing information about changes to a user, e.g. timestamps when the user subscribed and unsubscribed.\n{% enddocs %}\n\n{% docs voting_plan_status %}\nThe indication of the user's plan to vote, e.g. voting, not_voting, cant_vote\n{% enddocs %}\n\n{% docs voting_plan_time_of_day %}\nThe time of day when the user plans to vote, e.g morning, afternoon, evening\n{% enddocs %}\n\n{% docs voting_plan_method_of_transport %}\nHow the user plans to get to their polling place. e.g. walk, drive\n{% enddocs %}\n\n{% docs voting_plan_attending_with %}\nWith Whom the user plans to go voting, e.g. family, friends, alone\n{% enddocs %}\n\n{% docs feature_flags %}\nJSON containing info on features like badges and refer-a-friend.\n{% enddocs %}\n\n{% docs dbt_updated_at %}\nDBT snapshot table data. The updated_at timestamp of the source record when this snapshot row was inserted.\n{% enddocs %}\n\n{% docs dbt_scd_id %}\nDBT snapshot table data. A unique key generated for each snapshotted record.\n{% enddocs %}\n\n{% docs dbt_valid_from %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this snapshot row was first inserted\n{% enddocs %}\n\n{% docs dbt_valid_to %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this row row became invalidated.\n{% enddocs %}\n\n{% docs google_id %}\nUser's Google ID obtained from login.\n{% enddocs %}\n\n{% docs causes %}\nCauses in which a user is interested. e.g. animal welfare, education, mental_health\n{% enddocs %}\n\n{% docs email_subscription_status %}\nEmail subscription status of the user\n{% enddocs %}\n\n{% docs role %}\nUser's role, e.g. user, staff\n{% enddocs %}\n\n{% docs cio_backfilled %}\nWhether this user's data was backfilled from CIO\n{% enddocs %}\n\n{% docs addr_source %}\nWhere the user submitted their address, e.g. sms, GDPR\n{% enddocs %}\n\n{% docs email_subscription_topics %}\nEmail subscription topics correspond to categories in CIO in which the user is interested. e.g. lifestyle, community, scholarship\n{% enddocs %}\n\n{% docs sms_paused %}\nWhether we've paused sending sms messages to the user.\n{% enddocs %}\n\n\n\n\n", "name": "voting_plan_attending_with", "unique_id": "ds_dbt.voting_plan_attending_with", "block_contents": "With Whom the user plans to go voting, e.g. family, friends, alone"}, "ds_dbt.feature_flags": {"root_path": "/Users/mrich/projects/quasar/quasar/dbt", "resource_type": "docs", "path": "schema.md", "original_file_path": "models/schema.md", "package_name": "ds_dbt", "file_contents": "\n{% docs click_id %}\nThis is a unique identifier for each click\n{% enddocs %}\n\n{% docs click_time %}\nTimestamp when user clicked.\n{% enddocs %}\n\n{% docs shortened %}\nShortened URL\n{% enddocs %}\n\n{% docs target_url %}\nURL where the user will be directed\n{% enddocs %}\n\n{% docs broadcast_id %}\nID of the broadcast that generated the shortened URL\n{% enddocs %}\n\n{% docs source %}\nSource of the URL (e.g. SMS, web), origin of the post (e.g. phoenix-web, phoenix-ashes, sms), or source where user was acquired. (e.g. sms, phoenix-next)\n{% enddocs %}\n\n{% docs interaction_type %}\nHow the user interacted with the link (e.g. preview, click)\n{% enddocs %}\n\n{% docs id %}\nUnique identifier for the post\n{% enddocs %}\n\n{% docs type %}\nType of post (e.g. photo)\n{% enddocs %}\n\n{% docs action %}\nPost action (e.g. DefendDreamers_Nov9_CongressCalls, GunViolence2018_Feb15_ParklandResponse)\n{% enddocs %}\n\n{% docs status %}\nPost status (e.g. accepted, rejected)\n{% enddocs %}\n\n{% docs quantity %}\nNumerical quantity of items specified in the call to action (e.g. 10, 200)\n{% enddocs %}\n\n{% docs source_bucket %}\nGrouping bucket for origin of the post (e.g. web, sms) \n{% enddocs %}\n\n{% docs created_at %}\nWhen the item was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs updated_at %}\nWhen the item was updated in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs text %}\nText of the post (e.g. \"Zoo animals and a super hero trying to help too!\") \n{% enddocs %}\n\n{% docs signup_id %}\nUnique identifier for the signup \n{% enddocs %}\n\n{% docs post_class %}\nClass of the signup (e.g. \"photo - default\", \"phone-call - DefendDreamers_Jan16_BothBodies\")\n{% enddocs %}\n\n{% docs is_accepted %}\nWhether the post has been accepted to be displayed to the public on the website\n{% enddocs %}\n\n{% docs action_id %}\nInternal identifier of the action \n{% enddocs %}\n\n{% docs location %}\nLocation where the action takes place (e.g. US-NY)\n{% enddocs %}\n\n{% docs postal_code %}\nPostal code where the action takes place\n{% enddocs %}\n\n{% docs is_reportback %}\nWhether the post is a reportback. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs civic_action %}\nWhether the post is a Civic Action. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs scholarship_entry %}\nWhether the post is a Scholarship Entry. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs why_participated %}\nWhy the user participated in this action. Entered by the user.\n{% enddocs %}\n\n{% docs details %}\nDetails about the post. Contains contentfulId and other information (e.g. {\"campaignContentfulId\":\"6ATBgGEQEeJoIcxs1qbwaC\"})\n{% enddocs %}\n\n{% docs email %}\nEmail address of the user.\n{% enddocs %}\n\n{% docs source_details %}\nDetails about the source of the item. This is sometimes represented as a JSON object, and for other tables like Turbovote its represented as a string. (e.g. \"{\"contentful_id\":\"3CTLlXfbwtz1FOMpl31SKV\",\"utm_source\":\"scholarship_listing\",\"utm_medium\":\"referral\",\"utm_campaign\":\"fastweb_2019_08\"}\", newsletter_456)\n{% enddocs %}\n\n{% docs campaign_id %}\nThis is a unique identifier for the campaign\n{% enddocs %}\n\n{% docs campaign_run_id %}\nUnique identifier for the campaign run\n{% enddocs %}\n\n{% docs campaign_name %}\nName of the campaign\n{% enddocs %}\n\n{% docs campaign_cause %}\nCampaign cause (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_run_start_date %}\nStart date of the campaign run\n{% enddocs %}\n\n{% docs campaign_run_end_date %}\nEnd date of the campaign run\n{% enddocs %}\n\n{% docs campaign_created_date %}\nWhen the campaign was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs campaign_node_id %}\nInternal unique node id for the campaign\n{% enddocs %}\n\n{% docs campaign_node_id_title %}\nCampaign title\n{% enddocs %}\n\n{% docs campaign_run_id_title %}\nTitle of the campaign run\n{% enddocs %}\n\n{% docs campaign_action_type %}\nCampaign action type (eg. Make Something, Share Something)\n{% enddocs %}\n\n{% docs campaign_cause_type %}\nCampaign cause type (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_noun %}\nNoun applicable to the user's action\n{% enddocs %}\n\n{% docs campaign_verb %}\nVerb describing the action the user should take\n{% enddocs %}\n\n{% docs campaign_cta %}\nCampaign's call to action\n{% enddocs %}\n\n{% docs campaign_language %}\n\"Language in which the campaign is available\"\n{% enddocs %}\n\n{% docs agent_id %}\nIf set, the content type of the picture the member is sending us. Exp. image/png.\n{% enddocs %}\n\n{% docs attachment_content_type %}\nIf set, the handle of the Front agent this outbound support message is from.\n{% enddocs %}\n\n{% docs topic %}\nHolds a reference to the **last** campaign topic the member's conversation was in. This is useful to allow members to talk to Gambit and get quick responses (through Rivescript), without Gambit completely forgetting what state the member's interaction with a campaign topic was in.\n{% enddocs %}\n\n{% docs action_serial_id %}\nSerial id for the user's action. Depends on the source of the action. May be the bertly click id, sms message id, etc.\n{% enddocs %}\n\n{% docs channel %}\nChannel for the user's action. Depends on the source of the action. (e.g. web, sms)\n{% enddocs %}\n\n{% docs first_action_month %}\nMonth during which the user took their first action. \n{% enddocs %}\n\n{% docs event_id %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs event_source %}\nApplication source for event (eg. Phoenix, Northstar)\n{% enddocs %}\n\n{% docs event_datetime %}\nWhen the event occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs event_name %}\nName of the event (eg. northstar_submitted_register, https://docs.google.com/spreadsheets/d/1lm-fGrIm85nUTxSojqyCt_Ehmm1zEbViFhKpxcJiz1A/edit#gid=406441516)\n{% enddocs %}\n\n{% docs event_type %}\nType of event (pv = 'Page View', se = 'Structured Event')\n{% enddocs %}\n\n{% docs host %}\nURL host where event occurred (eg. www.dosomething.org or identity.dosomething.org)\n{% enddocs %}\n\n{% docs path %}\nURL path event occurred at (eg. /login or /us/campaigns/huddle-for-heroes)\n{% enddocs %}\n\n{% docs query_parameters %}\nOptional query parameters for the request (eg. query=huddle)\n{% enddocs %}\n\n{% docs se_category %}\nCategory of event (eg. focused_field, authentication) - Custom structured event\n{% enddocs %}\n\n{% docs se_action %}\nAction performed / event name (eg. form_submitted, action_failed) - Custom structured event\n{% enddocs %}\n\n{% docs se_label %}\nThe object of the action (eg. first_name, register, voter_reg_status) - Custom structured event\n{% enddocs %}\n\n{% docs session_id %}\nUnique identifier of the user's session\n{% enddocs %}\n\n{% docs session_counter %}\nHow many sessions a user has started\n{% enddocs %}\n\n{% docs browser_size %}\nWhich type of browser a user is using (eg. Mobile, Desktop)\n{% enddocs %}\n\n{% docs northstar_id %}\nThe Northstar ID of the user who generated the event\n{% enddocs %}\n\n{% docs device_id %}\nID of the device used\n{% enddocs %}\n\n{% docs referrer_host %}\nURL host of the referring site (eg. google.com)\n{% enddocs %}\n\n{% docs referrer_path %}\nURL path from referring site (eg. /10-stats-on-teen-drug-and-alcohol-use/)\n{% enddocs %}\n\n{% docs referrer_source %}\nReferrer source name (eg. Google, Facebook)\n{% enddocs %}\n\n{% docs utm_source %}\nTracks where the traffic is coming from. (eg. scholarship_listing, Facebook)\n{% enddocs %}\n\n{% docs utm_medium %}\nHow the traffic got to the platform (eg. referral, CPC)\n{% enddocs %}\n\n{% docs utm_campaign %}\nTracks which campaign the traffic was generated by. Shows up in Google Analytics as Campaign Name (eg. editorial_newsletter)\n{% enddocs %}\n\n{% docs url %}\nURL of campaign (eg. https://dosome.click/nyn5m7)\n{% enddocs %}\n\n{% docs modal_type %}\nNULL or SURVEY_MODAL\n{% enddocs %}\n\n{% docs landing_datetime %}\nWhen the session started in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs ending_datetime %}\nWhen the session ended in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs session_duration_seconds %}\nSession duration in seconds\n{% enddocs %}\n\n{% docs num_pages_views %}\nNumber of pages viewed in session\n{% enddocs %}\n\n{% docs landing_page %}\nFirst page the user viewed in the session (eg. /us/facts/11-facts-about-bp-oil-spill)\n{% enddocs %}\n\n{% docs exit_page %}\n\"Which page the user ended or exited their session from (eg. /us/campaigns/green-your-getaway)\"\n{% enddocs %}\n\n{% docs days_since_last_session %}\n\"Days since their last session.\"\n{% enddocs %}\n\n{% docs post_type %}\nType of post, (e.g. photo, voter-reg)\n{% enddocs %}\n\n{% docs noun %}\nNoun that corresponds to the item in the call to action that was delivered. (e.g. drawings, tweets)\n{% enddocs %}\n\n{% docs verb %}\nVerb corresponding to the action the user took. (e.g. shared, sent, taken)\n{% enddocs %}\n\n{% docs deleted_at %}\nDate time in UTC when a user deleted their post.\n{% enddocs %}\n\n{% docs _fivetran_deleted %}\nMarks rows that were deleted in the source table\n{% enddocs %}\n\n{% docs _fivetran_synced %}\n(UTC timestamp) keeps track of when each row was last successfully synced\n{% enddocs %}\n\n{% docs reportback %}\nWhether the post is a reportback \n{% enddocs %}\n\n{% docs active %}\nWhether the user is active \n{% enddocs %}\n\n{% docs anonymous %}\nWhether the user is anonymous when making the post \n{% enddocs %}\n\n{% docs callpower_campaign_id %}\nUnique ID corresponding to the Callpower campaign. Callpower allows users to record messages for their representatives.\n{% enddocs %}\n\n{% docs quiz %}\nWhether the post is a quiz \n{% enddocs %}\n\n{% docs action_type %}\nType of action the user took. (e.g. share-something, donate-something)\n{% enddocs %}\n\n{% docs online %}\nWhether the action is a online as opposed to IRL.\n{% enddocs %}\n\n{% docs time_commitment %}\nEstimated time required to do the action (e.g. 3.0+, <0.5)\n{% enddocs %}\n\n{% docs num_signups %}\nQuantity of campaign signups\n{% enddocs %}\n\n{% docs most_recent_signup %}\nTimestamp of the most recent signup in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs num_rbs %}\nQuantity of reportbacks for the user\n{% enddocs %}\n\n{% docs total_quantity %}\nTotal quantity of items in reportbacks\n{% enddocs %}\n\n{% docs most_recent_rb %}\nWhen the most recent reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs first_rb %}\nWhen the first reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs avg_time_betw_rbs %}\nCalculated average time between reportbacks.\n{% enddocs %}\n\n{% docs avg_days_next_action_after_rb %}\nCalculated average days until next action after reportback\n{% enddocs %}\n\n{% docs days_to_next_action_after_last_rb %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs most_recent_mam_action %}\nMost recent monthly active member qualifying action in UTC (eg. 2018-01-01 12:00:00).\n{% enddocs %}\n\n{% docs most_recent_email_open %}\nMost recent email open in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs most_recent_all_actions %}\nMost recent timestamp of any action in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs last_action_is_rb %}\nWhether the last action the user took was a reportback\n{% enddocs %}\n\n{% docs days_since_last_action %}\nDays since the user's last action\n{% enddocs %}\n\n{% docs time_to_first_rb %}\nHow much time after registering until the user's first reportback\n{% enddocs %}\n\n{% docs sms_unsubscribed_at %}\nTimestamp of when user unsubscribed from SMS messaging\n{% enddocs %}\n\n{% docs user_unsubscribed_at %}\nTimestamp of when user unsubscribed from email or sms\n{% enddocs %}\n\n{% docs voter_reg_acquisition %}\nWhether the user was an acquisition through voter registration efforts. \n{% enddocs %}\n\n{% docs last_logged_in %}\nDate time in UTC when user last logged in to Northstar\n{% enddocs %}\n\n{% docs last_accessed %}\nDate time in UTC when user last access the website\n{% enddocs %}\n\n{% docs last_messaged_at %}\nDate time in UTC when user was last sent a message via SMS or email\n{% enddocs %}\n\n{% docs facebook_id %}\nUser's facebook id\n{% enddocs %}\n\n{% docs mobile %}\nUsers's mobile phone number\n{% enddocs %}\n\n{% docs birthdate %}\nUser's birthdate\n{% enddocs %}\n\n{% docs first_name %}\nUser's first name\n{% enddocs %}\n\n{% docs last_name %}\nUser's last name\n{% enddocs %}\n\n{% docs voter_registration_status %}\nUser's registration status. (e.g. registration_complete, confirmed, uncertain) \n{% enddocs %}\n\n{% docs finish_with_state %}\nIf the registrant was eligible to use and passed through to complete their registration with their state\u2019s OVR system, it will be indicated in this field (direct quote from Rock-The-Vote documentation). Yes/No value in field.\n{% enddocs %}\n\n{% docs reportback_volume %}\nThis field returns 1 if non voter-reg action, since campaigns team only counts those a 1 reportback. If voter-reg action, we want to count quantity of post as number of registered voters.\n{% enddocs %}\n\n{% docs address_street_1 %}\nFirst line of user's street address\n{% enddocs %}\n\n{% docs address_street_2 %}\nSecond line of user's street address\n{% enddocs %}\n\n{% docs city %}\nUser's city\n{% enddocs %}\n\n{% docs state %}\nUser's state\n{% enddocs %}\n\n{% docs country %}\nUser's country\n{% enddocs %}\n\n{% docs language %}\nUser's language\n{% enddocs %}\n\n{% docs cio_status %}\nStatus of user from CIO. (e.g. customer_subscribed, customer_unsubscribed)\n{% enddocs %}\n\n{% docs cio_status_timestamp %}\nTimestamp when users's status was updated.\n{% enddocs %}\n\n{% docs sms_status %}\nCurrent SMS status. (e.g. undeliverable, unknown)\n{% enddocs %}\n\n{% docs source_detail %}\nDetails of the origin of the user. (e.g. tell_a_friend, other, opt_in_path/197981)\n{% enddocs %}\n\n{% docs badges %}\nWhether the user has any badges. \n{% enddocs %}\n\n{% docs refer_friends %}\nWhether the user is a part of the refer a friend campaign. \n{% enddocs %}\n\n{% docs subscribed_member %}\nWhether the user is subscribed. \n{% enddocs %}\n\n{% docs last_updated_at %}\nTimestamp when users's was updated.\n{% enddocs %}\n\n{% docs school_id %}\nUnique identifier for the user's school. This info comes from the school finder.\n{% enddocs %}\n\n{% docs newsletter_topic %}\nNewsletter topic. (e.g. community, lifestyle)\n{% enddocs %}\n\n{% docs user_agent %}\nFull user agent string for a user's browser (e.g. \"Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:24.0) Gecko/20100101 Firefox/24.0\")\n{% enddocs %}\n\n{% docs drupal_id %}\nOld Drupal user ID\n{% enddocs %}\n\n{% docs campaigns %}\nCampaigns a user is signed up for.\n{% enddocs %}\n\n{% docs audit %}\nA very useful field with data containing information about changes to a user, e.g. timestamps when the user subscribed and unsubscribed.\n{% enddocs %}\n\n{% docs voting_plan_status %}\nThe indication of the user's plan to vote, e.g. voting, not_voting, cant_vote\n{% enddocs %}\n\n{% docs voting_plan_time_of_day %}\nThe time of day when the user plans to vote, e.g morning, afternoon, evening\n{% enddocs %}\n\n{% docs voting_plan_method_of_transport %}\nHow the user plans to get to their polling place. e.g. walk, drive\n{% enddocs %}\n\n{% docs voting_plan_attending_with %}\nWith Whom the user plans to go voting, e.g. family, friends, alone\n{% enddocs %}\n\n{% docs feature_flags %}\nJSON containing info on features like badges and refer-a-friend.\n{% enddocs %}\n\n{% docs dbt_updated_at %}\nDBT snapshot table data. The updated_at timestamp of the source record when this snapshot row was inserted.\n{% enddocs %}\n\n{% docs dbt_scd_id %}\nDBT snapshot table data. A unique key generated for each snapshotted record.\n{% enddocs %}\n\n{% docs dbt_valid_from %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this snapshot row was first inserted\n{% enddocs %}\n\n{% docs dbt_valid_to %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this row row became invalidated.\n{% enddocs %}\n\n{% docs google_id %}\nUser's Google ID obtained from login.\n{% enddocs %}\n\n{% docs causes %}\nCauses in which a user is interested. e.g. animal welfare, education, mental_health\n{% enddocs %}\n\n{% docs email_subscription_status %}\nEmail subscription status of the user\n{% enddocs %}\n\n{% docs role %}\nUser's role, e.g. user, staff\n{% enddocs %}\n\n{% docs cio_backfilled %}\nWhether this user's data was backfilled from CIO\n{% enddocs %}\n\n{% docs addr_source %}\nWhere the user submitted their address, e.g. sms, GDPR\n{% enddocs %}\n\n{% docs email_subscription_topics %}\nEmail subscription topics correspond to categories in CIO in which the user is interested. e.g. lifestyle, community, scholarship\n{% enddocs %}\n\n{% docs sms_paused %}\nWhether we've paused sending sms messages to the user.\n{% enddocs %}\n\n\n\n\n", "name": "feature_flags", "unique_id": "ds_dbt.feature_flags", "block_contents": "JSON containing info on features like badges and refer-a-friend."}, "ds_dbt.dbt_updated_at": {"root_path": "/Users/mrich/projects/quasar/quasar/dbt", "resource_type": "docs", "path": "schema.md", "original_file_path": "models/schema.md", "package_name": "ds_dbt", "file_contents": "\n{% docs click_id %}\nThis is a unique identifier for each click\n{% enddocs %}\n\n{% docs click_time %}\nTimestamp when user clicked.\n{% enddocs %}\n\n{% docs shortened %}\nShortened URL\n{% enddocs %}\n\n{% docs target_url %}\nURL where the user will be directed\n{% enddocs %}\n\n{% docs broadcast_id %}\nID of the broadcast that generated the shortened URL\n{% enddocs %}\n\n{% docs source %}\nSource of the URL (e.g. SMS, web), origin of the post (e.g. phoenix-web, phoenix-ashes, sms), or source where user was acquired. (e.g. sms, phoenix-next)\n{% enddocs %}\n\n{% docs interaction_type %}\nHow the user interacted with the link (e.g. preview, click)\n{% enddocs %}\n\n{% docs id %}\nUnique identifier for the post\n{% enddocs %}\n\n{% docs type %}\nType of post (e.g. photo)\n{% enddocs %}\n\n{% docs action %}\nPost action (e.g. DefendDreamers_Nov9_CongressCalls, GunViolence2018_Feb15_ParklandResponse)\n{% enddocs %}\n\n{% docs status %}\nPost status (e.g. accepted, rejected)\n{% enddocs %}\n\n{% docs quantity %}\nNumerical quantity of items specified in the call to action (e.g. 10, 200)\n{% enddocs %}\n\n{% docs source_bucket %}\nGrouping bucket for origin of the post (e.g. web, sms) \n{% enddocs %}\n\n{% docs created_at %}\nWhen the item was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs updated_at %}\nWhen the item was updated in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs text %}\nText of the post (e.g. \"Zoo animals and a super hero trying to help too!\") \n{% enddocs %}\n\n{% docs signup_id %}\nUnique identifier for the signup \n{% enddocs %}\n\n{% docs post_class %}\nClass of the signup (e.g. \"photo - default\", \"phone-call - DefendDreamers_Jan16_BothBodies\")\n{% enddocs %}\n\n{% docs is_accepted %}\nWhether the post has been accepted to be displayed to the public on the website\n{% enddocs %}\n\n{% docs action_id %}\nInternal identifier of the action \n{% enddocs %}\n\n{% docs location %}\nLocation where the action takes place (e.g. US-NY)\n{% enddocs %}\n\n{% docs postal_code %}\nPostal code where the action takes place\n{% enddocs %}\n\n{% docs is_reportback %}\nWhether the post is a reportback. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs civic_action %}\nWhether the post is a Civic Action. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs scholarship_entry %}\nWhether the post is a Scholarship Entry. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs why_participated %}\nWhy the user participated in this action. Entered by the user.\n{% enddocs %}\n\n{% docs details %}\nDetails about the post. Contains contentfulId and other information (e.g. {\"campaignContentfulId\":\"6ATBgGEQEeJoIcxs1qbwaC\"})\n{% enddocs %}\n\n{% docs email %}\nEmail address of the user.\n{% enddocs %}\n\n{% docs source_details %}\nDetails about the source of the item. This is sometimes represented as a JSON object, and for other tables like Turbovote its represented as a string. (e.g. \"{\"contentful_id\":\"3CTLlXfbwtz1FOMpl31SKV\",\"utm_source\":\"scholarship_listing\",\"utm_medium\":\"referral\",\"utm_campaign\":\"fastweb_2019_08\"}\", newsletter_456)\n{% enddocs %}\n\n{% docs campaign_id %}\nThis is a unique identifier for the campaign\n{% enddocs %}\n\n{% docs campaign_run_id %}\nUnique identifier for the campaign run\n{% enddocs %}\n\n{% docs campaign_name %}\nName of the campaign\n{% enddocs %}\n\n{% docs campaign_cause %}\nCampaign cause (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_run_start_date %}\nStart date of the campaign run\n{% enddocs %}\n\n{% docs campaign_run_end_date %}\nEnd date of the campaign run\n{% enddocs %}\n\n{% docs campaign_created_date %}\nWhen the campaign was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs campaign_node_id %}\nInternal unique node id for the campaign\n{% enddocs %}\n\n{% docs campaign_node_id_title %}\nCampaign title\n{% enddocs %}\n\n{% docs campaign_run_id_title %}\nTitle of the campaign run\n{% enddocs %}\n\n{% docs campaign_action_type %}\nCampaign action type (eg. Make Something, Share Something)\n{% enddocs %}\n\n{% docs campaign_cause_type %}\nCampaign cause type (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_noun %}\nNoun applicable to the user's action\n{% enddocs %}\n\n{% docs campaign_verb %}\nVerb describing the action the user should take\n{% enddocs %}\n\n{% docs campaign_cta %}\nCampaign's call to action\n{% enddocs %}\n\n{% docs campaign_language %}\n\"Language in which the campaign is available\"\n{% enddocs %}\n\n{% docs agent_id %}\nIf set, the content type of the picture the member is sending us. Exp. image/png.\n{% enddocs %}\n\n{% docs attachment_content_type %}\nIf set, the handle of the Front agent this outbound support message is from.\n{% enddocs %}\n\n{% docs topic %}\nHolds a reference to the **last** campaign topic the member's conversation was in. This is useful to allow members to talk to Gambit and get quick responses (through Rivescript), without Gambit completely forgetting what state the member's interaction with a campaign topic was in.\n{% enddocs %}\n\n{% docs action_serial_id %}\nSerial id for the user's action. Depends on the source of the action. May be the bertly click id, sms message id, etc.\n{% enddocs %}\n\n{% docs channel %}\nChannel for the user's action. Depends on the source of the action. (e.g. web, sms)\n{% enddocs %}\n\n{% docs first_action_month %}\nMonth during which the user took their first action. \n{% enddocs %}\n\n{% docs event_id %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs event_source %}\nApplication source for event (eg. Phoenix, Northstar)\n{% enddocs %}\n\n{% docs event_datetime %}\nWhen the event occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs event_name %}\nName of the event (eg. northstar_submitted_register, https://docs.google.com/spreadsheets/d/1lm-fGrIm85nUTxSojqyCt_Ehmm1zEbViFhKpxcJiz1A/edit#gid=406441516)\n{% enddocs %}\n\n{% docs event_type %}\nType of event (pv = 'Page View', se = 'Structured Event')\n{% enddocs %}\n\n{% docs host %}\nURL host where event occurred (eg. www.dosomething.org or identity.dosomething.org)\n{% enddocs %}\n\n{% docs path %}\nURL path event occurred at (eg. /login or /us/campaigns/huddle-for-heroes)\n{% enddocs %}\n\n{% docs query_parameters %}\nOptional query parameters for the request (eg. query=huddle)\n{% enddocs %}\n\n{% docs se_category %}\nCategory of event (eg. focused_field, authentication) - Custom structured event\n{% enddocs %}\n\n{% docs se_action %}\nAction performed / event name (eg. form_submitted, action_failed) - Custom structured event\n{% enddocs %}\n\n{% docs se_label %}\nThe object of the action (eg. first_name, register, voter_reg_status) - Custom structured event\n{% enddocs %}\n\n{% docs session_id %}\nUnique identifier of the user's session\n{% enddocs %}\n\n{% docs session_counter %}\nHow many sessions a user has started\n{% enddocs %}\n\n{% docs browser_size %}\nWhich type of browser a user is using (eg. Mobile, Desktop)\n{% enddocs %}\n\n{% docs northstar_id %}\nThe Northstar ID of the user who generated the event\n{% enddocs %}\n\n{% docs device_id %}\nID of the device used\n{% enddocs %}\n\n{% docs referrer_host %}\nURL host of the referring site (eg. google.com)\n{% enddocs %}\n\n{% docs referrer_path %}\nURL path from referring site (eg. /10-stats-on-teen-drug-and-alcohol-use/)\n{% enddocs %}\n\n{% docs referrer_source %}\nReferrer source name (eg. Google, Facebook)\n{% enddocs %}\n\n{% docs utm_source %}\nTracks where the traffic is coming from. (eg. scholarship_listing, Facebook)\n{% enddocs %}\n\n{% docs utm_medium %}\nHow the traffic got to the platform (eg. referral, CPC)\n{% enddocs %}\n\n{% docs utm_campaign %}\nTracks which campaign the traffic was generated by. Shows up in Google Analytics as Campaign Name (eg. editorial_newsletter)\n{% enddocs %}\n\n{% docs url %}\nURL of campaign (eg. https://dosome.click/nyn5m7)\n{% enddocs %}\n\n{% docs modal_type %}\nNULL or SURVEY_MODAL\n{% enddocs %}\n\n{% docs landing_datetime %}\nWhen the session started in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs ending_datetime %}\nWhen the session ended in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs session_duration_seconds %}\nSession duration in seconds\n{% enddocs %}\n\n{% docs num_pages_views %}\nNumber of pages viewed in session\n{% enddocs %}\n\n{% docs landing_page %}\nFirst page the user viewed in the session (eg. /us/facts/11-facts-about-bp-oil-spill)\n{% enddocs %}\n\n{% docs exit_page %}\n\"Which page the user ended or exited their session from (eg. /us/campaigns/green-your-getaway)\"\n{% enddocs %}\n\n{% docs days_since_last_session %}\n\"Days since their last session.\"\n{% enddocs %}\n\n{% docs post_type %}\nType of post, (e.g. photo, voter-reg)\n{% enddocs %}\n\n{% docs noun %}\nNoun that corresponds to the item in the call to action that was delivered. (e.g. drawings, tweets)\n{% enddocs %}\n\n{% docs verb %}\nVerb corresponding to the action the user took. (e.g. shared, sent, taken)\n{% enddocs %}\n\n{% docs deleted_at %}\nDate time in UTC when a user deleted their post.\n{% enddocs %}\n\n{% docs _fivetran_deleted %}\nMarks rows that were deleted in the source table\n{% enddocs %}\n\n{% docs _fivetran_synced %}\n(UTC timestamp) keeps track of when each row was last successfully synced\n{% enddocs %}\n\n{% docs reportback %}\nWhether the post is a reportback \n{% enddocs %}\n\n{% docs active %}\nWhether the user is active \n{% enddocs %}\n\n{% docs anonymous %}\nWhether the user is anonymous when making the post \n{% enddocs %}\n\n{% docs callpower_campaign_id %}\nUnique ID corresponding to the Callpower campaign. Callpower allows users to record messages for their representatives.\n{% enddocs %}\n\n{% docs quiz %}\nWhether the post is a quiz \n{% enddocs %}\n\n{% docs action_type %}\nType of action the user took. (e.g. share-something, donate-something)\n{% enddocs %}\n\n{% docs online %}\nWhether the action is a online as opposed to IRL.\n{% enddocs %}\n\n{% docs time_commitment %}\nEstimated time required to do the action (e.g. 3.0+, <0.5)\n{% enddocs %}\n\n{% docs num_signups %}\nQuantity of campaign signups\n{% enddocs %}\n\n{% docs most_recent_signup %}\nTimestamp of the most recent signup in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs num_rbs %}\nQuantity of reportbacks for the user\n{% enddocs %}\n\n{% docs total_quantity %}\nTotal quantity of items in reportbacks\n{% enddocs %}\n\n{% docs most_recent_rb %}\nWhen the most recent reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs first_rb %}\nWhen the first reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs avg_time_betw_rbs %}\nCalculated average time between reportbacks.\n{% enddocs %}\n\n{% docs avg_days_next_action_after_rb %}\nCalculated average days until next action after reportback\n{% enddocs %}\n\n{% docs days_to_next_action_after_last_rb %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs most_recent_mam_action %}\nMost recent monthly active member qualifying action in UTC (eg. 2018-01-01 12:00:00).\n{% enddocs %}\n\n{% docs most_recent_email_open %}\nMost recent email open in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs most_recent_all_actions %}\nMost recent timestamp of any action in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs last_action_is_rb %}\nWhether the last action the user took was a reportback\n{% enddocs %}\n\n{% docs days_since_last_action %}\nDays since the user's last action\n{% enddocs %}\n\n{% docs time_to_first_rb %}\nHow much time after registering until the user's first reportback\n{% enddocs %}\n\n{% docs sms_unsubscribed_at %}\nTimestamp of when user unsubscribed from SMS messaging\n{% enddocs %}\n\n{% docs user_unsubscribed_at %}\nTimestamp of when user unsubscribed from email or sms\n{% enddocs %}\n\n{% docs voter_reg_acquisition %}\nWhether the user was an acquisition through voter registration efforts. \n{% enddocs %}\n\n{% docs last_logged_in %}\nDate time in UTC when user last logged in to Northstar\n{% enddocs %}\n\n{% docs last_accessed %}\nDate time in UTC when user last access the website\n{% enddocs %}\n\n{% docs last_messaged_at %}\nDate time in UTC when user was last sent a message via SMS or email\n{% enddocs %}\n\n{% docs facebook_id %}\nUser's facebook id\n{% enddocs %}\n\n{% docs mobile %}\nUsers's mobile phone number\n{% enddocs %}\n\n{% docs birthdate %}\nUser's birthdate\n{% enddocs %}\n\n{% docs first_name %}\nUser's first name\n{% enddocs %}\n\n{% docs last_name %}\nUser's last name\n{% enddocs %}\n\n{% docs voter_registration_status %}\nUser's registration status. (e.g. registration_complete, confirmed, uncertain) \n{% enddocs %}\n\n{% docs finish_with_state %}\nIf the registrant was eligible to use and passed through to complete their registration with their state\u2019s OVR system, it will be indicated in this field (direct quote from Rock-The-Vote documentation). Yes/No value in field.\n{% enddocs %}\n\n{% docs reportback_volume %}\nThis field returns 1 if non voter-reg action, since campaigns team only counts those a 1 reportback. If voter-reg action, we want to count quantity of post as number of registered voters.\n{% enddocs %}\n\n{% docs address_street_1 %}\nFirst line of user's street address\n{% enddocs %}\n\n{% docs address_street_2 %}\nSecond line of user's street address\n{% enddocs %}\n\n{% docs city %}\nUser's city\n{% enddocs %}\n\n{% docs state %}\nUser's state\n{% enddocs %}\n\n{% docs country %}\nUser's country\n{% enddocs %}\n\n{% docs language %}\nUser's language\n{% enddocs %}\n\n{% docs cio_status %}\nStatus of user from CIO. (e.g. customer_subscribed, customer_unsubscribed)\n{% enddocs %}\n\n{% docs cio_status_timestamp %}\nTimestamp when users's status was updated.\n{% enddocs %}\n\n{% docs sms_status %}\nCurrent SMS status. (e.g. undeliverable, unknown)\n{% enddocs %}\n\n{% docs source_detail %}\nDetails of the origin of the user. (e.g. tell_a_friend, other, opt_in_path/197981)\n{% enddocs %}\n\n{% docs badges %}\nWhether the user has any badges. \n{% enddocs %}\n\n{% docs refer_friends %}\nWhether the user is a part of the refer a friend campaign. \n{% enddocs %}\n\n{% docs subscribed_member %}\nWhether the user is subscribed. \n{% enddocs %}\n\n{% docs last_updated_at %}\nTimestamp when users's was updated.\n{% enddocs %}\n\n{% docs school_id %}\nUnique identifier for the user's school. This info comes from the school finder.\n{% enddocs %}\n\n{% docs newsletter_topic %}\nNewsletter topic. (e.g. community, lifestyle)\n{% enddocs %}\n\n{% docs user_agent %}\nFull user agent string for a user's browser (e.g. \"Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:24.0) Gecko/20100101 Firefox/24.0\")\n{% enddocs %}\n\n{% docs drupal_id %}\nOld Drupal user ID\n{% enddocs %}\n\n{% docs campaigns %}\nCampaigns a user is signed up for.\n{% enddocs %}\n\n{% docs audit %}\nA very useful field with data containing information about changes to a user, e.g. timestamps when the user subscribed and unsubscribed.\n{% enddocs %}\n\n{% docs voting_plan_status %}\nThe indication of the user's plan to vote, e.g. voting, not_voting, cant_vote\n{% enddocs %}\n\n{% docs voting_plan_time_of_day %}\nThe time of day when the user plans to vote, e.g morning, afternoon, evening\n{% enddocs %}\n\n{% docs voting_plan_method_of_transport %}\nHow the user plans to get to their polling place. e.g. walk, drive\n{% enddocs %}\n\n{% docs voting_plan_attending_with %}\nWith Whom the user plans to go voting, e.g. family, friends, alone\n{% enddocs %}\n\n{% docs feature_flags %}\nJSON containing info on features like badges and refer-a-friend.\n{% enddocs %}\n\n{% docs dbt_updated_at %}\nDBT snapshot table data. The updated_at timestamp of the source record when this snapshot row was inserted.\n{% enddocs %}\n\n{% docs dbt_scd_id %}\nDBT snapshot table data. A unique key generated for each snapshotted record.\n{% enddocs %}\n\n{% docs dbt_valid_from %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this snapshot row was first inserted\n{% enddocs %}\n\n{% docs dbt_valid_to %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this row row became invalidated.\n{% enddocs %}\n\n{% docs google_id %}\nUser's Google ID obtained from login.\n{% enddocs %}\n\n{% docs causes %}\nCauses in which a user is interested. e.g. animal welfare, education, mental_health\n{% enddocs %}\n\n{% docs email_subscription_status %}\nEmail subscription status of the user\n{% enddocs %}\n\n{% docs role %}\nUser's role, e.g. user, staff\n{% enddocs %}\n\n{% docs cio_backfilled %}\nWhether this user's data was backfilled from CIO\n{% enddocs %}\n\n{% docs addr_source %}\nWhere the user submitted their address, e.g. sms, GDPR\n{% enddocs %}\n\n{% docs email_subscription_topics %}\nEmail subscription topics correspond to categories in CIO in which the user is interested. e.g. lifestyle, community, scholarship\n{% enddocs %}\n\n{% docs sms_paused %}\nWhether we've paused sending sms messages to the user.\n{% enddocs %}\n\n\n\n\n", "name": "dbt_updated_at", "unique_id": "ds_dbt.dbt_updated_at", "block_contents": "DBT snapshot table data. The updated_at timestamp of the source record when this snapshot row was inserted."}, "ds_dbt.dbt_scd_id": {"root_path": "/Users/mrich/projects/quasar/quasar/dbt", "resource_type": "docs", "path": "schema.md", "original_file_path": "models/schema.md", "package_name": "ds_dbt", "file_contents": "\n{% docs click_id %}\nThis is a unique identifier for each click\n{% enddocs %}\n\n{% docs click_time %}\nTimestamp when user clicked.\n{% enddocs %}\n\n{% docs shortened %}\nShortened URL\n{% enddocs %}\n\n{% docs target_url %}\nURL where the user will be directed\n{% enddocs %}\n\n{% docs broadcast_id %}\nID of the broadcast that generated the shortened URL\n{% enddocs %}\n\n{% docs source %}\nSource of the URL (e.g. SMS, web), origin of the post (e.g. phoenix-web, phoenix-ashes, sms), or source where user was acquired. (e.g. sms, phoenix-next)\n{% enddocs %}\n\n{% docs interaction_type %}\nHow the user interacted with the link (e.g. preview, click)\n{% enddocs %}\n\n{% docs id %}\nUnique identifier for the post\n{% enddocs %}\n\n{% docs type %}\nType of post (e.g. photo)\n{% enddocs %}\n\n{% docs action %}\nPost action (e.g. DefendDreamers_Nov9_CongressCalls, GunViolence2018_Feb15_ParklandResponse)\n{% enddocs %}\n\n{% docs status %}\nPost status (e.g. accepted, rejected)\n{% enddocs %}\n\n{% docs quantity %}\nNumerical quantity of items specified in the call to action (e.g. 10, 200)\n{% enddocs %}\n\n{% docs source_bucket %}\nGrouping bucket for origin of the post (e.g. web, sms) \n{% enddocs %}\n\n{% docs created_at %}\nWhen the item was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs updated_at %}\nWhen the item was updated in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs text %}\nText of the post (e.g. \"Zoo animals and a super hero trying to help too!\") \n{% enddocs %}\n\n{% docs signup_id %}\nUnique identifier for the signup \n{% enddocs %}\n\n{% docs post_class %}\nClass of the signup (e.g. \"photo - default\", \"phone-call - DefendDreamers_Jan16_BothBodies\")\n{% enddocs %}\n\n{% docs is_accepted %}\nWhether the post has been accepted to be displayed to the public on the website\n{% enddocs %}\n\n{% docs action_id %}\nInternal identifier of the action \n{% enddocs %}\n\n{% docs location %}\nLocation where the action takes place (e.g. US-NY)\n{% enddocs %}\n\n{% docs postal_code %}\nPostal code where the action takes place\n{% enddocs %}\n\n{% docs is_reportback %}\nWhether the post is a reportback. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs civic_action %}\nWhether the post is a Civic Action. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs scholarship_entry %}\nWhether the post is a Scholarship Entry. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs why_participated %}\nWhy the user participated in this action. Entered by the user.\n{% enddocs %}\n\n{% docs details %}\nDetails about the post. Contains contentfulId and other information (e.g. {\"campaignContentfulId\":\"6ATBgGEQEeJoIcxs1qbwaC\"})\n{% enddocs %}\n\n{% docs email %}\nEmail address of the user.\n{% enddocs %}\n\n{% docs source_details %}\nDetails about the source of the item. This is sometimes represented as a JSON object, and for other tables like Turbovote its represented as a string. (e.g. \"{\"contentful_id\":\"3CTLlXfbwtz1FOMpl31SKV\",\"utm_source\":\"scholarship_listing\",\"utm_medium\":\"referral\",\"utm_campaign\":\"fastweb_2019_08\"}\", newsletter_456)\n{% enddocs %}\n\n{% docs campaign_id %}\nThis is a unique identifier for the campaign\n{% enddocs %}\n\n{% docs campaign_run_id %}\nUnique identifier for the campaign run\n{% enddocs %}\n\n{% docs campaign_name %}\nName of the campaign\n{% enddocs %}\n\n{% docs campaign_cause %}\nCampaign cause (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_run_start_date %}\nStart date of the campaign run\n{% enddocs %}\n\n{% docs campaign_run_end_date %}\nEnd date of the campaign run\n{% enddocs %}\n\n{% docs campaign_created_date %}\nWhen the campaign was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs campaign_node_id %}\nInternal unique node id for the campaign\n{% enddocs %}\n\n{% docs campaign_node_id_title %}\nCampaign title\n{% enddocs %}\n\n{% docs campaign_run_id_title %}\nTitle of the campaign run\n{% enddocs %}\n\n{% docs campaign_action_type %}\nCampaign action type (eg. Make Something, Share Something)\n{% enddocs %}\n\n{% docs campaign_cause_type %}\nCampaign cause type (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_noun %}\nNoun applicable to the user's action\n{% enddocs %}\n\n{% docs campaign_verb %}\nVerb describing the action the user should take\n{% enddocs %}\n\n{% docs campaign_cta %}\nCampaign's call to action\n{% enddocs %}\n\n{% docs campaign_language %}\n\"Language in which the campaign is available\"\n{% enddocs %}\n\n{% docs agent_id %}\nIf set, the content type of the picture the member is sending us. Exp. image/png.\n{% enddocs %}\n\n{% docs attachment_content_type %}\nIf set, the handle of the Front agent this outbound support message is from.\n{% enddocs %}\n\n{% docs topic %}\nHolds a reference to the **last** campaign topic the member's conversation was in. This is useful to allow members to talk to Gambit and get quick responses (through Rivescript), without Gambit completely forgetting what state the member's interaction with a campaign topic was in.\n{% enddocs %}\n\n{% docs action_serial_id %}\nSerial id for the user's action. Depends on the source of the action. May be the bertly click id, sms message id, etc.\n{% enddocs %}\n\n{% docs channel %}\nChannel for the user's action. Depends on the source of the action. (e.g. web, sms)\n{% enddocs %}\n\n{% docs first_action_month %}\nMonth during which the user took their first action. \n{% enddocs %}\n\n{% docs event_id %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs event_source %}\nApplication source for event (eg. Phoenix, Northstar)\n{% enddocs %}\n\n{% docs event_datetime %}\nWhen the event occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs event_name %}\nName of the event (eg. northstar_submitted_register, https://docs.google.com/spreadsheets/d/1lm-fGrIm85nUTxSojqyCt_Ehmm1zEbViFhKpxcJiz1A/edit#gid=406441516)\n{% enddocs %}\n\n{% docs event_type %}\nType of event (pv = 'Page View', se = 'Structured Event')\n{% enddocs %}\n\n{% docs host %}\nURL host where event occurred (eg. www.dosomething.org or identity.dosomething.org)\n{% enddocs %}\n\n{% docs path %}\nURL path event occurred at (eg. /login or /us/campaigns/huddle-for-heroes)\n{% enddocs %}\n\n{% docs query_parameters %}\nOptional query parameters for the request (eg. query=huddle)\n{% enddocs %}\n\n{% docs se_category %}\nCategory of event (eg. focused_field, authentication) - Custom structured event\n{% enddocs %}\n\n{% docs se_action %}\nAction performed / event name (eg. form_submitted, action_failed) - Custom structured event\n{% enddocs %}\n\n{% docs se_label %}\nThe object of the action (eg. first_name, register, voter_reg_status) - Custom structured event\n{% enddocs %}\n\n{% docs session_id %}\nUnique identifier of the user's session\n{% enddocs %}\n\n{% docs session_counter %}\nHow many sessions a user has started\n{% enddocs %}\n\n{% docs browser_size %}\nWhich type of browser a user is using (eg. Mobile, Desktop)\n{% enddocs %}\n\n{% docs northstar_id %}\nThe Northstar ID of the user who generated the event\n{% enddocs %}\n\n{% docs device_id %}\nID of the device used\n{% enddocs %}\n\n{% docs referrer_host %}\nURL host of the referring site (eg. google.com)\n{% enddocs %}\n\n{% docs referrer_path %}\nURL path from referring site (eg. /10-stats-on-teen-drug-and-alcohol-use/)\n{% enddocs %}\n\n{% docs referrer_source %}\nReferrer source name (eg. Google, Facebook)\n{% enddocs %}\n\n{% docs utm_source %}\nTracks where the traffic is coming from. (eg. scholarship_listing, Facebook)\n{% enddocs %}\n\n{% docs utm_medium %}\nHow the traffic got to the platform (eg. referral, CPC)\n{% enddocs %}\n\n{% docs utm_campaign %}\nTracks which campaign the traffic was generated by. Shows up in Google Analytics as Campaign Name (eg. editorial_newsletter)\n{% enddocs %}\n\n{% docs url %}\nURL of campaign (eg. https://dosome.click/nyn5m7)\n{% enddocs %}\n\n{% docs modal_type %}\nNULL or SURVEY_MODAL\n{% enddocs %}\n\n{% docs landing_datetime %}\nWhen the session started in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs ending_datetime %}\nWhen the session ended in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs session_duration_seconds %}\nSession duration in seconds\n{% enddocs %}\n\n{% docs num_pages_views %}\nNumber of pages viewed in session\n{% enddocs %}\n\n{% docs landing_page %}\nFirst page the user viewed in the session (eg. /us/facts/11-facts-about-bp-oil-spill)\n{% enddocs %}\n\n{% docs exit_page %}\n\"Which page the user ended or exited their session from (eg. /us/campaigns/green-your-getaway)\"\n{% enddocs %}\n\n{% docs days_since_last_session %}\n\"Days since their last session.\"\n{% enddocs %}\n\n{% docs post_type %}\nType of post, (e.g. photo, voter-reg)\n{% enddocs %}\n\n{% docs noun %}\nNoun that corresponds to the item in the call to action that was delivered. (e.g. drawings, tweets)\n{% enddocs %}\n\n{% docs verb %}\nVerb corresponding to the action the user took. (e.g. shared, sent, taken)\n{% enddocs %}\n\n{% docs deleted_at %}\nDate time in UTC when a user deleted their post.\n{% enddocs %}\n\n{% docs _fivetran_deleted %}\nMarks rows that were deleted in the source table\n{% enddocs %}\n\n{% docs _fivetran_synced %}\n(UTC timestamp) keeps track of when each row was last successfully synced\n{% enddocs %}\n\n{% docs reportback %}\nWhether the post is a reportback \n{% enddocs %}\n\n{% docs active %}\nWhether the user is active \n{% enddocs %}\n\n{% docs anonymous %}\nWhether the user is anonymous when making the post \n{% enddocs %}\n\n{% docs callpower_campaign_id %}\nUnique ID corresponding to the Callpower campaign. Callpower allows users to record messages for their representatives.\n{% enddocs %}\n\n{% docs quiz %}\nWhether the post is a quiz \n{% enddocs %}\n\n{% docs action_type %}\nType of action the user took. (e.g. share-something, donate-something)\n{% enddocs %}\n\n{% docs online %}\nWhether the action is a online as opposed to IRL.\n{% enddocs %}\n\n{% docs time_commitment %}\nEstimated time required to do the action (e.g. 3.0+, <0.5)\n{% enddocs %}\n\n{% docs num_signups %}\nQuantity of campaign signups\n{% enddocs %}\n\n{% docs most_recent_signup %}\nTimestamp of the most recent signup in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs num_rbs %}\nQuantity of reportbacks for the user\n{% enddocs %}\n\n{% docs total_quantity %}\nTotal quantity of items in reportbacks\n{% enddocs %}\n\n{% docs most_recent_rb %}\nWhen the most recent reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs first_rb %}\nWhen the first reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs avg_time_betw_rbs %}\nCalculated average time between reportbacks.\n{% enddocs %}\n\n{% docs avg_days_next_action_after_rb %}\nCalculated average days until next action after reportback\n{% enddocs %}\n\n{% docs days_to_next_action_after_last_rb %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs most_recent_mam_action %}\nMost recent monthly active member qualifying action in UTC (eg. 2018-01-01 12:00:00).\n{% enddocs %}\n\n{% docs most_recent_email_open %}\nMost recent email open in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs most_recent_all_actions %}\nMost recent timestamp of any action in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs last_action_is_rb %}\nWhether the last action the user took was a reportback\n{% enddocs %}\n\n{% docs days_since_last_action %}\nDays since the user's last action\n{% enddocs %}\n\n{% docs time_to_first_rb %}\nHow much time after registering until the user's first reportback\n{% enddocs %}\n\n{% docs sms_unsubscribed_at %}\nTimestamp of when user unsubscribed from SMS messaging\n{% enddocs %}\n\n{% docs user_unsubscribed_at %}\nTimestamp of when user unsubscribed from email or sms\n{% enddocs %}\n\n{% docs voter_reg_acquisition %}\nWhether the user was an acquisition through voter registration efforts. \n{% enddocs %}\n\n{% docs last_logged_in %}\nDate time in UTC when user last logged in to Northstar\n{% enddocs %}\n\n{% docs last_accessed %}\nDate time in UTC when user last access the website\n{% enddocs %}\n\n{% docs last_messaged_at %}\nDate time in UTC when user was last sent a message via SMS or email\n{% enddocs %}\n\n{% docs facebook_id %}\nUser's facebook id\n{% enddocs %}\n\n{% docs mobile %}\nUsers's mobile phone number\n{% enddocs %}\n\n{% docs birthdate %}\nUser's birthdate\n{% enddocs %}\n\n{% docs first_name %}\nUser's first name\n{% enddocs %}\n\n{% docs last_name %}\nUser's last name\n{% enddocs %}\n\n{% docs voter_registration_status %}\nUser's registration status. (e.g. registration_complete, confirmed, uncertain) \n{% enddocs %}\n\n{% docs finish_with_state %}\nIf the registrant was eligible to use and passed through to complete their registration with their state\u2019s OVR system, it will be indicated in this field (direct quote from Rock-The-Vote documentation). Yes/No value in field.\n{% enddocs %}\n\n{% docs reportback_volume %}\nThis field returns 1 if non voter-reg action, since campaigns team only counts those a 1 reportback. If voter-reg action, we want to count quantity of post as number of registered voters.\n{% enddocs %}\n\n{% docs address_street_1 %}\nFirst line of user's street address\n{% enddocs %}\n\n{% docs address_street_2 %}\nSecond line of user's street address\n{% enddocs %}\n\n{% docs city %}\nUser's city\n{% enddocs %}\n\n{% docs state %}\nUser's state\n{% enddocs %}\n\n{% docs country %}\nUser's country\n{% enddocs %}\n\n{% docs language %}\nUser's language\n{% enddocs %}\n\n{% docs cio_status %}\nStatus of user from CIO. (e.g. customer_subscribed, customer_unsubscribed)\n{% enddocs %}\n\n{% docs cio_status_timestamp %}\nTimestamp when users's status was updated.\n{% enddocs %}\n\n{% docs sms_status %}\nCurrent SMS status. (e.g. undeliverable, unknown)\n{% enddocs %}\n\n{% docs source_detail %}\nDetails of the origin of the user. (e.g. tell_a_friend, other, opt_in_path/197981)\n{% enddocs %}\n\n{% docs badges %}\nWhether the user has any badges. \n{% enddocs %}\n\n{% docs refer_friends %}\nWhether the user is a part of the refer a friend campaign. \n{% enddocs %}\n\n{% docs subscribed_member %}\nWhether the user is subscribed. \n{% enddocs %}\n\n{% docs last_updated_at %}\nTimestamp when users's was updated.\n{% enddocs %}\n\n{% docs school_id %}\nUnique identifier for the user's school. This info comes from the school finder.\n{% enddocs %}\n\n{% docs newsletter_topic %}\nNewsletter topic. (e.g. community, lifestyle)\n{% enddocs %}\n\n{% docs user_agent %}\nFull user agent string for a user's browser (e.g. \"Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:24.0) Gecko/20100101 Firefox/24.0\")\n{% enddocs %}\n\n{% docs drupal_id %}\nOld Drupal user ID\n{% enddocs %}\n\n{% docs campaigns %}\nCampaigns a user is signed up for.\n{% enddocs %}\n\n{% docs audit %}\nA very useful field with data containing information about changes to a user, e.g. timestamps when the user subscribed and unsubscribed.\n{% enddocs %}\n\n{% docs voting_plan_status %}\nThe indication of the user's plan to vote, e.g. voting, not_voting, cant_vote\n{% enddocs %}\n\n{% docs voting_plan_time_of_day %}\nThe time of day when the user plans to vote, e.g morning, afternoon, evening\n{% enddocs %}\n\n{% docs voting_plan_method_of_transport %}\nHow the user plans to get to their polling place. e.g. walk, drive\n{% enddocs %}\n\n{% docs voting_plan_attending_with %}\nWith Whom the user plans to go voting, e.g. family, friends, alone\n{% enddocs %}\n\n{% docs feature_flags %}\nJSON containing info on features like badges and refer-a-friend.\n{% enddocs %}\n\n{% docs dbt_updated_at %}\nDBT snapshot table data. The updated_at timestamp of the source record when this snapshot row was inserted.\n{% enddocs %}\n\n{% docs dbt_scd_id %}\nDBT snapshot table data. A unique key generated for each snapshotted record.\n{% enddocs %}\n\n{% docs dbt_valid_from %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this snapshot row was first inserted\n{% enddocs %}\n\n{% docs dbt_valid_to %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this row row became invalidated.\n{% enddocs %}\n\n{% docs google_id %}\nUser's Google ID obtained from login.\n{% enddocs %}\n\n{% docs causes %}\nCauses in which a user is interested. e.g. animal welfare, education, mental_health\n{% enddocs %}\n\n{% docs email_subscription_status %}\nEmail subscription status of the user\n{% enddocs %}\n\n{% docs role %}\nUser's role, e.g. user, staff\n{% enddocs %}\n\n{% docs cio_backfilled %}\nWhether this user's data was backfilled from CIO\n{% enddocs %}\n\n{% docs addr_source %}\nWhere the user submitted their address, e.g. sms, GDPR\n{% enddocs %}\n\n{% docs email_subscription_topics %}\nEmail subscription topics correspond to categories in CIO in which the user is interested. e.g. lifestyle, community, scholarship\n{% enddocs %}\n\n{% docs sms_paused %}\nWhether we've paused sending sms messages to the user.\n{% enddocs %}\n\n\n\n\n", "name": "dbt_scd_id", "unique_id": "ds_dbt.dbt_scd_id", "block_contents": "DBT snapshot table data. A unique key generated for each snapshotted record."}, "ds_dbt.dbt_valid_from": {"root_path": "/Users/mrich/projects/quasar/quasar/dbt", "resource_type": "docs", "path": "schema.md", "original_file_path": "models/schema.md", "package_name": "ds_dbt", "file_contents": "\n{% docs click_id %}\nThis is a unique identifier for each click\n{% enddocs %}\n\n{% docs click_time %}\nTimestamp when user clicked.\n{% enddocs %}\n\n{% docs shortened %}\nShortened URL\n{% enddocs %}\n\n{% docs target_url %}\nURL where the user will be directed\n{% enddocs %}\n\n{% docs broadcast_id %}\nID of the broadcast that generated the shortened URL\n{% enddocs %}\n\n{% docs source %}\nSource of the URL (e.g. SMS, web), origin of the post (e.g. phoenix-web, phoenix-ashes, sms), or source where user was acquired. (e.g. sms, phoenix-next)\n{% enddocs %}\n\n{% docs interaction_type %}\nHow the user interacted with the link (e.g. preview, click)\n{% enddocs %}\n\n{% docs id %}\nUnique identifier for the post\n{% enddocs %}\n\n{% docs type %}\nType of post (e.g. photo)\n{% enddocs %}\n\n{% docs action %}\nPost action (e.g. DefendDreamers_Nov9_CongressCalls, GunViolence2018_Feb15_ParklandResponse)\n{% enddocs %}\n\n{% docs status %}\nPost status (e.g. accepted, rejected)\n{% enddocs %}\n\n{% docs quantity %}\nNumerical quantity of items specified in the call to action (e.g. 10, 200)\n{% enddocs %}\n\n{% docs source_bucket %}\nGrouping bucket for origin of the post (e.g. web, sms) \n{% enddocs %}\n\n{% docs created_at %}\nWhen the item was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs updated_at %}\nWhen the item was updated in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs text %}\nText of the post (e.g. \"Zoo animals and a super hero trying to help too!\") \n{% enddocs %}\n\n{% docs signup_id %}\nUnique identifier for the signup \n{% enddocs %}\n\n{% docs post_class %}\nClass of the signup (e.g. \"photo - default\", \"phone-call - DefendDreamers_Jan16_BothBodies\")\n{% enddocs %}\n\n{% docs is_accepted %}\nWhether the post has been accepted to be displayed to the public on the website\n{% enddocs %}\n\n{% docs action_id %}\nInternal identifier of the action \n{% enddocs %}\n\n{% docs location %}\nLocation where the action takes place (e.g. US-NY)\n{% enddocs %}\n\n{% docs postal_code %}\nPostal code where the action takes place\n{% enddocs %}\n\n{% docs is_reportback %}\nWhether the post is a reportback. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs civic_action %}\nWhether the post is a Civic Action. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs scholarship_entry %}\nWhether the post is a Scholarship Entry. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs why_participated %}\nWhy the user participated in this action. Entered by the user.\n{% enddocs %}\n\n{% docs details %}\nDetails about the post. Contains contentfulId and other information (e.g. {\"campaignContentfulId\":\"6ATBgGEQEeJoIcxs1qbwaC\"})\n{% enddocs %}\n\n{% docs email %}\nEmail address of the user.\n{% enddocs %}\n\n{% docs source_details %}\nDetails about the source of the item. This is sometimes represented as a JSON object, and for other tables like Turbovote its represented as a string. (e.g. \"{\"contentful_id\":\"3CTLlXfbwtz1FOMpl31SKV\",\"utm_source\":\"scholarship_listing\",\"utm_medium\":\"referral\",\"utm_campaign\":\"fastweb_2019_08\"}\", newsletter_456)\n{% enddocs %}\n\n{% docs campaign_id %}\nThis is a unique identifier for the campaign\n{% enddocs %}\n\n{% docs campaign_run_id %}\nUnique identifier for the campaign run\n{% enddocs %}\n\n{% docs campaign_name %}\nName of the campaign\n{% enddocs %}\n\n{% docs campaign_cause %}\nCampaign cause (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_run_start_date %}\nStart date of the campaign run\n{% enddocs %}\n\n{% docs campaign_run_end_date %}\nEnd date of the campaign run\n{% enddocs %}\n\n{% docs campaign_created_date %}\nWhen the campaign was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs campaign_node_id %}\nInternal unique node id for the campaign\n{% enddocs %}\n\n{% docs campaign_node_id_title %}\nCampaign title\n{% enddocs %}\n\n{% docs campaign_run_id_title %}\nTitle of the campaign run\n{% enddocs %}\n\n{% docs campaign_action_type %}\nCampaign action type (eg. Make Something, Share Something)\n{% enddocs %}\n\n{% docs campaign_cause_type %}\nCampaign cause type (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_noun %}\nNoun applicable to the user's action\n{% enddocs %}\n\n{% docs campaign_verb %}\nVerb describing the action the user should take\n{% enddocs %}\n\n{% docs campaign_cta %}\nCampaign's call to action\n{% enddocs %}\n\n{% docs campaign_language %}\n\"Language in which the campaign is available\"\n{% enddocs %}\n\n{% docs agent_id %}\nIf set, the content type of the picture the member is sending us. Exp. image/png.\n{% enddocs %}\n\n{% docs attachment_content_type %}\nIf set, the handle of the Front agent this outbound support message is from.\n{% enddocs %}\n\n{% docs topic %}\nHolds a reference to the **last** campaign topic the member's conversation was in. This is useful to allow members to talk to Gambit and get quick responses (through Rivescript), without Gambit completely forgetting what state the member's interaction with a campaign topic was in.\n{% enddocs %}\n\n{% docs action_serial_id %}\nSerial id for the user's action. Depends on the source of the action. May be the bertly click id, sms message id, etc.\n{% enddocs %}\n\n{% docs channel %}\nChannel for the user's action. Depends on the source of the action. (e.g. web, sms)\n{% enddocs %}\n\n{% docs first_action_month %}\nMonth during which the user took their first action. \n{% enddocs %}\n\n{% docs event_id %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs event_source %}\nApplication source for event (eg. Phoenix, Northstar)\n{% enddocs %}\n\n{% docs event_datetime %}\nWhen the event occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs event_name %}\nName of the event (eg. northstar_submitted_register, https://docs.google.com/spreadsheets/d/1lm-fGrIm85nUTxSojqyCt_Ehmm1zEbViFhKpxcJiz1A/edit#gid=406441516)\n{% enddocs %}\n\n{% docs event_type %}\nType of event (pv = 'Page View', se = 'Structured Event')\n{% enddocs %}\n\n{% docs host %}\nURL host where event occurred (eg. www.dosomething.org or identity.dosomething.org)\n{% enddocs %}\n\n{% docs path %}\nURL path event occurred at (eg. /login or /us/campaigns/huddle-for-heroes)\n{% enddocs %}\n\n{% docs query_parameters %}\nOptional query parameters for the request (eg. query=huddle)\n{% enddocs %}\n\n{% docs se_category %}\nCategory of event (eg. focused_field, authentication) - Custom structured event\n{% enddocs %}\n\n{% docs se_action %}\nAction performed / event name (eg. form_submitted, action_failed) - Custom structured event\n{% enddocs %}\n\n{% docs se_label %}\nThe object of the action (eg. first_name, register, voter_reg_status) - Custom structured event\n{% enddocs %}\n\n{% docs session_id %}\nUnique identifier of the user's session\n{% enddocs %}\n\n{% docs session_counter %}\nHow many sessions a user has started\n{% enddocs %}\n\n{% docs browser_size %}\nWhich type of browser a user is using (eg. Mobile, Desktop)\n{% enddocs %}\n\n{% docs northstar_id %}\nThe Northstar ID of the user who generated the event\n{% enddocs %}\n\n{% docs device_id %}\nID of the device used\n{% enddocs %}\n\n{% docs referrer_host %}\nURL host of the referring site (eg. google.com)\n{% enddocs %}\n\n{% docs referrer_path %}\nURL path from referring site (eg. /10-stats-on-teen-drug-and-alcohol-use/)\n{% enddocs %}\n\n{% docs referrer_source %}\nReferrer source name (eg. Google, Facebook)\n{% enddocs %}\n\n{% docs utm_source %}\nTracks where the traffic is coming from. (eg. scholarship_listing, Facebook)\n{% enddocs %}\n\n{% docs utm_medium %}\nHow the traffic got to the platform (eg. referral, CPC)\n{% enddocs %}\n\n{% docs utm_campaign %}\nTracks which campaign the traffic was generated by. Shows up in Google Analytics as Campaign Name (eg. editorial_newsletter)\n{% enddocs %}\n\n{% docs url %}\nURL of campaign (eg. https://dosome.click/nyn5m7)\n{% enddocs %}\n\n{% docs modal_type %}\nNULL or SURVEY_MODAL\n{% enddocs %}\n\n{% docs landing_datetime %}\nWhen the session started in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs ending_datetime %}\nWhen the session ended in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs session_duration_seconds %}\nSession duration in seconds\n{% enddocs %}\n\n{% docs num_pages_views %}\nNumber of pages viewed in session\n{% enddocs %}\n\n{% docs landing_page %}\nFirst page the user viewed in the session (eg. /us/facts/11-facts-about-bp-oil-spill)\n{% enddocs %}\n\n{% docs exit_page %}\n\"Which page the user ended or exited their session from (eg. /us/campaigns/green-your-getaway)\"\n{% enddocs %}\n\n{% docs days_since_last_session %}\n\"Days since their last session.\"\n{% enddocs %}\n\n{% docs post_type %}\nType of post, (e.g. photo, voter-reg)\n{% enddocs %}\n\n{% docs noun %}\nNoun that corresponds to the item in the call to action that was delivered. (e.g. drawings, tweets)\n{% enddocs %}\n\n{% docs verb %}\nVerb corresponding to the action the user took. (e.g. shared, sent, taken)\n{% enddocs %}\n\n{% docs deleted_at %}\nDate time in UTC when a user deleted their post.\n{% enddocs %}\n\n{% docs _fivetran_deleted %}\nMarks rows that were deleted in the source table\n{% enddocs %}\n\n{% docs _fivetran_synced %}\n(UTC timestamp) keeps track of when each row was last successfully synced\n{% enddocs %}\n\n{% docs reportback %}\nWhether the post is a reportback \n{% enddocs %}\n\n{% docs active %}\nWhether the user is active \n{% enddocs %}\n\n{% docs anonymous %}\nWhether the user is anonymous when making the post \n{% enddocs %}\n\n{% docs callpower_campaign_id %}\nUnique ID corresponding to the Callpower campaign. Callpower allows users to record messages for their representatives.\n{% enddocs %}\n\n{% docs quiz %}\nWhether the post is a quiz \n{% enddocs %}\n\n{% docs action_type %}\nType of action the user took. (e.g. share-something, donate-something)\n{% enddocs %}\n\n{% docs online %}\nWhether the action is a online as opposed to IRL.\n{% enddocs %}\n\n{% docs time_commitment %}\nEstimated time required to do the action (e.g. 3.0+, <0.5)\n{% enddocs %}\n\n{% docs num_signups %}\nQuantity of campaign signups\n{% enddocs %}\n\n{% docs most_recent_signup %}\nTimestamp of the most recent signup in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs num_rbs %}\nQuantity of reportbacks for the user\n{% enddocs %}\n\n{% docs total_quantity %}\nTotal quantity of items in reportbacks\n{% enddocs %}\n\n{% docs most_recent_rb %}\nWhen the most recent reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs first_rb %}\nWhen the first reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs avg_time_betw_rbs %}\nCalculated average time between reportbacks.\n{% enddocs %}\n\n{% docs avg_days_next_action_after_rb %}\nCalculated average days until next action after reportback\n{% enddocs %}\n\n{% docs days_to_next_action_after_last_rb %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs most_recent_mam_action %}\nMost recent monthly active member qualifying action in UTC (eg. 2018-01-01 12:00:00).\n{% enddocs %}\n\n{% docs most_recent_email_open %}\nMost recent email open in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs most_recent_all_actions %}\nMost recent timestamp of any action in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs last_action_is_rb %}\nWhether the last action the user took was a reportback\n{% enddocs %}\n\n{% docs days_since_last_action %}\nDays since the user's last action\n{% enddocs %}\n\n{% docs time_to_first_rb %}\nHow much time after registering until the user's first reportback\n{% enddocs %}\n\n{% docs sms_unsubscribed_at %}\nTimestamp of when user unsubscribed from SMS messaging\n{% enddocs %}\n\n{% docs user_unsubscribed_at %}\nTimestamp of when user unsubscribed from email or sms\n{% enddocs %}\n\n{% docs voter_reg_acquisition %}\nWhether the user was an acquisition through voter registration efforts. \n{% enddocs %}\n\n{% docs last_logged_in %}\nDate time in UTC when user last logged in to Northstar\n{% enddocs %}\n\n{% docs last_accessed %}\nDate time in UTC when user last access the website\n{% enddocs %}\n\n{% docs last_messaged_at %}\nDate time in UTC when user was last sent a message via SMS or email\n{% enddocs %}\n\n{% docs facebook_id %}\nUser's facebook id\n{% enddocs %}\n\n{% docs mobile %}\nUsers's mobile phone number\n{% enddocs %}\n\n{% docs birthdate %}\nUser's birthdate\n{% enddocs %}\n\n{% docs first_name %}\nUser's first name\n{% enddocs %}\n\n{% docs last_name %}\nUser's last name\n{% enddocs %}\n\n{% docs voter_registration_status %}\nUser's registration status. (e.g. registration_complete, confirmed, uncertain) \n{% enddocs %}\n\n{% docs finish_with_state %}\nIf the registrant was eligible to use and passed through to complete their registration with their state\u2019s OVR system, it will be indicated in this field (direct quote from Rock-The-Vote documentation). Yes/No value in field.\n{% enddocs %}\n\n{% docs reportback_volume %}\nThis field returns 1 if non voter-reg action, since campaigns team only counts those a 1 reportback. If voter-reg action, we want to count quantity of post as number of registered voters.\n{% enddocs %}\n\n{% docs address_street_1 %}\nFirst line of user's street address\n{% enddocs %}\n\n{% docs address_street_2 %}\nSecond line of user's street address\n{% enddocs %}\n\n{% docs city %}\nUser's city\n{% enddocs %}\n\n{% docs state %}\nUser's state\n{% enddocs %}\n\n{% docs country %}\nUser's country\n{% enddocs %}\n\n{% docs language %}\nUser's language\n{% enddocs %}\n\n{% docs cio_status %}\nStatus of user from CIO. (e.g. customer_subscribed, customer_unsubscribed)\n{% enddocs %}\n\n{% docs cio_status_timestamp %}\nTimestamp when users's status was updated.\n{% enddocs %}\n\n{% docs sms_status %}\nCurrent SMS status. (e.g. undeliverable, unknown)\n{% enddocs %}\n\n{% docs source_detail %}\nDetails of the origin of the user. (e.g. tell_a_friend, other, opt_in_path/197981)\n{% enddocs %}\n\n{% docs badges %}\nWhether the user has any badges. \n{% enddocs %}\n\n{% docs refer_friends %}\nWhether the user is a part of the refer a friend campaign. \n{% enddocs %}\n\n{% docs subscribed_member %}\nWhether the user is subscribed. \n{% enddocs %}\n\n{% docs last_updated_at %}\nTimestamp when users's was updated.\n{% enddocs %}\n\n{% docs school_id %}\nUnique identifier for the user's school. This info comes from the school finder.\n{% enddocs %}\n\n{% docs newsletter_topic %}\nNewsletter topic. (e.g. community, lifestyle)\n{% enddocs %}\n\n{% docs user_agent %}\nFull user agent string for a user's browser (e.g. \"Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:24.0) Gecko/20100101 Firefox/24.0\")\n{% enddocs %}\n\n{% docs drupal_id %}\nOld Drupal user ID\n{% enddocs %}\n\n{% docs campaigns %}\nCampaigns a user is signed up for.\n{% enddocs %}\n\n{% docs audit %}\nA very useful field with data containing information about changes to a user, e.g. timestamps when the user subscribed and unsubscribed.\n{% enddocs %}\n\n{% docs voting_plan_status %}\nThe indication of the user's plan to vote, e.g. voting, not_voting, cant_vote\n{% enddocs %}\n\n{% docs voting_plan_time_of_day %}\nThe time of day when the user plans to vote, e.g morning, afternoon, evening\n{% enddocs %}\n\n{% docs voting_plan_method_of_transport %}\nHow the user plans to get to their polling place. e.g. walk, drive\n{% enddocs %}\n\n{% docs voting_plan_attending_with %}\nWith Whom the user plans to go voting, e.g. family, friends, alone\n{% enddocs %}\n\n{% docs feature_flags %}\nJSON containing info on features like badges and refer-a-friend.\n{% enddocs %}\n\n{% docs dbt_updated_at %}\nDBT snapshot table data. The updated_at timestamp of the source record when this snapshot row was inserted.\n{% enddocs %}\n\n{% docs dbt_scd_id %}\nDBT snapshot table data. A unique key generated for each snapshotted record.\n{% enddocs %}\n\n{% docs dbt_valid_from %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this snapshot row was first inserted\n{% enddocs %}\n\n{% docs dbt_valid_to %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this row row became invalidated.\n{% enddocs %}\n\n{% docs google_id %}\nUser's Google ID obtained from login.\n{% enddocs %}\n\n{% docs causes %}\nCauses in which a user is interested. e.g. animal welfare, education, mental_health\n{% enddocs %}\n\n{% docs email_subscription_status %}\nEmail subscription status of the user\n{% enddocs %}\n\n{% docs role %}\nUser's role, e.g. user, staff\n{% enddocs %}\n\n{% docs cio_backfilled %}\nWhether this user's data was backfilled from CIO\n{% enddocs %}\n\n{% docs addr_source %}\nWhere the user submitted their address, e.g. sms, GDPR\n{% enddocs %}\n\n{% docs email_subscription_topics %}\nEmail subscription topics correspond to categories in CIO in which the user is interested. e.g. lifestyle, community, scholarship\n{% enddocs %}\n\n{% docs sms_paused %}\nWhether we've paused sending sms messages to the user.\n{% enddocs %}\n\n\n\n\n", "name": "dbt_valid_from", "unique_id": "ds_dbt.dbt_valid_from", "block_contents": "DBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this snapshot row was first inserted"}, "ds_dbt.dbt_valid_to": {"root_path": "/Users/mrich/projects/quasar/quasar/dbt", "resource_type": "docs", "path": "schema.md", "original_file_path": "models/schema.md", "package_name": "ds_dbt", "file_contents": "\n{% docs click_id %}\nThis is a unique identifier for each click\n{% enddocs %}\n\n{% docs click_time %}\nTimestamp when user clicked.\n{% enddocs %}\n\n{% docs shortened %}\nShortened URL\n{% enddocs %}\n\n{% docs target_url %}\nURL where the user will be directed\n{% enddocs %}\n\n{% docs broadcast_id %}\nID of the broadcast that generated the shortened URL\n{% enddocs %}\n\n{% docs source %}\nSource of the URL (e.g. SMS, web), origin of the post (e.g. phoenix-web, phoenix-ashes, sms), or source where user was acquired. (e.g. sms, phoenix-next)\n{% enddocs %}\n\n{% docs interaction_type %}\nHow the user interacted with the link (e.g. preview, click)\n{% enddocs %}\n\n{% docs id %}\nUnique identifier for the post\n{% enddocs %}\n\n{% docs type %}\nType of post (e.g. photo)\n{% enddocs %}\n\n{% docs action %}\nPost action (e.g. DefendDreamers_Nov9_CongressCalls, GunViolence2018_Feb15_ParklandResponse)\n{% enddocs %}\n\n{% docs status %}\nPost status (e.g. accepted, rejected)\n{% enddocs %}\n\n{% docs quantity %}\nNumerical quantity of items specified in the call to action (e.g. 10, 200)\n{% enddocs %}\n\n{% docs source_bucket %}\nGrouping bucket for origin of the post (e.g. web, sms) \n{% enddocs %}\n\n{% docs created_at %}\nWhen the item was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs updated_at %}\nWhen the item was updated in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs text %}\nText of the post (e.g. \"Zoo animals and a super hero trying to help too!\") \n{% enddocs %}\n\n{% docs signup_id %}\nUnique identifier for the signup \n{% enddocs %}\n\n{% docs post_class %}\nClass of the signup (e.g. \"photo - default\", \"phone-call - DefendDreamers_Jan16_BothBodies\")\n{% enddocs %}\n\n{% docs is_accepted %}\nWhether the post has been accepted to be displayed to the public on the website\n{% enddocs %}\n\n{% docs action_id %}\nInternal identifier of the action \n{% enddocs %}\n\n{% docs location %}\nLocation where the action takes place (e.g. US-NY)\n{% enddocs %}\n\n{% docs postal_code %}\nPostal code where the action takes place\n{% enddocs %}\n\n{% docs is_reportback %}\nWhether the post is a reportback. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs civic_action %}\nWhether the post is a Civic Action. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs scholarship_entry %}\nWhether the post is a Scholarship Entry. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs why_participated %}\nWhy the user participated in this action. Entered by the user.\n{% enddocs %}\n\n{% docs details %}\nDetails about the post. Contains contentfulId and other information (e.g. {\"campaignContentfulId\":\"6ATBgGEQEeJoIcxs1qbwaC\"})\n{% enddocs %}\n\n{% docs email %}\nEmail address of the user.\n{% enddocs %}\n\n{% docs source_details %}\nDetails about the source of the item. This is sometimes represented as a JSON object, and for other tables like Turbovote its represented as a string. (e.g. \"{\"contentful_id\":\"3CTLlXfbwtz1FOMpl31SKV\",\"utm_source\":\"scholarship_listing\",\"utm_medium\":\"referral\",\"utm_campaign\":\"fastweb_2019_08\"}\", newsletter_456)\n{% enddocs %}\n\n{% docs campaign_id %}\nThis is a unique identifier for the campaign\n{% enddocs %}\n\n{% docs campaign_run_id %}\nUnique identifier for the campaign run\n{% enddocs %}\n\n{% docs campaign_name %}\nName of the campaign\n{% enddocs %}\n\n{% docs campaign_cause %}\nCampaign cause (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_run_start_date %}\nStart date of the campaign run\n{% enddocs %}\n\n{% docs campaign_run_end_date %}\nEnd date of the campaign run\n{% enddocs %}\n\n{% docs campaign_created_date %}\nWhen the campaign was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs campaign_node_id %}\nInternal unique node id for the campaign\n{% enddocs %}\n\n{% docs campaign_node_id_title %}\nCampaign title\n{% enddocs %}\n\n{% docs campaign_run_id_title %}\nTitle of the campaign run\n{% enddocs %}\n\n{% docs campaign_action_type %}\nCampaign action type (eg. Make Something, Share Something)\n{% enddocs %}\n\n{% docs campaign_cause_type %}\nCampaign cause type (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_noun %}\nNoun applicable to the user's action\n{% enddocs %}\n\n{% docs campaign_verb %}\nVerb describing the action the user should take\n{% enddocs %}\n\n{% docs campaign_cta %}\nCampaign's call to action\n{% enddocs %}\n\n{% docs campaign_language %}\n\"Language in which the campaign is available\"\n{% enddocs %}\n\n{% docs agent_id %}\nIf set, the content type of the picture the member is sending us. Exp. image/png.\n{% enddocs %}\n\n{% docs attachment_content_type %}\nIf set, the handle of the Front agent this outbound support message is from.\n{% enddocs %}\n\n{% docs topic %}\nHolds a reference to the **last** campaign topic the member's conversation was in. This is useful to allow members to talk to Gambit and get quick responses (through Rivescript), without Gambit completely forgetting what state the member's interaction with a campaign topic was in.\n{% enddocs %}\n\n{% docs action_serial_id %}\nSerial id for the user's action. Depends on the source of the action. May be the bertly click id, sms message id, etc.\n{% enddocs %}\n\n{% docs channel %}\nChannel for the user's action. Depends on the source of the action. (e.g. web, sms)\n{% enddocs %}\n\n{% docs first_action_month %}\nMonth during which the user took their first action. \n{% enddocs %}\n\n{% docs event_id %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs event_source %}\nApplication source for event (eg. Phoenix, Northstar)\n{% enddocs %}\n\n{% docs event_datetime %}\nWhen the event occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs event_name %}\nName of the event (eg. northstar_submitted_register, https://docs.google.com/spreadsheets/d/1lm-fGrIm85nUTxSojqyCt_Ehmm1zEbViFhKpxcJiz1A/edit#gid=406441516)\n{% enddocs %}\n\n{% docs event_type %}\nType of event (pv = 'Page View', se = 'Structured Event')\n{% enddocs %}\n\n{% docs host %}\nURL host where event occurred (eg. www.dosomething.org or identity.dosomething.org)\n{% enddocs %}\n\n{% docs path %}\nURL path event occurred at (eg. /login or /us/campaigns/huddle-for-heroes)\n{% enddocs %}\n\n{% docs query_parameters %}\nOptional query parameters for the request (eg. query=huddle)\n{% enddocs %}\n\n{% docs se_category %}\nCategory of event (eg. focused_field, authentication) - Custom structured event\n{% enddocs %}\n\n{% docs se_action %}\nAction performed / event name (eg. form_submitted, action_failed) - Custom structured event\n{% enddocs %}\n\n{% docs se_label %}\nThe object of the action (eg. first_name, register, voter_reg_status) - Custom structured event\n{% enddocs %}\n\n{% docs session_id %}\nUnique identifier of the user's session\n{% enddocs %}\n\n{% docs session_counter %}\nHow many sessions a user has started\n{% enddocs %}\n\n{% docs browser_size %}\nWhich type of browser a user is using (eg. Mobile, Desktop)\n{% enddocs %}\n\n{% docs northstar_id %}\nThe Northstar ID of the user who generated the event\n{% enddocs %}\n\n{% docs device_id %}\nID of the device used\n{% enddocs %}\n\n{% docs referrer_host %}\nURL host of the referring site (eg. google.com)\n{% enddocs %}\n\n{% docs referrer_path %}\nURL path from referring site (eg. /10-stats-on-teen-drug-and-alcohol-use/)\n{% enddocs %}\n\n{% docs referrer_source %}\nReferrer source name (eg. Google, Facebook)\n{% enddocs %}\n\n{% docs utm_source %}\nTracks where the traffic is coming from. (eg. scholarship_listing, Facebook)\n{% enddocs %}\n\n{% docs utm_medium %}\nHow the traffic got to the platform (eg. referral, CPC)\n{% enddocs %}\n\n{% docs utm_campaign %}\nTracks which campaign the traffic was generated by. Shows up in Google Analytics as Campaign Name (eg. editorial_newsletter)\n{% enddocs %}\n\n{% docs url %}\nURL of campaign (eg. https://dosome.click/nyn5m7)\n{% enddocs %}\n\n{% docs modal_type %}\nNULL or SURVEY_MODAL\n{% enddocs %}\n\n{% docs landing_datetime %}\nWhen the session started in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs ending_datetime %}\nWhen the session ended in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs session_duration_seconds %}\nSession duration in seconds\n{% enddocs %}\n\n{% docs num_pages_views %}\nNumber of pages viewed in session\n{% enddocs %}\n\n{% docs landing_page %}\nFirst page the user viewed in the session (eg. /us/facts/11-facts-about-bp-oil-spill)\n{% enddocs %}\n\n{% docs exit_page %}\n\"Which page the user ended or exited their session from (eg. /us/campaigns/green-your-getaway)\"\n{% enddocs %}\n\n{% docs days_since_last_session %}\n\"Days since their last session.\"\n{% enddocs %}\n\n{% docs post_type %}\nType of post, (e.g. photo, voter-reg)\n{% enddocs %}\n\n{% docs noun %}\nNoun that corresponds to the item in the call to action that was delivered. (e.g. drawings, tweets)\n{% enddocs %}\n\n{% docs verb %}\nVerb corresponding to the action the user took. (e.g. shared, sent, taken)\n{% enddocs %}\n\n{% docs deleted_at %}\nDate time in UTC when a user deleted their post.\n{% enddocs %}\n\n{% docs _fivetran_deleted %}\nMarks rows that were deleted in the source table\n{% enddocs %}\n\n{% docs _fivetran_synced %}\n(UTC timestamp) keeps track of when each row was last successfully synced\n{% enddocs %}\n\n{% docs reportback %}\nWhether the post is a reportback \n{% enddocs %}\n\n{% docs active %}\nWhether the user is active \n{% enddocs %}\n\n{% docs anonymous %}\nWhether the user is anonymous when making the post \n{% enddocs %}\n\n{% docs callpower_campaign_id %}\nUnique ID corresponding to the Callpower campaign. Callpower allows users to record messages for their representatives.\n{% enddocs %}\n\n{% docs quiz %}\nWhether the post is a quiz \n{% enddocs %}\n\n{% docs action_type %}\nType of action the user took. (e.g. share-something, donate-something)\n{% enddocs %}\n\n{% docs online %}\nWhether the action is a online as opposed to IRL.\n{% enddocs %}\n\n{% docs time_commitment %}\nEstimated time required to do the action (e.g. 3.0+, <0.5)\n{% enddocs %}\n\n{% docs num_signups %}\nQuantity of campaign signups\n{% enddocs %}\n\n{% docs most_recent_signup %}\nTimestamp of the most recent signup in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs num_rbs %}\nQuantity of reportbacks for the user\n{% enddocs %}\n\n{% docs total_quantity %}\nTotal quantity of items in reportbacks\n{% enddocs %}\n\n{% docs most_recent_rb %}\nWhen the most recent reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs first_rb %}\nWhen the first reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs avg_time_betw_rbs %}\nCalculated average time between reportbacks.\n{% enddocs %}\n\n{% docs avg_days_next_action_after_rb %}\nCalculated average days until next action after reportback\n{% enddocs %}\n\n{% docs days_to_next_action_after_last_rb %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs most_recent_mam_action %}\nMost recent monthly active member qualifying action in UTC (eg. 2018-01-01 12:00:00).\n{% enddocs %}\n\n{% docs most_recent_email_open %}\nMost recent email open in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs most_recent_all_actions %}\nMost recent timestamp of any action in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs last_action_is_rb %}\nWhether the last action the user took was a reportback\n{% enddocs %}\n\n{% docs days_since_last_action %}\nDays since the user's last action\n{% enddocs %}\n\n{% docs time_to_first_rb %}\nHow much time after registering until the user's first reportback\n{% enddocs %}\n\n{% docs sms_unsubscribed_at %}\nTimestamp of when user unsubscribed from SMS messaging\n{% enddocs %}\n\n{% docs user_unsubscribed_at %}\nTimestamp of when user unsubscribed from email or sms\n{% enddocs %}\n\n{% docs voter_reg_acquisition %}\nWhether the user was an acquisition through voter registration efforts. \n{% enddocs %}\n\n{% docs last_logged_in %}\nDate time in UTC when user last logged in to Northstar\n{% enddocs %}\n\n{% docs last_accessed %}\nDate time in UTC when user last access the website\n{% enddocs %}\n\n{% docs last_messaged_at %}\nDate time in UTC when user was last sent a message via SMS or email\n{% enddocs %}\n\n{% docs facebook_id %}\nUser's facebook id\n{% enddocs %}\n\n{% docs mobile %}\nUsers's mobile phone number\n{% enddocs %}\n\n{% docs birthdate %}\nUser's birthdate\n{% enddocs %}\n\n{% docs first_name %}\nUser's first name\n{% enddocs %}\n\n{% docs last_name %}\nUser's last name\n{% enddocs %}\n\n{% docs voter_registration_status %}\nUser's registration status. (e.g. registration_complete, confirmed, uncertain) \n{% enddocs %}\n\n{% docs finish_with_state %}\nIf the registrant was eligible to use and passed through to complete their registration with their state\u2019s OVR system, it will be indicated in this field (direct quote from Rock-The-Vote documentation). Yes/No value in field.\n{% enddocs %}\n\n{% docs reportback_volume %}\nThis field returns 1 if non voter-reg action, since campaigns team only counts those a 1 reportback. If voter-reg action, we want to count quantity of post as number of registered voters.\n{% enddocs %}\n\n{% docs address_street_1 %}\nFirst line of user's street address\n{% enddocs %}\n\n{% docs address_street_2 %}\nSecond line of user's street address\n{% enddocs %}\n\n{% docs city %}\nUser's city\n{% enddocs %}\n\n{% docs state %}\nUser's state\n{% enddocs %}\n\n{% docs country %}\nUser's country\n{% enddocs %}\n\n{% docs language %}\nUser's language\n{% enddocs %}\n\n{% docs cio_status %}\nStatus of user from CIO. (e.g. customer_subscribed, customer_unsubscribed)\n{% enddocs %}\n\n{% docs cio_status_timestamp %}\nTimestamp when users's status was updated.\n{% enddocs %}\n\n{% docs sms_status %}\nCurrent SMS status. (e.g. undeliverable, unknown)\n{% enddocs %}\n\n{% docs source_detail %}\nDetails of the origin of the user. (e.g. tell_a_friend, other, opt_in_path/197981)\n{% enddocs %}\n\n{% docs badges %}\nWhether the user has any badges. \n{% enddocs %}\n\n{% docs refer_friends %}\nWhether the user is a part of the refer a friend campaign. \n{% enddocs %}\n\n{% docs subscribed_member %}\nWhether the user is subscribed. \n{% enddocs %}\n\n{% docs last_updated_at %}\nTimestamp when users's was updated.\n{% enddocs %}\n\n{% docs school_id %}\nUnique identifier for the user's school. This info comes from the school finder.\n{% enddocs %}\n\n{% docs newsletter_topic %}\nNewsletter topic. (e.g. community, lifestyle)\n{% enddocs %}\n\n{% docs user_agent %}\nFull user agent string for a user's browser (e.g. \"Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:24.0) Gecko/20100101 Firefox/24.0\")\n{% enddocs %}\n\n{% docs drupal_id %}\nOld Drupal user ID\n{% enddocs %}\n\n{% docs campaigns %}\nCampaigns a user is signed up for.\n{% enddocs %}\n\n{% docs audit %}\nA very useful field with data containing information about changes to a user, e.g. timestamps when the user subscribed and unsubscribed.\n{% enddocs %}\n\n{% docs voting_plan_status %}\nThe indication of the user's plan to vote, e.g. voting, not_voting, cant_vote\n{% enddocs %}\n\n{% docs voting_plan_time_of_day %}\nThe time of day when the user plans to vote, e.g morning, afternoon, evening\n{% enddocs %}\n\n{% docs voting_plan_method_of_transport %}\nHow the user plans to get to their polling place. e.g. walk, drive\n{% enddocs %}\n\n{% docs voting_plan_attending_with %}\nWith Whom the user plans to go voting, e.g. family, friends, alone\n{% enddocs %}\n\n{% docs feature_flags %}\nJSON containing info on features like badges and refer-a-friend.\n{% enddocs %}\n\n{% docs dbt_updated_at %}\nDBT snapshot table data. The updated_at timestamp of the source record when this snapshot row was inserted.\n{% enddocs %}\n\n{% docs dbt_scd_id %}\nDBT snapshot table data. A unique key generated for each snapshotted record.\n{% enddocs %}\n\n{% docs dbt_valid_from %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this snapshot row was first inserted\n{% enddocs %}\n\n{% docs dbt_valid_to %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this row row became invalidated.\n{% enddocs %}\n\n{% docs google_id %}\nUser's Google ID obtained from login.\n{% enddocs %}\n\n{% docs causes %}\nCauses in which a user is interested. e.g. animal welfare, education, mental_health\n{% enddocs %}\n\n{% docs email_subscription_status %}\nEmail subscription status of the user\n{% enddocs %}\n\n{% docs role %}\nUser's role, e.g. user, staff\n{% enddocs %}\n\n{% docs cio_backfilled %}\nWhether this user's data was backfilled from CIO\n{% enddocs %}\n\n{% docs addr_source %}\nWhere the user submitted their address, e.g. sms, GDPR\n{% enddocs %}\n\n{% docs email_subscription_topics %}\nEmail subscription topics correspond to categories in CIO in which the user is interested. e.g. lifestyle, community, scholarship\n{% enddocs %}\n\n{% docs sms_paused %}\nWhether we've paused sending sms messages to the user.\n{% enddocs %}\n\n\n\n\n", "name": "dbt_valid_to", "unique_id": "ds_dbt.dbt_valid_to", "block_contents": "DBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this row row became invalidated."}, "ds_dbt.google_id": {"root_path": "/Users/mrich/projects/quasar/quasar/dbt", "resource_type": "docs", "path": "schema.md", "original_file_path": "models/schema.md", "package_name": "ds_dbt", "file_contents": "\n{% docs click_id %}\nThis is a unique identifier for each click\n{% enddocs %}\n\n{% docs click_time %}\nTimestamp when user clicked.\n{% enddocs %}\n\n{% docs shortened %}\nShortened URL\n{% enddocs %}\n\n{% docs target_url %}\nURL where the user will be directed\n{% enddocs %}\n\n{% docs broadcast_id %}\nID of the broadcast that generated the shortened URL\n{% enddocs %}\n\n{% docs source %}\nSource of the URL (e.g. SMS, web), origin of the post (e.g. phoenix-web, phoenix-ashes, sms), or source where user was acquired. (e.g. sms, phoenix-next)\n{% enddocs %}\n\n{% docs interaction_type %}\nHow the user interacted with the link (e.g. preview, click)\n{% enddocs %}\n\n{% docs id %}\nUnique identifier for the post\n{% enddocs %}\n\n{% docs type %}\nType of post (e.g. photo)\n{% enddocs %}\n\n{% docs action %}\nPost action (e.g. DefendDreamers_Nov9_CongressCalls, GunViolence2018_Feb15_ParklandResponse)\n{% enddocs %}\n\n{% docs status %}\nPost status (e.g. accepted, rejected)\n{% enddocs %}\n\n{% docs quantity %}\nNumerical quantity of items specified in the call to action (e.g. 10, 200)\n{% enddocs %}\n\n{% docs source_bucket %}\nGrouping bucket for origin of the post (e.g. web, sms) \n{% enddocs %}\n\n{% docs created_at %}\nWhen the item was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs updated_at %}\nWhen the item was updated in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs text %}\nText of the post (e.g. \"Zoo animals and a super hero trying to help too!\") \n{% enddocs %}\n\n{% docs signup_id %}\nUnique identifier for the signup \n{% enddocs %}\n\n{% docs post_class %}\nClass of the signup (e.g. \"photo - default\", \"phone-call - DefendDreamers_Jan16_BothBodies\")\n{% enddocs %}\n\n{% docs is_accepted %}\nWhether the post has been accepted to be displayed to the public on the website\n{% enddocs %}\n\n{% docs action_id %}\nInternal identifier of the action \n{% enddocs %}\n\n{% docs location %}\nLocation where the action takes place (e.g. US-NY)\n{% enddocs %}\n\n{% docs postal_code %}\nPostal code where the action takes place\n{% enddocs %}\n\n{% docs is_reportback %}\nWhether the post is a reportback. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs civic_action %}\nWhether the post is a Civic Action. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs scholarship_entry %}\nWhether the post is a Scholarship Entry. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs why_participated %}\nWhy the user participated in this action. Entered by the user.\n{% enddocs %}\n\n{% docs details %}\nDetails about the post. Contains contentfulId and other information (e.g. {\"campaignContentfulId\":\"6ATBgGEQEeJoIcxs1qbwaC\"})\n{% enddocs %}\n\n{% docs email %}\nEmail address of the user.\n{% enddocs %}\n\n{% docs source_details %}\nDetails about the source of the item. This is sometimes represented as a JSON object, and for other tables like Turbovote its represented as a string. (e.g. \"{\"contentful_id\":\"3CTLlXfbwtz1FOMpl31SKV\",\"utm_source\":\"scholarship_listing\",\"utm_medium\":\"referral\",\"utm_campaign\":\"fastweb_2019_08\"}\", newsletter_456)\n{% enddocs %}\n\n{% docs campaign_id %}\nThis is a unique identifier for the campaign\n{% enddocs %}\n\n{% docs campaign_run_id %}\nUnique identifier for the campaign run\n{% enddocs %}\n\n{% docs campaign_name %}\nName of the campaign\n{% enddocs %}\n\n{% docs campaign_cause %}\nCampaign cause (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_run_start_date %}\nStart date of the campaign run\n{% enddocs %}\n\n{% docs campaign_run_end_date %}\nEnd date of the campaign run\n{% enddocs %}\n\n{% docs campaign_created_date %}\nWhen the campaign was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs campaign_node_id %}\nInternal unique node id for the campaign\n{% enddocs %}\n\n{% docs campaign_node_id_title %}\nCampaign title\n{% enddocs %}\n\n{% docs campaign_run_id_title %}\nTitle of the campaign run\n{% enddocs %}\n\n{% docs campaign_action_type %}\nCampaign action type (eg. Make Something, Share Something)\n{% enddocs %}\n\n{% docs campaign_cause_type %}\nCampaign cause type (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_noun %}\nNoun applicable to the user's action\n{% enddocs %}\n\n{% docs campaign_verb %}\nVerb describing the action the user should take\n{% enddocs %}\n\n{% docs campaign_cta %}\nCampaign's call to action\n{% enddocs %}\n\n{% docs campaign_language %}\n\"Language in which the campaign is available\"\n{% enddocs %}\n\n{% docs agent_id %}\nIf set, the content type of the picture the member is sending us. Exp. image/png.\n{% enddocs %}\n\n{% docs attachment_content_type %}\nIf set, the handle of the Front agent this outbound support message is from.\n{% enddocs %}\n\n{% docs topic %}\nHolds a reference to the **last** campaign topic the member's conversation was in. This is useful to allow members to talk to Gambit and get quick responses (through Rivescript), without Gambit completely forgetting what state the member's interaction with a campaign topic was in.\n{% enddocs %}\n\n{% docs action_serial_id %}\nSerial id for the user's action. Depends on the source of the action. May be the bertly click id, sms message id, etc.\n{% enddocs %}\n\n{% docs channel %}\nChannel for the user's action. Depends on the source of the action. (e.g. web, sms)\n{% enddocs %}\n\n{% docs first_action_month %}\nMonth during which the user took their first action. \n{% enddocs %}\n\n{% docs event_id %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs event_source %}\nApplication source for event (eg. Phoenix, Northstar)\n{% enddocs %}\n\n{% docs event_datetime %}\nWhen the event occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs event_name %}\nName of the event (eg. northstar_submitted_register, https://docs.google.com/spreadsheets/d/1lm-fGrIm85nUTxSojqyCt_Ehmm1zEbViFhKpxcJiz1A/edit#gid=406441516)\n{% enddocs %}\n\n{% docs event_type %}\nType of event (pv = 'Page View', se = 'Structured Event')\n{% enddocs %}\n\n{% docs host %}\nURL host where event occurred (eg. www.dosomething.org or identity.dosomething.org)\n{% enddocs %}\n\n{% docs path %}\nURL path event occurred at (eg. /login or /us/campaigns/huddle-for-heroes)\n{% enddocs %}\n\n{% docs query_parameters %}\nOptional query parameters for the request (eg. query=huddle)\n{% enddocs %}\n\n{% docs se_category %}\nCategory of event (eg. focused_field, authentication) - Custom structured event\n{% enddocs %}\n\n{% docs se_action %}\nAction performed / event name (eg. form_submitted, action_failed) - Custom structured event\n{% enddocs %}\n\n{% docs se_label %}\nThe object of the action (eg. first_name, register, voter_reg_status) - Custom structured event\n{% enddocs %}\n\n{% docs session_id %}\nUnique identifier of the user's session\n{% enddocs %}\n\n{% docs session_counter %}\nHow many sessions a user has started\n{% enddocs %}\n\n{% docs browser_size %}\nWhich type of browser a user is using (eg. Mobile, Desktop)\n{% enddocs %}\n\n{% docs northstar_id %}\nThe Northstar ID of the user who generated the event\n{% enddocs %}\n\n{% docs device_id %}\nID of the device used\n{% enddocs %}\n\n{% docs referrer_host %}\nURL host of the referring site (eg. google.com)\n{% enddocs %}\n\n{% docs referrer_path %}\nURL path from referring site (eg. /10-stats-on-teen-drug-and-alcohol-use/)\n{% enddocs %}\n\n{% docs referrer_source %}\nReferrer source name (eg. Google, Facebook)\n{% enddocs %}\n\n{% docs utm_source %}\nTracks where the traffic is coming from. (eg. scholarship_listing, Facebook)\n{% enddocs %}\n\n{% docs utm_medium %}\nHow the traffic got to the platform (eg. referral, CPC)\n{% enddocs %}\n\n{% docs utm_campaign %}\nTracks which campaign the traffic was generated by. Shows up in Google Analytics as Campaign Name (eg. editorial_newsletter)\n{% enddocs %}\n\n{% docs url %}\nURL of campaign (eg. https://dosome.click/nyn5m7)\n{% enddocs %}\n\n{% docs modal_type %}\nNULL or SURVEY_MODAL\n{% enddocs %}\n\n{% docs landing_datetime %}\nWhen the session started in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs ending_datetime %}\nWhen the session ended in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs session_duration_seconds %}\nSession duration in seconds\n{% enddocs %}\n\n{% docs num_pages_views %}\nNumber of pages viewed in session\n{% enddocs %}\n\n{% docs landing_page %}\nFirst page the user viewed in the session (eg. /us/facts/11-facts-about-bp-oil-spill)\n{% enddocs %}\n\n{% docs exit_page %}\n\"Which page the user ended or exited their session from (eg. /us/campaigns/green-your-getaway)\"\n{% enddocs %}\n\n{% docs days_since_last_session %}\n\"Days since their last session.\"\n{% enddocs %}\n\n{% docs post_type %}\nType of post, (e.g. photo, voter-reg)\n{% enddocs %}\n\n{% docs noun %}\nNoun that corresponds to the item in the call to action that was delivered. (e.g. drawings, tweets)\n{% enddocs %}\n\n{% docs verb %}\nVerb corresponding to the action the user took. (e.g. shared, sent, taken)\n{% enddocs %}\n\n{% docs deleted_at %}\nDate time in UTC when a user deleted their post.\n{% enddocs %}\n\n{% docs _fivetran_deleted %}\nMarks rows that were deleted in the source table\n{% enddocs %}\n\n{% docs _fivetran_synced %}\n(UTC timestamp) keeps track of when each row was last successfully synced\n{% enddocs %}\n\n{% docs reportback %}\nWhether the post is a reportback \n{% enddocs %}\n\n{% docs active %}\nWhether the user is active \n{% enddocs %}\n\n{% docs anonymous %}\nWhether the user is anonymous when making the post \n{% enddocs %}\n\n{% docs callpower_campaign_id %}\nUnique ID corresponding to the Callpower campaign. Callpower allows users to record messages for their representatives.\n{% enddocs %}\n\n{% docs quiz %}\nWhether the post is a quiz \n{% enddocs %}\n\n{% docs action_type %}\nType of action the user took. (e.g. share-something, donate-something)\n{% enddocs %}\n\n{% docs online %}\nWhether the action is a online as opposed to IRL.\n{% enddocs %}\n\n{% docs time_commitment %}\nEstimated time required to do the action (e.g. 3.0+, <0.5)\n{% enddocs %}\n\n{% docs num_signups %}\nQuantity of campaign signups\n{% enddocs %}\n\n{% docs most_recent_signup %}\nTimestamp of the most recent signup in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs num_rbs %}\nQuantity of reportbacks for the user\n{% enddocs %}\n\n{% docs total_quantity %}\nTotal quantity of items in reportbacks\n{% enddocs %}\n\n{% docs most_recent_rb %}\nWhen the most recent reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs first_rb %}\nWhen the first reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs avg_time_betw_rbs %}\nCalculated average time between reportbacks.\n{% enddocs %}\n\n{% docs avg_days_next_action_after_rb %}\nCalculated average days until next action after reportback\n{% enddocs %}\n\n{% docs days_to_next_action_after_last_rb %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs most_recent_mam_action %}\nMost recent monthly active member qualifying action in UTC (eg. 2018-01-01 12:00:00).\n{% enddocs %}\n\n{% docs most_recent_email_open %}\nMost recent email open in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs most_recent_all_actions %}\nMost recent timestamp of any action in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs last_action_is_rb %}\nWhether the last action the user took was a reportback\n{% enddocs %}\n\n{% docs days_since_last_action %}\nDays since the user's last action\n{% enddocs %}\n\n{% docs time_to_first_rb %}\nHow much time after registering until the user's first reportback\n{% enddocs %}\n\n{% docs sms_unsubscribed_at %}\nTimestamp of when user unsubscribed from SMS messaging\n{% enddocs %}\n\n{% docs user_unsubscribed_at %}\nTimestamp of when user unsubscribed from email or sms\n{% enddocs %}\n\n{% docs voter_reg_acquisition %}\nWhether the user was an acquisition through voter registration efforts. \n{% enddocs %}\n\n{% docs last_logged_in %}\nDate time in UTC when user last logged in to Northstar\n{% enddocs %}\n\n{% docs last_accessed %}\nDate time in UTC when user last access the website\n{% enddocs %}\n\n{% docs last_messaged_at %}\nDate time in UTC when user was last sent a message via SMS or email\n{% enddocs %}\n\n{% docs facebook_id %}\nUser's facebook id\n{% enddocs %}\n\n{% docs mobile %}\nUsers's mobile phone number\n{% enddocs %}\n\n{% docs birthdate %}\nUser's birthdate\n{% enddocs %}\n\n{% docs first_name %}\nUser's first name\n{% enddocs %}\n\n{% docs last_name %}\nUser's last name\n{% enddocs %}\n\n{% docs voter_registration_status %}\nUser's registration status. (e.g. registration_complete, confirmed, uncertain) \n{% enddocs %}\n\n{% docs finish_with_state %}\nIf the registrant was eligible to use and passed through to complete their registration with their state\u2019s OVR system, it will be indicated in this field (direct quote from Rock-The-Vote documentation). Yes/No value in field.\n{% enddocs %}\n\n{% docs reportback_volume %}\nThis field returns 1 if non voter-reg action, since campaigns team only counts those a 1 reportback. If voter-reg action, we want to count quantity of post as number of registered voters.\n{% enddocs %}\n\n{% docs address_street_1 %}\nFirst line of user's street address\n{% enddocs %}\n\n{% docs address_street_2 %}\nSecond line of user's street address\n{% enddocs %}\n\n{% docs city %}\nUser's city\n{% enddocs %}\n\n{% docs state %}\nUser's state\n{% enddocs %}\n\n{% docs country %}\nUser's country\n{% enddocs %}\n\n{% docs language %}\nUser's language\n{% enddocs %}\n\n{% docs cio_status %}\nStatus of user from CIO. (e.g. customer_subscribed, customer_unsubscribed)\n{% enddocs %}\n\n{% docs cio_status_timestamp %}\nTimestamp when users's status was updated.\n{% enddocs %}\n\n{% docs sms_status %}\nCurrent SMS status. (e.g. undeliverable, unknown)\n{% enddocs %}\n\n{% docs source_detail %}\nDetails of the origin of the user. (e.g. tell_a_friend, other, opt_in_path/197981)\n{% enddocs %}\n\n{% docs badges %}\nWhether the user has any badges. \n{% enddocs %}\n\n{% docs refer_friends %}\nWhether the user is a part of the refer a friend campaign. \n{% enddocs %}\n\n{% docs subscribed_member %}\nWhether the user is subscribed. \n{% enddocs %}\n\n{% docs last_updated_at %}\nTimestamp when users's was updated.\n{% enddocs %}\n\n{% docs school_id %}\nUnique identifier for the user's school. This info comes from the school finder.\n{% enddocs %}\n\n{% docs newsletter_topic %}\nNewsletter topic. (e.g. community, lifestyle)\n{% enddocs %}\n\n{% docs user_agent %}\nFull user agent string for a user's browser (e.g. \"Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:24.0) Gecko/20100101 Firefox/24.0\")\n{% enddocs %}\n\n{% docs drupal_id %}\nOld Drupal user ID\n{% enddocs %}\n\n{% docs campaigns %}\nCampaigns a user is signed up for.\n{% enddocs %}\n\n{% docs audit %}\nA very useful field with data containing information about changes to a user, e.g. timestamps when the user subscribed and unsubscribed.\n{% enddocs %}\n\n{% docs voting_plan_status %}\nThe indication of the user's plan to vote, e.g. voting, not_voting, cant_vote\n{% enddocs %}\n\n{% docs voting_plan_time_of_day %}\nThe time of day when the user plans to vote, e.g morning, afternoon, evening\n{% enddocs %}\n\n{% docs voting_plan_method_of_transport %}\nHow the user plans to get to their polling place. e.g. walk, drive\n{% enddocs %}\n\n{% docs voting_plan_attending_with %}\nWith Whom the user plans to go voting, e.g. family, friends, alone\n{% enddocs %}\n\n{% docs feature_flags %}\nJSON containing info on features like badges and refer-a-friend.\n{% enddocs %}\n\n{% docs dbt_updated_at %}\nDBT snapshot table data. The updated_at timestamp of the source record when this snapshot row was inserted.\n{% enddocs %}\n\n{% docs dbt_scd_id %}\nDBT snapshot table data. A unique key generated for each snapshotted record.\n{% enddocs %}\n\n{% docs dbt_valid_from %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this snapshot row was first inserted\n{% enddocs %}\n\n{% docs dbt_valid_to %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this row row became invalidated.\n{% enddocs %}\n\n{% docs google_id %}\nUser's Google ID obtained from login.\n{% enddocs %}\n\n{% docs causes %}\nCauses in which a user is interested. e.g. animal welfare, education, mental_health\n{% enddocs %}\n\n{% docs email_subscription_status %}\nEmail subscription status of the user\n{% enddocs %}\n\n{% docs role %}\nUser's role, e.g. user, staff\n{% enddocs %}\n\n{% docs cio_backfilled %}\nWhether this user's data was backfilled from CIO\n{% enddocs %}\n\n{% docs addr_source %}\nWhere the user submitted their address, e.g. sms, GDPR\n{% enddocs %}\n\n{% docs email_subscription_topics %}\nEmail subscription topics correspond to categories in CIO in which the user is interested. e.g. lifestyle, community, scholarship\n{% enddocs %}\n\n{% docs sms_paused %}\nWhether we've paused sending sms messages to the user.\n{% enddocs %}\n\n\n\n\n", "name": "google_id", "unique_id": "ds_dbt.google_id", "block_contents": "User's Google ID obtained from login."}, "ds_dbt.causes": {"root_path": "/Users/mrich/projects/quasar/quasar/dbt", "resource_type": "docs", "path": "schema.md", "original_file_path": "models/schema.md", "package_name": "ds_dbt", "file_contents": "\n{% docs click_id %}\nThis is a unique identifier for each click\n{% enddocs %}\n\n{% docs click_time %}\nTimestamp when user clicked.\n{% enddocs %}\n\n{% docs shortened %}\nShortened URL\n{% enddocs %}\n\n{% docs target_url %}\nURL where the user will be directed\n{% enddocs %}\n\n{% docs broadcast_id %}\nID of the broadcast that generated the shortened URL\n{% enddocs %}\n\n{% docs source %}\nSource of the URL (e.g. SMS, web), origin of the post (e.g. phoenix-web, phoenix-ashes, sms), or source where user was acquired. (e.g. sms, phoenix-next)\n{% enddocs %}\n\n{% docs interaction_type %}\nHow the user interacted with the link (e.g. preview, click)\n{% enddocs %}\n\n{% docs id %}\nUnique identifier for the post\n{% enddocs %}\n\n{% docs type %}\nType of post (e.g. photo)\n{% enddocs %}\n\n{% docs action %}\nPost action (e.g. DefendDreamers_Nov9_CongressCalls, GunViolence2018_Feb15_ParklandResponse)\n{% enddocs %}\n\n{% docs status %}\nPost status (e.g. accepted, rejected)\n{% enddocs %}\n\n{% docs quantity %}\nNumerical quantity of items specified in the call to action (e.g. 10, 200)\n{% enddocs %}\n\n{% docs source_bucket %}\nGrouping bucket for origin of the post (e.g. web, sms) \n{% enddocs %}\n\n{% docs created_at %}\nWhen the item was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs updated_at %}\nWhen the item was updated in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs text %}\nText of the post (e.g. \"Zoo animals and a super hero trying to help too!\") \n{% enddocs %}\n\n{% docs signup_id %}\nUnique identifier for the signup \n{% enddocs %}\n\n{% docs post_class %}\nClass of the signup (e.g. \"photo - default\", \"phone-call - DefendDreamers_Jan16_BothBodies\")\n{% enddocs %}\n\n{% docs is_accepted %}\nWhether the post has been accepted to be displayed to the public on the website\n{% enddocs %}\n\n{% docs action_id %}\nInternal identifier of the action \n{% enddocs %}\n\n{% docs location %}\nLocation where the action takes place (e.g. US-NY)\n{% enddocs %}\n\n{% docs postal_code %}\nPostal code where the action takes place\n{% enddocs %}\n\n{% docs is_reportback %}\nWhether the post is a reportback. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs civic_action %}\nWhether the post is a Civic Action. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs scholarship_entry %}\nWhether the post is a Scholarship Entry. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs why_participated %}\nWhy the user participated in this action. Entered by the user.\n{% enddocs %}\n\n{% docs details %}\nDetails about the post. Contains contentfulId and other information (e.g. {\"campaignContentfulId\":\"6ATBgGEQEeJoIcxs1qbwaC\"})\n{% enddocs %}\n\n{% docs email %}\nEmail address of the user.\n{% enddocs %}\n\n{% docs source_details %}\nDetails about the source of the item. This is sometimes represented as a JSON object, and for other tables like Turbovote its represented as a string. (e.g. \"{\"contentful_id\":\"3CTLlXfbwtz1FOMpl31SKV\",\"utm_source\":\"scholarship_listing\",\"utm_medium\":\"referral\",\"utm_campaign\":\"fastweb_2019_08\"}\", newsletter_456)\n{% enddocs %}\n\n{% docs campaign_id %}\nThis is a unique identifier for the campaign\n{% enddocs %}\n\n{% docs campaign_run_id %}\nUnique identifier for the campaign run\n{% enddocs %}\n\n{% docs campaign_name %}\nName of the campaign\n{% enddocs %}\n\n{% docs campaign_cause %}\nCampaign cause (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_run_start_date %}\nStart date of the campaign run\n{% enddocs %}\n\n{% docs campaign_run_end_date %}\nEnd date of the campaign run\n{% enddocs %}\n\n{% docs campaign_created_date %}\nWhen the campaign was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs campaign_node_id %}\nInternal unique node id for the campaign\n{% enddocs %}\n\n{% docs campaign_node_id_title %}\nCampaign title\n{% enddocs %}\n\n{% docs campaign_run_id_title %}\nTitle of the campaign run\n{% enddocs %}\n\n{% docs campaign_action_type %}\nCampaign action type (eg. Make Something, Share Something)\n{% enddocs %}\n\n{% docs campaign_cause_type %}\nCampaign cause type (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_noun %}\nNoun applicable to the user's action\n{% enddocs %}\n\n{% docs campaign_verb %}\nVerb describing the action the user should take\n{% enddocs %}\n\n{% docs campaign_cta %}\nCampaign's call to action\n{% enddocs %}\n\n{% docs campaign_language %}\n\"Language in which the campaign is available\"\n{% enddocs %}\n\n{% docs agent_id %}\nIf set, the content type of the picture the member is sending us. Exp. image/png.\n{% enddocs %}\n\n{% docs attachment_content_type %}\nIf set, the handle of the Front agent this outbound support message is from.\n{% enddocs %}\n\n{% docs topic %}\nHolds a reference to the **last** campaign topic the member's conversation was in. This is useful to allow members to talk to Gambit and get quick responses (through Rivescript), without Gambit completely forgetting what state the member's interaction with a campaign topic was in.\n{% enddocs %}\n\n{% docs action_serial_id %}\nSerial id for the user's action. Depends on the source of the action. May be the bertly click id, sms message id, etc.\n{% enddocs %}\n\n{% docs channel %}\nChannel for the user's action. Depends on the source of the action. (e.g. web, sms)\n{% enddocs %}\n\n{% docs first_action_month %}\nMonth during which the user took their first action. \n{% enddocs %}\n\n{% docs event_id %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs event_source %}\nApplication source for event (eg. Phoenix, Northstar)\n{% enddocs %}\n\n{% docs event_datetime %}\nWhen the event occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs event_name %}\nName of the event (eg. northstar_submitted_register, https://docs.google.com/spreadsheets/d/1lm-fGrIm85nUTxSojqyCt_Ehmm1zEbViFhKpxcJiz1A/edit#gid=406441516)\n{% enddocs %}\n\n{% docs event_type %}\nType of event (pv = 'Page View', se = 'Structured Event')\n{% enddocs %}\n\n{% docs host %}\nURL host where event occurred (eg. www.dosomething.org or identity.dosomething.org)\n{% enddocs %}\n\n{% docs path %}\nURL path event occurred at (eg. /login or /us/campaigns/huddle-for-heroes)\n{% enddocs %}\n\n{% docs query_parameters %}\nOptional query parameters for the request (eg. query=huddle)\n{% enddocs %}\n\n{% docs se_category %}\nCategory of event (eg. focused_field, authentication) - Custom structured event\n{% enddocs %}\n\n{% docs se_action %}\nAction performed / event name (eg. form_submitted, action_failed) - Custom structured event\n{% enddocs %}\n\n{% docs se_label %}\nThe object of the action (eg. first_name, register, voter_reg_status) - Custom structured event\n{% enddocs %}\n\n{% docs session_id %}\nUnique identifier of the user's session\n{% enddocs %}\n\n{% docs session_counter %}\nHow many sessions a user has started\n{% enddocs %}\n\n{% docs browser_size %}\nWhich type of browser a user is using (eg. Mobile, Desktop)\n{% enddocs %}\n\n{% docs northstar_id %}\nThe Northstar ID of the user who generated the event\n{% enddocs %}\n\n{% docs device_id %}\nID of the device used\n{% enddocs %}\n\n{% docs referrer_host %}\nURL host of the referring site (eg. google.com)\n{% enddocs %}\n\n{% docs referrer_path %}\nURL path from referring site (eg. /10-stats-on-teen-drug-and-alcohol-use/)\n{% enddocs %}\n\n{% docs referrer_source %}\nReferrer source name (eg. Google, Facebook)\n{% enddocs %}\n\n{% docs utm_source %}\nTracks where the traffic is coming from. (eg. scholarship_listing, Facebook)\n{% enddocs %}\n\n{% docs utm_medium %}\nHow the traffic got to the platform (eg. referral, CPC)\n{% enddocs %}\n\n{% docs utm_campaign %}\nTracks which campaign the traffic was generated by. Shows up in Google Analytics as Campaign Name (eg. editorial_newsletter)\n{% enddocs %}\n\n{% docs url %}\nURL of campaign (eg. https://dosome.click/nyn5m7)\n{% enddocs %}\n\n{% docs modal_type %}\nNULL or SURVEY_MODAL\n{% enddocs %}\n\n{% docs landing_datetime %}\nWhen the session started in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs ending_datetime %}\nWhen the session ended in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs session_duration_seconds %}\nSession duration in seconds\n{% enddocs %}\n\n{% docs num_pages_views %}\nNumber of pages viewed in session\n{% enddocs %}\n\n{% docs landing_page %}\nFirst page the user viewed in the session (eg. /us/facts/11-facts-about-bp-oil-spill)\n{% enddocs %}\n\n{% docs exit_page %}\n\"Which page the user ended or exited their session from (eg. /us/campaigns/green-your-getaway)\"\n{% enddocs %}\n\n{% docs days_since_last_session %}\n\"Days since their last session.\"\n{% enddocs %}\n\n{% docs post_type %}\nType of post, (e.g. photo, voter-reg)\n{% enddocs %}\n\n{% docs noun %}\nNoun that corresponds to the item in the call to action that was delivered. (e.g. drawings, tweets)\n{% enddocs %}\n\n{% docs verb %}\nVerb corresponding to the action the user took. (e.g. shared, sent, taken)\n{% enddocs %}\n\n{% docs deleted_at %}\nDate time in UTC when a user deleted their post.\n{% enddocs %}\n\n{% docs _fivetran_deleted %}\nMarks rows that were deleted in the source table\n{% enddocs %}\n\n{% docs _fivetran_synced %}\n(UTC timestamp) keeps track of when each row was last successfully synced\n{% enddocs %}\n\n{% docs reportback %}\nWhether the post is a reportback \n{% enddocs %}\n\n{% docs active %}\nWhether the user is active \n{% enddocs %}\n\n{% docs anonymous %}\nWhether the user is anonymous when making the post \n{% enddocs %}\n\n{% docs callpower_campaign_id %}\nUnique ID corresponding to the Callpower campaign. Callpower allows users to record messages for their representatives.\n{% enddocs %}\n\n{% docs quiz %}\nWhether the post is a quiz \n{% enddocs %}\n\n{% docs action_type %}\nType of action the user took. (e.g. share-something, donate-something)\n{% enddocs %}\n\n{% docs online %}\nWhether the action is a online as opposed to IRL.\n{% enddocs %}\n\n{% docs time_commitment %}\nEstimated time required to do the action (e.g. 3.0+, <0.5)\n{% enddocs %}\n\n{% docs num_signups %}\nQuantity of campaign signups\n{% enddocs %}\n\n{% docs most_recent_signup %}\nTimestamp of the most recent signup in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs num_rbs %}\nQuantity of reportbacks for the user\n{% enddocs %}\n\n{% docs total_quantity %}\nTotal quantity of items in reportbacks\n{% enddocs %}\n\n{% docs most_recent_rb %}\nWhen the most recent reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs first_rb %}\nWhen the first reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs avg_time_betw_rbs %}\nCalculated average time between reportbacks.\n{% enddocs %}\n\n{% docs avg_days_next_action_after_rb %}\nCalculated average days until next action after reportback\n{% enddocs %}\n\n{% docs days_to_next_action_after_last_rb %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs most_recent_mam_action %}\nMost recent monthly active member qualifying action in UTC (eg. 2018-01-01 12:00:00).\n{% enddocs %}\n\n{% docs most_recent_email_open %}\nMost recent email open in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs most_recent_all_actions %}\nMost recent timestamp of any action in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs last_action_is_rb %}\nWhether the last action the user took was a reportback\n{% enddocs %}\n\n{% docs days_since_last_action %}\nDays since the user's last action\n{% enddocs %}\n\n{% docs time_to_first_rb %}\nHow much time after registering until the user's first reportback\n{% enddocs %}\n\n{% docs sms_unsubscribed_at %}\nTimestamp of when user unsubscribed from SMS messaging\n{% enddocs %}\n\n{% docs user_unsubscribed_at %}\nTimestamp of when user unsubscribed from email or sms\n{% enddocs %}\n\n{% docs voter_reg_acquisition %}\nWhether the user was an acquisition through voter registration efforts. \n{% enddocs %}\n\n{% docs last_logged_in %}\nDate time in UTC when user last logged in to Northstar\n{% enddocs %}\n\n{% docs last_accessed %}\nDate time in UTC when user last access the website\n{% enddocs %}\n\n{% docs last_messaged_at %}\nDate time in UTC when user was last sent a message via SMS or email\n{% enddocs %}\n\n{% docs facebook_id %}\nUser's facebook id\n{% enddocs %}\n\n{% docs mobile %}\nUsers's mobile phone number\n{% enddocs %}\n\n{% docs birthdate %}\nUser's birthdate\n{% enddocs %}\n\n{% docs first_name %}\nUser's first name\n{% enddocs %}\n\n{% docs last_name %}\nUser's last name\n{% enddocs %}\n\n{% docs voter_registration_status %}\nUser's registration status. (e.g. registration_complete, confirmed, uncertain) \n{% enddocs %}\n\n{% docs finish_with_state %}\nIf the registrant was eligible to use and passed through to complete their registration with their state\u2019s OVR system, it will be indicated in this field (direct quote from Rock-The-Vote documentation). Yes/No value in field.\n{% enddocs %}\n\n{% docs reportback_volume %}\nThis field returns 1 if non voter-reg action, since campaigns team only counts those a 1 reportback. If voter-reg action, we want to count quantity of post as number of registered voters.\n{% enddocs %}\n\n{% docs address_street_1 %}\nFirst line of user's street address\n{% enddocs %}\n\n{% docs address_street_2 %}\nSecond line of user's street address\n{% enddocs %}\n\n{% docs city %}\nUser's city\n{% enddocs %}\n\n{% docs state %}\nUser's state\n{% enddocs %}\n\n{% docs country %}\nUser's country\n{% enddocs %}\n\n{% docs language %}\nUser's language\n{% enddocs %}\n\n{% docs cio_status %}\nStatus of user from CIO. (e.g. customer_subscribed, customer_unsubscribed)\n{% enddocs %}\n\n{% docs cio_status_timestamp %}\nTimestamp when users's status was updated.\n{% enddocs %}\n\n{% docs sms_status %}\nCurrent SMS status. (e.g. undeliverable, unknown)\n{% enddocs %}\n\n{% docs source_detail %}\nDetails of the origin of the user. (e.g. tell_a_friend, other, opt_in_path/197981)\n{% enddocs %}\n\n{% docs badges %}\nWhether the user has any badges. \n{% enddocs %}\n\n{% docs refer_friends %}\nWhether the user is a part of the refer a friend campaign. \n{% enddocs %}\n\n{% docs subscribed_member %}\nWhether the user is subscribed. \n{% enddocs %}\n\n{% docs last_updated_at %}\nTimestamp when users's was updated.\n{% enddocs %}\n\n{% docs school_id %}\nUnique identifier for the user's school. This info comes from the school finder.\n{% enddocs %}\n\n{% docs newsletter_topic %}\nNewsletter topic. (e.g. community, lifestyle)\n{% enddocs %}\n\n{% docs user_agent %}\nFull user agent string for a user's browser (e.g. \"Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:24.0) Gecko/20100101 Firefox/24.0\")\n{% enddocs %}\n\n{% docs drupal_id %}\nOld Drupal user ID\n{% enddocs %}\n\n{% docs campaigns %}\nCampaigns a user is signed up for.\n{% enddocs %}\n\n{% docs audit %}\nA very useful field with data containing information about changes to a user, e.g. timestamps when the user subscribed and unsubscribed.\n{% enddocs %}\n\n{% docs voting_plan_status %}\nThe indication of the user's plan to vote, e.g. voting, not_voting, cant_vote\n{% enddocs %}\n\n{% docs voting_plan_time_of_day %}\nThe time of day when the user plans to vote, e.g morning, afternoon, evening\n{% enddocs %}\n\n{% docs voting_plan_method_of_transport %}\nHow the user plans to get to their polling place. e.g. walk, drive\n{% enddocs %}\n\n{% docs voting_plan_attending_with %}\nWith Whom the user plans to go voting, e.g. family, friends, alone\n{% enddocs %}\n\n{% docs feature_flags %}\nJSON containing info on features like badges and refer-a-friend.\n{% enddocs %}\n\n{% docs dbt_updated_at %}\nDBT snapshot table data. The updated_at timestamp of the source record when this snapshot row was inserted.\n{% enddocs %}\n\n{% docs dbt_scd_id %}\nDBT snapshot table data. A unique key generated for each snapshotted record.\n{% enddocs %}\n\n{% docs dbt_valid_from %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this snapshot row was first inserted\n{% enddocs %}\n\n{% docs dbt_valid_to %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this row row became invalidated.\n{% enddocs %}\n\n{% docs google_id %}\nUser's Google ID obtained from login.\n{% enddocs %}\n\n{% docs causes %}\nCauses in which a user is interested. e.g. animal welfare, education, mental_health\n{% enddocs %}\n\n{% docs email_subscription_status %}\nEmail subscription status of the user\n{% enddocs %}\n\n{% docs role %}\nUser's role, e.g. user, staff\n{% enddocs %}\n\n{% docs cio_backfilled %}\nWhether this user's data was backfilled from CIO\n{% enddocs %}\n\n{% docs addr_source %}\nWhere the user submitted their address, e.g. sms, GDPR\n{% enddocs %}\n\n{% docs email_subscription_topics %}\nEmail subscription topics correspond to categories in CIO in which the user is interested. e.g. lifestyle, community, scholarship\n{% enddocs %}\n\n{% docs sms_paused %}\nWhether we've paused sending sms messages to the user.\n{% enddocs %}\n\n\n\n\n", "name": "causes", "unique_id": "ds_dbt.causes", "block_contents": "Causes in which a user is interested. e.g. animal welfare, education, mental_health"}, "ds_dbt.email_subscription_status": {"root_path": "/Users/mrich/projects/quasar/quasar/dbt", "resource_type": "docs", "path": "schema.md", "original_file_path": "models/schema.md", "package_name": "ds_dbt", "file_contents": "\n{% docs click_id %}\nThis is a unique identifier for each click\n{% enddocs %}\n\n{% docs click_time %}\nTimestamp when user clicked.\n{% enddocs %}\n\n{% docs shortened %}\nShortened URL\n{% enddocs %}\n\n{% docs target_url %}\nURL where the user will be directed\n{% enddocs %}\n\n{% docs broadcast_id %}\nID of the broadcast that generated the shortened URL\n{% enddocs %}\n\n{% docs source %}\nSource of the URL (e.g. SMS, web), origin of the post (e.g. phoenix-web, phoenix-ashes, sms), or source where user was acquired. (e.g. sms, phoenix-next)\n{% enddocs %}\n\n{% docs interaction_type %}\nHow the user interacted with the link (e.g. preview, click)\n{% enddocs %}\n\n{% docs id %}\nUnique identifier for the post\n{% enddocs %}\n\n{% docs type %}\nType of post (e.g. photo)\n{% enddocs %}\n\n{% docs action %}\nPost action (e.g. DefendDreamers_Nov9_CongressCalls, GunViolence2018_Feb15_ParklandResponse)\n{% enddocs %}\n\n{% docs status %}\nPost status (e.g. accepted, rejected)\n{% enddocs %}\n\n{% docs quantity %}\nNumerical quantity of items specified in the call to action (e.g. 10, 200)\n{% enddocs %}\n\n{% docs source_bucket %}\nGrouping bucket for origin of the post (e.g. web, sms) \n{% enddocs %}\n\n{% docs created_at %}\nWhen the item was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs updated_at %}\nWhen the item was updated in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs text %}\nText of the post (e.g. \"Zoo animals and a super hero trying to help too!\") \n{% enddocs %}\n\n{% docs signup_id %}\nUnique identifier for the signup \n{% enddocs %}\n\n{% docs post_class %}\nClass of the signup (e.g. \"photo - default\", \"phone-call - DefendDreamers_Jan16_BothBodies\")\n{% enddocs %}\n\n{% docs is_accepted %}\nWhether the post has been accepted to be displayed to the public on the website\n{% enddocs %}\n\n{% docs action_id %}\nInternal identifier of the action \n{% enddocs %}\n\n{% docs location %}\nLocation where the action takes place (e.g. US-NY)\n{% enddocs %}\n\n{% docs postal_code %}\nPostal code where the action takes place\n{% enddocs %}\n\n{% docs is_reportback %}\nWhether the post is a reportback. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs civic_action %}\nWhether the post is a Civic Action. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs scholarship_entry %}\nWhether the post is a Scholarship Entry. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs why_participated %}\nWhy the user participated in this action. Entered by the user.\n{% enddocs %}\n\n{% docs details %}\nDetails about the post. Contains contentfulId and other information (e.g. {\"campaignContentfulId\":\"6ATBgGEQEeJoIcxs1qbwaC\"})\n{% enddocs %}\n\n{% docs email %}\nEmail address of the user.\n{% enddocs %}\n\n{% docs source_details %}\nDetails about the source of the item. This is sometimes represented as a JSON object, and for other tables like Turbovote its represented as a string. (e.g. \"{\"contentful_id\":\"3CTLlXfbwtz1FOMpl31SKV\",\"utm_source\":\"scholarship_listing\",\"utm_medium\":\"referral\",\"utm_campaign\":\"fastweb_2019_08\"}\", newsletter_456)\n{% enddocs %}\n\n{% docs campaign_id %}\nThis is a unique identifier for the campaign\n{% enddocs %}\n\n{% docs campaign_run_id %}\nUnique identifier for the campaign run\n{% enddocs %}\n\n{% docs campaign_name %}\nName of the campaign\n{% enddocs %}\n\n{% docs campaign_cause %}\nCampaign cause (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_run_start_date %}\nStart date of the campaign run\n{% enddocs %}\n\n{% docs campaign_run_end_date %}\nEnd date of the campaign run\n{% enddocs %}\n\n{% docs campaign_created_date %}\nWhen the campaign was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs campaign_node_id %}\nInternal unique node id for the campaign\n{% enddocs %}\n\n{% docs campaign_node_id_title %}\nCampaign title\n{% enddocs %}\n\n{% docs campaign_run_id_title %}\nTitle of the campaign run\n{% enddocs %}\n\n{% docs campaign_action_type %}\nCampaign action type (eg. Make Something, Share Something)\n{% enddocs %}\n\n{% docs campaign_cause_type %}\nCampaign cause type (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_noun %}\nNoun applicable to the user's action\n{% enddocs %}\n\n{% docs campaign_verb %}\nVerb describing the action the user should take\n{% enddocs %}\n\n{% docs campaign_cta %}\nCampaign's call to action\n{% enddocs %}\n\n{% docs campaign_language %}\n\"Language in which the campaign is available\"\n{% enddocs %}\n\n{% docs agent_id %}\nIf set, the content type of the picture the member is sending us. Exp. image/png.\n{% enddocs %}\n\n{% docs attachment_content_type %}\nIf set, the handle of the Front agent this outbound support message is from.\n{% enddocs %}\n\n{% docs topic %}\nHolds a reference to the **last** campaign topic the member's conversation was in. This is useful to allow members to talk to Gambit and get quick responses (through Rivescript), without Gambit completely forgetting what state the member's interaction with a campaign topic was in.\n{% enddocs %}\n\n{% docs action_serial_id %}\nSerial id for the user's action. Depends on the source of the action. May be the bertly click id, sms message id, etc.\n{% enddocs %}\n\n{% docs channel %}\nChannel for the user's action. Depends on the source of the action. (e.g. web, sms)\n{% enddocs %}\n\n{% docs first_action_month %}\nMonth during which the user took their first action. \n{% enddocs %}\n\n{% docs event_id %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs event_source %}\nApplication source for event (eg. Phoenix, Northstar)\n{% enddocs %}\n\n{% docs event_datetime %}\nWhen the event occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs event_name %}\nName of the event (eg. northstar_submitted_register, https://docs.google.com/spreadsheets/d/1lm-fGrIm85nUTxSojqyCt_Ehmm1zEbViFhKpxcJiz1A/edit#gid=406441516)\n{% enddocs %}\n\n{% docs event_type %}\nType of event (pv = 'Page View', se = 'Structured Event')\n{% enddocs %}\n\n{% docs host %}\nURL host where event occurred (eg. www.dosomething.org or identity.dosomething.org)\n{% enddocs %}\n\n{% docs path %}\nURL path event occurred at (eg. /login or /us/campaigns/huddle-for-heroes)\n{% enddocs %}\n\n{% docs query_parameters %}\nOptional query parameters for the request (eg. query=huddle)\n{% enddocs %}\n\n{% docs se_category %}\nCategory of event (eg. focused_field, authentication) - Custom structured event\n{% enddocs %}\n\n{% docs se_action %}\nAction performed / event name (eg. form_submitted, action_failed) - Custom structured event\n{% enddocs %}\n\n{% docs se_label %}\nThe object of the action (eg. first_name, register, voter_reg_status) - Custom structured event\n{% enddocs %}\n\n{% docs session_id %}\nUnique identifier of the user's session\n{% enddocs %}\n\n{% docs session_counter %}\nHow many sessions a user has started\n{% enddocs %}\n\n{% docs browser_size %}\nWhich type of browser a user is using (eg. Mobile, Desktop)\n{% enddocs %}\n\n{% docs northstar_id %}\nThe Northstar ID of the user who generated the event\n{% enddocs %}\n\n{% docs device_id %}\nID of the device used\n{% enddocs %}\n\n{% docs referrer_host %}\nURL host of the referring site (eg. google.com)\n{% enddocs %}\n\n{% docs referrer_path %}\nURL path from referring site (eg. /10-stats-on-teen-drug-and-alcohol-use/)\n{% enddocs %}\n\n{% docs referrer_source %}\nReferrer source name (eg. Google, Facebook)\n{% enddocs %}\n\n{% docs utm_source %}\nTracks where the traffic is coming from. (eg. scholarship_listing, Facebook)\n{% enddocs %}\n\n{% docs utm_medium %}\nHow the traffic got to the platform (eg. referral, CPC)\n{% enddocs %}\n\n{% docs utm_campaign %}\nTracks which campaign the traffic was generated by. Shows up in Google Analytics as Campaign Name (eg. editorial_newsletter)\n{% enddocs %}\n\n{% docs url %}\nURL of campaign (eg. https://dosome.click/nyn5m7)\n{% enddocs %}\n\n{% docs modal_type %}\nNULL or SURVEY_MODAL\n{% enddocs %}\n\n{% docs landing_datetime %}\nWhen the session started in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs ending_datetime %}\nWhen the session ended in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs session_duration_seconds %}\nSession duration in seconds\n{% enddocs %}\n\n{% docs num_pages_views %}\nNumber of pages viewed in session\n{% enddocs %}\n\n{% docs landing_page %}\nFirst page the user viewed in the session (eg. /us/facts/11-facts-about-bp-oil-spill)\n{% enddocs %}\n\n{% docs exit_page %}\n\"Which page the user ended or exited their session from (eg. /us/campaigns/green-your-getaway)\"\n{% enddocs %}\n\n{% docs days_since_last_session %}\n\"Days since their last session.\"\n{% enddocs %}\n\n{% docs post_type %}\nType of post, (e.g. photo, voter-reg)\n{% enddocs %}\n\n{% docs noun %}\nNoun that corresponds to the item in the call to action that was delivered. (e.g. drawings, tweets)\n{% enddocs %}\n\n{% docs verb %}\nVerb corresponding to the action the user took. (e.g. shared, sent, taken)\n{% enddocs %}\n\n{% docs deleted_at %}\nDate time in UTC when a user deleted their post.\n{% enddocs %}\n\n{% docs _fivetran_deleted %}\nMarks rows that were deleted in the source table\n{% enddocs %}\n\n{% docs _fivetran_synced %}\n(UTC timestamp) keeps track of when each row was last successfully synced\n{% enddocs %}\n\n{% docs reportback %}\nWhether the post is a reportback \n{% enddocs %}\n\n{% docs active %}\nWhether the user is active \n{% enddocs %}\n\n{% docs anonymous %}\nWhether the user is anonymous when making the post \n{% enddocs %}\n\n{% docs callpower_campaign_id %}\nUnique ID corresponding to the Callpower campaign. Callpower allows users to record messages for their representatives.\n{% enddocs %}\n\n{% docs quiz %}\nWhether the post is a quiz \n{% enddocs %}\n\n{% docs action_type %}\nType of action the user took. (e.g. share-something, donate-something)\n{% enddocs %}\n\n{% docs online %}\nWhether the action is a online as opposed to IRL.\n{% enddocs %}\n\n{% docs time_commitment %}\nEstimated time required to do the action (e.g. 3.0+, <0.5)\n{% enddocs %}\n\n{% docs num_signups %}\nQuantity of campaign signups\n{% enddocs %}\n\n{% docs most_recent_signup %}\nTimestamp of the most recent signup in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs num_rbs %}\nQuantity of reportbacks for the user\n{% enddocs %}\n\n{% docs total_quantity %}\nTotal quantity of items in reportbacks\n{% enddocs %}\n\n{% docs most_recent_rb %}\nWhen the most recent reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs first_rb %}\nWhen the first reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs avg_time_betw_rbs %}\nCalculated average time between reportbacks.\n{% enddocs %}\n\n{% docs avg_days_next_action_after_rb %}\nCalculated average days until next action after reportback\n{% enddocs %}\n\n{% docs days_to_next_action_after_last_rb %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs most_recent_mam_action %}\nMost recent monthly active member qualifying action in UTC (eg. 2018-01-01 12:00:00).\n{% enddocs %}\n\n{% docs most_recent_email_open %}\nMost recent email open in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs most_recent_all_actions %}\nMost recent timestamp of any action in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs last_action_is_rb %}\nWhether the last action the user took was a reportback\n{% enddocs %}\n\n{% docs days_since_last_action %}\nDays since the user's last action\n{% enddocs %}\n\n{% docs time_to_first_rb %}\nHow much time after registering until the user's first reportback\n{% enddocs %}\n\n{% docs sms_unsubscribed_at %}\nTimestamp of when user unsubscribed from SMS messaging\n{% enddocs %}\n\n{% docs user_unsubscribed_at %}\nTimestamp of when user unsubscribed from email or sms\n{% enddocs %}\n\n{% docs voter_reg_acquisition %}\nWhether the user was an acquisition through voter registration efforts. \n{% enddocs %}\n\n{% docs last_logged_in %}\nDate time in UTC when user last logged in to Northstar\n{% enddocs %}\n\n{% docs last_accessed %}\nDate time in UTC when user last access the website\n{% enddocs %}\n\n{% docs last_messaged_at %}\nDate time in UTC when user was last sent a message via SMS or email\n{% enddocs %}\n\n{% docs facebook_id %}\nUser's facebook id\n{% enddocs %}\n\n{% docs mobile %}\nUsers's mobile phone number\n{% enddocs %}\n\n{% docs birthdate %}\nUser's birthdate\n{% enddocs %}\n\n{% docs first_name %}\nUser's first name\n{% enddocs %}\n\n{% docs last_name %}\nUser's last name\n{% enddocs %}\n\n{% docs voter_registration_status %}\nUser's registration status. (e.g. registration_complete, confirmed, uncertain) \n{% enddocs %}\n\n{% docs finish_with_state %}\nIf the registrant was eligible to use and passed through to complete their registration with their state\u2019s OVR system, it will be indicated in this field (direct quote from Rock-The-Vote documentation). Yes/No value in field.\n{% enddocs %}\n\n{% docs reportback_volume %}\nThis field returns 1 if non voter-reg action, since campaigns team only counts those a 1 reportback. If voter-reg action, we want to count quantity of post as number of registered voters.\n{% enddocs %}\n\n{% docs address_street_1 %}\nFirst line of user's street address\n{% enddocs %}\n\n{% docs address_street_2 %}\nSecond line of user's street address\n{% enddocs %}\n\n{% docs city %}\nUser's city\n{% enddocs %}\n\n{% docs state %}\nUser's state\n{% enddocs %}\n\n{% docs country %}\nUser's country\n{% enddocs %}\n\n{% docs language %}\nUser's language\n{% enddocs %}\n\n{% docs cio_status %}\nStatus of user from CIO. (e.g. customer_subscribed, customer_unsubscribed)\n{% enddocs %}\n\n{% docs cio_status_timestamp %}\nTimestamp when users's status was updated.\n{% enddocs %}\n\n{% docs sms_status %}\nCurrent SMS status. (e.g. undeliverable, unknown)\n{% enddocs %}\n\n{% docs source_detail %}\nDetails of the origin of the user. (e.g. tell_a_friend, other, opt_in_path/197981)\n{% enddocs %}\n\n{% docs badges %}\nWhether the user has any badges. \n{% enddocs %}\n\n{% docs refer_friends %}\nWhether the user is a part of the refer a friend campaign. \n{% enddocs %}\n\n{% docs subscribed_member %}\nWhether the user is subscribed. \n{% enddocs %}\n\n{% docs last_updated_at %}\nTimestamp when users's was updated.\n{% enddocs %}\n\n{% docs school_id %}\nUnique identifier for the user's school. This info comes from the school finder.\n{% enddocs %}\n\n{% docs newsletter_topic %}\nNewsletter topic. (e.g. community, lifestyle)\n{% enddocs %}\n\n{% docs user_agent %}\nFull user agent string for a user's browser (e.g. \"Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:24.0) Gecko/20100101 Firefox/24.0\")\n{% enddocs %}\n\n{% docs drupal_id %}\nOld Drupal user ID\n{% enddocs %}\n\n{% docs campaigns %}\nCampaigns a user is signed up for.\n{% enddocs %}\n\n{% docs audit %}\nA very useful field with data containing information about changes to a user, e.g. timestamps when the user subscribed and unsubscribed.\n{% enddocs %}\n\n{% docs voting_plan_status %}\nThe indication of the user's plan to vote, e.g. voting, not_voting, cant_vote\n{% enddocs %}\n\n{% docs voting_plan_time_of_day %}\nThe time of day when the user plans to vote, e.g morning, afternoon, evening\n{% enddocs %}\n\n{% docs voting_plan_method_of_transport %}\nHow the user plans to get to their polling place. e.g. walk, drive\n{% enddocs %}\n\n{% docs voting_plan_attending_with %}\nWith Whom the user plans to go voting, e.g. family, friends, alone\n{% enddocs %}\n\n{% docs feature_flags %}\nJSON containing info on features like badges and refer-a-friend.\n{% enddocs %}\n\n{% docs dbt_updated_at %}\nDBT snapshot table data. The updated_at timestamp of the source record when this snapshot row was inserted.\n{% enddocs %}\n\n{% docs dbt_scd_id %}\nDBT snapshot table data. A unique key generated for each snapshotted record.\n{% enddocs %}\n\n{% docs dbt_valid_from %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this snapshot row was first inserted\n{% enddocs %}\n\n{% docs dbt_valid_to %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this row row became invalidated.\n{% enddocs %}\n\n{% docs google_id %}\nUser's Google ID obtained from login.\n{% enddocs %}\n\n{% docs causes %}\nCauses in which a user is interested. e.g. animal welfare, education, mental_health\n{% enddocs %}\n\n{% docs email_subscription_status %}\nEmail subscription status of the user\n{% enddocs %}\n\n{% docs role %}\nUser's role, e.g. user, staff\n{% enddocs %}\n\n{% docs cio_backfilled %}\nWhether this user's data was backfilled from CIO\n{% enddocs %}\n\n{% docs addr_source %}\nWhere the user submitted their address, e.g. sms, GDPR\n{% enddocs %}\n\n{% docs email_subscription_topics %}\nEmail subscription topics correspond to categories in CIO in which the user is interested. e.g. lifestyle, community, scholarship\n{% enddocs %}\n\n{% docs sms_paused %}\nWhether we've paused sending sms messages to the user.\n{% enddocs %}\n\n\n\n\n", "name": "email_subscription_status", "unique_id": "ds_dbt.email_subscription_status", "block_contents": "Email subscription status of the user"}, "ds_dbt.role": {"root_path": "/Users/mrich/projects/quasar/quasar/dbt", "resource_type": "docs", "path": "schema.md", "original_file_path": "models/schema.md", "package_name": "ds_dbt", "file_contents": "\n{% docs click_id %}\nThis is a unique identifier for each click\n{% enddocs %}\n\n{% docs click_time %}\nTimestamp when user clicked.\n{% enddocs %}\n\n{% docs shortened %}\nShortened URL\n{% enddocs %}\n\n{% docs target_url %}\nURL where the user will be directed\n{% enddocs %}\n\n{% docs broadcast_id %}\nID of the broadcast that generated the shortened URL\n{% enddocs %}\n\n{% docs source %}\nSource of the URL (e.g. SMS, web), origin of the post (e.g. phoenix-web, phoenix-ashes, sms), or source where user was acquired. (e.g. sms, phoenix-next)\n{% enddocs %}\n\n{% docs interaction_type %}\nHow the user interacted with the link (e.g. preview, click)\n{% enddocs %}\n\n{% docs id %}\nUnique identifier for the post\n{% enddocs %}\n\n{% docs type %}\nType of post (e.g. photo)\n{% enddocs %}\n\n{% docs action %}\nPost action (e.g. DefendDreamers_Nov9_CongressCalls, GunViolence2018_Feb15_ParklandResponse)\n{% enddocs %}\n\n{% docs status %}\nPost status (e.g. accepted, rejected)\n{% enddocs %}\n\n{% docs quantity %}\nNumerical quantity of items specified in the call to action (e.g. 10, 200)\n{% enddocs %}\n\n{% docs source_bucket %}\nGrouping bucket for origin of the post (e.g. web, sms) \n{% enddocs %}\n\n{% docs created_at %}\nWhen the item was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs updated_at %}\nWhen the item was updated in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs text %}\nText of the post (e.g. \"Zoo animals and a super hero trying to help too!\") \n{% enddocs %}\n\n{% docs signup_id %}\nUnique identifier for the signup \n{% enddocs %}\n\n{% docs post_class %}\nClass of the signup (e.g. \"photo - default\", \"phone-call - DefendDreamers_Jan16_BothBodies\")\n{% enddocs %}\n\n{% docs is_accepted %}\nWhether the post has been accepted to be displayed to the public on the website\n{% enddocs %}\n\n{% docs action_id %}\nInternal identifier of the action \n{% enddocs %}\n\n{% docs location %}\nLocation where the action takes place (e.g. US-NY)\n{% enddocs %}\n\n{% docs postal_code %}\nPostal code where the action takes place\n{% enddocs %}\n\n{% docs is_reportback %}\nWhether the post is a reportback. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs civic_action %}\nWhether the post is a Civic Action. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs scholarship_entry %}\nWhether the post is a Scholarship Entry. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs why_participated %}\nWhy the user participated in this action. Entered by the user.\n{% enddocs %}\n\n{% docs details %}\nDetails about the post. Contains contentfulId and other information (e.g. {\"campaignContentfulId\":\"6ATBgGEQEeJoIcxs1qbwaC\"})\n{% enddocs %}\n\n{% docs email %}\nEmail address of the user.\n{% enddocs %}\n\n{% docs source_details %}\nDetails about the source of the item. This is sometimes represented as a JSON object, and for other tables like Turbovote its represented as a string. (e.g. \"{\"contentful_id\":\"3CTLlXfbwtz1FOMpl31SKV\",\"utm_source\":\"scholarship_listing\",\"utm_medium\":\"referral\",\"utm_campaign\":\"fastweb_2019_08\"}\", newsletter_456)\n{% enddocs %}\n\n{% docs campaign_id %}\nThis is a unique identifier for the campaign\n{% enddocs %}\n\n{% docs campaign_run_id %}\nUnique identifier for the campaign run\n{% enddocs %}\n\n{% docs campaign_name %}\nName of the campaign\n{% enddocs %}\n\n{% docs campaign_cause %}\nCampaign cause (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_run_start_date %}\nStart date of the campaign run\n{% enddocs %}\n\n{% docs campaign_run_end_date %}\nEnd date of the campaign run\n{% enddocs %}\n\n{% docs campaign_created_date %}\nWhen the campaign was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs campaign_node_id %}\nInternal unique node id for the campaign\n{% enddocs %}\n\n{% docs campaign_node_id_title %}\nCampaign title\n{% enddocs %}\n\n{% docs campaign_run_id_title %}\nTitle of the campaign run\n{% enddocs %}\n\n{% docs campaign_action_type %}\nCampaign action type (eg. Make Something, Share Something)\n{% enddocs %}\n\n{% docs campaign_cause_type %}\nCampaign cause type (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_noun %}\nNoun applicable to the user's action\n{% enddocs %}\n\n{% docs campaign_verb %}\nVerb describing the action the user should take\n{% enddocs %}\n\n{% docs campaign_cta %}\nCampaign's call to action\n{% enddocs %}\n\n{% docs campaign_language %}\n\"Language in which the campaign is available\"\n{% enddocs %}\n\n{% docs agent_id %}\nIf set, the content type of the picture the member is sending us. Exp. image/png.\n{% enddocs %}\n\n{% docs attachment_content_type %}\nIf set, the handle of the Front agent this outbound support message is from.\n{% enddocs %}\n\n{% docs topic %}\nHolds a reference to the **last** campaign topic the member's conversation was in. This is useful to allow members to talk to Gambit and get quick responses (through Rivescript), without Gambit completely forgetting what state the member's interaction with a campaign topic was in.\n{% enddocs %}\n\n{% docs action_serial_id %}\nSerial id for the user's action. Depends on the source of the action. May be the bertly click id, sms message id, etc.\n{% enddocs %}\n\n{% docs channel %}\nChannel for the user's action. Depends on the source of the action. (e.g. web, sms)\n{% enddocs %}\n\n{% docs first_action_month %}\nMonth during which the user took their first action. \n{% enddocs %}\n\n{% docs event_id %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs event_source %}\nApplication source for event (eg. Phoenix, Northstar)\n{% enddocs %}\n\n{% docs event_datetime %}\nWhen the event occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs event_name %}\nName of the event (eg. northstar_submitted_register, https://docs.google.com/spreadsheets/d/1lm-fGrIm85nUTxSojqyCt_Ehmm1zEbViFhKpxcJiz1A/edit#gid=406441516)\n{% enddocs %}\n\n{% docs event_type %}\nType of event (pv = 'Page View', se = 'Structured Event')\n{% enddocs %}\n\n{% docs host %}\nURL host where event occurred (eg. www.dosomething.org or identity.dosomething.org)\n{% enddocs %}\n\n{% docs path %}\nURL path event occurred at (eg. /login or /us/campaigns/huddle-for-heroes)\n{% enddocs %}\n\n{% docs query_parameters %}\nOptional query parameters for the request (eg. query=huddle)\n{% enddocs %}\n\n{% docs se_category %}\nCategory of event (eg. focused_field, authentication) - Custom structured event\n{% enddocs %}\n\n{% docs se_action %}\nAction performed / event name (eg. form_submitted, action_failed) - Custom structured event\n{% enddocs %}\n\n{% docs se_label %}\nThe object of the action (eg. first_name, register, voter_reg_status) - Custom structured event\n{% enddocs %}\n\n{% docs session_id %}\nUnique identifier of the user's session\n{% enddocs %}\n\n{% docs session_counter %}\nHow many sessions a user has started\n{% enddocs %}\n\n{% docs browser_size %}\nWhich type of browser a user is using (eg. Mobile, Desktop)\n{% enddocs %}\n\n{% docs northstar_id %}\nThe Northstar ID of the user who generated the event\n{% enddocs %}\n\n{% docs device_id %}\nID of the device used\n{% enddocs %}\n\n{% docs referrer_host %}\nURL host of the referring site (eg. google.com)\n{% enddocs %}\n\n{% docs referrer_path %}\nURL path from referring site (eg. /10-stats-on-teen-drug-and-alcohol-use/)\n{% enddocs %}\n\n{% docs referrer_source %}\nReferrer source name (eg. Google, Facebook)\n{% enddocs %}\n\n{% docs utm_source %}\nTracks where the traffic is coming from. (eg. scholarship_listing, Facebook)\n{% enddocs %}\n\n{% docs utm_medium %}\nHow the traffic got to the platform (eg. referral, CPC)\n{% enddocs %}\n\n{% docs utm_campaign %}\nTracks which campaign the traffic was generated by. Shows up in Google Analytics as Campaign Name (eg. editorial_newsletter)\n{% enddocs %}\n\n{% docs url %}\nURL of campaign (eg. https://dosome.click/nyn5m7)\n{% enddocs %}\n\n{% docs modal_type %}\nNULL or SURVEY_MODAL\n{% enddocs %}\n\n{% docs landing_datetime %}\nWhen the session started in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs ending_datetime %}\nWhen the session ended in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs session_duration_seconds %}\nSession duration in seconds\n{% enddocs %}\n\n{% docs num_pages_views %}\nNumber of pages viewed in session\n{% enddocs %}\n\n{% docs landing_page %}\nFirst page the user viewed in the session (eg. /us/facts/11-facts-about-bp-oil-spill)\n{% enddocs %}\n\n{% docs exit_page %}\n\"Which page the user ended or exited their session from (eg. /us/campaigns/green-your-getaway)\"\n{% enddocs %}\n\n{% docs days_since_last_session %}\n\"Days since their last session.\"\n{% enddocs %}\n\n{% docs post_type %}\nType of post, (e.g. photo, voter-reg)\n{% enddocs %}\n\n{% docs noun %}\nNoun that corresponds to the item in the call to action that was delivered. (e.g. drawings, tweets)\n{% enddocs %}\n\n{% docs verb %}\nVerb corresponding to the action the user took. (e.g. shared, sent, taken)\n{% enddocs %}\n\n{% docs deleted_at %}\nDate time in UTC when a user deleted their post.\n{% enddocs %}\n\n{% docs _fivetran_deleted %}\nMarks rows that were deleted in the source table\n{% enddocs %}\n\n{% docs _fivetran_synced %}\n(UTC timestamp) keeps track of when each row was last successfully synced\n{% enddocs %}\n\n{% docs reportback %}\nWhether the post is a reportback \n{% enddocs %}\n\n{% docs active %}\nWhether the user is active \n{% enddocs %}\n\n{% docs anonymous %}\nWhether the user is anonymous when making the post \n{% enddocs %}\n\n{% docs callpower_campaign_id %}\nUnique ID corresponding to the Callpower campaign. Callpower allows users to record messages for their representatives.\n{% enddocs %}\n\n{% docs quiz %}\nWhether the post is a quiz \n{% enddocs %}\n\n{% docs action_type %}\nType of action the user took. (e.g. share-something, donate-something)\n{% enddocs %}\n\n{% docs online %}\nWhether the action is a online as opposed to IRL.\n{% enddocs %}\n\n{% docs time_commitment %}\nEstimated time required to do the action (e.g. 3.0+, <0.5)\n{% enddocs %}\n\n{% docs num_signups %}\nQuantity of campaign signups\n{% enddocs %}\n\n{% docs most_recent_signup %}\nTimestamp of the most recent signup in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs num_rbs %}\nQuantity of reportbacks for the user\n{% enddocs %}\n\n{% docs total_quantity %}\nTotal quantity of items in reportbacks\n{% enddocs %}\n\n{% docs most_recent_rb %}\nWhen the most recent reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs first_rb %}\nWhen the first reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs avg_time_betw_rbs %}\nCalculated average time between reportbacks.\n{% enddocs %}\n\n{% docs avg_days_next_action_after_rb %}\nCalculated average days until next action after reportback\n{% enddocs %}\n\n{% docs days_to_next_action_after_last_rb %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs most_recent_mam_action %}\nMost recent monthly active member qualifying action in UTC (eg. 2018-01-01 12:00:00).\n{% enddocs %}\n\n{% docs most_recent_email_open %}\nMost recent email open in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs most_recent_all_actions %}\nMost recent timestamp of any action in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs last_action_is_rb %}\nWhether the last action the user took was a reportback\n{% enddocs %}\n\n{% docs days_since_last_action %}\nDays since the user's last action\n{% enddocs %}\n\n{% docs time_to_first_rb %}\nHow much time after registering until the user's first reportback\n{% enddocs %}\n\n{% docs sms_unsubscribed_at %}\nTimestamp of when user unsubscribed from SMS messaging\n{% enddocs %}\n\n{% docs user_unsubscribed_at %}\nTimestamp of when user unsubscribed from email or sms\n{% enddocs %}\n\n{% docs voter_reg_acquisition %}\nWhether the user was an acquisition through voter registration efforts. \n{% enddocs %}\n\n{% docs last_logged_in %}\nDate time in UTC when user last logged in to Northstar\n{% enddocs %}\n\n{% docs last_accessed %}\nDate time in UTC when user last access the website\n{% enddocs %}\n\n{% docs last_messaged_at %}\nDate time in UTC when user was last sent a message via SMS or email\n{% enddocs %}\n\n{% docs facebook_id %}\nUser's facebook id\n{% enddocs %}\n\n{% docs mobile %}\nUsers's mobile phone number\n{% enddocs %}\n\n{% docs birthdate %}\nUser's birthdate\n{% enddocs %}\n\n{% docs first_name %}\nUser's first name\n{% enddocs %}\n\n{% docs last_name %}\nUser's last name\n{% enddocs %}\n\n{% docs voter_registration_status %}\nUser's registration status. (e.g. registration_complete, confirmed, uncertain) \n{% enddocs %}\n\n{% docs finish_with_state %}\nIf the registrant was eligible to use and passed through to complete their registration with their state\u2019s OVR system, it will be indicated in this field (direct quote from Rock-The-Vote documentation). Yes/No value in field.\n{% enddocs %}\n\n{% docs reportback_volume %}\nThis field returns 1 if non voter-reg action, since campaigns team only counts those a 1 reportback. If voter-reg action, we want to count quantity of post as number of registered voters.\n{% enddocs %}\n\n{% docs address_street_1 %}\nFirst line of user's street address\n{% enddocs %}\n\n{% docs address_street_2 %}\nSecond line of user's street address\n{% enddocs %}\n\n{% docs city %}\nUser's city\n{% enddocs %}\n\n{% docs state %}\nUser's state\n{% enddocs %}\n\n{% docs country %}\nUser's country\n{% enddocs %}\n\n{% docs language %}\nUser's language\n{% enddocs %}\n\n{% docs cio_status %}\nStatus of user from CIO. (e.g. customer_subscribed, customer_unsubscribed)\n{% enddocs %}\n\n{% docs cio_status_timestamp %}\nTimestamp when users's status was updated.\n{% enddocs %}\n\n{% docs sms_status %}\nCurrent SMS status. (e.g. undeliverable, unknown)\n{% enddocs %}\n\n{% docs source_detail %}\nDetails of the origin of the user. (e.g. tell_a_friend, other, opt_in_path/197981)\n{% enddocs %}\n\n{% docs badges %}\nWhether the user has any badges. \n{% enddocs %}\n\n{% docs refer_friends %}\nWhether the user is a part of the refer a friend campaign. \n{% enddocs %}\n\n{% docs subscribed_member %}\nWhether the user is subscribed. \n{% enddocs %}\n\n{% docs last_updated_at %}\nTimestamp when users's was updated.\n{% enddocs %}\n\n{% docs school_id %}\nUnique identifier for the user's school. This info comes from the school finder.\n{% enddocs %}\n\n{% docs newsletter_topic %}\nNewsletter topic. (e.g. community, lifestyle)\n{% enddocs %}\n\n{% docs user_agent %}\nFull user agent string for a user's browser (e.g. \"Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:24.0) Gecko/20100101 Firefox/24.0\")\n{% enddocs %}\n\n{% docs drupal_id %}\nOld Drupal user ID\n{% enddocs %}\n\n{% docs campaigns %}\nCampaigns a user is signed up for.\n{% enddocs %}\n\n{% docs audit %}\nA very useful field with data containing information about changes to a user, e.g. timestamps when the user subscribed and unsubscribed.\n{% enddocs %}\n\n{% docs voting_plan_status %}\nThe indication of the user's plan to vote, e.g. voting, not_voting, cant_vote\n{% enddocs %}\n\n{% docs voting_plan_time_of_day %}\nThe time of day when the user plans to vote, e.g morning, afternoon, evening\n{% enddocs %}\n\n{% docs voting_plan_method_of_transport %}\nHow the user plans to get to their polling place. e.g. walk, drive\n{% enddocs %}\n\n{% docs voting_plan_attending_with %}\nWith Whom the user plans to go voting, e.g. family, friends, alone\n{% enddocs %}\n\n{% docs feature_flags %}\nJSON containing info on features like badges and refer-a-friend.\n{% enddocs %}\n\n{% docs dbt_updated_at %}\nDBT snapshot table data. The updated_at timestamp of the source record when this snapshot row was inserted.\n{% enddocs %}\n\n{% docs dbt_scd_id %}\nDBT snapshot table data. A unique key generated for each snapshotted record.\n{% enddocs %}\n\n{% docs dbt_valid_from %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this snapshot row was first inserted\n{% enddocs %}\n\n{% docs dbt_valid_to %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this row row became invalidated.\n{% enddocs %}\n\n{% docs google_id %}\nUser's Google ID obtained from login.\n{% enddocs %}\n\n{% docs causes %}\nCauses in which a user is interested. e.g. animal welfare, education, mental_health\n{% enddocs %}\n\n{% docs email_subscription_status %}\nEmail subscription status of the user\n{% enddocs %}\n\n{% docs role %}\nUser's role, e.g. user, staff\n{% enddocs %}\n\n{% docs cio_backfilled %}\nWhether this user's data was backfilled from CIO\n{% enddocs %}\n\n{% docs addr_source %}\nWhere the user submitted their address, e.g. sms, GDPR\n{% enddocs %}\n\n{% docs email_subscription_topics %}\nEmail subscription topics correspond to categories in CIO in which the user is interested. e.g. lifestyle, community, scholarship\n{% enddocs %}\n\n{% docs sms_paused %}\nWhether we've paused sending sms messages to the user.\n{% enddocs %}\n\n\n\n\n", "name": "role", "unique_id": "ds_dbt.role", "block_contents": "User's role, e.g. user, staff"}, "ds_dbt.cio_backfilled": {"root_path": "/Users/mrich/projects/quasar/quasar/dbt", "resource_type": "docs", "path": "schema.md", "original_file_path": "models/schema.md", "package_name": "ds_dbt", "file_contents": "\n{% docs click_id %}\nThis is a unique identifier for each click\n{% enddocs %}\n\n{% docs click_time %}\nTimestamp when user clicked.\n{% enddocs %}\n\n{% docs shortened %}\nShortened URL\n{% enddocs %}\n\n{% docs target_url %}\nURL where the user will be directed\n{% enddocs %}\n\n{% docs broadcast_id %}\nID of the broadcast that generated the shortened URL\n{% enddocs %}\n\n{% docs source %}\nSource of the URL (e.g. SMS, web), origin of the post (e.g. phoenix-web, phoenix-ashes, sms), or source where user was acquired. (e.g. sms, phoenix-next)\n{% enddocs %}\n\n{% docs interaction_type %}\nHow the user interacted with the link (e.g. preview, click)\n{% enddocs %}\n\n{% docs id %}\nUnique identifier for the post\n{% enddocs %}\n\n{% docs type %}\nType of post (e.g. photo)\n{% enddocs %}\n\n{% docs action %}\nPost action (e.g. DefendDreamers_Nov9_CongressCalls, GunViolence2018_Feb15_ParklandResponse)\n{% enddocs %}\n\n{% docs status %}\nPost status (e.g. accepted, rejected)\n{% enddocs %}\n\n{% docs quantity %}\nNumerical quantity of items specified in the call to action (e.g. 10, 200)\n{% enddocs %}\n\n{% docs source_bucket %}\nGrouping bucket for origin of the post (e.g. web, sms) \n{% enddocs %}\n\n{% docs created_at %}\nWhen the item was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs updated_at %}\nWhen the item was updated in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs text %}\nText of the post (e.g. \"Zoo animals and a super hero trying to help too!\") \n{% enddocs %}\n\n{% docs signup_id %}\nUnique identifier for the signup \n{% enddocs %}\n\n{% docs post_class %}\nClass of the signup (e.g. \"photo - default\", \"phone-call - DefendDreamers_Jan16_BothBodies\")\n{% enddocs %}\n\n{% docs is_accepted %}\nWhether the post has been accepted to be displayed to the public on the website\n{% enddocs %}\n\n{% docs action_id %}\nInternal identifier of the action \n{% enddocs %}\n\n{% docs location %}\nLocation where the action takes place (e.g. US-NY)\n{% enddocs %}\n\n{% docs postal_code %}\nPostal code where the action takes place\n{% enddocs %}\n\n{% docs is_reportback %}\nWhether the post is a reportback. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs civic_action %}\nWhether the post is a Civic Action. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs scholarship_entry %}\nWhether the post is a Scholarship Entry. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs why_participated %}\nWhy the user participated in this action. Entered by the user.\n{% enddocs %}\n\n{% docs details %}\nDetails about the post. Contains contentfulId and other information (e.g. {\"campaignContentfulId\":\"6ATBgGEQEeJoIcxs1qbwaC\"})\n{% enddocs %}\n\n{% docs email %}\nEmail address of the user.\n{% enddocs %}\n\n{% docs source_details %}\nDetails about the source of the item. This is sometimes represented as a JSON object, and for other tables like Turbovote its represented as a string. (e.g. \"{\"contentful_id\":\"3CTLlXfbwtz1FOMpl31SKV\",\"utm_source\":\"scholarship_listing\",\"utm_medium\":\"referral\",\"utm_campaign\":\"fastweb_2019_08\"}\", newsletter_456)\n{% enddocs %}\n\n{% docs campaign_id %}\nThis is a unique identifier for the campaign\n{% enddocs %}\n\n{% docs campaign_run_id %}\nUnique identifier for the campaign run\n{% enddocs %}\n\n{% docs campaign_name %}\nName of the campaign\n{% enddocs %}\n\n{% docs campaign_cause %}\nCampaign cause (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_run_start_date %}\nStart date of the campaign run\n{% enddocs %}\n\n{% docs campaign_run_end_date %}\nEnd date of the campaign run\n{% enddocs %}\n\n{% docs campaign_created_date %}\nWhen the campaign was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs campaign_node_id %}\nInternal unique node id for the campaign\n{% enddocs %}\n\n{% docs campaign_node_id_title %}\nCampaign title\n{% enddocs %}\n\n{% docs campaign_run_id_title %}\nTitle of the campaign run\n{% enddocs %}\n\n{% docs campaign_action_type %}\nCampaign action type (eg. Make Something, Share Something)\n{% enddocs %}\n\n{% docs campaign_cause_type %}\nCampaign cause type (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_noun %}\nNoun applicable to the user's action\n{% enddocs %}\n\n{% docs campaign_verb %}\nVerb describing the action the user should take\n{% enddocs %}\n\n{% docs campaign_cta %}\nCampaign's call to action\n{% enddocs %}\n\n{% docs campaign_language %}\n\"Language in which the campaign is available\"\n{% enddocs %}\n\n{% docs agent_id %}\nIf set, the content type of the picture the member is sending us. Exp. image/png.\n{% enddocs %}\n\n{% docs attachment_content_type %}\nIf set, the handle of the Front agent this outbound support message is from.\n{% enddocs %}\n\n{% docs topic %}\nHolds a reference to the **last** campaign topic the member's conversation was in. This is useful to allow members to talk to Gambit and get quick responses (through Rivescript), without Gambit completely forgetting what state the member's interaction with a campaign topic was in.\n{% enddocs %}\n\n{% docs action_serial_id %}\nSerial id for the user's action. Depends on the source of the action. May be the bertly click id, sms message id, etc.\n{% enddocs %}\n\n{% docs channel %}\nChannel for the user's action. Depends on the source of the action. (e.g. web, sms)\n{% enddocs %}\n\n{% docs first_action_month %}\nMonth during which the user took their first action. \n{% enddocs %}\n\n{% docs event_id %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs event_source %}\nApplication source for event (eg. Phoenix, Northstar)\n{% enddocs %}\n\n{% docs event_datetime %}\nWhen the event occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs event_name %}\nName of the event (eg. northstar_submitted_register, https://docs.google.com/spreadsheets/d/1lm-fGrIm85nUTxSojqyCt_Ehmm1zEbViFhKpxcJiz1A/edit#gid=406441516)\n{% enddocs %}\n\n{% docs event_type %}\nType of event (pv = 'Page View', se = 'Structured Event')\n{% enddocs %}\n\n{% docs host %}\nURL host where event occurred (eg. www.dosomething.org or identity.dosomething.org)\n{% enddocs %}\n\n{% docs path %}\nURL path event occurred at (eg. /login or /us/campaigns/huddle-for-heroes)\n{% enddocs %}\n\n{% docs query_parameters %}\nOptional query parameters for the request (eg. query=huddle)\n{% enddocs %}\n\n{% docs se_category %}\nCategory of event (eg. focused_field, authentication) - Custom structured event\n{% enddocs %}\n\n{% docs se_action %}\nAction performed / event name (eg. form_submitted, action_failed) - Custom structured event\n{% enddocs %}\n\n{% docs se_label %}\nThe object of the action (eg. first_name, register, voter_reg_status) - Custom structured event\n{% enddocs %}\n\n{% docs session_id %}\nUnique identifier of the user's session\n{% enddocs %}\n\n{% docs session_counter %}\nHow many sessions a user has started\n{% enddocs %}\n\n{% docs browser_size %}\nWhich type of browser a user is using (eg. Mobile, Desktop)\n{% enddocs %}\n\n{% docs northstar_id %}\nThe Northstar ID of the user who generated the event\n{% enddocs %}\n\n{% docs device_id %}\nID of the device used\n{% enddocs %}\n\n{% docs referrer_host %}\nURL host of the referring site (eg. google.com)\n{% enddocs %}\n\n{% docs referrer_path %}\nURL path from referring site (eg. /10-stats-on-teen-drug-and-alcohol-use/)\n{% enddocs %}\n\n{% docs referrer_source %}\nReferrer source name (eg. Google, Facebook)\n{% enddocs %}\n\n{% docs utm_source %}\nTracks where the traffic is coming from. (eg. scholarship_listing, Facebook)\n{% enddocs %}\n\n{% docs utm_medium %}\nHow the traffic got to the platform (eg. referral, CPC)\n{% enddocs %}\n\n{% docs utm_campaign %}\nTracks which campaign the traffic was generated by. Shows up in Google Analytics as Campaign Name (eg. editorial_newsletter)\n{% enddocs %}\n\n{% docs url %}\nURL of campaign (eg. https://dosome.click/nyn5m7)\n{% enddocs %}\n\n{% docs modal_type %}\nNULL or SURVEY_MODAL\n{% enddocs %}\n\n{% docs landing_datetime %}\nWhen the session started in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs ending_datetime %}\nWhen the session ended in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs session_duration_seconds %}\nSession duration in seconds\n{% enddocs %}\n\n{% docs num_pages_views %}\nNumber of pages viewed in session\n{% enddocs %}\n\n{% docs landing_page %}\nFirst page the user viewed in the session (eg. /us/facts/11-facts-about-bp-oil-spill)\n{% enddocs %}\n\n{% docs exit_page %}\n\"Which page the user ended or exited their session from (eg. /us/campaigns/green-your-getaway)\"\n{% enddocs %}\n\n{% docs days_since_last_session %}\n\"Days since their last session.\"\n{% enddocs %}\n\n{% docs post_type %}\nType of post, (e.g. photo, voter-reg)\n{% enddocs %}\n\n{% docs noun %}\nNoun that corresponds to the item in the call to action that was delivered. (e.g. drawings, tweets)\n{% enddocs %}\n\n{% docs verb %}\nVerb corresponding to the action the user took. (e.g. shared, sent, taken)\n{% enddocs %}\n\n{% docs deleted_at %}\nDate time in UTC when a user deleted their post.\n{% enddocs %}\n\n{% docs _fivetran_deleted %}\nMarks rows that were deleted in the source table\n{% enddocs %}\n\n{% docs _fivetran_synced %}\n(UTC timestamp) keeps track of when each row was last successfully synced\n{% enddocs %}\n\n{% docs reportback %}\nWhether the post is a reportback \n{% enddocs %}\n\n{% docs active %}\nWhether the user is active \n{% enddocs %}\n\n{% docs anonymous %}\nWhether the user is anonymous when making the post \n{% enddocs %}\n\n{% docs callpower_campaign_id %}\nUnique ID corresponding to the Callpower campaign. Callpower allows users to record messages for their representatives.\n{% enddocs %}\n\n{% docs quiz %}\nWhether the post is a quiz \n{% enddocs %}\n\n{% docs action_type %}\nType of action the user took. (e.g. share-something, donate-something)\n{% enddocs %}\n\n{% docs online %}\nWhether the action is a online as opposed to IRL.\n{% enddocs %}\n\n{% docs time_commitment %}\nEstimated time required to do the action (e.g. 3.0+, <0.5)\n{% enddocs %}\n\n{% docs num_signups %}\nQuantity of campaign signups\n{% enddocs %}\n\n{% docs most_recent_signup %}\nTimestamp of the most recent signup in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs num_rbs %}\nQuantity of reportbacks for the user\n{% enddocs %}\n\n{% docs total_quantity %}\nTotal quantity of items in reportbacks\n{% enddocs %}\n\n{% docs most_recent_rb %}\nWhen the most recent reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs first_rb %}\nWhen the first reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs avg_time_betw_rbs %}\nCalculated average time between reportbacks.\n{% enddocs %}\n\n{% docs avg_days_next_action_after_rb %}\nCalculated average days until next action after reportback\n{% enddocs %}\n\n{% docs days_to_next_action_after_last_rb %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs most_recent_mam_action %}\nMost recent monthly active member qualifying action in UTC (eg. 2018-01-01 12:00:00).\n{% enddocs %}\n\n{% docs most_recent_email_open %}\nMost recent email open in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs most_recent_all_actions %}\nMost recent timestamp of any action in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs last_action_is_rb %}\nWhether the last action the user took was a reportback\n{% enddocs %}\n\n{% docs days_since_last_action %}\nDays since the user's last action\n{% enddocs %}\n\n{% docs time_to_first_rb %}\nHow much time after registering until the user's first reportback\n{% enddocs %}\n\n{% docs sms_unsubscribed_at %}\nTimestamp of when user unsubscribed from SMS messaging\n{% enddocs %}\n\n{% docs user_unsubscribed_at %}\nTimestamp of when user unsubscribed from email or sms\n{% enddocs %}\n\n{% docs voter_reg_acquisition %}\nWhether the user was an acquisition through voter registration efforts. \n{% enddocs %}\n\n{% docs last_logged_in %}\nDate time in UTC when user last logged in to Northstar\n{% enddocs %}\n\n{% docs last_accessed %}\nDate time in UTC when user last access the website\n{% enddocs %}\n\n{% docs last_messaged_at %}\nDate time in UTC when user was last sent a message via SMS or email\n{% enddocs %}\n\n{% docs facebook_id %}\nUser's facebook id\n{% enddocs %}\n\n{% docs mobile %}\nUsers's mobile phone number\n{% enddocs %}\n\n{% docs birthdate %}\nUser's birthdate\n{% enddocs %}\n\n{% docs first_name %}\nUser's first name\n{% enddocs %}\n\n{% docs last_name %}\nUser's last name\n{% enddocs %}\n\n{% docs voter_registration_status %}\nUser's registration status. (e.g. registration_complete, confirmed, uncertain) \n{% enddocs %}\n\n{% docs finish_with_state %}\nIf the registrant was eligible to use and passed through to complete their registration with their state\u2019s OVR system, it will be indicated in this field (direct quote from Rock-The-Vote documentation). Yes/No value in field.\n{% enddocs %}\n\n{% docs reportback_volume %}\nThis field returns 1 if non voter-reg action, since campaigns team only counts those a 1 reportback. If voter-reg action, we want to count quantity of post as number of registered voters.\n{% enddocs %}\n\n{% docs address_street_1 %}\nFirst line of user's street address\n{% enddocs %}\n\n{% docs address_street_2 %}\nSecond line of user's street address\n{% enddocs %}\n\n{% docs city %}\nUser's city\n{% enddocs %}\n\n{% docs state %}\nUser's state\n{% enddocs %}\n\n{% docs country %}\nUser's country\n{% enddocs %}\n\n{% docs language %}\nUser's language\n{% enddocs %}\n\n{% docs cio_status %}\nStatus of user from CIO. (e.g. customer_subscribed, customer_unsubscribed)\n{% enddocs %}\n\n{% docs cio_status_timestamp %}\nTimestamp when users's status was updated.\n{% enddocs %}\n\n{% docs sms_status %}\nCurrent SMS status. (e.g. undeliverable, unknown)\n{% enddocs %}\n\n{% docs source_detail %}\nDetails of the origin of the user. (e.g. tell_a_friend, other, opt_in_path/197981)\n{% enddocs %}\n\n{% docs badges %}\nWhether the user has any badges. \n{% enddocs %}\n\n{% docs refer_friends %}\nWhether the user is a part of the refer a friend campaign. \n{% enddocs %}\n\n{% docs subscribed_member %}\nWhether the user is subscribed. \n{% enddocs %}\n\n{% docs last_updated_at %}\nTimestamp when users's was updated.\n{% enddocs %}\n\n{% docs school_id %}\nUnique identifier for the user's school. This info comes from the school finder.\n{% enddocs %}\n\n{% docs newsletter_topic %}\nNewsletter topic. (e.g. community, lifestyle)\n{% enddocs %}\n\n{% docs user_agent %}\nFull user agent string for a user's browser (e.g. \"Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:24.0) Gecko/20100101 Firefox/24.0\")\n{% enddocs %}\n\n{% docs drupal_id %}\nOld Drupal user ID\n{% enddocs %}\n\n{% docs campaigns %}\nCampaigns a user is signed up for.\n{% enddocs %}\n\n{% docs audit %}\nA very useful field with data containing information about changes to a user, e.g. timestamps when the user subscribed and unsubscribed.\n{% enddocs %}\n\n{% docs voting_plan_status %}\nThe indication of the user's plan to vote, e.g. voting, not_voting, cant_vote\n{% enddocs %}\n\n{% docs voting_plan_time_of_day %}\nThe time of day when the user plans to vote, e.g morning, afternoon, evening\n{% enddocs %}\n\n{% docs voting_plan_method_of_transport %}\nHow the user plans to get to their polling place. e.g. walk, drive\n{% enddocs %}\n\n{% docs voting_plan_attending_with %}\nWith Whom the user plans to go voting, e.g. family, friends, alone\n{% enddocs %}\n\n{% docs feature_flags %}\nJSON containing info on features like badges and refer-a-friend.\n{% enddocs %}\n\n{% docs dbt_updated_at %}\nDBT snapshot table data. The updated_at timestamp of the source record when this snapshot row was inserted.\n{% enddocs %}\n\n{% docs dbt_scd_id %}\nDBT snapshot table data. A unique key generated for each snapshotted record.\n{% enddocs %}\n\n{% docs dbt_valid_from %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this snapshot row was first inserted\n{% enddocs %}\n\n{% docs dbt_valid_to %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this row row became invalidated.\n{% enddocs %}\n\n{% docs google_id %}\nUser's Google ID obtained from login.\n{% enddocs %}\n\n{% docs causes %}\nCauses in which a user is interested. e.g. animal welfare, education, mental_health\n{% enddocs %}\n\n{% docs email_subscription_status %}\nEmail subscription status of the user\n{% enddocs %}\n\n{% docs role %}\nUser's role, e.g. user, staff\n{% enddocs %}\n\n{% docs cio_backfilled %}\nWhether this user's data was backfilled from CIO\n{% enddocs %}\n\n{% docs addr_source %}\nWhere the user submitted their address, e.g. sms, GDPR\n{% enddocs %}\n\n{% docs email_subscription_topics %}\nEmail subscription topics correspond to categories in CIO in which the user is interested. e.g. lifestyle, community, scholarship\n{% enddocs %}\n\n{% docs sms_paused %}\nWhether we've paused sending sms messages to the user.\n{% enddocs %}\n\n\n\n\n", "name": "cio_backfilled", "unique_id": "ds_dbt.cio_backfilled", "block_contents": "Whether this user's data was backfilled from CIO"}, "ds_dbt.addr_source": {"root_path": "/Users/mrich/projects/quasar/quasar/dbt", "resource_type": "docs", "path": "schema.md", "original_file_path": "models/schema.md", "package_name": "ds_dbt", "file_contents": "\n{% docs click_id %}\nThis is a unique identifier for each click\n{% enddocs %}\n\n{% docs click_time %}\nTimestamp when user clicked.\n{% enddocs %}\n\n{% docs shortened %}\nShortened URL\n{% enddocs %}\n\n{% docs target_url %}\nURL where the user will be directed\n{% enddocs %}\n\n{% docs broadcast_id %}\nID of the broadcast that generated the shortened URL\n{% enddocs %}\n\n{% docs source %}\nSource of the URL (e.g. SMS, web), origin of the post (e.g. phoenix-web, phoenix-ashes, sms), or source where user was acquired. (e.g. sms, phoenix-next)\n{% enddocs %}\n\n{% docs interaction_type %}\nHow the user interacted with the link (e.g. preview, click)\n{% enddocs %}\n\n{% docs id %}\nUnique identifier for the post\n{% enddocs %}\n\n{% docs type %}\nType of post (e.g. photo)\n{% enddocs %}\n\n{% docs action %}\nPost action (e.g. DefendDreamers_Nov9_CongressCalls, GunViolence2018_Feb15_ParklandResponse)\n{% enddocs %}\n\n{% docs status %}\nPost status (e.g. accepted, rejected)\n{% enddocs %}\n\n{% docs quantity %}\nNumerical quantity of items specified in the call to action (e.g. 10, 200)\n{% enddocs %}\n\n{% docs source_bucket %}\nGrouping bucket for origin of the post (e.g. web, sms) \n{% enddocs %}\n\n{% docs created_at %}\nWhen the item was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs updated_at %}\nWhen the item was updated in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs text %}\nText of the post (e.g. \"Zoo animals and a super hero trying to help too!\") \n{% enddocs %}\n\n{% docs signup_id %}\nUnique identifier for the signup \n{% enddocs %}\n\n{% docs post_class %}\nClass of the signup (e.g. \"photo - default\", \"phone-call - DefendDreamers_Jan16_BothBodies\")\n{% enddocs %}\n\n{% docs is_accepted %}\nWhether the post has been accepted to be displayed to the public on the website\n{% enddocs %}\n\n{% docs action_id %}\nInternal identifier of the action \n{% enddocs %}\n\n{% docs location %}\nLocation where the action takes place (e.g. US-NY)\n{% enddocs %}\n\n{% docs postal_code %}\nPostal code where the action takes place\n{% enddocs %}\n\n{% docs is_reportback %}\nWhether the post is a reportback. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs civic_action %}\nWhether the post is a Civic Action. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs scholarship_entry %}\nWhether the post is a Scholarship Entry. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs why_participated %}\nWhy the user participated in this action. Entered by the user.\n{% enddocs %}\n\n{% docs details %}\nDetails about the post. Contains contentfulId and other information (e.g. {\"campaignContentfulId\":\"6ATBgGEQEeJoIcxs1qbwaC\"})\n{% enddocs %}\n\n{% docs email %}\nEmail address of the user.\n{% enddocs %}\n\n{% docs source_details %}\nDetails about the source of the item. This is sometimes represented as a JSON object, and for other tables like Turbovote its represented as a string. (e.g. \"{\"contentful_id\":\"3CTLlXfbwtz1FOMpl31SKV\",\"utm_source\":\"scholarship_listing\",\"utm_medium\":\"referral\",\"utm_campaign\":\"fastweb_2019_08\"}\", newsletter_456)\n{% enddocs %}\n\n{% docs campaign_id %}\nThis is a unique identifier for the campaign\n{% enddocs %}\n\n{% docs campaign_run_id %}\nUnique identifier for the campaign run\n{% enddocs %}\n\n{% docs campaign_name %}\nName of the campaign\n{% enddocs %}\n\n{% docs campaign_cause %}\nCampaign cause (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_run_start_date %}\nStart date of the campaign run\n{% enddocs %}\n\n{% docs campaign_run_end_date %}\nEnd date of the campaign run\n{% enddocs %}\n\n{% docs campaign_created_date %}\nWhen the campaign was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs campaign_node_id %}\nInternal unique node id for the campaign\n{% enddocs %}\n\n{% docs campaign_node_id_title %}\nCampaign title\n{% enddocs %}\n\n{% docs campaign_run_id_title %}\nTitle of the campaign run\n{% enddocs %}\n\n{% docs campaign_action_type %}\nCampaign action type (eg. Make Something, Share Something)\n{% enddocs %}\n\n{% docs campaign_cause_type %}\nCampaign cause type (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_noun %}\nNoun applicable to the user's action\n{% enddocs %}\n\n{% docs campaign_verb %}\nVerb describing the action the user should take\n{% enddocs %}\n\n{% docs campaign_cta %}\nCampaign's call to action\n{% enddocs %}\n\n{% docs campaign_language %}\n\"Language in which the campaign is available\"\n{% enddocs %}\n\n{% docs agent_id %}\nIf set, the content type of the picture the member is sending us. Exp. image/png.\n{% enddocs %}\n\n{% docs attachment_content_type %}\nIf set, the handle of the Front agent this outbound support message is from.\n{% enddocs %}\n\n{% docs topic %}\nHolds a reference to the **last** campaign topic the member's conversation was in. This is useful to allow members to talk to Gambit and get quick responses (through Rivescript), without Gambit completely forgetting what state the member's interaction with a campaign topic was in.\n{% enddocs %}\n\n{% docs action_serial_id %}\nSerial id for the user's action. Depends on the source of the action. May be the bertly click id, sms message id, etc.\n{% enddocs %}\n\n{% docs channel %}\nChannel for the user's action. Depends on the source of the action. (e.g. web, sms)\n{% enddocs %}\n\n{% docs first_action_month %}\nMonth during which the user took their first action. \n{% enddocs %}\n\n{% docs event_id %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs event_source %}\nApplication source for event (eg. Phoenix, Northstar)\n{% enddocs %}\n\n{% docs event_datetime %}\nWhen the event occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs event_name %}\nName of the event (eg. northstar_submitted_register, https://docs.google.com/spreadsheets/d/1lm-fGrIm85nUTxSojqyCt_Ehmm1zEbViFhKpxcJiz1A/edit#gid=406441516)\n{% enddocs %}\n\n{% docs event_type %}\nType of event (pv = 'Page View', se = 'Structured Event')\n{% enddocs %}\n\n{% docs host %}\nURL host where event occurred (eg. www.dosomething.org or identity.dosomething.org)\n{% enddocs %}\n\n{% docs path %}\nURL path event occurred at (eg. /login or /us/campaigns/huddle-for-heroes)\n{% enddocs %}\n\n{% docs query_parameters %}\nOptional query parameters for the request (eg. query=huddle)\n{% enddocs %}\n\n{% docs se_category %}\nCategory of event (eg. focused_field, authentication) - Custom structured event\n{% enddocs %}\n\n{% docs se_action %}\nAction performed / event name (eg. form_submitted, action_failed) - Custom structured event\n{% enddocs %}\n\n{% docs se_label %}\nThe object of the action (eg. first_name, register, voter_reg_status) - Custom structured event\n{% enddocs %}\n\n{% docs session_id %}\nUnique identifier of the user's session\n{% enddocs %}\n\n{% docs session_counter %}\nHow many sessions a user has started\n{% enddocs %}\n\n{% docs browser_size %}\nWhich type of browser a user is using (eg. Mobile, Desktop)\n{% enddocs %}\n\n{% docs northstar_id %}\nThe Northstar ID of the user who generated the event\n{% enddocs %}\n\n{% docs device_id %}\nID of the device used\n{% enddocs %}\n\n{% docs referrer_host %}\nURL host of the referring site (eg. google.com)\n{% enddocs %}\n\n{% docs referrer_path %}\nURL path from referring site (eg. /10-stats-on-teen-drug-and-alcohol-use/)\n{% enddocs %}\n\n{% docs referrer_source %}\nReferrer source name (eg. Google, Facebook)\n{% enddocs %}\n\n{% docs utm_source %}\nTracks where the traffic is coming from. (eg. scholarship_listing, Facebook)\n{% enddocs %}\n\n{% docs utm_medium %}\nHow the traffic got to the platform (eg. referral, CPC)\n{% enddocs %}\n\n{% docs utm_campaign %}\nTracks which campaign the traffic was generated by. Shows up in Google Analytics as Campaign Name (eg. editorial_newsletter)\n{% enddocs %}\n\n{% docs url %}\nURL of campaign (eg. https://dosome.click/nyn5m7)\n{% enddocs %}\n\n{% docs modal_type %}\nNULL or SURVEY_MODAL\n{% enddocs %}\n\n{% docs landing_datetime %}\nWhen the session started in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs ending_datetime %}\nWhen the session ended in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs session_duration_seconds %}\nSession duration in seconds\n{% enddocs %}\n\n{% docs num_pages_views %}\nNumber of pages viewed in session\n{% enddocs %}\n\n{% docs landing_page %}\nFirst page the user viewed in the session (eg. /us/facts/11-facts-about-bp-oil-spill)\n{% enddocs %}\n\n{% docs exit_page %}\n\"Which page the user ended or exited their session from (eg. /us/campaigns/green-your-getaway)\"\n{% enddocs %}\n\n{% docs days_since_last_session %}\n\"Days since their last session.\"\n{% enddocs %}\n\n{% docs post_type %}\nType of post, (e.g. photo, voter-reg)\n{% enddocs %}\n\n{% docs noun %}\nNoun that corresponds to the item in the call to action that was delivered. (e.g. drawings, tweets)\n{% enddocs %}\n\n{% docs verb %}\nVerb corresponding to the action the user took. (e.g. shared, sent, taken)\n{% enddocs %}\n\n{% docs deleted_at %}\nDate time in UTC when a user deleted their post.\n{% enddocs %}\n\n{% docs _fivetran_deleted %}\nMarks rows that were deleted in the source table\n{% enddocs %}\n\n{% docs _fivetran_synced %}\n(UTC timestamp) keeps track of when each row was last successfully synced\n{% enddocs %}\n\n{% docs reportback %}\nWhether the post is a reportback \n{% enddocs %}\n\n{% docs active %}\nWhether the user is active \n{% enddocs %}\n\n{% docs anonymous %}\nWhether the user is anonymous when making the post \n{% enddocs %}\n\n{% docs callpower_campaign_id %}\nUnique ID corresponding to the Callpower campaign. Callpower allows users to record messages for their representatives.\n{% enddocs %}\n\n{% docs quiz %}\nWhether the post is a quiz \n{% enddocs %}\n\n{% docs action_type %}\nType of action the user took. (e.g. share-something, donate-something)\n{% enddocs %}\n\n{% docs online %}\nWhether the action is a online as opposed to IRL.\n{% enddocs %}\n\n{% docs time_commitment %}\nEstimated time required to do the action (e.g. 3.0+, <0.5)\n{% enddocs %}\n\n{% docs num_signups %}\nQuantity of campaign signups\n{% enddocs %}\n\n{% docs most_recent_signup %}\nTimestamp of the most recent signup in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs num_rbs %}\nQuantity of reportbacks for the user\n{% enddocs %}\n\n{% docs total_quantity %}\nTotal quantity of items in reportbacks\n{% enddocs %}\n\n{% docs most_recent_rb %}\nWhen the most recent reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs first_rb %}\nWhen the first reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs avg_time_betw_rbs %}\nCalculated average time between reportbacks.\n{% enddocs %}\n\n{% docs avg_days_next_action_after_rb %}\nCalculated average days until next action after reportback\n{% enddocs %}\n\n{% docs days_to_next_action_after_last_rb %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs most_recent_mam_action %}\nMost recent monthly active member qualifying action in UTC (eg. 2018-01-01 12:00:00).\n{% enddocs %}\n\n{% docs most_recent_email_open %}\nMost recent email open in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs most_recent_all_actions %}\nMost recent timestamp of any action in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs last_action_is_rb %}\nWhether the last action the user took was a reportback\n{% enddocs %}\n\n{% docs days_since_last_action %}\nDays since the user's last action\n{% enddocs %}\n\n{% docs time_to_first_rb %}\nHow much time after registering until the user's first reportback\n{% enddocs %}\n\n{% docs sms_unsubscribed_at %}\nTimestamp of when user unsubscribed from SMS messaging\n{% enddocs %}\n\n{% docs user_unsubscribed_at %}\nTimestamp of when user unsubscribed from email or sms\n{% enddocs %}\n\n{% docs voter_reg_acquisition %}\nWhether the user was an acquisition through voter registration efforts. \n{% enddocs %}\n\n{% docs last_logged_in %}\nDate time in UTC when user last logged in to Northstar\n{% enddocs %}\n\n{% docs last_accessed %}\nDate time in UTC when user last access the website\n{% enddocs %}\n\n{% docs last_messaged_at %}\nDate time in UTC when user was last sent a message via SMS or email\n{% enddocs %}\n\n{% docs facebook_id %}\nUser's facebook id\n{% enddocs %}\n\n{% docs mobile %}\nUsers's mobile phone number\n{% enddocs %}\n\n{% docs birthdate %}\nUser's birthdate\n{% enddocs %}\n\n{% docs first_name %}\nUser's first name\n{% enddocs %}\n\n{% docs last_name %}\nUser's last name\n{% enddocs %}\n\n{% docs voter_registration_status %}\nUser's registration status. (e.g. registration_complete, confirmed, uncertain) \n{% enddocs %}\n\n{% docs finish_with_state %}\nIf the registrant was eligible to use and passed through to complete their registration with their state\u2019s OVR system, it will be indicated in this field (direct quote from Rock-The-Vote documentation). Yes/No value in field.\n{% enddocs %}\n\n{% docs reportback_volume %}\nThis field returns 1 if non voter-reg action, since campaigns team only counts those a 1 reportback. If voter-reg action, we want to count quantity of post as number of registered voters.\n{% enddocs %}\n\n{% docs address_street_1 %}\nFirst line of user's street address\n{% enddocs %}\n\n{% docs address_street_2 %}\nSecond line of user's street address\n{% enddocs %}\n\n{% docs city %}\nUser's city\n{% enddocs %}\n\n{% docs state %}\nUser's state\n{% enddocs %}\n\n{% docs country %}\nUser's country\n{% enddocs %}\n\n{% docs language %}\nUser's language\n{% enddocs %}\n\n{% docs cio_status %}\nStatus of user from CIO. (e.g. customer_subscribed, customer_unsubscribed)\n{% enddocs %}\n\n{% docs cio_status_timestamp %}\nTimestamp when users's status was updated.\n{% enddocs %}\n\n{% docs sms_status %}\nCurrent SMS status. (e.g. undeliverable, unknown)\n{% enddocs %}\n\n{% docs source_detail %}\nDetails of the origin of the user. (e.g. tell_a_friend, other, opt_in_path/197981)\n{% enddocs %}\n\n{% docs badges %}\nWhether the user has any badges. \n{% enddocs %}\n\n{% docs refer_friends %}\nWhether the user is a part of the refer a friend campaign. \n{% enddocs %}\n\n{% docs subscribed_member %}\nWhether the user is subscribed. \n{% enddocs %}\n\n{% docs last_updated_at %}\nTimestamp when users's was updated.\n{% enddocs %}\n\n{% docs school_id %}\nUnique identifier for the user's school. This info comes from the school finder.\n{% enddocs %}\n\n{% docs newsletter_topic %}\nNewsletter topic. (e.g. community, lifestyle)\n{% enddocs %}\n\n{% docs user_agent %}\nFull user agent string for a user's browser (e.g. \"Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:24.0) Gecko/20100101 Firefox/24.0\")\n{% enddocs %}\n\n{% docs drupal_id %}\nOld Drupal user ID\n{% enddocs %}\n\n{% docs campaigns %}\nCampaigns a user is signed up for.\n{% enddocs %}\n\n{% docs audit %}\nA very useful field with data containing information about changes to a user, e.g. timestamps when the user subscribed and unsubscribed.\n{% enddocs %}\n\n{% docs voting_plan_status %}\nThe indication of the user's plan to vote, e.g. voting, not_voting, cant_vote\n{% enddocs %}\n\n{% docs voting_plan_time_of_day %}\nThe time of day when the user plans to vote, e.g morning, afternoon, evening\n{% enddocs %}\n\n{% docs voting_plan_method_of_transport %}\nHow the user plans to get to their polling place. e.g. walk, drive\n{% enddocs %}\n\n{% docs voting_plan_attending_with %}\nWith Whom the user plans to go voting, e.g. family, friends, alone\n{% enddocs %}\n\n{% docs feature_flags %}\nJSON containing info on features like badges and refer-a-friend.\n{% enddocs %}\n\n{% docs dbt_updated_at %}\nDBT snapshot table data. The updated_at timestamp of the source record when this snapshot row was inserted.\n{% enddocs %}\n\n{% docs dbt_scd_id %}\nDBT snapshot table data. A unique key generated for each snapshotted record.\n{% enddocs %}\n\n{% docs dbt_valid_from %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this snapshot row was first inserted\n{% enddocs %}\n\n{% docs dbt_valid_to %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this row row became invalidated.\n{% enddocs %}\n\n{% docs google_id %}\nUser's Google ID obtained from login.\n{% enddocs %}\n\n{% docs causes %}\nCauses in which a user is interested. e.g. animal welfare, education, mental_health\n{% enddocs %}\n\n{% docs email_subscription_status %}\nEmail subscription status of the user\n{% enddocs %}\n\n{% docs role %}\nUser's role, e.g. user, staff\n{% enddocs %}\n\n{% docs cio_backfilled %}\nWhether this user's data was backfilled from CIO\n{% enddocs %}\n\n{% docs addr_source %}\nWhere the user submitted their address, e.g. sms, GDPR\n{% enddocs %}\n\n{% docs email_subscription_topics %}\nEmail subscription topics correspond to categories in CIO in which the user is interested. e.g. lifestyle, community, scholarship\n{% enddocs %}\n\n{% docs sms_paused %}\nWhether we've paused sending sms messages to the user.\n{% enddocs %}\n\n\n\n\n", "name": "addr_source", "unique_id": "ds_dbt.addr_source", "block_contents": "Where the user submitted their address, e.g. sms, GDPR"}, "ds_dbt.email_subscription_topics": {"root_path": "/Users/mrich/projects/quasar/quasar/dbt", "resource_type": "docs", "path": "schema.md", "original_file_path": "models/schema.md", "package_name": "ds_dbt", "file_contents": "\n{% docs click_id %}\nThis is a unique identifier for each click\n{% enddocs %}\n\n{% docs click_time %}\nTimestamp when user clicked.\n{% enddocs %}\n\n{% docs shortened %}\nShortened URL\n{% enddocs %}\n\n{% docs target_url %}\nURL where the user will be directed\n{% enddocs %}\n\n{% docs broadcast_id %}\nID of the broadcast that generated the shortened URL\n{% enddocs %}\n\n{% docs source %}\nSource of the URL (e.g. SMS, web), origin of the post (e.g. phoenix-web, phoenix-ashes, sms), or source where user was acquired. (e.g. sms, phoenix-next)\n{% enddocs %}\n\n{% docs interaction_type %}\nHow the user interacted with the link (e.g. preview, click)\n{% enddocs %}\n\n{% docs id %}\nUnique identifier for the post\n{% enddocs %}\n\n{% docs type %}\nType of post (e.g. photo)\n{% enddocs %}\n\n{% docs action %}\nPost action (e.g. DefendDreamers_Nov9_CongressCalls, GunViolence2018_Feb15_ParklandResponse)\n{% enddocs %}\n\n{% docs status %}\nPost status (e.g. accepted, rejected)\n{% enddocs %}\n\n{% docs quantity %}\nNumerical quantity of items specified in the call to action (e.g. 10, 200)\n{% enddocs %}\n\n{% docs source_bucket %}\nGrouping bucket for origin of the post (e.g. web, sms) \n{% enddocs %}\n\n{% docs created_at %}\nWhen the item was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs updated_at %}\nWhen the item was updated in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs text %}\nText of the post (e.g. \"Zoo animals and a super hero trying to help too!\") \n{% enddocs %}\n\n{% docs signup_id %}\nUnique identifier for the signup \n{% enddocs %}\n\n{% docs post_class %}\nClass of the signup (e.g. \"photo - default\", \"phone-call - DefendDreamers_Jan16_BothBodies\")\n{% enddocs %}\n\n{% docs is_accepted %}\nWhether the post has been accepted to be displayed to the public on the website\n{% enddocs %}\n\n{% docs action_id %}\nInternal identifier of the action \n{% enddocs %}\n\n{% docs location %}\nLocation where the action takes place (e.g. US-NY)\n{% enddocs %}\n\n{% docs postal_code %}\nPostal code where the action takes place\n{% enddocs %}\n\n{% docs is_reportback %}\nWhether the post is a reportback. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs civic_action %}\nWhether the post is a Civic Action. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs scholarship_entry %}\nWhether the post is a Scholarship Entry. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs why_participated %}\nWhy the user participated in this action. Entered by the user.\n{% enddocs %}\n\n{% docs details %}\nDetails about the post. Contains contentfulId and other information (e.g. {\"campaignContentfulId\":\"6ATBgGEQEeJoIcxs1qbwaC\"})\n{% enddocs %}\n\n{% docs email %}\nEmail address of the user.\n{% enddocs %}\n\n{% docs source_details %}\nDetails about the source of the item. This is sometimes represented as a JSON object, and for other tables like Turbovote its represented as a string. (e.g. \"{\"contentful_id\":\"3CTLlXfbwtz1FOMpl31SKV\",\"utm_source\":\"scholarship_listing\",\"utm_medium\":\"referral\",\"utm_campaign\":\"fastweb_2019_08\"}\", newsletter_456)\n{% enddocs %}\n\n{% docs campaign_id %}\nThis is a unique identifier for the campaign\n{% enddocs %}\n\n{% docs campaign_run_id %}\nUnique identifier for the campaign run\n{% enddocs %}\n\n{% docs campaign_name %}\nName of the campaign\n{% enddocs %}\n\n{% docs campaign_cause %}\nCampaign cause (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_run_start_date %}\nStart date of the campaign run\n{% enddocs %}\n\n{% docs campaign_run_end_date %}\nEnd date of the campaign run\n{% enddocs %}\n\n{% docs campaign_created_date %}\nWhen the campaign was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs campaign_node_id %}\nInternal unique node id for the campaign\n{% enddocs %}\n\n{% docs campaign_node_id_title %}\nCampaign title\n{% enddocs %}\n\n{% docs campaign_run_id_title %}\nTitle of the campaign run\n{% enddocs %}\n\n{% docs campaign_action_type %}\nCampaign action type (eg. Make Something, Share Something)\n{% enddocs %}\n\n{% docs campaign_cause_type %}\nCampaign cause type (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_noun %}\nNoun applicable to the user's action\n{% enddocs %}\n\n{% docs campaign_verb %}\nVerb describing the action the user should take\n{% enddocs %}\n\n{% docs campaign_cta %}\nCampaign's call to action\n{% enddocs %}\n\n{% docs campaign_language %}\n\"Language in which the campaign is available\"\n{% enddocs %}\n\n{% docs agent_id %}\nIf set, the content type of the picture the member is sending us. Exp. image/png.\n{% enddocs %}\n\n{% docs attachment_content_type %}\nIf set, the handle of the Front agent this outbound support message is from.\n{% enddocs %}\n\n{% docs topic %}\nHolds a reference to the **last** campaign topic the member's conversation was in. This is useful to allow members to talk to Gambit and get quick responses (through Rivescript), without Gambit completely forgetting what state the member's interaction with a campaign topic was in.\n{% enddocs %}\n\n{% docs action_serial_id %}\nSerial id for the user's action. Depends on the source of the action. May be the bertly click id, sms message id, etc.\n{% enddocs %}\n\n{% docs channel %}\nChannel for the user's action. Depends on the source of the action. (e.g. web, sms)\n{% enddocs %}\n\n{% docs first_action_month %}\nMonth during which the user took their first action. \n{% enddocs %}\n\n{% docs event_id %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs event_source %}\nApplication source for event (eg. Phoenix, Northstar)\n{% enddocs %}\n\n{% docs event_datetime %}\nWhen the event occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs event_name %}\nName of the event (eg. northstar_submitted_register, https://docs.google.com/spreadsheets/d/1lm-fGrIm85nUTxSojqyCt_Ehmm1zEbViFhKpxcJiz1A/edit#gid=406441516)\n{% enddocs %}\n\n{% docs event_type %}\nType of event (pv = 'Page View', se = 'Structured Event')\n{% enddocs %}\n\n{% docs host %}\nURL host where event occurred (eg. www.dosomething.org or identity.dosomething.org)\n{% enddocs %}\n\n{% docs path %}\nURL path event occurred at (eg. /login or /us/campaigns/huddle-for-heroes)\n{% enddocs %}\n\n{% docs query_parameters %}\nOptional query parameters for the request (eg. query=huddle)\n{% enddocs %}\n\n{% docs se_category %}\nCategory of event (eg. focused_field, authentication) - Custom structured event\n{% enddocs %}\n\n{% docs se_action %}\nAction performed / event name (eg. form_submitted, action_failed) - Custom structured event\n{% enddocs %}\n\n{% docs se_label %}\nThe object of the action (eg. first_name, register, voter_reg_status) - Custom structured event\n{% enddocs %}\n\n{% docs session_id %}\nUnique identifier of the user's session\n{% enddocs %}\n\n{% docs session_counter %}\nHow many sessions a user has started\n{% enddocs %}\n\n{% docs browser_size %}\nWhich type of browser a user is using (eg. Mobile, Desktop)\n{% enddocs %}\n\n{% docs northstar_id %}\nThe Northstar ID of the user who generated the event\n{% enddocs %}\n\n{% docs device_id %}\nID of the device used\n{% enddocs %}\n\n{% docs referrer_host %}\nURL host of the referring site (eg. google.com)\n{% enddocs %}\n\n{% docs referrer_path %}\nURL path from referring site (eg. /10-stats-on-teen-drug-and-alcohol-use/)\n{% enddocs %}\n\n{% docs referrer_source %}\nReferrer source name (eg. Google, Facebook)\n{% enddocs %}\n\n{% docs utm_source %}\nTracks where the traffic is coming from. (eg. scholarship_listing, Facebook)\n{% enddocs %}\n\n{% docs utm_medium %}\nHow the traffic got to the platform (eg. referral, CPC)\n{% enddocs %}\n\n{% docs utm_campaign %}\nTracks which campaign the traffic was generated by. Shows up in Google Analytics as Campaign Name (eg. editorial_newsletter)\n{% enddocs %}\n\n{% docs url %}\nURL of campaign (eg. https://dosome.click/nyn5m7)\n{% enddocs %}\n\n{% docs modal_type %}\nNULL or SURVEY_MODAL\n{% enddocs %}\n\n{% docs landing_datetime %}\nWhen the session started in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs ending_datetime %}\nWhen the session ended in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs session_duration_seconds %}\nSession duration in seconds\n{% enddocs %}\n\n{% docs num_pages_views %}\nNumber of pages viewed in session\n{% enddocs %}\n\n{% docs landing_page %}\nFirst page the user viewed in the session (eg. /us/facts/11-facts-about-bp-oil-spill)\n{% enddocs %}\n\n{% docs exit_page %}\n\"Which page the user ended or exited their session from (eg. /us/campaigns/green-your-getaway)\"\n{% enddocs %}\n\n{% docs days_since_last_session %}\n\"Days since their last session.\"\n{% enddocs %}\n\n{% docs post_type %}\nType of post, (e.g. photo, voter-reg)\n{% enddocs %}\n\n{% docs noun %}\nNoun that corresponds to the item in the call to action that was delivered. (e.g. drawings, tweets)\n{% enddocs %}\n\n{% docs verb %}\nVerb corresponding to the action the user took. (e.g. shared, sent, taken)\n{% enddocs %}\n\n{% docs deleted_at %}\nDate time in UTC when a user deleted their post.\n{% enddocs %}\n\n{% docs _fivetran_deleted %}\nMarks rows that were deleted in the source table\n{% enddocs %}\n\n{% docs _fivetran_synced %}\n(UTC timestamp) keeps track of when each row was last successfully synced\n{% enddocs %}\n\n{% docs reportback %}\nWhether the post is a reportback \n{% enddocs %}\n\n{% docs active %}\nWhether the user is active \n{% enddocs %}\n\n{% docs anonymous %}\nWhether the user is anonymous when making the post \n{% enddocs %}\n\n{% docs callpower_campaign_id %}\nUnique ID corresponding to the Callpower campaign. Callpower allows users to record messages for their representatives.\n{% enddocs %}\n\n{% docs quiz %}\nWhether the post is a quiz \n{% enddocs %}\n\n{% docs action_type %}\nType of action the user took. (e.g. share-something, donate-something)\n{% enddocs %}\n\n{% docs online %}\nWhether the action is a online as opposed to IRL.\n{% enddocs %}\n\n{% docs time_commitment %}\nEstimated time required to do the action (e.g. 3.0+, <0.5)\n{% enddocs %}\n\n{% docs num_signups %}\nQuantity of campaign signups\n{% enddocs %}\n\n{% docs most_recent_signup %}\nTimestamp of the most recent signup in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs num_rbs %}\nQuantity of reportbacks for the user\n{% enddocs %}\n\n{% docs total_quantity %}\nTotal quantity of items in reportbacks\n{% enddocs %}\n\n{% docs most_recent_rb %}\nWhen the most recent reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs first_rb %}\nWhen the first reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs avg_time_betw_rbs %}\nCalculated average time between reportbacks.\n{% enddocs %}\n\n{% docs avg_days_next_action_after_rb %}\nCalculated average days until next action after reportback\n{% enddocs %}\n\n{% docs days_to_next_action_after_last_rb %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs most_recent_mam_action %}\nMost recent monthly active member qualifying action in UTC (eg. 2018-01-01 12:00:00).\n{% enddocs %}\n\n{% docs most_recent_email_open %}\nMost recent email open in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs most_recent_all_actions %}\nMost recent timestamp of any action in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs last_action_is_rb %}\nWhether the last action the user took was a reportback\n{% enddocs %}\n\n{% docs days_since_last_action %}\nDays since the user's last action\n{% enddocs %}\n\n{% docs time_to_first_rb %}\nHow much time after registering until the user's first reportback\n{% enddocs %}\n\n{% docs sms_unsubscribed_at %}\nTimestamp of when user unsubscribed from SMS messaging\n{% enddocs %}\n\n{% docs user_unsubscribed_at %}\nTimestamp of when user unsubscribed from email or sms\n{% enddocs %}\n\n{% docs voter_reg_acquisition %}\nWhether the user was an acquisition through voter registration efforts. \n{% enddocs %}\n\n{% docs last_logged_in %}\nDate time in UTC when user last logged in to Northstar\n{% enddocs %}\n\n{% docs last_accessed %}\nDate time in UTC when user last access the website\n{% enddocs %}\n\n{% docs last_messaged_at %}\nDate time in UTC when user was last sent a message via SMS or email\n{% enddocs %}\n\n{% docs facebook_id %}\nUser's facebook id\n{% enddocs %}\n\n{% docs mobile %}\nUsers's mobile phone number\n{% enddocs %}\n\n{% docs birthdate %}\nUser's birthdate\n{% enddocs %}\n\n{% docs first_name %}\nUser's first name\n{% enddocs %}\n\n{% docs last_name %}\nUser's last name\n{% enddocs %}\n\n{% docs voter_registration_status %}\nUser's registration status. (e.g. registration_complete, confirmed, uncertain) \n{% enddocs %}\n\n{% docs finish_with_state %}\nIf the registrant was eligible to use and passed through to complete their registration with their state\u2019s OVR system, it will be indicated in this field (direct quote from Rock-The-Vote documentation). Yes/No value in field.\n{% enddocs %}\n\n{% docs reportback_volume %}\nThis field returns 1 if non voter-reg action, since campaigns team only counts those a 1 reportback. If voter-reg action, we want to count quantity of post as number of registered voters.\n{% enddocs %}\n\n{% docs address_street_1 %}\nFirst line of user's street address\n{% enddocs %}\n\n{% docs address_street_2 %}\nSecond line of user's street address\n{% enddocs %}\n\n{% docs city %}\nUser's city\n{% enddocs %}\n\n{% docs state %}\nUser's state\n{% enddocs %}\n\n{% docs country %}\nUser's country\n{% enddocs %}\n\n{% docs language %}\nUser's language\n{% enddocs %}\n\n{% docs cio_status %}\nStatus of user from CIO. (e.g. customer_subscribed, customer_unsubscribed)\n{% enddocs %}\n\n{% docs cio_status_timestamp %}\nTimestamp when users's status was updated.\n{% enddocs %}\n\n{% docs sms_status %}\nCurrent SMS status. (e.g. undeliverable, unknown)\n{% enddocs %}\n\n{% docs source_detail %}\nDetails of the origin of the user. (e.g. tell_a_friend, other, opt_in_path/197981)\n{% enddocs %}\n\n{% docs badges %}\nWhether the user has any badges. \n{% enddocs %}\n\n{% docs refer_friends %}\nWhether the user is a part of the refer a friend campaign. \n{% enddocs %}\n\n{% docs subscribed_member %}\nWhether the user is subscribed. \n{% enddocs %}\n\n{% docs last_updated_at %}\nTimestamp when users's was updated.\n{% enddocs %}\n\n{% docs school_id %}\nUnique identifier for the user's school. This info comes from the school finder.\n{% enddocs %}\n\n{% docs newsletter_topic %}\nNewsletter topic. (e.g. community, lifestyle)\n{% enddocs %}\n\n{% docs user_agent %}\nFull user agent string for a user's browser (e.g. \"Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:24.0) Gecko/20100101 Firefox/24.0\")\n{% enddocs %}\n\n{% docs drupal_id %}\nOld Drupal user ID\n{% enddocs %}\n\n{% docs campaigns %}\nCampaigns a user is signed up for.\n{% enddocs %}\n\n{% docs audit %}\nA very useful field with data containing information about changes to a user, e.g. timestamps when the user subscribed and unsubscribed.\n{% enddocs %}\n\n{% docs voting_plan_status %}\nThe indication of the user's plan to vote, e.g. voting, not_voting, cant_vote\n{% enddocs %}\n\n{% docs voting_plan_time_of_day %}\nThe time of day when the user plans to vote, e.g morning, afternoon, evening\n{% enddocs %}\n\n{% docs voting_plan_method_of_transport %}\nHow the user plans to get to their polling place. e.g. walk, drive\n{% enddocs %}\n\n{% docs voting_plan_attending_with %}\nWith Whom the user plans to go voting, e.g. family, friends, alone\n{% enddocs %}\n\n{% docs feature_flags %}\nJSON containing info on features like badges and refer-a-friend.\n{% enddocs %}\n\n{% docs dbt_updated_at %}\nDBT snapshot table data. The updated_at timestamp of the source record when this snapshot row was inserted.\n{% enddocs %}\n\n{% docs dbt_scd_id %}\nDBT snapshot table data. A unique key generated for each snapshotted record.\n{% enddocs %}\n\n{% docs dbt_valid_from %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this snapshot row was first inserted\n{% enddocs %}\n\n{% docs dbt_valid_to %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this row row became invalidated.\n{% enddocs %}\n\n{% docs google_id %}\nUser's Google ID obtained from login.\n{% enddocs %}\n\n{% docs causes %}\nCauses in which a user is interested. e.g. animal welfare, education, mental_health\n{% enddocs %}\n\n{% docs email_subscription_status %}\nEmail subscription status of the user\n{% enddocs %}\n\n{% docs role %}\nUser's role, e.g. user, staff\n{% enddocs %}\n\n{% docs cio_backfilled %}\nWhether this user's data was backfilled from CIO\n{% enddocs %}\n\n{% docs addr_source %}\nWhere the user submitted their address, e.g. sms, GDPR\n{% enddocs %}\n\n{% docs email_subscription_topics %}\nEmail subscription topics correspond to categories in CIO in which the user is interested. e.g. lifestyle, community, scholarship\n{% enddocs %}\n\n{% docs sms_paused %}\nWhether we've paused sending sms messages to the user.\n{% enddocs %}\n\n\n\n\n", "name": "email_subscription_topics", "unique_id": "ds_dbt.email_subscription_topics", "block_contents": "Email subscription topics correspond to categories in CIO in which the user is interested. e.g. lifestyle, community, scholarship"}, "ds_dbt.sms_paused": {"root_path": "/Users/mrich/projects/quasar/quasar/dbt", "resource_type": "docs", "path": "schema.md", "original_file_path": "models/schema.md", "package_name": "ds_dbt", "file_contents": "\n{% docs click_id %}\nThis is a unique identifier for each click\n{% enddocs %}\n\n{% docs click_time %}\nTimestamp when user clicked.\n{% enddocs %}\n\n{% docs shortened %}\nShortened URL\n{% enddocs %}\n\n{% docs target_url %}\nURL where the user will be directed\n{% enddocs %}\n\n{% docs broadcast_id %}\nID of the broadcast that generated the shortened URL\n{% enddocs %}\n\n{% docs source %}\nSource of the URL (e.g. SMS, web), origin of the post (e.g. phoenix-web, phoenix-ashes, sms), or source where user was acquired. (e.g. sms, phoenix-next)\n{% enddocs %}\n\n{% docs interaction_type %}\nHow the user interacted with the link (e.g. preview, click)\n{% enddocs %}\n\n{% docs id %}\nUnique identifier for the post\n{% enddocs %}\n\n{% docs type %}\nType of post (e.g. photo)\n{% enddocs %}\n\n{% docs action %}\nPost action (e.g. DefendDreamers_Nov9_CongressCalls, GunViolence2018_Feb15_ParklandResponse)\n{% enddocs %}\n\n{% docs status %}\nPost status (e.g. accepted, rejected)\n{% enddocs %}\n\n{% docs quantity %}\nNumerical quantity of items specified in the call to action (e.g. 10, 200)\n{% enddocs %}\n\n{% docs source_bucket %}\nGrouping bucket for origin of the post (e.g. web, sms) \n{% enddocs %}\n\n{% docs created_at %}\nWhen the item was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs updated_at %}\nWhen the item was updated in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs text %}\nText of the post (e.g. \"Zoo animals and a super hero trying to help too!\") \n{% enddocs %}\n\n{% docs signup_id %}\nUnique identifier for the signup \n{% enddocs %}\n\n{% docs post_class %}\nClass of the signup (e.g. \"photo - default\", \"phone-call - DefendDreamers_Jan16_BothBodies\")\n{% enddocs %}\n\n{% docs is_accepted %}\nWhether the post has been accepted to be displayed to the public on the website\n{% enddocs %}\n\n{% docs action_id %}\nInternal identifier of the action \n{% enddocs %}\n\n{% docs location %}\nLocation where the action takes place (e.g. US-NY)\n{% enddocs %}\n\n{% docs postal_code %}\nPostal code where the action takes place\n{% enddocs %}\n\n{% docs is_reportback %}\nWhether the post is a reportback. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs civic_action %}\nWhether the post is a Civic Action. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs scholarship_entry %}\nWhether the post is a Scholarship Entry. The application allows for multiple types of posts.\n{% enddocs %}\n\n{% docs why_participated %}\nWhy the user participated in this action. Entered by the user.\n{% enddocs %}\n\n{% docs details %}\nDetails about the post. Contains contentfulId and other information (e.g. {\"campaignContentfulId\":\"6ATBgGEQEeJoIcxs1qbwaC\"})\n{% enddocs %}\n\n{% docs email %}\nEmail address of the user.\n{% enddocs %}\n\n{% docs source_details %}\nDetails about the source of the item. This is sometimes represented as a JSON object, and for other tables like Turbovote its represented as a string. (e.g. \"{\"contentful_id\":\"3CTLlXfbwtz1FOMpl31SKV\",\"utm_source\":\"scholarship_listing\",\"utm_medium\":\"referral\",\"utm_campaign\":\"fastweb_2019_08\"}\", newsletter_456)\n{% enddocs %}\n\n{% docs campaign_id %}\nThis is a unique identifier for the campaign\n{% enddocs %}\n\n{% docs campaign_run_id %}\nUnique identifier for the campaign run\n{% enddocs %}\n\n{% docs campaign_name %}\nName of the campaign\n{% enddocs %}\n\n{% docs campaign_cause %}\nCampaign cause (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_run_start_date %}\nStart date of the campaign run\n{% enddocs %}\n\n{% docs campaign_run_end_date %}\nEnd date of the campaign run\n{% enddocs %}\n\n{% docs campaign_created_date %}\nWhen the campaign was created in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs campaign_node_id %}\nInternal unique node id for the campaign\n{% enddocs %}\n\n{% docs campaign_node_id_title %}\nCampaign title\n{% enddocs %}\n\n{% docs campaign_run_id_title %}\nTitle of the campaign run\n{% enddocs %}\n\n{% docs campaign_action_type %}\nCampaign action type (eg. Make Something, Share Something)\n{% enddocs %}\n\n{% docs campaign_cause_type %}\nCampaign cause type (eg. Mental Health, Education)\n{% enddocs %}\n\n{% docs campaign_noun %}\nNoun applicable to the user's action\n{% enddocs %}\n\n{% docs campaign_verb %}\nVerb describing the action the user should take\n{% enddocs %}\n\n{% docs campaign_cta %}\nCampaign's call to action\n{% enddocs %}\n\n{% docs campaign_language %}\n\"Language in which the campaign is available\"\n{% enddocs %}\n\n{% docs agent_id %}\nIf set, the content type of the picture the member is sending us. Exp. image/png.\n{% enddocs %}\n\n{% docs attachment_content_type %}\nIf set, the handle of the Front agent this outbound support message is from.\n{% enddocs %}\n\n{% docs topic %}\nHolds a reference to the **last** campaign topic the member's conversation was in. This is useful to allow members to talk to Gambit and get quick responses (through Rivescript), without Gambit completely forgetting what state the member's interaction with a campaign topic was in.\n{% enddocs %}\n\n{% docs action_serial_id %}\nSerial id for the user's action. Depends on the source of the action. May be the bertly click id, sms message id, etc.\n{% enddocs %}\n\n{% docs channel %}\nChannel for the user's action. Depends on the source of the action. (e.g. web, sms)\n{% enddocs %}\n\n{% docs first_action_month %}\nMonth during which the user took their first action. \n{% enddocs %}\n\n{% docs event_id %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs event_source %}\nApplication source for event (eg. Phoenix, Northstar)\n{% enddocs %}\n\n{% docs event_datetime %}\nWhen the event occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs event_name %}\nName of the event (eg. northstar_submitted_register, https://docs.google.com/spreadsheets/d/1lm-fGrIm85nUTxSojqyCt_Ehmm1zEbViFhKpxcJiz1A/edit#gid=406441516)\n{% enddocs %}\n\n{% docs event_type %}\nType of event (pv = 'Page View', se = 'Structured Event')\n{% enddocs %}\n\n{% docs host %}\nURL host where event occurred (eg. www.dosomething.org or identity.dosomething.org)\n{% enddocs %}\n\n{% docs path %}\nURL path event occurred at (eg. /login or /us/campaigns/huddle-for-heroes)\n{% enddocs %}\n\n{% docs query_parameters %}\nOptional query parameters for the request (eg. query=huddle)\n{% enddocs %}\n\n{% docs se_category %}\nCategory of event (eg. focused_field, authentication) - Custom structured event\n{% enddocs %}\n\n{% docs se_action %}\nAction performed / event name (eg. form_submitted, action_failed) - Custom structured event\n{% enddocs %}\n\n{% docs se_label %}\nThe object of the action (eg. first_name, register, voter_reg_status) - Custom structured event\n{% enddocs %}\n\n{% docs session_id %}\nUnique identifier of the user's session\n{% enddocs %}\n\n{% docs session_counter %}\nHow many sessions a user has started\n{% enddocs %}\n\n{% docs browser_size %}\nWhich type of browser a user is using (eg. Mobile, Desktop)\n{% enddocs %}\n\n{% docs northstar_id %}\nThe Northstar ID of the user who generated the event\n{% enddocs %}\n\n{% docs device_id %}\nID of the device used\n{% enddocs %}\n\n{% docs referrer_host %}\nURL host of the referring site (eg. google.com)\n{% enddocs %}\n\n{% docs referrer_path %}\nURL path from referring site (eg. /10-stats-on-teen-drug-and-alcohol-use/)\n{% enddocs %}\n\n{% docs referrer_source %}\nReferrer source name (eg. Google, Facebook)\n{% enddocs %}\n\n{% docs utm_source %}\nTracks where the traffic is coming from. (eg. scholarship_listing, Facebook)\n{% enddocs %}\n\n{% docs utm_medium %}\nHow the traffic got to the platform (eg. referral, CPC)\n{% enddocs %}\n\n{% docs utm_campaign %}\nTracks which campaign the traffic was generated by. Shows up in Google Analytics as Campaign Name (eg. editorial_newsletter)\n{% enddocs %}\n\n{% docs url %}\nURL of campaign (eg. https://dosome.click/nyn5m7)\n{% enddocs %}\n\n{% docs modal_type %}\nNULL or SURVEY_MODAL\n{% enddocs %}\n\n{% docs landing_datetime %}\nWhen the session started in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs ending_datetime %}\nWhen the session ended in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs session_duration_seconds %}\nSession duration in seconds\n{% enddocs %}\n\n{% docs num_pages_views %}\nNumber of pages viewed in session\n{% enddocs %}\n\n{% docs landing_page %}\nFirst page the user viewed in the session (eg. /us/facts/11-facts-about-bp-oil-spill)\n{% enddocs %}\n\n{% docs exit_page %}\n\"Which page the user ended or exited their session from (eg. /us/campaigns/green-your-getaway)\"\n{% enddocs %}\n\n{% docs days_since_last_session %}\n\"Days since their last session.\"\n{% enddocs %}\n\n{% docs post_type %}\nType of post, (e.g. photo, voter-reg)\n{% enddocs %}\n\n{% docs noun %}\nNoun that corresponds to the item in the call to action that was delivered. (e.g. drawings, tweets)\n{% enddocs %}\n\n{% docs verb %}\nVerb corresponding to the action the user took. (e.g. shared, sent, taken)\n{% enddocs %}\n\n{% docs deleted_at %}\nDate time in UTC when a user deleted their post.\n{% enddocs %}\n\n{% docs _fivetran_deleted %}\nMarks rows that were deleted in the source table\n{% enddocs %}\n\n{% docs _fivetran_synced %}\n(UTC timestamp) keeps track of when each row was last successfully synced\n{% enddocs %}\n\n{% docs reportback %}\nWhether the post is a reportback \n{% enddocs %}\n\n{% docs active %}\nWhether the user is active \n{% enddocs %}\n\n{% docs anonymous %}\nWhether the user is anonymous when making the post \n{% enddocs %}\n\n{% docs callpower_campaign_id %}\nUnique ID corresponding to the Callpower campaign. Callpower allows users to record messages for their representatives.\n{% enddocs %}\n\n{% docs quiz %}\nWhether the post is a quiz \n{% enddocs %}\n\n{% docs action_type %}\nType of action the user took. (e.g. share-something, donate-something)\n{% enddocs %}\n\n{% docs online %}\nWhether the action is a online as opposed to IRL.\n{% enddocs %}\n\n{% docs time_commitment %}\nEstimated time required to do the action (e.g. 3.0+, <0.5)\n{% enddocs %}\n\n{% docs num_signups %}\nQuantity of campaign signups\n{% enddocs %}\n\n{% docs most_recent_signup %}\nTimestamp of the most recent signup in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs num_rbs %}\nQuantity of reportbacks for the user\n{% enddocs %}\n\n{% docs total_quantity %}\nTotal quantity of items in reportbacks\n{% enddocs %}\n\n{% docs most_recent_rb %}\nWhen the most recent reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs first_rb %}\nWhen the first reportback occurred in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs avg_time_betw_rbs %}\nCalculated average time between reportbacks.\n{% enddocs %}\n\n{% docs avg_days_next_action_after_rb %}\nCalculated average days until next action after reportback\n{% enddocs %}\n\n{% docs days_to_next_action_after_last_rb %}\nThis is a unique identifier for each event\n{% enddocs %}\n\n{% docs most_recent_mam_action %}\nMost recent monthly active member qualifying action in UTC (eg. 2018-01-01 12:00:00).\n{% enddocs %}\n\n{% docs most_recent_email_open %}\nMost recent email open in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs most_recent_all_actions %}\nMost recent timestamp of any action in UTC (eg. 2018-01-01 12:00:00)\n{% enddocs %}\n\n{% docs last_action_is_rb %}\nWhether the last action the user took was a reportback\n{% enddocs %}\n\n{% docs days_since_last_action %}\nDays since the user's last action\n{% enddocs %}\n\n{% docs time_to_first_rb %}\nHow much time after registering until the user's first reportback\n{% enddocs %}\n\n{% docs sms_unsubscribed_at %}\nTimestamp of when user unsubscribed from SMS messaging\n{% enddocs %}\n\n{% docs user_unsubscribed_at %}\nTimestamp of when user unsubscribed from email or sms\n{% enddocs %}\n\n{% docs voter_reg_acquisition %}\nWhether the user was an acquisition through voter registration efforts. \n{% enddocs %}\n\n{% docs last_logged_in %}\nDate time in UTC when user last logged in to Northstar\n{% enddocs %}\n\n{% docs last_accessed %}\nDate time in UTC when user last access the website\n{% enddocs %}\n\n{% docs last_messaged_at %}\nDate time in UTC when user was last sent a message via SMS or email\n{% enddocs %}\n\n{% docs facebook_id %}\nUser's facebook id\n{% enddocs %}\n\n{% docs mobile %}\nUsers's mobile phone number\n{% enddocs %}\n\n{% docs birthdate %}\nUser's birthdate\n{% enddocs %}\n\n{% docs first_name %}\nUser's first name\n{% enddocs %}\n\n{% docs last_name %}\nUser's last name\n{% enddocs %}\n\n{% docs voter_registration_status %}\nUser's registration status. (e.g. registration_complete, confirmed, uncertain) \n{% enddocs %}\n\n{% docs finish_with_state %}\nIf the registrant was eligible to use and passed through to complete their registration with their state\u2019s OVR system, it will be indicated in this field (direct quote from Rock-The-Vote documentation). Yes/No value in field.\n{% enddocs %}\n\n{% docs reportback_volume %}\nThis field returns 1 if non voter-reg action, since campaigns team only counts those a 1 reportback. If voter-reg action, we want to count quantity of post as number of registered voters.\n{% enddocs %}\n\n{% docs address_street_1 %}\nFirst line of user's street address\n{% enddocs %}\n\n{% docs address_street_2 %}\nSecond line of user's street address\n{% enddocs %}\n\n{% docs city %}\nUser's city\n{% enddocs %}\n\n{% docs state %}\nUser's state\n{% enddocs %}\n\n{% docs country %}\nUser's country\n{% enddocs %}\n\n{% docs language %}\nUser's language\n{% enddocs %}\n\n{% docs cio_status %}\nStatus of user from CIO. (e.g. customer_subscribed, customer_unsubscribed)\n{% enddocs %}\n\n{% docs cio_status_timestamp %}\nTimestamp when users's status was updated.\n{% enddocs %}\n\n{% docs sms_status %}\nCurrent SMS status. (e.g. undeliverable, unknown)\n{% enddocs %}\n\n{% docs source_detail %}\nDetails of the origin of the user. (e.g. tell_a_friend, other, opt_in_path/197981)\n{% enddocs %}\n\n{% docs badges %}\nWhether the user has any badges. \n{% enddocs %}\n\n{% docs refer_friends %}\nWhether the user is a part of the refer a friend campaign. \n{% enddocs %}\n\n{% docs subscribed_member %}\nWhether the user is subscribed. \n{% enddocs %}\n\n{% docs last_updated_at %}\nTimestamp when users's was updated.\n{% enddocs %}\n\n{% docs school_id %}\nUnique identifier for the user's school. This info comes from the school finder.\n{% enddocs %}\n\n{% docs newsletter_topic %}\nNewsletter topic. (e.g. community, lifestyle)\n{% enddocs %}\n\n{% docs user_agent %}\nFull user agent string for a user's browser (e.g. \"Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:24.0) Gecko/20100101 Firefox/24.0\")\n{% enddocs %}\n\n{% docs drupal_id %}\nOld Drupal user ID\n{% enddocs %}\n\n{% docs campaigns %}\nCampaigns a user is signed up for.\n{% enddocs %}\n\n{% docs audit %}\nA very useful field with data containing information about changes to a user, e.g. timestamps when the user subscribed and unsubscribed.\n{% enddocs %}\n\n{% docs voting_plan_status %}\nThe indication of the user's plan to vote, e.g. voting, not_voting, cant_vote\n{% enddocs %}\n\n{% docs voting_plan_time_of_day %}\nThe time of day when the user plans to vote, e.g morning, afternoon, evening\n{% enddocs %}\n\n{% docs voting_plan_method_of_transport %}\nHow the user plans to get to their polling place. e.g. walk, drive\n{% enddocs %}\n\n{% docs voting_plan_attending_with %}\nWith Whom the user plans to go voting, e.g. family, friends, alone\n{% enddocs %}\n\n{% docs feature_flags %}\nJSON containing info on features like badges and refer-a-friend.\n{% enddocs %}\n\n{% docs dbt_updated_at %}\nDBT snapshot table data. The updated_at timestamp of the source record when this snapshot row was inserted.\n{% enddocs %}\n\n{% docs dbt_scd_id %}\nDBT snapshot table data. A unique key generated for each snapshotted record.\n{% enddocs %}\n\n{% docs dbt_valid_from %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this snapshot row was first inserted\n{% enddocs %}\n\n{% docs dbt_valid_to %}\nDBT snapshot table data. The dbt_valid_from and dbt_valid_to columns indicate the historical state for a given record. The current value for a row is represented with a null value for dbt_valid_to. The timestamp when this row row became invalidated.\n{% enddocs %}\n\n{% docs google_id %}\nUser's Google ID obtained from login.\n{% enddocs %}\n\n{% docs causes %}\nCauses in which a user is interested. e.g. animal welfare, education, mental_health\n{% enddocs %}\n\n{% docs email_subscription_status %}\nEmail subscription status of the user\n{% enddocs %}\n\n{% docs role %}\nUser's role, e.g. user, staff\n{% enddocs %}\n\n{% docs cio_backfilled %}\nWhether this user's data was backfilled from CIO\n{% enddocs %}\n\n{% docs addr_source %}\nWhere the user submitted their address, e.g. sms, GDPR\n{% enddocs %}\n\n{% docs email_subscription_topics %}\nEmail subscription topics correspond to categories in CIO in which the user is interested. e.g. lifestyle, community, scholarship\n{% enddocs %}\n\n{% docs sms_paused %}\nWhether we've paused sending sms messages to the user.\n{% enddocs %}\n\n\n\n\n", "name": "sms_paused", "unique_id": "ds_dbt.sms_paused", "block_contents": "Whether we've paused sending sms messages to the user."}, "dbt.__overview__": {"root_path": "/Users/mrich/.local/share/virtualenvs/quasar-qaRV2YEO/lib/python3.7/site-packages/dbt/include/global_project", "resource_type": "docs", "path": "overview.md", "original_file_path": "docs/overview.md", "package_name": "dbt", "file_contents": "\n{% docs __overview__ %}\n\n### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--models` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/overview)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [chat](https://slack.getdbt.com/) on Slack for live questions and support.\n\n{% enddocs %}\n", "name": "__overview__", "unique_id": "dbt.__overview__", "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--models` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/overview)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [chat](https://slack.getdbt.com/) on Slack for live questions and support."}}, "parent_map": {"model.ds_dbt.snowplow_sessions": ["model.ds_dbt.snowplow_phoenix_events", "model.ds_dbt.snowplow_phoenix_events", "model.ds_dbt.snowplow_phoenix_events"], "model.ds_dbt.snowplow_base_event": [], "model.ds_dbt.phoenix_sessions_combined": ["model.ds_dbt.snowplow_sessions"], "model.ds_dbt.snowplow_phoenix_events": ["model.ds_dbt.campaign_info", "model.ds_dbt.snowplow_raw_events"], "model.ds_dbt.snowplow_payload_event": [], "model.ds_dbt.phoenix_events_combined": ["model.ds_dbt.snowplow_phoenix_events"], "model.ds_dbt.snowplow_raw_events": ["model.ds_dbt.snowplow_base_event", "model.ds_dbt.snowplow_payload_event"], "model.ds_dbt.device_northstar": ["model.ds_dbt.phoenix_events_combined"], "model.ds_dbt.email_subscription_topics_raw": [], "model.ds_dbt.user_newsletter_subscriptions": ["model.ds_dbt.email_subscription_topics_raw"], "model.ds_dbt.member_event_log": ["model.ds_dbt.bertly_clicks", "model.ds_dbt.gambit_messages_inbound", "model.ds_dbt.northstar_users_deduped", "model.ds_dbt.northstar_users_deduped", "model.ds_dbt.northstar_users_deduped", "model.ds_dbt.posts", "model.ds_dbt.signups", "model.ds_dbt.users", "model.ds_dbt.users"], "model.ds_dbt.gambit_messages_inbound": ["model.ds_dbt.messages_flattened", "model.ds_dbt.messages_flattened"], "model.ds_dbt.messages_flattened": [], "model.ds_dbt.gambit_messages_outbound": ["model.ds_dbt.messages_flattened", "model.ds_dbt.messages_flattened"], "model.ds_dbt.post_actions": [], "model.ds_dbt.campaign_info_international": [], "model.ds_dbt.campaign_info": [], "model.ds_dbt.rock_the_vote": [], "model.ds_dbt.turbovote": [], "model.ds_dbt.posts": ["model.ds_dbt.rock_the_vote", "model.ds_dbt.signups", "model.ds_dbt.turbovote"], "model.ds_dbt.signups": [], "model.ds_dbt.reportbacks": ["model.ds_dbt.posts", "model.ds_dbt.posts"], "model.ds_dbt.users": ["model.ds_dbt.cio_latest_status", "model.ds_dbt.northstar_users_deduped", "model.ds_dbt.northstar_users_deduped"], "model.ds_dbt.cio_latest_status": [], "model.ds_dbt.northstar_users_raw": ["source.ds_dbt.northstar.users"], "model.ds_dbt.northstar_users_deduped": ["model.ds_dbt.northstar_users_raw"], "model.ds_dbt.bertly_clicks": [], "model.ds_dbt.user_activity": ["model.ds_dbt.gambit_messages_inbound", "model.ds_dbt.member_event_log", "model.ds_dbt.member_event_log", "model.ds_dbt.northstar_users_deduped", "model.ds_dbt.posts", "model.ds_dbt.reportbacks", "model.ds_dbt.reportbacks", "model.ds_dbt.signups", "model.ds_dbt.users"], "snapshot.ds_dbt.northstar_users_snapshot": [], "source.ds_dbt.northstar.users": [], "test.ds_dbt.unique_snowplow_base_event_event_id": ["model.ds_dbt.snowplow_base_event"], "test.ds_dbt.not_null_snowplow_base_event_event_id": ["model.ds_dbt.snowplow_base_event"], "test.ds_dbt.unique_snowplow_base_event_event_source": ["model.ds_dbt.snowplow_base_event"], "test.ds_dbt.not_null_snowplow_base_event_event_source": ["model.ds_dbt.snowplow_base_event"], "test.ds_dbt.not_null_snowplow_base_event_event_datetime": ["model.ds_dbt.snowplow_base_event"], "test.ds_dbt.not_null_snowplow_base_event_event_type": ["model.ds_dbt.snowplow_base_event"], "test.ds_dbt.not_null_snowplow_base_event_host": ["model.ds_dbt.snowplow_base_event"], "test.ds_dbt.not_null_snowplow_base_event_path": ["model.ds_dbt.snowplow_base_event"], "test.ds_dbt.not_null_snowplow_base_event_session_id": ["model.ds_dbt.snowplow_base_event"], "test.ds_dbt.not_null_snowplow_base_event_session_counter": ["model.ds_dbt.snowplow_base_event"], "test.ds_dbt.not_null_snowplow_base_event_browser_size": ["model.ds_dbt.snowplow_base_event"], "test.ds_dbt.relationships_snowplow_base_event_northstar_id__id__ref_users_": ["model.ds_dbt.snowplow_base_event", "model.ds_dbt.users"], "test.ds_dbt.not_null_snowplow_base_event_device_id": ["model.ds_dbt.snowplow_base_event"], "test.ds_dbt.not_null_snowplow_base_event_referrer_host": ["model.ds_dbt.snowplow_base_event"], "test.ds_dbt.not_null_snowplow_base_event_referrer_path": ["model.ds_dbt.snowplow_base_event"], "test.ds_dbt.unique_snowplow_payload_event_event_id": ["model.ds_dbt.snowplow_payload_event"], "test.ds_dbt.not_null_snowplow_payload_event_event_id": ["model.ds_dbt.snowplow_payload_event"], "test.ds_dbt.not_null_snowplow_payload_event_ft_timestamp": ["model.ds_dbt.snowplow_payload_event"], "test.ds_dbt.unique_snowplow_raw_events_event_id": ["model.ds_dbt.snowplow_raw_events"], "test.ds_dbt.not_null_snowplow_raw_events_event_id": ["model.ds_dbt.snowplow_raw_events"], "test.ds_dbt.unique_snowplow_raw_events_event_source": ["model.ds_dbt.snowplow_raw_events"], "test.ds_dbt.not_null_snowplow_raw_events_event_source": ["model.ds_dbt.snowplow_raw_events"], "test.ds_dbt.not_null_snowplow_raw_events_event_datetime": ["model.ds_dbt.snowplow_raw_events"], "test.ds_dbt.not_null_snowplow_raw_events_event_type": ["model.ds_dbt.snowplow_raw_events"], "test.ds_dbt.not_null_snowplow_raw_events_host": ["model.ds_dbt.snowplow_raw_events"], "test.ds_dbt.not_null_snowplow_raw_events_path": ["model.ds_dbt.snowplow_raw_events"], "test.ds_dbt.not_null_snowplow_raw_events_session_id": ["model.ds_dbt.snowplow_raw_events"], "test.ds_dbt.not_null_snowplow_raw_events_session_counter": ["model.ds_dbt.snowplow_raw_events"], "test.ds_dbt.not_null_snowplow_raw_events_browser_size": ["model.ds_dbt.snowplow_raw_events"], "test.ds_dbt.relationships_snowplow_raw_events_northstar_id__id__ref_users_": ["model.ds_dbt.snowplow_raw_events", "model.ds_dbt.users"], "test.ds_dbt.not_null_snowplow_raw_events_device_id": ["model.ds_dbt.snowplow_raw_events"], "test.ds_dbt.not_null_snowplow_raw_events_referrer_host": ["model.ds_dbt.snowplow_raw_events"], "test.ds_dbt.not_null_snowplow_raw_events_referrer_path": ["model.ds_dbt.snowplow_raw_events"], "test.ds_dbt.unique_snowplow_phoenix_events_event_id": ["model.ds_dbt.snowplow_phoenix_events"], "test.ds_dbt.not_null_snowplow_phoenix_events_event_id": ["model.ds_dbt.snowplow_phoenix_events"], "test.ds_dbt.not_null_snowplow_phoenix_events_event_datetime": ["model.ds_dbt.snowplow_phoenix_events"], "test.ds_dbt.unique_snowplow_phoenix_events_event_source": ["model.ds_dbt.snowplow_phoenix_events"], "test.ds_dbt.not_null_snowplow_phoenix_events_event_source": ["model.ds_dbt.snowplow_phoenix_events"], "test.ds_dbt.not_null_snowplow_phoenix_events_path": ["model.ds_dbt.snowplow_phoenix_events"], "test.ds_dbt.not_null_snowplow_phoenix_events_host": ["model.ds_dbt.snowplow_phoenix_events"], "test.ds_dbt.not_null_snowplow_phoenix_events_referrer_host": ["model.ds_dbt.snowplow_phoenix_events"], "test.ds_dbt.not_null_snowplow_phoenix_events_referrer_path": ["model.ds_dbt.snowplow_phoenix_events"], "test.ds_dbt.not_null_snowplow_phoenix_events_session_id": ["model.ds_dbt.snowplow_phoenix_events"], "test.ds_dbt.not_null_snowplow_phoenix_events_browser_size": ["model.ds_dbt.snowplow_phoenix_events"], "test.ds_dbt.relationships_snowplow_phoenix_events_northstar_id__id__ref_users_": ["model.ds_dbt.snowplow_phoenix_events", "model.ds_dbt.users"], "test.ds_dbt.not_null_snowplow_phoenix_events_device_id": ["model.ds_dbt.snowplow_phoenix_events"], "test.ds_dbt.unique_snowplow_sessions_session_id": ["model.ds_dbt.snowplow_sessions"], "test.ds_dbt.not_null_snowplow_sessions_session_id": ["model.ds_dbt.snowplow_sessions"], "test.ds_dbt.unique_snowplow_sessions_event_id": ["model.ds_dbt.snowplow_sessions"], "test.ds_dbt.not_null_snowplow_sessions_event_id": ["model.ds_dbt.snowplow_sessions"], "test.ds_dbt.not_null_snowplow_sessions_device_id": ["model.ds_dbt.snowplow_sessions"], "test.ds_dbt.not_null_snowplow_sessions_landing_datetime": ["model.ds_dbt.snowplow_sessions"], "test.ds_dbt.not_null_snowplow_sessions_ending_datetime": ["model.ds_dbt.snowplow_sessions"], "test.ds_dbt.not_null_snowplow_sessions_session_duration_seconds": ["model.ds_dbt.snowplow_sessions"], "test.ds_dbt.not_null_snowplow_sessions_num_pages_views": ["model.ds_dbt.snowplow_sessions"], "test.ds_dbt.not_null_snowplow_sessions_landing_page": ["model.ds_dbt.snowplow_sessions"], "test.ds_dbt.not_null_snowplow_sessions_exit_page": ["model.ds_dbt.snowplow_sessions"], "test.ds_dbt.unique_phoenix_events_combined_event_id": ["model.ds_dbt.phoenix_events_combined"], "test.ds_dbt.not_null_phoenix_events_combined_event_id": ["model.ds_dbt.phoenix_events_combined"], "test.ds_dbt.not_null_phoenix_events_combined_event_datetime": ["model.ds_dbt.phoenix_events_combined"], "test.ds_dbt.unique_phoenix_events_combined_event_source": ["model.ds_dbt.phoenix_events_combined"], "test.ds_dbt.not_null_phoenix_events_combined_event_source": ["model.ds_dbt.phoenix_events_combined"], "test.ds_dbt.not_null_phoenix_events_combined_path": ["model.ds_dbt.phoenix_events_combined"], "test.ds_dbt.not_null_phoenix_events_combined_host": ["model.ds_dbt.phoenix_events_combined"], "test.ds_dbt.not_null_phoenix_events_combined_referrer_host": ["model.ds_dbt.phoenix_events_combined"], "test.ds_dbt.not_null_phoenix_events_combined_referrer_path": ["model.ds_dbt.phoenix_events_combined"], "test.ds_dbt.not_null_phoenix_events_combined_session_id": ["model.ds_dbt.phoenix_events_combined"], "test.ds_dbt.not_null_phoenix_events_combined_browser_size": ["model.ds_dbt.phoenix_events_combined"], "test.ds_dbt.relationships_phoenix_events_combined_northstar_id__id__ref_users_": ["model.ds_dbt.phoenix_events_combined", "model.ds_dbt.users"], "test.ds_dbt.not_null_phoenix_events_combined_device_id": ["model.ds_dbt.phoenix_events_combined"], "test.ds_dbt.unique_phoenix_sessions_combined_session_id": ["model.ds_dbt.phoenix_sessions_combined"], "test.ds_dbt.not_null_phoenix_sessions_combined_session_id": ["model.ds_dbt.phoenix_sessions_combined"], "test.ds_dbt.unique_phoenix_sessions_combined_event_id": ["model.ds_dbt.phoenix_sessions_combined"], "test.ds_dbt.not_null_phoenix_sessions_combined_event_id": ["model.ds_dbt.phoenix_sessions_combined"], "test.ds_dbt.not_null_phoenix_sessions_combined_device_id": ["model.ds_dbt.phoenix_sessions_combined"], "test.ds_dbt.not_null_phoenix_sessions_combined_landing_datetime": ["model.ds_dbt.phoenix_sessions_combined"], "test.ds_dbt.not_null_phoenix_sessions_combined_ending_datetime": ["model.ds_dbt.phoenix_sessions_combined"], "test.ds_dbt.not_null_phoenix_sessions_combined_session_duration_seconds": ["model.ds_dbt.phoenix_sessions_combined"], "test.ds_dbt.not_null_phoenix_sessions_combined_num_pages_views": ["model.ds_dbt.phoenix_sessions_combined"], "test.ds_dbt.not_null_phoenix_sessions_combined_landing_page": ["model.ds_dbt.phoenix_sessions_combined"], "test.ds_dbt.not_null_phoenix_sessions_combined_exit_page": ["model.ds_dbt.phoenix_sessions_combined"], "test.ds_dbt.unique_campaign_info_campaign_id": ["model.ds_dbt.campaign_info"], "test.ds_dbt.not_null_campaign_info_campaign_id": ["model.ds_dbt.campaign_info"], "test.ds_dbt.unique_campaign_info_campaign_run_id": ["model.ds_dbt.campaign_info"], "test.ds_dbt.not_null_campaign_info_campaign_run_id": ["model.ds_dbt.campaign_info"], "test.ds_dbt.not_null_campaign_info_campaign_cause": ["model.ds_dbt.campaign_info"], "test.ds_dbt.unique_campaign_info_campaign_run_start_date": ["model.ds_dbt.campaign_info"], "test.ds_dbt.not_null_campaign_info_campaign_run_start_date": ["model.ds_dbt.campaign_info"], "test.ds_dbt.not_null_campaign_info_campaign_run_end_date": ["model.ds_dbt.campaign_info"], "test.ds_dbt.not_null_campaign_info_campaign_created_date": ["model.ds_dbt.campaign_info"], "test.ds_dbt.unique_campaign_info_campaign_node_id": ["model.ds_dbt.campaign_info"], "test.ds_dbt.not_null_campaign_info_campaign_node_id": ["model.ds_dbt.campaign_info"], "test.ds_dbt.not_null_campaign_info_campaign_node_id_title": ["model.ds_dbt.campaign_info"], "test.ds_dbt.not_null_campaign_info_campaign_run_id_title": ["model.ds_dbt.campaign_info"], "test.ds_dbt.not_null_campaign_info_campaign_action_type": ["model.ds_dbt.campaign_info"], "test.ds_dbt.not_null_campaign_info_campaign_cause_type": ["model.ds_dbt.campaign_info"], "test.ds_dbt.unique_campaign_info_campaign_noun": ["model.ds_dbt.campaign_info"], "test.ds_dbt.not_null_campaign_info_campaign_noun": ["model.ds_dbt.campaign_info"], "test.ds_dbt.not_null_campaign_info_campaign_verb": ["model.ds_dbt.campaign_info"], "test.ds_dbt.not_null_campaign_info_campaign_cta": ["model.ds_dbt.campaign_info"], "test.ds_dbt.unique_campaign_info_international_campaign_id": ["model.ds_dbt.campaign_info_international"], "test.ds_dbt.not_null_campaign_info_international_campaign_id": ["model.ds_dbt.campaign_info_international"], "test.ds_dbt.unique_campaign_info_international_campaign_node_id": ["model.ds_dbt.campaign_info_international"], "test.ds_dbt.not_null_campaign_info_international_campaign_node_id": ["model.ds_dbt.campaign_info_international"], "test.ds_dbt.not_null_campaign_info_international_campaign_node_id_title": ["model.ds_dbt.campaign_info_international"], "test.ds_dbt.unique_campaign_info_international_campaign_run_id": ["model.ds_dbt.campaign_info_international"], "test.ds_dbt.not_null_campaign_info_international_campaign_run_id": ["model.ds_dbt.campaign_info_international"], "test.ds_dbt.not_null_campaign_info_international_campaign_run_id_title": ["model.ds_dbt.campaign_info_international"], "test.ds_dbt.not_null_campaign_info_international_campaign_type": ["model.ds_dbt.campaign_info_international"], "test.ds_dbt.unique_campaign_info_international_campaign_run_start_date": ["model.ds_dbt.campaign_info_international"], "test.ds_dbt.not_null_campaign_info_international_campaign_run_start_date": ["model.ds_dbt.campaign_info_international"], "test.ds_dbt.not_null_campaign_info_international_campaign_run_end_date": ["model.ds_dbt.campaign_info_international"], "test.ds_dbt.not_null_campaign_info_international_campaign_created_date": ["model.ds_dbt.campaign_info_international"], "test.ds_dbt.unique_campaign_info_international_campaign_noun": ["model.ds_dbt.campaign_info_international"], "test.ds_dbt.not_null_campaign_info_international_campaign_noun": ["model.ds_dbt.campaign_info_international"], "test.ds_dbt.not_null_campaign_info_international_campaign_verb": ["model.ds_dbt.campaign_info_international"], "test.ds_dbt.not_null_campaign_info_international_campaign_cause_type": ["model.ds_dbt.campaign_info_international"], "test.ds_dbt.not_null_campaign_info_international_campaign_cta": ["model.ds_dbt.campaign_info_international"], "test.ds_dbt.not_null_campaign_info_international_campaign_action_type": ["model.ds_dbt.campaign_info_international"], "test.ds_dbt.not_null_posts_northstar_id": ["model.ds_dbt.posts"], "test.ds_dbt.not_null_reportbacks_northstar_id": ["model.ds_dbt.reportbacks"], "test.ds_dbt.not_null_signups_northstar_id": ["model.ds_dbt.signups"]}, "child_map": {"model.ds_dbt.snowplow_sessions": ["model.ds_dbt.phoenix_sessions_combined", "test.ds_dbt.not_null_snowplow_sessions_device_id", "test.ds_dbt.not_null_snowplow_sessions_ending_datetime", "test.ds_dbt.not_null_snowplow_sessions_event_id", "test.ds_dbt.not_null_snowplow_sessions_exit_page", "test.ds_dbt.not_null_snowplow_sessions_landing_datetime", "test.ds_dbt.not_null_snowplow_sessions_landing_page", "test.ds_dbt.not_null_snowplow_sessions_num_pages_views", "test.ds_dbt.not_null_snowplow_sessions_session_duration_seconds", "test.ds_dbt.not_null_snowplow_sessions_session_id", "test.ds_dbt.unique_snowplow_sessions_event_id", "test.ds_dbt.unique_snowplow_sessions_session_id"], "model.ds_dbt.snowplow_base_event": ["model.ds_dbt.snowplow_raw_events", "test.ds_dbt.not_null_snowplow_base_event_browser_size", "test.ds_dbt.not_null_snowplow_base_event_device_id", "test.ds_dbt.not_null_snowplow_base_event_event_datetime", "test.ds_dbt.not_null_snowplow_base_event_event_id", "test.ds_dbt.not_null_snowplow_base_event_event_source", "test.ds_dbt.not_null_snowplow_base_event_event_type", "test.ds_dbt.not_null_snowplow_base_event_host", "test.ds_dbt.not_null_snowplow_base_event_path", "test.ds_dbt.not_null_snowplow_base_event_referrer_host", "test.ds_dbt.not_null_snowplow_base_event_referrer_path", "test.ds_dbt.not_null_snowplow_base_event_session_counter", "test.ds_dbt.not_null_snowplow_base_event_session_id", "test.ds_dbt.relationships_snowplow_base_event_northstar_id__id__ref_users_", "test.ds_dbt.unique_snowplow_base_event_event_id", "test.ds_dbt.unique_snowplow_base_event_event_source"], "model.ds_dbt.phoenix_sessions_combined": ["test.ds_dbt.not_null_phoenix_sessions_combined_device_id", "test.ds_dbt.not_null_phoenix_sessions_combined_ending_datetime", "test.ds_dbt.not_null_phoenix_sessions_combined_event_id", "test.ds_dbt.not_null_phoenix_sessions_combined_exit_page", "test.ds_dbt.not_null_phoenix_sessions_combined_landing_datetime", "test.ds_dbt.not_null_phoenix_sessions_combined_landing_page", "test.ds_dbt.not_null_phoenix_sessions_combined_num_pages_views", "test.ds_dbt.not_null_phoenix_sessions_combined_session_duration_seconds", "test.ds_dbt.not_null_phoenix_sessions_combined_session_id", "test.ds_dbt.unique_phoenix_sessions_combined_event_id", "test.ds_dbt.unique_phoenix_sessions_combined_session_id"], "model.ds_dbt.snowplow_phoenix_events": ["model.ds_dbt.phoenix_events_combined", "model.ds_dbt.snowplow_sessions", "model.ds_dbt.snowplow_sessions", "model.ds_dbt.snowplow_sessions", "test.ds_dbt.not_null_snowplow_phoenix_events_browser_size", "test.ds_dbt.not_null_snowplow_phoenix_events_device_id", "test.ds_dbt.not_null_snowplow_phoenix_events_event_datetime", "test.ds_dbt.not_null_snowplow_phoenix_events_event_id", "test.ds_dbt.not_null_snowplow_phoenix_events_event_source", "test.ds_dbt.not_null_snowplow_phoenix_events_host", "test.ds_dbt.not_null_snowplow_phoenix_events_path", "test.ds_dbt.not_null_snowplow_phoenix_events_referrer_host", "test.ds_dbt.not_null_snowplow_phoenix_events_referrer_path", "test.ds_dbt.not_null_snowplow_phoenix_events_session_id", "test.ds_dbt.relationships_snowplow_phoenix_events_northstar_id__id__ref_users_", "test.ds_dbt.unique_snowplow_phoenix_events_event_id", "test.ds_dbt.unique_snowplow_phoenix_events_event_source"], "model.ds_dbt.snowplow_payload_event": ["model.ds_dbt.snowplow_raw_events", "test.ds_dbt.not_null_snowplow_payload_event_event_id", "test.ds_dbt.not_null_snowplow_payload_event_ft_timestamp", "test.ds_dbt.unique_snowplow_payload_event_event_id"], "model.ds_dbt.phoenix_events_combined": ["model.ds_dbt.device_northstar", "test.ds_dbt.not_null_phoenix_events_combined_browser_size", "test.ds_dbt.not_null_phoenix_events_combined_device_id", "test.ds_dbt.not_null_phoenix_events_combined_event_datetime", "test.ds_dbt.not_null_phoenix_events_combined_event_id", "test.ds_dbt.not_null_phoenix_events_combined_event_source", "test.ds_dbt.not_null_phoenix_events_combined_host", "test.ds_dbt.not_null_phoenix_events_combined_path", "test.ds_dbt.not_null_phoenix_events_combined_referrer_host", "test.ds_dbt.not_null_phoenix_events_combined_referrer_path", "test.ds_dbt.not_null_phoenix_events_combined_session_id", "test.ds_dbt.relationships_phoenix_events_combined_northstar_id__id__ref_users_", "test.ds_dbt.unique_phoenix_events_combined_event_id", "test.ds_dbt.unique_phoenix_events_combined_event_source"], "model.ds_dbt.snowplow_raw_events": ["model.ds_dbt.snowplow_phoenix_events", "test.ds_dbt.not_null_snowplow_raw_events_browser_size", "test.ds_dbt.not_null_snowplow_raw_events_device_id", "test.ds_dbt.not_null_snowplow_raw_events_event_datetime", "test.ds_dbt.not_null_snowplow_raw_events_event_id", "test.ds_dbt.not_null_snowplow_raw_events_event_source", "test.ds_dbt.not_null_snowplow_raw_events_event_type", "test.ds_dbt.not_null_snowplow_raw_events_host", "test.ds_dbt.not_null_snowplow_raw_events_path", "test.ds_dbt.not_null_snowplow_raw_events_referrer_host", "test.ds_dbt.not_null_snowplow_raw_events_referrer_path", "test.ds_dbt.not_null_snowplow_raw_events_session_counter", "test.ds_dbt.not_null_snowplow_raw_events_session_id", "test.ds_dbt.relationships_snowplow_raw_events_northstar_id__id__ref_users_", "test.ds_dbt.unique_snowplow_raw_events_event_id", "test.ds_dbt.unique_snowplow_raw_events_event_source"], "model.ds_dbt.device_northstar": [], "model.ds_dbt.email_subscription_topics_raw": ["model.ds_dbt.user_newsletter_subscriptions"], "model.ds_dbt.user_newsletter_subscriptions": [], "model.ds_dbt.member_event_log": ["model.ds_dbt.user_activity", "model.ds_dbt.user_activity"], "model.ds_dbt.gambit_messages_inbound": ["model.ds_dbt.member_event_log", "model.ds_dbt.user_activity"], "model.ds_dbt.messages_flattened": ["model.ds_dbt.gambit_messages_inbound", "model.ds_dbt.gambit_messages_inbound", "model.ds_dbt.gambit_messages_outbound", "model.ds_dbt.gambit_messages_outbound"], "model.ds_dbt.gambit_messages_outbound": [], "model.ds_dbt.post_actions": [], "model.ds_dbt.campaign_info_international": ["test.ds_dbt.not_null_campaign_info_international_campaign_action_type", "test.ds_dbt.not_null_campaign_info_international_campaign_cause_type", "test.ds_dbt.not_null_campaign_info_international_campaign_created_date", "test.ds_dbt.not_null_campaign_info_international_campaign_cta", "test.ds_dbt.not_null_campaign_info_international_campaign_id", "test.ds_dbt.not_null_campaign_info_international_campaign_node_id", "test.ds_dbt.not_null_campaign_info_international_campaign_node_id_title", "test.ds_dbt.not_null_campaign_info_international_campaign_noun", "test.ds_dbt.not_null_campaign_info_international_campaign_run_end_date", "test.ds_dbt.not_null_campaign_info_international_campaign_run_id", "test.ds_dbt.not_null_campaign_info_international_campaign_run_id_title", "test.ds_dbt.not_null_campaign_info_international_campaign_run_start_date", "test.ds_dbt.not_null_campaign_info_international_campaign_type", "test.ds_dbt.not_null_campaign_info_international_campaign_verb", "test.ds_dbt.unique_campaign_info_international_campaign_id", "test.ds_dbt.unique_campaign_info_international_campaign_node_id", "test.ds_dbt.unique_campaign_info_international_campaign_noun", "test.ds_dbt.unique_campaign_info_international_campaign_run_id", "test.ds_dbt.unique_campaign_info_international_campaign_run_start_date"], "model.ds_dbt.campaign_info": ["model.ds_dbt.snowplow_phoenix_events", "test.ds_dbt.not_null_campaign_info_campaign_action_type", "test.ds_dbt.not_null_campaign_info_campaign_cause", "test.ds_dbt.not_null_campaign_info_campaign_cause_type", "test.ds_dbt.not_null_campaign_info_campaign_created_date", "test.ds_dbt.not_null_campaign_info_campaign_cta", "test.ds_dbt.not_null_campaign_info_campaign_id", "test.ds_dbt.not_null_campaign_info_campaign_node_id", "test.ds_dbt.not_null_campaign_info_campaign_node_id_title", "test.ds_dbt.not_null_campaign_info_campaign_noun", "test.ds_dbt.not_null_campaign_info_campaign_run_end_date", "test.ds_dbt.not_null_campaign_info_campaign_run_id", "test.ds_dbt.not_null_campaign_info_campaign_run_id_title", "test.ds_dbt.not_null_campaign_info_campaign_run_start_date", "test.ds_dbt.not_null_campaign_info_campaign_verb", "test.ds_dbt.unique_campaign_info_campaign_id", "test.ds_dbt.unique_campaign_info_campaign_node_id", "test.ds_dbt.unique_campaign_info_campaign_noun", "test.ds_dbt.unique_campaign_info_campaign_run_id", "test.ds_dbt.unique_campaign_info_campaign_run_start_date"], "model.ds_dbt.rock_the_vote": ["model.ds_dbt.posts"], "model.ds_dbt.turbovote": ["model.ds_dbt.posts"], "model.ds_dbt.posts": ["model.ds_dbt.member_event_log", "model.ds_dbt.reportbacks", "model.ds_dbt.reportbacks", "model.ds_dbt.user_activity", "test.ds_dbt.not_null_posts_northstar_id"], "model.ds_dbt.signups": ["model.ds_dbt.member_event_log", "model.ds_dbt.posts", "model.ds_dbt.user_activity", "test.ds_dbt.not_null_signups_northstar_id"], "model.ds_dbt.reportbacks": ["model.ds_dbt.user_activity", "model.ds_dbt.user_activity", "test.ds_dbt.not_null_reportbacks_northstar_id"], "model.ds_dbt.users": ["model.ds_dbt.member_event_log", "model.ds_dbt.member_event_log", "model.ds_dbt.user_activity", "test.ds_dbt.relationships_phoenix_events_combined_northstar_id__id__ref_users_", "test.ds_dbt.relationships_snowplow_base_event_northstar_id__id__ref_users_", "test.ds_dbt.relationships_snowplow_phoenix_events_northstar_id__id__ref_users_", "test.ds_dbt.relationships_snowplow_raw_events_northstar_id__id__ref_users_"], "model.ds_dbt.cio_latest_status": ["model.ds_dbt.users"], "model.ds_dbt.northstar_users_raw": ["model.ds_dbt.northstar_users_deduped"], "model.ds_dbt.northstar_users_deduped": ["model.ds_dbt.member_event_log", "model.ds_dbt.member_event_log", "model.ds_dbt.member_event_log", "model.ds_dbt.user_activity", "model.ds_dbt.users", "model.ds_dbt.users"], "model.ds_dbt.bertly_clicks": ["model.ds_dbt.member_event_log"], "model.ds_dbt.user_activity": [], "snapshot.ds_dbt.northstar_users_snapshot": [], "source.ds_dbt.northstar.users": ["model.ds_dbt.northstar_users_raw"], "test.ds_dbt.unique_snowplow_base_event_event_id": [], "test.ds_dbt.not_null_snowplow_base_event_event_id": [], "test.ds_dbt.unique_snowplow_base_event_event_source": [], "test.ds_dbt.not_null_snowplow_base_event_event_source": [], "test.ds_dbt.not_null_snowplow_base_event_event_datetime": [], "test.ds_dbt.not_null_snowplow_base_event_event_type": [], "test.ds_dbt.not_null_snowplow_base_event_host": [], "test.ds_dbt.not_null_snowplow_base_event_path": [], "test.ds_dbt.not_null_snowplow_base_event_session_id": [], "test.ds_dbt.not_null_snowplow_base_event_session_counter": [], "test.ds_dbt.not_null_snowplow_base_event_browser_size": [], "test.ds_dbt.relationships_snowplow_base_event_northstar_id__id__ref_users_": [], "test.ds_dbt.not_null_snowplow_base_event_device_id": [], "test.ds_dbt.not_null_snowplow_base_event_referrer_host": [], "test.ds_dbt.not_null_snowplow_base_event_referrer_path": [], "test.ds_dbt.unique_snowplow_payload_event_event_id": [], "test.ds_dbt.not_null_snowplow_payload_event_event_id": [], "test.ds_dbt.not_null_snowplow_payload_event_ft_timestamp": [], "test.ds_dbt.unique_snowplow_raw_events_event_id": [], "test.ds_dbt.not_null_snowplow_raw_events_event_id": [], "test.ds_dbt.unique_snowplow_raw_events_event_source": [], "test.ds_dbt.not_null_snowplow_raw_events_event_source": [], "test.ds_dbt.not_null_snowplow_raw_events_event_datetime": [], "test.ds_dbt.not_null_snowplow_raw_events_event_type": [], "test.ds_dbt.not_null_snowplow_raw_events_host": [], "test.ds_dbt.not_null_snowplow_raw_events_path": [], "test.ds_dbt.not_null_snowplow_raw_events_session_id": [], "test.ds_dbt.not_null_snowplow_raw_events_session_counter": [], "test.ds_dbt.not_null_snowplow_raw_events_browser_size": [], "test.ds_dbt.relationships_snowplow_raw_events_northstar_id__id__ref_users_": [], "test.ds_dbt.not_null_snowplow_raw_events_device_id": [], "test.ds_dbt.not_null_snowplow_raw_events_referrer_host": [], "test.ds_dbt.not_null_snowplow_raw_events_referrer_path": [], "test.ds_dbt.unique_snowplow_phoenix_events_event_id": [], "test.ds_dbt.not_null_snowplow_phoenix_events_event_id": [], "test.ds_dbt.not_null_snowplow_phoenix_events_event_datetime": [], "test.ds_dbt.unique_snowplow_phoenix_events_event_source": [], "test.ds_dbt.not_null_snowplow_phoenix_events_event_source": [], "test.ds_dbt.not_null_snowplow_phoenix_events_path": [], "test.ds_dbt.not_null_snowplow_phoenix_events_host": [], "test.ds_dbt.not_null_snowplow_phoenix_events_referrer_host": [], "test.ds_dbt.not_null_snowplow_phoenix_events_referrer_path": [], "test.ds_dbt.not_null_snowplow_phoenix_events_session_id": [], "test.ds_dbt.not_null_snowplow_phoenix_events_browser_size": [], "test.ds_dbt.relationships_snowplow_phoenix_events_northstar_id__id__ref_users_": [], "test.ds_dbt.not_null_snowplow_phoenix_events_device_id": [], "test.ds_dbt.unique_snowplow_sessions_session_id": [], "test.ds_dbt.not_null_snowplow_sessions_session_id": [], "test.ds_dbt.unique_snowplow_sessions_event_id": [], "test.ds_dbt.not_null_snowplow_sessions_event_id": [], "test.ds_dbt.not_null_snowplow_sessions_device_id": [], "test.ds_dbt.not_null_snowplow_sessions_landing_datetime": [], "test.ds_dbt.not_null_snowplow_sessions_ending_datetime": [], "test.ds_dbt.not_null_snowplow_sessions_session_duration_seconds": [], "test.ds_dbt.not_null_snowplow_sessions_num_pages_views": [], "test.ds_dbt.not_null_snowplow_sessions_landing_page": [], "test.ds_dbt.not_null_snowplow_sessions_exit_page": [], "test.ds_dbt.unique_phoenix_events_combined_event_id": [], "test.ds_dbt.not_null_phoenix_events_combined_event_id": [], "test.ds_dbt.not_null_phoenix_events_combined_event_datetime": [], "test.ds_dbt.unique_phoenix_events_combined_event_source": [], "test.ds_dbt.not_null_phoenix_events_combined_event_source": [], "test.ds_dbt.not_null_phoenix_events_combined_path": [], "test.ds_dbt.not_null_phoenix_events_combined_host": [], "test.ds_dbt.not_null_phoenix_events_combined_referrer_host": [], "test.ds_dbt.not_null_phoenix_events_combined_referrer_path": [], "test.ds_dbt.not_null_phoenix_events_combined_session_id": [], "test.ds_dbt.not_null_phoenix_events_combined_browser_size": [], "test.ds_dbt.relationships_phoenix_events_combined_northstar_id__id__ref_users_": [], "test.ds_dbt.not_null_phoenix_events_combined_device_id": [], "test.ds_dbt.unique_phoenix_sessions_combined_session_id": [], "test.ds_dbt.not_null_phoenix_sessions_combined_session_id": [], "test.ds_dbt.unique_phoenix_sessions_combined_event_id": [], "test.ds_dbt.not_null_phoenix_sessions_combined_event_id": [], "test.ds_dbt.not_null_phoenix_sessions_combined_device_id": [], "test.ds_dbt.not_null_phoenix_sessions_combined_landing_datetime": [], "test.ds_dbt.not_null_phoenix_sessions_combined_ending_datetime": [], "test.ds_dbt.not_null_phoenix_sessions_combined_session_duration_seconds": [], "test.ds_dbt.not_null_phoenix_sessions_combined_num_pages_views": [], "test.ds_dbt.not_null_phoenix_sessions_combined_landing_page": [], "test.ds_dbt.not_null_phoenix_sessions_combined_exit_page": [], "test.ds_dbt.unique_campaign_info_campaign_id": [], "test.ds_dbt.not_null_campaign_info_campaign_id": [], "test.ds_dbt.unique_campaign_info_campaign_run_id": [], "test.ds_dbt.not_null_campaign_info_campaign_run_id": [], "test.ds_dbt.not_null_campaign_info_campaign_cause": [], "test.ds_dbt.unique_campaign_info_campaign_run_start_date": [], "test.ds_dbt.not_null_campaign_info_campaign_run_start_date": [], "test.ds_dbt.not_null_campaign_info_campaign_run_end_date": [], "test.ds_dbt.not_null_campaign_info_campaign_created_date": [], "test.ds_dbt.unique_campaign_info_campaign_node_id": [], "test.ds_dbt.not_null_campaign_info_campaign_node_id": [], "test.ds_dbt.not_null_campaign_info_campaign_node_id_title": [], "test.ds_dbt.not_null_campaign_info_campaign_run_id_title": [], "test.ds_dbt.not_null_campaign_info_campaign_action_type": [], "test.ds_dbt.not_null_campaign_info_campaign_cause_type": [], "test.ds_dbt.unique_campaign_info_campaign_noun": [], "test.ds_dbt.not_null_campaign_info_campaign_noun": [], "test.ds_dbt.not_null_campaign_info_campaign_verb": [], "test.ds_dbt.not_null_campaign_info_campaign_cta": [], "test.ds_dbt.unique_campaign_info_international_campaign_id": [], "test.ds_dbt.not_null_campaign_info_international_campaign_id": [], "test.ds_dbt.unique_campaign_info_international_campaign_node_id": [], "test.ds_dbt.not_null_campaign_info_international_campaign_node_id": [], "test.ds_dbt.not_null_campaign_info_international_campaign_node_id_title": [], "test.ds_dbt.unique_campaign_info_international_campaign_run_id": [], "test.ds_dbt.not_null_campaign_info_international_campaign_run_id": [], "test.ds_dbt.not_null_campaign_info_international_campaign_run_id_title": [], "test.ds_dbt.not_null_campaign_info_international_campaign_type": [], "test.ds_dbt.unique_campaign_info_international_campaign_run_start_date": [], "test.ds_dbt.not_null_campaign_info_international_campaign_run_start_date": [], "test.ds_dbt.not_null_campaign_info_international_campaign_run_end_date": [], "test.ds_dbt.not_null_campaign_info_international_campaign_created_date": [], "test.ds_dbt.unique_campaign_info_international_campaign_noun": [], "test.ds_dbt.not_null_campaign_info_international_campaign_noun": [], "test.ds_dbt.not_null_campaign_info_international_campaign_verb": [], "test.ds_dbt.not_null_campaign_info_international_campaign_cause_type": [], "test.ds_dbt.not_null_campaign_info_international_campaign_cta": [], "test.ds_dbt.not_null_campaign_info_international_campaign_action_type": [], "test.ds_dbt.not_null_posts_northstar_id": [], "test.ds_dbt.not_null_reportbacks_northstar_id": [], "test.ds_dbt.not_null_signups_northstar_id": []}, "generated_at": "2020-01-30T15:39:24.500208Z", "metadata": {"project_id": "7671f673216354055c72b9982e1bfb02", "user_id": "fce4653e-d655-482e-951d-c509fb96e16f", "send_anonymous_usage_stats": true}, "disabled": []}